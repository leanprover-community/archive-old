[
    {
        "content": "<p>In my <a href=\"https://github.com/leanprover-community/mathlib4/pull/561\">work-in-progress on <code>mk_iff</code></a>, I have the <a href=\"https://github.com/leanprover-community/mathlib4/blob/48854c3d8f651646b5b23573ef5f0d26c2d27877/Mathlib/Tactic/MkIffOfInductiveProp.lean#L121-L126\">following function</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">subgoals</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.TermElabM.run</span> <span class=\"bp\">$</span> <span class=\"n\">Elab.Tactic.run</span> <span class=\"n\">mvar</span> <span class=\"k\">do</span>\n    <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">sg1</span><span class=\"o\">,</span> <span class=\"n\">sg2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">subgoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected two subgoals\"</span>\n  <span class=\"n\">sg1.assign</span> <span class=\"n\">e</span>\n  <span class=\"n\">pure</span> <span class=\"n\">sg2</span>\n</code></pre></div>\n<p>Is there a better way to do this? I kinda want to call the <a href=\"https://github.com/leanprover-community/mathlib4/blob/d78a3d45bf33119f21ca18cfd2f822b747cc9a98/Mathlib/Tactic/Existsi.lean#L28-L29\">existing <code>existsi</code> tactic</a>, but that would involve delaborating <code>e</code> from <code>Expr</code> back to <code>Syntax</code>, and it feels wrong.</p>\n<p>(I've been in this situation a few times lately, where I'm working in <code>MetaM</code> and everything is already elaborated, and I want to call some tactics that only defined to operate on syntax.)</p>",
        "id": 308795753,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668003361
    },
    {
        "content": "<p>A trick you can do to interpolate exprs into syntax is to use assigned metavars. You create a new metavar, immediately assign it, and then use the <code>?a</code> syntax to refer to the metavar by  name in the syntax</p>",
        "id": 308796098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668003453
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar'</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId'</span> <span class=\"o\">:=</span> <span class=\"n\">mvar'.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"n\">mvarId'.assign</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">subgoals</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.TermElabM.run</span> <span class=\"bp\">$</span> <span class=\"n\">Elab.Tactic.run</span> <span class=\"n\">mvar</span> <span class=\"k\">do</span>\n    <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span> <span class=\"bp\">???</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">sg</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">subgoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected one subgoal\"</span>\n  <span class=\"n\">pure</span> <span class=\"n\">sg</span>\n</code></pre></div>",
        "id": 308797355,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668003815
    },
    {
        "content": "<p>what goes in the <code>???</code> in the tactic syntax ?</p>",
        "id": 308797422,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668003837
    },
    {
        "content": "<p>I think <code>?$(mkIdent mvarId'.name)</code></p>",
        "id": 308797567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668003866
    },
    {
        "content": "<p>Hm. I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar'</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">MetavarKind.synthetic</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId'</span> <span class=\"o\">:=</span> <span class=\"n\">mvar'.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"n\">mvarId'.assign</span> <span class=\"n\">e</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">subgoals</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.TermElabM.run</span> <span class=\"bp\">$</span> <span class=\"n\">Elab.Tactic.run</span> <span class=\"n\">mvar</span> <span class=\"k\">do</span>\n    <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">mvarId'.name</span><span class=\"o\">):</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">sg</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">subgoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected one subgoal\"</span>\n  <span class=\"n\">pure</span> <span class=\"n\">sg</span>\n</code></pre></div>\n<p>and it's giving me an error because it's still producing two subgoals, rather than just one.</p>",
        "id": 308801652,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668004962
    },
    {
        "content": "<p>It's usually easiest to create the synthetic metavatiable using <code>elabTerm</code>, something like this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">mvar'</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"k\">let</span> <span class=\"n\">mvarId'</span> <span class=\"o\">:=</span> <span class=\"n\">mvar'.mvarId</span><span class=\"bp\">!</span>\n<span class=\"n\">mvarId'.assign</span> <span class=\"n\">e</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n</code></pre></div>",
        "id": 308822741,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668011076
    },
    {
        "content": "<p>yep, this seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">subgoals</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.TermElabM.run</span> <span class=\"bp\">$</span> <span class=\"n\">Elab.Tactic.run</span> <span class=\"n\">mvar</span> <span class=\"k\">do</span>\n    <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvar'</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarId'</span> <span class=\"o\">:=</span> <span class=\"n\">mvar'.mvarId</span><span class=\"bp\">!</span>\n      <span class=\"n\">mvarId'.assign</span> <span class=\"n\">e</span>\n      <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">sg</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">subgoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected one subgoal\"</span>\n  <span class=\"n\">pure</span> <span class=\"n\">sg</span>\n</code></pre></div>",
        "id": 308827840,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668012627
    },
    {
        "content": "<p>Is the <code>withFreshMacroScope</code> so that the mvar name <code>?a</code> does not collide with any existing mvars?</p>",
        "id": 308828072,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668012691
    },
    {
        "content": "<p>You could even factor that out as a MetaM level <code>refine</code>, so that others don't have to jump through the same hoops. :-)</p>",
        "id": 308924576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668059709
    },
    {
        "content": "<p>This technique is really neat. It seems like a generic way to “use <code>Expr</code>s directly in syntax” during elaboration, which I’ve found myself wanting to do a couple times even in my short time metaprogramming in Lean!</p>\n<p>I wonder if it warrants being packaged into something that wraps around <code>`()</code> somehow…like a special kind of “let”/“with”/“where”. It’d be neat to write something vaguely like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">e'</span>\n</code></pre></div>\n<p>where <code>e e' : Expr</code>.</p>",
        "id": 309067971,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668110323
    },
    {
        "content": "<p>well that <code>e</code> would have to be <code>Syntax</code>...</p>",
        "id": 309070137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668111079
    },
    {
        "content": "<p>I think a reasonable way to package this up would be a function like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toSyntax</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">assign</span> <span class=\"n\">e</span>\n  <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n</code></pre></div>\n<p>so you could just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">subgoals</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.TermElabM.run</span> <span class=\"bp\">$</span> <span class=\"n\">Elab.Tactic.run</span> <span class=\"n\">mvar</span> <span class=\"k\">do</span>\n    <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">toSyntax</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">sg</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">subgoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected one subgoal\"</span>\n  <span class=\"n\">pure</span> <span class=\"n\">sg</span>\n</code></pre></div>",
        "id": 309070777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668111342
    },
    {
        "content": "<blockquote>\n<p>well that <code>e</code> would have to be <code>Syntax</code>...</p>\n</blockquote>\n<p>I was imagining that that <code>with</code> could be a macro that did what needed to be done with an <code>Expr</code> <code>e</code> behind the scenes to have this effect, but <code>toSyntax</code> is nicer and keeps the types clean and visible! :)</p>",
        "id": 309073835,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668112352
    },
    {
        "content": "<p>However, I am worried about the macro scopes…does <code>toSyntax</code> automatically create the scopes necessary to avoid conflict with goals named <code>a</code>?</p>",
        "id": 309074039,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668112442
    },
    {
        "content": "<p>I think the <code>withFreshMacroScope</code> in the first line of <code>toSyntax</code> handles that.</p>",
        "id": 309074401,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668112564
    },
    {
        "content": "<p>Oops—I’m on mobile and hadn’t realized that that code block scrolls right, lol!</p>",
        "id": 309074490,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668112602
    },
    {
        "content": "<p>Anyway, would love to see this become part of Lean 4, as it’s super convenient. :)</p>",
        "id": 309074852,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668112739
    }
]