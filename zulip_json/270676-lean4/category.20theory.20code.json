[
    {
        "content": "<p>Is anyone working on porting category theory to Lean 4 or has working code for it? I would be interested in playing with it.</p>\n<p>I'm mainly interested in natural transformations, left and right Kan extension and probably ends and coends as they can be apparently used to construct Kan extension.</p>\n<hr>\n<p>I want to do automatic differentiation(AD) for code with side effects and I believe that AD for code with side effects is just a Kan extension of AD for pure code along the embedding of pure code in code with side effects.</p>\n<p>All this categorical nonsense hurts my brain and I have learned about it quite recently. So I want to usen Lean to expand all the \"nonsensical\" definitions and help me understand them.</p>",
        "id": 287036868,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1655895800
    },
    {
        "content": "<p>Of course there are people working on porting all of mathlib to Lean 4! And there are two different flavours of category theory in there -- stuff in <code>src/control</code> (used by tactic-writers) and stuff in <code>src/category_theory</code> (used by mathematicians). Do you want the former? \"Are your functors lawful\" is I think the question.</p>",
        "id": 287037555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655896281
    },
    {
        "content": "<p>Ohh, I think I was looking only at the mathlib4 repo and I could not find any category theory there and I'm not up to date on how to use the actual mathlib in Lean 4 or if it is/not possible right now.</p>\n<p>Yes, all the stuff I'm working with is lawful.</p>",
        "id": 287038206,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1655896715
    },
    {
        "content": "<p>My understanding of the port situation is that oleans are ported and you could use them right now (but you won't have \"jump to definition\" because there won't be a definition, and I think there are other disadvantages), but porting Lean files is still a work in progress. However my understanding is that things only get hairy port-wise once you start using fancy Lean 3 tactics which don't exist yet in Lean 4, and category theory doesn't import much. So one could ask the following concrete question: what happens when you try and port the file <code>src/category_theory/category/basic.lean</code> to Lean 4 using the leanfile porting tools? I don't know the answer to this, or how to check.</p>",
        "id": 287048280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655902173
    },
    {
        "content": "<p>It works, but it's a bit difficult to set up. Here's the setup that currently works for me: <a href=\"#narrow/stream/287929-mathlib4/topic/How.20to.20install.20mathlib4\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/How.20to.20install.20mathlib4</a></p>",
        "id": 287051781,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1655903783
    },
    {
        "content": "<p>I should at least try the approach with oleans. However, it looks like there is no Kan extension or co/ends in mathlib and defining these might be difficult for me without the direct access to the already existing source code.</p>\n<p>As this is not a high priority for me, I'm happy to wait for a proper mathlib port.</p>\n<p>Hmm now I remembered that <span class=\"user-mention\" data-user-id=\"198266\">@Sebastian Reichelt</span> is doing something with categories, and even has some basic notions defined here <a href=\"https://github.com/SReichelt/universe-abstractions/tree/main/UniverseAbstractions/CategoryTheory\">https://github.com/SReichelt/universe-abstractions/tree/main/UniverseAbstractions/CategoryTheory</a> but the extra layers of abstraction are a bit over my head</p>",
        "id": 287057008,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1655906074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Thanks for the setup, I will look into it!</p>",
        "id": 287057142,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1655906148
    },
    {
        "content": "<p>We have Kan extensions in mathlib (the Lean3 version) -- see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Ran\">docs#category_theory.Ran</a> and the file it's in</p>",
        "id": 287057542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655906313
    },
    {
        "content": "<p>Great! I guess I do not know how to search mathlib doc :)</p>",
        "id": 287070823,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1655911894
    }
]