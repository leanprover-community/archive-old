[
    {
        "content": "<p>In a similar fashion as <a href=\"#narrow/stream/270676-lean4/topic/Cases.20not.20resolving.20match\">a previous problem with cases</a>, I'm having problems when performing induction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Thing</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>   <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span>   <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Combo</span> <span class=\"n\">where</span>\n  <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"mi\">1</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Combo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">c.thing</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c.list</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Here, the goal state before and after the induction is exactly the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Combo</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"mi\">1</span> <span class=\"n\">c.list</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>I need <code>c.list</code> to be resolved as <code>[]</code> in the <code>nil</code> case though to move on.<br>\nWhy is this not happening?</p>",
        "id": 260437366,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1636133176
    },
    {
        "content": "<p>I don't think <code>induction</code> will replace occurrences of the expression in the hypotheses unless you use them in <code>generalizing</code></p>",
        "id": 260437915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636133429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Induction.20not.20applied.20to.20hypothesis/near/260437915\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>induction</code> will replace occurrences of the expression in the hypotheses unless you use them in <code>generalizing</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Combo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">c.thing</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c.list</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>\n<p>doesn't do it either :/</p>",
        "id": 260438408,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1636133676
    },
    {
        "content": "<p>In lean 3 the pattern was basically this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Combo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">c.list</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Which seems to work still.</p>",
        "id": 260446356,
        "sender_full_name": "Chris B",
        "timestamp": 1636137206
    }
]