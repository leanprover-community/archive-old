[
    {
        "content": "<p>I finished a first proof-of-concept of a mathlib porting tool: <a href=\"https://github.com/dselsam/port34\">https://github.com/dselsam/port34</a> The tool produces lean4 <code>.olean</code> files for every lean3 <code>.lean</code> file in mathlib. A lot of information is preserved, including (kernel) terms, attributes (e.g. reducible, class, instance, simp), mixfix notation, export declarations, and more. Some definitions and theorems can be restated easily but most are still very cumbersome to elaborate due to a myriad of differences between the two systems that have yet to be accounted for.</p>",
        "id": 224428510,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1611892887
    },
    {
        "content": "<p>This is amazing!  Two things I noticed in case anybody else runs into them as well:</p>\n<ul>\n<li>Even though the lean4 path is hardcoded in the makefile, you still need to add lean4 to PATH or make an elan override.</li>\n<li>You need to manually create the <code>lean3/library/all.lean</code> and <code>mathlib/src/all.lean</code> files.</li>\n</ul>",
        "id": 224446556,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611912134
    },
    {
        "content": "<p>After half an hour and 32 gigabytes of RAM, <code>make portMathlib</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">addDecl</span><span class=\"o\">]</span> <span class=\"n\">END</span>   <span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">dual</span> <span class=\"n\">inner_product_space.norm_to_dual_symm_apply</span>\n<span class=\"o\">[</span><span class=\"n\">genOLeanFor</span><span class=\"o\">]</span> <span class=\"n\">END</span>   <span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">dual</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib.category_theory.sheaf.subcanonical'</span>\n<span class=\"n\">Command</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 224449781,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1611914279
    }
]