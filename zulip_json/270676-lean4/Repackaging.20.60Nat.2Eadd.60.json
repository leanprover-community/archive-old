[
    {
        "content": "<p>The documentation for <code>DiscrTree</code> says \"Moreover, it is the metaprogrammer's responsibility to re-pack applications such as<br>\n<code>Nat.add a b</code> into <code>Add.add Nat inst a b</code>\".</p>\n<p>Is there a convenient way to do this, or recognize this is needed? The function <code>Nat.add</code>is defined earlier, and then an instance of <code>Add.add</code> lets us repackage. So I am confused about what I should look for to know what the repackaged form is.</p>\n<p>Thanks.</p>",
        "id": 276887941,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1648480249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> We can just replace the terms since <code>Nat.add a b</code> is definitionally equal to <code>a + b</code>.<br>\nNote that <code>simp</code> does the repackaging for us because we have <code>simp</code> theorems such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_eq</span> <span class=\"o\">:</span> <span class=\"n\">Nat.add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mul_eq</span> <span class=\"o\">:</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sub_eq</span> <span class=\"o\">:</span> <span class=\"n\">Nat.sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The uniform representation is important because of proof automation. To efficiently apply <code>simp</code> and other forms of proof automation, we use a \"term indexing\" data structure. For <code>simp</code>, we use a \"discrimination tree\", and it helps filter which <code>simp</code> theorems can be applied to a subterm. It is not feasible to sequentially try all of them. Most arithmetic-related <code>simp</code> theorems use <code>x + y</code> (i.e., <code>HAdd.hAdd ... x y</code>) to represent addition, and will only be tried in subterms of the same form.</p>",
        "id": 276897169,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648484359
    },
    {
        "content": "<p>Thanks. What I meant was in general how do we know what are all the valid replacements?</p>",
        "id": 276919723,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1648495425
    }
]