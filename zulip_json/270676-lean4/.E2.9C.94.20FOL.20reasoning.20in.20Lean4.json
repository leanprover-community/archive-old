[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span> has marked this topic as resolved.</p>",
        "id": 291430583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659189839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> nice example of how we can add 'automation' to proofs. But the line below is the tricky part for me. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span> <span class=\"n\">Classical.ofNonempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Are the two lines below really necessary?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">u.nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">u</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u.nonempty</span>\n</code></pre></div>",
        "id": 291439438,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659199966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> Sorry for the denseness of that line. Here's what it's essentially equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">and_forall</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"n\">c</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">mpr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">case</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">Classical.ofNonempty</span>\n      <span class=\"n\">exact</span> <span class=\"n\">b</span>\n    <span class=\"n\">case</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">b</span>\n      <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"n\">exact</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 291442849,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659203975
    },
    {
        "content": "<p>This lemma depends on <code>α</code> being nonempty since if it's empty the forall is vacuously true and it would imply <code>p</code> is true, no matter what it might be.</p>\n<p>It's not necessary for <code>u</code> to be nonempty to prove your theorem. I'm sure there are other lemmas that you could use with <code>simp</code> that don't require this assumption.</p>",
        "id": 291442916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659204030
    },
    {
        "content": "<blockquote>\n<p>This lemma depends on α being nonempty since if it's empty the forall is vacuously true and it would imply p is true, no matter what it might be.</p>\n</blockquote>\n<p>Sure, the logic/ reasoning I got, the syntax was the problem. So the <code>axiom</code> and <code>instance</code> are there to say that the constant <code>opaque u : Type</code> that I introduced is nonempty, right? So to match the requirement of the theorem <code>[Nonempty α]</code>, am I right?</p>",
        "id": 291445422,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1659207463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> You can get this for free for <code>u</code> without an axiom by defining <code>u</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">u.nonemptyType</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">u.nonemptyType.type</span>\n<span class=\"kd\">instance</span> <span class=\"n\">u.nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u.nonemptyType.property</span>\n</code></pre></div>",
        "id": 291447376,
        "sender_full_name": "Mac",
        "timestamp": 1659210111
    }
]