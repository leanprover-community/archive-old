[
    {
        "content": "<p>Hm, is there an example of a valid request that can be queried to the lean4 server? I'm struggling to get a valid response</p>",
        "id": 258382104,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634741635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as unresolved.</p>",
        "id": 258382194,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634741656
    },
    {
        "content": "<p>It keeps saying <code>Watchdog error: Cannot read LSP request: Invalid header field: ...</code></p>",
        "id": 258382313,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634741701
    },
    {
        "content": "<p>I think the easiest way to get some valid communication is to snoop on vscode; there is a setting you can enable to make any LSP extension print all traffic</p>",
        "id": 258382383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634741731
    },
    {
        "content": "<p>Another way to snoop is to make vscode call <code>my_lean</code> which is a shell script like <code>tee in.txt | lean --server | tee out.txt</code></p>",
        "id": 258383054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634741976
    },
    {
        "content": "<p>Thanks! I wanna see how far I can go with this. I had never heard of LSP before so it's a learning experience :D</p>",
        "id": 258383991,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634742278
    },
    {
        "content": "<p>Which extension should I use? Seems like the <code>lean</code> one isn't compatible with Lean 4. Is it the case?</p>",
        "id": 258388638,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634743897
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/iGrgG3tYH-x56-TH0eACKMpd/image.png\">image.png</a> I'm getting similar errors. The plugin seems to be trying to send requests to the lean3 server</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iGrgG3tYH-x56-TH0eACKMpd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iGrgG3tYH-x56-TH0eACKMpd/image.png\"></a></div>",
        "id": 258389179,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634744087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> you should be using the <code>lean4</code> extension for Lean 4. The <code>lean</code> extension is for Lean 3.</p>",
        "id": 258389291,
        "sender_full_name": "Mac",
        "timestamp": 1634744123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20server/near/258382383\">said</a>:</p>\n<blockquote>\n<p>I think the easiest way to get some valid communication is to snoop on vscode; there is a setting you can enable to make any LSP extension print all traffic</p>\n</blockquote>\n<p>Searched a lot but couldn't find such setting. does the lean4 plugin have it available?</p>",
        "id": 258395051,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634746013
    },
    {
        "content": "<p>Nevermind, I think I found it</p>",
        "id": 258396256,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634746424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> in the VSCode settings, these are the <code>Server Logging</code> settings from the Lean 4 extension.</p>",
        "id": 258397810,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1634746940
    },
    {
        "content": "<p>Alright I was able to extract a request from the log:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"jsonrpc\"</span><span class=\"o\">:</span><span class=\"s2\">\"2.0\"</span><span class=\"o\">,</span><span class=\"s2\">\"method\"</span><span class=\"o\">:</span><span class=\"s2\">\"textDocument/didOpen\"</span><span class=\"o\">,</span><span class=\"s2\">\"params\"</span><span class=\"o\">:{</span><span class=\"s2\">\"textDocument\"</span><span class=\"o\">:{</span><span class=\"s2\">\"uri\"</span><span class=\"o\">:</span><span class=\"s2\">\"file:///home/arthur/ex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"languageId\"</span><span class=\"o\">:</span><span class=\"s2\">\"lean4\"</span><span class=\"o\">,</span><span class=\"s2\">\"version\"</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"text\"</span><span class=\"o\">:</span><span class=\"s2\">\"variable (p q: Prop)</span><span class=\"se\">\\n\\n</span><span class=\"s2\">example : p ↔ p := by</span><span class=\"se\">\\n</span><span class=\"s2\">  apply Iff.intro</span><span class=\"se\">\\n</span><span class=\"s2\">  {intro h; apply h}</span><span class=\"se\">\\n</span><span class=\"s2\">  {intro h; apply h}\"</span><span class=\"o\">}}}</span>\n</code></pre></div>\n<p>But then I call <code>lean --server &lt; in.json</code> and it responds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Watchdog</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">read</span> <span class=\"n\">LSP</span> <span class=\"n\">request</span><span class=\"o\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">header</span> <span class=\"n\">field</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"s2\">\"jsonrpc\"</span><span class=\"o\">:</span><span class=\"s2\">\"2.0\"</span><span class=\"o\">,</span><span class=\"s2\">\"method\"</span><span class=\"o\">:</span><span class=\"s2\">\"textDocument/didOpen\"</span><span class=\"o\">,</span><span class=\"s2\">\"params\"</span><span class=\"o\">:{</span><span class=\"s2\">\"textDocument\"</span><span class=\"o\">:{</span><span class=\"s2\">\"uri\"</span><span class=\"o\">:</span><span class=\"s2\">\"file:///home/arthur/ex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"languageId\"</span><span class=\"o\">:</span><span class=\"s2\">\"lean4\"</span><span class=\"o\">,</span><span class=\"s2\">\"version\"</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"text\"</span><span class=\"o\">:</span><span class=\"s2\">\"variable (p q: Prop)</span><span class=\"se\">\\n\\n</span><span class=\"s2\">example : p ↔ p := by</span><span class=\"se\">\\n</span><span class=\"s2\">  apply Iff.intro</span><span class=\"se\">\\n</span><span class=\"s2\">  {intro h; apply h}</span><span class=\"se\">\\n</span><span class=\"s2\">  {intro h; apply h}\"</span><span class=\"o\">}}}</span>\n</code></pre></div>",
        "id": 258400933,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634748161
    },
    {
        "content": "<p>I suspect I am doing something fundamentally wrong</p>",
        "id": 258401594,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634748407
    },
    {
        "content": "<p>The log does not include the HTTP-like LSP headers, see <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/server/open_content.log\">https://github.com/leanprover/lean4/blob/master/tests/lean/server/open_content.log</a> and other <code>.log</code> files in that directory</p>",
        "id": 258401686,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634748448
    },
    {
        "content": "<p>It would probably be easier to a) write the whole REPL in Lean or, if you e.g. want to use a readline-like library that has not yet been packaged for Lean, b) use a custom protocol between the main REPL program and a custom Lean program, where \"protocol\" could be as simple as \"a single escaped line per request and response\"</p>",
        "id": 258402276,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634748648
    },
    {
        "content": "<p>How would that custom Lean program be? How would it communicate with the main REPL program?</p>",
        "id": 258404049,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634749222
    },
    {
        "content": "<p>Read from <code>IO.getStdin</code>, write via <code>IO.println</code> :)</p>",
        "id": 258404475,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634749358
    },
    {
        "content": "<p>The value read would be a string right? how to execute lean string code inside lean itself?</p>",
        "id": 258404906,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634749522
    }
]