[
    {
        "content": "<p>I've started looking into working on the wasm emscripten build support (using nix).<br>\nIt seems like it is currently broken as it is descirbed in emscripten.md</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>mkdir -p build/emscripten\n<span class=\"nb\">cd</span> build/emscripten\nemccmake cmake ../../src -DCMAKE_BUILD_TYPE<span class=\"o\">=</span>Emscripten\nmake\n</code></pre></div>",
        "id": 267660653,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641942863
    },
    {
        "content": "<p>That could very well be the case since it's not tested by CI right now</p>",
        "id": 267692050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641974712
    },
    {
        "content": "<p>Also fair warning, the last time I tried this, the wasm libc++ cached by Nixpkgs was missing exception support, and trying to add it lead to some inscrutable error message afair <a href=\"https://github.com/Kha/nixpkgs/commit/6c586acad642bf57f65a531d765f08af18da3fe6\">https://github.com/Kha/nixpkgs/commit/6c586acad642bf57f65a531d765f08af18da3fe6</a></p>",
        "id": 267692474,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641975093
    },
    {
        "content": "<p>Ok. Thanks for the heads up. I think I'm just going to try setting <code>LEAN_CC</code> to <code>emcc</code> and use <code>buildLeanPackage</code></p>",
        "id": 267708537,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641984990
    },
    {
        "content": "<p>Is it strictly necessary to link with gmp? I'm getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">file</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">lqd2xr20f8qmmvss3nrbph22kln8a0p5</span><span class=\"bp\">-</span><span class=\"n\">gmp</span><span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libgmp.so</span>\n</code></pre></div>",
        "id": 267775716,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642016575
    },
    {
        "content": "<p>As far as I know gmp is used for efficient computation on <code>Nat</code> internally? so I'd say yes it is although there might be a way to get rid off it at the cost of <code>Nat</code> efficiency.</p>",
        "id": 267778934,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642018063
    },
    {
        "content": "<p>See cmake option <code>USE_GMP</code> and <a href=\"https://github.com/leanprover/lean4/issues/827\">https://github.com/leanprover/lean4/issues/827</a>. For your use case it should be fine to require it.</p>",
        "id": 267781164,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642019171
    },
    {
        "content": "<p>So I'm trying to use <code>emcc</code> directly inside <code>buildLeanPackage</code> and it has been surprisingly successful (After setting <code>LEANC_GMP=\" \"</code>), but wasm only has experimental multithreading support currently so I wanted to disable it by passing </p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>  <span class=\"ss\">leancpp-single-thread =</span> leancpp<span class=\"o\">.</span>overrideAttrs <span class=\"p\">(</span>old<span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"ss\">cmakeFlags =</span> old<span class=\"o\">.</span>cmakeFlags <span class=\"o\">++</span> <span class=\"p\">[</span> <span class=\"s2\">\"-ULEAN_MULTI_THREAD\"</span> <span class=\"s2\">\"-UMULTI_THREAD\"</span> <span class=\"s2\">\"-UUSE_GMP\"</span> <span class=\"p\">];</span>\n  <span class=\"p\">});</span>\n</code></pre></div>\n<p>Although this does not change the C macros inside the build. Do you know why?</p>",
        "id": 268316112,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642454336
    },
    {
        "content": "<p>I don't think you want to use <code>-U</code>. Use <code>-DUSE_GMP=OFF</code> etc.</p>",
        "id": 268317020,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642455173
    },
    {
        "content": "<p>I've managed to build most of lean with emscripten, but I still need to compile the kernel and runtime to statically link.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"bp\">-</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">file</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">object.cpp.o</span>\n</code></pre></div>\n<p>I'm running into this error when compiling Lean with <code>emcc</code> and I suspect this is because object.cpp.o was not compiled with emscripten. So I'm trying to compile leancpp with emscripten.</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code>  <span class=\"ss\">leancpp-emscripten =</span> leancpp-single-thread<span class=\"o\">.</span>overrideAttrs <span class=\"p\">(</span>old<span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"ss\">name =</span> <span class=\"s2\">\"leancpp-emscripten\"</span><span class=\"p\">;</span>\n    <span class=\"ss\">nativeBuildInputs =</span> <span class=\"p\">[</span> cmake emscripten <span class=\"p\">];</span>\n    <span class=\"ss\">cmakeFlags =</span> old<span class=\"o\">.</span>cmakeFlags <span class=\"o\">++</span> <span class=\"p\">[</span> <span class=\"s2\">\"-DCMAKE_BUILD_TYPE=Emscripten\"</span> <span class=\"p\">];</span>\n    <span class=\"ss\">preConfigure =</span> <span class=\"s1\">''</span>\n<span class=\"s1\">      # ignore absence of submodule</span>\n<span class=\"s1\">      sed -i </span><span class=\"err\">'</span><span class=\"s1\">s!lake/Lake.lean!!</span><span class=\"err\">'</span><span class=\"s1\"> CMakeLists.txt</span>\n<span class=\"s1\">    ''</span><span class=\"p\">;</span>\n    <span class=\"ss\">configurePhase =</span> <span class=\"s1\">''</span>\n<span class=\"s1\">      sh -c \"$preConfigure\"</span>\n<span class=\"s1\">      mkdir build</span>\n<span class=\"s1\">      cd build</span>\n<span class=\"s1\">      emcmake cmake .. $cmakeFlags</span>\n<span class=\"s1\">      patchShebangs .</span>\n<span class=\"s1\">    ''</span><span class=\"p\">;</span>\n  <span class=\"p\">});</span>\n</code></pre></div>\n<p>gives this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">unpacking</span> <span class=\"n\">sources</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">unpacking</span> <span class=\"n\">source</span> <span class=\"n\">archive</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">zzbyl3jkby9dgdkc25idhl76pb937064</span><span class=\"bp\">-</span><span class=\"n\">source</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">source</span> <span class=\"n\">root</span> <span class=\"n\">is</span> <span class=\"n\">source</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">patching</span> <span class=\"n\">sources</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">configuring</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">configure</span><span class=\"o\">:</span> <span class=\"n\">cmake</span> <span class=\"bp\">..</span> <span class=\"bp\">-</span><span class=\"n\">DSTAGE</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">DPREV_STAGE</span><span class=\"bp\">=./</span><span class=\"n\">faux</span><span class=\"bp\">-</span><span class=\"n\">prev</span><span class=\"bp\">-</span><span class=\"n\">stage</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GITHASH</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DMULTI_THREAD</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DUSE_GMP</span><span class=\"bp\">=</span><span class=\"n\">OFF</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_BUILD_TYPE</span><span class=\"bp\">=</span><span class=\"n\">Emscripten</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_TOOLCHAIN_FILE</span><span class=\"bp\">=/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">jrjpc9b1b3kjvj46ylx748awn0i20gp8</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">cmake</span><span class=\"bp\">/</span><span class=\"n\">Modules</span><span class=\"bp\">/</span><span class=\"n\">Platform</span><span class=\"bp\">/</span><span class=\"n\">Emscripten.cmake</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_CROSSCOMPILING_EMULATOR</span><span class=\"bp\">=/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p27ckm6j4i1g4v5k16rqc0xhp167ympw</span><span class=\"bp\">-</span><span class=\"n\">nodejs</span><span class=\"bp\">-</span><span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">node</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"c1\">-- 32-bit machine detected</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"c1\">-- Enabled multi-thread support</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">CMake</span> <span class=\"n\">Warning</span> <span class=\"n\">at</span> <span class=\"n\">CMakeLists.txt</span><span class=\"o\">:</span><span class=\"mi\">253</span> <span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">):</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span>   <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">ccache</span><span class=\"o\">,</span> <span class=\"n\">prepare</span> <span class=\"n\">for</span> <span class=\"n\">longer</span> <span class=\"n\">and</span> <span class=\"n\">redundant</span> <span class=\"n\">builds...</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"c1\">-- Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"c1\">-- Configuring done</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"c1\">-- Generating done</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"c1\">-- Build files have been written to: /build/source/build</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">building</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">build</span> <span class=\"n\">flags</span><span class=\"o\">:</span> <span class=\"n\">SHELL</span><span class=\"bp\">=/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">l0wlqpbsvh1pgvhcdhw7qkka3d31si7k</span><span class=\"bp\">-</span><span class=\"n\">bash</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p8</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">bash</span> <span class=\"n\">leancpp</span> <span class=\"n\">leanrt</span> <span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec</span> <span class=\"n\">shell</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"o\">[</span>  <span class=\"mi\">1</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">CXX</span> <span class=\"n\">object</span> <span class=\"n\">initialize</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">initialize.dir</span><span class=\"bp\">/</span><span class=\"n\">init.cpp.o</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">python</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">PATH</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">initialize</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">initialize.dir</span><span class=\"bp\">/</span><span class=\"n\">build.make</span><span class=\"o\">:</span><span class=\"mi\">77</span><span class=\"o\">:</span> <span class=\"n\">initialize</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">initialize.dir</span><span class=\"bp\">/</span><span class=\"n\">init.cpp.o</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">Makefile2</span><span class=\"o\">:</span><span class=\"mi\">1394</span><span class=\"o\">:</span> <span class=\"n\">initialize</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">initialize.dir</span><span class=\"bp\">/</span><span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">Makefile2</span><span class=\"o\">:</span><span class=\"mi\">1193</span><span class=\"o\">:</span> <span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leancpp.dir</span><span class=\"bp\">/</span><span class=\"n\">rule</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">654</span><span class=\"o\">:</span> <span class=\"n\">leancpp</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>What can be causing this error?</p>",
        "id": 268724575,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642698448
    },
    {
        "content": "<p>It fails here</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#if defined(LEAN_EMSCRIPTEN)</span>\n<span class=\"w\">        </span><span class=\"c1\">// `Crypto.getRandomValues` documents `dest` should be at most 65536 bytes.</span>\n<span class=\"w\">        </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">read_sz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">remain</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">65536</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#else</span>\n<span class=\"w\">        </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">read_sz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">remain</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#endif</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">anderscs</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">io.cpp</span><span class=\"o\">:</span><span class=\"mi\">402</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">matching</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"n\">call</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">min'</span>\n        <span class=\"n\">size_t</span> <span class=\"n\">read_sz</span> <span class=\"bp\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">remain</span><span class=\"o\">,</span> <span class=\"mi\">65536</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n                         <span class=\"bp\">^~~~~~~~</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">jrjpc9b1b3kjvj46ylx748awn0i20gp8</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">sysroot</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">algorithm</span><span class=\"o\">:</span><span class=\"mi\">2594</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">candidate</span> <span class=\"n\">template</span> <span class=\"n\">ignored</span><span class=\"o\">:</span> <span class=\"n\">deduced</span> <span class=\"n\">conflicting</span> <span class=\"n\">types</span> <span class=\"n\">for</span> <span class=\"kd\">parameter</span> <span class=\"bp\">'</span><span class=\"n\">_Tp'</span> <span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">unsigned</span> <span class=\"n\">long'</span> <span class=\"n\">vs.</span> <span class=\"bp\">'</span><span class=\"n\">int'</span><span class=\"o\">)</span>\n<span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_Tp</span><span class=\"bp\">&amp;</span> <span class=\"n\">__a</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">_Tp</span><span class=\"bp\">&amp;</span> <span class=\"n\">__b</span><span class=\"o\">)</span>\n<span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">jrjpc9b1b3kjvj46ylx748awn0i20gp8</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">sysroot</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">algorithm</span><span class=\"o\">:</span><span class=\"mi\">2605</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">candidate</span> <span class=\"n\">template</span> <span class=\"n\">ignored</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">initializer_list</span><span class=\"bp\">&lt;</span><span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">parameter</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"bp\">&gt;'</span> <span class=\"n\">against</span> <span class=\"bp\">'</span><span class=\"n\">unsigned</span> <span class=\"n\">long'</span>\n<span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">initializer_list</span><span class=\"bp\">&lt;</span><span class=\"n\">_Tp</span><span class=\"bp\">&gt;</span> <span class=\"n\">__t</span><span class=\"o\">,</span> <span class=\"n\">_Compare</span> <span class=\"n\">__comp</span><span class=\"o\">)</span>\n<span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">jrjpc9b1b3kjvj46ylx748awn0i20gp8</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">sysroot</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">algorithm</span><span class=\"o\">:</span><span class=\"mi\">2614</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">candidate</span> <span class=\"n\">function</span> <span class=\"n\">template</span> <span class=\"n\">not</span> <span class=\"n\">viable</span><span class=\"o\">:</span> <span class=\"n\">requires</span> <span class=\"n\">single</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">__t'</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"mi\">2</span> <span class=\"n\">arguments</span> <span class=\"n\">were</span> <span class=\"n\">provided</span>\n<span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">initializer_list</span><span class=\"bp\">&lt;</span><span class=\"n\">_Tp</span><span class=\"bp\">&gt;</span> <span class=\"n\">__t</span><span class=\"o\">)</span>\n<span class=\"bp\">^</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">jrjpc9b1b3kjvj46ylx748awn0i20gp8</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">sysroot</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">algorithm</span><span class=\"o\">:</span><span class=\"mi\">2585</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">candidate</span> <span class=\"n\">function</span> <span class=\"n\">template</span> <span class=\"n\">not</span> <span class=\"n\">viable</span><span class=\"o\">:</span> <span class=\"n\">requires</span> <span class=\"mi\">3</span> <span class=\"n\">arguments</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"mi\">2</span> <span class=\"n\">were</span> <span class=\"n\">provided</span>\n<span class=\"n\">min</span><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_Tp</span><span class=\"bp\">&amp;</span> <span class=\"n\">__a</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">_Tp</span><span class=\"bp\">&amp;</span> <span class=\"n\">__b</span><span class=\"o\">,</span> <span class=\"n\">_Compare</span> <span class=\"n\">__comp</span><span class=\"o\">)</span>\n<span class=\"bp\">^</span>\n</code></pre></div>\n<p>Did they change the api?</p>",
        "id": 268732890,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642701813
    },
    {
        "content": "<p>Try <code>65536ul</code></p>",
        "id": 268733606,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642702107
    },
    {
        "content": "<p><code>(size_t) 65536</code> seems to work</p>",
        "id": 268737163,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642703590
    },
    {
        "content": "<p>Any Idea why it fails here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Putting</span> <span class=\"n\">child</span> <span class=\"mi\">0x461420</span> <span class=\"o\">(</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span><span class=\"o\">)</span> <span class=\"n\">PID</span> <span class=\"mi\">45</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">chain.</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Live</span> <span class=\"n\">child</span> <span class=\"mi\">0x461420</span> <span class=\"o\">(</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span><span class=\"o\">)</span> <span class=\"n\">PID</span> <span class=\"mi\">45</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"o\">[</span>  <span class=\"mi\">1</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">CXX</span> <span class=\"n\">object</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Reaping</span> <span class=\"n\">winning</span> <span class=\"n\">child</span> <span class=\"mi\">0x461420</span> <span class=\"n\">PID</span> <span class=\"mi\">45</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">runtime</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">jrjpc9b1b3kjvj46ylx748awn0i20gp8</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">emscripten</span><span class=\"bp\">/</span><span class=\"n\">em</span><span class=\"bp\">++</span>  <span class=\"bp\">@</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">includes_CXX.rsp</span> <span class=\"bp\">-</span><span class=\"n\">Wall</span> <span class=\"bp\">-</span><span class=\"n\">Wextra</span> <span class=\"bp\">-</span><span class=\"n\">std</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">++</span><span class=\"mi\">14</span>  <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"n\">LEAN_EMSCRIPTEN</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"n\">ALLOW_MEMORY_GROWTH</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"n\">DISABLE_EXCEPTION_CATCHING</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"n\">MAIN_MODULE</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">fexceptions</span> <span class=\"bp\">-</span><span class=\"n\">DLEAN_BUILD_TYPE</span><span class=\"bp\">=</span><span class=\"s2\">\"Emscripten\"</span> <span class=\"bp\">-</span><span class=\"n\">DLEAN_EXPORTING</span> <span class=\"bp\">-</span><span class=\"n\">D__CLANG__</span> <span class=\"bp\">-</span><span class=\"n\">fvisibility</span><span class=\"bp\">=</span><span class=\"n\">hidden</span> <span class=\"bp\">-</span><span class=\"n\">fvisibility</span><span class=\"bp\">-</span><span class=\"n\">inlines</span><span class=\"bp\">-</span><span class=\"n\">hidden</span> <span class=\"bp\">-</span><span class=\"n\">MD</span> <span class=\"bp\">-</span><span class=\"n\">MT</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span> <span class=\"bp\">-</span><span class=\"n\">MF</span> <span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o.d</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Live</span> <span class=\"n\">child</span> <span class=\"mi\">0x461420</span> <span class=\"o\">(</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span><span class=\"o\">)</span> <span class=\"n\">PID</span> <span class=\"mi\">46</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">python</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">PATH</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Reaping</span> <span class=\"n\">losing</span> <span class=\"n\">child</span> <span class=\"mi\">0x461420</span> <span class=\"n\">PID</span> <span class=\"mi\">46</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">build.make</span><span class=\"o\">:</span><span class=\"mi\">77</span><span class=\"o\">:</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">debug.cpp.o</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Removing</span> <span class=\"n\">child</span> <span class=\"mi\">0x461420</span> <span class=\"n\">PID</span> <span class=\"mi\">46</span> <span class=\"k\">from</span> <span class=\"n\">chain.</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">Leaving</span> <span class=\"n\">directory</span> <span class=\"bp\">'/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">build'</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Reaping</span> <span class=\"n\">losing</span> <span class=\"n\">child</span> <span class=\"mi\">0x47ab80</span> <span class=\"n\">PID</span> <span class=\"mi\">44</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">Makefile2</span><span class=\"o\">:</span><span class=\"mi\">1238</span><span class=\"o\">:</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeFiles</span><span class=\"bp\">/</span><span class=\"n\">leanrt_initial</span><span class=\"bp\">-</span><span class=\"n\">exec.dir</span><span class=\"bp\">/</span><span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Removing</span> <span class=\"n\">child</span> <span class=\"mi\">0x47ab80</span> <span class=\"n\">PID</span> <span class=\"mi\">44</span> <span class=\"k\">from</span> <span class=\"n\">chain.</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">Leaving</span> <span class=\"n\">directory</span> <span class=\"bp\">'/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">build'</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Reaping</span> <span class=\"n\">losing</span> <span class=\"n\">child</span> <span class=\"mi\">0x4756f0</span> <span class=\"n\">PID</span> <span class=\"mi\">41</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">166</span><span class=\"o\">:</span> <span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n<span class=\"n\">leancpp</span><span class=\"bp\">-</span><span class=\"n\">emscripten</span><span class=\"bp\">&gt;</span> <span class=\"n\">Removing</span> <span class=\"n\">child</span> <span class=\"mi\">0x4756f0</span> <span class=\"n\">PID</span> <span class=\"mi\">41</span> <span class=\"k\">from</span> <span class=\"n\">chain.</span>\n</code></pre></div>\n<p>Is this because of the python error?</p>",
        "id": 268742779,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642705981
    },
    {
        "content": "<p>It wouldn't fail at a specific C++ file then</p>",
        "id": 268743333,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642706249
    },
    {
        "content": "<p>It's weird that there is no compiler error, how did you find it before?</p>",
        "id": 268743357,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642706264
    },
    {
        "content": "<p>I've made a draft PR of this here <a href=\"https://github.com/leanprover/lean4/pull/966\">https://github.com/leanprover/lean4/pull/966</a></p>",
        "id": 268743375,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642706278
    },
    {
        "content": "<p>I ran nix develop before. I don't know why the error is not showing</p>",
        "id": 268743471,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642706311
    },
    {
        "content": "<p>Fixing it in nix develop first is definitely a good idea given how big the derivation is</p>",
        "id": 268743602,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642706379
    },
    {
        "content": "<p>What's ironic is that in nix develop the build actually works for some reason</p>",
        "id": 268744278,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1642706671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Do you think it would be easier to build to wasm with lake? I've gotten stuck on compiling leancpp with emcmake and I generally don't like working with cmake. I guess I could replace the cmake in the nix build and just use lake to build? This would be ideal.</p>",
        "id": 270554986,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1643897690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> do you mean WASM for the Lean core or WASM for Lean libraries? Lake can probably soon be used to build the later, the former seems much more unlikely (at least until Lake supports arbitrary build targets).</p>",
        "id": 270585219,
        "sender_full_name": "Mac",
        "timestamp": 1643908862
    },
    {
        "content": "<p>I mean the lean core c++ code, runtime, kernel, utils etc. This is currently compiled with CMake.</p>",
        "id": 270587604,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1643909669
    },
    {
        "content": "<p>In that case, I don't see that being easily replaceable by Lake anytime soon.</p>",
        "id": 270598573,
        "sender_full_name": "Mac",
        "timestamp": 1643914290
    },
    {
        "content": "<p>By the way, I took a look at the original PR today and we <a href=\"https://github.com/leanprover/lean4/pull/505#issuecomment-855400618\">did</a> have a working CI config, it just wasn't really feasible to turn it on. Adding cross-architecture .olean compilation would be one way to fix that.</p>",
        "id": 270613397,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643920392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> maybe it would be possible to run the CI build as scheduled workflow (maybe as part of the nightly release) instead of part of the regular on  push workflow? That would make the 2h build time less of a concern.</p>",
        "id": 270616437,
        "sender_full_name": "Mac",
        "timestamp": 1643921879
    },
    {
        "content": "<p>Also, since the nightly release adds the artifacts as they are built (if they succeed), the long WASM build would not delay or prevent the release of the other artifacts.</p>",
        "id": 270616855,
        "sender_full_name": "Mac",
        "timestamp": 1643922060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20nix.20emscripten.20build/near/270616855\">said</a>:</p>\n<blockquote>\n<p>Also, since the nightly release adds the artifacts as they are built (if they succeed), the long WASM build would not delay or prevent the release of the other artifacts.</p>\n</blockquote>\n<p>Which in itself is not ideal, and I started to fix that on some branch that I just have to find again... but we could always make an exception for the Emscripten build if necessary</p>",
        "id": 270677454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643960647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/wasm.20nix.20emscripten.20build/near/270613397\">said</a>:</p>\n<blockquote>\n<p>Adding cross-architecture .olean compilation would be one way to fix that.</p>\n</blockquote>\n<p>Doing this in the current compact.cpp implementation would be quite a challenge since it is based on the platform-specific declarations and functions in lean.h. It should be much simpler to make <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s <code>oleanparser</code> platform-generic, just abstract over the (all?) <code>read64LE</code> calls. We would have to fix the <code>TODO</code>s first and write a corresponding serializer, but seem quite desirable anyway. /cc <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 271113368,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644319694
    },
    {
        "content": "<p>Not trivial either, but that you cannot easily add a conditional platform to a GitHub Actions job is reason enough for me to solve the Emscripten build that way instead...</p>",
        "id": 271113446,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644319761
    },
    {
        "content": "<blockquote>\n<p>It should be much simpler to make @Gabriel Ebner's oleanparser platform-generic, just abstract over the (all?) read64LE calls.</p>\n</blockquote>\n<p>That seems like a good plan.  We'd also need to abstract over alignment, object headers, and bignum representation.</p>",
        "id": 271113947,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644319989
    },
    {
        "content": "<p>We should also add flags for these variants in the olean file so that we can pick the right parser.</p>",
        "id": 271114162,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644320103
    },
    {
        "content": "<p>Yes, we probably should if we want to avoid user reports about weird segfaults (...which may happen at any point thanks to mmap :) ). The <em>object layout</em> should also be sufficiently stable that we can add a version number for it, even if that still doesn't guarantee that <em>Lean</em> can load .oleans of the same version because the declarations of the serialized Lean types may have changed.</p>",
        "id": 271119780,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644323428
    },
    {
        "content": "<p>Maybe you should use content addressed versioning for the olean format?</p>",
        "id": 271159076,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644340146
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 271162622,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644341534
    },
    {
        "content": "<p>I was thinking to ensure that the format is versioned stably you can include a hash of the serialized Lean types in the version string.</p>",
        "id": 271167726,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644343736
    },
    {
        "content": "<p>Also I made this <a href=\"https://github.com/gebner/oleanparser/pull/3\">https://github.com/gebner/oleanparser/pull/3</a></p>",
        "id": 271167820,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644343773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What are the TODOs on the oleanparser?</p>",
        "id": 271196010,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644356936
    },
    {
        "content": "<p>Most of the TODOs are additional assertions that I wanted to write.  The olean format in Lean 4 is highly redundant (because it is identical to the memory representation).  For example, arrays have two size fields (which should be equal), thunks have a 64-bit closure field (which is always zero), etc.</p>",
        "id": 271252273,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644400391
    },
    {
        "content": "<p>Another TODO is checking that strings are valid UTF-8, but I don't know if the runtime even requires that.  (There's certainly lots of places where fromUTF8Unchecked is called on input that could be invalid UTF-8.)</p>",
        "id": 271252672,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644400579
    },
    {
        "content": "<p>And then there's this one, where I don't remember what the TODO was for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">sign</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- TODO: implement Int32</span>\n</code></pre></div>\n<p>(AFAICT, Int32 is represented as scalar values and there's no way to distinguish it from regular scalar values.)</p>",
        "id": 271252862,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644400680
    },
    {
        "content": "<p>In case you were asking about the general roadmap: basically what Sebastian said.  Serialization, different layouts (32-bit mainly).  I'd also like to make the output type generic; right now there's this <code>Obj</code> data structure but I'd like to add a <code>FromObj α</code> type class (with <code>scalar : Nat → α</code> etc. members) so that the parser could directly create the Lean VM objects (with a different instance).</p>",
        "id": 271254233,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644401314
    },
    {
        "content": "<p>Using dependent types as a form of safe (to be proven) runtime loading, \"zero\" cost serializations, could be really cool.</p>",
        "id": 271257330,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1644403001
    }
]