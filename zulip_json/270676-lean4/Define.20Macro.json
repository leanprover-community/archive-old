[
    {
        "content": "<p>in this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder'</span> <span class=\"o\">:=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"def\"</span> <span class=\"n\">ident</span> <span class=\"n\">binder'</span><span class=\"bp\">*</span> <span class=\"s2\">\" -&gt; \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"bp\">*</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"bp\">*</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Im getting the error <code>elaboration function for 'Â«commandDef___-&gt;_:_Â»' has not been implemented</code> for the <code>add</code> function. Any ideas why?</p>",
        "id": 284246071,
        "sender_full_name": "Joseph O",
        "timestamp": 1653768164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 284249431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653773590
    },
    {
        "content": "<p>Hm i wonder why this has errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder'</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"sub\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">binder'</span><span class=\"o\">,</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\" returns \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"n\">returns</span> <span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"n\">returns</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">returns</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 284249435,
        "sender_full_name": "Joseph O",
        "timestamp": 1653773618
    },
    {
        "content": "<p>here are the errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"sc\">'{'</span>\n\n<span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">antiquot'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span>\n\n<span class=\"n\">expected</span> <span class=\"n\">command</span>\n\n<span class=\"n\">expected</span> <span class=\"sc\">')'</span>\n\n<span class=\"n\">expected</span> <span class=\"sc\">'}'</span> <span class=\"n\">or</span> <span class=\"n\">identifier</span>\n</code></pre></div>",
        "id": 284249512,
        "sender_full_name": "Joseph O",
        "timestamp": 1653773758
    },
    {
        "content": "<p>Shouldnt this work the same as the first one?</p>",
        "id": 284250507,
        "sender_full_name": "Joseph O",
        "timestamp": 1653775243
    },
    {
        "content": "<p>Im a bit confused</p>",
        "id": 284250510,
        "sender_full_name": "Joseph O",
        "timestamp": 1653775247
    },
    {
        "content": "<p>Unless I translated incorrectly</p>",
        "id": 284250521,
        "sender_full_name": "Joseph O",
        "timestamp": 1653775259
    },
    {
        "content": "<p>At around the location of the first error there is a clear mistake, a typo basically. Try double-checking that part.</p>",
        "id": 284271277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653809951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Define.20Macro/near/284271277\">said</a>:</p>\n<blockquote>\n<p>At around the location of the first error there is a clear mistake, a typo basically. Try double-checking that part.</p>\n</blockquote>\n<p>Ok I fixed it and now I have these errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">ident'</span><span class=\"o\">,</span> <span class=\"sc\">'}'</span> <span class=\"n\">or</span> <span class=\"n\">identifier</span>\n\n<span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">antiquot'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span>\n\n<span class=\"n\">expected</span> <span class=\"n\">command</span>\n\n<span class=\"n\">expected</span> <span class=\"sc\">')'</span>\n\n<span class=\"n\">expected</span> <span class=\"sc\">'}'</span> <span class=\"n\">or</span> <span class=\"n\">identifier</span>\n</code></pre></div>",
        "id": 284286106,
        "sender_full_name": "Joseph O",
        "timestamp": 1653830639
    },
    {
        "content": "<p>I believe you're having trouble because <code>{ .. }</code> is consumed by the <code>term</code> parser, since we can build records using <code>{..}</code> syntax.</p>\n<p>For example, this minimal program produces a similar error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"returns\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">returns</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span>  <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"foo\"</span><span class=\"o\">)</span>\n<span class=\"c1\">-- expected 'ident', '}' or identifier</span>\n</code></pre></div>\n<p>On the other hand, something like this where we add a clear delineation between <code>term</code> and <code>{</code> succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"returns\"</span> <span class=\"n\">term</span> <span class=\"s2\">\";;\"</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"c1\">-- New: `;;` in the rule.</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">returns</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">;;</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span>  <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"foo\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 284286458,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653831172
    },
    {
        "content": "<p>(DELETED: editing snafu)</p>",
        "id": 284286462,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653831185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Define.20Macro/near/284286458\">said</a>:</p>\n<blockquote>\n<p>I believe you're having trouble because <code>{ .. }</code> is consumed by the <code>term</code> parser, since we can build records using <code>{..}</code> syntax.</p>\n<p>For example, this minimal program produces a similar error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"returns\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">returns</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span>  <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"foo\"</span><span class=\"o\">)</span>\n<span class=\"c1\">-- expected 'ident', '}' or identifier</span>\n</code></pre></div>\n<p>On the other hand, something like this where we add a clear delineation between <code>term</code> and <code>{</code> succeeds:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"returns\"</span> <span class=\"n\">term</span> <span class=\"s2\">\";;\"</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"c1\">-- New: `;;` in the rule.</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">returns</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">;;</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span>  <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"foo\"</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So there is no way we can avoid that?</p>",
        "id": 284481676,
        "sender_full_name": "Joseph O",
        "timestamp": 1654006184
    }
]