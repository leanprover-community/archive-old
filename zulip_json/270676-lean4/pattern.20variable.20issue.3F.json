[
    {
        "content": "<p><code>myId</code> surprised me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myId</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">List.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span> <span class=\"c1\">-- i.e. x =&gt; x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">constNil</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">List.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">failing1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">failing2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.bar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span> <span class=\"c1\">-- \"invalid pattern variable\"</span>\n</code></pre></div>\n<p>I'm guessing that's not intended?</p>",
        "id": 222389769,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1610424672
    },
    {
        "content": "<p>The following also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myId</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.bar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo.bar</span>\n</code></pre></div>\n<p>Yes, this probably shouldn't compile.</p>",
        "id": 222394758,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1610431301
    },
    {
        "content": "<p>Pushed a fix: <a href=\"https://github.com/leanprover/lean4/commit/1ebf69e1634a75901bf9f47b7aeec6c8fc624072\">https://github.com/leanprover/lean4/commit/1ebf69e1634a75901bf9f47b7aeec6c8fc624072</a></p>",
        "id": 222440163,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610462755
    }
]