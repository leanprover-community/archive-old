[
    {
        "content": "<p>Consider the typeclasses as in the example below. Why is the typeclass system not able to infer an instance of <code>ZeroOne α</code> from instances <code>Zero α</code> and <code>One α</code>? And, is there a way to get this to work without explicitly defining these trivial instances? I guess such cases appear a lot in mathlib as well?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"n\">where</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"n\">where</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">ZeroOne</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">ZeroOne</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- fails to find instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ZeroOne</span> <span class=\"n\">α</span> <span class=\"n\">where</span> <span class=\"c1\">-- quite an obvious instance</span>\n  <span class=\"n\">toZero</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">toOne</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">ZeroOne</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- now it does find an instance</span>\n\n<span class=\"c1\">-- Conversely, it works just fine</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ZeroOne</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>",
        "id": 305115615,
        "sender_full_name": "Jesse Vogel",
        "timestamp": 1666260123
    },
    {
        "content": "<p>In Lean 3 this would imply type class loop which were bad. In Lean 4, loops are not bad anymore. My guess is that the reason is partially historical, people learned to live without it. Also do you have a use case where you can immediately provide instance of <code>ZeroOne</code>? The last reason is probably performance, not providing this instance can shorten class synthesis primarily in case of failure as all possibilities need to be exhausted.</p>\n<p>To save on typing with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ZeroOne</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ZeroOne.mk</span>\n</code></pre></div>",
        "id": 305135339,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666267512
    },
    {
        "content": "<p>Lean 4 has a specific macro for that use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">abbrev</span> <span class=\"n\">ZeroOne</span> <span class=\"o\">:=</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 305135835,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666267725
    }
]