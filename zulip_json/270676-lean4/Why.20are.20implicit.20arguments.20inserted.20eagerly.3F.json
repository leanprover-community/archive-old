[
    {
        "content": "<p>I was reading this <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html?highlight=semi%20implicit#more-on-implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html?highlight=semi%20implicit#more-on-implicit-arguments</a><br>\nUntil now, I naturally assumed that implicit arguments behaved like semi-implicit arguments, but now my view of the world is collapsing.<br>\nLooking at the example it sounds like semi-implicit arguments are more desirable, and I feel like I should use them everywhere.<br>\nWhy are implicit arguments inserted eagerly by default?<br>\nWhat is an example where regular implicit arguments are more desirable than semi-implicit ones?</p>",
        "id": 301793036,
        "sender_full_name": "Michael Jam",
        "timestamp": 1664617264
    },
    {
        "content": "<p>This feature is called autoImplicit and you can shut it off if you want.</p>\n<p>The reason we have it is quite simply convenience. If you say write a function that has 4 type parameters do you want to figure out all of the universe stuff etc. Yourself? I doubt it. The autoImplicit feature allows us to have generic type notation like Haskell with the most general universes possible for free.</p>",
        "id": 301795822,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664618678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  I don't think you're answering my question, I wasn't talking about auto implicits. I'm talking about semi-implicits vs implicit  (double curly brackets vs single curly brackets)</p>",
        "id": 301797136,
        "sender_full_name": "Michael Jam",
        "timestamp": 1664619260
    },
    {
        "content": "<p>Now that I discovered that the difference exists, I feel like i'd prefer using double curly brackets everywhere which is weird. That's why I'm wondering if there are examples where it's clearly better to use single curly brackets over double curly brackets</p>",
        "id": 301797423,
        "sender_full_name": "Michael Jam",
        "timestamp": 1664619405
    },
    {
        "content": "<p>What about a function that takes no explicit arguments? How are you supposed to tell lean to fill out the semi-implicits?</p>",
        "id": 301820537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664630524
    },
    {
        "content": "<p>With only strict-implicit parameters (I haven't seen them called semi-implicit before), we e.g. wouldn't have <code>id : Nat -&gt; Nat</code>, i.e. implicit parameters are closer to usual polymorphism in e.g. Haskell</p>",
        "id": 301829099,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664634558
    },
    {
        "content": "<p>My personal habit so far has been to make sure that the functions I write, always have some (at least one) explicit parameters, so that all the function's implicit parameters can be inferred from explicit inputs only, and not from the expected type at the use site.<br>\nI remember getting lots of type inference problems when I didn't follow that principle.<br>\nIt also makes my life easier when thinking about how to write a proof because I can just write <code>have := f x y z ...</code> without having to think of a return type or immediately plug it in something else.<br>\nDo you think it's a bad principle to follow?  Are functions with only implicit parameters really that useful?</p>",
        "id": 301843859,
        "sender_full_name": "Michael Jam",
        "timestamp": 1664642619
    },
    {
        "content": "<p>In Lean 3 mathlib we prefer eagerly inserted arguments. There are lots of lemmas without explicit arguments, where it would be inconvenient to use strict-implicit arguments. <br>\nMost definitions indeed have at least one explicit argument (there are a couple of exceptions, like <code>list.nil</code> and <code>set.univ</code>). But even with functions with explicit arguments it can still be nice to have eagerly inserted arguments if the function itself is the argument of another function, like in <code>congr_arg2 prod.mk h1 h2</code> or <code>list.map option.some</code>.</p>",
        "id": 301846619,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664644153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Why.20are.20implicit.20arguments.20inserted.20eagerly.3F/near/301820537\">said</a>:</p>\n<blockquote>\n<p>What about a function that takes no explicit arguments? How are you supposed to tell lean to fill out the semi-implicits?</p>\n</blockquote>\n<p>This is definitely a limitation of strict implicits. If there were a way to force strict implicits (maybe a special kind of pseudo-argument token?) it would make them more useful.</p>",
        "id": 301855280,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664649904
    },
    {
        "content": "<p>OK I understand Floris' point. Some functions unavoidably end up having only implicit parameters because they are sometimes passed without being fully applied.<br>\nIn general, what's a good rule of thumb to decide if one should make a parameter strict-implicit?</p>",
        "id": 301907418,
        "sender_full_name": "Michael Jam",
        "timestamp": 1664700806
    }
]