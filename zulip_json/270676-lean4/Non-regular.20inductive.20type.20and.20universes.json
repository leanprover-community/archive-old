[
    {
        "content": "<p>Is it possible to give appropriate universe levels to the following inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>or is it inheritly untypeable in lean?</p>",
        "id": 289008801,
        "sender_full_name": "ohhaimark",
        "timestamp": 1657327411
    },
    {
        "content": "<p>No, you can't have <code>(_ : Type)</code> in the constructor args if your inductive is also in <code>Type</code>. You can make it a parameter, but then you won't be able to change it to <code>Option _</code>.</p>",
        "id": 289011106,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1657330987
    },
    {
        "content": "<p>One way around this is to make your own type universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyUnit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyOption</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"n\">MyType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyType.toType</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">MyUnit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">MyOption</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option</span> <span class=\"n\">t.toType</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">MyType</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">MyType.toType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">MyOption</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 289017610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657339944
    },
    {
        "content": "<p>Or you can just put it in <code>Type 1</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>a value <code>a : A : Sort u</code> cannot contain a <code>B : Sort v</code> unless <code>u &gt; v</code>. In your def, each of the constructors takes a parameter <code>v : Type 0</code>, so the type must live in at least <code>Type 1</code></p>",
        "id": 289041598,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657373349
    },
    {
        "content": "<p>But if you're building a <code>Type 1</code> you should have pretty good justification for doing so -- types inhabiting higher universes are kinda annoying to work with sometimes</p>",
        "id": 289041820,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657373572
    },
    {
        "content": "<p>Awesome. I am now stuck on a termination proof for bind</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">option</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ty.pure</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.base</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:=</span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">Ty.type</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">option</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option</span> <span class=\"n\">ty.type</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term'</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"o\">(</span><span class=\"n\">Ty.option</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Term</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Term'</span> <span class=\"bp\">$</span> <span class=\"n\">Ty.pure</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Term</span>\n<span class=\"kd\">@[matchPattern]</span> <span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Term'.var</span>\n<span class=\"kd\">@[matchPattern]</span> <span class=\"kd\">def</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Term'.app</span>\n<span class=\"kd\">@[matchPattern]</span> <span class=\"kd\">def</span> <span class=\"n\">lam</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Term'.lam</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftTermEq</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ty'</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">ty.type</span> <span class=\"bp\">=</span> <span class=\"n\">ty'.type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">ty'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">$</span> <span class=\"n\">eq</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">liftTermEq</span> <span class=\"n\">eq</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">liftTermEq</span> <span class=\"n\">eq</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">liftTermEq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">])</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftTerm'</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">liftTermEq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Term'</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">liftTerm'</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Term'</span> <span class=\"o\">(</span><span class=\"n\">Ty.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">liftTermEq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Term'</span> <span class=\"o\">(</span><span class=\"n\">Ty.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">liftTermEq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">fvars</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fvars</span> <span class=\"n\">t₁</span> <span class=\"bp\">++</span> <span class=\"n\">fvars</span> <span class=\"n\">t₂</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">fvars</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.pure</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TermHas</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app₁</span> <span class=\"o\">:</span>  <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app₂</span> <span class=\"o\">:</span>  <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty.option</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">sizeBind</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">.</span><span class=\"n\">var</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeBind</span> <span class=\"n\">t₁</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">app₁</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sizeBind</span> <span class=\"n\">t₂</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">app₂</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeBind</span> <span class=\"n\">t'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bindAuxSize</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">ty'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">sizeBind</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- private def size_term_has_lt_bind</span>\n<span class=\"c1\">--   {ty : Ty v}</span>\n<span class=\"c1\">--   {ty' : Ty w}</span>\n<span class=\"c1\">--   (t' : Term' ty.option)</span>\n<span class=\"c1\">--   (b : ty)</span>\n<span class=\"c1\">--   (h : TermHas b (lam t'))</span>\n<span class=\"c1\">--   (f : (a : ty) → TermHas a (lam t') → Term' ty') :</span>\n<span class=\"c1\">--   sizeOf (f b h) &lt; sizeBind t' (fun v h =&gt; match v with | none =&gt; 0 | some v =&gt; sizeOf $ f v $ .lam h) + 1</span>\n<span class=\"c1\">--   := by sorry</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">bindAux</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ty'</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TermHas</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Term'</span> <span class=\"n\">ty'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty'</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">.</span><span class=\"n\">var</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- have : depth t₁ &lt; max (depth t₁) (depth t₂) + 1 := by sorry</span>\n      <span class=\"c1\">-- have : depth t₂ &lt; max (depth t₁) (depth t₂) + 1 := by sorry</span>\n      <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">bindAux</span> <span class=\"n\">t₁</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">app₁</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bindAux</span> <span class=\"n\">t₂</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">app₂</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">$</span> <span class=\"n\">bindAux</span> <span class=\"n\">t'</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var</span> <span class=\"n\">none</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">mapAux</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mapAux</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ty'</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">ty'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term'</span> <span class=\"n\">ty'</span> <span class=\"o\">:=</span> <span class=\"n\">bindAux</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">bindAux</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bindAuxSize</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">mapAux</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">t</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Term.var</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">bindAux</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Term</span>\n</code></pre></div>\n<p>I guess I can just apologize to lean for my lack of skills with `sorry'. Am I missing an easy WF relation to use, or tactics that can help me in the decreasing_by tactic?</p>",
        "id": 289109799,
        "sender_full_name": "ohhaimark",
        "timestamp": 1657467765
    }
]