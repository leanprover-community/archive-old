[
    {
        "content": "<p>I am facing an error when trying to simplify function definitions that make use of <code>decreasing_by</code> to show termination. I have created a minimal example of this issue that tries to calculate the length of a list in an extremely contrived way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListSplit</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">split</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">ListSplit</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitList</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ListSplit</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListSplit.split</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListSplit.split</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.lt_add_left</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.lt_add_right</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">splitList</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ListSplit.split</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">len</span> <span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">len</span> <span class=\"n\">snd</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">measure</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">invImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">,</span> <span class=\"n\">WellFoundedRelation.rel</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_add_right</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_add_left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">listlen</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">len</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">]</span> <span class=\"c1\">-- Error: failed to generate equational theorem for 'len'</span>\n</code></pre></div>\n<p>Does anyone know the reason for this issue and how to bypass it? Thank you in advance.</p>",
        "id": 271687503,
        "sender_full_name": "Anand Rao",
        "timestamp": 1644670272
    },
    {
        "content": "<p>This issue has been fixed a few days ago. The Lean 4 <code>master</code> can generate the equational theorems for <code>len</code>.<br>\nHere is the full example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListSplit</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">split</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">ListSplit</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">splitList</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ListSplit</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListSplit.split</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ListSplit.split</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.lt_add_left</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.lt_add_right</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">splitList</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ListSplit.split</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">len</span> <span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">len</span> <span class=\"n\">snd</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">measure</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">invImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">,</span> <span class=\"n\">WellFoundedRelation.rel</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_add_right</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_add_left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">len_nil</span> <span class=\"o\">:</span> <span class=\"n\">len</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- The `simp [len]` above generated the following equation theorems for len</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">len._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">len._eq_2</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">len._eq_3</span> <span class=\"c1\">-- It is conditional, and may be tricky to use.</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">len_1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">len</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">len_2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">len</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">len</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">len</span>\n\n<span class=\"c1\">-- The `unfold` tactic above generated the following theorem</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">len._unfold</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">len_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">len</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">len</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">len_1</span><span class=\"o\">,</span> <span class=\"n\">len_nil</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">len_2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">listlen</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">len</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">,</span> <span class=\"n\">len_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 271695258,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644681493
    }
]