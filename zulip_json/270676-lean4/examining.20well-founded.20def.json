[
    {
        "content": "<p>Is there any way to either generate code using <code>WellFounded.fix</code> or reasonably unfold a function defined using <code>termination_by</code>? I have a pretty simple function that decreases based on nat subtraction; if I define it using termination_by, it unfolds into a big irreducible machine-generated term. <br>\nI'm fine with using <code>fix</code> and defining lemmas along the lines of <code>div_eq</code>, but <code>WellFounded.fix</code> in user code still throws an error about not generating anything executable.</p>",
        "id": 265257802,
        "sender_full_name": "Chris B",
        "timestamp": 1639721507
    },
    {
        "content": "<p>The way to generate code using <code>WellFounded.fix</code> is to have two versions of the function and connect them using <code>implementedBy</code>; there are a couple of examples <a href=\"https://github.com/leanprover-community/mathlib4/pull/136/files#diff-5bc22d5628c8fa02d3ad1c242328f6431d96968394fdf98590bb480b2134efe7L42\">here</a> that were replaced by <code>termination_by</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/136\">mathlib4#136</a></p>",
        "id": 265258293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639722038
    },
    {
        "content": "<p>It is also possible to unfold the autogenerated <code>fix</code> equation. The simplest way to do it at the moment is to use <code>simp [my_func, my_func._unary]; rw [WellFounded.fix_eq]; rfl</code> with an appropriately stated equality lemma</p>",
        "id": 265258326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639722119
    },
    {
        "content": "<p>Thank you; it took a little bit of effort, but I think I got where I needed to be.</p>",
        "id": 265259763,
        "sender_full_name": "Chris B",
        "timestamp": 1639723920
    },
    {
        "content": "<p>Is there a way to use the <code>termination_by</code> and <code>decreasing_by</code> gadgets for theorems?</p>",
        "id": 265358718,
        "sender_full_name": "Chris B",
        "timestamp": 1639774307
    },
    {
        "content": "<p>Yes, it works exactly the same way</p>",
        "id": 265364203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639777213
    },
    {
        "content": "<p>I was using <code>lemma</code> instead of <code>theorem</code>; I think the parser for <code>lemma</code> needs to be extended with additional patterns for termination and decreasing. They don't seem to be part of <code>val:declVal</code>.</p>",
        "id": 265372553,
        "sender_full_name": "Chris B",
        "timestamp": 1639781269
    },
    {
        "content": "<p>There's a <code>terminationSuffix</code> parser in Parser/Commands.lean, but it doesn't seem to be accessible.</p>",
        "id": 265373509,
        "sender_full_name": "Chris B",
        "timestamp": 1639781952
    }
]