[
    {
        "content": "<p>I'd like to have a trailing <code>×</code> symbol after a <code>sepBy(str, \"×\")</code> parser. It seems like within the syntax matcher, there is no way to match against such a syntax (I am unable to match against <code>bar</code> in the example below). How should I write the <code>macro_rules</code> for <code>[bar|...]</code> so I can parse the <code>bar</code> syntax defined below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n\n<span class=\"c1\">-- we want to parse terms of the form [\"foo\" × \"bar\" × ... ×  \"quux\" ×  10]</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">bar</span>\n<span class=\"n\">syntax</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"s2\">\"×\"</span><span class=\"o\">)</span> <span class=\"s2\">\"×\"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[bar|\"</span> <span class=\"n\">bar</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"c1\">-- | ERROR: expected ×</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"o\">]</span><span class=\"bp\">×*</span> <span class=\"bp\">×</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">quote</span> <span class=\"n\">xs</span>\n\n<span class=\"c1\">-- | ERROR: expected ×</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"o\">]</span><span class=\"bp\">×*</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">quote</span> <span class=\"n\">xs</span>\n\n<span class=\"c1\">-- vvv what does work vvv</span>\n<span class=\"c1\">-- The macro without the trailing ×  num works!</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"s2\">\"×\"</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[foo|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"o\">]</span><span class=\"bp\">×*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">quote</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 277302476,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1648742100
    },
    {
        "content": "<p>Yes, <code>sepBy</code> is greedy. I'm not sure how it could avoid that without arbitrary backtracking. You should use <code>sepBy(str &lt;|&gt; num, \"×\")</code> and enforce the typing in the macro rules instead.</p>",
        "id": 277307313,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648744149
    },
    {
        "content": "<p>You can also use <code>notFollowedBy</code>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">bar</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"s2\">\"×\"</span><span class=\"o\">,</span> <span class=\"s2\">\"×\"</span> <span class=\"n\">notFollowedBy</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">))</span> <span class=\"s2\">\"×\"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[bar|\"</span> <span class=\"n\">bar</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"o\">]</span><span class=\"bp\">×*</span> <span class=\"bp\">×</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Lean.quote</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">×</span> <span class=\"s2\">\"bar\"</span> <span class=\"bp\">×</span> <span class=\"mi\">10</span><span class=\"o\">]</span>\n<span class=\"c1\">-- (#[\"foo\", \"bar\"], 10) : Array String × Nat</span>\n</code></pre></div>",
        "id": 277337940,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648759720
    }
]