[
    {
        "content": "<p>What is the error message telling me here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A computable version of `List.rec` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.recC</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">List.recC</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[csimp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">List.recC_eq_rec</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">List.recC</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">List.rec</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">α</span> <span class=\"n\">motive</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.recC</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>invalid 'csimp' theorem, only constant replacement theorems (e.g., `@f = @g`) are currently supported.\n</code></pre></div>\n<p>Is <code>@List.recC = @List.rec</code> not of the form <code>@f = @g</code>?</p>",
        "id": 322520199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674223328
    },
    {
        "content": "<p>I would suspect that while it is of the correct form what you are trying to do doesn't make sense for the compiler due to computable vs noncomputable stuff. I guess that it throws an error that just somehow ends up manifesting like this.</p>",
        "id": 322522090,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674223828
    },
    {
        "content": "<p>I thought the whole point of <code>csimp</code> was to turn noncomputable stuff (<code>List.rec</code>) into computable stuff (<code>List.recC</code>)</p>",
        "id": 322522464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674223951
    },
    {
        "content": "<p>The only other condition I can see in the code is that the level names of <code>f</code> and <code>g</code> must be exactly equal</p>",
        "id": 322524159,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674224413
    },
    {
        "content": "<p>The point of csimp is originally to have an inefficient nice for formalization version of a function and a pefornant version + a proof of equivalence for the compiler. I dont know about interactions with computability</p>",
        "id": 322524722,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674224549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/csimp.20on.20recursors/near/322524159\">said</a>:</p>\n<blockquote>\n<p>The only other condition I can see in the code is that the level names of <code>f</code> and <code>g</code> must be exactly equal</p>\n</blockquote>\n<p>That fixes it, thanks!</p>",
        "id": 322525218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674224651
    },
    {
        "content": "<p>Relatedly; is that <code>csimp</code> stated in the right direction?</p>",
        "id": 322525281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674224676
    },
    {
        "content": "<p>Does the compiler version go on the LHS or RHS?</p>",
        "id": 322525349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674224696
    },
    {
        "content": "<p>Answered my own question, thanks all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.recC.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">[])</span>\n  <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">List.recC</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[csimp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">List.recC_eq_rec</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">List.rec</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">List.recC</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">α</span> <span class=\"n\">motive</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.recC</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works!</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">List.rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 322525526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674224755
    },
    {
        "content": "<p>I guess the follow-up question is whether mathlib should add a <code>recC</code> for all of its inductive types (c.f. <a href=\"https://github.com/leanprover-community/mathlib4/pull/1720\">mathlib4#1720</a>), or if having compiler support for <code>.rec</code> is on a near enough horizon that we don't need to</p>",
        "id": 322525661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674224796
    },
    {
        "content": "<p>Leo said it is not of interest in the near future unless someone steps up and does it.</p>",
        "id": 322543014,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674229016
    },
    {
        "content": "<p>It looks like mathlib gets a long way by supporting just <code>Nat.rec</code> and <code>List.rec</code> via <code>csimp</code>, so probably it's not that big a deal</p>",
        "id": 322543894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674229254
    },
    {
        "content": "<p>Is it meaningful to ask how much of mathlib is \"noncomputable\"? Much of the parts I deal with are a long way from being computable (and this is not a problem) but I no longer have a real oveview of the full library.</p>",
        "id": 322544751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674229448
    },
    {
        "content": "<p>You could count <code>def</code> vs <code>computable def</code> to get a good estimate; or get the exact answer by looking at doc-gen's data dump</p>",
        "id": 322545514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674229649
    },
    {
        "content": "<p><code>computable</code> is not relevant for 99% of mathlib anyways; only the parts used from tactics.</p>",
        "id": 322546863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674229968
    },
    {
        "content": "<p>Lists + naturals are precisely the types that are likely to appear in tactics though, hence why I think those are worth having compiler support for</p>",
        "id": 322548407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674230338
    },
    {
        "content": "<p>BTW, I took a look at the code for this and I don't think it would be that hard to add support for compiling <code>.rec</code> functions like everything else, so I'm not that interested in investing in too many workarounds to preserve computability when the whole thing can be fixed in one go. It's just not a priority right now</p>",
        "id": 322585564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674238624
    },
    {
        "content": "<p>I have actually already written code to autogenerate implementations for recursors. The code is a bit messy, but I would be happy to add it to mathlib</p>",
        "id": 322630222,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1674254436
    }
]