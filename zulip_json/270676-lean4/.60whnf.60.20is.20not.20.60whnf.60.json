[
    {
        "content": "<p>I ran into some strange behavior today and managed to reduce it down as best I could to the following mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">my_cat</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">term</span>  <span class=\"o\">:</span> <span class=\"n\">my_cat</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">elabMyCat</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">my_cat</span> <span class=\"bp\">→</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">my_cat</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">i</span> <span class=\"n\">none</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"before: {e}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"whnf: {e}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"⟦ \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">my_cat</span> <span class=\"s2\">\" ⟧\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">elabLurkExpr</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">binds</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">binds</span> <span class=\"o\">:=</span> <span class=\"n\">binds.map</span> <span class=\"n\">toString</span>\n  <span class=\"k\">let</span> <span class=\"n\">wat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"n\">binds</span><span class=\"bp\">⟧</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"s2\">\"fails\"</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">binds</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">binds</span> <span class=\"o\">:=</span> <span class=\"n\">binds.data.map</span> <span class=\"n\">toString</span>\n  <span class=\"k\">let</span> <span class=\"n\">wat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"n\">binds</span><span class=\"bp\">⟧</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"s2\">\"succeeds\"</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 291375893,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659126166
    },
    {
        "content": "<p>The first <code>wat</code> logs <code>whnf: List.map toString binds✝</code>, while the second logs </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">whnf</span><span class=\"o\">:</span> <span class=\"n\">toString</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">::</span> <span class=\"n\">List.map</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">List.concat</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was banging my head for around 2 hours, until I got to this and realized <code>whnf</code> doesn't put the first one into <code>whnf</code>. What is going on here? Is this expected behavior and how can I fix this? Thanks!</p>",
        "id": 291376012,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659126237
    },
    {
        "content": "<p>I don't see how that's not in whnf</p>",
        "id": 291376367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659126427
    },
    {
        "content": "<p>in the first one, you have a variable so the term is stuck</p>",
        "id": 291376412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659126455
    },
    {
        "content": "<p>in the second one you get a <code>List.cons</code> at the outer level so it's successfully reduced to whnf</p>",
        "id": 291376492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659126486
    },
    {
        "content": "<p>note that when you do <code>let ⟨binds⟩ := #[`foo, `bar]</code> you just get a variable <code>binds : List Name</code> in the context with no <code>:= ...</code></p>",
        "id": 291376545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659126533
    },
    {
        "content": "<p>Ah I see, how should I reassign it to the data I want/not make it a variable?</p>",
        "id": 291376826,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659126667
    },
    {
        "content": "<p>that's what you did in the second example, no?</p>",
        "id": 291377411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659126985
    },
    {
        "content": "<p>but also, I don't really know the context for the question so it's hard to say what your constraints are</p>",
        "id": 291377474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127035
    },
    {
        "content": "<p>(i.e. do <code>let binds := #[`foo, `bar].data</code> instead of <code>let ⟨binds⟩ := #[`foo, `bar]</code>)</p>",
        "id": 291377551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127082
    },
    {
        "content": "<p>I'm trying to write a DSL and want to add antiquotes to write stuff like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">binds</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"b\"</span><span class=\"o\">,</span> <span class=\"s2\">\"c\"</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟦</span><span class=\"n\">lambda</span> <span class=\"bp\">$</span><span class=\"n\">binds</span> <span class=\"bp\">&lt;</span><span class=\"n\">body</span><span class=\"bp\">&gt;⟧</span>\n</code></pre></div>\n<p>In the elaborator I'm turning Syntax into a <code>MyExpr</code>. So I can't control how <code>binds</code> is created, it should work in both cases</p>",
        "id": 291377910,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659127274
    },
    {
        "content": "<p>Why doesn't <code>let {binds} := #[`foo]</code> keep track of an extracted value?</p>\n<p>(I'm on a smartphone and can't do angled braces)</p>",
        "id": 291377964,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659127318
    },
    {
        "content": "<p>because pattern matching calls <code>Foo.rec</code> internally, and in the minor premises you only get the values available as local variables</p>",
        "id": 291378057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127362
    },
    {
        "content": "<p>Would <code>let b := #[`foo]; let {b} := b</code> work?</p>",
        "id": 291378287,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659127499
    },
    {
        "content": "<p>that is, this is a type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Prod.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n                         <span class=\"c1\">-- ^^^ nope</span>\n</code></pre></div>",
        "id": 291378319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127511
    },
    {
        "content": "<p>no, that has the same issue</p>",
        "id": 291378343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127527
    },
    {
        "content": "<p>Ah, ok, that kind of makes sense</p>",
        "id": 291378597,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659127651
    },
    {
        "content": "<p>One way to circumvent this for the purpose of the DSL is to not try to pre-evaluate <code>binds</code> and instead generate some expression like <code>mkLambda binds [[body]]</code></p>",
        "id": 291378643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127677
    },
    {
        "content": "<p>(or possibly only try to pre-evaluate <code>binds</code> as an optimization and otherwise fall back on this)</p>",
        "id": 291378753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127720
    },
    {
        "content": "<p>In fact, this is how lean's syntax quotations work as well, they will construct a function to pattern match or do whatever with the <code>$foo</code> variables that are passed in, so that matching ends up in the generated term</p>",
        "id": 291378843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127785
    },
    {
        "content": "<p>Yes, I think we'll have to do that.. thanks for the help!</p>",
        "id": 291378921,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1659127811
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">())</span>\n<span class=\"c1\">-- fun args =&gt; do</span>\n<span class=\"c1\">--   let info ← MonadRef.mkInfoFromRefPos</span>\n<span class=\"c1\">--   let scp ← getCurrMacroScope</span>\n<span class=\"c1\">--   let mainModule ← getMainModule</span>\n<span class=\"c1\">--   pure</span>\n<span class=\"c1\">--       { raw :=</span>\n<span class=\"c1\">--           Syntax.node SourceInfo.none `Lean.Parser.Term.fun</span>\n<span class=\"c1\">--             #[Syntax.atom info \"fun\",</span>\n<span class=\"c1\">--               Syntax.node SourceInfo.none `Lean.Parser.Term.basicFun</span>\n<span class=\"c1\">--                 #[Syntax.node SourceInfo.none `null (Array.append #[] (TSyntaxArray.raw args)),</span>\n<span class=\"c1\">--                   Syntax.node SourceInfo.none `null #[], Syntax.atom info \"=&gt;\",</span>\n<span class=\"c1\">--                   Syntax.node SourceInfo.none `Lean.Parser.Term.paren</span>\n<span class=\"c1\">--                     #[Syntax.atom info \"(\", Syntax.node SourceInfo.none `null #[],</span>\n<span class=\"c1\">--                       Syntax.atom info</span>\n<span class=\"c1\">--                         \")\"]]] } : (args : TSyntaxArray `Lean.Parser.Term.funBinder) → ?m.470 args (TSyntax `term)</span>\n</code></pre></div>",
        "id": 291379023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659127862
    }
]