[
    {
        "content": "<p>I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Arr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u2</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">Arr</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ~&gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Arr.Arr</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Compose</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u2</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Arr</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CoeSort</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u3</span><span class=\"o\">)]</span> <span class=\"n\">where</span>\n  <span class=\"n\">compose</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">coeSort</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">coeSort</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">coeSort</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"c1\">-- invalid class, parameter #3 depends on `outParam`, but it is not an `outParam`</span>\n</code></pre></div>\n<p>It seems to me like this should be valid, because <code>Arr α β</code> has <code>β</code> as an <code>outParam</code> and therefore by the time we need to go looking for <code>CoeSort β _</code>, we should have already synthesized β.  Am I missing something?</p>",
        "id": 230084809,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615577525
    },
    {
        "content": "<p>It sounds like you don't want beta to be an outParam of <code>Compose</code></p>",
        "id": 230092031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615580741
    },
    {
        "content": "<p>If <code>β</code> is not an <code>outParam</code> of <code>Compose</code>, then tc resolution won't trigger unless <code>β</code> has no metas when searching for <code>Compose</code>.  But in fact <code>β</code> will never be known when triggering TC search on <code>Compose</code>, and should always be derived as the result of synthesizing the <code>Arr</code> instance</p>",
        "id": 230092690,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615580920
    },
    {
        "content": "<p>Here's the problem I don't know how to solve with typeclasses in Lean 4 currently:<br>\nI want to have two instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Arr</span> <span class=\"n\">T1</span> <span class=\"n\">T2</span>\n<span class=\"n\">Arr</span> <span class=\"n\">T1</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The second argument of <code>Arr</code> needs to be <code>outParam</code> for it to trigger when I don't know the sort universe.  However, it seems that then there's no way to have both instances around in a usable way.  I want something where <code>Arr T1 (Sort ?u)</code> will trigger TC search and find the second instance, and <code>Arr T1 T2</code> will trigger TC search and find the first instance.  This doesn't currently seem to be possible (unless I can declare a coercion from <code>Arr T1 T2</code> to <code>Arr T1 (Sort _)</code> and have tc resolution pick up the coercion when it tries to do the final unification?)</p>",
        "id": 230095701,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615582379
    },
    {
        "content": "<p>Oh!  Perhaps this is exactly what default instances are for</p>",
        "id": 230102293,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615585225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241007\">Jason Gross</span> <a href=\"#narrow/stream/270676-lean4/topic/outparam.20classes/near/230102293\">said</a>:</p>\n<blockquote>\n<p>Oh!  Perhaps this is exactly what default instances are for</p>\n</blockquote>\n<p>I didn't read your example carefully yet. We had more modest goals for the default instances (see Default instances thread). Not sure how well they will work for your scenario.</p>",
        "id": 230130317,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615604906
    }
]