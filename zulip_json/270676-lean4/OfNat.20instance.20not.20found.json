[
    {
        "content": "<p>I'm a little puzzled about the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasOne</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasOne</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance OfNat α 1</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">HasTwo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasTwo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance OfNat α 2</span>\n</code></pre></div>\n<p>Why is lean having a hard time finding the <code>OfNat</code> instances at the lines with the comments?</p>",
        "id": 272113002,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645016949
    },
    {
        "content": "<p>You need to write <code>OfNat α (nat_lit 1)</code>.</p>",
        "id": 272113071,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645016988
    },
    {
        "content": "<p>Ah ok, thanks</p>",
        "id": 272113116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645017003
    },
    {
        "content": "<p>Also note that with these definitions you can't do <code>extends HasOne α, HasTwo α</code>.  For this inheritence to work, the <code>HasOne</code> and <code>HasTwo</code> classes need to have <code>one</code> and <code>two</code> fields, resp:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasOne</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasOne</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">HasOne.one</span>\n</code></pre></div>",
        "id": 272113254,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645017097
    },
    {
        "content": "<p>I see. Thanks. I think I'll take a look at how things are set up in Mathlib4</p>",
        "id": 272113927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645017510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/OfNat.20instance.20not.20found/near/272113071\">said</a>:</p>\n<blockquote>\n<p>You need to write <code>OfNat α (nat_lit 1)</code>.</p>\n</blockquote>\n<p>I have made this mistake a few times myself too (forgetting <code>nat_lit</code>) -- what does it actually do when you leave it out?</p>",
        "id": 272116913,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645019082
    },
    {
        "content": "<p>It produces the term <code>@OfNat α (@OfNat.ofNat Nat (nat_lit 1) _)</code>, which won't match <code>@OfNat α (nat_lit 1)</code> (which Lean searches for when you type <code>1</code>).</p>",
        "id": 272117121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645019166
    },
    {
        "content": "<p>maybe we should make a <code>of_nat</code> macro for this</p>",
        "id": 272117161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645019191
    },
    {
        "content": "<p>Ahhh, ok that sort of makes sense, thanks!</p>",
        "id": 272117196,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645019214
    },
    {
        "content": "<p>I don't think we'll have many <code>OfNat</code> instances, so the utility of <code>of_nat</code> would be quite limited.</p>",
        "id": 272117284,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645019268
    },
    {
        "content": "<p>Mathlib4 already has such a macro:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/9ea62cd8be727e9a01506729d72eece6fb38dc6d/Mathlib/Algebra/Group/Defs.lean#L9\">https://github.com/leanprover-community/mathlib4/blob/9ea62cd8be727e9a01506729d72eece6fb38dc6d/Mathlib/Algebra/Group/Defs.lean#L9</a></p>\n<p>It seems that it's only used for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ;)</p>",
        "id": 272117511,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645019397
    },
    {
        "content": "<p>Who needs other numbers? <span aria-label=\"robot\" class=\"emoji emoji-1f916\" role=\"img\" title=\"robot\">:robot:</span></p>",
        "id": 272120226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645020587
    },
    {
        "content": "<p>Are there situations where you want a <code>2</code>, but <code>(0+1)+1</code> doesn't work?</p>",
        "id": 272120371,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645020641
    },
    {
        "content": "<p>In maths (0+1)+1 would work fine for 2 :-)</p>",
        "id": 272125809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645023173
    },
    {
        "content": "<p>I guess that one thing that CS and mathematics can agree is the only relevant digits are <code>0</code> and <code>1</code>. Binary is king! XD</p>",
        "id": 273367054,
        "sender_full_name": "Mac",
        "timestamp": 1645915006
    }
]