[
    {
        "content": "<p>Is there a Lean4 analogue of <code>trace_state</code>, which just prints the current goal state? (In <code>TacticM</code>.)</p>",
        "id": 303563703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665554353
    },
    {
        "content": "<p><code>trace_state</code> is a lean 4 tactic, so the DIY answer is to find out what it does</p>",
        "id": 303581343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563445
    },
    {
        "content": "<p>you find the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinTactic traceState]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTraceState</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getUnsolvedGoals</span>\n  <span class=\"n\">withPPForTacticGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addRawTrace</span> <span class=\"o\">(</span><span class=\"n\">goalsToMessageData</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but the most important part is that you use <code>goalsToMessageData</code> and then print it. I would just do <code>logInfo (goalsToMessageData (&lt;- getGoals))</code></p>",
        "id": 303581531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563531
    },
    {
        "content": "<p>if you just pass an <code>MVarId</code> to <code>throwError</code> or <code>logInfo m!\"...\"</code> the results are surprisingly readable</p>",
        "id": 303581665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563617
    }
]