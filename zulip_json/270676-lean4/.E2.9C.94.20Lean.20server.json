[
    {
        "content": "<p>Good morning everyone!<br>\nI'm trying to use Lean as a server (<code>--server</code>) calling <code>$ ./lean --server  &lt; req.json</code></p>\n<p>The content of the <code>req.json</code> file is: {\"seq_num\":0,\"command\":\"sync\",\"file_name\":\"test.lean\",\"content\":\"#eval 5\"}</p>\n<p>I get the error <code>Watchdog error: Cannot read LSP request: Invalid header field: {\"seq_num\":0,\"command\":\"sync\",\"file_name\":\"test.lean\",\"content\":\"#eval 5\"}</code></p>\n<p>I've just downloaded the binary files and I'm running the command from inside the bin folder (hence the <code>./</code> before <code>lean</code>)</p>\n<p>Does anyone know what I am doing wrong?</p>",
        "id": 258356624,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634732350
    },
    {
        "content": "<p>that is lean 3</p>",
        "id": 258356774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732430
    },
    {
        "content": "<p>check <code>lean --version</code>?</p>",
        "id": 258356786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732439
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">m2</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">26</span><span class=\"n\">dda3f63d88</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 258356827,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634732468
    },
    {
        "content": "<p>lean 3 implements a custom communication protocol, not LSP</p>",
        "id": 258356832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732469
    },
    {
        "content": "<p>Oh, that's the input</p>",
        "id": 258356884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732505
    },
    {
        "content": "<p>that's not valid LSP I think</p>",
        "id": 258356895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732513
    },
    {
        "content": "<p>where did you get that <code>req.json</code>?</p>",
        "id": 258356958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732531
    },
    {
        "content": "<p>LSP requests always have something about json_rpc at the start</p>",
        "id": 258356995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732552
    },
    {
        "content": "<p>I was trying to follow this: <a href=\"https://github.com/jasonrute/communicating-with-lean/blob/master/communicate_with_lean.ipynb\">https://github.com/jasonrute/communicating-with-lean/blob/master/communicate_with_lean.ipynb</a></p>",
        "id": 258357049,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634732580
    },
    {
        "content": "<p>aha, your source is for lean 3</p>",
        "id": 258357069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732590
    },
    {
        "content": "<p>that whole document is about the lean 3 protocol</p>",
        "id": 258357145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732629
    },
    {
        "content": "<p>Lean 4 implements <a href=\"https://microsoft.github.io/language-server-protocol/\">https://microsoft.github.io/language-server-protocol/</a></p>",
        "id": 258357164,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1634732637
    },
    {
        "content": "<p>What I am trying to do is to use Lean4 as a REPL environment somehow. Is it possible? How does VS Code do it?</p>",
        "id": 258357340,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634732719
    },
    {
        "content": "<p>you can do the same thing as you are doing already, you just need to format the requests using LSP protocol like Marc's link</p>",
        "id": 258357403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732755
    },
    {
        "content": "<p>Hm, I'm afraid I can't actually run Lean code but just check whether the code is valid?</p>",
        "id": 258357592,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634732849
    },
    {
        "content": "<p>If you make a line like <code>#eval 2+2</code>, lean will respond with a diagnostic saying <code>4</code> at the <code>#eval</code></p>",
        "id": 258357686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732886
    },
    {
        "content": "<p>Will it remember a definition I've done previously?</p>",
        "id": 258357759,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634732927
    },
    {
        "content": "<p>You can send file change notifications and build up a file</p>",
        "id": 258357811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732957
    },
    {
        "content": "<p>as long as you append instead of replace, lean will have all the old definitions in the context</p>",
        "id": 258357867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634732987
    },
    {
        "content": "<p>Sweet, I guess that's what I need</p>",
        "id": 258357953,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733012
    },
    {
        "content": "<p>That said, it's probably a roundabout way to do things, and it will be more efficient to use the FFI interface instead</p>",
        "id": 258358001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733035
    },
    {
        "content": "<p>What's the FFI interface?</p>",
        "id": 258358047,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733061
    },
    {
        "content": "<p>You can link against lean and call the lean parse / eval functions directly</p>",
        "id": 258358099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733087
    },
    {
        "content": "<p>Hm, do you know a minimal example?</p>",
        "id": 258358197,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733132
    },
    {
        "content": "<p>It is somewhat uncharted waters though; there aren't too many examples to point at, and it also depends on what language you are writing the REPL in</p>",
        "id": 258358269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733174
    },
    {
        "content": "<p>Let's say I'm using Python</p>",
        "id": 258358354,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733229
    },
    {
        "content": "<p>(I can pick another language later if there's a better match)</p>",
        "id": 258358437,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733256
    },
    {
        "content": "<p>There is a minimal example of using FFI to C here: <a href=\"https://github.com/leanprover/lake/tree/master/examples/ffi\">https://github.com/leanprover/lake/tree/master/examples/ffi</a></p>",
        "id": 258358504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733290
    },
    {
        "content": "<p>most likely to get from there to python you would use a Python -&gt; C FFI</p>",
        "id": 258358550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733321
    },
    {
        "content": "<p>maybe it's too much trouble for version 1 :)</p>",
        "id": 258358580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634733341
    },
    {
        "content": "<p>Thank you very much. We can close this thread.</p>",
        "id": 258358937,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 258358943,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634733493
    },
    {
        "content": "<p>Have a look at the <code>Lean.Elab.Frontend</code> module, specifically <code>runFrontend</code>. There is also a REPL specifically for ML-like gym interaction <a href=\"https://github.com/dselsam/lean-gym/blob/713cb4d9406d12c0547a3922856aa3cb0aa67e72/Gym.lean\">here</a>.</p>",
        "id": 258408940,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1634750895
    },
    {
        "content": "<p>In general, though, if you just want a standard REPL to play around with Lean, the way to do that is to open a Lean file and type things into it. They will be evaluated as you type them, and you can use <code>#eval</code> statements to display the results.</p>",
        "id": 258409195,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1634750976
    },
    {
        "content": "<p>Amazing, thank you!</p>",
        "id": 258409424,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634751043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 258409436,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634751046
    },
    {
        "content": "<p>You can find LSP client implementations for Python if you haven't already</p>",
        "id": 258425166,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634756731
    },
    {
        "content": "<p>There are various ones for your IO/concurrency framework of choice, or there's a sans-io implementation that I've been meaning to try which should work however you're talking to it</p>",
        "id": 258425326,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634756780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Have you been able to make this work? I'd be interested to see the code.</p>",
        "id": 262061447,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1637325935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Hi there <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nYeah I got to the point of talking with the lean server using javascript/node. My first plan was going for something that would execute lean code line by line</p>",
        "id": 262066897,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637329067
    },
    {
        "content": "<p>So you are using the LSP protocol now?</p>",
        "id": 262067044,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1637329164
    },
    {
        "content": "<p>Yeah</p>",
        "id": 262067185,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637329269
    },
    {
        "content": "<p>The code base is messy and small because I got more interested in actually learning Lean and I stopped developing it. So I haven't even pushed it to github</p>",
        "id": 262067309,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637329351
    },
    {
        "content": "<p>Oh, I thought you might have code for a custom protocol like Sebastian suggested...</p>",
        "id": 262067360,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1637329408
    },
    {
        "content": "<p>The LSP approach won't be so useful for me I think.</p>",
        "id": 262067399,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1637329437
    },
    {
        "content": "<p>My plan was to build something like <code>alectryon</code> but specialized for Lean 4. Are you intending to build a REPL?</p>",
        "id": 262067662,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637329591
    },
    {
        "content": "<p>I would like to build a GUI that would allow the user to construct proofs in a specialized domain without writing any code.</p>",
        "id": 262067909,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1637329738
    },
    {
        "content": "<p>By \"specialized domain\" do you mean some specialized domain that the user wants to explore? Or a fixed domain for the tool like geometry or algebra?</p>",
        "id": 262068390,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637329973
    },
    {
        "content": "<p>A fixed domain. It could be geometry, integration, transforming optimization problems, Hoare triples, ...</p>",
        "id": 262068771,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1637330179
    },
    {
        "content": "<p>That's nice. I'm also interested in learning about and bridging the human-computer gap. I'm available if you need an extra pair of hands <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 262070268,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637330905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.20server/near/262067662\">said</a>:</p>\n<blockquote>\n<p>My plan was to build something like <code>alectryon</code> but specialized for Lean 4. Are you intending to build a REPL?</p>\n</blockquote>\n<p>I think this is already being worked on. <span class=\"user-mention\" data-user-id=\"371318\">@Clément</span> ?</p>",
        "id": 262072041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637331743
    },
    {
        "content": "<p>Oh, I saw his work for Lean 3 but I didn't know he was working on a version for Lean 4 <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 262074106,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637332752
    },
    {
        "content": "<p>I think it's someone's student, maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  (sorry for @ing if I'm wrong!)</p>",
        "id": 262074267,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637332819
    },
    {
        "content": "<p>Yes, see <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4/near/260207345\">this message</a></p>",
        "id": 262074933,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1637333144
    }
]