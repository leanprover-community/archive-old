[
    {
        "content": "<p>I use <code>Task</code> and <code>IO.asTask</code> heavily in Lake for parallel building, but there are some details to the implementation I am not sure I understand properly, so I am hoping to clarify them here:</p>\n<ul>\n<li>What is the difference between <code>IO.wait task</code> and <code>task.get</code>?</li>\n<li>What is the difference between <code>IO.mapTask f task</code> and <code>IO.asTask do IO.wait task; act</code>?</li>\n<li>Similarly, What is the difference between <code>IO.mapTasks f tasks</code> and <code>IO.asTask do let xs ← tasks.mapM IO.wait; f xs</code>?</li>\n</ul>",
        "id": 248578429,
        "sender_full_name": "Mac",
        "timestamp": 1628233754
    },
    {
        "content": "<blockquote>\n<p>What is the difference between <code>IO.wait task</code> and <code>task.get</code>?</p>\n</blockquote>\n<p>The former is a side effect, so it will always be executed even if the return value is not acutally used.</p>\n<blockquote>\n<p>What is the difference between <code>IO.mapTask f task</code> and <code>IO.asTask do IO.wait task; act</code>?</p>\n</blockquote>\n<p>The former doesn't uselessly block a thread</p>\n<blockquote>\n<p>Similarly, What is the difference between <code>IO.mapTasks f tasks</code> and <code>IO.asTask do let xs ← tasks.mapM IO.wait; f xs</code>?</p>\n</blockquote>\n<p>ditto</p>",
        "id": 248579994,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628235175
    },
    {
        "content": "<p>To expand on the latter two answers a bit, the thread pool needs to know the dependency graph between tasks in order to schedule them correctly. Using <code>IO.wait</code> does not register a dependency and will result in a deadlock when there are few threads in the pool and a task gets scheduled before its dependency. So within tasks, you should always use <code>mapTask</code> (<code>wait</code> is okay on the main thread).</p>",
        "id": 248580524,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1628235629
    },
    {
        "content": "<blockquote>\n<p>IO.wait does not register a dependency and will result in a deadlock when there are few threads in the pool</p>\n</blockquote>\n<p>Lean 3 used to spawn a new thread in this case, does Lean 4 no longer do this?</p>",
        "id": 248581536,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628236561
    },
    {
        "content": "<p>It doesn't. That does mean that you need to be mindful of not blocking the pool for too long (or even deadlocking it), and use <code>Task.Priority.dedicated</code> otherwise. I'm not sure if the Lean 3 approach was more sensible, it sure sounds like a recipe for tanking performance. It looks like professional implementation of growing thread pools (most of Rust's seem to be fixed?) are at least <a href=\"https://mattwarren.org/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/\">very careful</a> about injecting new threads.</p>",
        "id": 248584260,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628238659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> has marked this topic as unresolved.</p>",
        "id": 258910009,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635127250
    },
    {
        "content": "<p>Another question in regards to IO Tasks:  is <code>IO.mapTask f task</code> significantly more efficient than <code>IO.bindTask task (pure &lt;$&gt; f)</code> or is it just more convenient?</p>",
        "id": 258910093,
        "sender_full_name": "Mac",
        "timestamp": 1635127359
    },
    {
        "content": "<p>The particular case I am most curious about is <code>IO.mapTask (do ...;  pure x) task</code> vs <code>IO.bindTask task do ...; pure &lt;| pure x</code>.</p>",
        "id": 258910256,
        "sender_full_name": "Mac",
        "timestamp": 1635127595
    },
    {
        "content": "<p>It is more efficient, but probably not significantly</p>",
        "id": 258931091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1635151558
    }
]