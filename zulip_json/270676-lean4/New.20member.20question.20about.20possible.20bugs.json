[
    {
        "content": "<p>Hello all; I am trying Lean right now in my Linux box, and encountered two unexpected crashes while compiling lean code from the tutorial.  I hope this is the right place to ask about them; if not, please direct me to the appropriate place!  My system is a latest Arch Linux build, and the lean version  is <code>Lean (version 4.0.0, commit 7dbfaf9b7519, Release)</code></p>\n<p>Both crashes are in sample code from Functional Programming in Lean.</p>\n<p>The first problem comes from Section 2.4 (Worked Example : cat) where the Lean version of <code>cat</code>, named <code>feline</code>, is implemented.  It is supposed to be a simple version of <code>cat</code> that can nevertheless read infinite streams.</p>\n<p>However, when I run it with an infinite stream, I get a Lean error</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># works fine</span>\n$ lean --run feline.Lean &lt;<span class=\"o\">(</span> <span class=\"nb\">echo</span> <span class=\"s1\">'hello!'</span> <span class=\"o\">)</span>\nhello!\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\">#crashes</span>\n$ lean --run feline.Lean /dev/urandom <span class=\"p\">|</span> head -c <span class=\"m\">100</span> <span class=\"p\">|</span> tr -dc <span class=\"s1\">'[:alnum:]'</span>\nuncaught exception: resource vanished <span class=\"o\">(</span>error code: <span class=\"m\">32</span>, broken pipe<span class=\"o\">)</span>\n</code></pre></div>\n<p>I have been unable to pipe any infinite stream into the <code>feline</code> program successfully; I always get non-zero exit code and the above message.</p>\n<p>The second problem I encountered was at the end of the interlude.  We have the Lean  function <code>showFifth</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">showFifth</span> <span class=\"o\">(</span><span class=\"n\">inp</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">inp.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inp</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which carries evidence of soundness in its second argument, and can be carried out by <code>simp</code>.  I expected calling this function with a non-compliant input to cause Lean to reject the line; instead, however, I get a segfault in the command line, and vscode reports Lean server crash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">showFifth</span> <span class=\"o\">(</span><span class=\"n\">inp</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">inp.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inp</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">showFifth</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean --run Main.lean\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>    <span class=\"m\">26700</span> segmentation fault <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>  lean --run Main.lean\n</code></pre></div>\n<p>Lake building reports:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lake build\nBuilding Main\nerror: &gt; <span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span>./build/lib <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>/home/user/.elan/toolchains/leanprover--lean4---stable/lib:./build/lib /home/user/.elan/toolchains/leanprover--lean4---stable/bin/lean ./././Main.lean -R ././. -o ./build/lib/Main.olean -i ./build/lib/Main.ilean -c ./build/ir/Main.c\nerror: external <span class=\"nb\">command</span> <span class=\"sb\">`</span>/home/user/.elan/toolchains/leanprover--lean4---stable/bin/lean<span class=\"sb\">`</span> exited with code <span class=\"m\">139</span>\n</code></pre></div>\n<p>I am not sure if this is supposed to be the result of evaluating on an invalid input, or it is indeed a bug.</p>\n<p>Can someone who knows more give me some directions?</p>",
        "id": 319667767,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1672950743
    },
    {
        "content": "<p>The second issue is <a href=\"https://github.com/leanprover/lean4/issues/1697\">https://github.com/leanprover/lean4/issues/1697</a>. The first one is new to me, but you could very well be the first one exercising it.</p>",
        "id": 319669347,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672951411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20member.20question.20about.20possible.20bugs/near/319669347\">said</a>:</p>\n<blockquote>\n<p>The second issue is <a href=\"https://github.com/leanprover/lean4/issues/1697\">https://github.com/leanprover/lean4/issues/1697</a>. The first one is new to me, but you could very well be the first one exercising it.</p>\n</blockquote>\n<p>Oh, I see there is a github page for lean; I will look there if my first problem is a known issue and if not, I will try opening one.</p>",
        "id": 319670444,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1672951897
    },
    {
        "content": "<p>OK, I see one possibly related issue in the github repo, Issue <a href=\"https://github.com/leanprover-community/mathlib/pull/349\">#349</a>, but it does not address the present situation.  I have opened a new issue to study the possible bug: <a href=\"https://github.com/leanprover/lean4/issues/2013\">https://github.com/leanprover/lean4/issues/2013</a></p>",
        "id": 319678194,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1672955164
    }
]