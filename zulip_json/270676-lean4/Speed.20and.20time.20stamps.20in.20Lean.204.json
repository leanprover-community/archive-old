[
    {
        "content": "<p>How do I measure the speed of my Lean code?</p>\n<p>It would be nice if there were some kind of date which worked well under toString.</p>\n<p>Best,<br>\nDean</p>",
        "id": 313190703,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669859620
    },
    {
        "content": "<p>For a simple timing function, you can use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">time</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">BaseIO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">monoNanosNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">stop</span> <span class=\"bp\">←</span> <span class=\"n\">monoNanosNow</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">time'</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">BaseIO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">monoNanosNow</span>\n  <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">stop</span> <span class=\"bp\">←</span> <span class=\"n\">monoNanosNow</span>\n  <span class=\"n\">return</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span>\n</code></pre></div>\n<p>Afaik noone has written a decent time and date library yet (which is surprisingly subtle).</p>",
        "id": 313242877,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669889617
    },
    {
        "content": "<p>Timing library would be nice, there is also <code>timeit</code> function, <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/tests/playground/badupdate1.lean\">example</a>.</p>\n<p>I'm not surprised noone wrote time and date library, obligatory computerphile <a href=\"https://youtu.be/-5wpm-gesOY\">video</a> on that topic :)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"-5wpm-gesOY\" href=\"https://youtu.be/-5wpm-gesOY\"><img src=\"https://uploads.zulipusercontent.net/da80a512f5bc50443b9d55d577c1d7904d5cbe55/68747470733a2f2f692e7974696d672e636f6d2f76692f2d3577706d2d6765734f592f64656661756c742e6a7067\"></a></div>",
        "id": 313265059,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669896955
    },
    {
        "content": "<p>Thanks very much this works great.</p>\n<p><a href=\"/user_uploads/3121/Mfj6DvMdY5InXRlm2DxRYksC/kindbubble.jpeg\">-- Kind Bubble</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mfj6DvMdY5InXRlm2DxRYksC/kindbubble.jpeg\" title=\"-- Kind Bubble\"><img src=\"/user_uploads/3121/Mfj6DvMdY5InXRlm2DxRYksC/kindbubble.jpeg\"></a></div>",
        "id": 313358757,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669923055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Speed.20and.20time.20stamps.20in.20Lean.204/near/313265059\">said</a>:</p>\n<blockquote>\n<p>Timing library would be nice, there is also <code>timeit</code> function, <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/tests/playground/badupdate1.lean\">example</a>.</p>\n<p>I'm not surprised noone wrote time and date library, obligatory computerphile <a href=\"https://youtu.be/-5wpm-gesOY\">video</a> on that topic :)</p>\n</blockquote>\n<p>I tried copying haskells time stuff a while ago but I got too confused by what was going on to be honest xddd</p>",
        "id": 313364458,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669924783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> There is <a href=\"https://github.com/ammkrn/timelib\">a date/time library</a> for Lean 4. When std and mathlib are more stable I have a bunch of improvements and changes to make, but the functionality is there, as are the proofs that were doable with the infrastructure available at the time.</p>",
        "id": 313702941,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670081446
    }
]