[
    {
        "content": "<p>Is it possible to, for a given type class <code>Name</code>, figure out a list of all instance declarations that can possibly result in an instance of it? I've tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">insts</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">SynthInstance.getInstances</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">v.name</span> <span class=\"o\">(</span><span class=\"n\">v.levelParams.map</span> <span class=\"n\">mkLevelParam</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>so far, but this always results in an empty list of instances so I suspect I'm doing something wrong here...</p>",
        "id": 263592854,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638544234
    },
    {
        "content": "<p>You need to add metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">Inhabited</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n  <span class=\"n\">SynthInstance.getInstances</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">fn</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263598083,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638546604
    },
    {
        "content": "<p>The argument to <code>getInstances</code> should be <code>Inhabited.{?u} ?ty</code>.</p>",
        "id": 263598117,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638546622
    },
    {
        "content": "<p>That did indeed work out, thanks!</p>\n<p>Another question in this case, I've seen this Telescope thing being mentioned in a few functions while reading parts of the compiler code and I don't really know what a telescope is supposed to be in this context? Is there somewhere where I could read about that?</p>",
        "id": 263599554,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638547213
    },
    {
        "content": "<p>A telescope is a list of terms (here often local constants) where the types of later terms may refer to earlier terms. E.g. <code>x : Nat, y : Fin x, z : x &gt; 0</code>. When you open a type starting with <code>n</code> quantifiers, or a term starting with <code>n</code> lambdas, you get a telescope with <code>n</code> arguments plus the body, which may refer to each term in the telescope.</p>",
        "id": 263600708,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1638547675
    },
    {
        "content": "<p>Ah and the reducing functions take a telescope and produce some sort of value from it?</p>",
        "id": 263601684,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638548112
    },
    {
        "content": "<p>No, \"reducing\" here means unfold definitions etc. That is, <code>id (Type → Type → Type)</code> would get you two terms with reducing, but zero terms without reducing.</p>",
        "id": 263601886,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638548204
    },
    {
        "content": "<p>Whenever I feel like I finally understood what's going on something new comes around <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span>.</p>",
        "id": 263605158,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638549716
    },
    {
        "content": "<p>that happens in math too</p>",
        "id": 263702489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638619887
    },
    {
        "content": "<p>Now that I learned that <code>getInstances</code> exists, I have a question about it as well. Since <code>getInstances</code> returns raw constants without arguments, is there a convenient way to add arguments to each result? Or, in other words, is it possible to have a version of <code>synthInstance</code> that returns multiple results? I'm not sure if the question even makes sense because I suppose the resulting list isn't guaranteed to be finite... What I'm really trying to achieve is to have a tactic look at multiple candidates of instances and select one of them, and I'm wondering about the best way to achieve this. I guess the pedestrian solution would be to introduce a chaining mechanism into the type class itself, but if I can just query all instances, I'd prefer that.</p>",
        "id": 264234837,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639005215
    }
]