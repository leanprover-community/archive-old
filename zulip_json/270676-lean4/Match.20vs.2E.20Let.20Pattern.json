[
    {
        "content": "<p>In the implementation of <code>HashMap</code> I noticed that sometimes structures are destructured using a <code>match</code> and sometimes a <code>let</code>-pattern. E.g. in <a href=\"https://github.com/leanprover/lean4/blob/6ce6b1270712919052c665801bce379522089ed6/src/Std/Data/HashMap.lean#L73\"><code>HashMap.contains</code></a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">contains</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMapImp</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">buckets</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdx</span> <span class=\"n\">buckets.property</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toUSize</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">buckets.val.uget</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Is there a particular reason to use the <code>match</code>-expression here, instead of just using a <code>let</code>-pattern? So something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">contains</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMapImp</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">buckets</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdx</span> <span class=\"n\">buckets.property</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toUSize</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">buckets.val.uget</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 283302322,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1653304266
    },
    {
        "content": "<p>According to <a href=\"https://github.com/leanprover/lean4/blame/6ce6b1270712919052c665801bce379522089ed6/src/Std/Data/HashMap.lean#L73\">git blame</a> that function is at least 1 year old. And the <code>match m with</code> line is 2 years old. I don't know when the <code>let</code>-pattern syntax was introduced so maybe it didn't exist yet</p>",
        "id": 283302923,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653304628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Match.20vs.2E.20Let.20Pattern/near/283302923\">said</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://github.com/leanprover/lean4/blame/6ce6b1270712919052c665801bce379522089ed6/src/Std/Data/HashMap.lean#L73\">git blame</a> that function is at least 1 year old. And the <code>match m with</code> line is 2 years old. I don't know when the <code>let</code>-pattern syntax was introduced so maybe it didn't exist yet</p>\n</blockquote>\n<p>I was considering the same explanation. But there's also this implementation of <a href=\"https://github.com/leanprover/lean4/blob/6ce6b1270712919052c665801bce379522089ed6/src/Std/Data/HashMap.lean#L167\"><code>HashMap.find?</code></a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m.find</span><span class=\"bp\">?</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>... which I guess could always have been written as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">m.val.find</span><span class=\"bp\">?</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>So I feel like there's more to it :D</p>",
        "id": 283303427,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1653304824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> There is nothing. This is an old file that was created using a Lean 3 variant. When we started Lean 4, we first tried to simplify Lean 3 as much as possible to make the bootstrapping process simpler. We had to use many workarounds until we managed to compile Lean 4 using itself. We have removed most of these workarounds, but some are still there. Here is the original file: <a href=\"https://github.com/leanprover/lean4/blob/5a560b6d4379698aa5a87d1b9e4cede3c8c19909/library/init/data/hashmap/basic.lean\">https://github.com/leanprover/lean4/blob/5a560b6d4379698aa5a87d1b9e4cede3c8c19909/library/init/data/hashmap/basic.lean</a></p>",
        "id": 283365172,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653333694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Ok, thanks for resolving the mystery :D<br>\nAre PRs cleaning up these kinds of things welcome?</p>",
        "id": 283365933,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1653334077
    },
    {
        "content": "<p>Thanks for asking. We are currently a bit overwhelmed. Let's wait until Mathilb has been ported to Lean 4. We are trying to prioritize missing features and bugs.</p>",
        "id": 283366269,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653334239
    }
]