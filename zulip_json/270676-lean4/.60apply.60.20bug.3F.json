[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hPQ</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hP</span>\n</code></pre></div>\n<p>works, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hnP</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n</code></pre></div>\n<p>does not, with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">False</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 221677361,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609868551
    },
    {
        "content": "<p>replacing <code>¬P</code> with <code>P → False</code> then it works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hnP</span> <span class=\"c1\">-- this works</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 221677730,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609868709
    },
    {
        "content": "<p><code>¬</code> is not reducible</p>",
        "id": 221678239,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1609868946
    },
    {
        "content": "<p>Is it semireducible? Or does lean 4 <code>apply</code> not see through semireducible definitions</p>",
        "id": 221678410,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1609869033
    },
    {
        "content": "<p>What's the correct tactic then?</p>",
        "id": 221687749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609873591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <br>\nPushed <a href=\"https://github.com/leanprover/lean4/commit/5baa1627139234c73571e71aad5bf9dedb7be26a\">https://github.com/leanprover/lean4/commit/5baa1627139234c73571e71aad5bf9dedb7be26a</a></p>",
        "id": 221698504,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609879118
    },
    {
        "content": "<p>nice thanks</p>",
        "id": 221698533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609879139
    },
    {
        "content": "<p>great thanks! cc <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span></p>",
        "id": 221698553,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1609879156
    }
]