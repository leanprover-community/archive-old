[
    {
        "content": "<p>I just tried to enable Lake's new <code>precompileModules</code> option for Aesop. It seems to work in principle (yay!) and makes things noticably faster (big yay!), but I encountered some issues. Repro branch: <a href=\"https://github.com/JLimperg/aesop/tree/precompileModules\">https://github.com/JLimperg/aesop/tree/precompileModules</a></p>\n<p>(1) When I load an Aesop module in VSCode or Emacs, I get errors like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error loading library, Aesop-Builder-Default: cannot open shared object file: No such file or directory\n</code></pre></div>\n<p>(2) When I open a test file (which depends on Aesop) in VSCode or Emacs, I get errors like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>`/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/lake print-paths Init Aesop` failed:\n\nstderr:\ninfo: &gt; /home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/leanc -c -o ./build/ir/Aesop.o ./build/ir/Aesop.c -O3 -DNDEBUG\nerror: stderr:\nIn file included from ./build/ir/Aesop.c:4:\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/include/lean/lean.h:8:10: fatal error: 'stddef.h' file not found\n#include &lt;stddef.h&gt;\n         ^~~~~~~~~~\n1 error generated.\nerror: external command /home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/leanc exited with status 1\nerror: build failed\n</code></pre></div>\n<p>(3) When I run <code>lake clean &amp;&amp; lake build</code>, I get errors like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&gt; LEAN_PATH=./build/lib LD_LIBRARY_PATH=/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/lib:./build/lib /home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/lean ./././Aesop.lean -R ././. -o ./build/lib/Aesop.olean -i ./build/lib/Aesop.ilean -c ./build/ir/Aesop.c --load-dynlib=libAesop-Check.so --load-dynlib=libAesop-Nanos.so --load-dynlib=libAesop-Util-UnionFind.so --load-dynlib=libAesop-Util-Basic.so --load-dynlib=libAesop-Util-UnorderedArraySet.so --load-dynlib=libAesop-Util.so --load-dynlib=libAesop-Frontend-ElabM.so --load-dynlib=libAesop-Percent.so --load-dynlib=libAesop-Rule-Name.so --load-dynlib=libAesop-Index-Basic.so --load-dynlib=libAesop-Index.so --load-dynlib=libAesop-Rule-BranchState.so --load-dynlib=libAesop-RuleTac-Basic.so --load-dynlib=libAesop-Rule-Basic.so --load-dynlib=libAesop-Rule.so --load-dynlib=libAesop-Builder-Basic.so --load-dynlib=libAesop-Builder-Apply.so --load-dynlib=libAesop-RuleTac-Cases.so --load-dynlib=libAesop-Builder-Cases.so --load-dynlib=libAesop-Builder-Constructors.so --load-dynlib=libAesop-Builder-NormSimp.so --load-dynlib=libAesop-Builder-Tactic.so --load-dynlib=libAesop-Builder-Default.so --load-dynlib=libAesop-Builder-Forward.so --load-dynlib=libAesop-Builder.so --load-dynlib=libAesop-RuleSet.so --load-dynlib=libAesop-Frontend-RuleExpr.so --load-dynlib=libAesop-Frontend-Attribute.so --load-dynlib=libAesop-Options.so --load-dynlib=libAesop-RuleTac-Apply.so --load-dynlib=libAesop-RuleTac-Forward.so --load-dynlib=libAesop-RuleTac-Tactic.so --load-dynlib=libAesop-RuleTac.so --load-dynlib=libAesop-Search-Expansion-Simp-Basic.so --load-dynlib=libAesop-Search-Expansion-Simp-SimpAll.so --load-dynlib=libAesop-Search-Expansion-Simp-SimpGoal.so --load-dynlib=libAesop-Search-Expansion-Simp.so --load-dynlib=libAesop-Tracing-Init.so --load-dynlib=libAesop-Tracing.so --load-dynlib=libAesop-Constants.so --load-dynlib=libAesop-Tree-BranchState.so --load-dynlib=libAesop-Tree-UnsafeQueue.so --load-dynlib=libAesop-Tree-Data.so --load-dynlib=libAesop-Tree-Traversal.so --load-dynlib=libAesop-Tree-RunMetaM.so --load-dynlib=libAesop-Tree-TreeM.so --load-dynlib=libAesop-Tree-AddRapp.so --load-dynlib=libAesop-Tree-State.so --load-dynlib=libAesop-Tree-Check.so --load-dynlib=libAesop-Tree-Format.so --load-dynlib=libAesop-Tree-ExtractProof.so --load-dynlib=libAesop-Tree-ExtractSafePrefixes.so --load-dynlib=libAesop-Tree-Free.so --load-dynlib=libAesop-Tree.so --load-dynlib=libAesop-Search-Queue.so --load-dynlib=libAesop-Profiling.so --load-dynlib=libAesop-Search-SearchM.so --load-dynlib=libAesop-Search-RuleSelection.so --load-dynlib=libAesop-Search-Expansion.so --load-dynlib=libAesop-Search-Main.so --load-dynlib=libAesop-Frontend-Command.so --load-dynlib=libAesop-Frontend-Tactic.so --load-dynlib=libAesop-Frontend.so --load-dynlib=libAesop-BuiltinRules-Assumption.so --load-dynlib=libAesop-BuiltinRules-ApplyHyps.so --load-dynlib=libAesop-BuiltinRules-DestructProducts.so --load-dynlib=libAesop-BuiltinRules-Intros.so --load-dynlib=libAesop-BuiltinRules-Split.so --load-dynlib=libAesop-BuiltinRules-Subst.so --load-dynlib=libAesop-BuiltinRules.so --load-dynlib=libAesop-Main.so\nstderr:\nError: index out of bounds\nbacktrace:\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_panic_fn+0x9e)[0x7f0cb62e7f4e]\n./build/lib/libAesop-Frontend-RuleExpr.so(initialize_Aesop_Frontend_RuleExpr+0x36e3)[0x7f0cb28cae93]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_run_mod_init+0x28)[0x7f0cb62db208]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Array_forInUnsafe_loop___at_Lean_registerInitAttrUnsafe___spec__14+0x190)[0x7f0cb5d98ea0]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_registerInitAttrUnsafe___lambda__3+0xce)[0x7f0cb5d9a75e]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_registerInitAttrUnsafe___lambda__3___boxed+0x3a)[0x7f0cb5d9aada]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_3+0x628)[0x7f0cb62f4738]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_registerParametricAttribute___rarg___lambda__1+0x5b)[0x7f0cb5f5c00b]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_3+0x666)[0x7f0cb62f4776]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l___private_Lean_Environment_0__Lean_finalizePersistentExtensions_loop+0x8bd)[0x7f0cb505594d]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_importModules___lambda__3+0x818)[0x7f0cb505c918]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_2+0x382)[0x7f0cb62f3342]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_1+0x16a)[0x7f0cb62f24ea]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_withImporting___rarg+0x62)[0x7f0cb516f3c2]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_importModules___lambda__4___boxed+0x3d)[0x7f0cb505d19d]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_2+0x382)[0x7f0cb62f3342]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_1+0x16a)[0x7f0cb62f24ea]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_profileitIOUnsafe___rarg___lambda__1+0xe)[0x7f0cb51e40fe]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_profileitIOUnsafe___rarg___lambda__1___boxed+0xc)[0x7f0cb51e430c]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_apply_1+0x156)[0x7f0cb62f24d6]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_profileit+0x63)[0x7f0cb623bbe3]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_profileitIOUnsafe___rarg+0x54)[0x7f0cb51e4224]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_import_modules+0x103)[0x7f0cb505d003]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(l_Lean_Elab_processHeader+0x35)[0x7f0cb45db045]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_run_frontend+0x294)[0x7f0cb4d6abf4]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(+0x2b50c5f)[0x7f0cb61d5c5f]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/../lib/lean/libleanshared.so(lean_main+0x1dbb)[0x7f0cb61d7d5b]\n/lib64/libc.so.6(+0x2934a)[0x7f0cb348f34a]\n/lib64/libc.so.6(__libc_start_main+0x7c)[0x7f0cb348f3fc]\n/home/jannis/.elan/toolchains/leanprover--lean4---nightly-2022-07-04/bin/lean(_start+0x2e)[0x20180e]\n</code></pre></div>\n<p>However, these errors don't seem to be fatal: the build succeeds and I can still successfully run the test suite.</p>",
        "id": 288506811,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1657016455
    },
    {
        "content": "<p>The first two should be <a href=\"https://github.com/leanprover/lake/issues/93\">https://github.com/leanprover/lake/issues/93</a>. I should probably look into the bounds panic, even if it is not fatal as you said. At least we have a stacktrace now.</p>",
        "id": 288510356,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657018615
    },
    {
        "content": "<p>Hi! I am working on a package with <code>precompileModules := true</code> in the lakefile, and I can see that <code>.so</code> files are being built. However <code>ps faux</code> on an example file just shows <code>/home/nawrocki/.elan/toolchains/leanprover--lean4---nightly-2022-07-14/bin/lean --worker file:///home/nawrocki/lean-smt/Test/BitVec/AES.lean</code>, i.e. no <code>--load-dynlib</code> or whatever options are passed to the worker. Is there a separate mechanism for loading them, or should that flag be there? This is on <code>nightly-2022-07-14</code>.</p>",
        "id": 290924303,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658854967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/precompileModules/near/290924303\">said</a>:</p>\n<blockquote>\n<p>no <code>--load-dynlib</code> or whatever options are passed to the worker. Is there a separate mechanism for loading them</p>\n</blockquote>\n<p>Yep this is right, The worker, during its <code>lake print-paths</code> invocation gets back a list of dynlibs to load, which it then does -- no flags needed.</p>",
        "id": 290926661,
        "sender_full_name": "Mac",
        "timestamp": 1658856025
    },
    {
        "content": "<p>Ah cool, thanks!</p>",
        "id": 290926973,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658856195
    },
    {
        "content": "<p>More questions :D How do I load the precompiled modules into a command-line invocation of Lean? To get imports to work I usually write <code>lake env lean Foo.lean</code>, but on the command line this does not load the shared libraries even when <code>precompileModules := true</code> in the <code>lakefile</code>. I was caught unaware and wondering why something that was instant in the editor was so slow on the command line. So what magic invocation should I use? Obviously <code>lake env lean --load-dynlib=lib1.so --load-dynlib=lib2.so Foo.lean</code> manually is non-ideal</p>",
        "id": 291430348,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659189563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> such a command does not yet exist. In my view, the best way to do this would be to support specifying Lean dynlibs/plugins through an environment variables (see <a href=\"#narrow/stream/147302-lean4-dev/topic/Lean.20command.20line.20size/near/289393949\">my proposal</a>) -- i just haven't got around to this yet.</p>",
        "id": 291437269,
        "sender_full_name": "Mac",
        "timestamp": 1659197665
    },
    {
        "content": "<p>I am a little curious as to what you are using this for. Generally <code>lake env</code> is used to run custom executables that run their own frontend (and thus don't usually have their own <code>--load-dynlib</code>) options anyway.</p>",
        "id": 291437358,
        "sender_full_name": "Mac",
        "timestamp": 1659197780
    },
    {
        "content": "<p>One more note: Even with environment variables, passing dynlibs through something like <code>lake env</code> would require a significant change in how it works. Currently, <code>lake env</code> does not build anything. However, Lake only knows what dynlibs their are after a build, so <code>lake env</code> would need to be augmented to build the whole package before executing the subcommand.</p>",
        "id": 291437485,
        "sender_full_name": "Mac",
        "timestamp": 1659197980
    },
    {
        "content": "<p>(This should not be difficult to do, but it would be a notable change in behavior.)</p>",
        "id": 291437557,
        "sender_full_name": "Mac",
        "timestamp": 1659198016
    },
    {
        "content": "<blockquote>\n<p>I am a little curious as to what you are using this for. </p>\n</blockquote>\n<p>It's for running <code>.produced</code>/<code>.expected</code> style tests in CI, as in <a href=\"https://github.com/Vtec234/lean-smt/blob/485dc172e1284e6d9558368c03dc4c9e06b4c5da/lakefile.lean#L60\">here</a>. Note that we shell out to a <code>lean</code> process (actually without <code>lake env</code> in this case, but in another repo I am running <code>lake env lean</code> towards the same end from a shell script).</p>",
        "id": 291440330,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659201041
    },
    {
        "content": "<p>I suppose running the frontend directly from the Lake script would not help either.</p>",
        "id": 291440514,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659201246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Some notes on that code (hopefully this is helpful):</p>\n<ul>\n<li>Scripts are run in <code>ScriptM</code>, not plain <code>IO</code>. This means you have access to Lake's computed <code>Workspace</code>. Thus, for example, you can do <code>let lean &lt;- getLean</code> to get the already detected Lean. rather than re-detecting it your self.</li>\n<li>Since that script already assumes the tests requisite modules are built, you could just pass the dynlib from the module you want directly in the script (e.g., <code>(&lt;- findModule? &lt;mod-name&gt;).get!.dynlibFile</code> to get the file and  then pass <code>--load=dynlib={file}</code> to the lean invocation).</li>\n<li>Also, for <code>LEAN_PATH</code>, you can use <code>&lt;- getAugmentedLeanPath</code> instead of computing it yourself.</li>\n</ul>",
        "id": 291442924,
        "sender_full_name": "Mac",
        "timestamp": 1659204040
    },
    {
        "content": "<p>Thanks for the tips! For the dynlibs though, I assume I would have to manually grab it for every module? Is there a quick way to do what Lake already does when invoking <code>lean</code> and get <em>all</em> the transitively required dynlibs?</p>",
        "id": 291445467,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659207486
    },
    {
        "content": "<p>Note that there is no need for passing the transitive closure on Unix, the root .so is sufficient. But I suppose it would be preferable if your tests worked on Windows as well.</p>",
        "id": 291446591,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659209030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/precompileModules/near/291445467\">said</a>:</p>\n<blockquote>\n<p>Thanks for the tips! For the dynlibs though, I assume I would have to manually grab it for every module? Is there a quick way to do what Lake already does when invoking <code>lean</code> and get <em>all</em> the transitively required dynlibs?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> No, because things like external libraries dynlibs can only be determined after a build. If you want to do that you essentially need to invoke <a href=\"https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/Build/Imports.lean#L27-L57\"><code>buildImportsAndDeps</code></a> like <code>print-paths</code> <a href=\"https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/CLI/Main.lean#L178-L179\">does</a>.</p>",
        "id": 291446835,
        "sender_full_name": "Mac",
        "timestamp": 1659209340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/precompileModules/near/291446591\">said</a>:</p>\n<blockquote>\n<p>Note that there is no need for passing the transitive closure on Unix, the root .so is sufficient. But I suppose it would be preferable if your tests worked on Windows as well.</p>\n</blockquote>\n<p>Indeed it looks like the shared libraries load their dependency <code>.so</code>s. However with just <code>precompileModules := true</code>, there <em>is no</em> root shared lib. As in, I get <code>libFoo-Mod1.so</code>, <code>libFoo-Mod2.so</code> etc but there is no <code>build/lib/libFoo.so</code>.</p>",
        "id": 291447011,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659209626
    },
    {
        "content": "<p>Since this is the case, I guess at least on Unix <code>lake build</code> does not in fact have to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span>./build/lib <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>/home/nawrocki/.elan/toolchains/leanprover--lean4---nightly-2022-07-29/lib:./build/lib /home/nawrocki/.elan/toolchains/leanprover--lean4---nightly-2022-07-29/bin/lean ./././Smt/Tactic/Smt.lean -R ././. -o ./build/lib/Smt/Tactic/Smt.olean -i ./build/lib/Smt/Tactic/Smt.ilean -c ./build/ir/Smt/Tactic/Smt.c --load-dynlib<span class=\"o\">=</span>libSmt-Data-Sexp.so --load-dynlib<span class=\"o\">=</span>libSmt-Dsl-Sexp.so --load-dynlib<span class=\"o\">=</span>libSmt-Term.so --load-dynlib<span class=\"o\">=</span>libSmt-Solver.so --load-dynlib<span class=\"o\">=</span>libSmt-Commands.so --load-dynlib<span class=\"o\">=</span>libSmt-Graph.so --load-dynlib<span class=\"o\">=</span>libSmt-Util.so --load-dynlib<span class=\"o\">=</span>libSmt-Attribute.so --load-dynlib<span class=\"o\">=</span>libSmt-Translator.so --load-dynlib<span class=\"o\">=</span>libSmt-Tactic-WHNFConfigurableRef.so --load-dynlib<span class=\"o\">=</span>libSmt-Tactic-WHNFConfigurable.so --load-dynlib<span class=\"o\">=</span>libSmt-Tactic-WHNFSmt.so --load-dynlib<span class=\"o\">=</span>libSmt-Tactic-EqnDef.so --load-dynlib<span class=\"o\">=</span>libSmt-Query.so\n</code></pre></div>",
        "id": 291447065,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659209705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/precompileModules/near/291446835\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> No, because things like external libraries dynlibs can only be determined after a build. If you want to do that you essentially need to invoke <a href=\"https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/Build/Imports.lean#L27-L57\"><code>buildImportsAndDeps</code></a> like <code>print-paths</code> <a href=\"https://github.com/leanprover/lake/blob/dcf8e1fc406acfd4dbbfd691f4ecf76966fae407/Lake/CLI/Main.lean#L178-L179\">does</a>.</p>\n</blockquote>\n<p>I will try this since it sounds like the only cross-platform solution.</p>",
        "id": 291447155,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659209824
    },
    {
        "content": "<p>Is it possible to specify in the<code>lakefile</code> to produce <code>libFoo.so</code> during the build? I am looking through the list of <code>lean_lib</code> arguments and tried <code>nativeFacets := #[Module.oFacet, Module.dynlibFacet]</code> but that fails with a cyclic dependency error (anyhow it doesn't sound like this would do the right thing). I can run <code>lake build Foo:shared</code> on the command line but wanted to default to that.</p>",
        "id": 291447624,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1659210473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Unforunately, no, there is no way to default a library to produce something other than the lean binaries currently.</p>",
        "id": 291450692,
        "sender_full_name": "Mac",
        "timestamp": 1659214844
    },
    {
        "content": "<p>This was something I considered and thought of adding a <code>facet</code> parameter to <code>defaultTarget</code>. Thus, it is on the TODO list, but as I only have a week left in my internship it may be a while before its complete (at least by me).</p>",
        "id": 291450709,
        "sender_full_name": "Mac",
        "timestamp": 1659214890
    },
    {
        "content": "<p>Wow, I really underestimated what impact <code>precompileModules</code> would have. On my test example, the time my tactic takes went down from 1800ms to 550ms, just by enabling <code>precompileModules</code>!</p>",
        "id": 294261863,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660914673
    },
    {
        "content": "<p>Which tactic is that?</p>",
        "id": 294262134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660914759
    },
    {
        "content": "<p><code>duper</code>, the successor to Lean3's <code>super</code>.</p>",
        "id": 294262491,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660914890
    },
    {
        "content": "<p><a href=\"https://github.com/abentkamp/duper\">https://github.com/abentkamp/duper</a></p>",
        "id": 294262509,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660914895
    },
    {
        "content": "<p>It's mostly <span class=\"user-mention\" data-user-id=\"436568\">@Josh Clune</span> working on this now</p>",
        "id": 294262561,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660914910
    },
    {
        "content": "<p>Nice! Is it already usable?</p>",
        "id": 294262883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660915023
    },
    {
        "content": "<p>No, we are currently a bit underwhelmed by the performance :-). The <code>precompileModules</code> brings us much closer to what we would expect, but there must be some other performance bottlenecks that we need to figure out...</p>",
        "id": 294263651,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1660915304
    },
    {
        "content": "<p>If you're using <code>Array</code>, <code>HashMap</code> and such, you must be very careful that all the operations you expect to be O(1) are indeed O(1)</p>",
        "id": 294273210,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1660917871
    },
    {
        "content": "<p>E.g. <code>Array.data</code> is not (c.f. <a href=\"https://github.com/leanprover/lean4/blob/651d4044b376e27b414f01dd45703c2f069a22f1/src/Init/Prelude.lean#L2459\">here</a>, <a href=\"https://github.com/leanprover/lean4/blob/9de477ecf9f590a8c02acabf0cdbf4d68fa19486/src/runtime/object.cpp#L344\">here</a>, <a href=\"https://github.com/leanprover/lean4/blob/9de477ecf9f590a8c02acabf0cdbf4d68fa19486/src/runtime/object.cpp#L337\">here</a> and finally <a href=\"https://github.com/leanprover/lean4/blob/f6211b1a74690daadce3f1466127d06fbc97a287/src/Init/Data/Array/Basic.lean#L474\">here</a>) and for most mutations you need to ensure that the reference count is 1 / the array is being used linearly for array operations to be fast</p>",
        "id": 294275007,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1660918482
    },
    {
        "content": "<p>Hey, I'm having the same issue (1) as Jannis's original question -- I'm almost positive something is just wrong with my lakefile. Thoughts?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">System</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">leancolls</span> <span class=\"o\">{</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">LeanColls</span>\n\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">leancolls_array.o</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Package</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"leancolls_array.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"bindings\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"leancolls_array.c\"</span>\n  <span class=\"n\">buildFileAfterDep</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"k\">fun</span> <span class=\"n\">srcFile</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n    <span class=\"n\">compileO</span> <span class=\"s2\">\"leancolls_array.c\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"n\">flags</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleancolls_array</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Package</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leancolls_array\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">leancolls_array.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n\n<span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"dev\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- dev is so not everyone has to build it</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>The C FFI code is in a file <code>bindings/leancolls_array.c</code></p>",
        "id": 298498668,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663028913
    },
    {
        "content": "<p>I'm on 09-05 nightly, and my VS Code extension is version v0.0.95 which seems to include the fixes above</p>",
        "id": 298498738,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663028992
    },
    {
        "content": "<p>Oh, wait, I wrote <code>  buildStaticLib (pkg.buildDir / \"c\" / name) #[ffiO]</code> instead of <code>\"lib\"</code>... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 298500686,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663030777
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/blob/master/examples/ffi/lib/lakefile.lean\">https://github.com/leanprover/lake/blob/master/examples/ffi/lib/lakefile.lean</a> I was copying this example... Maybe it needs updating?</p>",
        "id": 298500755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663030810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/precompileModules/near/298500686\">said</a>:</p>\n<blockquote>\n<p>Oh, wait, I wrote <code>  buildStaticLib (pkg.buildDir / \"c\" / name) #[ffiO]</code> instead of <code>\"lib\"</code>... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>\n</blockquote>\n<p>I am not sure what you mean. Also you should probably not be passing a simple string as a path, as the current working directory can very based on were a package is in the dependency hierarchy. You may however want to use <code>pkg.libDir</code>?</p>",
        "id": 299868944,
        "sender_full_name": "Mac",
        "timestamp": 1663721195
    },
    {
        "content": "<p>Fyi, I am still not sure what the issue is. The FFI example builds and works so it should be a proper model for user code.</p>",
        "id": 299869078,
        "sender_full_name": "Mac",
        "timestamp": 1663721287
    },
    {
        "content": "<p>Oh, you may have been talking about <a href=\"#narrow/stream/270676-lean4/topic/lakefile.20dependencies/near/291358687\">this issue</a> raised in a previous Zulip thread. Yeah, the FFI example likely needs an update in that case. However, its been a while and don't exactly remember why it the FFI example worked for me in the past when I tested it interactively but it doesn't now -- I will have to go take a look sometime.</p>",
        "id": 299870380,
        "sender_full_name": "Mac",
        "timestamp": 1663722381
    },
    {
        "content": "<p>Yeah -- I don't know enough to understand why the issue occurred, but it seems like the output needs to be in the \"lib\" directory in my use case. Not sure why</p>",
        "id": 299878509,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663730379
    }
]