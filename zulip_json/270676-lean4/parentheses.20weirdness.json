[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"516499\">@Daniel Rogozin</span> and I found a strange behavior <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/26b8e67f6ceb32223a0ac3c5ddf3d059cc0d5d9a/YatimaStdLib/Nat.lean#L158\">here</a>. For some reason, removing the parentheses around <code>2^(m - iMax - 1)</code> makes <code>#eval tonelli 10 13</code> loop forever. Has anyone seen this before? Thanks!</p>",
        "id": 322896518,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674414196
    },
    {
        "content": "<p>Ah, nevermind. I see what's happening. Without the parentheses, that line is equivalent to <code>let b := (powMod p c 2)^(m - iMax - 1)</code></p>",
        "id": 322896780,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674414339
    },
    {
        "content": "<p>In Python and Javascript, <code>2 + 3**3</code> equals <code>29</code>. But in Lean 4, <code>2 + 3^3</code> equals <code>125</code>. Is this the precedence we want? Looks a bit confusing to me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 322897113,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674414548
    },
    {
        "content": "<p>Very confusing indeed.</p>",
        "id": 322897179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674414604
    },
    {
        "content": "<p>I think funapp precedence should still be higher than ^, so I'd expect the parentheses to still be needed in the tonelli code. But it's weird that the pow precedence is lower than add, that seems like a bug</p>",
        "id": 322897786,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674415037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/parentheses.20weirdness/near/322897786\">said</a>:</p>\n<blockquote>\n<p>I think funapp precedence should still be higher than ^</p>\n</blockquote>\n<p>I disagree with this even. The fact that this breaks is just weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n<span class=\"k\">#eval</span> <span class=\"n\">add3</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>But this is subjective</p>",
        "id": 322898334,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674415396
    },
    {
        "content": "<p>Oh wait, with just Std imported, 2 + 3^3 is 29... does your code redefine the add notation?</p>",
        "id": 322899064,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674415895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/parentheses.20weirdness/near/322898334\">said</a>:</p>\n<blockquote>\n<p>But this is subjective</p>\n</blockquote>\n<p>bleh, it is subjective, but most FP langs have a very strict rule that funapp always has highest precedence. I think Lean gives funapp maximum precedence too.</p>",
        "id": 322899316,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674416047
    },
    {
        "content": "<p>Okay nevermind. I don't know what I did. <code>#eval 2 + 3^3</code> now returns <code>29</code> <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 322899359,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674416100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/parentheses.20weirdness/near/322899064\">said</a>:</p>\n<blockquote>\n<p>Oh wait, with just Std imported, 2 + 3^3 is 29... does your code redefine the add notation?</p>\n</blockquote>\n<p>Thanks for double checking <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 322899712,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674416390
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compl.compl\">docs#has_compl.compl</a> has higher precedence than function application and I must say it is quite a practical exception</p>",
        "id": 322900891,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417160
    },
    {
        "content": "<p>Same for opposite <a href=\"https://github.com/leanprover-community/mathlib/blob/160ef3e338a2a4f21a280e4c152d4016156e516d/src/data/opposite.lean#L47-L49\">https://github.com/leanprover-community/mathlib/blob/160ef3e338a2a4f21a280e4c152d4016156e516d/src/data/opposite.lean#L47-L49</a></p>",
        "id": 322908268,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674422203
    },
    {
        "content": "<p>These are postfix notations though, I am less sure about <code>^</code>.</p>",
        "id": 322908279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674422220
    }
]