[
    {
        "content": "<p>Hi! I'm trying to derive a <code>DecidableEq</code> instance for an inductive type which is essentially this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Test</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Test</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>I get this error message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>default handlers have not been implemented yet, class: 'DecidableEq' types: [Lib.Module.Test]\n</code></pre></div>\n<p>How do I tackle this problem? I can derive an instance when I try to build a MWE, even across files; the only difference I see is that the actual type is defined in a library that I have declared as a dependency.</p>",
        "id": 275641820,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647518738
    },
    {
        "content": "<p>(you may want to put this in the #lean4 stream, most people in this zulip still use lean 3)</p>",
        "id": 275642054,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647518867
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/.22default.20handlers.22.20when.20deriving.20DecidableEq\">#new members &gt; \"default handlers\" when deriving DecidableEq</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 275643844,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647519937
    },
    {
        "content": "<p>I think you're using an old Lean 4 version, this should work nowadays.</p>",
        "id": 275644826,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647520521
    },
    {
        "content": "<p>Does the nightly build from March 9th count as old? I'll try to update but it may take me some time if the library needs an update.</p>",
        "id": 275653421,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647524412
    },
    {
        "content": "<p>Can you check the output of <code>import Lean #eval Lean.versionString</code>?</p>",
        "id": 275653588,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647524511
    },
    {
        "content": "<p>That would be <code>\"4.0.0-nightly-2022-03-09\"</code>.</p>",
        "id": 275653947,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647524672
    },
    {
        "content": "<p>I'm on 2022-03-17 and it works for me.</p>",
        "id": 275654180,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647524754
    },
    {
        "content": "<p>(but deriving DecidableEq should have been working for two years already)</p>",
        "id": 275654432,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647524845
    },
    {
        "content": "<blockquote>\n<p>I can derive an instance when I try to build a MWE, even across files; the only difference I see is that the actual type is defined in a library that I have declared as a dependency.</p>\n</blockquote>\n<p>I kind of missed this part.  Can you at least paste the inductive that's giving you trouble here?</p>",
        "id": 275654638,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647524933
    },
    {
        "content": "<p>Hmm... it does work in any minimal example. I hoped that the fact an external library was involved would ring some bells. The inductive in question is just the <code>Test</code> above under a different name. For what it's worth, it works for other types in the same imported file.</p>\n<p>I'll try to make a minimal reproducible version.</p>",
        "id": 275654967,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647525071
    },
    {
        "content": "<p>I turns out that the definition in question is part of a mutually-inductive group despite not referring to other members. I don't know how this would impact the process, but I'm sure this is relevant since I can get many different errors on that <code>deriving instance</code> when using mutually-inductive types.</p>",
        "id": 275659072,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647526623
    },
    {
        "content": "<p>Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">Z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span><span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>The use of <code>List Z</code> is required. I assume some sort of loop where it wants to define decidable equality on the list using the one on <code>Z</code>, which it's current building? The error message says <code>default handlers have not been implemented yet, class: 'DecidableEq' types: [T]</code> but without <code>List Z</code> the error is different.</p>\n<p>The error also happens for <code>Z</code> alone outside any mutual induction block; I guess the <code>mutual</code> just adds confusion by trying to build the decidable equality on <code>Z</code> even though it isn't strictly required for <code>T</code>.</p>",
        "id": 275661592,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647527578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> The current \"deriving\" handler for <code>DecidableEq</code> does not support mutually and nested inductive datatypes yet.</p>",
        "id": 275722237,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647549363
    },
    {
        "content": "<p>Ok, that settles the problem then. I should be able to define it manually, but it's nothing too important so I can also trust a boolean decision procedure for now.</p>",
        "id": 275722914,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647549641
    }
]