[
    {
        "content": "<p><code>set_option trace.Elab.definition true</code> doesn't seem to do anything here, is there a better option?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Tm</span> <span class=\"n\">where</span>\n  <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">},</span> <span class=\"n\">ty.ty</span> <span class=\"bp\">Γ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Ty.mk</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tm.inj</span> <span class=\"bp\">Γ</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Tm.mk</span> <span class=\"o\">(</span><span class=\"n\">Ty.inj</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fTy</span> <span class=\"o\">:</span> <span class=\"n\">f.ty</span> <span class=\"bp\">=</span> <span class=\"n\">Ty.mk</span> <span class=\"n\">x'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">xTy</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Tm.inj</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">fTy</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">12:16: application type mismatch</span>\n<span class=\"cm\">  cast (congrFun ?m.529 xTy)</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  congrFun ?m.529 xTy</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @Eq Type (?m.581 x' f fTy xTy) (?m.580 x' f fTy xTy)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @Eq Type (?m.581 x' f fTy xTy) (?m.580 x' f fTy xTy)</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(reported as <a href=\"https://github.com/leanprover/lean4/issues/333\">https://github.com/leanprover/lean4/issues/333</a>, btw)</p>",
        "id": 229029064,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614980318
    }
]