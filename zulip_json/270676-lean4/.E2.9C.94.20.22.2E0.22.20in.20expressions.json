[
    {
        "content": "<p>At the expression (meta) level, I see <code>inst._@.LeanLoris.CzSlOly._hyg.436.0</code> where <code>inst._@.LeanLoris.CzSlOly._hyg.436</code> is an instance of <code>Mul M</code> for a type <code>M</code>. It appears that <code>inst.0</code> here represents <code>inst.mul</code>, the unique constructor of the class <code>Mul</code>.  This is what is consistent with the context.</p>\n<p>Is this interpretation correct?</p>\n<p>Thanks</p>",
        "id": 270043785,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1643640996
    },
    {
        "content": "<p>It's not the constructor, but the projection of the first (and only) field <a href=\"https://github.com/leanprover/lean4/blob/dfc19755cbc24950f6306e989fcc21e62958b1f3/src/Lean/Expr.lean#L213\">https://github.com/leanprover/lean4/blob/dfc19755cbc24950f6306e989fcc21e62958b1f3/src/Lean/Expr.lean#L213</a></p>",
        "id": 270044199,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643641156
    },
    {
        "content": "<p>Thanks. What does the <em>projection</em> mean? I am afraid I do not know.</p>",
        "id": 270045940,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1643641737
    },
    {
        "content": "<p>Oh sorry. I now understand. This are the functions onto the fields of a structure that are automatically generated.</p>",
        "id": 270046209,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1643641830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 270046261,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643641847
    },
    {
        "content": "<p>The other way around; the projection functions are defined on top of the primitive projection expression. Try <code>#print Mul.mul</code>.</p>",
        "id": 270046950,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643642093
    },
    {
        "content": "<p>That however print <code>self.1</code>, so I'm not sure where your <code>.0</code> is coming from after all</p>",
        "id": 270047467,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643642283
    },
    {
        "content": "<p>I assume it's from the raw printer, which uses the internal 0-indexing instead of the syntactical 1-indexing (which in fact is sugar for the respective projection function, <em>not</em> the primitive projection). That's a little confusing, but not really avoidable.</p>",
        "id": 270048156,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643642568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> why not just use 0-indexing for the syntax as well?</p>",
        "id": 270598898,
        "sender_full_name": "Mac",
        "timestamp": 1643914430
    }
]