[
    {
        "content": "<p>Is this possible in Lean 4? It worked in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"c1\">-- explicit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- make α implicit in coercion to fun</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.app</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Foo.app f x</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  F Nat : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type : Type 1</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">Nat</span> <span class=\"n\">x</span> <span class=\"c1\">-- G Nat</span>\n</code></pre></div>",
        "id": 312934734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669754741
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- explicit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- make α implicit in coercion to fun</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">foo.app</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 312935393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669754968
    },
    {
        "content": "<p>No this doesn't work, you can't change the type with coercions.</p>",
        "id": 312939194,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669756490
    },
    {
        "content": "<p>You'd need to an auxiliary definition for that.</p>",
        "id": 312939237,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669756510
    },
    {
        "content": "<p>When things like this happen during porting (stuff which would work in lean 3 but not in lean 4) I never know whether to ask about them or just work around them.. I'll work around this one!</p>",
        "id": 312946652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669759428
    },
    {
        "content": "<p>Recall that coercions are eagerly expanded by Lean 4.</p>",
        "id": 312947075,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1669759569
    },
    {
        "content": "<p>Yeah but in my mental model of elaboration (which is poor) <code>Foo.app</code> is being unified to have type <code>∀ {α : Type}, F α → G α</code>...I guess what I'm actually saying is that I don't really even understand how binders interact with type theory. My understanding is that <code>∀ {α : Type}, F α → G α</code> and <code>∀ (α : Type), F α → G α</code> are syntactically equal as far as type theory goes, and <code>Foo.app</code> is being coerced into having type <code>∀ {α : Type}, F α → G α</code> but I have no clue about whether that coercion \"sticks\" when the coercion to function is instantiated; it seemed to stick in Lean 3 but not in Lean 4, is my mental model.</p>",
        "id": 312949317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669760524
    },
    {
        "content": "<p>Is there any issue with making the following modification?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"c1\">-- implicit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- make α implicit in coercion to fun</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.app</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 312949989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669760842
    },
    {
        "content": "<p>Or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"c1\">-- explicit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- make α implicit in coercion to fun</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">η</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">η.app</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 312950310,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669760986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> , your <code>--explicit</code> comment is now wrong, right?</p>",
        "id": 312950398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669761014
    },
    {
        "content": "<p>yeah ;)</p>",
        "id": 312950457,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669761022
    },
    {
        "content": "<p>(fixed)</p>",
        "id": 312950480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669761035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  If you add a <code>set_option pp.all true</code> in the Lean 4 and Lean 3 files, you will see the difference<br>\nLean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n<span class=\"c1\">-- @coe_fn.{2 2} (foo F G) (λ (_x : foo F G), Π {α : Type}, F α → G α) (foo.has_coe_to_fun F G) f nat x : G nat</span>\n</code></pre></div>\n<p>Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">Nat</span> <span class=\"n\">x</span> <span class=\"c1\">-- G Nat</span>\n<span class=\"c1\">-- @Foo.app F G f Nat x : G Nat</span>\n</code></pre></div>\n<p>Note that the Lean 3 version contains the <code>coe_fn</code> auxiliary function.</p>",
        "id": 312950613,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1669761107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> the issue with changing the binders is that I think the agreement is that we try to make the port as faithful as possible right now, or else this will just lead to confusion down the line. In Lean 3 the <code>app</code> has an explicit alpha and the coercion has an implicit one, so your second suggestion is what I've gone with.</p>",
        "id": 312951173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669761352
    }
]