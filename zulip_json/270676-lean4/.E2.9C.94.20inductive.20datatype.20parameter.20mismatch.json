[
    {
        "content": "<p>Thanks for the pointer! I'm not sure I get it though.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20datatype.20parameter.20mismatch/near/270013001\">said</a>:</p>\n<blockquote>\n<p>What you're doing is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">constructor</span> <span class=\"o\">{</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">σ</span> <span class=\"n\">σ₁</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span>\n</code></pre></div>\n<p>You need to make <code>σ</code> an index instead of a parameter (by moving it to the right of the colon in the declaration) if you want it to be able to vary.</p>\n</blockquote>\n<p>That gives the same kind of error as I'm getting, so you're probably right. But why is that what I'm doing? In that example, <code>σ</code> appears in the middle, whereas in my proposition above my <code>σ</code> appears in the end.  If it was about it appearing in the arguments of the propositions in the middle, then this shouldn't work either, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">constructor</span> <span class=\"o\">{</span><span class=\"n\">σ₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">σ</span> <span class=\"n\">σ₁</span>\n</code></pre></div>\n<p>but it does work!  So how does it vary when used in the end but not before. I imagine the two different recursors you show there explain that, but I don't think I fully grasp what the error is actually telling me there.</p>",
        "id": 270024869,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1643633100
    },
    {
        "content": "<p>The key is the first line declaring the type, e.g. in the most recent example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>There is one argument <code>(σ : ℕ)</code> before the colon, and one unnamed argument (of type <code>ℕ</code>) after the colon. Then the rule is that in a recursive appearance of <code>foo</code>, the first argument has to be the same <code>σ</code>, while the second argument can be anything.<br>\nOr more simply, arguments that appear before the colon (like <code>σ</code>) have to remain fixed throughout the recursion--these are called parameters.</p>",
        "id": 270026585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643633958
    },
    {
        "content": "<p>with that explanation it feels silly, thanks, that makes a lot of sense!</p>",
        "id": 270026934,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1643634096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 270026956,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643634113
    }
]