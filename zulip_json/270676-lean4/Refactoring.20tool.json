[
    {
        "content": "<p>I'm curious to know where we are with refactoring tools. How far are we from having a tool that could make <a href=\"https://github.com/leanprover/lean4/commit/8335a82aedc280c0396d14192b607b8f6770fc9f\">https://github.com/leanprover/lean4/commit/8335a82aedc280c0396d14192b607b8f6770fc9f</a> mostly automatic (I'm talking about fixing all files, not the modification to src/Lean/MetavarContext.lean). Is it already automatic? Will it be automatic soon?</p>",
        "id": 290734890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1658740096
    },
    {
        "content": "<p>I think having a general refactoring tool for Lean 4 is quite hard given the fact how insanely we can influence the way a Lean file works as a user. For example if I change the name of a method but it is used within a macro or worse an elaborator how would one implement a tool that can detect this?</p>\n<p>Though I'm guessing it is quite possible to write refactor tools specific to certain DSLs like do notation but I am not aware of any work on this.</p>",
        "id": 290735271,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658740405
    },
    {
        "content": "<p>We could still have a \"best effort\" tool.</p>",
        "id": 290735453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1658740544
    },
    {
        "content": "<blockquote>\n<p>I change the name of a method but it is used within a macro or worse an elaborator</p>\n</blockquote>\n<p>Note that syntax quotations are just regular syntax, so any rewriting would presumably apply to them as well.  Names like <code> ``foo </code> could be automatically changed as well (which works as long as the signature is the same).</p>",
        "id": 290735632,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658740673
    },
    {
        "content": "<p>What you could do today is insert a <code>Syntax.replaceM</code> call here: <a href=\"https://github.com/leanprover/lean4/blob/005b8aa9515ab21e8d4a6325fdd52276df24dd5d/script/reformat.lean#L69\">https://github.com/leanprover/lean4/blob/005b8aa9515ab21e8d4a6325fdd52276df24dd5d/script/reformat.lean#L69</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stx.replaceM</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">isMVarDelayedAssigned</span> <span class=\"bp\">$</span><span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mvarId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isMVarDelayedAssigned</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span>  <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>But that would format all files with the current pretty-printer.  There are three problems with that (off the top of my head):</p>\n<ol>\n<li>Changes the formatting (i.e. huge diff).</li>\n<li>You might not like the result.</li>\n<li>Fails on some syntax (I believe <code> `(tk%$blah)</code> makes it abort).</li>\n</ol>\n<p>We're close, but there's still some way to go. I believe Sebastian has Lars working on that.</p>",
        "id": 290736151,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658741006
    },
    {
        "content": "<p>While this works for here the approach is not general to Lean right? (even without user macros/elabs) for example if we have some function, say <code>fromArray</code> in a namespace, say <code>Std.HashSet.fromArray</code> and we want to replace that things get harder because maybe the same name could also come from other namespaces so you have to keep track of what namespaces are open. Or also with the <code>.fromArray</code> notation you'd have to know the expected type to actually know whether you want to replace the function call or not.</p>",
        "id": 290736930,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658741514
    },
    {
        "content": "<p>That's the nice thing: expected types, etc. are stored in the info tree.  So the rewriting tool could theoretically skip the rewrite if the expected type is wrong (avoid issues with coercions), or even try to re-elaborate the whole command after rewriting.</p>",
        "id": 290737178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658741663
    }
]