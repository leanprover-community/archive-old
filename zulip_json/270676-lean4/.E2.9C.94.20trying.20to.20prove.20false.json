[
    {
        "content": "<p>you need to make sure you're instantiating <code>Eq</code> with the correct number of universe parameter, which is one, iirc. <code>mkConst `Eq</code> will instantiate it without universes, not try to infer the correct ones for you.</p>",
        "id": 275536248,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1647447479
    },
    {
        "content": "<p>Due to what Daniel says, <code>mkConst</code> is a major footgun. Use <code>mkConstWithFreshMVarLevels</code> instead. Then use <code>mkAppM</code> to have the resulting metavariables solved automatically. (You can also give them explicitly but I usually don't bother.)</p>",
        "id": 275536819,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647447673
    },
    {
        "content": "<p>If you use <code>mkAppM</code> then you don't need <code>mkConstWithFreshMVarLevels</code>.</p>",
        "id": 275537575,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647447947
    },
    {
        "content": "<p>if you use <code>mkAppM</code>, there's a version that takes a name and is quite convenient.</p>",
        "id": 275537682,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1647447974
    },
    {
        "content": "<p>Nice!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"intro_false\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">id.getId</span>\n      <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">Eq</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">false</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">true</span><span class=\"o\">)])</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro_false</span> <span class=\"n\">h</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"c1\">-- (kernel) unknown constant 'sorry'</span>\n</code></pre></div>\n<p>I would need a proof of that. Now I see it. Thanks everyone!</p>",
        "id": 275538134,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647448131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 275538172,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647448151
    }
]