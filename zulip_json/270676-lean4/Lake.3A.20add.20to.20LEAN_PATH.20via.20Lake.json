[
    {
        "content": "<p>Currently in <code>mathport</code>, to open a synported file in VSCode (or just <code>./Test.lean</code>), I have to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"s2\">\"lean4.serverEnv\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"LEAN_PATH\"</span><span class=\"o\">:</span> <span class=\"s2\">\"./Lib4/leanbin/build/lib:./Lib4/mathbin/build/lib\"</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>to <code>settings.json</code>.</p>\n<p>What is \"the lake way\" to do this? Presumably there is something I can put in the <code>lakefile.lean</code>.</p>\n<p>Note here I don't want lake to do any compilation in those directories; I just want the <code>olean</code>s there (which have been created by the binport part of mathport) to be on the <code>LEAN_PATH</code>.</p>",
        "id": 258304990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634698593
    },
    {
        "content": "<p>This should already be automatically done via <code>print-paths</code> in the server if <code>leanbin</code>/<code>mathbin</code>/<code>liquidbin</code> is listed as dependency. This worked for me the last time I tested <code>test-mathport</code>.</p>",
        "id": 258306137,
        "sender_full_name": "Mac",
        "timestamp": 1634699690
    },
    {
        "content": "<p>Ah, okay, maybe I just need to transport some settings back from <code>test-mathport</code> to <code>mathport</code> itself.</p>",
        "id": 258306405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634699948
    },
    {
        "content": "<p>@Mac, ah, so the subtlety is that I would like to be able to:</p>\n<ol>\n<li>build <code>mathport</code> (at which point <code>./Lib4</code> doesn't exist), </li>\n<li>run it (thereby creating <code>./Lib4</code> and its contents, and then </li>\n<li>open files that are in, or depend on, <code>./Lib4</code>.</li>\n</ol>\n<p>Thus if I add <code>mathbin</code> as a dependency in the lakefile, that last stage works fine, but I can't actually build mathport, as very reasonably <code>lake</code> can't find a declared dependency:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">build</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">mathbin</span><span class=\"bp\">/./</span><span class=\"n\">lakefile.lean</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">build</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>I appreciate this is a bit of a weird thing to do, but it's the workflow in mathport for now! I can get by with overriding <code>LEAN_PATH</code>, but if you have better suggestions for lake to cope with this setup I'm all ears.</p>",
        "id": 258307610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634701105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.3A.20add.20to.20LEAN_PATH.20via.20Lake/near/258307610\">said</a>:</p>\n<blockquote>\n<p>@Mac, ah, so the subtlety is that I would like to be able to:</p>\n<ol>\n<li>build <code>mathport</code> (at which point <code>./Lib4</code> doesn't exist), </li>\n<li>run it (thereby creating <code>./Lib4</code> and its contents, and then </li>\n<li>open files that are in, or depend on, <code>./Lib4</code>.</li>\n</ol>\n<p>Thus if I add <code>mathbin</code> as a dependency in the lakefile, that last stage works fine, but I can't actually build mathport, as very reasonably <code>lake</code> can't find a declared dependency:</p>\n</blockquote>\n<p>What is \"the lakefile\" here? The lakefile for mathport, mathbin/Lib4, or the thing that depends on mathbin/Lib4?</p>",
        "id": 258308993,
        "sender_full_name": "Mac",
        "timestamp": 1634702470
    },
    {
        "content": "<p>Fyi, from your description, I am fairly confident that lake as it stands can handle this kind of setup, but I need a bit more info on how this all interconnects to explain exactly how.</p>",
        "id": 258309505,
        "sender_full_name": "Mac",
        "timestamp": 1634702901
    },
    {
        "content": "<p>When I was saying \"the lakefile\" above, I was always referring to <code>./lakefile.lean</code>.</p>",
        "id": 258310066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634703469
    },
    {
        "content": "<p>Oh, thinking about this a bit more: is the problem that you are trying to open <code>mathbin</code>/<code>leanbin</code>/<code>liquidbin</code> files within a VSCode instance opened to <code>mathport</code>?</p>",
        "id": 258310077,
        "sender_full_name": "Mac",
        "timestamp": 1634703480
    },
    {
        "content": "<p>Yes!</p>",
        "id": 258310121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634703491
    },
    {
        "content": "<p>Ah, that is not supported by the VSCode extension itself</p>",
        "id": 258310130,
        "sender_full_name": "Mac",
        "timestamp": 1634703505
    },
    {
        "content": "<p>it only uses the package configuration from the root directory not those of subdirectories</p>",
        "id": 258310149,
        "sender_full_name": "Mac",
        "timestamp": 1634703526
    },
    {
        "content": "<p>See the discussion at e.g., <a href=\"https://github.com/leanprover/vscode-lean4/issues/15\">https://github.com/leanprover/vscode-lean4/issues/15</a></p>",
        "id": 258310199,
        "sender_full_name": "Mac",
        "timestamp": 1634703594
    },
    {
        "content": "<p>The VSCode extension only starts a Lean server in the root directory and server only uses information from the root  configuration, so subpackages do not have extension/server support.</p>",
        "id": 258310279,
        "sender_full_name": "Mac",
        "timestamp": 1634703654
    },
    {
        "content": "<p>This is also a problem in the lake repo itself as none of the examples in the <a href=\"https://github.com/leanprover/lake/tree/master/examples\">lake/examples</a> folder get proper editor support (when viewed from VSCode instance opened tothe root of repo)</p>",
        "id": 258310360,
        "sender_full_name": "Mac",
        "timestamp": 1634703732
    },
    {
        "content": "<p>Your particular use case could be incidentally solved by lake in the future when it supports multiple libraries/packages in a single configuration/workspace (and the thus <code>mathport</code>/<code>liquidbin</code>/<code>mathbin</code>/<code>leanbin</code> could all live in the same configuration file), but even that would have the downside of tying them all together when they are conceptually distinct packages.</p>",
        "id": 258310640,
        "sender_full_name": "Mac",
        "timestamp": 1634704058
    },
    {
        "content": "<p>Okay. I have been trying instead to directly open the <code>Lib4/mathbin/</code> directory in VSCode, so far without success, but for different reasons. :-)</p>",
        "id": 258311258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634704690
    }
]