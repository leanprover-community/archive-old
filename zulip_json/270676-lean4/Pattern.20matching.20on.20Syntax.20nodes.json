[
    {
        "content": "<p>It seems like if I want to match on <code>Syntax</code> nodes where the terms represent \"nested\" constructors, for example, things like <code>Foo.mk (some 10)</code>, I need to nest pattern matches. I'm not able to pattern match on such terms using a single complex pattern match. For concretencess, Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[appUnexpander Foo.mk]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandEinSym</span> <span class=\"o\">:</span>\n<span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- A</span>\n       <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mk_some_at_once</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- B</span>\n       <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mk_some_at_once_two</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"n\">Option.none</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- C</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mk_none_at_once</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n     <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mk_then_some</span><span class=\"o\">)</span> <span class=\"c1\">-- E</span>\n     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">mk_then_none</span><span class=\"o\">)</span> <span class=\"c1\">-- F</span>\n     <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"missing\"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">none</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n<span class=\"c1\">-- ‚ä¢ mk_then_some = mk_then_none</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It seems that the rules that are firing are those that correspond to the nested <code>match .. match</code> (the rules marked <code>E</code> and <code>F</code>) , and not the rules marked <code>A</code>, <code>B</code>, or <code>C</code>.</p>\n<p>Is there some way to write the above pattern-match with a single level of <code>match</code>? I feel like I'm misunderstanding something about the syntax that allows us to pattern on <code>Syntax</code> using backticks.</p>",
        "id": 256973523,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633889388
    },
    {
        "content": "<p>This is a bit unfortunate. The delaborator runs before the parenthesizer, so your input term lacks the parentheses of pattern B. You cannot wrote down the pattern that would match the whole input immediately.</p>",
        "id": 256974127,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633889940
    },
    {
        "content": "<p>Thanks for the explanation! I now understand the behaviour. I feel that allowing such pattern matches would help expressivity. I guess it's hard to implement?</p>",
        "id": 256974365,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633890182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> I would argue that doing it another way would <em>hurt</em> expressivity. Your examples <code>B</code> and <code>C</code> are matching different things then <code>E</code> and <code>F</code>. </p>\n<p><code>B</code> matches exactly the term <code>Foo.mk (some $k)</code> (with parentheses) whereas <code>E</code> matches any term and then does matching on that term for <code>some $y</code>. To get <code>B</code> to work either parentheses would need to be added before delaboration or parentheses would have to be ignored in patterns.  Running the parenthesizer before the delaborator would mean that pattern matches like <code>E</code> would have to worry about potentially inserted parentheses, which would make a lot of  simple examples much more complex. On the other hand, Ignoring parentheses in <code>B</code> would break matches where parentheses are  semantically significant (and would require a special case in antiquote pattern matching for a specific syntax kind). Thus, I think the current approach is the best solution for both expressivity and simplicity.</p>\n<p><code>C</code> matches the exact identifier <code>Option.none</code> whereas <code>F</code> matches the exact identifier <code>none</code>. Resolving the identifier at match time would break matches where a specific identifier is desired. However, on this point there is a good question as to whether the resolved identifier or the exact identifier is a better default for antiquote patterns. An argument for the choice of exact matches  is avoids special casing for particular syntax type, thus making pattern matching behavior more uniform. An argument for resolved matches is that it is usually what one wants and that <code>ident</code> is already a special type of <code>Syntax</code> and there is already special behavior for  <code>Syntax.atom</code>s. There is also a question of what to do if the <code>ident</code> can't be resolved in the scope in question.</p>",
        "id": 256978499,
        "sender_full_name": "Mac",
        "timestamp": 1633894291
    },
    {
        "content": "<p>Thank you for the detailed response!</p>\n<ul>\n<li>I was imagining ignoring parentheses, yes, but you're right, matching on parens would be complicated.</li>\n<li>I didn't realise that <code>Syntax</code> patterns could witness the difference between things like <code>Option.none</code> and <code>none</code>. I imagined that things were \"normalized\" before being matched. I guess this is too simplistic. </li>\n</ul>\n<p>I imagine I'll develop more of a sense for what defaults I would like when I use the macro system for longer :)</p>",
        "id": 256988017,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633903143
    }
]