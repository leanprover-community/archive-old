[
    {
        "content": "<p>Is is possible to have external <code>C</code> definition of a function that depend on a function argument?<br>\nI'm imagining something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CName</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"n\">cname</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CName</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>  <span class=\"o\">⟨</span><span class=\"s2\">\"double\"</span><span class=\"o\">⟩</span>\n<span class=\"kn\">open</span> <span class=\"n\">CName</span> <span class=\"o\">(</span><span class=\"n\">cname</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[extern s!\"lean_inline_add_{cname A}\", externMacro \"LEAN_INLINE_ADD\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inline_add</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>where <code>LEAN_INLINE_ADD</code> is C macro like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">define</span> <span class=\"n\">LEAN_INLINE_ADD</span><span class=\"o\">(</span><span class=\"n\">TYPE</span><span class=\"o\">)</span>    <span class=\"n\">lean_inline_add_</span> <span class=\"bp\">##</span> <span class=\"n\">TYPE</span> <span class=\"o\">(</span><span class=\"n\">TYPE</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">TYPE</span> <span class=\"n\">b</span><span class=\"o\">){</span> <span class=\"n\">return</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This would require to potentially compile and link code during runtime. Is that possible?</p>",
        "id": 263021204,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638198921
    },
    {
        "content": "<p>I don't feel like this is that good of an idea even if it can work (which I don't believe it can? but feel free to convince me of the opposite)</p>\n<p>Is there a reason you cannot solve this by having an <code>add</code> function of a specific instance of <code>Add</code> pointing at an extern macro? Regarding the inlining...I would probably rely on the C compiler to be smart enough to inline when it deems this correct for stuff like this.</p>",
        "id": 263021976,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638199258
    },
    {
        "content": "<p>Or do you actually have a more complex use case for this? <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span></p>",
        "id": 263022294,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638199404
    },
    {
        "content": "<p>I want to create functions that can be executed on GPU. </p>\n<p>The idea is to represent kernel code with some inductive type that will be created with something like <code>Reflected</code>. Then turn this kernel code representation to actual code.</p>",
        "id": 263023120,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638199796
    },
    {
        "content": "<p>A mock up of saxpy operation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GPUExpr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">GPUExpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">GPUExpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">GPUExpr</span> <span class=\"bp\">→</span> <span class=\"n\">GPUExpr</span> <span class=\"bp\">→</span> <span class=\"n\">GPUExpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">GPUExpr</span> <span class=\"bp\">→</span> <span class=\"n\">GPUExpr</span> <span class=\"bp\">→</span> <span class=\"n\">GPUExpr</span>\n\n<span class=\"kd\">@[extern s!\"lean_gpu_map_{cname kernel}\", externMacro \"LEAN_GPU_MAP\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">kernel</span> <span class=\"o\">:</span> <span class=\"n\">GPUExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GPUArray</span> <span class=\"bp\">→</span> <span class=\"n\">GPUArray</span> <span class=\"bp\">→</span> <span class=\"n\">GPUArray</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">saxpy_kernel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">saxpy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">GPUExpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GPUExpr</span> <span class=\"o\">:=</span> <span class=\"n\">map₂</span> <span class=\"n\">saxpy_kernel</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 263024111,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200189
    },
    {
        "content": "<p>You should make a Map2 type class and implement it for every kernel.  (The implementation can then refer to a concrete lean_gpu_map_* function).</p>",
        "id": 263024365,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638200289
    },
    {
        "content": "<p>Lean doesn't monomorphize*, so there is no way the <code>cname kernel</code> can work.</p>",
        "id": 263024475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638200344
    },
    {
        "content": "<p>(*) Well, it does.  But that's only an optimization, and not guaranteed.</p>",
        "id": 263024525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638200358
    },
    {
        "content": "<blockquote>\n<p>so there is no way the <code>cname kernel</code> can work</p>\n</blockquote>\n<p>I do not understand this, <code>cname</code> just produces a string representation of the kernel/an unique name for it.</p>",
        "id": 263024715,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200444
    },
    {
        "content": "<blockquote>\n<p>You should make a Map2 type class and implement it for every kernel. (The implementation can then refer to a concrete lean_gpu_map_* function).</p>\n</blockquote>\n<p>Yes, I will fallback to do this if JIT compilation is not possible.</p>",
        "id": 263024960,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200532
    },
    {
        "content": "<p>I don't know much about writing code for GPUs but don't they basically have their own kind of phase distinction anyways? I mean it is not like Lean targets GPUs right?</p>",
        "id": 263025138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638200625
    },
    {
        "content": "<p>Personally I would prefer a Lean macro over a C macro here even with JIT :)</p>",
        "id": 263025282,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638200684
    },
    {
        "content": "<p>Yes it doesn't, that is why I have <code>GPUExpr</code> which is in some sense a subset of <code>Lean.Expr</code>.</p>",
        "id": 263025347,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200710
    },
    {
        "content": "<blockquote>\n<p>Personally I would prefer a Lean macro over a C macro here even with JIT :)</p>\n</blockquote>\n<p>Totally ok with that :)</p>",
        "id": 263025376,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200725
    },
    {
        "content": "<p>And probably a much better idea.</p>",
        "id": 263025417,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200743
    },
    {
        "content": "<p>How does FFI to a C macro work? Does Lean wrap the macro in a function and link against that? Or emit the macro directly in generated C code?</p>",
        "id": 263025624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638200814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Extern.20code.20depending.20on.20function.20argument/near/263024475\">said</a>:</p>\n<blockquote>\n<p>Lean doesn't monomorphize*, so there is no way the <code>cname kernel</code> can work.</p>\n</blockquote>\n<p>I think the mock up code is too simplistic and confusing. In the example,  the type of<code>GPUExpr</code> is always <code>float</code>. I would generate different kernels for <code>int</code> <code>double</code> etc. So <code>GPUExpr</code> should be already \"monomorphized\"</p>",
        "id": 263025634,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638200815
    },
    {
        "content": "<p>Ohh can macro invoke a compiler? Then I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">array1</span> <span class=\"n\">array2</span>\n</code></pre></div>\n<p>where <code>map₂</code> is a macro that turns <code>λ x y : Float =&gt; a * x + y</code> into <code>GPUExpr</code> and defines appropriate instance for <code>Map2</code>(as <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> suggested)</p>",
        "id": 263027416,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638201529
    },
    {
        "content": "<p>Macros can't, but you can with a custom elaborator which is almost the same thing.</p>",
        "id": 263027509,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638201567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Extern.20code.20depending.20on.20function.20argument/near/263024715\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>so there is no way the <code>cname kernel</code> can work</p>\n</blockquote>\n<p>I do not understand this, <code>cname</code> just produces a string representation of the kernel/an unique name for it.</p>\n</blockquote>\n<p>The problem is that there is no guarantee that the value of <code>kernel</code> is known at compile time (which is when it needs to know what external function to dispatch to).</p>",
        "id": 263068895,
        "sender_full_name": "Mac",
        "timestamp": 1638220569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Extern.20code.20depending.20on.20function.20argument/near/263068895\">said</a>:</p>\n<blockquote>\n<p>The problem is that there is no guarantee that the value of <code>kernel</code> is known at compile time (which is when it needs to know what external function to dispatch to).</p>\n</blockquote>\n<p>I was thinking Lean might be able to compile and link at runtime. It looks like it is not the case, I'm ok with the custom elaborator solution for now(once I figure out how to do it :D).</p>\n<p>Sometime ago, I wrote a plugin for one program so you can use C++ as a \"scripting language\", write snippet of C++ code, compile it, link it at runtime and run it without restarting the host application. I can imagine doing something similar with lean. Writing a function taking <code>GPUExpr</code> spitting out <code>GPUCompiledExpr</code>, that is implemented with <code>lean_external_object</code> that holds a pointer to the compiled kernel code. Then I can have a map function <code>map : GPUCompiledExpr -&gt; GPUArray -&gt; GPUArray</code> that can have a single external definition.</p>",
        "id": 263128757,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638270277
    }
]