[
    {
        "content": "<p>Is there a way to \"compose\" commands defined using <code>macro</code>? Silly mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"c0\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c01\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The last macro gives an error because <code>`(c0 $s)</code> would have had to be of type <code>MacroM Punit</code></p>",
        "id": 302460628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664977915
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"c0\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c01\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">c1</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"n\">c01</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"k\">#print</span> <span class=\"n\">x</span>\n<span class=\"k\">#print</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 302461738,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664978226
    },
    {
        "content": "<p>Thanks! Just for my own understanding, I would still like to know whether there is a way to do this without putting both <code>c0</code> and <code>c1</code> in a single  quotation.</p>",
        "id": 302462850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664978532
    },
    {
        "content": "<p>A macro is a transformation from syntax tree to syntax tree, so in the end you do have to produce exactly one tree. In an <code>elab</code>orator however you can \"execute\" intermediate commands using <code>elabCommand</code>, which does produce <code>Unit</code></p>",
        "id": 302463250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664978636
    },
    {
        "content": "<p>yes I understand that. But there must be a way to run a macro in an <code>elab</code> command?</p>",
        "id": 302463440,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664978684
    },
    {
        "content": "<p>Yes, by feeding the macro's output into <code>elabCommand</code></p>",
        "id": 302463620,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664978732
    },
    {
        "content": "<p>Ah okay I think I understand</p>",
        "id": 302463867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664978793
    },
    {
        "content": "<p>For the sake of completeness, I suppose </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c0\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"c01\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))</span>\n\n<span class=\"n\">c01</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"k\">#print</span> <span class=\"n\">x</span>\n<span class=\"k\">#print</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>illustrates what <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> was saying?</p>",
        "id": 302473864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664981429
    },
    {
        "content": "<p>Anyway, this works! Thanks to both of you!</p>",
        "id": 302473919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664981445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, you might also be interested in <code>mkNullNode</code> for chaining instances of <code>Command</code> on a syntactic level: <a href=\"#narrow/stream/270676-lean4/topic/Antiquot.20Splice/near/297761901\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Antiquot.20Splice/near/297761901</a></p>",
        "id": 302540472,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665002234
    }
]