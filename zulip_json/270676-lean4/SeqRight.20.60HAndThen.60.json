[
    {
        "content": "<p>I was a little surpised to leanr the following does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"bar\"</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  HAndThen (IO Unit) (IO Unit) (IO Unit)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Lean 4 appears to missing the following instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">SeqRight</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HAndThen</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SeqRight.seqRight</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I imagine there is some reason this instance has been dropped, but I am curious as to what it is. Especially, as the fact that <code>&gt;&gt;</code> does not work for monads would surprise anyone coming from something like Haskell.</p>\n<p>I could see that such an instance  could cause overlap issues due to its generality. However, I would then think that there would instances for more specific cases (ex. an <code>HAndThen (IO α) (IO β) (IO β)</code> or  <code>AndThen (IO Unit)</code> instance).</p>",
        "id": 245764816,
        "sender_full_name": "Mac",
        "timestamp": 1626134406
    },
    {
        "content": "<p>We already have <code>*&gt;</code> for monads. We try to avoid duplicate operators that only exist for historical reasons in Haskell (see also: repurposing <code>return</code>)</p>",
        "id": 245798906,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626168378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/SeqRight.20.60HAndThen.60/near/245798906\">said</a>:</p>\n<blockquote>\n<p>We already have <code>*&gt;</code> for monads. We try to avoid duplicate operators that only exist for historical reasons in Haskell (see also: repurposing <code>return</code>)</p>\n</blockquote>\n<p>But its not a duplicate operator? It is  a more general operator. Having a function that places the <code>HAndThen</code>/<code>AndThen</code> constraint on a object  means that the object doesn't have to be a first-order monad, it can be just a simple action (ex. <code>IO.RealWorld -&gt; IO.RealWorld </code> or <code>ParserState -&gt; ParserState</code>/<code>Parser</code>) rather than a monadic action (ex. <code>IO a</code>). That is, a monadic sequence is a more specialization case of <code>AndThen</code>. Thus, places that accept an <code>AndThen</code> would generally except monads <em>and</em> simple actions. This makes the fact that monadic actions are not considered a part of the broader action abstraction very unexpected (and concept-breaking). After all, even at a semantic level a monad sequence means 'perform monad action <code>m a</code> <em>and then</em> perform <code>m b</code>.</p>",
        "id": 245859643,
        "sender_full_name": "Mac",
        "timestamp": 1626197662
    },
    {
        "content": "<p>For monads specifically iirc it was decided to forbid heterogeneous sequencing because it allows implicitly forgetting return values. So instead of writing <code>getFoo &gt;&gt; print \"got foo\"</code> you must do <code>let _ &lt;- getFoo; print \"got foo\"</code>, i.e. explicitly ignore the return.</p>",
        "id": 245879208,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626206511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/SeqRight.20.60HAndThen.60/near/245879208\">said</a>:</p>\n<blockquote>\n<p>For monads specifically iirc it was decided to forbid heterogeneous sequencing because it allows implicitly forgetting return values. So instead of writing <code>getFoo &gt;&gt; print \"got foo\"</code> you must do <code>let _ &lt;- getFoo; print \"got foo\"</code>, i.e. explicitly ignore the return.</p>\n</blockquote>\n<p>Still, there is no homogenous or <code>PUnit</code> instance either which does not have this problem. Furthermore, you can still do heterogenous sequence with <code>*&gt;</code>.  Also, I don't really get what's wrong stylistically with forgetting return values. I can imagine technically, though, that such automatic forgetting could be pain for type inference (both in implementation and in end-use).</p>",
        "id": 245905914,
        "sender_full_name": "Mac",
        "timestamp": 1626222045
    }
]