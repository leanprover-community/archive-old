[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Asynth/near/231120024\">said</a>:</p>\n<blockquote>\n<p>Maybe a good next step would be to backport <code>Expr.mdata</code> to lean 3, so that we can have general annotations on things without affecting tactics (for the most part). Right now all the annotation support is wrapped up in <code>MacroDef</code>, which is opaque to lean</p>\n</blockquote>\n<p>How about the following:</p>\n<ul>\n<li>We add a new inductive type <code>tag4</code> to lean3 that can express lists, strings, names, numbers, bools, etc. </li>\n<li>We define:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">id_tag</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">tag4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<ul>\n<li>Non-trivial tactics can wrap their proofs with <code>id_tag</code>, e.g. <code>simp</code> can tag its proof with <code>tag.string \"simp\"</code>, possibly including options or named lemmas</li>\n<li>Mathport can replace the <code>tag4</code> occurrences inside <code>id_tag</code> with <code>Tag4</code> (note: this is not naive aligning due to strings&amp;names, but would be like how we handle <code>auto_param -&gt; autoParam</code> currently)</li>\n<li>For delaboration, we can then add special delaborators for terms whose app-fn head is <code>id_tag</code>, that get to look at the tag data</li>\n</ul>",
        "id": 232852718,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617331057
    },
    {
        "content": "<p>It is fairly clean but I am not sure if it is actually necessary -- many tactics can probably be reverse-engineered from the proof terms. For example, we can detect <code>norm_num</code> in a number of ways: by inspecting the type or by detecting a <code>norm_num</code> lemma inside. For <code>simp</code>, the lemmas could be determined by sweeping the proof term.</p>",
        "id": 232853028,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617331408
    },
    {
        "content": "<p>We don't need to decide this yet. I think the highest priority is to finalize numbers. Then we can write normNum and ring, and then start experimenting with lean4 on top of the auto-ported <code>.olean</code>s.</p>",
        "id": 232853736,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1617332188
    }
]