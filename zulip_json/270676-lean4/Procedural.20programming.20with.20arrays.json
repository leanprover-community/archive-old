[
    {
        "content": "<p>I thought I read somewhere that Arrays in Lean 4 are mutable. What does this entail on the front and back end?</p>",
        "id": 313177874,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669851258
    },
    {
        "content": "<p>Arrays in Lean will be optimized to be accessed in a mutable way if you use them in a linear fashion, that is there is only ever one reference to them at a time at runtime.</p>\n<p>That being said I don't quite understand your question, do you want to know how its implemented?</p>",
        "id": 313179324,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669852093
    },
    {
        "content": "<p>This paper explains the implementation if I understand correctly.  <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a></p>",
        "id": 313184753,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669855105
    },
    {
        "content": "<p>I don't know if arrays are particularly special, or if this generally falls under the \"destructive updates\" pattern.  Various slides by the developers (e.g. <a href=\"http://leanprover.github.io/talks/NFM2022.pdf\">http://leanprover.github.io/talks/NFM2022.pdf</a>) summarizes it as:</p>\n<blockquote>\n<p>Runtime uses reference counting for GC, and performs destructive updates if RC = 1</p>\n</blockquote>",
        "id": 313185065,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669855336
    },
    {
        "content": "<p>Arrays are special in the sense that destructive updates are triggered by runtime primitives (think <code>Array.push</code>), not heuristic optimizations</p>",
        "id": 313233613,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669886357
    },
    {
        "content": "<p>See §7.1</p>",
        "id": 313233759,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669886410
    },
    {
        "content": "<p>Thanks, this is good info. I think I'll have to keep this understanding for several months into the future since I'm just getting used to the basics.</p>",
        "id": 313360387,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1669923571
    }
]