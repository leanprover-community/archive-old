[
    {
        "content": "<p>Say I have a type like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GADT</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>   <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GADT</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GADT</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GADT.setId</span> <span class=\"o\">(</span><span class=\"n\">gadt</span><span class=\"o\">:</span> <span class=\"n\">GADT</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">GADT</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">gadt</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c1</span> <span class=\"n\">v</span> <span class=\"n\">id</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c2</span> <span class=\"n\">i</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>where each constructor has an optional id that is intended to be generated randomly at runtime like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">100000000</span>\n  <span class=\"k\">let</span> <span class=\"n\">gadt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">gadt.setId</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Ideally this operation would be defined in a function, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">GADT.ensureId</span> <span class=\"o\">(</span><span class=\"n\">gadt</span><span class=\"o\">:</span> <span class=\"n\">GADT</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">GADT</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">100000000</span>\n  <span class=\"n\">return</span> <span class=\"n\">gadt.setId</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I know that IO  has type : <code>Type -&gt; Type</code> so the above function doesn't compile.</p>\n<p>I wonder if people have ideas on how to overcome this issue?</p>\n<p>One option would be to store the ids as <code>IO.Ref Nat</code>, but maybe there's a better way?</p>",
        "id": 295303852,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1661458524
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a> this might be worth reading?</p>",
        "id": 295314391,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661463453
    }
]