[
    {
        "content": "<p>Is there an O(1) random-access and random-modification Array in the IO Monad in Lean 4 like C's array and Haskell's IOArray?</p>",
        "id": 287146814,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655963016
    },
    {
        "content": "<p><code>Array</code> is that if you are using it linearly (you can check this e.g. via <code>dbgTraceIfShared</code>)</p>",
        "id": 287146928,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655963152
    },
    {
        "content": "<p>Or more explicitly: If the reference count is 1, Lean will update arrays in-place.</p>",
        "id": 287146991,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655963210
    },
    {
        "content": "<p>I'm sorry that I can't understand that. o(╥﹏╥)o<br>\nFor example,  I want to count the primes from 1 to n using Euler's sieve.<br>\nHow can I write that just like in the procedural style?</p>",
        "id": 287147710,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655964131
    },
    {
        "content": "<p>Here's a more simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mapa</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">xs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"this will print something if xs has rc &gt; 1\"</span> <span class=\"n\">xs</span>\n    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.set</span><span class=\"bp\">!</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n  <span class=\"n\">return</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.push</span> <span class=\"n\">init</span>\n  <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"this will print something if xs has rc &gt; 1\"</span> <span class=\"n\">xs</span>\n  <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">mapa</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">3</span> <span class=\"mi\">100000</span>\n</code></pre></div>",
        "id": 287148323,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655964849
    },
    {
        "content": "<p><code>mapa</code> will mutate the array in-place if <code>xs</code> has a reference count of 1 (i.e. it is not shared).</p>",
        "id": 287148402,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655964963
    },
    {
        "content": "<p>I see. Thank you a lot! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 287148830,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655965480
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">euler</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cnt</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">ip</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">then</span>\n      <span class=\"n\">cnt</span> <span class=\"o\">:=</span> <span class=\"n\">cnt</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n      <span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"n\">prime.push</span> <span class=\"n\">i</span>\n    <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">cnt</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">prime</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">break</span>\n      <span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">ip.set</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">prime</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"n\">false</span>\n      <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"n\">prime</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">break</span>\n  <span class=\"n\">return</span> <span class=\"n\">cnt</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">euler</span> <span class=\"mi\">1000000</span>\n</code></pre></div>\n<p>Sorry to bother.<br>\nIs it a normal phenomenon that calculating euler 10^6 takes 4 secs and euler 10^7 causes stack overflow?</p>",
        "id": 287152953,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655968804
    },
    {
        "content": "<p>You are using eval instead of compiling your code so you shouldn't expect too good of a performance yeah</p>",
        "id": 287153132,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655968938
    },
    {
        "content": "<p>Oh <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> , thank you. It takes 0.3 secs to calculate euler 10^6. However, it stills causes stack overflow to calculate euler 10^7.</p>",
        "id": 287154234,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655969685
    },
    {
        "content": "<p>That might be List.replicate</p>",
        "id": 287154454,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655969865
    },
    {
        "content": "<p>Yeah, also note that using <code>Array.mk</code> on a List adds an additional <code>O(n)</code> to your runtime since the array consructor has to iterate over the list.</p>",
        "id": 287154533,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655969907
    },
    {
        "content": "<p>Should I use \"push\"?</p>",
        "id": 287154566,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655969940
    },
    {
        "content": "<p>If you want to achieve as much performance as possible you should simply not use <code>List</code> at all.</p>",
        "id": 287154587,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655969965
    },
    {
        "content": "<p>I guess the question is \"What is the fastest way of creating an array with N elements, all equal to some value V\"?</p>",
        "id": 287154715,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655970025
    },
    {
        "content": "<p>Yes. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 287154795,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655970122
    },
    {
        "content": "<p>Try <code>mkArray (n-1) true</code></p>",
        "id": 287154844,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655970147
    },
    {
        "content": "<p>I.e. <code>#[false, false] ++ mkArray (n-1) true</code> or with less copying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">mkArray</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n<span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">ip.set</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"n\">false</span>\n<span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">ip.set</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 287155032,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655970286
    },
    {
        "content": "<p>Thanks. I have trouble finding suitable library functions. Is there a way to search a library function by its type(like Haskell's Hoogle)?</p>",
        "id": 287155535,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655970701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/IO.20Mutable.20Array/near/287155032\">said</a>:</p>\n<blockquote>\n<p>I.e. <code>#[false, false] ++ mkArray (n-1) true</code> or with less copying</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">mkArray</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n<span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">ip.set</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"n\">false</span>\n<span class=\"n\">ip</span> <span class=\"o\">:=</span> <span class=\"n\">ip.set</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"n\">false</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It only takes 0.18 secs to calc euler 10^6. Thank you! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 287155680,
        "sender_full_name": "dudubao2007",
        "timestamp": 1655970832
    },
    {
        "content": "<p>There is <code>#find</code> which is made for proof search but I guess it could also find regular functions, apart from that we only have search by name here right now: <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> getting a hoogle like thing working is definitely on my List as well at some point but it would require an actual Lean backend instead of just generating HTML via Lean which is a whole different complexity class.</p>",
        "id": 287155804,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655970928
    },
    {
        "content": "<p>Note that you need Mathlib4 for <code>#find</code></p>",
        "id": 287156665,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1655971543
    }
]