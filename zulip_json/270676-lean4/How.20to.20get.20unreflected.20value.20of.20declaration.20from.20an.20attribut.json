[
    {
        "content": "<p>I am trying to make an attribute that will run a command after a definition has been made.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myAttributeImpl</span> <span class=\"o\">:</span> <span class=\"n\">AttributeImpl</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">myattr</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"my attr\"</span>\n  <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"n\">AttributeApplicationTime.afterCompilation</span>\n  <span class=\"n\">add</span> <span class=\"n\">decl</span> <span class=\"n\">stx</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- assert that the type of decl is `Nat → String`</span>\n    <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">evalConst</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">decl</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"hello {value 4}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"n\">myAttributeImpl</span>\n\n<span class=\"kd\">@[myattr]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myDef</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"from myDef\"</span>\n</code></pre></div>\n<p>In the body of <code>add</code>, I want to be able to get the value safely (<code>evalConst</code> is unsafe) by doing some checks. What's the best way of doing this? It looks like something like this is done in <code>KeyedDeclsAttribute</code> but I couldn't figure it out and it looks like it only works when we have <code>def myDef : C</code> where <code>C</code> is a const.</p>",
        "id": 277655774,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649013030
    },
    {
        "content": "<p>I would quite like a solution that works with generic types, eg <code>@[myattr] myDef1 : Nat → Bool</code>, <code>@[myattr] myDef2 : Nat → String</code>, and the body of <code>add</code> will find the <code>α</code> such that <code>value : Nat → α</code> and then find the instance <code>ToString α</code> and run <code>toString $ value 4</code>.</p>",
        "id": 277655883,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649013161
    },
    {
        "content": "<p><code>evalConst(Check)</code> is the way to go, you just have to pinky-swear that you upheld its invariants by putting the call inside of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/TermUnsafe.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/TermUnsafe.html</a></p>",
        "id": 277658959,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649017192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20get.20unreflected.20value.20of.20declaration.20from.20an.20attribut/near/277658959\">said</a>:</p>\n<blockquote>\n<p><code>evalConst(Check)</code> is the way to go, you just have to pinky-swear that you upheld its invariants by putting the call inside of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/TermUnsafe.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/TermUnsafe.html</a></p>\n</blockquote>\n<p>How would you <code>evalConst</code> something that belongs to a <em>family</em> of types? In this case it looks like we would have to <code>evalConst (Nat → Bool)</code> in one case, <code>evalConst (Nat → String)</code> in another, etc.</p>",
        "id": 277742224,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1649083872
    },
    {
        "content": "<p>Ah, I was completely focused on the safety! Then you'll probably want to first compose that with <code>toString</code> into an <code>Expr</code> of type <code>Nat -&gt; String</code> (or just <code>String</code> if you put the <code>4</code> into the term as well), put that in a new (temporary) declaration, compile it, and finally evaluate it.</p>",
        "id": 277745077,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649084944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  how you would finish implementing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Server.Rpc</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">System</span> <span class=\"n\">Server</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rpcAttributeImpl</span> <span class=\"o\">:</span> <span class=\"n\">AttributeImpl</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">rpc</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Marks a function as a Lean server RPC method.\"</span>\n  <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"n\">AttributeApplicationTime.afterCompilation</span>\n  <span class=\"n\">add</span> <span class=\"n\">decl</span> <span class=\"n\">stx</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">$</span> <span class=\"n\">TermElabM.run'</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">registerRpcProcedure</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n      <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"c1\">-- run t as a CoreM Unit here?</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 277753113,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649088013
    },
    {
        "content": "<p>Maybe the answer is \"you shouldn't use attributes for this\".</p>",
        "id": 277753903,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649088273
    },
    {
        "content": "<p>I've now done this as a command macro instead because I couldn't get it working in an attribute:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"register_rpc\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">register_rpc</span> <span class=\"bp\">$</span><span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"n\">Lean.Server.registerRpcProcedure</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">decl.getId</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">decl</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277784923,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649102133
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.TermUnsafe</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Server</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myhandler</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RequestM</span> <span class=\"o\">(</span><span class=\"n\">RequestTask</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">Task.pure</span> <span class=\"bp\">$</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">myhandler</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">←</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">unsafe</span>\n    <span class=\"n\">Mathlib.Eval.evalTerm</span> <span class=\"o\">(</span><span class=\"n\">CoreM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">CoreM</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Unit</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">registerRpcProcedure</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">decl</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">decl</span><span class=\"o\">)))</span>\n  <span class=\"n\">cmd</span>\n</code></pre></div>",
        "id": 277786756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649103008
    },
    {
        "content": "<p><code>evalTerm</code> +1 +1 +1 +1</p>",
        "id": 277786970,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649103133
    },
    {
        "content": "<p>I got it working thanks to liftCommandElabM</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ext</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"register_rpc\"</span> <span class=\"n\">decl</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"n\">Lean.Server.registerRpcProcedure</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">decl.getId</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">decl</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rpcAttributeImpl</span> <span class=\"o\">:</span> <span class=\"n\">AttributeImpl</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">rpc</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Marks a function as a Lean server RPC method.\"</span>\n  <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"n\">AttributeApplicationTime.afterCompilation</span>\n  <span class=\"n\">add</span> <span class=\"n\">decl</span> <span class=\"n\">stx</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">Mathlib.Tactic.Ext.liftCommandElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Command.elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">register_rpc</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">decl</span><span class=\"o\">))</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"n\">rpcAttributeImpl</span>\n</code></pre></div>",
        "id": 277808541,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1649115449
    }
]