[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkConst'</span> <span class=\"o\">(</span><span class=\"n\">constName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkConst</span> <span class=\"n\">constName</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">constName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">levelParams.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getLocalHyps</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">d.isAuxDecl</span> <span class=\"k\">then</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">hs.push</span> <span class=\"n\">d.toExpr</span>\n  <span class=\"n\">return</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">g.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst'</span> <span class=\"bp\">``</span><span class=\"n\">Not.intro</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">g.intro1P</span>\n  <span class=\"n\">return</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">g</span>\n  <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">hyps</span> <span class=\"bp\">←</span> <span class=\"n\">getLocalHyps</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{hyps}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">types</span> <span class=\"bp\">←</span> <span class=\"n\">hyps.mapM</span> <span class=\"n\">inferType</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{types}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">liftMetaTactic</span> <span class=\"n\">bar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">7</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">bar</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>At bar it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but I was expecting it to print</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">7</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What is happening / what should I be doing differently?</p>",
        "id": 303732159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665614421
    },
    {
        "content": "<p>I think you're just missing an <code>instantiateMVars</code>.</p>\n<p>BTW, these days you should be using <code>d.isImplementationDetail</code> instead of <code>d.isAuxDecl</code>.</p>",
        "id": 303733605,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665615342
    }
]