[
    {
        "content": "<p>What's the Lean4 idiomatic way to accomplish this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 314789036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670540640
    },
    {
        "content": "<p>I would do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 314789736,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1670540986
    },
    {
        "content": "<p>well sure, but <code>Fin 5</code> includes proofs that the naturals are less than 5.</p>",
        "id": 314789815,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670541009
    },
    {
        "content": "<p>And I would like to use them in the body of the for loop</p>",
        "id": 314789834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670541023
    },
    {
        "content": "<p>There is a nice trick of doing <br>\n<code>for h : i in [:5] do ...</code> <br>\nand <code>h</code> can be used to get such a proof, but it would be nice to be able to iterate over <code>Fin n</code> directly</p>",
        "id": 314790076,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670541130
    },
    {
        "content": "<p>I.e. something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 314790145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670541176
    },
    {
        "content": "<p>Sorry I misunderstood your question, I thought you wanted something to the tune of having  a <code>Fin 5</code> there, not specifically getting the <code>Fin 5</code> thing to work.</p>",
        "id": 314790403,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1670541303
    },
    {
        "content": "<p>Unfortunately the <code>ToStream</code> class is not dependent, otherwise I think we could just have made your original code do the right thing</p>",
        "id": 314823246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670564305
    },
    {
        "content": "<p>We can do this though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Upto</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">upto</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Upto</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Upto</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">forIn</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">forIn'</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h.2</span><span class=\"o\">‚ü©</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">upto</span> <span class=\"mi\">5</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 314824475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670565371
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 314968496,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1670614592
    }
]