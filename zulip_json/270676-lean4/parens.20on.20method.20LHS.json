[
    {
        "content": "<p>Is it intended that this program compiles?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>    <span class=\"c1\">-- should be `op a b := a + b`</span>\n</code></pre></div>",
        "id": 224332395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611843972
    },
    {
        "content": "<p>I think so, it's no different from <code>def op (a b) := a + b</code></p>",
        "id": 224332504,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611844016
    },
    {
        "content": "<p>It can lead to bewildering error messages if one tries to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X.mk</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>    <span class=\"c1\">-- function of 4 variables?</span>\n</code></pre></div>",
        "id": 224332543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611844032
    },
    {
        "content": "<p>That is, it's a group of binders without type</p>",
        "id": 224332572,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611844047
    },
    {
        "content": "<p>hmm, I see</p>",
        "id": 224332769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611844117
    },
    {
        "content": "<p>I'm not very good at predicting what Lean 4 will understand yet</p>",
        "id": 224332802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611844128
    },
    {
        "content": "<p>I don't see! How does <code>op (a b)</code> even parse?</p>",
        "id": 224332834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611844137
    },
    {
        "content": "<p>Well this whole <code>where ...</code> construction is new</p>",
        "id": 224332956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611844184
    },
    {
        "content": "<p>Think of it as <code>def op (a b : _)</code>, aka <code>def op (a : _) (b : _)</code></p>",
        "id": 224333213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611844284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think the rule here is that <code>op</code> is a signature and we do not support direct pattern matching in signatures. But certainly we shouldn't accept <code>X.mk</code> as a binder name. If it had errored with \"expected atomic identifier\", do you think that would have led you to the right path?</p>",
        "id": 224334742,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611844861
    },
    {
        "content": "<p>That should probably be an error in any case, yeah</p>",
        "id": 224334810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611844891
    },
    {
        "content": "<p>I didn't really expect putting a pattern there to work, but then I got confused when it sort-of worked instead</p>",
        "id": 224334840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611844910
    },
    {
        "content": "<p>Why can't patterns go there? That's how it would work in haskell</p>",
        "id": 224337750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611846083
    },
    {
        "content": "<p>how do you write an equation compiler definition in a <code>where</code> clause?</p>",
        "id": 224337808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611846113
    },
    {
        "content": "<p>It's a signature, so <code>name binders | equations</code></p>",
        "id": 224338252,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611846271
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X.mk</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X.mk</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 224338705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611846439
    },
    {
        "content": "<p>or are there supposed to be commas now</p>",
        "id": 224338744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611846463
    },
    {
        "content": "<p>Is the type ascription optional?</p>",
        "id": 224338840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611846497
    },
    {
        "content": "<p>Yes to both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span>\n  <span class=\"bp\">|</span> <span class=\"n\">X.mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X.mk</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224360125,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611854180
    }
]