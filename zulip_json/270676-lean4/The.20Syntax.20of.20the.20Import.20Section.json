[
    {
        "content": "<p>I'm trying to do some search and replace on the import section of some Lean 4 source files and I'm wondering if there's a simple way that a low-tech parser / regex can determine where the import section ends in a file.</p>\n<p>With Lean 3, after the last import, custom commands cannot be used right away so you only need to parse until you encounter one keyword among a fixed list. Is it still the case with Lean 4?</p>",
        "id": 266955545,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641399587
    },
    {
        "content": "<p>Lean 4 will not allow you to use imports again after you have started declaring stuff yes, I'd say as soon as you encounter a line that is:</p>\n<ul>\n<li>not a comment</li>\n<li>not an import<br>\nthe import section is done. At least the compiler has complained to me whenever I've violated this in the past.</li>\n</ul>",
        "id": 266956383,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641400047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20Syntax.20of.20the.20Import.20Section/near/266955545\">said</a>:</p>\n<blockquote>\n<p>With Lean 3, after the last import, custom commands cannot be used right away so you only need to parse until you encounter one keyword among a fixed list. Is it still the case with Lean 4?</p>\n</blockquote>\n<p>No, because every <code>import</code> statement expects exactly one module name.</p>",
        "id": 266956880,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641400286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20Syntax.20of.20the.20Import.20Section/near/266956383\">said</a>:</p>\n<blockquote>\n<p>Lean 4 will not allow you to use imports again after you have started declaring stuff yes, I'd say as soon as you encounter a line that is:</p>\n<ul>\n<li>not a comment</li>\n<li>not an import<br>\nthe import section is done. At least the compiler has complained to me whenever I've violated this in the past.</li>\n</ul>\n</blockquote>\n<p>That was also the case with Lean 3. But Lean 3 and Lean 4 both allow you to define syntax for commands. That can be troublesome for parsing the import section because without context, when you scan a token, you can't know if it's a keyword or a module name. Lean 3 solves the problem by not letting you use a user-defined command as the first thing after the import section. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Now tells us that Lean 4 avoids the issue by allowing only one module name per import. </p>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , does it mean that the first thing after an import can now be a user-defined command?</p>",
        "id": 266959526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1641401493
    },
    {
        "content": "<p>Yes.</p>",
        "id": 266959682,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641401556
    },
    {
        "content": "<p>I think community lean 3 changed at some point to be whitespace sensitive instead. Certainly you can now <code>open_locale</code> immediately after imports. <a href=\"https://github.com/leanprover-community/lean/pull/188\">https://github.com/leanprover-community/lean/pull/188</a></p>",
        "id": 266960563,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641402000
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266967558,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641405275
    },
    {
        "content": "<p>Is there any way to fix name collisions from imports? For example when you have a diamon dependecy tree</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">A</span>\n<span class=\"bp\">/</span>   <span class=\"bp\">\\</span>\n<span class=\"n\">B</span>   <span class=\"n\">C</span>\n<span class=\"bp\">\\</span>   <span class=\"bp\">/</span>\n  <span class=\"n\">D</span>\n</code></pre></div>\n<p>If you import B and C in D you run into trouble. In my case there C is depending on a copy of A, but it is still a problem.</p>",
        "id": 267066728,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641479464
    },
    {
        "content": "<p>Are you using <a href=\"https://leanprover.github.io/lean4/doc/namespaces.html\">namespaces</a>? It's a nice way to enclosure content</p>",
        "id": 267068389,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641480425
    },
    {
        "content": "<p>Yes, but A uses the same namespace and definitions.</p>",
        "id": 267069150,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641480785
    },
    {
        "content": "<p>Is the project on Github? (can we take a look at it?)</p>",
        "id": 267069556,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641480967
    },
    {
        "content": "<p><a href=\"https://github.com/yatima-inc/lean-ipld\">https://github.com/yatima-inc/lean-ipld</a></p>",
        "id": 267069884,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641481126
    },
    {
        "content": "<p>Which are the problematic files?</p>",
        "id": 267070066,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641481220
    },
    {
        "content": "<p>Blake3 and Neptune both uses a module BinaryTools which produces name collisions</p>",
        "id": 267070160,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641481257
    },
    {
        "content": "<p>I could ofc just wrap those files in namespaces, but ideally I want to extract this as a separate dependency</p>",
        "id": 267070396,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641481373
    },
    {
        "content": "<p>Hm, so those are external dependencies? I don't have experience with such, sorry :(</p>",
        "id": 267070777,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641481578
    },
    {
        "content": "<p>It uses the normal lean compiler and includes the lean source files as separate builds using the <code>buildLeanPackage</code> nix function.</p>",
        "id": 267073385,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641483019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/270676-lean4/topic/The.20Syntax.20of.20the.20Import.20Section/near/267066728\">said</a>:</p>\n<blockquote>\n<p>In my case there C is depending on a copy of A</p>\n</blockquote>\n<p>Without looking further into the actual code, it sounds like this is the problem right there. You cannot (transitively) import two different versions (i.e. derivations) of the same module. It's the same restriction as in Haskell.</p>",
        "id": 267077673,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641485001
    },
    {
        "content": "<p>But in Haskell you can do <code>import qualified</code> to avoid name collisions. But I guess I just have to wrap with namespaces or make sure they use the same olean file?</p>",
        "id": 267127080,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1641510064
    }
]