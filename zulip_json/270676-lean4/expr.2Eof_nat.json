[
    {
        "content": "<p>If I have a <code>t : Expr</code> representing a type that I hope supports numerals, and an <code>n : Nat</code>, how do I generate the <code>Expr</code> with type <code>t</code> corresponding to <code>n</code>?</p>\n<p>In mathlib3 this is provided as <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L52\"><code>expr.of_nat</code></a>.</p>",
        "id": 302583004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665032229
    },
    {
        "content": "<p>This requires type class synthesis.  I would do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">mkRawNatLit</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 302583215,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665032444
    },
    {
        "content": "<p>But it makes sense to bundle that up in a function somewhere.</p>",
        "id": 302583220,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665032452
    },
    {
        "content": "<p>Thanks. It will eventually appear in a <code>linarith</code> related PR, as <code>Expr.ofNat</code> in <code>Mathlib/Lean/Expr/Basic.lean</code>.</p>",
        "id": 302588256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665036908
    }
]