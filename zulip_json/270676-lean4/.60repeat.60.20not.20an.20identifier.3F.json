[
    {
        "content": "<p>I'm getting <code>expected identifier</code> from this and I find it very confusing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">repeat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I'm on 2022-03-17. Could someone help me figure out what's happening here?</p>",
        "id": 276077738,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647880056
    },
    {
        "content": "<p>It's a keyword now, used in infinite loops e.g. <code>do repeat IO.println \"beep\"</code>.</p>",
        "id": 276078219,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647880226
    },
    {
        "content": "<p>Although I'm not sure why keywords from do-notation leak into term mode.</p>",
        "id": 276078598,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647880377
    },
    {
        "content": "<p>Thank you! It makes sense, it made me very confused :)</p>",
        "id": 276078818,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647880444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60repeat.60.20not.20an.20identifier.3F/near/276078598\">said</a>:</p>\n<blockquote>\n<p>Although I'm not sure why keywords from do-notation leak into term mode.</p>\n</blockquote>\n<p>I see the same happens for instance with <code>for</code></p>",
        "id": 276078904,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647880476
    },
    {
        "content": "<p>And then, I think that if <code>repeat</code> is no longer a valid identifier, this raises the question as to what should mathlib things like <code>list.repeat</code> be called in Lean 4.</p>",
        "id": 276079222,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1647880599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60repeat.60.20not.20an.20identifier.3F/near/276078598\">said</a>:</p>\n<blockquote>\n<p>Although I'm not sure why keywords from do-notation leak into term mode.</p>\n</blockquote>\n<p>We currently have a single global token table.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">my_dsl</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">my_dsl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"c\">/-</span><span class=\"cm\"> error: expected identifier -/</span>  <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 276080105,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647880915
    },
    {
        "content": "<p>I guess I was confused because this does not apply to tactics.  After <code>syntax \"foo\" : tactic</code>, <code>foo</code> can still be used as an identifier.  But I realize now that this is special opt-in behavior for some categories (using <code>LeadingIdentBehavior</code>).</p>",
        "id": 276081314,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647881373
    },
    {
        "content": "<p>Yes, there is this hack for <code>tactic</code> :)</p>",
        "id": 276083475,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647882223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/.60repeat.60.20not.20an.20identifier.3F/near/276079222\">said</a>:</p>\n<blockquote>\n<p>And then, I think that if <code>repeat</code> is no longer a valid identifier, this raises the question as to what should mathlib things like <code>list.repeat</code> be called in Lean 4.</p>\n</blockquote>\n<p>Note that it is always an option to put the identifier in guillemets if it is a keyword, although this can be inconvenient. For something like <code>List.repeat</code> which is always referred to either with a namespace or as dot-notation on an expression, you don't need the guillemets so it might be okay</p>",
        "id": 276120634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647900605
    },
    {
        "content": "<p>that is, it's not a problem for <code>protected</code> definitions, or equivalently definitions whose name is a keyword are effectively <code>protected</code> even if not by name</p>",
        "id": 276120706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647900676
    }
]