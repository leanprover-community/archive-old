[
    {
        "content": "<p>This is to share a <a href=\"https://github.com/siddhartha-gadgil/Saturn/\">SAT Solver-Prover</a> I wrote in Lean 4 (described below), but also a general question of how to run this usefully. This proves or disproves a SAT statement. It seems that I should implement <code>ToString</code> instances, and then use the result by explicitly specifying the statement type (or make this into tactics.</p>\n<p>This was my first work with lean, so the code is suboptimal in many ways. But I really like the idea of being able to compute with proofs of correctness of computation carried along, so thanks a lot for <strong>Lean 4</strong>.</p>\n<h1>SATurn : SAT Solver-prover in lean 4</h1>\n<p><strong>SATurn</strong> is a SAT solver-prover in lean 4 based on the DPLL algorithm. Given a SAT problem, we get either a solution or a resolution tree showing why there is no solution. Being written in Lean 4 allows:</p>\n<ul>\n<li>The program generates proofs in the foundations of the lean prover, so these are independently checked (both for existence and non-existence of solutions).</li>\n<li>The program itself is checked by lean, so guaranteed to terminate and give a correct answer.</li>\n</ul>\n<p>Proofs can be obtained by using the methods <code>solve</code> and <code>proveOrDisprove</code> in the file <code>DPLL.lean</code>. The former gives an object in a type representing either verified solutions or resolution trees. The latter gives a proof of existence or non-existence verified by the <em>lean prover kernel</em>. </p>\n<p>Many improvements are necessary, and some are forthcoming (including convenience is usability.)</p>",
        "id": 244051074,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1624772363
    },
    {
        "content": "<p>Sorry, there seems to be a bug found when I found a better way to consider examples. Presumably this is in translating the problem (as everything else is formally verified)</p>",
        "id": 244052229,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1624774907
    },
    {
        "content": "<p>A quick update - there are some baby examples at <a href=\"https://github.com/siddhartha-gadgil/Saturn/blob/main/Saturn/Examples.lean\">https://github.com/siddhartha-gadgil/Saturn/blob/main/Saturn/Examples.lean</a></p>",
        "id": 244059673,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1624788214
    },
    {
        "content": "<p>A blog post about this is at <a href=\"https://siddhartha-gadgil.github.io/automating-mathematics/posts/sat-prover-lean/\">https://siddhartha-gadgil.github.io/automating-mathematics/posts/sat-prover-lean/</a>. This is mostly a general overview with not many implementation details. </p>\n<p>Once more, I would appreciate comments on impoving the code (including pointers to documentation etc).</p>",
        "id": 244125473,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1624876049
    }
]