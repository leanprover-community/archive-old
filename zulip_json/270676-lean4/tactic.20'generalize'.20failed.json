[
    {
        "content": "<p>I can't for the life of me figure out how to perform induction on a list, when the goal contains a proof term that involves that list.<br>\nHere's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.attach</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">l.contains</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The compiler says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">generalize'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.contains</span> <span class=\"n\">x</span> <span class=\"n\">a_1.val</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.contains</span> <span class=\"o\">(</span><span class=\"n\">A.bs</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a_1.val</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"o\">(</span><span class=\"n\">A.bs</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>I can make that error go away temporarily, by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n  <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">A.bs</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>\n<p>But then again, the <code>simp only [A.bs] at *</code> does not rewrite the proof term, so I'm still stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nil</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.contains</span> <span class=\"o\">(</span><span class=\"n\">A.bs</span> <span class=\"o\">{</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"n\">bs</span> <span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">case</span> <span class=\"n\">cons</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">B</span>\n<span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"n\">tail</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">B</span>\n<span class=\"n\">tail_ih</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.contains</span> <span class=\"o\">(</span><span class=\"n\">A.bs</span> <span class=\"o\">{</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"n\">bs</span> <span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.contains</span> <span class=\"o\">(</span><span class=\"n\">A.bs</span> <span class=\"o\">{</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"n\">bs</span> <span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 272614044,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1645388728
    },
    {
        "content": "<p>Will this work for what you're doing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trace_state</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trace_state</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272617312,
        "sender_full_name": "Chris B",
        "timestamp": 1645392075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20'generalize'.20failed/near/272617312\">said</a>:</p>\n<blockquote>\n<p>Will this work for what you're doing?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.bs</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trace_state</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trace_state</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hmm, I think not. I still get stuck at not being able to rewrite the proof term.<br>\nPerhaps I don't understand what you're hinting at with this approach.<br>\nE.g. the <code>nil</code> case in your example should be provable, but I can't prove it because I can't rewrite the <code>l = a.bs n</code> (in the <code>nil</code> case: <code>[] = a.bs n</code>) in the <code>.attach</code> term.</p>",
        "id": 272657498,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1645433192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20'generalize'.20failed/near/272657498\">said</a>:</p>\n<blockquote>\n<p>Perhaps I don't understand what you're hinting at with this approach.</p>\n</blockquote>\n<p>It's just generalizing it by hand, moving things rightward into the motive and then adding an equality hypothesis. The hang-up here seems to be the dependent argument to <code>f</code>. If you can get away with making it <code>def f {b : B} {l : List B}  (hc : l.contains b) : Nat :=</code> or <code>def f {b : B} {l : List B} (hc : l.contains b) (h' : ∃ (a: A) (n : Nat), l = a.bs n) : Nat := sorry</code> things should go more smoothly.</p>",
        "id": 272705821,
        "sender_full_name": "Chris B",
        "timestamp": 1645458933
    },
    {
        "content": "<p>As it is, you can get a little closer by filling in the implicits, but the last type-level rewrite seems a bridge too far. The rewrite gives the 'motive not type correct' error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.bs</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">z.val</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">z.property</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n    <span class=\"c1\">--rw [h]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">trace_state</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272706031,
        "sender_full_name": "Chris B",
        "timestamp": 1645459027
    }
]