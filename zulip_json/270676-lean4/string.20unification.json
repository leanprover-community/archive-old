[
    {
        "content": "<p>I have been bumping into a seeming confusion with (I presume, perhaps incorrectly) the special status of string literals in Lean. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Good</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">instance</span> <span class=\"n\">g1</span> <span class=\"o\">:</span> <span class=\"n\">Good</span> <span class=\"o\">(</span><span class=\"n\">String.mk</span> <span class=\"o\">[</span><span class=\"sc\">'1'</span><span class=\"o\">])</span> <span class=\"n\">where</span>\n  <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kd\">def</span> <span class=\"n\">onlyGood</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">)[</span><span class=\"n\">Good</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"c1\">-- next line Failed to synthesize instance Good \"1\"</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">chk</span> <span class=\"o\">:</span> <span class=\"n\">onlyGood</span> <span class=\"s2\">\"1\"</span> <span class=\"bp\">=</span> <span class=\"n\">String.mk</span> <span class=\"o\">[</span><span class=\"sc\">'1'</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- but</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">but</span> <span class=\"o\">:</span> <span class=\"s2\">\"1\"</span> <span class=\"bp\">=</span> <span class=\"n\">String.mk</span> <span class=\"o\">[</span><span class=\"sc\">'1'</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In principle all strings are constructed by application of <code>String.mk</code>. In practice, uses of <code>String.mk</code> don't seem to unify with the corresponding literal. Admittedly this is probably not a common use case for Lean. But I have a few different use cases where I really want to be able to unify string literals with strings that are programmatically constructed in some way (either by typeclass instance search, or by manually constructing a string literal via <code>String.mk</code>, <code>List.cons</code>, and so on in a macro.  Is there a trick to doing this? or alternatively, if I construct a string in a macro, is there a reasonable way to get the macro to emit a string that will in fact unify with a literal written by hand in the source code?</p>",
        "id": 294325398,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1660928386
    },
    {
        "content": "<p>Although <code>\"1\" = String.mk ['1']</code> is defeq, this is not provable with only unfolding reducible definitions, which is what instance search does</p>",
        "id": 294401366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660978907
    },
    {
        "content": "<p>this isn't anything specific to string literals; if you have <code>instance : Good 1</code> where <code>def one := 1</code> then <code>Good one</code> won't be found</p>",
        "id": 294401450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660978962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418116\">Colin S. Gordon</span> <a href=\"#narrow/stream/270676-lean4/topic/string.20unification/near/294325398\">said</a>:</p>\n<blockquote>\n<p>if I construct a string in a macro, is there a reasonable way to get the macro to emit a string that will in fact unify with a literal written by hand in the source code?</p>\n</blockquote>\n<p>Yes, if you have a string <code>s</code> in a macro then <code>quote s</code> is a string literal you can put into the generated term</p>",
        "id": 294401570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660979073
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_quote\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">n.getId.toString</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_quote</span> <span class=\"n\">hi.mom</span>\n<span class=\"c1\">-- \"hi.mom\" : String</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Good</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Good</span> <span class=\"o\">(</span><span class=\"n\">my_quote</span> <span class=\"n\">hi.mom</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">def</span> <span class=\"n\">onlyGood</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Good</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">onlyGood</span> <span class=\"s2\">\"hi.mom\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"hi.mom\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 294401754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660979239
    },
    {
        "content": "<p>thanks!</p>",
        "id": 295529927,
        "sender_full_name": "Colin S. Gordon",
        "timestamp": 1661557776
    }
]