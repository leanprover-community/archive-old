[
    {
        "content": "<p>Is there an overview somewhere of the precedences used in various notations in Lean?</p>\n<p>I'm hoping that this might help me understand the <code>notation</code> macro a bit better. I still have problems understanding the statement from <a href=\"https://leanprover.github.io/lean4/doc/syntax.html\">Lean Manual &gt; Notations and Precedence</a>:</p>\n<blockquote>\n<p>A placeholder with precedence <code>p</code> accepts only notations with precedence at least <code>p</code> in that place. Thus the string <code>a + b + c</code> cannot be parsed as the equivalent of <code>a + (b + c)</code> </p>\n</blockquote>\n<p>.. where: <code>notation:65 lhs:65 \" + \" rhs:66 =&gt; HAdd.hAdd lhs rhs</code></p>\n<p>Does <code>notation:65</code> mean that a term of the form <code>&lt;lhs&gt; + &lt;rhs&gt;</code> will have a precedence of <code>65</code>?<br>\nAnd hence, since <code>rhs</code> has precedence <code>66</code>, it will not accept a term of the form <code>&lt;lhs&gt; + &lt;rhs&gt;</code>.<br>\nBut since <code>lhs</code> has precedence <code>65</code> it <em>will</em>, and hence <code>+</code> associates to the left?</p>",
        "id": 254829541,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1632567048
    },
    {
        "content": "<p>In Lean 3, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">+</span> <span class=\"c1\">-- _ `+`:65 _:65 := has_add.add #1 #0</span>\n</code></pre></div>\n<p>means nothing more or less than \"<code>+</code> is an infix operator which is left associative and has binding power 65\", and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">^</span> <span class=\"c1\">-- _ `^`:80 _:79 := has_pow.pow #1 #0</span>\n</code></pre></div>\n<p>means that <code>^</code> is an infix operator which is right associative and has binding power 80. You can read off left or right associativity by noting whether the second number is equal to the first, or one less. To find out why all this works you can read about Pratt parsing but at the end of the day the rule of thumb above is all I've ever needed.</p>",
        "id": 254840135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632576813
    },
    {
        "content": "<p>For regular infix operators, Pratt parsers just need a left and right number, though it's common to just take one and turn left associative operators into (n, op, n+1) and right-associative ones into (n+1, op, n). The number after <code>notation</code> just seems to be a way of controlling whether and when associativity/chaining of certain operators is even allowed. The example they give is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n</code></pre></div>\n<p>In the context of the \"A placeholder with precedence p...\" statement, the point of <code>notation:50</code> relative to the lbp/rbp is that this notation can't be chained since it doesn't associate in either direction. This throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 254853189,
        "sender_full_name": "Chris B",
        "timestamp": 1632588476
    }
]