[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PSigma</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x₁</span>\n</code></pre></div>\n<p>gives a <code>tactic 'introN' failed, insufficient number of binders</code> on the <code>induction</code> call. Should this be working by now or is this not implemented yet?</p>",
        "id": 254173154,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632213549
    },
    {
        "content": "<p>(Adding <code>noncomputable</code> is no remedy, so it's not the code generation)</p>",
        "id": 254175665,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632215024
    },
    {
        "content": "<p>Also worth adding that if I put <code>(y : A) (z : True)</code> in the premises of the example, it works, so maybe there's just some whnfing missing</p>",
        "id": 254175801,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632215107
    },
    {
        "content": "<p>Here's an example without <code>PSigma</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">A0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A0</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 254177747,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632216272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Yes, the current induction tactic does not support mutually inductive types. Note that <code>cases</code> supports them.<br>\nThe key issue is that the <code>induction</code> tactic uses the <code>A0.rec</code> recursor, and it has multiple motives. The current <code>induction</code> tactic supports only recursors with one motive. This is why <code>cases</code> works, <code>A0.casesOn</code> has a single motive.<br>\nThat being said, I will add a better error message.</p>",
        "id": 254208924,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632231889
    },
    {
        "content": "<p>How high is the priority to add the support? I'm preparing code for a publication and having to show some <code>apply @A0.rec _ _</code> is a bit messy...</p>",
        "id": 254210942,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632232730
    },
    {
        "content": "<p>What's funny is that removing the <code>(b : B a)</code> in the second example makes it go through...</p>",
        "id": 254211015,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632232754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/induction.20on.20mutual.20inductives.20fails/near/254211015\">said</a>:</p>\n<blockquote>\n<p>What's funny is that removing the <code>(b : B a)</code> in the second example makes it go through...</p>\n</blockquote>\n<p>It worked by \"accident\". If you add constructors to <code>A0</code> and <code>A1</code>, it will fail at some point.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">A0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">A1</span> <span class=\"bp\">→</span> <span class=\"n\">A0</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A0</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 254213568,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632233627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/induction.20on.20mutual.20inductives.20fails/near/254210942\">said</a>:</p>\n<blockquote>\n<p>How high is the priority to add the support? I'm preparing code for a publication and having to show some <code>apply @A0.rec _ _</code> is a bit messy...</p>\n</blockquote>\n<p>It is a very low priority :(<br>\nEven if we add it, you will still need to provide the other motives. The tactic <code>induction a</code> would only infer the motive corresponding to <code>A0</code>.</p>",
        "id": 254214450,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632233928
    },
    {
        "content": "<p>Note that, if we are willing to write the other motives, it is not too much work to write one extra motive for <code>A0</code>. Named arguments help a bit. We can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">apply</span> <span class=\"n\">C.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">motive_n</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 254215288,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632234232
    },
    {
        "content": "<blockquote>\n<p>Even if we add it, you will still need to provide the other motives. The tactic induction a would only infer the motive corresponding to A0.</p>\n</blockquote>\n<p>That's the expected behaviour, isn't it? Or would it set all others to <code>PUnit</code>?</p>",
        "id": 254234217,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632240802
    },
    {
        "content": "<blockquote>\n<p>That's the expected behaviour, isn't it?</p>\n</blockquote>\n<p>Yes, it is. My point was that if we are already willing to provide the other motives, then providing an extra one is not that big of a deal. That is, the user is already aware of what motives are, and how they work. If feels like that the induction tactic would be a minor improvement over </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">apply</span> <span class=\"n\">C.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">motive_n</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>in this case.</p>\n<blockquote>\n<p>Or would it set all others to PUnit?</p>\n</blockquote>\n<p>I think setting the others to <code>PUnit</code> would only work on simple cases. For example, the types in the mutual block are not really recursive, but in this case, we could use <code>cases</code> instead.</p>",
        "id": 254235609,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632241361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/induction.20on.20mutual.20inductives.20fails/near/254235609\">said</a>:</p>\n<blockquote>\n<p>That is, the user is already aware of what motives are, and how they work. If feels like that the induction tactic would be a minor improvement over </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">apply</span> <span class=\"n\">C.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">motive_n</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>in this case.</p>\n</blockquote>\n<p>True, however, I think from a readability/aesthetic perspective even <code>induction c (motive_1 := ...) ... (motive_n := ...)</code> (or the like) is much cleaner. It allows readers of the code to get a handle on what's going on (i.e., induction) even if they don't fully understand what motives are. It also removes the need to specify <code>C.recOn</code>, which may be annoying and space consuming depending upon how long a name <code>C</code> is (and may also be confusing to more novice readers).</p>",
        "id": 254237804,
        "sender_full_name": "Mac",
        "timestamp": 1632242190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  I am not disputing whether it is more readable and/or cleaner. My main point was to justify why this feature is a low-priority right now. We have a huge list of higher priority issues to address. Moreover, this feature is not needed to port Mathlib.</p>",
        "id": 254241964,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632243687
    },
    {
        "content": "<p>Fwiw, I think <code>induction c (motive_1 := ...)</code> would be the wrong abstraction level anyway. In Isabelle, mutual induction is done over a meta-level conjunction of an appropriate number of goals, as well as an appropriately sized list of induction variables, from which the motives can be derived (if Isabelle even does something like that). We don't have meta-level conjunctions (except for the list of open goals, but I don't think <code>induction</code> working on more than the main goal would be ergonomic), but regular ones seem fine as well.</p>",
        "id": 254254110,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632248539
    },
    {
        "content": "<blockquote>\n<p>In Isabelle, mutual induction is done over a meta-level conjunction of an appropriate number of goals, as well as an appropriately sized list of induction variables, from which the motives can be derived (if Isabelle even does something like that)</p>\n</blockquote>\n<p>If the user is willing to provide the different goals, then I think <code>let rec</code> is a good solution for Lean. <br>\nIt already works in tactic mode, and we will have support for mutual recursion as soon as we have: <a href=\"https://github.com/leanprover/lean4/issues/176\">https://github.com/leanprover/lean4/issues/176</a></p>",
        "id": 254262101,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632251831
    }
]