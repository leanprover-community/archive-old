[
    {
        "content": "<p>Here's a definition in Lean.Meta.Tactic.Replace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Replace the type of `fvarId` at `mvarId` with `typeNew`.</span>\n<span class=\"sd\">Remark: this method assumes that `typeNew` is definitionally equal to the current type of `fvarId`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.MVarId.replaceLocalDeclDefEq</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fvarId</span> <span class=\"o\">:</span> <span class=\"n\">FVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typeNew</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarDecl</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span>\n    <span class=\"k\">if</span> <span class=\"n\">typeNew</span> <span class=\"bp\">==</span> <span class=\"n\">mvarDecl.type</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">lctxNew</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">modifyLocalDecl</span> <span class=\"n\">fvarId</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">setType</span> <span class=\"n\">typeNew</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarNew</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarAt</span> <span class=\"n\">lctxNew</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLocalInstances</span><span class=\"o\">)</span> <span class=\"n\">mvarDecl.type</span> <span class=\"n\">mvarDecl.kind</span> <span class=\"n\">mvarDecl.userName</span>\n      <span class=\"n\">mvarId.assign</span> <span class=\"n\">mvarNew</span>\n      <span class=\"n\">return</span> <span class=\"n\">mvarNew.mvarId</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>It looks like it's checking first to see if the replacement is really going to change anything, and if not it doesn't make the change.  But isn't <code>mvarDecl.type</code> giving the type of <code>mvarId</code>?  Shouldn't the check be comparing <code>typeNew</code> to the type of <code>fvarId</code>, not the type of <code>mvarId</code>?</p>",
        "id": 295086737,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1661360193
    }
]