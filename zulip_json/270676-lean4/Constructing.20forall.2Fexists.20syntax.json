[
    {
        "content": "<p>I want to manipulate some syntax in Lean, which in the end should result in syntax describing an ∃ or ∀ statement. Given as input some syntax describing the identifiers and their types, I came up with the following function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constructExists</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkNode</span> <span class=\"bp\">`«</span><span class=\"n\">term</span><span class=\"bp\">∃</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"n\">mkAtom</span> <span class=\"s2\">\"∃\"</span><span class=\"o\">,</span>\n    <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.explicitBinders</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n      <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">$</span> <span class=\"n\">args.map</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ids</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.bracketedExplicitBinders</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n          <span class=\"n\">mkAtom</span> <span class=\"s2\">\"(\"</span><span class=\"o\">,</span>\n          <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"o\">(</span><span class=\"n\">ids.map</span> <span class=\"bp\">λ</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.binderIdent</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"n\">id</span> <span class=\"o\">]),</span>\n          <span class=\"n\">mkAtom</span> <span class=\"s2\">\":\"</span><span class=\"o\">,</span>\n          <span class=\"n\">type</span><span class=\"o\">,</span>\n          <span class=\"n\">mkAtom</span> <span class=\"s2\">\")\"</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">],</span>\n    <span class=\"n\">mkAtom</span> <span class=\"s2\">\",\"</span><span class=\"o\">,</span>\n    <span class=\"n\">body</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>This method works for me (at least for all my inputs), but to me it seems a bit ad hoc. I must say I'm no expert on syntax at all, but it feels like this function might break at some point in the future? Similarly, I tried to define a function to construct ∀-statements, but this one does not work (the resulting syntax does not parse well..)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constructForAll</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.forall</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"n\">mkAtom</span> <span class=\"s2\">\"∀\"</span><span class=\"o\">,</span>\n    <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.explicitBinders</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n      <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">$</span> <span class=\"n\">args.map</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ids</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.bracketedExplicitBinders</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n          <span class=\"n\">mkAtom</span> <span class=\"s2\">\"(\"</span><span class=\"o\">,</span>\n          <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"o\">(</span><span class=\"n\">ids.map</span> <span class=\"bp\">λ</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.binderIdent</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"n\">id</span> <span class=\"o\">]),</span>\n          <span class=\"n\">mkAtom</span> <span class=\"s2\">\":\"</span><span class=\"o\">,</span>\n          <span class=\"n\">type</span><span class=\"o\">,</span>\n          <span class=\"n\">mkAtom</span> <span class=\"s2\">\")\"</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">],</span>\n    <span class=\"n\">mkAtom</span> <span class=\"s2\">\",\"</span><span class=\"o\">,</span>\n    <span class=\"n\">body</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>Do any of you know what the best/correct way is to achieve this?</p>",
        "id": 281693171,
        "sender_full_name": "Jesse Vogel",
        "timestamp": 1652106831
    },
    {
        "content": "<p>you want to work in a monad that support syntax quotations via the <code>MonadQuotation</code> typeclass such as <code>MacroM</code>, for a full list of implementors see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MonadQuotation#doc\">docs4#Lean.MonadQuotation</a>. Then you can use syntax such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"const\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the one on the right hand side of the arrow here in order to generate your <code>Syntax</code>.</p>",
        "id": 281695577,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1652107820
    },
    {
        "content": "<p>To expand on Henrik's comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkForall</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.fst</span>\n  <span class=\"k\">let</span> <span class=\"n\">ts</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.snd</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281714138,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1652115517
    },
    {
        "content": "<p>Thank you very much! Using the mkForall works, but for some reason if I try to make an analogue mkExists something goes wrong. Consider the following minimal example: if I use mkForall everything is fine, but if I switch to mkExists it complains <code>unknown identifier 'T'</code>. Why does this happen?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.debug</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkForall</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Command.CommandElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.fst</span>\n  <span class=\"k\">let</span> <span class=\"n\">ts</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.snd</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkExists</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Command.CommandElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.fst</span>\n  <span class=\"k\">let</span> <span class=\"n\">ts</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.snd</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">binder</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">binder</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">binders</span>\n<span class=\"n\">syntax</span> <span class=\"n\">binder</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">binders</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"s2\">\"#test\"</span> <span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">binders</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binders</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- Make array of identifier-type pairs</span>\n    <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">p.map</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binder</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"c1\">-- Construct syntax</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">mkExists</span> <span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">True</span><span class=\"o\">))</span> <span class=\"c1\">-- Using this one complains</span>\n    <span class=\"c1\">-- let stx ← mkForall arr (←`(True)) -- This one is fine</span>\n    <span class=\"c1\">-- Elaborate syntax to expression</span>\n    <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"n\">none</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n      <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"expr = {expr}\"</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281796603,
        "sender_full_name": "Jesse Vogel",
        "timestamp": 1652173618
    },
    {
        "content": "<p>If composed syntax quotations misbehave, it is usually due to missing annotations</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkExists</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Syntax</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Command.CommandElabM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.fst</span>\n  <span class=\"k\">let</span> <span class=\"n\">ts</span> <span class=\"o\">:=</span> <span class=\"n\">xs.map</span> <span class=\"n\">Prod.snd</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">vs</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The binder syntax of exists and forall is not identical</p>",
        "id": 281797778,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652174307
    }
]