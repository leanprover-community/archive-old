[
    {
        "content": "<p>With a huge help from <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> I have created <code>IteractiveSvg</code> structure that allows you to easily create an interactive svg widget.</p>\n<p>The structure <a href=\"https://github.com/EdAyers/WidgetKit/blob/a0cc56028090f31ac02ee9db2f7b5c6367fd4020/WidgetKit/InteractiveSvg.lean#L56\">definition</a> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">InteractiveSvg</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n  <span class=\"n\">frame</span> <span class=\"o\">:</span> <span class=\"n\">Svg.Frame</span>\n  <span class=\"n\">update</span> <span class=\"o\">(</span><span class=\"n\">time_ms</span> <span class=\"bp\">Δ</span><span class=\"n\">t_ms</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"o\">:</span> <span class=\"n\">Action</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">mouseStart</span> <span class=\"n\">mouseEnd</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Svg.Point</span> <span class=\"n\">frame</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">selectedId</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getSelectedData</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n         <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span>\n  <span class=\"n\">render</span> <span class=\"o\">(</span><span class=\"n\">mouseStart</span> <span class=\"n\">mouseEnd</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Svg.Point</span> <span class=\"n\">frame</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">Svg</span> <span class=\"n\">frame</span>\n</code></pre></div>\n<p>Where</p>\n<ul>\n<li><code>State</code> is any custom type that has to be convertible from/to Json. </li>\n<li><code>init</code> is initial value of the state</li>\n<li><code>frame</code> contains information how to convert position in floats to pixels</li>\n<li><code>update</code> function that is run every time step or on mouse event. The argument  <code>getSelectedData</code> allows you to retrieve any custom data stored on a svg element that is currently selected</li>\n<li><code>render</code> function converting <code>State</code> to svg</li>\n</ul>\n<hr>\n<p>Code repository is <a href=\"https://github.com/EdAyers/WidgetKit\">https://github.com/EdAyers/WidgetKit</a></p>\n<p>The build is still a bit fragile but this works for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">widget</span><span class=\"bp\">;</span> <span class=\"n\">npm</span> <span class=\"n\">install</span><span class=\"bp\">;</span> <span class=\"n\">cd</span> <span class=\"bp\">..</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">widgets</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>Then open <code>WidgetKit/Demos/InteractiveSvg.lean</code> and when you place cursor on <code>#widget svgWidget (toJson init)</code> you should see:</p>\n<p><a href=\"/user_uploads/3121/WtXHfWV2B-zaGQ1wHLtjGyO8/ezgif-1-bfe8cf464d.gif\">ezgif-1-bfe8cf464d.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WtXHfWV2B-zaGQ1wHLtjGyO8/ezgif-1-bfe8cf464d.gif\" title=\"ezgif-1-bfe8cf464d.gif\"><img src=\"/user_uploads/3121/WtXHfWV2B-zaGQ1wHLtjGyO8/ezgif-1-bfe8cf464d.gif\"></a></div>",
        "id": 311271665,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669033405
    },
    {
        "content": "<p>This looks very nice, but could you elaborate on the applications you have in mind?</p>",
        "id": 311273091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669034015
    },
    {
        "content": "<p>I have few examples of simulations/computations using SciLean underway. For example I want to make interactive applets like in this <a href=\"https://pomax.github.io/bezierinfo/\">article on Bezier curves</a>.</p>",
        "id": 311273345,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669034129
    },
    {
        "content": "<p>Also merging this with <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> 's <code>by interactive</code> tactic would be interesting. This would allow you to create a custom interactive tactic without writing javascript.</p>",
        "id": 311273603,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669034238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Interactive.20Svg/near/311273345\">said</a>:</p>\n<blockquote>\n<p>I have few examples of simulations/computations using SciLean underway. For example I want to make interactive applets like in this <a href=\"https://pomax.github.io/bezierinfo/\">article on Bezier curves</a>.</p>\n</blockquote>\n<p>Is there a similar way to visualise graphs (I mean graphs with vertices and edges)</p>",
        "id": 311274158,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1669034439
    },
    {
        "content": "<p>For me, the motivation is that I do not know any javascript and not too interested in learning it right now. However, I still wan to create my own widgets, so I just want something allowing me to draw points, lines, circles, ... and I will do everything from Lean</p>",
        "id": 311274161,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669034442
    },
    {
        "content": "<p>Even static visualisations would very helpful in describing graph theoretic constructions</p>",
        "id": 311274223,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1669034467
    },
    {
        "content": "<p>Sure, the <code>InteractiveSvg</code> allows you to draw any svg, so points, circle, lines and you can build a graph from that.</p>",
        "id": 311274405,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669034540
    },
    {
        "content": "<p>But you have to specify all vertex positions yourself. Which can be difficult if you have only the combinatorial description of a graph.</p>",
        "id": 311274539,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669034602
    },
    {
        "content": "<p>Does the interactive svg talk to Lean or is information only going one way?</p>",
        "id": 311275489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669034961
    },
    {
        "content": "<p>Ah I see. So this is something like tikz  in that case. If it is interactive, and the gif is something to go by, then this should not be an issue. Are you taking feature requests at this time?</p>",
        "id": 311275741,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1669035064
    },
    {
        "content": "<p>In any case, thanks a lot for this wonderful tool</p>",
        "id": 311276184,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1669035228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Interactive.20Svg/near/311275741\">said</a>:</p>\n<blockquote>\n<p>Ah I see. So this is something like tikz  in that case.For my particular use case.  If it is interactive, and the gif is something to go by, then this should not be an issue. Are you taking feature requests at this time?</p>\n</blockquote>\n<p>Not really, this is a result of hackathon in Freiburg and I won't have time to touch this too much in the next 3 months. So I'm taking only pull requests :) but I'm happy to help and answer questions.</p>",
        "id": 311276296,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669035264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Interactive.20Svg/near/311275489\">said</a>:</p>\n<blockquote>\n<p>Does the interactive svg talk to Lean or is information only going one way?</p>\n</blockquote>\n<p>Depends what do you mean by that. The <code>InteractiveSvg.update</code> is a Lean function, so you can call any Lean code  when you update the svg.</p>\n<p>Currently there is no way to modify the environment, e.g. add new declaration, or talk to language server protocol. But I would really like to merge it with Joachim's <code>interactive!</code> tactic that can talk to lsp.</p>",
        "id": 311276661,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669035408
    },
    {
        "content": "<p>Beautiful.</p>",
        "id": 311282141,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1669037400
    },
    {
        "content": "<p>Visualization of De Casteljau's algorithm to evaluate Bezier curve<br>\n<a href=\"/user_uploads/3121/XahQ6dVgXMyYoOtogwZyzhp1/bezier.gif\">bezier.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XahQ6dVgXMyYoOtogwZyzhp1/bezier.gif\" title=\"bezier.gif\"><img src=\"/user_uploads/3121/XahQ6dVgXMyYoOtogwZyzhp1/bezier.gif\"></a></div><p>Code in SciLeanExamples <a href=\"https://github.com/lecopivo/SciLeanExamples/blob/main/SciLeanExamples/BezierCasteljauWidget.lean\">repository</a></p>",
        "id": 311439955,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669054623
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xIP0lZj-0SDnlPwG4ZTbzbhM/bezier.gif\">bezier.gif</a><br>\nOhh I cut the gif short when converting from mp4</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xIP0lZj-0SDnlPwG4ZTbzbhM/bezier.gif\" title=\"bezier.gif\"><img src=\"/user_uploads/3121/xIP0lZj-0SDnlPwG4ZTbzbhM/bezier.gif\"></a></div>",
        "id": 311440970,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1669054966
    }
]