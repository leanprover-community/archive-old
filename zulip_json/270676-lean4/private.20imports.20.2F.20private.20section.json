[
    {
        "content": "<p>Hello everybody,</p>\n<p>my first project grows a little larger and I'd like to refactor it.</p>\n<p>For example, I have some very important types and theorems about them. Those theorems should be enough to reason about those types, there is no need to know the implementation details.</p>\n<p>In fact, those implementation details are likely to change, and I do not want users to use them directly.</p>\n<p>For example, consider a theory about real numbers. There are several constructions available (cauchy sequences, dedekind cuts, probably others)</p>\n<p>For the end user, I want to expose some type <code>Real</code> with the corresponding axioms for the real numbers. Any theorem that requires details about the explicit construction is probably not a theorem about real numbers, otherwise the axioms should be enough.</p>\n<p>Currently, I mark my internal constructions as private, and this works fine. However, as my project grows, there are some problems:</p>\n<ul>\n<li>I have to work in a single file, otherwise I have no access to the private definitions</li>\n<li>Private definitions are automatically protected, so I lose syntax sugar like dot notation</li>\n<li>I have to add <code>private</code> to basically every definition (a <code>private section</code> would be nice)</li>\n</ul>\n<p>What I'd really like is some kind of \"private import\": In a certain file / folder, I develop all my internal constructions. I can even use syntactic sugar like dot syntax inside those files.<br>\nWhen they are imported with a private import, all theorems / definitions from this import are becoming private theorems.</p>\n<p>Is something like this already available, or is something like this planned? Maybe my use case is stupid but I think that there are cases where hiding implementation details may be a good idea. In my case, the explicit constructions are rather ugly while the resulting a theorems are quite nice.</p>",
        "id": 302471709,
        "sender_full_name": "Jan-Mirko Otter",
        "timestamp": 1664980813
    },
    {
        "content": "<p>What you could do right now is instead of talking about concrete types use some sort of proof carrying type class <code>IsReal (a : Type u) : Prop</code> which contains proofs of the axioms. This would force you to write your theorems as <code>[Real R] (a b c : R) (f : R -&gt; R) ...</code> instead of just using real numbers directly though.</p>",
        "id": 302475876,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1664981993
    }
]