[
    {
        "content": "<p>Hi, I am having difficulty getting this compiled. Something I am doing wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  failed to synthesize instance</span>\n<span class=\"cm\">    Inhabited (f s)</span>\n<span class=\"cm\"> -/</span>\n  <span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"1\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I want to get the Array type inferred based on the type function application at term level.</p>",
        "id": 263581919,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1638539440
    },
    {
        "content": "<p>The <code>Array.get!</code> function works only on types that are registered as <code>Inhabited</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">cases</span> <span class=\"n\">s</span>\n<span class=\"n\">all_goals</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 263583418,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1638540070
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263583610,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1638540135
    },
    {
        "content": "<p>So if I want to have have a type level function to determine Array's type and then dispatch the right function at term level how can I achieve that. I want to resolve at type level whether the argument is of type <code>Array Nat</code> or <code>Array String</code> and then at term level want to map the same array and deal with <code>Nat</code> or <code>String</code> values within it as required. Hope my explanation make sense</p>",
        "id": 263587289,
        "sender_full_name": "Kaushik Chakraborty",
        "timestamp": 1638541887
    },
    {
        "content": "<p>I think <span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> 's code should be sufficient to get your code to work. (However, it's generally not a good idea to have types that change their representation like that, because it does not optimize well.)</p>\n<p>You can also use <code>#eval</code> instead of <code>#reduce</code>, although you have to either say the reduced target type or implement <code>Eval (f s)</code> as well, along similar lines to the proof of <code>Inhabited</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">cases</span> <span class=\"n\">s</span>\n<span class=\"n\">all_goals</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">String</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">Nat</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"1\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 263615444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638554399
    }
]