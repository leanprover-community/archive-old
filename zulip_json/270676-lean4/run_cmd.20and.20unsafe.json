[
    {
        "content": "<p>Is there a way I can make <code>run_cmd</code> accept this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Quot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">magic</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Trunc.mk</span> <span class=\"mi\">37</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unquot</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">test_magic</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Command.CommandElabM</span> <span class=\"n\">Unit</span>  <span class=\"o\">:=</span>\n<span class=\"n\">unless</span> <span class=\"n\">magic</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"got {magic}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">magic</span> <span class=\"c1\">-- ok, prints 37</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">test_magic</span> <span class=\"c1\">-- fails!</span>\n</code></pre></div>\n<p>It currently complains that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">invalid</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">uses</span> <span class=\"n\">unsafe</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">test_magic'</span>\n</code></pre></div>",
        "id": 321137546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673609552
    },
    {
        "content": "<p>yes, the declaration needs to be marked unsafe before being passed to <code>addAndCompile</code></p>",
        "id": 321151503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673613872
    },
    {
        "content": "<p>Are you describing something that needs fixing in core?</p>",
        "id": 321157736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615553
    },
    {
        "content": "<p>no</p>",
        "id": 321158807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673615884
    },
    {
        "content": "<p>How do I mark it unsafe, if not via <code>unsafe</code>?</p>",
        "id": 321158906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615913
    },
    {
        "content": "<p>In <code>elabRunElab</code> there is a call to <code>evalTerm</code> which has an optional <code>safety</code> argument</p>",
        "id": 321159086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673615965
    },
    {
        "content": "<p>Oh, I hadn't realized <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.RunCmd.elabRunElab#doc\">docs4#Mathlib.RunCmd.elabRunElab</a> was not in core! (as I didn't know its name)</p>",
        "id": 321159263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673616022
    },
    {
        "content": "<p>Would <code>run_cmd unsafe ...</code> not work?</p>",
        "id": 321159314,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673616037
    },
    {
        "content": "<p>I suppose it would</p>",
        "id": 321159341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673616046
    },
    {
        "content": "<p>To make sure you still have to mention a magic spell to break out of <code>unsafe</code></p>",
        "id": 321159429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673616075
    },
    {
        "content": "<p>Oh, that works fine</p>",
        "id": 321159769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673616166
    },
    {
        "content": "<p>What's the rule behind when the unsafe keyword is needed? I thought it was only valid on declarations</p>",
        "id": 321160047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673616240
    },
    {
        "content": "<p>It is, but there is a mathlib (now std) syntax <code>Std.Tactic.TermUnsafe</code> which allows using it in term position</p>",
        "id": 321162580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673616889
    },
    {
        "content": "<p>it is much simpler than what is done in core which is to make an opaque definition, use <code>implemented_by</code> to point the compiler to an unsafe declaration and then write the rest of the program there</p>",
        "id": 321162901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673616964
    },
    {
        "content": "<p>in fact <code>elabRunElab</code> and friends contain a use of term-unsafe to call <code>evalTerm</code>, which is an unsafe declaration</p>",
        "id": 321162992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673616988
    }
]