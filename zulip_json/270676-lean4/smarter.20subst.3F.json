[
    {
        "content": "<p>I often find myself in situations where rw/subst/generalize tactics don't work because some variable occurs in the other, or because what I'm trying to substitute isn't an atomic variable. <br>\nSo I have to manually write an auxiliary lemma that generalizes variables, which looks ugly.<br>\nI'm wondering what the right way to deal with those proofs is. Here is an mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">th</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How do you prove this efficiently?</p>",
        "id": 270532498,
        "sender_full_name": "Michael Jam",
        "timestamp": 1643886736
    },
    {
        "content": "<p>My proof would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">th</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270534710,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643888004
    },
    {
        "content": "<p>Ok that's nice my mwe is too simple.  Do you think you could have a proof that doesn't use cases x? I'm in a context where x has an abstract type so I can't use cases on it.</p>",
        "id": 270541041,
        "sender_full_name": "Michael Jam",
        "timestamp": 1643891772
    },
    {
        "content": "<p>I'll try to come up with a better example later</p>",
        "id": 270541154,
        "sender_full_name": "Michael Jam",
        "timestamp": 1643891850
    },
    {
        "content": "<p>For <code>generalize</code>, check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.generalizes\">docs#tactic.interactive.generalizes</a>. In general, many tactics work better with less dependent goals; this is the eternal paradox of dependent type theory. ;)</p>",
        "id": 270692049,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643968934
    },
    {
        "content": "<p>Oh no Lean 4, sorry. In that case there's no equivalent to <code>generalizes</code> yet.</p>",
        "id": 270692091,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643968960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <code>generalize</code> may take multiple entries in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">f.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_lt_succ</span> <span class=\"n\">f.isLt</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin.succ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">n'_eq</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">f'_eq</span> <span class=\"o\">:</span> <span class=\"n\">Fin.succ</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 270739938,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1643992713
    },
    {
        "content": "<p>Oh nice! I didn't realise you already had this covered.</p>",
        "id": 270740209,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643992849
    }
]