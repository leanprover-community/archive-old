[
    {
        "content": "<p>I'm trying to write a recursive function that returns a dependent type with a constraint, but this constraint changes from the recursion so I want to raise/cast it to the top level constraint Prop. How do I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- is this the best way to assign a variable in a type expression btw?</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">Bound</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_left_cancel</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">progression</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">BNat</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">ns</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ms</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ob</span> <span class=\"o\">:</span> <span class=\"n\">Bound</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">ms</span><span class=\"bp\">+</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">le_left_cancel</span><span class=\"o\">⟩</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isLe</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">isGe</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">BNat</span> <span class=\"n\">bound</span> <span class=\"o\">}</span>\n    <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">progression</span> <span class=\"n\">ns</span> <span class=\"n\">ms</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">BNat</span> <span class=\"n\">ob</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ob.max</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n      <span class=\"n\">BNat.raise</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">BNat</span> <span class=\"n\">bound</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>The checker doesn't understand that BNat.raise returns the same bound. Why can't it do this? Is there a way to hint it about it? A Decide instance? Unification hints?</p>",
        "id": 272187048,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1645049726
    },
    {
        "content": "<p>I'm not sure if there's a better way, but you can always manually specify the motive by using <code>Nat.rec</code> instead of a recursive definition. I think lean4's equation compiler needs some tuning still?</p>",
        "id": 272188424,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645050532
    },
    {
        "content": "<p>First of all, please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 272307474,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645124691
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- is this the best way to assign a variable in a type expression btw?</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">Bound</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_left_cancel</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>This is the syntax for default arguments, not for let-bindings.  The <code>:=</code> just means that the value will be used if you call <code>progression n m</code>, but you can still provide a different one using <code>progression ⟨...⟩ n m</code>, so you can't assume that it's equal to the default one.</p>",
        "id": 272307724,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645124800
    },
    {
        "content": "<p>If you look in the term goal at <code>BNat.raise b ..</code> then you should also see that there are two <code>m</code>'s.  The <code>m</code> in the default argument is a different one than the <code>m</code> argument to progression.</p>",
        "id": 272308027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645124939
    },
    {
        "content": "<p>What you probably want is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">progression</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_left_cancel</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">List</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">BNat</span> <span class=\"n\">bound</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 272308192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645125010
    },
    {
        "content": "<p>I'd just write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">progression</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">BNat</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_left_cancel</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 272308223,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645125027
    },
    {
        "content": "<p>Thanks. Will post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> next time. I didn't know let expressions were allowed inside type expressions.</p>",
        "id": 272343749,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1645143774
    }
]