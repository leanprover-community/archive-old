[
    {
        "content": "<p>I'd like to make a small mod to section <a href=\"http://lovettsoftware.com/lean4/functions.html#pipelining\">http://lovettsoftware.com/lean4/functions.html#pipelining</a>.</p>\n<p>The section says \"The forward pipeline |&gt; operator takes a function and an argument and return a value. In contrast, the backward pipeline &lt;| operator takes an argument and a function and returns a value.\"</p>\n<p>However, the wording seems a bit \"backwards\" to me:  Ok to replace post a PR and replace it with e.g.</p>\n<p>\"The forward pipeline |&gt; operator <code>a |&gt; f</code> takes an argument <code>a</code> and a function <code>f</code> and returns  <code>f a</code>.  The backward pipeline <code>&lt;|</code> operator reverses the order of <code>f</code> and <code>a</code>:  For example, <code>f &lt;| a</code> again returns <code>f a</code> .\"</p>",
        "id": 298306607,
        "sender_full_name": "Tom",
        "timestamp": 1662950601
    },
    {
        "content": "<p>(Also, my macro-fu still needs work but just looking at the definitions of operator <code>|&gt;</code> and <code>&lt;|</code>, it seems the parser is just a standard precedence climbing/pratt parser; in which case, would it make sense to also mention that the former is left associative and the latter is right-associative?)</p>",
        "id": 298306868,
        "sender_full_name": "Tom",
        "timestamp": 1662950885
    },
    {
        "content": "<p>Yes, <code>|&gt;</code> is left-associative and <code>&lt;|</code> is right-associative. The docstring on each should say as much, and you can test it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">c</span> <span class=\"c1\">-- c (b a)</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">c</span> <span class=\"c1\">-- c (b a)</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- c b a</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">c</span> <span class=\"c1\">-- a (b c)</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">c</span> <span class=\"c1\">-- a b c</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">_</span><span class=\"bp\">→</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- a (b c)</span>\n</code></pre></div>",
        "id": 298308920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662953522
    },
    {
        "content": "<p>I'm not even sure I want to use the terms \"forward pipeline\" and \"backward pipeline\" here, I don't think it's obvious which way is forward. It's also worth mentioning that <code>&lt;|</code> is used 40 times more often than <code>|&gt;</code></p>",
        "id": 298309056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662953743
    },
    {
        "content": "<p>amusingly, <code>&lt;|</code> and <code>$</code> are about equally used in lean 4, although I believe the latter is deprecated</p>",
        "id": 298309140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662953837
    },
    {
        "content": "<p>Note the official docs live here: <a href=\"https://leanprover.github.io/lean4/doc/functions.html?highlight=operator%20takes%20a%20function#pipelining\">https://leanprover.github.io/lean4/doc/functions.html?highlight=operator%20takes%20a%20function#pipelining</a> my site was just a temporary staging location until the monads PR was merged (which it is now).</p>",
        "id": 298488613,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663021594
    },
    {
        "content": "<p>I took a crack at fixing the documentation here: <a href=\"https://github.com/leanprover/lean4/pull/1594\">https://github.com/leanprover/lean4/pull/1594</a></p>",
        "id": 299218768,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663352854
    },
    {
        "content": "<p>Thanks!  As a newcomer, I felt reluctant to make documentation changes without someone else \"ok\"-ing them, hence why I've not gone ahead and done this.  I appreciate you helping out!  I made some minor wording suggestions on the PR.  Thanks a lot!</p>",
        "id": 299400560,
        "sender_full_name": "Tom",
        "timestamp": 1663487730
    }
]