[
    {
        "content": "<p>Perhaps the answer to this question is very type-theoretical, but why can't I use an inductive type's recursor within its own definition?<br>\nE.g., if I try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.rec</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I get an error telling me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">X</span>\n</code></pre></div>\n<p>Is it because that would make the recursor recursive (<span aria-label=\"drum\" class=\"emoji emoji-1f941\" role=\"img\" title=\"drum\">:drum:</span>)? Because it would have to know about its own definition in order to be defined?</p>",
        "id": 248810473,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628490519
    },
    {
        "content": "<p>the boring answer is that this is not allowed by the inductive definition schema</p>",
        "id": 248811323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628491571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Use.20recursor.20within.20inductive.20def/near/248811323\">said</a>:</p>\n<blockquote>\n<p>the boring answer is that this is not allowed by the inductive definition schema</p>\n</blockquote>\n<p>Good enough for me ¯\\_(ツ)_/¯</p>",
        "id": 248811338,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628491600
    },
    {
        "content": "<p>Can this be circumvented by using an inductive family somehow?</p>",
        "id": 248811364,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628491646
    },
    {
        "content": "<p>I don't think this is a higher inductive type - even HITs don't let you reference the recursor in the constructors because that almost certainly leads to the liar paradox somehow</p>",
        "id": 248811380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628491675
    },
    {
        "content": "<p>not to mention, what does the recursor's type even look like? it has to reference itself</p>",
        "id": 248811429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628491702
    },
    {
        "content": "<p>Maybe you could start with a description of what you want to do</p>",
        "id": 248811446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628491740
    },
    {
        "content": "<p>in the example, you are saying you want <code>x</code> to be a <code>base</code>, but in that cause the parameter could just be a <code>Nat</code></p>",
        "id": 248811469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628491784
    },
    {
        "content": "<p>We have in fact had a <a href=\"#narrow/stream/113489-new-members/topic/Inductive.20type.20nesting/near/246821608\">discussion</a> on this before :D.</p>",
        "id": 248811573,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628491875
    },
    {
        "content": "<p>I want to define this cycle of mutually inductive types <code>MutationOutput</code>, <code>Mutation</code>, <code>Reaction</code>, <code>Reactor</code>, <code>Network</code>. <br>\nUsing Lean 4 seems to fix the issue with nested inductives. </p>\n<p>Now my only problem is that (e.g.) <code>Reaction</code> takes an instance of <code>Mutation</code> in its constructor, but also should impose constraints on this instance.</p>",
        "id": 248811769,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628492057
    },
    {
        "content": "<p>In a more MWE-syle this would be (basically):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.rec</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">D</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248811832,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628492157
    },
    {
        "content": "<p>I think I might be able to work around this though by ignoring all of these kinds of constraints at first and then defining a type (e.g.)  <code>ProperReactor</code> which imposes all of these constraints on its contained instances (if that makes sense).</p>",
        "id": 248811984,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628492319
    },
    {
        "content": "<p>what kind of constraints?</p>",
        "id": 248812101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628492417
    },
    {
        "content": "<p>The general case of this is called an inductive-recursive type, where the constraint is a recursive function defined on the other inductive</p>",
        "id": 248812134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628492447
    },
    {
        "content": "<p>but if it's a simple function you might be able to write it another way</p>",
        "id": 248812151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628492468
    },
    {
        "content": "<p>the examples where you say that it has to be just one variant can be rephrased so that you just take the arguments to that variant instead of the inductive argument itself</p>",
        "id": 248812178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628492506
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">D</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248812246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628492560
    },
    {
        "content": "<p>if it can be multiple variants, you can still do it with a <code>ProperA</code> type expressing the conjunction of <code>A</code> and the constraints</p>",
        "id": 248812294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628492628
    },
    {
        "content": "<p>Ok the strategy for this simple example definitely makes sense. I'll try to come up with an MWE that's a bit closer to my real-world use case.</p>",
        "id": 248812470,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628492770
    },
    {
        "content": "<p>Ok, probably not a <em>working</em> example, but I hope it's sufficient.</p>\n<p><code>Mutation</code> defines a function <code>body</code> that produces a <code>MutationOutput</code>.<br>\nThe output of this function should be constrained (<code>outPrtValsDepOnly</code>) depending the mutation's own <code>deps</code>.<br>\nNote, for simplicity in this example, I've expressed <code>outPrtValsDepOnly </code> as if <code>MutationOutput</code> were a simple structure - i.e. I haven't used <code>(body i s).rec ...</code> and just wrote the <code>(body i s).prtVals</code> directly.</p>\n<p>Now a <code>Reaction</code> should extend a <code>Mutation</code> by further constraining the output of its <code>body</code> (via <code>noNewCns</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MutationOutput</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n    <span class=\"o\">(</span><span class=\"n\">prtVals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">newCns</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">newRcns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Reaction</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Mutation</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n    <span class=\"o\">(</span><span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MutationOutput</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">outPrtValsDepOnly</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">∉</span> <span class=\"n\">deps</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prtVals.nth</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Reaction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n    <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"o\">:</span> <span class=\"n\">Mutation</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">noNewCns</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">core.body</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">newCns</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248813293,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628493611
    },
    {
        "content": "<p>So basically these types should all feel like structures. But their mutual inductive nature makes it not so.</p>",
        "id": 248813590,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628493904
    },
    {
        "content": "<p>you forgot to define or import <code>∉</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">notin</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"∉\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">notin</span>\n</code></pre></div>",
        "id": 248813987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628494272
    },
    {
        "content": "<p>Oh it could just as well be <code>∈</code> here - I've totally butchered the original definition anyway ^^</p>",
        "id": 248814072,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628494339
    },
    {
        "content": "<p>Here's a reduction to eliminate the extra hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MutationOutput</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">deps</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">prtVals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">newCns</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">newRcns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Reaction</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">outPrtValsDepOnly</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">∉</span> <span class=\"n\">deps</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">prtVals.nth</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">noNewCns</span>  <span class=\"o\">:</span> <span class=\"n\">newCns</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n    <span class=\"o\">:</span> <span class=\"n\">MutationOutput</span> <span class=\"n\">deps</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Mutation</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n    <span class=\"o\">(</span><span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MutationOutput</span> <span class=\"n\">deps</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Reaction</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"o\">:</span> <span class=\"n\">Mutation</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248814523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628494826
    },
    {
        "content": "<p>but I think you might want to consider another approach here, which applies the well formedness conditions outside the types</p>",
        "id": 248814562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628494882
    },
    {
        "content": "<p>Yeah, that's what I was guessing.</p>",
        "id": 248816824,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628496855
    },
    {
        "content": "<p>Thanks for your help!</p>",
        "id": 248816835,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628496865
    },
    {
        "content": "<p>I'm still having problems with these damned mutual inductives <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span><br>\nIn the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">List.isSetoid</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">List.isSetoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Mutation</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Reactor</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Mutation</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">_nested.Finmap_1.mk'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>If I define <code>Multiset</code> using a <code>sorry</code> instead of <code>Quotient</code>, the problem disappears.<br>\nDoes this mean that Lean can't handle the nested inductive in <code>Reactor.mk</code> because <code>Multiset</code> is a quotient type?</p>",
        "id": 248951256,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628583067
    },
    {
        "content": "<p>did you make the <code>List.isSetoid</code> instance or is that still a <code>sorry</code>? That may cause issues</p>",
        "id": 248951475,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628583270
    },
    {
        "content": "<p>That's still a sorry.</p>",
        "id": 248951499,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628583291
    },
    {
        "content": "<p>A fully sorry-free version has the issue too though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List.perm</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>   <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">swap</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.perm</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.perm.refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">perm.nil</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">perm.refl</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.perm.symm</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">~</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">swap</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">swap</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">p₂</span> <span class=\"n\">p₁</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.perm.eqv</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">perm.refl</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">perm.symm</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">perm.trans</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">List.isSetoid</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Setoid.mk</span> <span class=\"n\">_</span> <span class=\"n\">perm.eqv</span>\n</code></pre></div>",
        "id": 248951674,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628583432
    },
    {
        "content": "<p>so I tried doing this defn in lean3, and it even though it has the same code for dealing with positivity issues, it actually complains about universes instead -- maybe that's the real issue that's getting obfuscated?</p>",
        "id": 248952839,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628584254
    },
    {
        "content": "<p>What do you mean by \"positivity issues\"?</p>",
        "id": 248953260,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628584563
    },
    {
        "content": "<p>the error comes from <a href=\"https://github.com/leanprover/lean4/blob/e20a07bd6dd030cd94d42c240dd97310fa409c4f/src/kernel/inductive.cpp#L341\">this line</a>, which tries to check that all terms in an inductive type's constructor are \"positive\"</p>",
        "id": 248953640,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628584819
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> covers this somewhere very briefly and links to a specific paper about it (e: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=positivity\">here</a>)</p>",
        "id": 248953660,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1628584836
    },
    {
        "content": "<p>Lean implements nested inductive types by translating them to mutually inductive types, but <code>Quotient</code> is not an inductive type, so this translation is not possible</p>",
        "id": 248953901,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628585019
    },
    {
        "content": "<p>Basically, all types involved in the recursion must either be unfoldable or appropriate inductive types, but <code>Quot</code> is a <code>constant</code></p>",
        "id": 248954003,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628585104
    },
    {
        "content": "<p>Oh no, I'll have to do some trickery then. <br>\nThanks y'all for the help!</p>",
        "id": 248958560,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1628588659
    }
]