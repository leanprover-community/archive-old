[
    {
        "content": "<p>I've had some issues with instances not being synthesized on a recent project and don't really understand if it's from a lack of understanding on my end or because of a bug. I've come up with the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SubType</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">e_stable</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AddGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SubGroup</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sg</span> <span class=\"o\">:</span> <span class=\"n\">SubGroup</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">SubType</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">sg.zero_mem</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sg</span> <span class=\"o\">:</span> <span class=\"n\">SubGroup</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">SubType</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"c1\">--failed to synthesize instance</span>\n<span class=\"c1\">--  OfNat (SubType S) 0</span>\n</code></pre></div>\n<p>This happens on the most recent nightly. Any help in understanding this issue would be greatly appreciated.</p>",
        "id": 281597575,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1652014083
    },
    {
        "content": "<p>You need to use <code>nat_lit</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sg</span> <span class=\"o\">:</span> <span class=\"n\">SubGroup</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">SubType</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">sg.zero_mem</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 281597967,
        "sender_full_name": "Chris B",
        "timestamp": 1652014736
    },
    {
        "content": "<p>It works, thanks a lot. what does <code>nat_lit</code> do exactly ?</p>",
        "id": 281598106,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1652014908
    },
    {
        "content": "<p>It's a macro to get you a \"raw\" natural number. You can read a little bit about it here: <a href=\"https://leanprover.github.io/lean4/doc/typeclass.html?highlight=nat_lit#numerals\">https://leanprover.github.io/lean4/doc/typeclass.html?highlight=nat_lit#numerals</a></p>",
        "id": 281598168,
        "sender_full_name": "Chris B",
        "timestamp": 1652015030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> has marked this topic as resolved.</p>",
        "id": 281598674,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652015777
    }
]