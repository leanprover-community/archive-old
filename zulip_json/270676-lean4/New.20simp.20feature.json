[
    {
        "content": "<p>I've just stumbled upon a new simp feature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">42</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Interestingly, <code>42 &lt; 10^1000</code> is no longer provable by simp.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Simp now tries to simplify every closed subterm <code>p : Prop</code> by synthesizing an instance <code>Decidable p</code> and <em>reducing</em> the decidable instance.  There seems to be some timeout built in because it only works up to some small size, but <code>grep Heartbeat</code> doesn't turn up anything relevant.</p>\n</div></div>",
        "id": 262068161,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637329853
    },
    {
        "content": "<p>I hope this is something we can disable with a simp configuration option? It looks useful for many small things though.</p>",
        "id": 262460931,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637676995
    },
    {
        "content": "<p>It can be disabled with <code>decide := ff</code>.  I agree, this feature seems useful mostly for small demos (e.g. being able to simplify <code>10 &lt; 42</code> out of the box) but I'm afraid it will cause real performance issues.  For example, when it sees <code>isTaut (pigeonholePrinciple 7 6)</code> or unfolds noncomputable functions.</p>",
        "id": 262462559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637677749
    },
    {
        "content": "<p>On the other hand it won't do anything about <code>x &lt; 10 * 42</code> which should be simplified to <code>x &lt; 420</code> (the often requested integration of normNum into simp).</p>",
        "id": 262462797,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637677848
    },
    {
        "content": "<blockquote>\n<p>Interestingly, 42 &lt; 10^1000 is no longer provable by simp.</p>\n</blockquote>\n<p>We have a <code>checkMaxHeartbeats</code> and <code>withIncRecDepth</code> at <code>whnfImp</code>.<br>\nIt fails because the maximum recursion depth has been reached. </p>\n<p>We will eventually have better support for arithmetic that simplifies this kind of proposition without relying on <code>whnf</code>. </p>\n<blockquote>\n<p>I'm afraid it will cause real performance issues. For example, when it sees isTaut (pigeonholePrinciple 7 6) or unfolds noncomputable functions.</p>\n</blockquote>\n<p>If there are serious performance problems in practice, we can set the default to <code>decide := false</code>.<br>\nSome random thoughts:</p>\n<ul>\n<li>I think the feature is useful and it is handy because it works for any decidable proposition. </li>\n<li>It is not clear to me how often we will hit examples such as <code>isTaut (pigeonholePrinciple 7 6)</code>. I am assuming new users will not, and advanced users may set <code>decide := false</code>. Not sure.</li>\n<li>Regarding non-computable functions, we can block them from being unfolded when we execute <code>whnf</code> at <code>decide</code>.</li>\n<li>We can also dramatically reduce the maximum number of heartbeats for this <code>whnf</code>, and produce a nice trace message when it is reached. </li>\n<li>We can also report whether a lot of time is spent in these <code>whnf</code> calls, and suggest <code>decide := false</code> to users.</li>\n</ul>",
        "id": 262476502,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1637683748
    },
    {
        "content": "<blockquote>\n<p>It fails because the maximum recursion depth has been reached.</p>\n</blockquote>\n<p>Ah that's what's happening!  I blindly assumed that we had special support for <code>Nat.pow</code> (like we have for +/-/*///%/...).</p>\n<blockquote>\n<p>We will eventually have better support for arithmetic that simplifies this kind of proposition without relying on whnf.</p>\n</blockquote>\n<p>This is a good plan.  Users are often asking for this feature; in mathlib we have a norm_num tactic which essentially does <code>simp; evaluate_arithmetic_expressions</code> and it's used <em>heavily</em>.</p>",
        "id": 262499022,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637694096
    }
]