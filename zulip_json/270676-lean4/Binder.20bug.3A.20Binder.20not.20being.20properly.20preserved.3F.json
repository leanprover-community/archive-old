[
    {
        "content": "<p>So here is some weird behavior (maybe a bug) that I discovered:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Funtype</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pack</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">N</span>\n  <span class=\"n\">unpack</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">O</span>\n  <span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LNot</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LNot</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">applyFun</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">LNot</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">K.toFun</span> <span class=\"n\">p</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">unpackFun</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">LNot</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">K.toFun</span>\n<span class=\"kd\">instance</span> <span class=\"n\">isFuntype</span> <span class=\"o\">:</span> <span class=\"n\">Funtype</span> <span class=\"o\">(</span><span class=\"n\">LNot</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">({</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">pack</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span><span class=\"o\">,</span> <span class=\"n\">unpack</span> <span class=\"o\">:=</span> <span class=\"n\">unpackFun</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"o\">:=</span> <span class=\"n\">applyFun</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">LNot</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">LNot.isFuntype</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  def LNot.isFuntype.{u} : {P : Sort u} → {L : P → Prop} → Funtype (LNot L) (∀ (p : P), ¬L p) (∀ {p : P}, ¬L p) :=</span>\n<span class=\"cm\">  { pack := LNot.mk, unpack := LNot.unpackFun, apply := LNot.applyFun }</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">LNot.unpackFun</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  LNot.unpackFun : LNot ?m.253 → ∀ (p : ?m.252), ¬?m.253 p</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">LNot.isFuntype.unpack</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Funtype.unpack : LNot ?m.259 → ∀ {p : ?m.258}, ¬?m.259 p</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Why is the binder for <code>p</code> in <code>unpackFun</code> magically becoming implicit? (I also have seen the inverse happen: where an implicit binder becomes explicit).</p>",
        "id": 237084963,
        "sender_full_name": "Mac",
        "timestamp": 1619990076
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"c1\">-- (foo Bool).f : Unit → {p : Bool} → Nat</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"c1\">-- (bar Bool).f : Unit → Bool → Nat</span>\n</code></pre></div>",
        "id": 237086810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619991031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks!</p>",
        "id": 237093063,
        "sender_full_name": "Mac",
        "timestamp": 1619996995
    },
    {
        "content": "<p>It probably is a bug then, isn't it?</p>",
        "id": 237093127,
        "sender_full_name": "Mac",
        "timestamp": 1619997021
    },
    {
        "content": "<p>yeah, the foo version is definitely wrong. It appears that it is using <code>B</code> if it is defeq to <code>A</code> and <code>A</code> otherwise (when it should be using <code>A</code> always)</p>",
        "id": 237093167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619997063
    },
    {
        "content": "<p>So an hour ago <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> apparently pushed a fixed to this issue in <a href=\"https://github.com/leanprover/lean4/commit/0f8c6ca797c486a4efca1daf8bf5989c815ce71c#diff-87af1f1a0766626e420bdc42623b3630a75ac02e786cc9faec2a0127d45633ad\">https://github.com/leanprover/lean4/commit/0f8c6ca797c486a4efca1daf8bf5989c815ce71c#diff-87af1f1a0766626e420bdc42623b3630a75ac02e786cc9faec2a0127d45633ad</a>. However, the bug is now inverted (going off the original example above):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">LNot.unpackFun</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  LNot.unpackFun : LNot ?m.253 → ∀ (p : ?m.252), ¬?m.253 p</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- Now works as expected</span>\n<span class=\"k\">#check</span> <span class=\"n\">LNot.isFuntype.unpack</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  LNot.unpackFun : LNot ?m.253 → ∀ (p : ?m.252), ¬?m.253 p</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">LNot.applyFun</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  LNot.applyFun : LNot ?m.276 → ∀ {p : ?m.275}, ¬?m.276 p</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- Now does not</span>\n<span class=\"k\">#check</span> <span class=\"n\">LNot.isFuntype.apply</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Funtype.apply : LNot ?m.282 → ∀ (p : ?m.281), ¬?m.282 p</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 237101081,
        "sender_full_name": "Mac",
        "timestamp": 1620005410
    },
    {
        "content": "<p>Note that this new issue does not carry over to the previous minimized example <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> posted.</p>",
        "id": 237101121,
        "sender_full_name": "Mac",
        "timestamp": 1620005465
    },
    {
        "content": "<p>FYI, while this bug has been fixed in my minified examples, there is still occurrences of it in larger project I extracted them from. I will work on trying to derive some new minified examples to highlight them.</p>",
        "id": 237259530,
        "sender_full_name": "Mac",
        "timestamp": 1620095245
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">class</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B.fn</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B.fn</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  def foo.{u, u_1} : {P : Sort u} → Bar P → Type :=</span>\n<span class=\"cm\">  fun {P : Sort u} (B : Bar P) =&gt; Foo ((p : P) → Bar.fn p) ((p : P) → Bar.fn p)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The implicit binder is once again lost.</p>",
        "id": 237260678,
        "sender_full_name": "Mac",
        "timestamp": 1620096250
    },
    {
        "content": "<p>@Mac Could please use GitHub issues to report bugs from now on? I do not follow this channel very closely.</p>",
        "id": 237260964,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1620096510
    },
    {
        "content": "<p>Sure! My original reason for posting here was that I was not initially sure this was bug and then since the thread started here, I thought this was the best place for further developments. In the future, I'll use GitHub issues. Though, should one still create an issue even if its only maybe a bug (or should one first ask around here)?</p>",
        "id": 237261282,
        "sender_full_name": "Mac",
        "timestamp": 1620096866
    },
    {
        "content": "<p>Sure, if you are unsure whether it is a bug or not, then discussing it here before creating the issue will help us.</p>",
        "id": 237262191,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1620097789
    }
]