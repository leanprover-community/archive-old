[
    {
        "content": "<p>I have this example here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exams</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>It gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">360</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'X'</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">360</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n</code></pre></div>",
        "id": 318116512,
        "sender_full_name": "Dean Young",
        "timestamp": 1672155102
    },
    {
        "content": "<p>Because you are using the sigma type via its identifier instead of its notation. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exams</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 318116791,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672155215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier/near/318116791\">said</a>:</p>\n<blockquote>\n<p>Because you are using the sigma type via its identifier instead of its notation. </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exams</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"kt\">Type</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is there an ascii alternative?</p>",
        "id": 318117345,
        "sender_full_name": "Dean Young",
        "timestamp": 1672155445
    },
    {
        "content": "<p>Oh wait it's Sigma fun</p>",
        "id": 318117474,
        "sender_full_name": "Dean Young",
        "timestamp": 1672155494
    },
    {
        "content": "<p><code>Sigma fun X =&gt; Sigma fun y =&gt; Type</code></p>",
        "id": 318117609,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672155552
    },
    {
        "content": "<p>But I'd say if you are using Lean you won't be able to avoid unicode forever so you might as well embrace it :P</p>",
        "id": 318117728,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672155601
    },
    {
        "content": "<p>Hmm... thanks for the help and maybe so...</p>\n<p>Oh and maybe you know how to get Type n as a function of n : Nat?</p>",
        "id": 318120510,
        "sender_full_name": "Dean Young",
        "timestamp": 1672156803
    },
    {
        "content": "<p>You can't do that because the <code>n</code> in <code>Type n</code> isn't a nat, it just looks like a nat.</p>",
        "id": 318121103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672157002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier/near/318121103\">said</a>:</p>\n<blockquote>\n<p>You can't do that because the <code>n</code> in <code>Type n</code> isn't a nat, it just looks like a nat.</p>\n</blockquote>\n<p>What about a predicate like \"small\" or \"contained in Type n\"</p>",
        "id": 318125232,
        "sender_full_name": "Dean Young",
        "timestamp": 1672158621
    },
    {
        "content": "<p>You can say that there <code>Exists</code> an <code>Equiv</code> to a <code>Type n</code> -- even with only ASCII</p>",
        "id": 318125400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672158720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier/near/318117728\">said</a>:</p>\n<blockquote>\n<p>But I'd say if you are using Lean you won't be able to avoid unicode forever so you might as well embrace it :P</p>\n</blockquote>\n<p>Yeah but you will have a lot more <code>fun</code> without unicode!</p>",
        "id": 318125740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672158835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier/near/318125740\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier/near/318117728\">said</a>:</p>\n<blockquote>\n<p>But I'd say if you are using Lean you won't be able to avoid unicode forever so you might as well embrace it :P</p>\n</blockquote>\n<p>Yeah but you will have a lot more <code>fun</code> without unicode!</p>\n</blockquote>\n<p>Well, there was at least a point to it. I made this thing I call Mathematex, which is ultimately going to pack a bunch of things into a Latex package, maybe which calls my server of <a href=\"http://linearlibrary.org\">linearlibrary.org</a> to perform the computing. Latex only works for ASCII as far as I can tell.</p>",
        "id": 318134543,
        "sender_full_name": "Dean Young",
        "timestamp": 1672162773
    }
]