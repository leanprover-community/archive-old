[
    {
        "content": "<p>Here's a benchmarking command for <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">timeCmd</span><span class=\"o\">)</span>  <span class=\"s2\">\"#time \"</span> <span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[commandElab timeCmd]</span> <span class=\"kd\">def</span> <span class=\"n\">elabTimeCmd</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">time</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n    <span class=\"n\">elabCommand</span> <span class=\"n\">stx</span>\n    <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"time: {(← IO.monoMsNow) - start}ms\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">500</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">500</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 249677507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629174514
    },
    {
        "content": "<p>Here's a variation using <code>timeit</code>, which I don't like as much because it puts the output in the \"output\" panel that is usually reserved for fatal errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean.Elab.Command.CommandElabM.timeit</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">IO.toEIO</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Exception.error</span> <span class=\"n\">ctx.ref</span> <span class=\"n\">ex.toString</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n      <span class=\"n\">_root_.timeit</span> <span class=\"n\">msg</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ctx</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toIO'</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">@[commandElab timeCmd]</span> <span class=\"kd\">def</span> <span class=\"n\">elabTimeCmd</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">elabCommand</span> <span class=\"n\">stx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">timeit</span> <span class=\"s2\">\"time\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 249677597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629174640
    },
    {
        "content": "<p>Should I be terrified that <code>(List.range n).length = n</code> seems to be cubic in <code>n</code>? :-)</p>",
        "id": 249677740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629174871
    },
    {
        "content": "<p>Could you explain to me why you chose the name <code>elabCmdStx</code>?</p>",
        "id": 249677841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629175010
    },
    {
        "content": "<p>copypasta</p>",
        "id": 249678248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629175596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/benchmarking.20commands/near/249677740\">said</a>:</p>\n<blockquote>\n<p>Should I be terrified that <code>(List.range n).length = n</code> seems to be cubic in <code>n</code>? :-)</p>\n</blockquote>\n<p>I suspect this probably has to do with memory concerns (like locality of reference and allocations/deallocations) in iterating through the list. For <code>n &lt; 100</code>, the example takes about <code>n</code> milliseconds. It is only past that that things start to get unwieldy.</p>",
        "id": 249681006,
        "sender_full_name": "Mac",
        "timestamp": 1629179388
    },
    {
        "content": "<p>For example, I believe List objects are 24 bytes (3 <code>lean_object</code>s -- each 8 bytes long). So 100 of them is already 2.4KB.</p>",
        "id": 249681161,
        "sender_full_name": "Mac",
        "timestamp": 1629179578
    },
    {
        "content": "<p>Though, I guess since proofs are interpreted, the List would be in terms of <code>Expr</code> instead? (And that would take up even more memory.)</p>",
        "id": 249681269,
        "sender_full_name": "Mac",
        "timestamp": 1629179693
    }
]