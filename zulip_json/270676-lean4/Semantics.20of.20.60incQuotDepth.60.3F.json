[
    {
        "content": "<p>Consider two syntax categories <code>inner</code> and <code>outer</code>, where <code>syntax \"&lt;[\" inner \"]&gt;\" : outer</code>, and <code>inner</code> supports antiquotations. Is it intended that for <code>outer</code> to allow <code>inner</code> to use antiquotations, <code>outer</code> must also be declared with <code>incQuotDepth</code>? </p>\n<p>Perhaps code is easier to follow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">inner</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">outer</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;[\"</span> <span class=\"n\">inner</span> <span class=\"s2\">\"]&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">outer</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[inner|\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">inner</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">inner</span><span class=\"bp\">|</span> <span class=\"bp\">$$</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[outer|\"</span> <span class=\"n\">outer</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">outer</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">inner</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">inner</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">])</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[outerIncQuotDepth|\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">outer</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">outerIncQuotDepth</span><span class=\"bp\">|</span>  <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">inner</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">inner</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">])</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"s2\">\"global string\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">innerQuot</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">inner</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">outerIncQuotDepth</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">outerIncQuotDepth</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">]</span>\n<span class=\"c1\">-- I would expect `outerDoesNotWork` to work, because the quoting comes from inner, not outer!</span>\n<span class=\"c1\">-- error: expected inner</span>\n<span class=\"kd\">def</span> <span class=\"n\">outerDoesNotWork</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">outer</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>I'd like to understand if the fact that <code>[outerIncQuotDepth|...]</code> works, while <code>[outer|...]</code> does not  intended behaviour. I find this somewhat counter-intuitive, since in my view, the anti-quoting of <code>inner</code> should be modular, and <code>[outer|...]</code> should not need to <code>incQuotDepth</code> to allow <code>inner</code> to perform antiquotation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">╰─$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version                                                                                                                  1 ↵</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">30</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">c9926b3a8b64</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277270422,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1648728582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Semantics.20of.20.60incQuotDepth.60.3F/near/277270422\">said</a>:</p>\n<blockquote>\n<p>and <code>inner</code> supports antiquotations</p>\n</blockquote>\n<p>No, only one of your <code>inner</code>-embedding parsers supports antiquotations. If you do it consistently for all embeddings, it should work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;[\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">inner</span><span class=\"o\">)</span> <span class=\"s2\">\"]&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">outer</span>\n</code></pre></div>",
        "id": 277273808,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648730411
    },
    {
        "content": "<p>That's the part I find confusing about the semantics. It seems to me that my declaration of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[inner|\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">inner</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">inner</span><span class=\"bp\">|</span> <span class=\"bp\">$$</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>has created support for anti-quotation in <strong>any</strong> <code>inner</code> context. </p>\n<p>However, for the antiquation of <code>inner</code> to work when nested, the <code>outer</code> context is obliged to declare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[outerIncQuotDepth|\"</span> <span class=\"n\">incQuotDepth</span><span class=\"o\">(</span><span class=\"n\">outer</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>which feels non-compositional to me --- the outer context (in my view) should not care if the inner context needs anti-quotation or not. Which is why I expected <em>both</em> declarations, <code>[outer|...]</code> and <code>[outerIncQuotDepth|...]</code> to work, and was surprised when only <code>[outerIncQuotDepth|...]</code> worked.</p>",
        "id": 277295341,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1648739162
    },
    {
        "content": "<p>Well, I suppose we can agree that the semantics can be confusing. This should fix them: <a href=\"https://github.com/leanprover/lean4/pull/1089\">https://github.com/leanprover/lean4/pull/1089</a></p>",
        "id": 277305321,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648743190
    }
]