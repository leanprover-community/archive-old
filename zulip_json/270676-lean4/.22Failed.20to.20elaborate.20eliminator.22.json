[
    {
        "content": "<p>I'm a bit confused by the difference between these expressions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">default</span>\n<span class=\"c1\">-- default : ?m.2</span>\n<span class=\"k\">#check</span> <span class=\"n\">Nat.rec</span>\n<span class=\"c1\">-- failed to elaborate eliminator, expected type is not available</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Nat.rec</span>\n<span class=\"c1\">-- @Nat.rec : {motive : Nat → Sort u_1} →</span>\n<span class=\"c1\">--  motive Nat.zero → ((n : Nat) → motive n → motive (Nat.succ n)) → (t : Nat) → motive t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">myRec</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n  <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Nat.rec</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">myRec</span>\n<span class=\"c1\">-- myRec : ?m.320 Nat.zero → ((n : Nat) → ?m.320 n → ?m.320 (Nat.succ n)) → (n : Nat) → ?m.320 n</span>\n</code></pre></div>\n<p>I had assumed that <code>rec</code> was like an opaque constant with its certain type, but it seems to behave differently from other constants with similar/the same type. Why can I observe this difference?</p>",
        "id": 297811146,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1662652110
    },
    {
        "content": "<p>We use a different elaboration strategy for recursors. This is a relatively new feature based on community requests. <br>\nIf you mark <code>myRec</code> with the attribute <code>[elabAsElim]</code>, then you will get the same behavior you observe at <code>Nat.rec</code>.<br>\nThis option was called <code>elab_as_eliminator</code> in Lean 3. The elaborator uses a heuristic to compute the motive for the recursor/eliminator.</p>",
        "id": 297835664,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1662659695
    },
    {
        "content": "<p>Ahhh, that's really cool -- is it the same heuristics as are used when doing <code>induction ... using ...</code>?</p>",
        "id": 297841263,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1662661529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.22Failed.20to.20elaborate.20eliminator.22/near/297841263\">said</a>:</p>\n<blockquote>\n<p>Ahhh, that's really cool -- is it the same heuristics as are used when doing <code>induction ... using ...</code>?</p>\n</blockquote>\n<p>Yes, the heuristic is very similar and uses the same building block: the <code>kabstract</code> function.</p>",
        "id": 297843582,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1662662310
    }
]