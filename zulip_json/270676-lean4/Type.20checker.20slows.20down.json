[
    {
        "content": "<p>I am having a weird behavior with Lean 4 in VSCode.  As I am writing more theorems, the type checking becomes extremely slow (i.e. the Lean InfoView takes 5-10  seconds to update).   I actually have narrowed it down to a specific point in the file where I can edit one theorem and the tactic state updates immediately, but when I update the next theorem, it takes many seconds to respond.  Nothing to me stands out about either of these theorems that would make them unusual or slow to check.</p>\n<p>Here is the first theorem (<a href=\"https://github.com/jeremysalwen/advent_of_lean_2022/blob/master/one.lean#L232-L237\">github link in context</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">List.getD_singleton</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">List.getD</span> <span class=\"o\">[</span><span class=\"n\">elem</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"n\">elem</span> <span class=\"bp\">=</span> <span class=\"n\">elem</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getD</span> <span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">Option.getD</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cons.injEq</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">forall_apply_eq_imp_iff'</span><span class=\"o\">,</span> <span class=\"n\">forall_eq'</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And  here is the next theorem, where the lean infoview suddenly becomes slow to update (<a href=\"https://github.com/jeremysalwen/advent_of_lean_2022/blob/master/one.lean#L239-L268\">github link in context</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.toDigitsCore_shift'</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">&gt;</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse.getD</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"sc\">'0'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse.getD</span> <span class=\"n\">i</span> <span class=\"sc\">'0'</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"c1\">-- editing here is extremely slow.</span>\n</code></pre></div>",
        "id": 319296256,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672787510
    },
    {
        "content": "<p>I have experimented a bit more, it seems to be \"conv\" that is causing the extreme slowdown?</p>",
        "id": 319470439,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672865308
    },
    {
        "content": "<p>Here is an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.toDigitsCore_slow</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">&gt;</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse.getD</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"sc\">'0'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse.getD</span> <span class=\"n\">i</span> <span class=\"sc\">'0'</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">toDigits</span> <span class=\"n\">toDigitsCore</span>\n  <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.toDigitsCore_fast</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">&gt;</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse.getD</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"sc\">'0'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse.getD</span> <span class=\"n\">i</span> <span class=\"sc\">'0'</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toDigits</span><span class=\"o\">,</span> <span class=\"n\">toDigitsCore</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Checking the \"conv\" version is extremely slow, using \"rw\" is instant.</p>",
        "id": 319471222,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1672865637
    }
]