[
    {
        "content": "<p>I have my own natural numbers <code>MyNat</code> (with addition) and have created an instance of <code>LE MyNat</code> and instances <code>Trans le le le</code> and <code>Trans le (· = ·) le</code>. But the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_le_add</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">le_add</span> <span class=\"n\">p</span>\n    <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">comm_add</span>\n    <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">le_add</span> <span class=\"n\">q</span>\n    <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">comm_add</span>\n</code></pre></div>\n<p>produces the error message \"invalid 'calc' step, failed to synthesize <code>Trans</code> instance  Trans LE.le LE.le ?m.551\" at the line <code>m + l ≤ n + l := le_add q</code>. The code works if I replace <code>≤</code> with <code>MyNat.le</code> in the calculation steps. How can I fix this so that I don't have to write <code>MyNat.le</code> but can use <code>≤</code>?</p>",
        "id": 320685722,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673438722
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please?</p>",
        "id": 320686323,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673438889
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n<span class=\"kn\">open</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero_left</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_succ_left</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">comm_add</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_zero_left</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_succ_left</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero_le</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">zero</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ_le</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trans_le</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">l</span> <span class=\"n\">m</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">constructor</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ihk</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">l</span>\n    <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intros</span>\n      <span class=\"n\">contradiction</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">p</span>\n      <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">succ_le</span> <span class=\"n\">p'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">intro</span> <span class=\"n\">_</span>\n          <span class=\"n\">contradiction</span>\n        <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">intro</span> <span class=\"n\">q</span>\n          <span class=\"n\">cases</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">succ_le</span> <span class=\"n\">q'</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">apply</span> <span class=\"n\">le.succ_le</span>\n            <span class=\"n\">apply</span> <span class=\"n\">ihk</span>\n            <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">p'</span>\n            <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">q'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">MyNat.le</span> <span class=\"n\">MyNat.le</span> <span class=\"n\">MyNat.le</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">trans_le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">trans_le_eq</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">le</span> <span class=\"n\">Eq</span> <span class=\"n\">le</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">trans_le_eq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_add</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">k</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le.succ_le</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n    <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_le_add</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"c1\">-- MyNat.le (k + m) (l + m) := le_add p  --(this works)</span>\n    <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">le_add</span> <span class=\"n\">p</span>\n    <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">comm_add</span>\n    <span class=\"c1\">-- MyNat.le (m + l) (n + l) := le_add q  --(this works)</span>\n    <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">le_add</span> <span class=\"n\">q</span> <span class=\"c1\">-- error message here</span>\n    <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">comm_add</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MyNat</span>\n</code></pre></div>",
        "id": 320689271,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673439801
    },
    {
        "content": "<p>I don't think you're supposed to repeat the terms, from the second line you should start with <code>_ = </code></p>",
        "id": 320690268,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673440111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/failed.20to.20synthesize.20Trans.20instance/near/320690268\">said</a>:</p>\n<blockquote>\n<p>I don't think you're supposed to repeat the terms, from the second line you should start with <code>_ = </code></p>\n</blockquote>\n<p>Still the same error message <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 320690619,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673440213
    },
    {
        "content": "<p>It works with your <code>Trans</code> instance parametrised by <code>LE.le : MyNat → MyNat → Prop</code> instead of <code>MyNat.le</code>.</p>",
        "id": 320697915,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1673442418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/270676-lean4/topic/failed.20to.20synthesize.20Trans.20instance/near/320697915\">said</a>:</p>\n<blockquote>\n<p>It works with your <code>Trans</code> instance parametrised by <code>LE.le : MyNat → MyNat → Prop</code> instead of <code>MyNat.le</code>.</p>\n</blockquote>\n<p>Yes, that works! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 320699861,
        "sender_full_name": "Elisabeth Bonnevier",
        "timestamp": 1673443000
    }
]