[
    {
        "content": "<p>Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>After <code>intro h</code>, I have <code>h : A ⊆ B</code> in the tactic state.  But now suppose I change the example to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I get an error message: <code>type mismatch h has type A ⊆ B : Prop but is expected to have type ?m.49 ∈ A → ?m.49 ∈ B : Prop</code>.  Why?  Shouldn't this work?</p>",
        "id": 305150215,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666272634
    },
    {
        "content": "<p>The definition of <code>Set.subset</code>  is <br>\n<code>∀ {a}, a ∈ s₁ → a ∈ s₂</code><br>\nand so it seems like Lean interprets <code>h</code> as <code>@h _</code>.<br>\nThis looks like a bug in <code>intro</code> (since <code>h</code> should not be applied to implicit arguments).</p>",
        "id": 305157886,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666274932
    },
    {
        "content": "<p>That's what I thought.  Any idea how to fix it?</p>",
        "id": 305162877,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666276326
    },
    {
        "content": "<p>If you don't specify the type, it will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 305175647,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666279709
    },
    {
        "content": "<p>Opened a (minimized) issue as <a href=\"https://github.com/leanprover/lean4/pull/1759\">leanprover/lean4#1759</a></p>",
        "id": 305177912,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666280254
    },
    {
        "content": "<p>Yes, I know.  But I'm supposed to be able to specify the type, right?</p>\n<p>I am trying to implement an <code>assume</code> tactic, for use by students.  My tactic is essentially just a wrapper around <code>intro</code>.  I want to encourage students to say explicitly what statement is being assumed, so that Lean can correct them if they are assuming the wrong thing.  So I need to be able to pass the type to <code>intro</code> and have it make sure it's the right type.  So this bug, if it is a bug, is a problem for me.</p>",
        "id": 305177952,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666280264
    },
    {
        "content": "<p>Pushed a fix for the issue above.</p>",
        "id": 305183945,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1666282020
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 305187104,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666282959
    }
]