[
    {
        "content": "<p>Hi! I'm trying to define a typeclass instance where one of the arguments should be resolved by tactic during synthesis. After some help from others on the new members stream, we have the following minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo_insts</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo_insts</span> <span class=\"mi\">1</span> <span class=\"c1\">-- ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo.x</span> <span class=\"mi\">1</span> <span class=\"c1\">-- failed to synthesize instance</span>\n</code></pre></div>\n<p>Is this code supposed to work in Lean 4? If not, is there a workaround to allow the synthesis of instance arguments through tactics? Thanks in advance!</p>",
        "id": 301662262,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1664548670
    },
    {
        "content": "<p>For context, an application is using <code>simp</code> to automatically satisfy a subtype property:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">isPos</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">//</span> <span class=\"n\">isPos</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">posOfNat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">isPos</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">pos</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">posOfNat</span> <span class=\"mi\">1</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- failed to synthesize instance OfNat pos 1</span>\n</code></pre></div>",
        "id": 301664250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664549165
    },
    {
        "content": "<p>The issue is not with proofs per se here but due to default arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">Foo.x</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize instance</span>\n</code></pre></div>\n<p>also fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">instFoo</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instFoo</span> <span class=\"n\">to</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"bp\">≟</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">skip</span> <span class=\"n\">answer</span> <span class=\"n\">containing</span> <span class=\"n\">metavariables</span> <span class=\"n\">instFoo</span> <span class=\"bp\">?</span><span class=\"n\">m.53</span>\n</code></pre></div>\n<p>so it seems that if we want to support this we need general support for default arguments in type class synthesis</p>",
        "id": 301677060,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664552559
    },
    {
        "content": "<p>Somewhat unrelated, is there any documentation on what exactly <code>abbrev</code> can do?  I've seen it in simple type assignments but here it's used as an abbreviation of a function.  <br>\nWhat's the difference between it and an inline function?<br>\nIs it just a macro that expands to the exact expression on the left?  I can't do \"go to definition\" on it in VSCode.</p>",
        "id": 301854019,
        "sender_full_name": "Tom",
        "timestamp": 1664649098
    },
    {
        "content": "<p><code>abbrev</code> is essentially equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">==</span>\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>which is relevant for instance search because it will look through reducible definitions so what we for example often do in the compiler and elaborator is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">MyMonadM</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Context</span> <span class=\"n\">StateReftT</span> <span class=\"n\">State</span> <span class=\"n\">BaseMonadM</span>\n</code></pre></div>\n<p>and since we are using <code>abbrev</code> here instance search automagically finds the monad instance.</p>",
        "id": 301855140,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664649832
    },
    {
        "content": "<p>And what are the exact remantics of reducible?  I’ve not found that in the docs either.</p>",
        "id": 301861868,
        "sender_full_name": "Tom",
        "timestamp": 1664654742
    },
    {
        "content": "<p>I believe it mainly determines which definitions get unfolded during typeclass resolution</p>",
        "id": 301861955,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664654782
    },
    {
        "content": "<p>In theory any elaborator can do whatever it wants based on reducability of a function, it might for example also be relevant for certain tactics. But by far the most common use case is type classes.</p>",
        "id": 301862065,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664654876
    },
    {
        "content": "<p>So take the trivial recursive example of Nat addition.  </p>\n<p>I could use it as a normal computation but to eg use it in a proof/prop would I need to mark it as reducible?</p>",
        "id": 301862847,
        "sender_full_name": "Tom",
        "timestamp": 1664655372
    },
    {
        "content": "<p>No not at all you can do proofs about any lean program (although using <code>partial</code> limits this ability drastically but that's another story I can go into if you want) However it might be that there are certain tactics that operate in a special way on reducible vs non reducible definitions. I have no example at hand though, all of the ones I know don't really care afaik.</p>",
        "id": 301863288,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664655683
    },
    {
        "content": "<p>Thanks, Henrik</p>",
        "id": 301868287,
        "sender_full_name": "Tom",
        "timestamp": 1664659783
    }
]