[
    {
        "content": "<p>I was a bit surprised that the following shows two definitions for <code>rfl</code> instead of some kind of error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Reflexivity</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Reflexivity.rfl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Reflexivity.refl</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Reflexivity</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But <code>#check rfl</code> does give an error:</p>\n<blockquote>\n<p>Dev/Relations.lean:11:7: error: ambiguous, possible interpretations <br>\nrfl<br>\nrfl</p>\n</blockquote>\n<p>I would expect an error at the <code>export</code> but maybe there is something deeper going on.</p>",
        "id": 225638540,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612837714
    },
    {
        "content": "<p>That works also in lean 3</p>",
        "id": 225638714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612837879
    },
    {
        "content": "<p>When you have open namespaces you can get into a situation where a name is overloaded; this will cause an error if you try to use it</p>",
        "id": 225638779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612837931
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">A.foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">B.foo</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kn\">open</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- ambiguous overload, possible interpretations</span>\n<span class=\"c1\">--   B.foo</span>\n<span class=\"c1\">--   A.foo</span>\n</code></pre></div>",
        "id": 225638809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612837984
    },
    {
        "content": "<p>an <code>export</code> is just a global <code>open</code></p>",
        "id": 225638847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612838020
    },
    {
        "content": "<p>Oh, I see. So export works as a global open.</p>",
        "id": 225638859,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612838036
    },
    {
        "content": "<p>(As opposed to a new declaration.)</p>",
        "id": 225638926,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612838072
    },
    {
        "content": "<p>That's not what I expected. I think I'll avoid exports from now on. Nobody should have that much power!</p>",
        "id": 225639141,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612838282
    },
    {
        "content": "<p>Yes, I don't think it's used in mathlib at all, and the few uses in core are for things like <code>option.some</code></p>",
        "id": 225639184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612838319
    },
    {
        "content": "<p>usually we just put things in the root namespace if we want them to be used without a qualifier in all contexts</p>",
        "id": 225639237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612838371
    },
    {
        "content": "<p>I guess you can't do that for constructors of a data type like <code>option</code> though</p>",
        "id": 225639253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612838390
    },
    {
        "content": "<p>Wouldn't an abbreviation work just as well?</p>",
        "id": 225639439,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612838574
    },
    {
        "content": "<p>As you observed, an export is not the same as an abbreviation, the latter creates a new definition, meaning that tactics and so on see a different term and can do different things</p>",
        "id": 225639476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612838629
    },
    {
        "content": "<p>I think I would prefer a new definition, but that's just my personal opinion. I'm happy writing a bunch of abbreviations instead of exports. And I could probably write a macro to automate this if necessary... (Lean 4 macros rock!)</p>",
        "id": 225639790,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612838989
    },
    {
        "content": "<p>I just feel bad for the kernel sometimes, seeing and typechecking all these useless definitions that are equal to other named things</p>",
        "id": 225639868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612839061
    },
    {
        "content": "<p>I prefer parser-only abbreviations, which you can mostly get via notation and macros</p>",
        "id": 225639953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612839175
    },
    {
        "content": "<p>Good point but the kernel doesn't feel anything... though _you_ could feel your cpu overheating. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  Thanks for the help Mario!</p>",
        "id": 225639965,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612839201
    },
    {
        "content": "<p>I think what <code>open</code> and <code>export</code> do specifically is something like the following.  At any given moment you have a list of known symbols along with a current namespace.</p>\n<ul>\n<li><code>open foo</code> takes all the names in the <code>foo</code> namespace and adds them to the list of known symbols.  This way you can reference those symbols without qualifying them with <code>foo</code></li>\n<li><code>export foo (symbols...)</code> does <code>open foo (symbols...)</code> and also adds all those symbols to the current namespace.  The effect is that whoever then later <code>open</code>s or <code>export</code>s this namespace will get those symbols.  (And if it's at the top level, everyone gets them!)</li>\n</ul>\n<p>For example, the <code>export</code> below essentially creates a symbol <code>foo.x</code>.  You still have to <code>open foo</code> if you're not in the <code>foo</code> namespace to have an <code>x</code> that stands for <code>foo.bar.x</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"n\">where</span>\n    <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">export</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>It can be useful when you want to curate a namespace.</p>",
        "id": 225644218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612844032
    },
    {
        "content": "<blockquote>\n<p>open foo takes all the names in the foo namespace and adds them to the list of known symbols. This way you can reference those symbols without qualifying them with foo</p>\n</blockquote>\n<p>Not quite; this is how Lean 3 worked, but in Lean 4, <code>open</code> makes symbols available that haven been declared in the namespace even after the <code>open</code> command.</p>",
        "id": 225658327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612860292
    },
    {
        "content": "<p>What I said ends up being incorrect for Lean 3 as well -- I thought I had tested it before, but it seems that <code>export</code> only makes symbols available when you later re-enter or <code>open</code> the namespace.  That's to say, in the Lean 3 version of that code the <code>export</code> does not imply the existence of a <code>foo.x</code>.</p>\n<p>(Something I've been wondering is where the idea for Lean's namespaces might have come from.  They are very similar to Common Lisp's symbol packages, simplified for the better, but I could imagine they might also have come from an Algol/Pascal-syntax version of Agda modules, especially with there being <code>parameter</code> variables.)</p>",
        "id": 225879256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612979431
    }
]