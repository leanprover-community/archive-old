[
    {
        "content": "<p>You can write a getter more simply by using the equation compiler/a match statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getter</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">B.mk1</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">B.mk2</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">getter</span>\n</code></pre></div>\n<p>If you can get away with using the derived <code>casesOn</code> or using pattern matching you're probably going to be better off since those don't implicate the other motives. As for why the recursor is complicated,  I think the answer is just \"that's what the type theory demands\".</p>",
        "id": 249682658,
        "sender_full_name": "Chris B",
        "timestamp": 1629181344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 249685024,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629183873
    },
    {
        "content": "<p>Note that termination checking for mutually recursive functions is not implemented yet, and neither is well-founded recursion. So you can only use the equation compiler for <code>partial</code> functions. If you want a function about which you can prove things, you need to use the recursor for now, and even then the function will be noncomputable (since the recursor is currently noncomputable). So my advice would be to avoid mutual inductives at all cost.</p>",
        "id": 249696211,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629193047
    },
    {
        "content": "<p>Is that only for recursive functions? The example I posted uses the equation compiler and seems to work, or at least it doesn't throw any errors.</p>",
        "id": 249698933,
        "sender_full_name": "Chris B",
        "timestamp": 1629195096
    },
    {
        "content": "<p>Yeah, this is only about termination checking.</p>",
        "id": 249699110,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629195215
    },
    {
        "content": "<p>Ok, thanks. That's good info.</p>",
        "id": 249699894,
        "sender_full_name": "Chris B",
        "timestamp": 1629195741
    }
]