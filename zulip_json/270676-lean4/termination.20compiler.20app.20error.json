[
    {
        "content": "<p>I think the error here is somewhere in the termination checker, but I haven't minimized it further than this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">heapifyDown</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">left</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">left_le</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">right_le</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">i_le</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">left</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">a.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.get</span> <span class=\"o\">⟨</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">then</span> <span class=\"o\">⟨⟨</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">left_le</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i_le</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i_le</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">right</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">a.get</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.get</span> <span class=\"o\">⟨</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">then</span> <span class=\"o\">⟨⟨</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">right_le</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"n\">j</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a'.size</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">heapifyDown</span> <span class=\"n\">lt</span> <span class=\"n\">a'</span> <span class=\"o\">⟨</span><span class=\"n\">j.1.1</span><span class=\"o\">,</span> <span class=\"n\">a.size_swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">▸</span> <span class=\"n\">j.1.2</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">a</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>gives an error on the <code>def heapifyDown</code> saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">LE.le</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 265079035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639604479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for reporting the issue. I will be very grateful if you manage to minimize the example.</p>",
        "id": 265080163,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1639604817
    },
    {
        "content": "<p>smaller version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">heapifyDown</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">heapifyDown</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span> <span class=\"n\">a.size_swap</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">▸</span> <span class=\"n\">i.2</span><span class=\"o\">⟩</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">measure</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i.1</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 265080189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639604829
    },
    {
        "content": "<p>Thanks! :)</p>",
        "id": 265080224,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1639604850
    },
    {
        "content": "<p>removing the <code>a.size_swap i i ▸</code> makes the error go away. I think the version of the goal in the <code>assumption</code> context is ill typed</p>",
        "id": 265080267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639604869
    },
    {
        "content": "<p>Replacing <code>assumption</code> with <code>done</code> and setting <code>pp.all</code> reveals the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">fst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span>\n<span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instLTFin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n          <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"k\">fun</span>\n          <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span>\n          <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n            <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">heapifyDown._unary.match_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span>\n              <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span>\n              <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n                <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">Nat</span><span class=\"o\">)</span>\n            <span class=\"n\">x</span>\n            <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">@</span><span class=\"n\">Fin.val</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PSigma.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"n\">fst</span><span class=\"bp\">✝¹</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PSigma.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.val</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.ndrec.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.swap.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instLTNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.val</span> <span class=\"n\">x</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.ndrec.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instLTNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.val</span> <span class=\"n\">x</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.isLt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.swap.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.symm.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.swap.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size_swap.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size_swap.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PSigma.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">@</span><span class=\"n\">PSigma.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"n\">fst</span><span class=\"bp\">✝¹</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PSigma.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.size.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span>\n        <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which contains a subterm <code>fun (x : Nat) =&gt; @LT.lt.{0} Nat instLTNat (@Fin.val x snd✝) x</code> which is ill typed because <code>snd✝ : Fin (@Array.size.{u_1} fst✝¹ fst✝)</code> instead of <code>Fin x</code>. This looks like the kind of replacement that <code>rw</code> will sometimes do that yields the <code>motive is not type correct</code> error in lean 3</p>",
        "id": 265081619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639605482
    },
    {
        "content": "<p>Oh, the termination compiler is a red herring. This has the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">heapifyDown'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">heapifyDown</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">heapifyDown'</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span> <span class=\"n\">a.size_swap</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">▸</span> <span class=\"n\">i.2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 265082173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639605702
    },
    {
        "content": "<p>minimized more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"o\">:=</span> <span class=\"n\">a.size_swap</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">▸</span> <span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 265082451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639605832
    },
    {
        "content": "<p>minimized more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">i.2</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- h ▸ Eq.symm h ▸ i.isLt : i.val &lt; a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">i.2</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   i.val</span>\n<span class=\"c1\">-- argument has type</span>\n<span class=\"c1\">--   Fin a</span>\n<span class=\"c1\">-- but function has type</span>\n<span class=\"c1\">--   Fin x✝ → Nat</span>\n</code></pre></div>\n<p>The check result is very weird (and there are in fact two <code>Eq.ndrec</code> nodes being generated), but I don't think it is the issue. It seems like this actually is a <code>motive is not type correct</code> error, but it passes elaboration and gets caught late</p>",
        "id": 265083917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639606533
    },
    {
        "content": "<p>I pushed a fix for this. The <code>▸</code> notation now type checks the generated motives like the <code>rw</code> tactic.</p>",
        "id": 265096343,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1639613983
    }
]