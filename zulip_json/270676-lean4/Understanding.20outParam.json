[
    {
        "content": "<p>I'm really confused on what <code>outParam</code> is actually doing. To my limited understanding, you can use it to prevent for example an instance to be polymorphic in certain argument.</p>\n<p>I would like to understand the following code that runs into an infinite loop exactly because of <code>outParam</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n  <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Vec</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Vec</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">15</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>It works fine if you change <code>(R : outParam $ Type u)</code> to <code>(R : Type u)</code> in the definition of <code>SemiHilbert</code> class.</p>\n<p>What I do not understand is why the last subgoal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">Vec</span> <span class=\"n\">_tc.0</span>\n</code></pre></div>\n<p>causes TC to going into an insane infinite loop producing longer and longer instances of <code>Vec (ℝ × ... × ℝ)</code>.</p>",
        "id": 269483919,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643231959
    },
    {
        "content": "<p>I don't mean this to sound flippant (\"read the manual\"), but there is a small section in there which is the best description I've found of what it actually does (adjusts the starting point for TC synthesis). <a href=\"https://leanprover.github.io/lean4/doc/typeclass.html?highlight=outParam#output-parameters\">https://leanprover.github.io/lean4/doc/typeclass.html?highlight=outParam#output-parameters</a>.</p>",
        "id": 269585449,
        "sender_full_name": "Chris B",
        "timestamp": 1643295936
    },
    {
        "content": "<p>Yes to that extent as described there I understand it, but I'm utterly confused what is Lean trying to do in the code I have posted.</p>",
        "id": 269628381,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643313230
    }
]