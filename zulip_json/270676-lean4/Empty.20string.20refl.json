[
    {
        "content": "<p>Lean3: theorem hi : \"\".data = [] := by refl<br>\nLean4:  example : \"\".data = [] := by ?</p>",
        "id": 237690039,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1620319117
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"k\">#eval</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">==</span> <span class=\"o\">[]</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#reduce</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">==</span> <span class=\"o\">[]</span> <span class=\"c1\">-- aargh</span>\n\n<span class=\"k\">#reduce</span> <span class=\"s2\">\"\"</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"c1\">-- \"\".1</span>\n</code></pre></div>",
        "id": 237694823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620320946
    },
    {
        "content": "<p>Interestingly <code>String</code> and <code>Array</code> seem to behave differently in this regard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[]</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Both are defined in <code>Prelude.lean</code> and have custom efficient C/C++ implementations backing them. Perhaps this difference is related to the <a href=\"https://github.com/leanprover/lean4/blob/c96cb78970bc1d70e7a1ed6a7fdf947e6db40a98/src/Init/Prelude.lean#L1101\">comment</a> by <code>Array</code>'s definition stating \"The Compiler has special support for arrays.\" and the lack of such a comment for <code>String</code>...? <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 237696486,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1620321659
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">String.mk</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">data</span>  <span class=\"bp\">=</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I think the issue is just that <code>WHNF</code> sees a <code>String</code> literal and doesn't realize it is morally an application of constructor <code>String.mk</code> and so can project.</p>",
        "id": 237700644,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620323408
    },
    {
        "content": "<p>It seems fixable by adding a String-literal case to <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/MonadEnv.lean#L58-L62\">https://github.com/leanprover/lean4/blob/master/src/Lean/MonadEnv.lean#L58-L62</a></p>",
        "id": 237700969,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620323536
    }
]