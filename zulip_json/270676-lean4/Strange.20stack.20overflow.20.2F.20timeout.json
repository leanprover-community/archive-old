[
    {
        "content": "<p>I've been playing with Lean 4, trying to prove some basic facts about matrices and writing a few tactics. I encountered an issue that I can't quite explain and I'm not sure how to debug. Essentially, what I want is to get cases for every index and then prove inequalities between ground terms whose values come from matrices.  I've seen different errors depending on the example I was working with anywhere from stack overflows, cores dumped, or simply timing out. Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that I believe illustrates my issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">52532234335</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">234231224</span><span class=\"o\">],</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">122223</span><span class=\"o\">,</span> <span class=\"mi\">29338123232</span><span class=\"o\">]][</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">doesnot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- allGoals (subst x; dec_trivial) -- stack overflow / timeout</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I translated <code>dec_trivial</code> from what we had in Lean 3 and <code>obtain</code> I copied from an example somewhere in the docs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">of_as_true</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">as_true</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">h_c</span><span class=\"o\">),</span>  <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"n\">h_c</span><span class=\"o\">),</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">h₂</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.Tactic.triv</span><span class=\"o\">)</span> <span class=\"s2\">\"triv\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic triv]</span> <span class=\"kd\">def</span> <span class=\"n\">triv</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">closeMainGoal</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"dec_trivial\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">of_as_true</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">triv</span><span class=\"o\">)))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"obtain \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" from \"</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So somehow, <code>obtain</code> seems to be breaking everything. But then if I make the numbers in the matrix small, everything is fine. Even just removing <code>Int.natAbs</code> in the <code>doesnot</code> lemma, the proof goes through... What am I missing??</p>",
        "id": 246118411,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626365945
    },
    {
        "content": "<p>dec_trivial is a kernel computation, so it evaluates using unary arithmetic, which will blow up with huge numbers. You want a norm_num there instead</p>",
        "id": 246120175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626366675
    },
    {
        "content": "<blockquote>\n<p>kernel computation, so it evaluates using unary arithmetic</p>\n</blockquote>\n<p>This was in Lean 3.  In Lean 4, the kernel evaluation should use GMP as well.</p>",
        "id": 246120339,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626366735
    },
    {
        "content": "<p>Wonderful! Sorry for the FUD</p>",
        "id": 246122326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626367608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132858\">Ramon Fernandez Mir</span> Sorry, but I am having trouble reproducing this error. Here is the full code I am using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">of_as_true</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">as_true</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">h_c</span><span class=\"o\">),</span>  <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_c</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"n\">h_c</span><span class=\"o\">),</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">h₂</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.Tactic.triv</span><span class=\"o\">)</span> <span class=\"s2\">\"triv\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic Parser.Tactic.triv]</span> <span class=\"kd\">def</span> <span class=\"n\">triv</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">closeMainGoal</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"dec_trivial\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">of_as_true</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">triv</span><span class=\"o\">)))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"obtain \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" from \"</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">52532234335</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">234231224</span><span class=\"o\">],</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">122223</span><span class=\"o\">,</span> <span class=\"mi\">29338123232</span><span class=\"o\">]][</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">doesnot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"gr\">admit</span><span class=\"o\">)</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"c1\">-- stack overflow / timeout</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>It works for me (the last line completes successfully and nothing breaks).</p>",
        "id": 246128744,
        "sender_full_name": "Mac",
        "timestamp": 1626370334
    },
    {
        "content": "<p>One a somewhat unrelated note, I do not understand why the definition of <code>of_as_true</code> was written to match on both <code>h₁</code> and <code>h₂</code> when it only really matches against is <code>h₁</code>. Also, the parentheses in the match seem unnecessary (but that could easily be an artifact from translating this from Lean 3).</p>",
        "id": 246129142,
        "sender_full_name": "Mac",
        "timestamp": 1626370502
    },
    {
        "content": "<p>Ah, now that I think about it. <strong>What version of Lean 4 are you using?</strong></p>",
        "id": 246129544,
        "sender_full_name": "Mac",
        "timestamp": 1626370680
    },
    {
        "content": "<p>Have you tried testing this on the latest nightly?</p>",
        "id": 246129656,
        "sender_full_name": "Mac",
        "timestamp": 1626370717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20stack.20overflow.20.2F.20timeout/near/246129142\">said</a>:</p>\n<blockquote>\n<p>One a somewhat unrelated note, I do not understand why the definition of <code>of_as_true</code> was written to match on both <code>h₁</code> and <code>h₂</code> when it only really matches against is <code>h₁</code>. Also, the parentheses in the match seem unnecessary (but that could easily be an artifact from translating this from Lean 3).</p>\n</blockquote>\n<p>I think this is to ensure that the case split on <code>h1</code> gets propagated into the type of <code>h2</code>. Lean 4 has <code>match (generalizing := true)</code> for this afair.</p>",
        "id": 246132902,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626372233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20stack.20overflow.20.2F.20timeout/near/246132902\">said</a>:</p>\n<blockquote>\n<p>I think this is to ensure that the case split on <code>h1</code> gets propagated into the type of <code>h2</code>. Lean 4 has <code>match (generalizing := true)</code> for this afair.</p>\n</blockquote>\n<p>Ah. And, of I am not mistaken, <code>generalizing := true</code> is the default for <code>Prop</code>.</p>",
        "id": 246140987,
        "sender_full_name": "Mac",
        "timestamp": 1626376041
    },
    {
        "content": "<p>Regardless, in Lean 4, this definition does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_as_true</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">as_true</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h_c</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">h_c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h_c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 246141213,
        "sender_full_name": "Mac",
        "timestamp": 1626376161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20stack.20overflow.20.2F.20timeout/near/246129656\">said</a>:</p>\n<blockquote>\n<p>Have you tried testing this on the latest nightly?</p>\n</blockquote>\n<p>Yes and still can't solve it...</p>",
        "id": 246206311,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626430893
    },
    {
        "content": "<p>In general though, how can I debug an issue like this one? How can I get some sort of execution trace?</p>",
        "id": 246206394,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626430936
    },
    {
        "content": "<p>One thing that helps is to minimize the example. Remove everything that doesn't contribute to the bug. If it has to do with kernel computation then you can probably get it down to <code>example : ... := by dec_trivial</code></p>",
        "id": 246206578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626431092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132858\">Ramon Fernandez Mir</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20stack.20overflow.20.2F.20timeout/near/246206311\">said</a>:</p>\n<blockquote>\n<p>Yes and still can't solve it...</p>\n</blockquote>\n<p>Ah. Sorry that I can't help more since I can't reproduce it. One thing I would try is all positive or all negative numbers (especially since it might have something to do with <code>Int.natAbs</code>).</p>",
        "id": 246237585,
        "sender_full_name": "Mac",
        "timestamp": 1626448949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20stack.20overflow.20.2F.20timeout/near/246206578\">said</a>:</p>\n<blockquote>\n<p>One thing that helps is to minimize the example. Remove everything that doesn't contribute to the bug. If it has to do with kernel computation then you can probably get it down to <code>example : ... := by dec_trivial</code></p>\n</blockquote>\n<p>So I managed to find an even simpler example that hangs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">100000000</span><span class=\"o\">]][</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">simpler</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">≤</span> <span class=\"mi\">100000000</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>This is on a fresh project running on lean 4.0.0-nightly-2021-07-14. Also, if you make the numbers small, it works. If you replace the <code>⟨1, h⟩</code> by simply <code>1</code>, it works. And removing <code>Int.natAbs</code> also makes it work. So quite mysterious altogether.</p>",
        "id": 246252202,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1626455774
    },
    {
        "content": "<p>Yay, that worked. I can finally reproduce this! :)</p>",
        "id": 246254813,
        "sender_full_name": "Mac",
        "timestamp": 1626456970
    },
    {
        "content": "<p>I was able to get the stack overflow with this cut-down example as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">of_as_true</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">as_true</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h_c</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">h_c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h_c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">100000000</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">]][</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">simpler</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- stack overflow</span>\n</code></pre></div>",
        "id": 246257831,
        "sender_full_name": "Mac",
        "timestamp": 1626458320
    },
    {
        "content": "<p>The processing time increases as the order of magnitude of <code>n</code> increases. Thus, <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> appears to be right, the kernel is for some reason doing unary arithmetic, causing the stack blow-up.</p>",
        "id": 246258341,
        "sender_full_name": "Mac",
        "timestamp": 1626458552
    },
    {
        "content": "<p>Given that this doesn't occur when <code>Int.natAbs</code> is absent or  the  <code>⟨1,h⟩</code> is replaced with <code>1</code>, I would assume this has to do with the kernel not realizing that <code>Int.natAbs (m ⟨1,h⟩ ⟨1,h⟩)</code> is a computable <code>Nat</code> (and, more generally, that the less than is decidable through computation) and is thus relying on its logical representation (rather than its computable one).</p>",
        "id": 246258861,
        "sender_full_name": "Mac",
        "timestamp": 1626458778
    },
    {
        "content": "<p>Note that <code>decide</code> fails in with <code>⟨1,h⟩</code> but not with <code>1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decide1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">expected type must not contain free or meta variables</span>\n<span class=\"sd\">  Int.natAbs (m { val := 1, isLt := h } { val := 1, isLt := h }) ≤ n</span>\n<span class=\"sd\">-/</span>\n\n<span class=\"c1\">-- the `h` parameter is irrelevant</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">decide2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 246260280,
        "sender_full_name": "Mac",
        "timestamp": 1626459525
    },
    {
        "content": "<p>However, <code>decide</code> still fails without <code>Int.natAbs</code> while the <code>of_as_true trivial</code> does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decide3</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">expected type must not contain free or meta variables</span>\n<span class=\"sd\">  m { val := 1, isLt := h } { val := 1, isLt := h } ≤ Int.ofNat n</span>\n<span class=\"sd\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">simpler3</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>So it is clear that <code>decide</code> is getting caught up on the <code>h</code>.</p>",
        "id": 246260688,
        "sender_full_name": "Mac",
        "timestamp": 1626459734
    },
    {
        "content": "<p>My biggest confusion is thus why <code>m ⟨1,h⟩ ⟨1,h⟩ ≤ n</code> works (with <code>of_as_true trivial</code>). Based on the behavior with <code>decide</code>, I would expect it to break as well.</p>",
        "id": 246262462,
        "sender_full_name": "Mac",
        "timestamp": 1626460772
    },
    {
        "content": "<p>The kernel representation can compute this though, so I would expect it to work</p>",
        "id": 246272139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626466051
    },
    {
        "content": "<p>That is, lean 3 <code>#reduce</code> would work on this even without any fancy kernel nats</p>",
        "id": 246272228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626466090
    },
    {
        "content": "<p>Here it is minimized some more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">30000</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">simpler</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(The number has been reduced so that it is long enough to be noticeable without bricking your machine)</p>",
        "id": 246273901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626467103
    },
    {
        "content": "<p>My guess is that at this point, lean's defeq heuristics say to unfold <code>Nat.ble</code> instead of the beta redex, after which point it loses the ability to take advantage of the kernel computation</p>",
        "id": 246274066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626467181
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 246276595,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626468490
    },
    {
        "content": "<p>The check to not reduce open terms is correct here by the way; even if it's a prop, it can be a false assumption, in which case the compiled code could go off the rails</p>",
        "id": 246277248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626468866
    },
    {
        "content": "<p>well, even closed terms can have that issue in the presence of axioms</p>",
        "id": 246277329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626468935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This commit fixes the performance issue: <a href=\"https://github.com/dselsam/lean4/commit/6ced516e6acb8cf038b2e9a1d2c87a1a6497bef8\">https://github.com/dselsam/lean4/commit/6ced516e6acb8cf038b2e9a1d2c87a1a6497bef8</a> I may be missing something obvious but I don't see why it would be unsound -- <code>reduce_nat</code> only does built-in operations on terms that actually reduce to nat literals.</p>",
        "id": 246295926,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626483876
    },
    {
        "content": "<p>I think you are right</p>",
        "id": 246296215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626484368
    },
    {
        "content": "<p>although that check in reduce_nat is probably a perfomance optimization since it's a lot easier to check the <code>has_fvar</code> bit on an expression than see whether it is <code>nat.succ</code>, <code>nat.add</code> etc</p>",
        "id": 246296277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626484470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20stack.20overflow.20.2F.20timeout/near/246295926\">said</a>:</p>\n<blockquote>\n<p><code>reduce_nat</code> only does built-in operations on terms that actually reduce to nat literals.</p>\n</blockquote>\n<p>But couldn't that still be a problem? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">300</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">256</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">300</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">n</span> <span class=\"c1\">-- 44</span>\n</code></pre></div>\n<p><code>n</code> is still a nat literal -- it just happens to be the <em>wrong</em> nat literal. I imagine this could cause unsoundness in a more sophisticated example.</p>",
        "id": 246296498,
        "sender_full_name": "Mac",
        "timestamp": 1626484848
    },
    {
        "content": "<p><code>n</code> doesn't reduce to <code>44</code> though</p>",
        "id": 246297111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626485842
    },
    {
        "content": "<p>It's also not a nat literal</p>",
        "id": 246297122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626485882
    },
    {
        "content": "<p><code>n.1</code> has type <code>Nat</code>, and it whnf-reduces to a nat literal, namely <code>300</code>, and it is provably equal to <code>44</code> but I don't think you can make it reduce to <code>44</code></p>",
        "id": 246297239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626486007
    },
    {
        "content": "<p>Well, this crashes with max recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">300</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">256</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">300</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">n'</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">maximum recursion depth has been reached</span>\n<span class=\"cm\">(use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is that expected?</p>",
        "id": 246297727,
        "sender_full_name": "Mac",
        "timestamp": 1626486841
    },
    {
        "content": "<p>Oh, apparently that just always happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">n'</span> <span class=\"c1\">-- same error</span>\n</code></pre></div>\n<p><em>Is</em> this expected?</p>",
        "id": 246297925,
        "sender_full_name": "Mac",
        "timestamp": 1626487109
    },
    {
        "content": "<p>It does not seem surprising -- calling <code>reduce</code> on a proof isn't usually a good idea. Note that there is a TODO in the code to allow <code>#reduce</code> to take additional arguments e.g. to avoid reducing proofs <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/BuiltinCommand.lean#L222-L224\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/BuiltinCommand.lean#L222-L224</a></p>",
        "id": 246298386,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626487731
    },
    {
        "content": "<p>Ah so it is trying to reduce the <code>isLt</code> proof of <code>UInt8</code> and that is causing the crash. Makes sense.</p>",
        "id": 246298460,
        "sender_full_name": "Mac",
        "timestamp": 1626487912
    }
]