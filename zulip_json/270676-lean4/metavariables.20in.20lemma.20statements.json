[
    {
        "content": "<p>Just discovered an interesting difference between Lean 3 and 4. Lean 4 allows metavariables in lemma statements:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">one_plus_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Lean 3 doesn't accept them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_plus_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"c1\">-- don't know how to synthesize placeholder context: ⊢ ℕ</span>\n  <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 222333885,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610388127
    },
    {
        "content": "<p>Interesting... this work in lean3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 222334380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610388361
    },
    {
        "content": "<p>Must be something about <code>lemma</code> vs. <code>example</code></p>",
        "id": 222334438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610388372
    },
    {
        "content": "<p>Right.  In Lean 3 the lemma statement is elaborated first, and the proof is elaborated separately.  There are two reasons:</p>\n<ol>\n<li>The statement of a lemma shouldn't depend on its proof.  (Otherwise you might accidentally prove something weaker than you want.)</li>\n<li>We want to check proofs in parallel.  For this to work we need to know the theorem statement without elaborating the proof.</li>\n</ol>",
        "id": 222334770,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610388532
    },
    {
        "content": "<p>Does that make this a shortcoming in lean 4? And if so, is it by design, accident, or just low prioritization?</p>",
        "id": 222370740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610406228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> This part is still missing. That being said, the behavior will still be slightly different from Lean 3. Significant changes:</p>\n<ul>\n<li>We are removing unused <code>variable</code>s from <code>theorem</code>s. So, the behavior here is similar to <code>def</code> in Lean 3.</li>\n<li>If the user provides the type in a <code>def</code>, we will ensure it doesn't contain metavariables before we elaborate its body as we do for <code>theorem</code> in Lean 3. </li>\n</ul>\n<p>The goal is to reduce the number of differences between <code>theorem</code> and <code>def</code>.</p>",
        "id": 222375038,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610409388
    },
    {
        "content": "<p>I just pushed <a href=\"https://github.com/leanprover/lean4/commit/36008271eacc7af3c22828c3d3238650349017d4\">https://github.com/leanprover/lean4/commit/36008271eacc7af3c22828c3d3238650349017d4</a> since this change may create compatibility issues in the future.<br>\nIt ensures the header of a theorem must not contain metavariable (aka holes) before we elaborate its body/value. Same for <code>def</code> when the type is explicitly provided. That is, we can still write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>but the following is an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 222379315,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610412646
    }
]