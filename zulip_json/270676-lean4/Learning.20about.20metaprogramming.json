[
    {
        "content": "<p>Hi all, I wanted to learn a little bit of metaprogramming in Lean4, so I am trying to write a version of mathlib's <code>apply_fun</code> tactic.<br>\nSo far, I have something fairly rudimentary with the following code (note: this is still very far from the full capability of mathlib's <code>apply_fun</code> tactic):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"applyFun \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" at \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">applyFun</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"n\">try</span> <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Meta.clear</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"n\">d.fvarId</span><span class=\"o\">]</span>\n        <span class=\"n\">catch</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">applyFun</span> <span class=\"n\">goal</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"Hypothesis named {i} not found.\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">applyFun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This seems to work (at least in the example) when we actually apply a function. <br>\nHowever, one thing I cannot figure out is how to make this work if <code>f</code> has some type that has an appropriate <code>CoeFun</code> instance (the mathlib Lean3 version is able to do this, and much more!). Can someone point me in the right direction here? <br>\nAlso, I am very new to metaprogramming and programming in Lean4 in general, any advice about improving the code above would be much appreciated!</p>",
        "id": 290639687,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658619442
    },
    {
        "content": "<p>Style-wise, the concrete syntax should remain <code>apply_fun</code>. See <a href=\"https://github.com/leanprover-community/mathlib4/blob/dda51df299ce844cc686ecbd6f08c17a4a247078/Mathlib/Mathport/Syntax.lean#L426\">https://github.com/leanprover-community/mathlib4/blob/dda51df299ce844cc686ecbd6f08c17a4a247078/Mathlib/Mathport/Syntax.lean#L426</a></p>",
        "id": 290640245,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658620315
    },
    {
        "content": "<p>I think you want to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Meta.clear</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"n\">d.fvarId</span><span class=\"o\">]</span>\n<span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">applyFun</span> <span class=\"n\">goal</span> <span class=\"s2\">\"tactic failed\"</span>\n</code></pre></div>\n<p>So even the <code>have foo := congrArg ...</code> is guarded from errors</p>",
        "id": 290640369,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658620504
    },
    {
        "content": "<p>I've never done instance inference in metaprogramming before, but I believe you could try <code>mkAppM</code> with the <code>inferInstance</code> function unless someone else tells us a more appropriate method</p>",
        "id": 290640450,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658620661
    },
    {
        "content": "<p>How do I do this without writing syntax in my elaborator?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">natInt</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 314487650,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670427934
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">natInt</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Prod</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Int</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 314492263,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1670428365
    },
    {
        "content": "<p>Thanks! I had done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Prod.mk</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>before, but I suspected I had done something wrong</p>",
        "id": 314492587,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670428457
    },
    {
        "content": "<p>(FYI <code>const ``Nat []</code> is now the preferred form and will save you from the <code>mkConst</code> footgun of forgetting to specify the universe levels. Also, here you can use <code>mkAppN</code> instead of <code>mkAppM</code>.)</p>",
        "id": 314501647,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670430823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Learning.20about.20metaprogramming/near/314501647\">said</a>:</p>\n<blockquote>\n<p>(FYI <code>const ``Nat []</code> is now the preferred form and will save you from the <code>mkConst</code> footgun of forgetting to specify the universe levels. Also, here you can use <code>mkAppN</code> instead of <code>mkAppM</code>.)</p>\n</blockquote>\n<p>Where is <code>const</code>?</p>",
        "id": 314541786,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670441330
    },
    {
        "content": "<p>Ah, <code>Expr.const</code> probably</p>",
        "id": 314542063,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670441409
    },
    {
        "content": "<p>Regarding the <code>mkConst</code> footgun, mathlib4 now defines (in <code>Mathlib.Lean.Expr.Basic</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Same as `mkConst`, but with fresh level metavariables. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkConst'</span> <span class=\"o\">(</span><span class=\"n\">constName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkConst</span> <span class=\"n\">constName</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">constName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">levelParams.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Better names and/or homes welcome if someone wants to move it upstream.</p>",
        "id": 314571480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670452485
    },
    {
        "content": "<p>I believe the function should be called <code>mkConstWithFreshMVarLevels</code> and should be put in <code>Lean/Meta/Basic.lean</code>, roughly around <a href=\"https://github.com/leanprover/lean4/blob/a9ba08ce11ab9f257f9a0b8611944c53f4517b61/src/Lean/Meta/Basic.lean#L500-L502\">here</a>.</p>",
        "id": 314607525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670478178
    }
]