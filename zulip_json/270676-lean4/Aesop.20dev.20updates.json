[
    {
        "content": "<p>Since Aesop now has some users (cc <span class=\"user-mention\" data-user-id=\"457079\">@Asta Halkjær From</span>, <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ), I'll log user-facing changes in this topic. Starting with...</p>\n<p><code>9af09347a</code>: Aesop can now be used as a non-terminal tactic. It reports the goals which remain after applying safe rules to the root goal, recursively until no safe rules are applicable. Since this is meant to be used only as a debugging aid, Aesop prints a warning for non-terminal calls, but this can be disabled.</p>",
        "id": 288788318,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1657189580
    },
    {
        "content": "<p>In preparation for the paper submission, I recently made a bunch of changes which clean up Aesop's semantics, but will probably break your code (sorry):</p>\n<ul>\n<li><code>bbe07b</code>: Aesop now depends on <code>std</code>.</li>\n<li><code>28b344</code>: the rule index now uses reducible transparency. This means that, for example, an <code>apply</code> rule with conclusion <code>P (x :: xs)</code> will fail on the goal <code>P ([x] ++ xs)</code>. See discussion at <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Discrimination.20tree.20lookup\">#lean4 &gt; Discrimination tree lookup</a>.</li>\n<li><code>9c4b4d</code>: the builtin introduction rules for product-like types (<code>And</code>, <code>Prod</code>, etc.) are now safe rather than unsafe.</li>\n<li><code>d96217</code>: safe rules now fail if they generate multiple rule applications (e.g. a safe <code>constructors</code> rule where multiple constructors apply to the goal).</li>\n<li><code>6bcfda</code>: the <code>elim</code> builder is now called <code>destruct</code>, for consistency with Isabelle's terminology.</li>\n</ul>",
        "id": 302049904,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664798778
    },
    {
        "content": "<ul>\n<li><code>bf3d68</code>: the builtin rules no longer split hypotheses <code>h : P ↔ Q</code> into <code>h1 : P -&gt; Q</code> and <code>h2 : Q -&gt; P</code>. Instead, such hypotheses are now treated as equations via propext (like <code>simp</code> usually does).</li>\n</ul>",
        "id": 302268624,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664892470
    },
    {
        "content": "<p><code>8cebf2</code>: new feature: <code>aesop?</code> outputs a tactic proof as a <code>Try this:</code> suggestion. The scripts are sometimes still buggy or more cumbersome than necessary, but they work for a large majority of Aesop calls in my test suite.</p>",
        "id": 313957440,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670245128
    },
    {
        "content": "<p>Perhaps worth mentioning on this thread: aesop now has many more users. It is imported in mathlib4, and being used (experimentally) in the category theory library as a default for structure fields where <code>tidy</code> used to be used in mathlib3. So far (early days) it looks quite promising.</p>",
        "id": 314119779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670272624
    },
    {
        "content": "<p>I use it as well and it's amazing when configured correctly. I was able to throw out dozens of tedious proofs each with a single aesop invocation the other day.</p>",
        "id": 314127994,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1670275699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I'm experimenting with Aesop, it's really cool!</p>\n<p>Could you please give a bit of documentation on the <code>simp_options</code> available (as mentioned in the <a href=\"https://github.com/JLimperg/aesop#setting-options\">readme</a>)?  I'd actually like an option to turn off the simplification step entirely, if that exists.</p>",
        "id": 318929523,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672630101
    },
    {
        "content": "<p>Glad to hear it! The <code>simp_options</code> are a superset of the options supported by <code>simp</code> (i.e. <code>simp (config := { ... })</code>).  Currently the only additional option is <code>use_hyps</code> as documented in the README. There's currently no option to turn off the simp rule entirely, but I'll implement one.</p>",
        "id": 318989100,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672664889
    },
    {
        "content": "<p><code>72610c</code>: you can now write <code>aesop (simp_options := { enabled := false })</code> to disable the simplification rule entirely (<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ). To make this less cumbersome, you can define a wrapper like <a href=\"https://github.com/leanprover-community/mathlib4/blob/b9e19018f94e12dd9019637c10c6224adb2fb63b/Mathlib/CategoryTheory/Category/Basic.lean#L117\"><code>aesop_cat</code></a>.</p>",
        "id": 319018188,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672675126
    },
    {
        "content": "<p>Thank you!  Looking forward to trying it!</p>",
        "id": 319018868,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672675376
    }
]