[
    {
        "content": "<p>I was trying to understand the <code>Sigma</code> type, but I couldn't really find a way to use it, and to me, the error messages are a bit cryptic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sigmas</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"k\">then</span> <span class=\"n\">Bool</span> <span class=\"k\">else</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">sig</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma.mk</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">()</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Sigma.mk</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.60</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">?</span><span class=\"n\">m.60</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.57</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Sigma</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Typtype</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Sigma.mk</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.60</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sigma</span> <span class=\"bp\">?</span><span class=\"n\">m.60</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.57</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Sigma</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 275881266,
        "sender_full_name": "Joseph O",
        "timestamp": 1647653281
    },
    {
        "content": "<p><code>f 4</code> is a type, not an element, so you should not be using it in <code>Sigma.mk</code></p>",
        "id": 275881656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647653810
    },
    {
        "content": "<p>you want to use something like <code>true</code> there instead</p>",
        "id": 275881660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647653822
    },
    {
        "content": "<p>also <code>Sigma.mk (4, true)</code> is not correct syntax (it is actually constructing a pair and then passing the pair to the first argument of <code>Sigma.mk</code>), you want <code>Sigma.mk 4 true</code></p>",
        "id": 275881719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647653887
    },
    {
        "content": "<p>you can also write that as <code>\\&lt;4, true\\&gt;</code></p>",
        "id": 275881742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647653938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 275882284,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647654681
    }
]