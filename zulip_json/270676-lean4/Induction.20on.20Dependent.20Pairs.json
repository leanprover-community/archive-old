[
    {
        "content": "<p>I'm trying to write a function that will generate all elements of <code>Fin n</code> for any <code>n</code>. To do that I wrote a helper inductive function on <code>Fin n</code> that would return all the elements of <code>Fin n</code> below a certain value. However, even though the first element of the pair decreases, lean cannot prove termination. Is there anything I can do to remedy this? This is the failing function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.ltSucc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Less</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>               <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ltSucc</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">allBelow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">@</span><span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">@</span><span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">allBelow</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Nat.ltTrans</span> <span class=\"o\">(</span><span class=\"n\">Nat.ltSucc</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">lt</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I'm using lean 4 nightly and the specific error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">allBelow</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">recursion</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span> <span class=\"n\">yet</span>\n</code></pre></div>",
        "id": 223719252,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611360882
    },
    {
        "content": "<p>You have to write this as a function which is structurally recursive, by first untupling</p>",
        "id": 223726836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611369241
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.ltSucc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Less</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>               <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ltSucc</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">allBelow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span>\n  <span class=\"n\">where</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lt</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">aux</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.ltTrans</span> <span class=\"o\">(</span><span class=\"n\">Nat.ltSucc</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 223727003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611369501
    }
]