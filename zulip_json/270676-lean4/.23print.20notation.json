[
    {
        "content": "<p>How do I find out where notation is defined?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"c1\">-- `Go to definition` takes me to `Nat`</span>\n<span class=\"c1\">-- `Go to declaration` takes me to `Nat`</span>\n<span class=\"c1\">-- `Go to type definition` doesn't do anything</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> did write a <code>#print notation</code> a while ago <a href=\"https://github.com/kbuzzard/mathlib4_experiments/blob/master/mathlib4_experiments/Commands/print_notation.lean\">here</a> but unfortunately it no longer compiles.</p>",
        "id": 305412990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666374927
    },
    {
        "content": "<p>what's the notation here?</p>",
        "id": 305413278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666375037
    },
    {
        "content": "<p>Oh, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>?</p>",
        "id": 305413519,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666375111
    },
    {
        "content": "<p>I don't know the answer to your question, but <code>notation \"ℕ\" =&gt; Nat</code> is in <code>Mathlib.Init.Data.Nat.Basic</code>.</p>",
        "id": 305423014,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666378491
    },
    {
        "content": "<p>Thanks -- yeah, I found it in the end (actually Jason KY told me where it was) but now I'm interested in the general question. Yesterday I had the same question about where the notation <code>!</code> for boolean <code>not</code> was defined, and here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!</span><span class=\"n\">b</span>\n</code></pre></div>\n<p>F12 with your cursor to the left of <code>!</code> just works, but for <code>\\N</code> I couldn't get it to work.</p>",
        "id": 305427911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666380280
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , this is a bit of a design question since I think we have all the information we need to jump to the syntax and are deliberately ignoring it to jump to <code>Nat</code> instead</p>",
        "id": 305442301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666386125
    },
    {
        "content": "<p>but the names \"go to definition\", \"go to declaration\", \"go to type definition\" are utterly non-mnemonic for me and I forget what tasks have been assigned to which</p>",
        "id": 305442419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666386171
    },
    {
        "content": "<p>Related discussion: <a href=\"https://github.com/leanprover/lean4/issues/1722\">https://github.com/leanprover/lean4/issues/1722</a></p>",
        "id": 305443854,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666386841
    },
    {
        "content": "<p>If there's #print notation then it matters less</p>",
        "id": 305447004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666388236
    },
    {
        "content": "<p>There isn't, and that is actually pretty hard to implement</p>",
        "id": 305447265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666388357
    },
    {
        "content": "<p>We could do something like <a href=\"https://github.com/leanprover/lean4/pull/1722\">lean4#1722</a> where <code>#print notation e</code> parses <code>e</code> as a term, and then shows info for all syntax nodes that were generated</p>",
        "id": 305447531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666388435
    },
    {
        "content": "<p>I linked to an implementation which used to work above</p>",
        "id": 305447561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666388448
    },
    {
        "content": "<p>Or are you saying that it didn't work somehow?</p>",
        "id": 305447625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666388479
    },
    {
        "content": "<p>ah yeah I'm suggesting something kind of like that but without the quotes</p>",
        "id": 305447756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666388536
    },
    {
        "content": "<p>and with more hovers</p>",
        "id": 305447787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666388551
    },
    {
        "content": "<p>that should have been PR'd to mathlib4</p>",
        "id": 305448104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666388712
    }
]