[
    {
        "content": "<p>This is another instance of a problem we have seen in a few threads. While writing a <code>match</code>,  users want Lean to generate a proof that the previous cases were not taken. The <code>split</code> tactic does this, but it can only be applied after the <code>match</code> was defined. One possible workaround is to \"expand\" the <code>_</code>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Literal.isEq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.eq</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">float</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Another possible workaround is to \"refine\" <code>Literal.eq</code>'s type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Literal.isBool</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.eq</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">//</span> <span class=\"n\">l.isBool</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>  <span class=\"n\">bₗ</span><span class=\"o\">,</span> <span class=\"n\">bool</span>  <span class=\"n\">b</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">bₗ</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">iₗ</span> <span class=\"bp\">==</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">iₗ</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span>   <span class=\"n\">sₗ</span><span class=\"o\">,</span> <span class=\"n\">str</span>   <span class=\"n\">s</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">sₗ</span> <span class=\"bp\">==</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"o\">,</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.isEq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l.eq</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 278692368,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649770142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/unreachable.20match.20case/near/278690977\">said</a>:</p>\n<blockquote>\n<p>In my case I need all <code>Literal</code>s to be of the same type so I can have, for instance, <code>List Literal</code> with heterogeneous inner types</p>\n</blockquote>\n<p>Yes, that's a good reason. You could still wrap them in sigma types before adding them to the list, but that might nullify the benefits.</p>",
        "id": 278692612,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649770239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 278693183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649770495
    },
    {
        "content": "<p>Here is another alternative where you do not have to modify <code>Literal.eq</code>s definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Literal.eq'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">//</span> <span class=\"n\">b.isBool</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">eq</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isBool</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.isEq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l.eq'</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 278693588,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649770684
    },
    {
        "content": "<p>Modifying <code>Literal.eq</code> was actually perfect for me because I will only have one match case everywhere I use it <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 278693831,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649770827
    },
    {
        "content": "<p>Btw, why not define <code>eq</code> in terms of <code>isEq</code>?</p>",
        "id": 278694036,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649770929
    },
    {
        "content": "<p>That's even better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Literal.isBool</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.isEq</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">//</span> <span class=\"n\">l.isBool</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>  <span class=\"n\">bₗ</span><span class=\"o\">,</span> <span class=\"n\">bool</span>  <span class=\"n\">b</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">bₗ</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">iₗ</span> <span class=\"bp\">==</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">iₗ</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span>   <span class=\"n\">sₗ</span><span class=\"o\">,</span> <span class=\"n\">str</span>   <span class=\"n\">s</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"bp\">$</span> <span class=\"n\">sₗ</span> <span class=\"bp\">==</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"o\">,</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">bool</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.eq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l.isEq</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>And now <code>eq</code> simply returns a <code>Bool</code></p>",
        "id": 278694573,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649771166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Sebastian is suggesting this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Literal.isEq</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>  <span class=\"n\">bₗ</span><span class=\"o\">,</span> <span class=\"n\">bool</span>  <span class=\"n\">b</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bₗ</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iₗ</span> <span class=\"bp\">==</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"n\">iₗ</span><span class=\"o\">,</span> <span class=\"n\">float</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">iₗ</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"n\">fₗ</span><span class=\"o\">,</span> <span class=\"n\">int</span>   <span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fₗ</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofInt</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">str</span>   <span class=\"n\">sₗ</span><span class=\"o\">,</span> <span class=\"n\">str</span>   <span class=\"n\">s</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sₗ</span> <span class=\"bp\">==</span> <span class=\"n\">s</span><span class=\"bp\">ᵣ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"o\">,</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Literal.eq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">isEq</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 278694941,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649771337
    },
    {
        "content": "<p>Lots of ideas. Thanks!! I will probably mix them a bit</p>",
        "id": 278695402,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649771554
    }
]