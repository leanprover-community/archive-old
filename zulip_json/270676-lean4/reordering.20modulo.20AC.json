[
    {
        "content": "<p>Is there a Lean4 tactic that can reorder modulo AC? Simp doesn't seem to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">and_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">unsolved goals</span>\n<span class=\"cm\">a b c d : Prop</span>\n<span class=\"cm\">⊢ a ∧ b ∧ c ∧ c ∧ b ∧ a</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Or with an operator that simp does not know:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">infixl</span> <span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" # \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">hash_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">#</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">#</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">hash_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">#</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">#</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">#</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">#</span> <span class=\"n\">b</span> <span class=\"bp\">#</span> <span class=\"n\">c</span> <span class=\"bp\">#</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">#</span> <span class=\"n\">c</span> <span class=\"bp\">#</span> <span class=\"n\">b</span> <span class=\"bp\">#</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c\">/-</span><span class=\"cm\"> doesn't terminate -/</span>\n</code></pre></div>",
        "id": 260779395,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1636454310
    },
    {
        "content": "<p>What happens if you make hash_assoc.symm the simp lemma instead? I think this was the way around that it was when add_assoc was a simp lemma</p>",
        "id": 260783788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636457049
    },
    {
        "content": "<p>You also need <code>a # (b # c) = b # (a # c)</code> (not 100% sure about the parens).</p>",
        "id": 260783942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636457149
    },
    {
        "content": "<p>Oh, wow, thanks!</p>",
        "id": 260802234,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1636467030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> On another thread you wrote:</p>\n<blockquote>\n<p>Medium-long term there is also AC-simplification in development.</p>\n</blockquote>\n<p>So then <code>simp</code> actually currently doesn't support what I have been trying to do above? I have some examples now where it fails...</p>",
        "id": 266822904,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1641310901
    },
    {
        "content": "<p>if anyone wants to implement modulo AC tactics for Lean, please feel free to take inspiration from Coq's AAC tactics, which recently got some enhancements for idempotent operators: <a href=\"https://github.com/coq-community/aac-tactics\">https://github.com/coq-community/aac-tactics</a></p>",
        "id": 267028959,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1641449365
    },
    {
        "content": "<p>fyi: <a href=\"https://github.com/leanprover/lean4/pull/1032\">https://github.com/leanprover/lean4/pull/1032</a></p>",
        "id": 274188864,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1646428311
    }
]