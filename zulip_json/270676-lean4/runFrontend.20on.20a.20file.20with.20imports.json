[
    {
        "content": "<p>Hello! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nI'm trying to run <code>Lean.Elab.runFrontend</code> on a file that has imports. It works fine if the file only imports builtin content like <code>Init.Data</code> etc. But when I try to run it on a file that imports content from another file in my project, it causes errors like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>examples/Foo.lean:2:0: error: unknown package 'Yatima'\nYou might need to open '/home/arthur/dev/lean/yatima-lang' as a workspace in your editor\nexamples/Foo.lean:7:6: error: expected '=&gt;'\nexamples/Foo.lean:11:6: error: expected '=&gt;'\nexamples/Foo.lean:15:6: error: expected '=&gt;'\nexamples/Foo.lean:32:0: error: invalid 'end', insufficient scopes\n</code></pre></div>\n<p>I'm already doing <code>Lean.initSearchPath $ ← Lean.findSysroot</code> before running the frontend btw. Help is very much appreciated <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 288451784,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656969677
    },
    {
        "content": "<p>How are your running the file that is executing <code>runFrontend</code>? Are you building an executable and doing <code>lake env foo</code>?</p>",
        "id": 288457143,
        "sender_full_name": "Mac",
        "timestamp": 1656973682
    },
    {
        "content": "<p><code>LEAN_PATH</code> needs to be augmented with the paths of third-party packages' olean directories in order for imports to work (which is what <code>lake env</code> does).</p>",
        "id": 288457479,
        "sender_full_name": "Mac",
        "timestamp": 1656974006
    },
    {
        "content": "<p>Oh, let me try that!</p>",
        "id": 288457829,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656974345
    },
    {
        "content": "<p>Oh wow that worked! Tyvm <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 288458454,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656974969
    },
    {
        "content": "<p>Btw, is there a way for me to set the environment <em>from within</em> my binary so the user doesn't have to use <code>lake env</code>?</p>",
        "id": 288458471,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656974999
    },
    {
        "content": "<p>If your goal is to support arbitrary third-party packages specified through Lake then, no, not really. </p>\n<p>If you have a fixed set of additional  modules you want to import, you can add their olean directories to search path via <code>initSearchPath (← Lean.findSysroot) #[&lt;more&gt;, &lt;olean&gt;, &lt;dirs&gt;]</code>. </p>\n<p>If really don't like using <code>lake env</code>, you can either import Lake itself use it methods to figure out the olean directories of the workspace, or you can invoke <code>lake print-paths &lt;imports&gt;</code> from within your binary to get the set of olean directories for the imports as JSON (see <code>LeanPaths</code>).</p>",
        "id": 288459964,
        "sender_full_name": "Mac",
        "timestamp": 1656976562
    },
    {
        "content": "<p>You mean doing this</p>\n<blockquote>\n<p>import Lake itself use it methods to figure out the olean directories of the workspace</p>\n</blockquote>\n<p>To, then, do this:</p>\n<blockquote>\n<p><code>initSearchPath (← Lean.findSysroot) #[&lt;more&gt;, &lt;olean&gt;, &lt;dirs&gt;]</code></p>\n</blockquote>\n<p>Did I get it right?</p>",
        "id": 288460158,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656976768
    },
    {
        "content": "<p>No</p>",
        "id": 288460250,
        "sender_full_name": "Mac",
        "timestamp": 1656976863
    },
    {
        "content": "<p>Those were alternative options.</p>",
        "id": 288460258,
        "sender_full_name": "Mac",
        "timestamp": 1656976881
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 288460277,
        "sender_full_name": "Mac",
        "timestamp": 1656976909
    },
    {
        "content": "<blockquote>\n<p>import Lake itself use it methods to figure out the olean directories of the workspace</p>\n</blockquote>\n<p>What do I do with those directories?</p>",
        "id": 288460363,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656976985
    },
    {
        "content": "<p>That is, you can either already have a fixed set of directories you know about and do  <code>initSearchPath (← Lean.findSysroot) #[&lt;more&gt;, &lt;olean&gt;, &lt;dirs&gt;</code>. OR, you can import Lake and ask it to figure things out itself.  For example, doc-gen4 does approximately this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.findInstall</span><span class=\"bp\">?</span>\n<span class=\"k\">match</span> <span class=\"n\">Lake.Cli.mkLakeConfig</span> <span class=\"o\">{</span><span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">}</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">config</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"o\">:</span> <span class=\"n\">Lake.Workspace</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.loadWorkspace</span> <span class=\"n\">config</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">Lake.MonadLog.eio</span>\n  <span class=\"k\">let</span> <span class=\"n\">lean</span> <span class=\"o\">:=</span> <span class=\"n\">config.leanInstall</span>\n  <span class=\"k\">if</span> <span class=\"n\">lean.githash</span> <span class=\"bp\">≠</span> <span class=\"n\">Lean.githash</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"WARNING: This doc-gen was built with Lean: {Lean.githash} but the project is running on: {lean.githash}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">lake</span> <span class=\"o\">:=</span> <span class=\"n\">config.lakeInstall</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lake.mkBuildContext</span> <span class=\"n\">ws</span> <span class=\"n\">lean</span> <span class=\"n\">lake</span>\n  <span class=\"o\">(</span><span class=\"n\">ws.root.buildImportsAndDeps</span> <span class=\"n\">imports</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">())</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">Lake.MonadLog.eio</span> <span class=\"n\">ctx</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">sp</span> <span class=\"o\">:</span> <span class=\"n\">Lean.SearchPath</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">sp</span> <span class=\"bp\">←</span> <span class=\"n\">addSearchPathFromEnv</span> <span class=\"n\">sp</span>\n  <span class=\"n\">sp</span> <span class=\"o\">:=</span> <span class=\"n\">lake.oleanDir</span> <span class=\"o\">::</span> <span class=\"n\">lean.oleanDir</span> <span class=\"o\">::</span> <span class=\"n\">sp</span>\n  <span class=\"n\">sp</span> <span class=\"o\">:=</span> <span class=\"n\">ws.oleanPath</span> <span class=\"bp\">++</span> <span class=\"n\">sp</span>\n  <span class=\"n\">searchPathRef.set</span> <span class=\"n\">sp</span>\n  <span class=\"c1\">-- ...</span>\n<span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">err</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">err.toString</span>\n</code></pre></div>",
        "id": 288460386,
        "sender_full_name": "Mac",
        "timestamp": 1656977034
    },
    {
        "content": "<p>Can't I import Lake to figure out the oleans directory and then pass it to <code>initSearchPath (← Lean.findSysroot) #[&lt;more&gt;, &lt;olean&gt;, &lt;dirs&gt;</code>?</p>",
        "id": 288460498,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656977154
    },
    {
        "content": "<p>Well, that is partly what the above code does. The problem is that <code>initSearchPath</code> does not work they way you want if you have more builtin modules you wish to add (as <code>initSearchPath</code> will prioritize user modules over builtin ones, which can cause bugs).</p>",
        "id": 288461005,
        "sender_full_name": "Mac",
        "timestamp": 1656977651
    },
    {
        "content": "<p>The above code also builds the imports but you can skip that step if desired.</p>",
        "id": 288461122,
        "sender_full_name": "Mac",
        "timestamp": 1656977798
    },
    {
        "content": "<p>This happens when I <code>import Lake</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: ld.lld: error: undefined symbol: initialize_Lake\n&gt;&gt;&gt; referenced by Frontend.c\n&gt;&gt;&gt;               ./build/ir/Yatima/Compiler/Frontend.o:(initialize_Yatima_Compiler_Frontend)\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre></div>",
        "id": 288465655,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656982705
    },
    {
        "content": "<p>Solution: I had to add Lake as a dependency in my <code>lakefile.lean</code>. Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>!</p>",
        "id": 288518171,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657022969
    }
]