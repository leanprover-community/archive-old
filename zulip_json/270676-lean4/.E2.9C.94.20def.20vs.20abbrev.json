[
    {
        "content": "<p>Thank you!</p>\n<p>Is the rule of thumb, then, to use def by default and switch to abbrev only when needed such as the case you mentioned?</p>",
        "id": 286843462,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655763474
    },
    {
        "content": "<p>That's what I always do at least.</p>",
        "id": 286843569,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655763557
    },
    {
        "content": "<p>If you're familiar with Haskell, <code>def</code> is sort of like <code>newtype</code> (though doesn't involve defining a new type constructor) and <code>abbrev</code> is sort of like <code>type</code> (for creating type synonyms).</p>",
        "id": 286844442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655764392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 286845803,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655765649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20def.20vs.20abbrev/near/286841674\">said</a>:</p>\n<blockquote>\n<p><code>abbrev</code> is a shortcut for a <code>def</code> tagged with <code>@[reducible]</code> </p>\n</blockquote>\n<p>Fyi, I believe <code>abbrev</code> also marks the definition as <code>@[inline]</code> as well.</p>",
        "id": 286847301,
        "sender_full_name": "Mac",
        "timestamp": 1655767176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20def.20vs.20abbrev/near/286844442\">said</a>:</p>\n<blockquote>\n<p>If you're familiar with Haskell, <code>def</code> is sort of like <code>newtype</code> (though doesn't involve defining a new type constructor) and <code>abbrev</code> is sort of like <code>type</code> (for creating type synonyms).</p>\n</blockquote>\n<p>If I remember correctly, <code>type</code>, in Haskell, is a shallow veneer that bleeds through in error messages, for instance. Does <code>abbrev</code> have the same, I guess, drawback: i.e. I defined my type with PairCtx but error messages will show <code>(Type × List (String × Type))</code>?</p>",
        "id": 286900075,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655811614
    }
]