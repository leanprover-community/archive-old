[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> have you tried a reflection-based ring tactic but using <code>dsimp</code> for the computation?</p>",
        "id": 225255285,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612493869
    },
    {
        "content": "<p>yes, that's <code>ring2</code></p>",
        "id": 225255328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493887
    },
    {
        "content": "<p>well it doesn't use <code>dsimp</code></p>",
        "id": 225255338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493901
    },
    {
        "content": "<p>I'm not sure how that would be better</p>",
        "id": 225255343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493908
    },
    {
        "content": "<p><code>simp</code> has a lot of performance problems when it is (ab)used as an evaluator</p>",
        "id": 225255373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493948
    },
    {
        "content": "<p>I haven't done anything re: <code>ring</code> in lean 4 though</p>",
        "id": 225255393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612493984
    },
    {
        "content": "<p>I remember during Certigrad, we got a gagillion-X speedup by making <code>dsimp</code> produce a detailed <code>rfl</code> proof.</p>",
        "id": 225255457,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612494023
    },
    {
        "content": "<p>Do you have any idea how much slower <code>ring2</code> is than <code>ring</code> in lean3?</p>",
        "id": 225255481,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612494058
    },
    {
        "content": "<p>It was modest, something like 1.5x</p>",
        "id": 225255492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612494077
    },
    {
        "content": "<p>but you have to bend over backwards to write kernel computations that compute well (see the other thread)</p>",
        "id": 225255526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612494121
    },
    {
        "content": "<p>I found it to be more robust to just generate proof terms</p>",
        "id": 225255581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612494152
    },
    {
        "content": "<p>Also the reflection approach is less flexible wrt \"optional features\" like negation in your (semi)ring expression</p>",
        "id": 225255735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612494298
    }
]