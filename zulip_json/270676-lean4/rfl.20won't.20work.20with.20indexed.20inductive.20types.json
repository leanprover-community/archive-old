[
    {
        "content": "<p>Anyone know what I'm doing wrong here: <a href=\"https://github.com/leanprover/lean4/issues/837\">https://github.com/leanprover/lean4/issues/837</a>?</p>\n<p>I ended up working around this by replacing Wk with a struct containing a RawWk and a Prop, but I still wonder what's wrong.</p>",
        "id": 263354092,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1638391013
    },
    {
        "content": "<p>Some more digging:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Wk</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wk</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lift</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wk</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wk_comp</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.id</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.step</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.step</span> <span class=\"o\">(</span><span class=\"n\">wk_comp</span> <span class=\"n\">ρ</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.step</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.step</span> <span class=\"o\">(</span><span class=\"n\">wk_comp</span> <span class=\"n\">ρ</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.lift</span> <span class=\"o\">(</span><span class=\"n\">wk_comp</span> <span class=\"n\">ρ</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"c1\">-- they indeed match:</span>\n<span class=\"k\">#check</span> <span class=\"n\">ρ</span>                             <span class=\"c1\">-- ρ : Wk m n</span>\n<span class=\"k\">#check</span> <span class=\"n\">wk_comp</span> <span class=\"n\">Wk.id</span> <span class=\"n\">ρ</span> <span class=\"c1\">-- wk_comp Wk.id ρ : Wk m n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wk_comp_id_id'</span> <span class=\"o\">{</span><span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">wk_comp</span> <span class=\"n\">Wk.id</span> <span class=\"n\">ρ</span> <span class=\"bp\">=</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c1\">-- (kernel) declaration type mismatch, 'wk_comp_id_id'' has type</span>\n<span class=\"c1\">--  ∀ {m n : Nat} {ρ : Wk m n}, ρ = ρ but it is expected to have type</span>\n<span class=\"c1\">--  ∀ {m n : Nat} {ρ : Wk m n}, wk_comp Wk.id ρ = ρ</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wk_comp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"c1\">-- goals accomplished</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wk_comp_id_id</span> <span class=\"o\">{</span><span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">wk_comp</span> <span class=\"n\">Wk.id</span> <span class=\"n\">ρ</span> <span class=\"bp\">=</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">wk_comp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"c1\">-- error: no goals to be solved</span>\n</code></pre></div>",
        "id": 263359011,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638393495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Wk</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">step</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wk</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lift</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wk</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wk_comp</span> <span class=\"o\">(</span><span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.id</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.step</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.step (wk_comp ρ σ)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.id</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.lift ρ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.step</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.step (wk_comp ρ σ)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.lift (wk_comp ρ σ)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">wk_comp_id_id'</span> <span class=\"o\">{</span><span class=\"n\">ρ</span><span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">wk_comp</span> <span class=\"n\">Wk.id</span> <span class=\"n\">ρ</span> <span class=\"bp\">=</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I just used <code>sorry</code> on the match possibilities that weren't being used. The trick was fixing <code>variable {n m l: Nat}</code> instead of having those as implicit arguments of the function</p>",
        "id": 263360831,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638394497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> This has exactly the same problem, but I wanted to mention that you can use this syntax (implicit implicit arguments and folding in the match notation):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wk_comp</span> <span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.id</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.step</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.step</span> <span class=\"o\">(</span><span class=\"n\">wk_comp</span> <span class=\"n\">ρ</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.step</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.step</span> <span class=\"o\">(</span><span class=\"n\">wk_comp</span> <span class=\"n\">ρ</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.lift</span> <span class=\"o\">(</span><span class=\"n\">wk_comp</span> <span class=\"n\">ρ</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263361698,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638394961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> If you <code>sorry</code>-out the cases in the original version the declaration type mismatch goes away, too, so <code>variable</code> is probably not what's seeming to fix it.</p>",
        "id": 263362057,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638395139
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263362249,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638395226
    },
    {
        "content": "<p>It's not just any <code>sorry</code> pattern either. It works as long as you <code>sorry</code>-out these three:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wk_comp</span> <span class=\"o\">:</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Wk</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">Wk</span> <span class=\"n\">n</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.id</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.step</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.step (wk_comp ρ σ)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.step</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.step (wk_comp ρ σ)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">Wk.lift</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Wk.lift (wk_comp ρ σ)</span>\n</code></pre></div>",
        "id": 263362855,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638395514
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263362911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638395524
    },
    {
        "content": "<p>(the recursive calls)</p>",
        "id": 263363017,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638395598
    },
    {
        "content": "<p>I can post how I fixed it tomorrow if you guys want, but I do think something is quite broken here</p>",
        "id": 263367377,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1638397989
    },
    {
        "content": "<p>Pushed a fix for this: <a href=\"https://github.com/leanprover/lean4/commit/c42196440f6346298b85891a35053dd94ca95a02\">https://github.com/leanprover/lean4/commit/c42196440f6346298b85891a35053dd94ca95a02</a></p>",
        "id": 263379437,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1638406169
    }
]