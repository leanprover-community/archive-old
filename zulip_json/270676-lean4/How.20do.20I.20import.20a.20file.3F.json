[
    {
        "content": "<p>how do I import a file in the same dir? I'm trying import Base, but it says nat_exp.lean:1:0: error: unknown package 'Base', even though there is a file named Base.lean on the same directory, which type-checks just fine</p>",
        "id": 296884219,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662147392
    },
    {
        "content": "<p>I don't know much about Lean 4 but I do know that in the maths library they are always doing <code>import Mathlib.Logic.Basic</code> etc. If you're in a package then try aopending the package name?</p>",
        "id": 296884567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662147574
    },
    {
        "content": "<p>I'm not in a package I guess, I just created a directory and added 2 Lean files, and attempted to import one into another. I guess I'm missing something about how packages work</p>",
        "id": 296884834,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662147691
    },
    {
        "content": "<p>also, <code>import .Base</code> results in <code>nat_exp.lean:1:7: error: expected identifier</code></p>",
        "id": 296885259,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662147897
    },
    {
        "content": "<p>Again I don't know much about Lean 4, but in Lean 3 you can't just create random files and expect imports to work. A Lean 3 project is set up with some infrastructure which tells the system where to look when trying to import files. Aah! See <a href=\"https://leanprover.github.io/lean4/doc/quickstart.html\">https://leanprover.github.io/lean4/doc/quickstart.html</a> , section \"Create a Lean Project\". This is for Lean 4 and it also says that imports won't work unless you make a new package or project or whatever these things are called in Lean 4 (they seem to be called both?)</p>",
        "id": 296885327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662147931
    },
    {
        "content": "<p>I think the preferred way to make a new project is using <code>lake new Foo</code> (perhaps with some additional flags).</p>",
        "id": 296885563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662148059
    },
    {
        "content": "<p>i used <code>lake new Foo</code>, and then attempted <code>lean Main.lean</code> inside it, and I got <code>Main.lean:1:0: error: unknown package 'Foo'</code></p>",
        "id": 296886449,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662148437
    },
    {
        "content": "<p>what are you trying to do? Build the package? Run the executable?</p>",
        "id": 296886676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662148522
    },
    {
        "content": "<p>I just want to type-check a file <code>Main.lean</code> which imports another file <code>Base.lean</code>. That's all. I don't want packages nor anything fancy</p>",
        "id": 296886839,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662148589
    },
    {
        "content": "<p>Anyway, this is all accomplished with lake. <code>lake build</code> will typecheck (and build) everything</p>",
        "id": 296886875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662148608
    },
    {
        "content": "<p>I want to type-check just a single file though. I have a <code>Base.lean</code> file which a bunch of definitions, and <code>File_0.lean</code>, <code>File_1.lean</code>, <code>File_2.lean</code> etc. etc., which import <code>Base.lean</code>. I want to type-check each file independently, to benchmark. But using <code>lean File_0.lean</code> tells me <code>Base</code> isn't a package.</p>",
        "id": 296886996,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662148674
    },
    {
        "content": "<p>I see. Unfortunately, I don't know how to accomplish that in Lean4.</p>",
        "id": 296887421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662148831
    },
    {
        "content": "<p>Someone who knows will surely come along and help out soon.</p>",
        "id": 296887452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662148846
    },
    {
        "content": "<p>It is okay. Thanks for your patience!</p>",
        "id": 296888495,
        "sender_full_name": "Victor Maia",
        "timestamp": 1662149321
    },
    {
        "content": "<p>Does <code>lean Base.lean File_1.lean</code> work?</p>",
        "id": 296892002,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1662151078
    },
    {
        "content": "<p>I think <code>lake</code> figures out which files to pass to <code>lean</code>, but you can do that manually</p>",
        "id": 296892115,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1662151137
    },
    {
        "content": "<p>you have to declare it as library in <code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- file: lakefile.lean</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Base</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- file: Main.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Base</span>\n</code></pre></div>",
        "id": 296909768,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1662161121
    },
    {
        "content": "<p>You will get real time type checking while you edit if you use VS Code. There's some <a href=\"https://github.com/leanprover/lean4-samples\">lean4 sample</a> with a demo video showing how easy it is to set this up on gitpod.  Or if you want to use your local machine see <a href=\"https://youtu.be/zyXtbb_eYbY\">Quick Tour  of lean4 in VS Code</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zyXtbb_eYbY\" href=\"https://youtu.be/zyXtbb_eYbY\"><img src=\"https://uploads.zulipusercontent.net/46d9761064dae13ddb52ea113b9de46a94999c0e/68747470733a2f2f692e7974696d672e636f6d2f76692f7a79587462625f655962592f64656661756c742e6a7067\"></a></div>",
        "id": 296932680,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1662171913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372571\">Victor Maia</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20do.20I.20import.20a.20file.3F/near/296886996\">said</a>:</p>\n<blockquote>\n<p>I want to type-check just a single file though. I have a <code>Base.lean</code> file which a bunch of definitions, and <code>File_0.lean</code>, <code>File_1.lean</code>, <code>File_2.lean</code> etc. etc., which import <code>Base.lean</code>. I want to type-check each file independently, to benchmark. But using <code>lean File_0.lean</code> tells me <code>Base</code> isn't a package.</p>\n</blockquote>\n<p>Once you have <code>lake build</code> working, you can run individual files using <code>lake env lean File_0.lean</code>.</p>",
        "id": 296963464,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662196568
    }
]