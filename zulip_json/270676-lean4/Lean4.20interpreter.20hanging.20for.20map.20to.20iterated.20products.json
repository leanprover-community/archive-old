[
    {
        "content": "<p>I am trying to use a type <code>TermSeq</code> for terms of various types, with a conversion to iterated products for convenience in some situations. Strangely this is hanging while building (both in VS Code and <code>leanpkg build</code>). Here is the code causing the crash. I am sharing this for any feedback before creating an issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TermSeq</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">TermSeq</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">TermSeq</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TermSeq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">TermSeq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodType</span> <span class=\"o\">:</span> <span class=\"n\">TermSeq</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">prodType</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asProd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span> <span class=\"n\">TermSeq</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">prodType</span> <span class=\"n\">ts</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(()</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">asProd</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TermSeq</span>\n</code></pre></div>",
        "id": 256357147,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1633495839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20interpreter.20hanging.20for.20map.20to.20iterated.20products/near/256357147\">said</a>:</p>\n<blockquote>\n<p>I am trying to use a type <code>TermSeq</code> for terms of various types, with a conversion to iterated products for convenience in some situations. Strangely this is hanging while building (both in VS Code and <code>leanpkg build</code>).</p>\n</blockquote>\n<p>Yep, the example hangs for me as well. Surprisingly, this variant (with an extra alternate for the special case of a singleton), on the other hand, does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HList.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">HList</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">HList</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tupleType</span> <span class=\"o\">:</span> <span class=\"n\">HList.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PUnit</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">tupleType</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toTuple</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">HList</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t.tupleType</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">toTuple</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">cons</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toTuple</span> <span class=\"c1\">-- (true, 0)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">cons</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">tupleType</span> <span class=\"c1\">-- Bool × Nat</span>\n</code></pre></div>",
        "id": 256360728,
        "sender_full_name": "Mac",
        "timestamp": 1633499092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> I pushed a fix for the <code>TermSeq</code> repro. Thanks for reporting the issue.</p>",
        "id": 256474306,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633550240
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 256505840,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1633566863
    }
]