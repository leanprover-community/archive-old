[
    {
        "content": "<p>I still don't fully understand the details behind universes+cumulativity (<a href=\"https://proofassistants.stackexchange.com/questions/716/why-is-cumulativity-not-a-given-in-proof-assistants\">I asked a question on the new SE recently</a> but I'm wondering what the status of cumulativity/compiler support of <code>ulift</code> is in Lean4.</p>\n<p>The reason I ask is because I recently had to use <code>ulift ℚ</code> in lean3, and realised that there was no <code>field (ulift α)</code> instance, and had to write it, which was tedious, and would dislike having to deal with it more and more often, and so I wonder if Lean4 brings any changes in this</p>",
        "id": 272683368,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645447511
    },
    {
        "content": "<p>The proof of <code>field (ulift A)</code> should be a copy paste job from e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift.comm_ring/src\">src#ulift.comm_ring</a></p>",
        "id": 272684129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645447944
    },
    {
        "content": "<p>I'm kind of surprised we didn't have it already</p>",
        "id": 272684148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645447964
    },
    {
        "content": "<p>pretty sure lean 4 changes nothing about the situation, and universe cumulativity is a huge step to take in exchange for the marginal benefit of using <code>ℚ</code> instead of <code>ulift ℚ</code> when you need a lifted type. Note that my proof in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> of the consistency of lean <em>does not work</em> in the presence of universe cumulativity, so we would be back in the Coq situation of \"consistency is widely believed but an open question\"</p>",
        "id": 272684374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645448138
    },
    {
        "content": "<p>what about implicit casts, or making explicit types like ℚ polymorphic? and yes, the proof was (modulo a tiny detail) just a copy paste job, but this seems like a nice thing the compiler could support so that we don't have to worry about it</p>",
        "id": 272684509,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645448229
    },
    {
        "content": "<p>maybe even a <code>@derive</code> handler</p>",
        "id": 272684516,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645448234
    },
    {
        "content": "<p>a derive handler like solution is possible, although I don't think the derive handler framework is designed for many classes on one type as opposed to one class on many types</p>",
        "id": 272684662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645448308
    },
    {
        "content": "<p>implicit casts are possible today, although I'm not sure if they will be consistently placed where we want</p>",
        "id": 272684780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645448369
    },
    {
        "content": "<p>Making types like Q polymorphic is a bad idea without some low level elaborator changes, because it will put lots of undetermined universes in statements and proofs, so we will have to specify them a lot more than we do today. We generally only use this method selectively, for example with <code>punit</code> and <code>pempty</code></p>",
        "id": 272685083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645448505
    },
    {
        "content": "<p>Making something like a derive handler for <code>ulift</code> has been on the back of my mind for a while. I think it's harder than it might seem if you want to include non-algebraic classes like <code>topological_space</code> (even <code>field</code> is not quite algebraic).</p>",
        "id": 272685837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645448927
    },
    {
        "content": "<p>In general, I think mathlib needs much better support for <code>ulift</code> (and conversely, shouldn't be going out of the way so much to support using multiple universes at once). The combination (1) no universe cumulativity, (2) <code>rat</code> is not universe polymorphic, (3) limited support/automation for <code>ulift</code> leads to an awkward situation and downstream hacks--you can ask <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> about <code>mv_polynomial pempty R</code> in LTE.</p>",
        "id": 272686015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645449021
    },
    {
        "content": "<p>This <em>almost</em> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ulift.field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">transport</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">equiv.ulift.symm</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃</span> <span class=\"n\">ulift</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272686209,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645449130
    },
    {
        "content": "<p>I don't really understand yet what the optimal situation should look like--it's a bit frustrating because 99% of the time the correct elaboration should be \"instantiate all universe parameters to the same universe variable <code>u</code>\"--but we could start by having instances for <code>ulift X</code>, which definitely seems correct anyways.</p>",
        "id": 272686325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645449205
    },
    {
        "content": "<p>Just found this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.ulift.field</span>\n</code></pre></div>",
        "id": 272686546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645449330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/universes/near/272684374\">said</a>:</p>\n<blockquote>\n<p>Note that my proof in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> of the consistency of lean <em>does not work</em> in the presence of universe cumulativity</p>\n</blockquote>\n<p>Is this about <code>Prop</code>, or does it already not work when the <code>Type u</code> universes are cumulative?</p>",
        "id": 272687092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645449643
    },
    {
        "content": "<p>It's a shame that there'd be issues if all <code>ℚ</code> (for example) were replaced with <code>ℚ.{?m_1}</code>.</p>",
        "id": 272687495,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645449878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> It essentially uses the unique typing property, and that proof was difficult and original. With cumulativity I'm not even sure what the analogous statement of unique typing is, but it is primarily important for distinguishing Prop from Type u. How can I prove that <code>Type u : Prop</code> is false?</p>",
        "id": 272687720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645450012
    },
    {
        "content": "<p>There is a part in the model construction where I want to know, for any expression, whether it denotes a proof or not. For well typed lean expressions, I can say <code>e : A</code> and <code>A : Sort u</code> and then if <code>u = 0</code>then it's a proof otherwise it's data. Importantly, if <code>u = 1</code> I want to deduce that it's not also the case that <code>u = 0</code>, which is saying that if <code>A : Type</code> then <code>A : Prop</code> is not derivable. With universe cumulativity this is not true</p>",
        "id": 272688179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645450259
    },
    {
        "content": "<p>In fact, cumulativity would also break the model construction itself, because the reason I ask the question is so I can translate forall differently from Pi. Cumulativity is going to force the two translations to match, because anything constructed in a low universe can be lifted without change to a higher universe. That sounds awfully close to a false statement: <code>\\lambda x : nat, (rfl : x = x)</code> translates to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∙</span></span></span></span> but <code>\\lambda x : nat, (rfl : (x = x : Type))</code>  translates to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo>↦</mo><mo>∙</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x\\in\\mathbb{N}\\mapsto \\bullet)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6999em;vertical-align:-0.011em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∙</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 272688602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645450525
    },
    {
        "content": "<p>Well the last example is why I suggested keeping Prop non-cumulative with Type.</p>",
        "id": 272688721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645450584
    },
    {
        "content": "<p>It's plausible that this is enough, but it would still be difficult to adapt, because <code>(A : Prop) -&gt; !(A : Type)</code> is just one small consequence of the unique typing theorem, which has to be stated in a general way and involve many clauses so that it can be proven by a (very large mutual) induction</p>",
        "id": 272689127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645450762
    },
    {
        "content": "<p>If making ulift(rat) a field was so easy then can someone come up with a one-liner to make ulift(int) totally ordered? Amelia needs this.</p>",
        "id": 272689346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645450870
    },
    {
        "content": "<p>I certainly agree the metatheory becomes murkier with cumulative universes and I don't think it's something we are likely to ever see in Lean.<br>\nI should have added another item to my list, (4) no support for hypothesized universe inequalities <code>u &lt;= v</code>--this is relevant because while you can define things like \"the category of <code>R</code>-modules in <code>Type v</code> for <code>R : Type u</code>\", it's not well-behaved when <code>u &gt; v</code> (e.g. it has a tensor product but no unit object, it has colimits but you can't construct them using the usual general machinery). And using circumlocutions like \"the category of <code>R</code>-modules in <code>Type (max u v)</code>\" tends to cause unification to break quickly. Things should be OK if we could require <code>u &lt;= v</code> in the formation of <code>Mod.{u v} R</code>, but we can't.<br>\nConsequently it's better to just use ring and modules in the same universe--and now we need <code>ulift</code> in a few places because <code>int</code> and <code>rat</code> and so on are trapped in <code>Type 0</code>. But since you have to deal with this universe issue somehow it's better to do it up front and put your base ring in the universe you want, and then never think about universes again.</p>",
        "id": 272691189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645451785
    },
    {
        "content": "<blockquote>\n<p>If making ulift(rat) a field was so easy then can someone come up with a one-liner to make ulift(int) totally ordered?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">equiv.linear_ordered_ring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">e.ring</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">e.injective.linear_ordered_ring</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">e.apply_symm_apply</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.ulift.linear_ordered_ring</span>\n</code></pre></div>",
        "id": 272699801,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645455983
    },
    {
        "content": "<p>From what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> said on my PR, this will mess up defeqs until a future change.</p>",
        "id": 272700028,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645456084
    },
    {
        "content": "<p>Right, we have two different families of <code>function.injective</code> lemmas; the ones with <code>_pow</code> <code>_nsmul</code> suffices, and the ones without</p>",
        "id": 272700168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456167
    },
    {
        "content": "<p>If you mix them you end up with diamonds in those fields</p>",
        "id": 272700187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456181
    },
    {
        "content": "<p>If you avoid the <code>_nsmul</code> ones, you end up with diamonds in the nat-actions</p>",
        "id": 272700218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456200
    },
    {
        "content": "<p>So I'd argue that the majority of those definitions (and all of the <code>equiv</code> ones) are foot-guns</p>",
        "id": 272700293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456219
    },
    {
        "content": "<p>I'm trying to fix that in <a href=\"https://github.com/leanprover-community/mathlib/pull/12126\">#12126</a>, but I have to patch all the feet with holes in at the same time</p>",
        "id": 272700332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456244
    },
    {
        "content": "<p>I think all the <code>function.injective</code> constructions are wrong in the same way, so as long as you don't mix them with anything else you should be fine.  (And I believe we don't have any instances for <code>ulift ℤ</code> yet.)</p>",
        "id": 272700622,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645456399
    },
    {
        "content": "<p>Right, but you have to mix them to create things like <code>add_comm_group</code> as <code>{ ..add_group_smul, add_comm_semigroup }</code></p>",
        "id": 272700823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456479
    },
    {
        "content": "<p>I did try the equiv.field that you suggested at a leaf lemma, and it refused to work, presumably because of these issues</p>",
        "id": 272700837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645456486
    },
    {
        "content": "<p>So it's not that _all_ the versions without <code>_smul</code> are bad, it's just the ones for which a <code>_smul</code> variant <em>could</em> exist but doesn't that are the traps. <code>add_comm_semigroup</code> has no nsmul operator so is safe.</p>",
        "id": 272700918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456522
    },
    {
        "content": "<p>Maybe the first step of the refactor should be to rename all the ones that are dangerous to <code>.injective.foo_bad_smul</code>, and remove the <code>smul</code> suffix from the ones that are not</p>",
        "id": 272701072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645456589
    },
    {
        "content": "<p>Maybe actually the best idea for compiler support in Lean4 is to make an automatic equiv/injection pushforward, and then this ulift stuff can be a special case that can get handled by some meta code</p>",
        "id": 272701379,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645456754
    },
    {
        "content": "<p>Right we should add such a command (after the port).  We'll also be able to add <code>to_additive</code> for classes.</p>",
        "id": 272701495,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645456803
    },
    {
        "content": "<p>I'm not sure why this would need compiler support. But then, I also seem to be the only person who thinks this is actually quite nontrivial to do.</p>",
        "id": 272702107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645457109
    },
    {
        "content": "<p>Meta support for something like \"given I've shown <code>+</code>, <code>0</code>, <code>le</code>, ... are preserved by this injective map <code>f</code>, transfer every typeclass possible to the domainof <code>f</code>\" would be useful</p>",
        "id": 272703711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645457890
    },
    {
        "content": "<p>Not so much generating the <code>injective</code> lemmas automatically, but applying them to <code>ulift</code> automatically</p>",
        "id": 272703741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645457913
    },
    {
        "content": "<p>Another way to hand that might be more typeclasses</p>",
        "id": 272703762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645457928
    },
    {
        "content": "<p>One way to get around <code>ULift</code> in a lot of instances is to just make the type in question universe polymorphic like <code>PUnit.{u} : Sort u</code>. A lot of parameterized types are already polymorphic (e.g., <code>List</code>, <code>Array</code>) so as long as the base type is polymorphic, the whole chain is polymorphic.</p>",
        "id": 273368199,
        "sender_full_name": "Mac",
        "timestamp": 1645916443
    },
    {
        "content": "<p>I think this is really the correct approach in theory, but then what becomes annoying in practice is that type formers like <code>-&gt;</code> and <code>Prod</code> are <em>too</em> polymorphic, so that types like <code>PRat -&gt; PRat</code> would always require additional universe annotations.</p>",
        "id": 273401884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645966137
    },
    {
        "content": "<p>What we would like is a command like <code>default universe u</code> that would just instantiate all universe variables to <code>u</code></p>",
        "id": 273402570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645966999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/universes/near/272684374\">said</a>:</p>\n<blockquote>\n<p>pretty sure lean 4 changes nothing about the situation, and universe cumulativity is a huge step to take in exchange for the marginal benefit of using <code>ℚ</code> instead of <code>ulift ℚ</code> when you need a lifted type. Note that my proof in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> of the consistency of lean <em>does not work</em> in the presence of universe cumulativity, so we would be back in the Coq situation of \"consistency is widely believed but an open question\"</p>\n</blockquote>\n<p>a weird ping-pong, but through the SE I've been made aware of <a href=\"https://arxiv.org/abs/1111.0123\">this</a> - does this not prove consistency for coq?</p>",
        "id": 273891361,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646261984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> It looks close, but as far as I can tell they never claim that the system they are proving consistent <em>is</em> Coq, and it seems to be missing some features from Coq like coinductive types, the <code>Set</code> and <code>SProp</code> universes, and impredicative inductive types. Also modules and other features of Coq that interact with the kernel are not touched. In short, while that paper could plausibly be used as the core of a proof of consistency of Coq, there is still more work to do to cover the full system.</p>",
        "id": 273957918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646306450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/universes/near/272700028\">said</a>:</p>\n<blockquote>\n<p>From what <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> said on my PR, this will mess up defeqs until a future change.</p>\n</blockquote>\n<p>We now live in this future</p>",
        "id": 274546039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646748909
    },
    {
        "content": "<p>So now can we have a partially ordered <code>ulift int</code> without any footholes?</p>",
        "id": 274560476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646755082
    },
    {
        "content": "<p>Yes</p>",
        "id": 282760044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652865163
    }
]