[
    {
        "content": "<p>How can I read a file with IO.FS.readFile? I currently have <code>let input ← IO.FS.readFile ⟨fname⟩</code> but I expected the input to be a String or a EStateM.Result and instead it's just an EStateM. The type is EStateM IO.Error IO.RealWorld String.</p>",
        "id": 314267063,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670342389
    },
    {
        "content": "<p>I'm pretty sure the type is just <code>IO String</code>.</p>",
        "id": 314274545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670344566
    },
    {
        "content": "<p>Maybe that unfolds to something with EStateM but why are you seeing that? We can only conjecture</p>",
        "id": 314274601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670344582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314274545\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure the type is just <code>IO String</code>.</p>\n</blockquote>\n<p>I figured it out. You have to include IO in the return type. The function's type was String, so I had to change it to IO String.</p>",
        "id": 314276727,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670345196
    },
    {
        "content": "<p>Now, I need to figure out how to get out of IO hell. I'm having to change the return type of every function to include IO. It seems like I either have to exclude the IO and let a file not found go silent or I include the IO and can report the file not found, but then the next function up has to handle the case where EStateM.Result.error occurs even though that function can't report anything.</p>",
        "id": 314277239,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670345349
    },
    {
        "content": "<p>Lean functions are pure, so <code>IO</code> bubbling up all the way to <code>main</code> is by design. All functions that interact with the outside world somewhere need to use <code>IO</code>.</p>",
        "id": 314280162,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1670346126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314280162\">said</a>:</p>\n<blockquote>\n<p>Lean functions are pure, so <code>IO</code> bubbling up all the way to <code>main</code> is by design. All functions that interact with the outside world somewhere need to use <code>IO</code>.</p>\n</blockquote>\n<p>Thanks. I do understand the reason for it. It seems like my best approach is to be happy with having a border between IO code and non-IO code. Everything that uses IO bubbles up to a function whose return type is Option String, so I'm just having this return none and ensuring that the other functions report.</p>",
        "id": 314281641,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670346554
    },
    {
        "content": "<p>It has to bubble up all the way to <code>main</code></p>",
        "id": 314282905,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1670346942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568708\">Ian Riley</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314277239\">said</a>:</p>\n<blockquote>\n<p>but then the next function up has to handle the case where EStateM.Result.error occurs even though that function can't report anything.</p>\n</blockquote>\n<p>You have no way to even get to the point of seeing <code>EStateM.Result.error</code> because you don't have an <code>IO.RealWorld</code> to run the IO action on.</p>",
        "id": 314293061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314293061\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"568708\">Ian Riley</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314277239\">said</a>:</p>\n<blockquote>\n<p>but then the next function up has to handle the case where EStateM.Result.error occurs even though that function can't report anything.</p>\n</blockquote>\n<p>You have no way to even get to the point of seeing <code>EStateM.Result.error</code> because you don't have an <code>IO.RealWorld</code> to run the IO action on.</p>\n</blockquote>\n<p>I learned that () counts as an IO.RealWorld.</p>",
        "id": 314293881,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670350310
    },
    {
        "content": "<p>Uh oh!</p>",
        "id": 314294160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350383
    },
    {
        "content": "<p>Last thing to figure out. How would you take <code>IO (String × String)</code> and turn it into <code>IO String</code>?</p>",
        "id": 314294169,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670350387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314294160\">said</a>:</p>\n<blockquote>\n<p>Uh oh!</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">selectChallenge</span> <span class=\"o\">(</span><span class=\"n\">year</span> <span class=\"n\">day</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">IO</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">solution</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">year</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2022</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Advent2022.selectDay</span> <span class=\"n\">day</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"k\">match</span> <span class=\"n\">solution</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">result</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">result</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">EStateM.Result.ok</span> <span class=\"o\">⟨</span><span class=\"n\">part1</span><span class=\"o\">,</span> <span class=\"n\">part2</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"year: {year}, day: {day} =&gt; ({part1}, {part2})\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">EStateM.Result.error</span> <span class=\"n\">err</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{err}\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Note that result () is able to destructure the <code>IO (String × String)</code></p>",
        "id": 314294574,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670350529
    },
    {
        "content": "<p>I suggest you find an <code>IO</code> tutorial--there must be good ones for Haskell, and maybe already Lean too?</p>",
        "id": 314294584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350531
    },
    {
        "content": "<p>This is pretty deeply wrong</p>",
        "id": 314294762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350581
    },
    {
        "content": "<p>I suggest you stick to something like this</p>",
        "id": 314294780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350586
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">_args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.lines</span> <span class=\"s2\">\"input\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"o\">:=</span> <span class=\"n\">solve</span> <span class=\"n\">input</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">output</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 314294955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350651
    },
    {
        "content": "<p>where <code>solve : String -&gt; String</code></p>",
        "id": 314294996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350666
    },
    {
        "content": "<p>or use <code>IO.FS.readFile</code> as appropriate</p>",
        "id": 314295067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670350683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314295067\">said</a>:</p>\n<blockquote>\n<p>or use <code>IO.FS.readFile</code> as appropriate</p>\n</blockquote>\n<p>I can't use IO.FS.readFile in main. My main is a CLI that takes a year and a day and directs those to a solver. The solver is responsible for knowing if a day has been solved, so it must return an Option. If the day has been solved, then it calls the solve to get the solution <code>(String × String)</code> because the challenges are divided into two parts. Solving a challenge requires reading an input file, so that gives us <code>IO (String × String)</code>.</p>",
        "id": 314296086,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670351030
    },
    {
        "content": "<blockquote>\n<p>The solver is responsible for knowing if a day has been solved, so it must return an Option... Solving a challenge requires reading an input file</p>\n</blockquote>\n<p>Then the solver must return <code>IO something</code>; perhaps <code>IO (Option something)</code>.</p>",
        "id": 314296304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314296304\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The solver is responsible for knowing if a day has been solved, so it must return an Option... Solving a challenge requires reading an input file</p>\n</blockquote>\n<p>Then the solver must return <code>IO something</code>; perhaps <code>IO (Option something)</code>.</p>\n</blockquote>\n<p>I could probably do that. So is this because the outside IO is what's permitting Results to be captured and tossed back?</p>",
        "id": 314296977,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670351319
    },
    {
        "content": "<p>You should never touch a <code>Result</code>, or unfold <code>IO</code> in any way</p>",
        "id": 314297028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351335
    },
    {
        "content": "<p>Unfortunately, the Lean 4 core library is not yet set up in a way to prevent you from doing it</p>",
        "id": 314297099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314297028\">said</a>:</p>\n<blockquote>\n<p>You should never touch a <code>Result</code>, or unfold <code>IO</code> in any way</p>\n</blockquote>\n<p>Why not? It's done several times throughout the source code of lean4.</p>",
        "id": 314297115,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670351364
    },
    {
        "content": "<p>Yes, but you didn't write lean 4.</p>",
        "id": 314297149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351380
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L22\">https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L22</a></p>",
        "id": 314297325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351418
    },
    {
        "content": "<p>&amp; line 25</p>",
        "id": 314297408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314297149\">said</a>:</p>\n<blockquote>\n<p>Yes, but you didn't write lean 4.</p>\n</blockquote>\n<p>I don't see what that has to do with anything. Destructuring results is a natural part of error handling. Are you saying that we should never write lean code that looks at whether a file access resulted in an ok or an err?</p>",
        "id": 314298403,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670351709
    },
    {
        "content": "<p>What you are doing is <strong>not the way to do that</strong></p>",
        "id": 314298717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351783
    },
    {
        "content": "<p>I see there is already some explanation of IO here:<br>\n<a href=\"https://leanprover.github.io/functional_programming_in_lean/hello-world.html\">https://leanprover.github.io/functional_programming_in_lean/hello-world.html</a></p>",
        "id": 314298746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670351791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314298717\">said</a>:</p>\n<blockquote>\n<p>What you are doing is <strong>not the way to do that</strong></p>\n</blockquote>\n<p>I don't disagree. The use of <code>()</code> as an IO.RealWorld seems like a total hack. Thanks for the link. I have read through that example. I just still have a lot of questions after, so I've been looking at the type information in InfoView and the lean4 source code to figure them out.</p>",
        "id": 314300324,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670352218
    },
    {
        "content": "<p>Unfortunately it's not really possible to understand IO by looking at its source. It would be better to look at some programs that use it.</p>",
        "id": 314300504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670352271
    },
    {
        "content": "<p>And it's especially easy to go wrong given that IO is not yet opaque</p>",
        "id": 314300611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670352309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314300611\">said</a>:</p>\n<blockquote>\n<p>And it's especially easy to go wrong given that IO is not yet opaque</p>\n</blockquote>\n<p>So if something returns an IO Option String, do I not have a way to get access to Option String with a match?</p>",
        "id": 314301585,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670352588
    },
    {
        "content": "<p>I suggest reading an IO tutorial!</p>",
        "id": 314301695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670352619
    },
    {
        "content": "<p>Since you said \"with a match\", the answer is no.</p>",
        "id": 314302169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670352765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314302169\">said</a>:</p>\n<blockquote>\n<p>Since you said \"with a match\", the answer is no.</p>\n</blockquote>\n<p>I figured it out. I just need to use the ← arrow and it works with match.</p>\n<p>Thanks for the help though. I think I've got everything I needed. I think my main problem was that I was thinking of IO strictly as a Result wrapper and not something that needed to be evaluated.</p>",
        "id": 314302591,
        "sender_full_name": "Ian Riley",
        "timestamp": 1670352885
    },
    {
        "content": "<p>One way to think about <code>IO α</code> is as a type <code>RealWorld -&gt; α</code> where <code>RealWorld</code> is just some hypothetical type with one and only one element, the actual real world i.e. state of your file system, network etc.</p>",
        "id": 314304464,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670353384
    },
    {
        "content": "<p>Just leaving this here: <a href=\"https://www.seas.upenn.edu/~cis1940/fall16/lectures/06-io-and-monads.html\">https://www.seas.upenn.edu/~cis1940/fall16/lectures/06-io-and-monads.html</a></p>",
        "id": 314306528,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1670353968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314304464\">said</a>:</p>\n<blockquote>\n<p>One way to think about <code>IO α</code> is as a type <code>RealWorld -&gt; α</code> where <code>RealWorld</code> is just some hypothetical type with one and only one element, the actual real world i.e. state of your file system, network etc.</p>\n</blockquote>\n<p>The hypothetical <code>RealWorld</code> type doesn't have only one element, it has an element for every possible state of the real world. Where this model breaks down is when you start treating it like a <code>StateM</code> and attempt to persist old values of the real world, because the computer can't do literal time travel</p>",
        "id": 314330471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670362352
    },
    {
        "content": "<p>Well this is fun...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span> <span class=\"n\">x.modifyGet</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"mi\">1</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"c1\">-- segfaults lean</span>\n</code></pre></div>",
        "id": 314332385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670363199
    },
    {
        "content": "<p>GHC Haskell also has this magical <code>RealWorld</code> type which can do limited time travelling. But of course you can't rely on the analogy too much because a computer can't (and hopefully can never) reach into your mind and delete the memory of what it just displayed.</p>",
        "id": 314387693,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670396103
    },
    {
        "content": "<p>I suggest adding more docs to the IO source code to prevent people getting confused over the magic? Last time I saw someone get confused about <code>outParam</code> which looks like it does nothing in the source code.</p>",
        "id": 314388345,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670396473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"568708\">@Ian Riley</span> You may also be interested in the new chapter on monads: <a href=\"https://leanprover.github.io/functional_programming_in_lean/monads.html\">https://leanprover.github.io/functional_programming_in_lean/monads.html</a></p>",
        "id": 314404790,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670403005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20a.20File/near/314304464\">said</a>:</p>\n<blockquote>\n<p>One way to think about <code>IO α</code> is as a type <code>RealWorld -&gt; α</code> where <code>RealWorld</code> is just some hypothetical type with one and only one element, the actual real world i.e. state of your file system, network etc.</p>\n</blockquote>\n<p>I think that a better mental model is that <code>IO α</code> is like <code>RealWorld → (α × RealWorld)</code> - that is, an IO action takes the world as input, returning a value plus a potentially-modified world. That is, it's a more like a state monad than it is like a reader monad. But it should clearly not support <code>get</code> and <code>set</code> operations - the primitives need to be structured to ensure that there's always precisely one world at any given time :-)</p>",
        "id": 314405376,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1670403224
    },
    {
        "content": "<p>Yes, world state threading is important for preserving the order of <code>IO</code> operations. <code>RealWorld</code> effectively is a linear type. There is an interesting correspondence to control edges in the <em>sea of nodes</em> SSA representation, for anyone who stumbled over that one before.</p>",
        "id": 314411405,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670405356
    }
]