[
    {
        "content": "<p>In both cases boolean multiplication is logical and.<br>\nIn lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_mulcomm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">mulComm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mulcomm</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bool.cases_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">bool.cases_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"n\">bool.cases_on</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">))⟩</span>\n</code></pre></div>\n<p>In lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MulComm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"n\">mulComm</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.casesOn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Bool.casesOn</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"n\">Bool.casesOn</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>Lean 4 error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"mi\">148</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.casesOn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.14758</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.14759</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.14757</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">u.14676</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">148</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Bool.casesOn</span> <span class=\"n\">a</span> <span class=\"bp\">?</span><span class=\"n\">m.14718</span> <span class=\"o\">(</span><span class=\"n\">Bool.casesOn</span> <span class=\"n\">b</span> <span class=\"bp\">?</span><span class=\"n\">m.14721</span> <span class=\"bp\">?</span><span class=\"n\">m.14722</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Bool.casesOn</span> <span class=\"n\">b</span> <span class=\"bp\">?</span><span class=\"n\">m.14721</span> <span class=\"bp\">?</span><span class=\"n\">m.14722</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.14757</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.14676</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.14757</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.14676</span>\n<span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"n\">more</span> <span class=\"n\">messages</span> <span class=\"n\">above...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to be honest, I am having trouble even reading this error message, and don't know how to proceed.</p>",
        "id": 235999667,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619293588
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235999757,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619293667
    },
    {
        "content": "<p>The important part of the error message is that you are using <code>fun</code> on something not of a function type (anymore). See <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#lambda-expressions\">https://leanprover.github.io/lean4/doc/lean3changes.html#lambda-expressions</a>, \"implicit lambdas\".</p>",
        "id": 236000231,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619294064
    },
    {
        "content": "<p>If I leave off the <code>λ a b =&gt;</code> then even though the context shows a and b of type Bool, I cannot case on them.<br>\nIf I use @fun instead of  λ , then it says that Bool.casesOn a is trying to prove a * b = a.</p>",
        "id": 236002383,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619295702
    },
    {
        "content": "<p>Here are  a few ways to do it in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MulComm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"n\">mulComm</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">and</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">mulComm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">mulComm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 236004079,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1619296986
    },
    {
        "content": "<p>If I write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n <span class=\"n\">mulComm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">137</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">by</span><span class=\"bp\">'</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">provided</span>\n<span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"n\">more</span> <span class=\"n\">messages</span> <span class=\"n\">above...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I try to define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulComm</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n <span class=\"n\">mulComm</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n                 <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n                 <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">137</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'a'</span>\n</code></pre></div>",
        "id": 236004131,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619297040
    },
    {
        "content": "<p>We will try to improve the error message.</p>",
        "id": 236004133,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1619297041
    },
    {
        "content": "<p>oh just saw your response, looking now</p>",
        "id": 236004201,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619297071
    },
    {
        "content": "<p>ok, I understand, thank you</p>",
        "id": 236004259,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1619297126
    }
]