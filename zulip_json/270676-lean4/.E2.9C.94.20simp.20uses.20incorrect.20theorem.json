[
    {
        "content": "<p>This is minimized from the latest mathlib4 lean bump PR.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Foo.mk.sizeOf_spec</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#print</span> <span class=\"n\">test</span>\n<span class=\"c1\">-- theorem test : ∀ (x : Bool), sizeOf { x := x } = 1 + 1 :=</span>\n<span class=\"c1\">-- fun x =&gt; sorryAx (sizeOf { x := x } = 1 + 1) false</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">#print</span> <span class=\"n\">test2</span>\n<span class=\"c1\">-- theorem test2 : ∀ (x : Bool), sizeOf { x := x } = 1 + 1 :=</span>\n<span class=\"c1\">-- fun x =&gt;</span>\n<span class=\"c1\">--   of_eq_true</span>\n<span class=\"c1\">--     (Eq.trans (congrFun (congrArg Eq (congrArg (HAdd.hAdd 1) (Bool.sizeOf_eq_one x))) (1 + 1)) (eq_self (1 + 1)))</span>\n</code></pre></div>\n<p>In theorem <code>test</code>, we see that <code>simp [-Foo.mk.sizeOf_spec]</code> does not make progress, which is as expected. <code>sizeOf</code> is not getting reduced en passant as far as I can tell. So you would expect that in the second theorem <code>test2</code> it must be using <code>Foo.mk.sizeOf_spec</code> in an essential way, however the generated proof term has no evidence of this; it references <code>Bool.sizeOf_eq_one</code> instead.</p>",
        "id": 280290397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651019743
    },
    {
        "content": "<p>The end user effect of this is (spurious?) linter failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Lint.Frontend</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Lint.Simp</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c1\">-- Found 1 error in 4 declarations (plus 9 automatically generated ones) in the current file with 3 linters</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Foo.mk.sizeOf_spec</span> <span class=\"c\">/-</span><span class=\"cm\"> simp can prove this:</span>\n<span class=\"cm\">  by simp only [Bool.sizeOf_eq_one]</span>\n<span class=\"cm\">One of the lemmas above could be a duplicate.</span>\n<span class=\"cm\">If that's not the case try reordering lemmas or adding @[priority].</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 280290577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651019910
    },
    {
        "content": "<p>note that the suggested proof <code>by simp only [Bool.sizeOf_eq_one]</code> does not actually work</p>",
        "id": 280290621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651019971
    },
    {
        "content": "<p>I'm pretty sure the cause is that the new <code>dsimp</code> support is allowing <code>simp</code> to make progress with rfl lemmas without adding anything to the proof term</p>",
        "id": 280290711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651020040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20uses.20incorrect.20theorem/near/280290711\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure the cause is that the new <code>dsimp</code> support is allowing <code>simp</code> to make progress with rfl lemmas without adding anything to the proof term</p>\n</blockquote>\n<p>Yes, it is. <code>Foo.mk.sizeOf_spec</code> is tagged as a <code>rfl</code> theorem.</p>",
        "id": 280290759,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651020074
    },
    {
        "content": "<p>The code that is extracting the used lemmas looks heuristic, so perhaps that's a better place to fix the situation - have some kind of side channel to accumulate the actually used simp lemmas rather than looking at the proof term</p>",
        "id": 280290856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651020154
    },
    {
        "content": "<p>Yes, I agree. BTW, the code that is extracting the used theorems is in Mathlib 4, correct?</p>",
        "id": 280290897,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651020221
    },
    {
        "content": "<p>yes</p>",
        "id": 280290900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651020226
    },
    {
        "content": "<p>I believe it is working around a lack of API in simp though, because we would otherwise have to copy and paste most of the implementation</p>",
        "id": 280290954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651020263
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/c01494c6ae325d027b347187aacf79a5fe1fa344/Mathlib/Tactic/Lint/Simp.lean#L100-L111\">https://github.com/leanprover-community/mathlib4/blob/c01494c6ae325d027b347187aacf79a5fe1fa344/Mathlib/Tactic/Lint/Simp.lean#L100-L111</a></p>",
        "id": 280290984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651020303
    },
    {
        "content": "<p>we also need this functionality for <code>squeeze_simp</code> and <code>simp?</code>, which are two independent implementations of this functionality in lean 3</p>",
        "id": 280291048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651020363
    },
    {
        "content": "<p>I'll just stub out the heuristic / do some underapproximation for now, and if this gets upstream support then we can do it better</p>",
        "id": 280292059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651021220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> has marked this topic as resolved.</p>",
        "id": 280292165,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651021323
    }
]