[
    {
        "content": "<p>everytime i try to use a git URL with lake, i get some sort of error <br>\n<a href=\"/user_uploads/3121/Xhn1siiqgYR_60b9nVj5M0Ek/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xhn1siiqgYR_60b9nVj5M0Ek/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xhn1siiqgYR_60b9nVj5M0Ek/image.png\"></a></div>",
        "id": 274924511,
        "sender_full_name": "Joseph O",
        "timestamp": 1646965797
    },
    {
        "content": "<p>This is just one of them (the only one in my current project)</p>",
        "id": 274924563,
        "sender_full_name": "Joseph O",
        "timestamp": 1646965815
    },
    {
        "content": "<p>I was sucessfully able to use one of my own libs in another project</p>",
        "id": 274924573,
        "sender_full_name": "Joseph O",
        "timestamp": 1646965834
    },
    {
        "content": "<p>what git url? It is complaining about your lakefile, what is in it</p>",
        "id": 274924611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646965898
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">Tuple</span> <span class=\"o\">{</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib4</span><span class=\"o\">,</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"master\"</span><span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274925710,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967035
    },
    {
        "content": "<p>a better error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">vatis</span><span class=\"bp\">\\</span><span class=\"n\">Desktop</span><span class=\"bp\">\\</span><span class=\"n\">programming</span><span class=\"bp\">\\</span><span class=\"n\">Tuple</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib4</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib4</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">mathlib4</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">resolved</span> <span class=\"n\">dependency</span> <span class=\"n\">has</span> <span class=\"n\">name</span> <span class=\"n\">mathlib</span> <span class=\"o\">(</span><span class=\"k\">in</span> <span class=\"bp\">.\\</span><span class=\"n\">lean_packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib4</span><span class=\"bp\">\\.</span><span class=\"o\">)</span>\n<span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">vatis</span><span class=\"bp\">\\</span><span class=\"n\">Desktop</span><span class=\"bp\">\\</span><span class=\"n\">programming</span><span class=\"bp\">\\</span><span class=\"n\">Tuple</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 274925733,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967062
    },
    {
        "content": "<p>The package name should be just <code>mathlib</code>. [<a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20package.20name.20.26.20lakefile.20parsing/near/274771537\">Related</a>]</p>\n<p>Why ask the user to fill in a package name if, in the end, it can figure out what it should be?</p>",
        "id": 274925979,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646967349
    },
    {
        "content": "<p>ah thanks its working now</p>",
        "id": 274926332,
        "sender_full_name": "Joseph O",
        "timestamp": 1646967661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 274926432,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646967732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20many.20lake.20fustrations/near/274925979\">said</a>:</p>\n<blockquote>\n<p>Why ask the user to fill in a package name if, in the end, it can figure out what it should be?</p>\n</blockquote>\n<p>It seems that <code>name</code> will be used as vanity name in the future, and people can rename the package to avoid name clash of modules.</p>",
        "id": 274932526,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646975378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20many.20lake.20fustrations/near/274925979\">said</a>:</p>\n<blockquote>\n<p>Why ask the user to fill in a package name if, in the end, it can figure out what it should be?</p>\n</blockquote>\n<p>Was scrolling through old lake-related thread and stumbled upon this and it felt was worth mentioning the current reason for needing this.  Lake can only figure out the name of a package itself <em>after</em> it has cloned it into some directory. However, it needs a unique name for the package <em>before</em> cloning to give to the directory it will be cloning the package into. The name a user provides is the name Lake uses. The sanity check afterwards helps keep things consistent and prevent weird breaks (i.e., the user naming every dependency foo and getting weird errors when Lake tries to clone every dependency into a foo directory).</p>\n<p>If there was some way to get a name for a repository / package before cloning it, I could make the name optional, but I simply don't know of a way to do so.  Note that parsing the URL is insufficient because Lake still needs to be able to handle cases where the URL is nonstandard. For instance, Lake's own <a href=\"https://github.com/leanprover/lake/blob/master/examples/git/lakefile.lean\">Git example</a> that clones the local repository to test. It is not really possible to derive any intelligent name from <code>../..</code>! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>  However, I suppose I could try some simply heuristic to derive a name from the URL and fall back to demanding a name if some goes wrong (though I am not sure how I would easily determine if something went wrong).</p>\n<p>What do all of you think? Any ideas?</p>",
        "id": 285760804,
        "sender_full_name": "Mac",
        "timestamp": 1654925649
    },
    {
        "content": "<p>Having the name optional only if the GitHub link is provided should cover most cases, no?</p>\n<p>But can't you always just copy dependency's lakefile to a temporary directory and extract the name?</p>",
        "id": 285762881,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1654928353
    },
    {
        "content": "<p>I'm pretty sure <code>git clone</code> itself just takes the last URL component and strips off any <code>.git</code> if you don't specify a directory to clone into, or at least something close to that</p>",
        "id": 285766110,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654933657
    },
    {
        "content": "<p>You can use hash of the path as a unique name of directory and, if necessary,  append a human readable suffix after package name resolution:<br>\n<code>&lt;hash of path&gt;_&lt;package name&gt;</code></p>",
        "id": 285767051,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1654935259
    }
]