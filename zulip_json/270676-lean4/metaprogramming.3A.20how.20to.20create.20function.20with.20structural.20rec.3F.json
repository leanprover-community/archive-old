[
    {
        "content": "<p>I'm trying to create a function g with a command. g should have the same body as f.<br>\nThere is a recursive call in g's body which is causing an issue.<br>\nHere is a minimized example :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">42</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"the_answer\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">g</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"n\">return</span> <span class=\"n\">r</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">42</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withDeclName</span> <span class=\"n\">name</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">r</span>\n    <span class=\"n\">return</span> <span class=\"n\">r</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkDefinitionValEx</span> <span class=\"n\">name</span> <span class=\"o\">[]</span> <span class=\"n\">type</span> <span class=\"n\">val</span> <span class=\"bp\">.</span><span class=\"n\">opaque</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addAndCompile</span> <span class=\"o\">{}</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"n\">e.toMessageData</span> <span class=\"o\">{})</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n\n<span class=\"n\">the_answer</span>\n<span class=\"k\">#print</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>It fails because it is unaware of g in this function body context. I tried using a let rec, but g remains an unassigned metavariable.<br>\nHow can I fix my code?</p>\n<p>Thanks for suggestions or solutions</p>",
        "id": 286388329,
        "sender_full_name": "Michael Jam",
        "timestamp": 1655401592
    },
    {
        "content": "<p>I do think that <code>let rec</code> is a good solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n      <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">42</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux</span> <span class=\"n\">n</span>\n      <span class=\"n\">aux</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n<p>The other issue <code>(kernel) declaration has metavariables 'g'</code> is related to something else I can't point my finger at yet</p>",
        "id": 286415237,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655414441
    },
    {
        "content": "<p>Unrelated: you probably want to use <code>elabTermEnsuringType</code></p>",
        "id": 286415550,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655414629
    },
    {
        "content": "<p>Alternatively, just generate syntax for the entire definition and feed that to elabCommand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Elab.Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"the_answer\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">g</span>\n  <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">42</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"n\">n</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">the_answer</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g</span>\n<span class=\"k\">#eval</span> <span class=\"n\">g</span> <span class=\"mi\">0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">g</span> <span class=\"mi\">10</span>\n</code></pre></div>\n<p>Note the <code>mkIdent</code> needed to ensure hygiene does not mess up the name of your function.</p>",
        "id": 286419105,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655416575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> Well that doesn't exactly solve my issue, because I was actually working in AttrM where I cannot use elabCommand. But thanks for that idea,  I'm probably just gonna change my plans and make a command instead of an attribute...</p>",
        "id": 286456572,
        "sender_full_name": "Michael Jam",
        "timestamp": 1655452064
    },
    {
        "content": "<p>You can lower <code>TermElabM</code> or <code>CommandElabM</code> into <code>CoreM</code>, then lift that into <code>AttrM</code>. Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">runTermElabMAsCoreM</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x.run'</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"o\">{}</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>This runs the elaboration with an empty metavariable context and some dummy elaboration state.</p>",
        "id": 286457716,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655452861
    },
    {
        "content": "<p>(The lifting from <code>CoreM</code> to <code>AttrM</code> is automatic via coercion.)</p>",
        "id": 286457741,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655452888
    },
    {
        "content": "<p><code>AttrM</code> in fact is just an abbrev for <code>CoreM</code> nowadays</p>",
        "id": 286457871,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655452967
    },
    {
        "content": "<p>It's the identity coercion. <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 286458260,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655453251
    },
    {
        "content": "<p>Just to summarize the original topic: the structural recursion compiler is part of the command (declaration) elaborator, yes, so elaborating a single term is not sufficient (except for nested <code>let rec</code>s, which are kind of separate declarations). If anyone had a need for structural recursion without going through one of the existing declaration elaborators, they would need to look at invoking <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Structural.structuralRecursion#doc\">docs4#Lean.Elab.Structural.structuralRecursion</a> manually.</p>",
        "id": 286458403,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655453357
    }
]