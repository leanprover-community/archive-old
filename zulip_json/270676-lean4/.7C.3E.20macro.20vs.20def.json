[
    {
        "content": "<p>Hey, wondering if there's a quick summary on why <code>|&gt;</code> is defined via a macro instead of as a notation for some backwards application function.</p>\n<p>I've been getting kind of annoyed by the macro definition because type inference goes the \"wrong way\" -- the function type on the right of |&gt; is inferred before the value type on the left of |&gt;. Type mismatches are reported on the left of the |&gt; rather than the right, even though in my experience it's always been an issue with the function term on the right.</p>\n<p>Is there any chance we switch to it being notation? Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">leftApp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"|&gt;\"</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">leftApp</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 301118956,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664313398
    },
    {
        "content": "<p>Or, is there some way to modify the current macro for |&gt; to force type errors as far right in a chain of |&gt;s as possible?</p>",
        "id": 301119208,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664313498
    },
    {
        "content": "<p>I would be strongly against using a notation here, because that would introduce another function application and quite a few arguments in every use of the notation</p>",
        "id": 301120294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664313923
    },
    {
        "content": "<p>if you implement <code>app</code> as a function then should <code>app</code> use the function as well? You get into some infinite regresses</p>",
        "id": 301120380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664313961
    },
    {
        "content": "<p>If the elaboration order is backwards, the better way to solve that is using an <code>elab</code></p>",
        "id": 301120484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664313991
    },
    {
        "content": "<p>Okay. Then, consider this a request to change the |&gt; definition into a macro that does elaboration in the \"right\" order :)</p>\n<p>Example of the problem I'm experiencing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">View.view'</span> <span class=\"o\">(</span><span class=\"n\">Range.mk</span> <span class=\"o\">(</span><span class=\"n\">Size.size</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Size.size</span> <span class=\"n\">c</span><span class=\"o\">)))</span>\n      <span class=\"bp\">|&gt;</span> <span class=\"n\">FoldableOps.find</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Indexed.nth</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Here <code>View.view'</code> infers a certain typeclass that has an <code>outParam</code>, but without forcing a coercion at the second line, Lean constrains the outParam to the (not-coerced) type used in later lines</p>",
        "id": 301120788,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664314120
    },
    {
        "content": "<p>you may be able to fix that using a <code>\\u</code></p>",
        "id": 301121034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664314209
    },
    {
        "content": "<p>that's pretty tricky code regardless, I would expect it to be brittle to elaboration changes</p>",
        "id": 301121080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664314231
    },
    {
        "content": "<p>Totally, but I'd rather it just do the inference from left to right. In this example I have a multiple lines of <code>|&gt;</code> each of which would need to have a coercion inserted (thus why I opted for an explicit type annotation in a map instead).</p>\n<p>It's less a \"this is bad\" and moreso a \"this is surprising and IMO undesirable behavior.\" My brain has been trained to learn that Lean mostly does inference from left to right, so |&gt; violating that norm feels a bit wrong :/</p>",
        "id": 301121413,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664314361
    },
    {
        "content": "<p>I'll see if I can put together a working elab macro at some point this week, maybe i'll see how much of the Lean codebase breaks when I change it</p>",
        "id": 301121557,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664314428
    }
]