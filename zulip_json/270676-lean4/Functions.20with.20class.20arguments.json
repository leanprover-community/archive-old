[
    {
        "content": "<p>I want to write a function that takes a class as an argument, as opposed to a type. For example, I might have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Nat2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">first</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AB</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nat2</span> <span class=\"n\">AB</span> <span class=\"n\">where</span>\n  <span class=\"n\">first</span> <span class=\"n\">ab</span>  <span class=\"o\">:=</span> <span class=\"n\">ab.a</span>\n  <span class=\"n\">second</span> <span class=\"n\">ab</span> <span class=\"o\">:=</span> <span class=\"n\">ab.b</span>\n</code></pre></div>\n<p>Given any instance of <code>Nat2</code> implements a <code>first</code> and a <code>second</code> function, say I want to write a function on <code>Nat2</code> that sums the two values. Since any instance of <code>Nat2</code> must implement these functions, any instance would inherit the sum function (i.e. it would not need to be implemented in each instance). Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">--n.first + n.second</span>\n  <span class=\"c1\">--first n + second n</span>\n  <span class=\"c1\">--Nat2.first n + Nat2.second n</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Each of the three commented out lines throws a different error, and I can't think of anything else to try. Is this or something similar possible in Lean 4?<br>\nThis is trying to do what you might do with abstract supertypes in OO languages or a language that has a feature similar to Java's interfaces or Scala's traits.</p>",
        "id": 259361055,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1635412909
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nat2</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat2.first</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">Nat2.second</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 259361869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635413369
    }
]