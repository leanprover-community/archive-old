[
    {
        "content": "<p>Is it possible to define a new attribute to mark theorems and then tell <code>rw</code> or <code>simp</code> to use these theorems?</p>",
        "id": 255876256,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633186139
    },
    {
        "content": "<p>We do not have a command for creating a new <code>simp</code> attribute, but we have APIs for doing that. That is, users can import <code>Lean</code> and invoke these APIs and create their own <code>simp</code> or <code>simp</code>-variant.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Simp/SimpLemmas.lean#L227-L230\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Simp/SimpLemmas.lean#L227-L230</a><br>\nWe had <code>simp with &lt;simp-attr-nam&gt;</code> in Lean 3, but we assumed it was a not very popular feature. That being said, I just searched Mathlib and found</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">mfld_simps</span>\n<span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">functor_norm</span>\n<span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">parity_simps</span>\n</code></pre></div>",
        "id": 255877594,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633187533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Just FYI, I found the following uses of <code>mk_simp_attribute</code>. I think that most of these are used a fair amount. But I'm sure that the new APIs are more powerful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">nontrivial.lean</span>\n<span class=\"mi\">165</span><span class=\"o\">:</span><span class=\"n\">mk_simp_attribute</span> <span class=\"n\">nontriviality</span> <span class=\"s2\">\"Simp lemmas for `nontriviality` tactic\"</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">norm_cast.lean</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"n\">mk_simp_attribute</span> <span class=\"n\">push_cast</span> <span class=\"s2\">\"The `push_cast` simp attribute uses `norm_cast` lemmas</span>\n\n<span class=\"s2\">src/tactic/equiv_rw.lean</span>\n<span class=\"s2\">187:mk_simp_attribute equiv_rw_simp \"</span><span class=\"n\">The</span> <span class=\"n\">simpset</span> <span class=\"bp\">`</span><span class=\"n\">equiv_rw_simp</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">used</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">equiv_rw</span><span class=\"bp\">`</span> <span class=\"n\">to</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">transport.lean</span>\n<span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"n\">mk_simp_attribute</span> <span class=\"n\">transport_simps</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_with_zero</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">43</span><span class=\"o\">:</span><span class=\"n\">mk_simp_attribute</span> <span class=\"n\">field_simps</span> <span class=\"s2\">\"The simpset `field_simps` is used by the tactic `field_simp` to</span>\n\n<span class=\"s2\">src/control/monad/basic.lean</span>\n<span class=\"s2\">38:mk_simp_attribute monad_norm none with functor_norm</span>\n\n<span class=\"s2\">src/ring_theory/witt_vector/is_poly.lean</span>\n<span class=\"s2\">100:mk_simp_attribute ghost_simps</span>\n\n<span class=\"s2\">src/measure_theory/integral/bochner.lean</span>\n<span class=\"s2\">1395:mk_simp_attribute integral_simps \"</span><span class=\"n\">Simp</span> <span class=\"n\">set</span> <span class=\"n\">for</span> <span class=\"n\">integral</span> <span class=\"n\">rules.</span><span class=\"s2\">\"</span>\n\n<span class=\"s2\">src/data/nat/parity.lean</span>\n<span class=\"s2\">85:mk_simp_attribute parity_simps \"</span><span class=\"n\">Simp</span> <span class=\"kn\">attribute</span> <span class=\"n\">for</span> <span class=\"n\">lemmas</span> <span class=\"n\">about</span> <span class=\"bp\">`</span><span class=\"n\">even</span><span class=\"bp\">`</span><span class=\"s2\">\"</span>\n\n<span class=\"s2\">src/data/equiv/local_equiv.lean</span>\n<span class=\"s2\">67:mk_simp_attribute mfld_simps \"</span><span class=\"n\">The</span> <span class=\"n\">simpset</span> <span class=\"bp\">`</span><span class=\"n\">mfld_simps</span><span class=\"bp\">`</span> <span class=\"n\">records</span> <span class=\"n\">several</span> <span class=\"n\">simp</span> <span class=\"n\">lemmas</span> <span class=\"n\">that</span> <span class=\"n\">are</span>\n</code></pre></div>",
        "id": 255877944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633187964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks for posting the information. Do you know which ones are \"fixed\" collection of <code>simp</code> which does to change? For fixed collections, we don't use attributes in Lean 4, but create the fixed collection programmatically. For example, the <code>split</code> tactic in Lean 4 uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SimpLemmas</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.addConst</span> <span class=\"bp\">``</span><span class=\"n\">if_pos</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.addConst</span> <span class=\"bp\">``</span><span class=\"n\">if_neg</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.addConst</span> <span class=\"bp\">``</span><span class=\"n\">dif_pos</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.addConst</span> <span class=\"bp\">``</span><span class=\"n\">dif_neg</span>\n</code></pre></div>",
        "id": 255878717,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633188820
    },
    {
        "content": "<p>And where am I supposed to call this API? I have tried bunch of things but nothing really worked.</p>",
        "id": 255879748,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633189968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span><br>\nSorry, we don't have documentation for that yet :( <br>\nRight now, the only documentation is our code and its docstrings.<br>\nWe will try to add more documentation soon.<br>\nUnfortunately, there is no short answer here. One has to declare the attribute, and then have a <code>simp</code> tactic that uses it. <br>\nThat being said, it is easier to create an extensible <code>rw</code> tactic using just macros.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">f_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">g_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"myrw_step\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"c1\">--</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">myrw_step</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_eq</span><span class=\"o\">])</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"myrw\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"n\">myrw_step</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myrw</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myrw</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- unsolved goal</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">myrw_step</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g_eq</span><span class=\"o\">])</span>  <span class=\"c1\">-- extend `myrw_step`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myrw</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- worked</span>\n</code></pre></div>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html#extensible-tactics\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html#extensible-tactics</a></p>",
        "id": 255882021,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633192318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> The results are mixed. But I think that <code>parity_simps</code> and <code>field_simps</code> are basically fixed.</p>",
        "id": 255882608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633192889
    },
    {
        "content": "<p>The others occasionally might get a new lemma added to the set.</p>",
        "id": 255882618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633192902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks.</p>",
        "id": 255882677,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633192929
    }
]