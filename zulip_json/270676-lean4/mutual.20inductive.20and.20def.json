[
    {
        "content": "<p>Hello. I am trying to create a few mutually recursive definitions, but one of the definitions is a def, not an inductive. I think there is some way to translate this such that it'll work but I haven't been able to figure out the magic words.</p>\n<p>It might be better to avoid the mutual dependencies...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cover</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">done</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">both</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">mutual</span>\n    <span class=\"kd\">inductive</span> <span class=\"n\">Stlc</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">t.type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"bp\">Γ</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">Closure</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Closure</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">Ty.type</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Closure</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">t.type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279365480,
        "sender_full_name": "Sofia",
        "timestamp": 1650346582
    },
    {
        "content": "<p>Can replace the Closure indirection with <code>Stlc b (a :: Γ) × Env Γ</code>.</p>",
        "id": 279365613,
        "sender_full_name": "Sofia",
        "timestamp": 1650346793
    },
    {
        "content": "<p>Maybe something like this? But still invalid...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n    <span class=\"kd\">inductive</span> <span class=\"n\">Stlc</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"c1\">-- universe level of lift is too big</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"bp\">Γ</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">Lift</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">Bool</span>\n<span class=\"c1\">-- another issue.. unexpected constructor resulting type..?</span>\n<span class=\"c1\">--  | f : lift (.func a b) (Stlc b (a :: Γ) × Env Γ)</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279365754,
        "sender_full_name": "Sofia",
        "timestamp": 1650347001
    },
    {
        "content": "<p>Universe level problem with Lift. Suspect a <code>Lift.(u)</code> magic but don't see how to apply it here...</p>",
        "id": 279366011,
        "sender_full_name": "Sofia",
        "timestamp": 1650347356
    },
    {
        "content": "<p>For context I am trying to adapt this Agda to Lean 4. I have previously tried this and had different issues.</p>\n<p><a href=\"https://repository.tudelft.nl/islandora/object/uuid:f0312839-3444-41ee-9313-b07b21b59c11\">https://repository.tudelft.nl/islandora/object/uuid:f0312839-3444-41ee-9313-b07b21b59c11</a></p>",
        "id": 279366800,
        "sender_full_name": "Sofia",
        "timestamp": 1650348190
    },
    {
        "content": "<p>I will eventually translate this from STLC to DTLC, so the <code>Ty</code> and <code>Stlc</code> will be merged into <code>Dtlc</code>.</p>",
        "id": 279366875,
        "sender_full_name": "Sofia",
        "timestamp": 1650348258
    },
    {
        "content": "<p>The magic word is \"induction-recursion\" which Lean unfortunately does not support.</p>",
        "id": 279377491,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650356496
    },
    {
        "content": "<p>Hmm. Is that an open issue to fix or a design limitation?</p>",
        "id": 279377808,
        "sender_full_name": "Sofia",
        "timestamp": 1650356663
    },
    {
        "content": "<p>Induction-recursion without \"bumping\" the universe is a foundational decision, so it's a design limitation. Compiling inductive-recursive down to features Lean supports could be a nice future project.</p>",
        "id": 279378154,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650356892
    },
    {
        "content": "<p>Your second snippet can be fixed by having all the three type families live in the second universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n    <span class=\"kd\">inductive</span> <span class=\"n\">Stlc</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"c1\">-- universe level of lift is too big</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"bp\">Γ</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">Lift</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"n\">Unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">Bool</span>\n<span class=\"c1\">-- another issue.. unexpected constructor resulting type..?</span>\n<span class=\"c1\">--  | f : lift (.func a b) (Stlc b (a :: Γ) × Env Γ)</span>\n\n    <span class=\"kd\">inductive</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279378190,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650356920
    },
    {
        "content": "<p>I also get an <code>Error: index out of bounds</code> in your example though, which is definitely a bug in Lean /cc <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 279378770,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650357271
    },
    {
        "content": "<p>And the constructor you commented out seems to be harder to realize, since the universe bump prevents the circular dependency.</p>",
        "id": 279379258,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650357556
    },
    {
        "content": "<p>Which version of lean did you use? I do not get such an error. <code>nightly-2022-03-21</code>.</p>",
        "id": 279380234,
        "sender_full_name": "Sofia",
        "timestamp": 1650358134
    },
    {
        "content": "<p>Thanks for the patch. Any idea about the commented line?</p>",
        "id": 279380235,
        "sender_full_name": "Sofia",
        "timestamp": 1650358135
    },
    {
        "content": "<p>(Disconnected -&gt; messages out of order.)</p>\n<p>Harder indeed... not just me. :)</p>",
        "id": 279380299,
        "sender_full_name": "Sofia",
        "timestamp": 1650358178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279380234\">said</a>:</p>\n<blockquote>\n<p>Which version of lean did you use? I do not get such an error. <code>nightly-2022-03-21</code>.</p>\n</blockquote>\n<p><code>nightly-2022-04-12</code></p>",
        "id": 279380539,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650358326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279380235\">said</a>:</p>\n<blockquote>\n<p>Thanks for the patch. Any idea about the commented line?</p>\n</blockquote>\n<p>There is nothing to lift in this case, so it looks like you should use a separate constructor</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"kd\">inductive</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Lift</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons_f</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279380634,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650358394
    },
    {
        "content": "<p>Hmm. Interesting suggestion.</p>",
        "id": 279380771,
        "sender_full_name": "Sofia",
        "timestamp": 1650358460
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 279380973,
        "sender_full_name": "Sofia",
        "timestamp": 1650358585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279378770\">said</a>:</p>\n<blockquote>\n<p>I also get an <code>Error: index out of bounds</code> in your example though, which is definitely a bug in Lean /cc <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span></p>\n</blockquote>\n<p>Filed an <a href=\"https://github.com/leanprover/lean4/issues/1112\">issue</a></p>",
        "id": 279381654,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650358942
    },
    {
        "content": "<p>Better still to encapsulate <code>Lift t y -&gt; y -&gt; ...</code> in a new type, I think. But I haven't really thought through your design as a whole yet, e.g. how <code>Stlc.lam</code> and <code>Stlc.val (Val.clo ..)</code> should relate.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Stlc</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"bp\">Γ</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"bp\">.</span><span class=\"n\">nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">clo</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279381860,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650359071
    },
    {
        "content": "<p>When writing the evaluator for the <code>Stlc</code> language, I need to lift the closure as the result of evaluation. So it would be ideal to keep the closure inside Val.</p>",
        "id": 279382084,
        "sender_full_name": "Sofia",
        "timestamp": 1650359196
    },
    {
        "content": "<p>Hmm.. In the evaluator, I'm reaching for the split contexts. How should I access these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Stlc</span>\n    <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"n\">ctx</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">Stlc</span>\n</code></pre></div>\n<p>(Edit: Is it idiomatic to use the dot-notation to avoid accidentally binding with a wildcard?)</p>",
        "id": 279382840,
        "sender_full_name": "Sofia",
        "timestamp": 1650359719
    },
    {
        "content": "<p>The \"covering\" is the Co-De Bruijn partitioning of the context. Thus values have an empty context, variables have a singleton context, and applications may split or share terms, but each term must be used at least once.</p>",
        "id": 279383301,
        "sender_full_name": "Sofia",
        "timestamp": 1650360023
    },
    {
        "content": "<p>Ah! The issue I had with the commented out lifting code was <code>lift</code> vs. <code>Lift</code>. !!</p>",
        "id": 279383605,
        "sender_full_name": "Sofia",
        "timestamp": 1650360241
    },
    {
        "content": "<p>You can use named arguments to bind specific implicit parameters, though you cannot currently mix them with the dot notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">Γ₁</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ₁</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 279387435,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650362282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279382840\">said</a>:</p>\n<blockquote>\n<p>(Edit: Is it idiomatic to use the dot-notation to avoid accidentally binding with a wildcard?)</p>\n</blockquote>\n<p>The notation is still quite new, but that sounds reasonable to me (except in the case I just mentioned). But it really only matters for parameter-less constructors, all others should lead to an error when typoed.</p>",
        "id": 279387633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650362391
    },
    {
        "content": "<p>Makes sense. Thanks. &lt;3</p>",
        "id": 279387802,
        "sender_full_name": "Sofia",
        "timestamp": 1650362435
    },
    {
        "content": "<p>Actually I don't think I need the <code>Γ1/Γ2</code>, I need to split the environment based on <code>c</code>. Either way that is nice to know. :)</p>",
        "id": 279388167,
        "sender_full_name": "Sofia",
        "timestamp": 1650362635
    },
    {
        "content": "<p>Hmm. Seem to have an issue with <code>Prop</code> vs. <code>Type</code> now. Cover was a <code>Prop</code>, but I guess I need to make it a <code>Type</code> but... I get universe level troubles again. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Env</span>\n    <span class=\"kd\">def</span> <span class=\"n\">partition</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ</span><span class=\"mi\">1</span> <span class=\"bp\">Γ</span><span class=\"mi\">2</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span><span class=\"mi\">1</span> <span class=\"bp\">×</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span><span class=\"mi\">2</span>\n    <span class=\"c1\">-- Cover.casesOn can only eliminate into Prop.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">xs</span> <span class=\"n\">c</span>\n        <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">xs</span> <span class=\"n\">c</span>\n        <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">both</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">xs</span> <span class=\"n\">c</span>\n        <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Env</span>\n</code></pre></div>",
        "id": 279392349,
        "sender_full_name": "Sofia",
        "timestamp": 1650365401
    },
    {
        "content": "<p>Nevermind, seems I typo'd <code>a</code> for <code>α</code> when elaborating the type for Cover when converting it to Type with universe levels.</p>",
        "id": 279392975,
        "sender_full_name": "Sofia",
        "timestamp": 1650365815
    },
    {
        "content": "<p>Okay... I think I have everything except for.... the termination proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Cover</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">done</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">left</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">both</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Stlc</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"o\">(</span><span class=\"n\">Ty.func</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">u</span> <span class=\"bp\">Γ</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"bp\">.</span><span class=\"n\">nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">clo</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"n\">xs</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Env</span>\n    <span class=\"kd\">def</span> <span class=\"n\">partition</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">Γ₂</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ₁</span> <span class=\"bp\">×</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">left</span>  <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">xs</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">xs</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">both</span>  <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">xs</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Env</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Stlc</span>\n  <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"n\">ctx</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.partition</span> <span class=\"n\">c</span>\n        <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n        <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.cons</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span> <span class=\"n\">Stlc</span>\n</code></pre></div>",
        "id": 279394108,
        "sender_full_name": "Sofia",
        "timestamp": 1650366498
    },
    {
        "content": "<p>Actually no, not just termination proof. Type mismatch in .. something in eval. o.o</p>",
        "id": 279394646,
        "sender_full_name": "Sofia",
        "timestamp": 1650366909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279381654\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279378770\">said</a>:</p>\n<blockquote>\n<p>I also get an <code>Error: index out of bounds</code> in your example though, which is definitely a bug in Lean /cc <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span></p>\n</blockquote>\n<p>Filed an <a href=\"https://github.com/leanprover/lean4/issues/1112\">issue</a></p>\n</blockquote>\n<p>Pushed a fix for this.</p>",
        "id": 279402887,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650372159
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">././</span><span class=\"n\">Stlc.lean</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">Stlc.eval</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n    <span class=\"bp\">@</span><span class=\"n\">Stlc.brecOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"n\">argument</span>\n    <span class=\"n\">t</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">4</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n    <span class=\"bp\">@</span><span class=\"n\">Env.brecOn</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"n\">t</span>\n  <span class=\"n\">argument</span>\n    <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"n\">t</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Stlc</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">bounds</span>\n</code></pre></div>",
        "id": 279408111,
        "sender_full_name": "Sofia",
        "timestamp": 1650374710
    },
    {
        "content": "<p>Looking over the types. It seems that everything returns <code>Val t</code> except for the lambda case, which returns <code>Val (Ty.func a b)</code>. Is this the problem? If so, how do I unify the type with <code>Val t</code>?</p>",
        "id": 279411798,
        "sender_full_name": "Sofia",
        "timestamp": 1650376439
    },
    {
        "content": "<p>Replacing its result with <code>sorry</code> does not resolve the type mismatch. <strong>shrugs</strong></p>",
        "id": 279415695,
        "sender_full_name": "Sofia",
        "timestamp": 1650378212
    },
    {
        "content": "<p>Very confused with this error.</p>",
        "id": 279415716,
        "sender_full_name": "Sofia",
        "timestamp": 1650378227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455721\">@Sofia</span> We will try to clarify the error message in the future. The application type mismatches are not in your code. They were generated when Lean tried different ways to prove termination by structural recursion. If you use the <code>termination_by</code> annotation, you will get a better error message. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.partition</span> <span class=\"n\">c</span>\n        <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n        <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.cons</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>You can make the error message clearer by avoiding the variable shadowing at <code>let .clo f l := eval f l</code>.</p>",
        "id": 279427573,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650383166
    },
    {
        "content": "<p>BTW, I defined an arbitrary well-founded relation in the example above (i.e., <code>sizeOf s</code>), but you will not be able to prove termination using it. The goal was just to get a better error message.</p>",
        "id": 279428907,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650383709
    },
    {
        "content": "<p>Noted. I had later renamed those and applied a few other similar cleanups. I first tried to add <code>partial</code> to skip the termination proof, but Lean wasn't happy with that either.</p>",
        "id": 279433068,
        "sender_full_name": "Sofia",
        "timestamp": 1650385426
    },
    {
        "content": "<p>Due to the lack of Inhabited instance on Val. Which I could add. Would be better to prove the termination of course.</p>",
        "id": 279433252,
        "sender_full_name": "Sofia",
        "timestamp": 1650385498
    },
    {
        "content": "<p>The tricky bit is the inhabited instance for <code>Val.clo</code>.</p>",
        "id": 279433540,
        "sender_full_name": "Sofia",
        "timestamp": 1650385612
    },
    {
        "content": "<p>I really need to figure out the details of the termination proofs... Tend to get stuck here a lot. :/</p>",
        "id": 279434064,
        "sender_full_name": "Sofia",
        "timestamp": 1650385816
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> . I should call the night here. Take care. o/</p>",
        "id": 279434112,
        "sender_full_name": "Sofia",
        "timestamp": 1650385836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia</span> <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20def/near/279433540\">said</a>:</p>\n<blockquote>\n<p>The tricky bit is the inhabited instance for <code>Val.clo</code>.</p>\n</blockquote>\n<p>You can simplify the problem a bit by writing the <code>Stlc.val</code> constructor as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Val</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ</span>\n</code></pre></div>\n<p>Then, you can show that <code>Val ty</code> is inhabited using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ty.someValue</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Val</span> <span class=\"n\">ty</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">u</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nat</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"mi\">0</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"n\">false</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">someValue</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">.</span><span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">ty.someValue</span>\n</code></pre></div>\n<p>You will also have to change the <code>| val x, .term =&gt; x</code> case at <code>eval</code> to <code>| val x, _ =&gt; x</code>.<br>\nAfter these changes <code>partial</code> will work.<br>\nIf you hit similar issues in the future where it is not feasible to show the type is inhabited, then another option is to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stlc</span> <span class=\"n\">t</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">Γ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Val</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"bp\">.</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs.partition</span> <span class=\"n\">c</span>\n        <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">clo</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">l</span>\n        <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.cons</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is equivalent to telling Lean \"trust me this function does terminate, and I am willing to compromise soundness if it does not\".</p>",
        "id": 279435213,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650386330
    },
    {
        "content": "<p>That val needs to be empty, not arbitrary. Otherwise a helpful tip. I guess I will have to lie about the decreasing proof for now. Thanks again. I'm off for the night for real this time. :)</p>",
        "id": 279435772,
        "sender_full_name": "Sofia",
        "timestamp": 1650386569
    }
]