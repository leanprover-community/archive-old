[
    {
        "content": "<p>This issue came up in <a href=\"#narrow/stream/287929-mathlib4/topic/unexpected.20variables\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/unexpected.20variables</a>. After applying <code>cases</code> to a hypothesis in the local context, another unused hypothesis which depends (in the dependent type sense) on that hypothesis is included in the type signature of the resulting declaration. This can be circumvented by <code>clear</code>ing the unwanted hypothesis before doing <code>cases</code>, but that seems undesirable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo</span>\n<span class=\"c1\">-- @foo : ∀ {n : Nat} {a : Fin n} (c : Fin n), c = c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">clear</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">foo'</span>\n<span class=\"c1\">-- @foo' : ∀ {n : Nat} (c : Fin n), c = c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">bar</span>\n<span class=\"c1\">-- @bar : ∀ {n : Nat} (c : Fin n), c = c</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 316365962,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671227101
    },
    {
        "content": "<p>That looks quite hard/unlikely to be fixed. <code>cases</code> can't know what variables you will use in the remaining proof, nor is adjusting the proof post-hoc a real option.</p>",
        "id": 316424345,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671269962
    },
    {
        "content": "<p>Interesting! But this wasn't happening in lean 3, right? I don't think I've ever seen a theorem in mathlib with a variable randomly being pulled in like that. Or am I wrong?</p>",
        "id": 316427998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671271724
    },
    {
        "content": "<p>Lean 3 was \"include always unless <code>omit</code>ted\" afair. Lean 4 is \"include if used in declaration\", which turns out is tough to decide for <code>cases</code>.</p>",
        "id": 316428347,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671271884
    },
    {
        "content": "<p>The issues will manifest themselves very quickly (random \"can't work out what this irrelevant term should be\" errors) so it probably won't be too much of a hassle to work around</p>",
        "id": 316428516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671271943
    },
    {
        "content": "<p>Sebastian, that's not the Lean 3 behavior. The above code would work in Lean 3 with <code>a</code> not appearing in the type signatures of any of the decorations.</p>",
        "id": 316450192,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671280750
    },
    {
        "content": "<p>Kevin, these errors are actually going to be hard/ annoying to spot. The way it came up for me is I had a rewrite with one of these bad lemmas that generated random goals. But the bad variables were implicit, so I only found it by looking at the full type signature of each declaration in the list.</p>",
        "id": 316450499,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671280866
    },
    {
        "content": "<p>Yes, the lean 4 behavior is different and hopefully better. It eliminates the need for most uses of <code>include</code></p>",
        "id": 316450572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671280902
    },
    {
        "content": "<p>But now we need it again! Because we need <code>omit</code></p>",
        "id": 316450659,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671280931
    },
    {
        "content": "<p>I would fix the issue in this case by using <code>{n}</code> in the binder list</p>",
        "id": 316450667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671280937
    },
    {
        "content": "<p>and also just using <code>variable</code> less, generally</p>",
        "id": 316450793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671281000
    },
    {
        "content": "<p>I tried removing the <code>a</code> as a variable, but it was needed many places.</p>",
        "id": 316450885,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671281032
    },
    {
        "content": "<p>(with <code>autoImplicit</code> on)</p>",
        "id": 316450973,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671281052
    },
    {
        "content": "<p>even then I would just insert the binders if it's not ridiculous</p>",
        "id": 316451018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671281078
    },
    {
        "content": "<p><code>variable</code>s make the code harder to read</p>",
        "id": 316451039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671281085
    },
    {
        "content": "<p><code>clear a</code> seems like a pretty close approximation to <code>omit a</code> as long as there are only a few lemmas that need to omit the variable and almost everything else uses it</p>",
        "id": 316451240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671281171
    },
    {
        "content": "<p>I think the difference with <code>omit</code> vs <code>clear</code> is that the former occurs outside of the declaration, whereas the latter is inside it. And it seems <em>very</em> strange to have to reference a variable in the proof which is explicitly <em>not</em> used in the proof.</p>",
        "id": 316470089,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671288794
    },
    {
        "content": "<p>For readability that seems nightmarish.</p>",
        "id": 316470149,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671288828
    },
    {
        "content": "<p>isn't that always the case with arguments to <code>clear</code>?</p>",
        "id": 316470250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288858
    },
    {
        "content": "<p>The <code>{n}</code> trick seems reasonable.</p>",
        "id": 316470259,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671288863
    },
    {
        "content": "<p>if you wanted to use a hypothesis you wouldn't clear it, so things being cleared are basically always unused</p>",
        "id": 316470362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288909
    },
    {
        "content": "<p>I typically need to use <code>clear</code> before <code>cases</code> and <code>induction</code> when they touch things they shouldn't</p>",
        "id": 316470424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288940
    },
    {
        "content": "<p>No? I mean <code>clear</code> can be used to remove a hypothesis that was used previously but is no longer necessary.</p>",
        "id": 316470437,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671288949
    },
    {
        "content": "<p>so this example seems very normal</p>",
        "id": 316470442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288951
    },
    {
        "content": "<p>you can find instances of <code>clear _let_match</code> and stuff in mathlib</p>",
        "id": 316470534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288974
    },
    {
        "content": "<p>these are definitely not used variables</p>",
        "id": 316470562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288988
    },
    {
        "content": "<p>Okay, but the<code>_let_match</code>  that occurred was generated by something used earlier in the proof, right?</p>",
        "id": 316470675,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671289046
    },
    {
        "content": "<p>?? it's an automatically generated variable, I as the user did nothing to put it there and it is not for me</p>",
        "id": 316471648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671289432
    },
    {
        "content": "<p>you could say the same thing about variables in lean 4, if you hadn't set up your sections like that the variable wouldn't be there</p>",
        "id": 316471900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671289525
    },
    {
        "content": "<p>I view something that was generated by something else meaningful I did in the proof (i.e., <code>_let_match</code>) very differently than something which is not related to anything in the declaration or proof script (I.e. <code>a</code>). However, I understand this may be just personal opinion. I wonder if <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  feels the same or differently though.</p>",
        "id": 316472941,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671289971
    },
    {
        "content": "<p>I'm still coming to terms with the new way variables are used in lean 4. I absolutely agree that use of variables decreases readability but it hadn't occurred to me that with autoImplicit it might actually be the case that we'll be using <code>variable</code> a whole lot less.</p>",
        "id": 316488583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671297552
    }
]