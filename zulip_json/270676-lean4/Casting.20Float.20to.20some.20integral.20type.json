[
    {
        "content": "<p>For the life of me I can't figure out how to turn a <code>Float</code> into an integral type (IE: <code>Int</code>, <code>UInt32</code>, etc). For the record, I've tried some nasty C FFI hacks as well, but I don't think I've figured out exactly how to get that to generate the requisite code.</p>",
        "id": 222541854,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1610522149
    },
    {
        "content": "<p>how about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Float.toInt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f.toString.takeWhile</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"sc\">'-'</span> <span class=\"bp\">||</span> <span class=\"n\">c.isDigit</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toInt</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 222572312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610541090
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern c inline \"(uint32)#1\"]</span>  <span class=\"kd\">constant</span> <span class=\"n\">Float.toUInt32</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">â†’</span> <span class=\"n\">UInt32</span>\n</code></pre></div>\n<p>should work, though you won't be able to use it in the interpreter without compiling it into a native library first. Implementing <code>Int/Nat</code> should be a bit more interesting if it's supposed to work on values &gt; 2^64...</p>",
        "id": 222573279,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610541666
    },
    {
        "content": "<p>That inline cast was my first attempt, but I couldn't figure out how to compile as a native library. The solution I settled on was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">UInt8.ofFloat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">255</span> <span class=\"k\">then</span> <span class=\"mi\">255</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"mi\">255</span>\n\n  <span class=\"n\">where</span>\n    <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"bp\">+</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n      <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">lo</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">UInt8.ofNat</span> <span class=\"bp\">$</span> <span class=\"n\">lo</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Float.ofNat</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">go</span> <span class=\"n\">lo</span> <span class=\"n\">mid</span> <span class=\"k\">else</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hi</span>\n</code></pre></div>\n<p>Also, while floats are up for discussion, I think there is a missing instance for <code>Neg Float</code></p>",
        "id": 222612950,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1610557631
    }
]