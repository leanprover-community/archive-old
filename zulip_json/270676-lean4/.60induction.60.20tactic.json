[
    {
        "content": "<p>I'm starting to use tactics in Lean 4 and with the <code>induction</code> tactic I get an unexpected result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_add</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n     <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n     <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n       <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">))</span>\n       <span class=\"n\">apply</span> <span class=\"n\">congrArg</span> <span class=\"n\">succ</span>\n       <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">))</span>\n       <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n       <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">))</span>\n<span class=\"c1\">-- 9:1: fail to show termination for</span>\n<span class=\"c1\">--   succ_add</span>\n<span class=\"c1\">-- with errors</span>\n<span class=\"c1\">-- structural recursion cannot be used</span>\n\n<span class=\"c1\">-- well founded recursion has not been implemented yet</span>\n\n<span class=\"c1\">-- 19:8: unsolved goals</span>\n<span class=\"c1\">-- case succ</span>\n<span class=\"c1\">-- x y' : Nat</span>\n<span class=\"c1\">-- ih :</span>\n<span class=\"c1\">--   [Error pretty printing expression: . Falling back to raw printer.]</span>\n<span class=\"c1\">--   forall (succ_add : Eq.{1} Nat (HAdd.hAdd.{0 0 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (Nat.succ _uniq.14) _uniq.189) (Nat.succ (HAdd.hAdd.{0 0 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) _uniq.14 _uniq.189))), Eq.{1} Nat (HAdd.hAdd.{0 0 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) (Nat.succ _uniq.14) _uniq.189) (Nat.succ (HAdd.hAdd.{0 0 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) _uniq.14 _uniq.189))</span>\n<span class=\"c1\">-- ⊢ succ x + y' = succ (x + y')</span>\n       <span class=\"n\">done</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It seems like the induction hypothesis <code>ih</code> has type <code>ih : succ x + y' = succ (x + y') -&gt; succ x + y' = succ (x + y')</code> and I don't know why. Am I misusing <code>induction</code>?</p>",
        "id": 221815756,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609963538
    },
    {
        "content": "<p>I'm using lean4:stable and in the following the type of <code>ih</code> in the <code>{ }</code> is <code>ih : succ x + y' = succ (x + y')</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_add</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n     <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n     <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_add</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n     <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n     <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y'</span><span class=\"o\">))</span>\n         <span class=\"n\">rw</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>Without a rewrite (following your proof more) you can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_add</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n     <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n     <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">congrArg</span> <span class=\"n\">succ</span> <span class=\"n\">ih</span>\n</code></pre></div>",
        "id": 222114116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1610133686
    },
    {
        "content": "<p>I'm trying to use <code>induction</code> in a definition and getting a confusing error: compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">n'</span> <span class=\"bp\">*</span> <span class=\"n\">ih</span>\n<span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">n'</span> <span class=\"bp\">*</span> <span class=\"n\">ih</span>\n<span class=\"c1\">-- error: (kernel) compiler failed to infer low level type, unknown declaration 'Nat.rec'</span>\n</code></pre></div>",
        "id": 222339007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610390555
    },
    {
        "content": "<p>(Please ignore that this doesn't actually define the factorial function anyways)</p>",
        "id": 222339282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610390695
    },
    {
        "content": "<p>The compiler currently doesn't have support for <code>C.rec</code> (<code>C.recOn</code> and <code>C.brecOn</code>). Reason: we didn't need this feature for implementing Lean, and code using <code>C.rec</code> is not efficient. We still haven't decided what to do here. Options:<br>\n1- Add support for <code>C.rec</code> in the compiler<br>\n2- Better error message for declarations that are not available in compiled code</p>\n<p>BTW, you can use the <code>noncomputable</code> keyword to skip code generation and the error above.</p>",
        "id": 222443171,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610463964
    },
    {
        "content": "<p>What's the relationship between <code>set_option codegen false in</code> and <code>noncomputable</code>?</p>",
        "id": 222445308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610464830
    },
    {
        "content": "<p>I have some more complicated example in which the termination checker gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span> <span class=\"n\">foo</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">infer</span> <span class=\"n\">low</span> <span class=\"n\">level</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Classical.propDecidable'</span>\n</code></pre></div>\n<p>It happens even with <code>noncomputable</code>, but I am using <code>set_option codegen false</code> and that is fine for me.</p>",
        "id": 222445603,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610464932
    },
    {
        "content": "<p><code>noncomputable</code> is the preferred way. The error above should be due to an auxiliary definition. It is a bug. If you post a small example that produces the error, I will take a look.</p>",
        "id": 222447241,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610465524
    }
]