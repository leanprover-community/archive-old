[
    {
        "content": "<p>A lot of lean 4 changes are simplifications of the language to remove superfluous choices and increase regularity. The recent removal of <code>rw e</code> in favor of <code>rw [e]</code> is an instance of this. (Or at least that's my reconstructed rationale, the relevant commit doesn't say anything about why.) However, people have habits and when it's not in the grammar you can end up with some really bad error messages. What do people think about having syntax extensions that mimic old patterns but throw up a warning instead? I just implemented this for <code>variables</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"c1\">---------  'variables' has been replaced by 'variable' in lean 4</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 238124800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620646368
    },
    {
        "content": "<p>the alternative here is just to accept <code>variables</code> without complaint, since we clearly have the ability to parse it and make sense of it</p>",
        "id": 238125126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620646515
    },
    {
        "content": "<p>I'd rather go for more regularity, so having <code>variables</code> raise a warning looks good to me. As to whether it should work (as <code>variable</code>) or not, I don't really have an opinion, I would probably prefer if it doesn't work to force people to get used to the new syntax.</p>",
        "id": 238125500,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620646695
    },
    {
        "content": "<p>Where do you want to put these deprecations? I don't think anyone would complain if it was in mathlib (heck, that's half the work necessary for automatic syntactic porting anyway) or a \"Lean 4 for Lean 3 users\" library, but I don't see it happening in core. We wouldn't be nearly as far as we are without the \"tabula rasa\" approach.</p>",
        "id": 238126153,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620647043
    },
    {
        "content": "<p>Definitely mathlib</p>",
        "id": 238126289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647086
    },
    {
        "content": "<p>although there are some deprecations I'm considering that are incompatible with (current) lean 4, for example getting rid of <code>universes</code> and making <code>universe</code> accept more than one ident</p>",
        "id": 238126405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647138
    },
    {
        "content": "<p>I don't know how problematic it is to teach people an incompatible variant of the language</p>",
        "id": 238126499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647172
    },
    {
        "content": "<p>Is it possible to make core tactics inaccessible? For example if I want <code>rw</code> to work differently I can make a notation with higher priority, but if my <code>rw</code> fails to accept some syntax that core <code>rw</code> accepts, then users will be able to call the other one</p>",
        "id": 238126728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647285
    },
    {
        "content": "<p>What do you mean? Would it be nontrivial to change Lean 3 community to let it accept <code>variable</code> and <code>universe</code> for several variables, and make a global search and replace in mathlib?</p>",
        "id": 238126746,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620647298
    },
    {
        "content": "<p>I think this would be quite doable. The question is more about the sociological aspect: if people use mathlib then <code>universe u v</code> will work and <code>universes u v</code> will error or give a warning, but if you don't import mathlib then <code>universes u v</code> will work and <code>universe u v</code> will be a parse error</p>",
        "id": 238126885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647387
    },
    {
        "content": "<p>so that might get confusing if you work both with and without mathlib</p>",
        "id": 238126965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647411
    },
    {
        "content": "<p>When you say \"use mathlib\", do you mean \"use Lean 3.0 community\"?</p>",
        "id": 238127099,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620647484
    },
    {
        "content": "<p>I mean use mathlib for lean 4</p>",
        "id": 238127121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647503
    },
    {
        "content": "<p>in a hypothetical future where we're all on lean 4</p>",
        "id": 238127186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647528
    },
    {
        "content": "<p>My opinion is that mathlib for Lean 4 should use the same syntax as core (<code>universe</code> and <code>variable</code>) and throw a warning on <code>universes</code> and <code>variables</code>. To help the transition, we could change Lean 3 community to have the same behavior.</p>",
        "id": 238127263,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620647571
    },
    {
        "content": "<p>For lean 3.0 community there is no problem, because we have enough control to just upstream the syntax change and update mathlib</p>",
        "id": 238127266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647572
    },
    {
        "content": "<blockquote>\n<p>My opinion is that mathlib for Lean 4 should use the same syntax as core (universe and variable)</p>\n</blockquote>\n<p>The problem is that this sentence has a false presupposition: in lean 4 core right now it is <code>universes</code> and <code>variable</code></p>",
        "id": 238127372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647640
    },
    {
        "content": "<p>and I think that's <del>dumb</del> inconsistent</p>",
        "id": 238127438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647657
    },
    {
        "content": "<p>it's probably just an oversight but it makes a good example for discussion purposes</p>",
        "id": 238127467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647683
    },
    {
        "content": "<p>What about avoiding using the word \"dumb\"?</p>",
        "id": 238127474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620647692
    },
    {
        "content": "<p>My guess is that for this particular example it won't be too hard to convince the core devs to upstream this change, but I'm sure there are plenty of examples where mathlib wants to change some defaults from core and upstreaming is not an option for whatever reason</p>",
        "id": 238127811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620647881
    },
    {
        "content": "<p>Since lean 4 is so configurable we can pretty well go to town on changing default behavior, but that comes at the cost of fracturing the language to some extent, and I'm not sure yet how we should weigh such decisions</p>",
        "id": 238128059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620648000
    },
    {
        "content": "<p>I'm pretty sure we don't want to recreate the \"traditional Coq vs SSReflect\" dichotomy.</p>",
        "id": 238128248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620648054
    },
    {
        "content": "<p>ironic that you mention that because I was just thinking we can do ssreflect in lean so much better now</p>",
        "id": 238128321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620648093
    },
    {
        "content": "<p>What is this dichotomy?</p>",
        "id": 238129137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620648507
    },
    {
        "content": "<p>One of the reasons I started using Lean is because when I tried to learn Coq all Coq documentation was assuming traditional Coq (and a CS degree and software verification target) and all SSReflect documentation was assuming knowledge of traditional Coq, and the combination was really hard to read.</p>",
        "id": 238129204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620648536
    },
    {
        "content": "<p>Of course we'll have mathlib tactics, but we should really try to be compatible with core Lean 4.</p>",
        "id": 238129274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620648583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20warnings.3F/near/238127372\">said</a>:</p>\n<blockquote>\n<p>The problem is that this sentence has a false presupposition: in lean 4 core right now it is <code>universes</code> and <code>variable</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20warnings.3F/near/238127438\">said</a>:</p>\n<blockquote>\n<p>and I think that's  inconsistent</p>\n</blockquote>\n<p>I am really curious as to why this inconsistency exists. I think it would be a wonderful question for Lean 4 team (i.e., <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, since he checks here the most) .</p>",
        "id": 238224485,
        "sender_full_name": "Mac",
        "timestamp": 1620687598
    },
    {
        "content": "<p>Because we missed <code>universes</code> when removing <code>variables</code></p>",
        "id": 238263888,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620718452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20warnings.3F/near/238263888\">said</a>:</p>\n<blockquote>\n<p>Because we missed <code>universes</code> when removing <code>variables</code></p>\n</blockquote>\n<p>I assume this change would make <code>universe</code> variadic? (because, at present, it only accepts one identifier)</p>",
        "id": 238266914,
        "sender_full_name": "Mac",
        "timestamp": 1620720122
    },
    {
        "content": "<p>Yes, same as with <code>variable</code></p>",
        "id": 238267136,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620720216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Any ETA on the <code>universes -&gt; universe</code> change?</p>",
        "id": 238290716,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1620732473
    },
    {
        "content": "<p>No, there are no ETAs. We are overwhelmed with feature requests (most by us), so the only way we can operate is to focus on one topic at a time instead of constantly switching between them.</p>",
        "id": 238304196,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620738759
    },
    {
        "content": "<p>And yes, this one seems trivial (but some turn out not to be that after all). So I'll stop talking about it longer than it might take to fix it.</p>",
        "id": 238304292,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620738808
    },
    {
        "content": "<p>As long as <code>universes -&gt; universe</code> is on the eventual agenda, I guess it would be fine to pre-implement in mathlib4</p>",
        "id": 238325378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620746248
    },
    {
        "content": "<p>I gave this a shot, since I'd also noticed it awhile back. PR: <a href=\"https://github.com/leanprover/lean4/pull/458\">https://github.com/leanprover/lean4/pull/458</a></p>",
        "id": 238371168,
        "sender_full_name": "Julian Berman",
        "timestamp": 1620762389
    },
    {
        "content": "<p>I fear Sebastian and Leo would need more time to review your PR than doing the fix themselves, so my bet is they will close this PR. I hope you've learned interesting things while working on it.</p>",
        "id": 238373206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620763327
    },
    {
        "content": "<p>Yeah. I suspected the same thing while making it, and won't be offended if that happens.</p>",
        "id": 238373272,
        "sender_full_name": "Julian Berman",
        "timestamp": 1620763359
    },
    {
        "content": "<p>Especially since Sebastian wrote a pretty clear message in this thread.</p>",
        "id": 238373431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620763416
    }
]