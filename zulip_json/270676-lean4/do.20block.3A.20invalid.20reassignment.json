[
    {
        "content": "<p>The following example produces an error on the for loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.up</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"s2\">\"\"</span><span class=\"o\">]</span> <span class=\"k\">do</span> <span class=\"c1\">-- error</span>\n    <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.up.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"mi\">123</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid reassignment, value has type</span>\n<span class=\"cm\">  ?m.8285 : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ULift Nat : Type 1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Also, hovering over <code>nat</code> shows <code>nat : ?m.8285</code>.<br>\nIs it not possible to use any types in higher universes than <code>Type 0</code> in <code>do</code> blocks?</p>",
        "id": 299025604,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1663265651
    },
    {
        "content": "<p>You can, but some of the relevant typeclasses aren't universe polymorphic. I thought list forin was universe polymorphic, but...</p>",
        "id": 299026877,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663266166
    },
    {
        "content": "<p>Actually I have no idea why this doesn't compile, List forin is universe polymorphic</p>",
        "id": 299027476,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663266402
    },
    {
        "content": "<p>Oh, wait. <code>StateT</code> requires the state &amp; the return type to be in the same universe? This compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.up</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"s2\">\"\"</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.up.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"mi\">123</span>\n</code></pre></div>",
        "id": 299028554,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663266792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/do.20block.3A.20invalid.20reassignment/near/299028554\">said</a>:</p>\n<blockquote>\n<p>Oh, wait. <code>StateT</code> requires the state &amp; the return type to be in the same universe? This compiles:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.up</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"s2\">\"\"</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.up.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"mi\">123</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hm, so if I'm working in <code>IO</code> I'm doomed right? Because <code>IO PUnit.{2}</code> isn't possible.</p>",
        "id": 299029176,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1663267003
    },
    {
        "content": "<p>Yeah, IO is limited to Type 0</p>",
        "id": 299029339,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663267070
    },
    {
        "content": "<p>I wonder though whether the same-universe requirement on <code>StateT</code> is intentional?</p>",
        "id": 299029541,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1663267117
    },
    {
        "content": "<p>I think it is; just changed it in the prelude to see what breaks, and, well, many things break</p>",
        "id": 299029606,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663267135
    },
    {
        "content": "<p>Don't really have the time to figure out whether those are fixable breaks, but... :p There's been other discussions about this restriction on here, if you search IO and universe they should come up</p>",
        "id": 299029737,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663267175
    },
    {
        "content": "<p>Yeah, I've seen the universe polymorphic <code>IO</code> discussion, but was hoping I could avoid that since I'm just returning <code>Unit</code>. But I guess I have to return <code>PUnit.{2}</code> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 299030049,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1663267278
    }
]