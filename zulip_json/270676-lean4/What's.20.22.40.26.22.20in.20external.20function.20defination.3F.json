[
    {
        "content": "<p>I want to try programming in Lean, don't find what it does. It looks <code>@&amp; S</code> corresponds to <code>b_lean_obj_arg</code> .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_S_string\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">S.string</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern</span> <span class=\"s2\">\"C\"</span> <span class=\"n\">lean_object</span> <span class=\"bp\">*</span> <span class=\"n\">lean_S_string</span><span class=\"o\">(</span><span class=\"n\">b_lean_obj_arg</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">return</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mk_string</span><span class=\"o\">(</span><span class=\"n\">to_S</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">-&gt;</span><span class=\"n\">m_s</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 227080320,
        "sender_full_name": "HT",
        "timestamp": 1613814111
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/What.27s.20.22.40.26.22.20in.20external.20function.20defination.3F\">#new members &gt; What's \"@&amp;\" in external function defination?</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>",
        "id": 227080546,
        "sender_full_name": "Notification Bot",
        "timestamp": 1613814417
    },
    {
        "content": "<p>If you are familiar with Rust or C++, this is like <code>&amp;Foo</code> in function arguments, although a much simplified form. It is used on <code>@[extern]</code> functions to determine the calling convention on the C side: if it is passed by reference then the reference count of arguments to the function doesn't need to be incremented.</p>\n<p>FYI, this is a lean 4 specific feature. Lean 4 is still under development and is in alpha stage, lean 3 is the latest stable version and what most mathlib users are using.</p>",
        "id": 227080740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613814632
    },
    {
        "content": "<p>If you want to learn about the formal details, see <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a>. <code>@&amp;</code> is an explicit borrow annotation, which are inferred automatically for regular Lean code (see 5.2 in the paper).</p>",
        "id": 227081953,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1613816113
    }
]