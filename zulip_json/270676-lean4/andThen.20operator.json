[
    {
        "content": "<p>Quick question: is there an operator in the std library that  implements this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">andThen</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 299465479,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663526449
    },
    {
        "content": "<p><code>f $ g x</code>, <code>f &lt;| g x</code>, <code>flip Function.comp</code> come to mind</p>",
        "id": 299465737,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663526666
    },
    {
        "content": "<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∘</mo></mrow><annotation encoding=\"application/x-tex\">\\circ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∘</span></span></span></span> insufficient for what you want to do?</p>",
        "id": 299465761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663526698
    },
    {
        "content": "<p>oh, it's just that oftentimes I find it easier to reason from left to right</p>",
        "id": 299466021,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663526971
    },
    {
        "content": "<p>Ah then the pipes that Henrik mentioned would be helpful: <code>|&gt;</code> and <code>&lt;|</code>.</p>",
        "id": 299466093,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663527032
    },
    {
        "content": "<p>yeah, I like those, but they require an argument.</p>",
        "id": 299466111,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663527058
    },
    {
        "content": "<p>The definition of function.comp also requires an argument, but it's supplied with a lambda.</p>",
        "id": 299466238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663527161
    },
    {
        "content": "<p>Ah I see what you want here. Maybe we can use mathlib3's notation for composition of morphisms?</p>",
        "id": 299466279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663527207
    },
    {
        "content": "<p><del>docs#quiver.hom.comp I think?</del></p>",
        "id": 299466301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663527238
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/8c9342fd8949ec8421ed6649685d5233a19e0c08/src/category_theory/category/basic.lean#L84\">https://github.com/leanprover-community/mathlib/blob/8c9342fd8949ec8421ed6649685d5233a19e0c08/src/category_theory/category/basic.lean#L84</a></p>",
        "id": 299466401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663527311
    },
    {
        "content": "<p>Does haskell have a standard ascii symbol for this?</p>",
        "id": 299466447,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663527356
    },
    {
        "content": "<p>yeah, exactly!</p>",
        "id": 299466510,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663527374
    },
    {
        "content": "<p>But <code> ≫ </code> probably will be used in mathlib 4 as well, so we'd need another symbol for  plain function composition, no?</p>",
        "id": 299466701,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663527528
    },
    {
        "content": "<p>lol, a quick Hoogle query revealed &gt; 7 notations for this:<br>\n<a href=\"https://hoogle.haskell.org/?hoogle=(a%20-%3E%20b)%20-%3E%20(b%20-%3E%20c)%20-%3E%20(a%20-%3E%20c)\">https://hoogle.haskell.org/?hoogle=(a%20-%3E%20b)%20-%3E%20(b%20-%3E%20c)%20-%3E%20(a%20-%3E%20c)</a></p>",
        "id": 299467397,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663527979
    },
    {
        "content": "<p>Unfortunately, I don't know enough about notation overloading in Lean4 to say whether we could use the same unicode symbol for both plain functions and morphisms in a category.</p>",
        "id": 299467570,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663528114
    },
    {
        "content": "<p>We could make a notation that is smart enough for this type of stuff without difficulty yes.</p>",
        "id": 299467779,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663528305
    },
    {
        "content": "<p>It might have some interesting interactions with type inference but generally speaking there is no obvious reason why it shouldn't work</p>",
        "id": 299467863,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663528345
    },
    {
        "content": "<p>I was going to suggest <code>∘&gt;</code> which is similar to many of the haskell versions</p>",
        "id": 299469498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663529609
    },
    {
        "content": "<p>I personally question the need for all these fancy Haskell symbols especially now that Lean has <code>|&gt;</code>, <code>|&gt;.</code>, and <code>&lt;|</code>and <code>(&lt;- …)</code> which are intuitive to read and remember.  I remember when I was a Scala programmer, an experienced software engineer at my company saying that a lot of bad Scala code looks like “Haskell fan fiction”.  I feel having to memorize all the Haskell symbols adds a lot of cognitive burden.  Of course to each their own, and it is great that Lean lets you easily add in custom notation, especially for mathematics, where we need symbols to look like standard ones.  Anyway, as with what Kevin said, you can accomplish this in a readable way with a lambda at the cost of a few extra symbols (and then you can also use <code>|&gt;.</code> which is quite useful):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">222</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Int.ofNat</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">mod</span> <span class=\"mi\">10</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">reprStr</span>\n  <span class=\"o\">)</span>  <span class=\"c1\">-- [\"-3\", \"-2\", \"-1\"]</span>\n</code></pre></div>",
        "id": 299475146,
        "sender_full_name": "Jason Rute",
        "timestamp": 1663534601
    },
    {
        "content": "<blockquote>\n<p>I feel having to memorize all the Haskell symbols adds a lot of cognitive burden.</p>\n</blockquote>\n<p>I feel the same.</p>\n<p>BTW, we don't need the parentheses around <code>fun</code> in Lean 4. We can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">222</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Int.ofNat</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">mod</span> <span class=\"mi\">10</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;</span> <span class=\"n\">reprStr</span>\n</code></pre></div>",
        "id": 299475472,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663534900
    },
    {
        "content": "<p>Agreed with symbol explosion in Haskell. In the Scala community there's been a big push to use symbolic operators much more judiciously in the past few years.  One major library  (ZIO) even removed <code>&gt;&gt;=</code>  recently, as it is totally alien to 99% of programmers.</p>",
        "id": 299479661,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1663539131
    }
]