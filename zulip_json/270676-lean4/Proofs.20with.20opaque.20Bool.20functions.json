[
    {
        "content": "<p>How does one prove results utilizing opaque Bool functions? For example, <code>String.contains \"zero\" 'e'</code>? My guess was to use <code>Lean.ofReduceBool</code>, but I couldn't figure out how exactly one uses it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">String.contains</span> <span class=\"s2\">\"zero\"</span> <span class=\"sc\">'e'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Lean.ofReduceBool</span> <span class=\"n\">_</span>\n  <span class=\"c1\">-- what goes here to do the kernel reduction?</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Neither <code>rfl</code>, <code>simp</code>, or <code>decide</code> work. I am probably missing something basic, but I unfortunately don't know what.</p>",
        "id": 262288139,
        "sender_full_name": "Mac",
        "timestamp": 1637567866
    },
    {
        "content": "<p>I don't think it's possible yet to prove anything about <code>partial def</code>s, on the logical side they look exactly like constants.  (The partial def in question here is String.anyAux btw.)</p>",
        "id": 262290139,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637569379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  While I get that it is not possible to prove much of anything about the implementation of <code>String.contains</code> due to <code>String.anyAux</code>, shouldn't constant expressions using it still be reducible through <a href=\"https://github.com/leanprover/lean4/blob/3f867acfd70f97d7fd25217b1881f4820d1192c3/src/Init/Core.lean#L1054\"><code>reduceBool</code></a>, since that invokes the Lean interpreter to reduce it (and the interpreter can evaluate such an expression)?</p>",
        "id": 262290497,
        "sender_full_name": "Mac",
        "timestamp": 1637569655
    },
    {
        "content": "<p>Now I see what you mean.  There are still some rough edges here, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"s2\">\"zero\"</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"sc\">'e'</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Lean.reduceBool</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 262292519,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637571240
    },
    {
        "content": "<blockquote>\n<p>When the kernel tries to reduce a term <code>Lean.reduceBool c</code>, it will invoke the Lean interpreter to evaluate <code>c</code>.<br>\n  The kernel will not use the interpreter if <code>c</code> is not a constant.</p>\n</blockquote>",
        "id": 262292564,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637571257
    },
    {
        "content": "<p>I think there is a macro that does that for you</p>",
        "id": 262295750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637573289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"s2\">\"zero\"</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"sc\">'e'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nativeDecide</span>\n</code></pre></div>",
        "id": 262295870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637573382
    },
    {
        "content": "<p>So, I used <code>nativeDecide</code> in my use case and it worked like a charm -- or so I thought. But then I got this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">name10.arr</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"zero\"</span><span class=\"o\">,</span><span class=\"s2\">\"one\"</span><span class=\"o\">,</span><span class=\"s2\">\"two\"</span><span class=\"o\">,</span><span class=\"s2\">\"three\"</span><span class=\"o\">,</span><span class=\"s2\">\"four\"</span><span class=\"o\">,</span><span class=\"s2\">\"five\"</span><span class=\"o\">,</span><span class=\"s2\">\"six\"</span><span class=\"o\">,</span><span class=\"s2\">\"seven\"</span><span class=\"o\">,</span><span class=\"s2\">\"eight\"</span><span class=\"o\">,</span><span class=\"s2\">\"nine\"</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">name10</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">name10.arr.get</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">name10_mod_2_contains_e</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">name10</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">contains</span> <span class=\"sc\">'e'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">name10</span><span class=\"o\">,</span> <span class=\"n\">Array.get</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">nativeDecide</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">contradiction</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">application type mismatch</span>\n<span class=\"sd\">  Lean.ofReduceBool name10_mod_2_contains_e._nativeDecide_3 true (Eq.refl true)</span>\n<span class=\"sd\">argument has type</span>\n<span class=\"sd\">  true = true</span>\n<span class=\"sd\">but function has type</span>\n<span class=\"sd\">  Lean.reduceBool name10_mod_2_contains_e._nativeDecide_3 = true → name10_mod_2_contains_e._nativeDecide_3 = true</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>Any idea what is going on here?</p>",
        "id": 262307213,
        "sender_full_name": "Mac",
        "timestamp": 1637580696
    },
    {
        "content": "<p><del>it looks like the apply bug</del></p>",
        "id": 262323741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637590512
    },
    {
        "content": "<p>reduced:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">name10_mod_2_contains_e</span> <span class=\"o\">:</span>\n  <span class=\"n\">String.contains</span> <span class=\"s2\">\"two\"</span> <span class=\"sc\">'e'</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nativeDecide</span>\n</code></pre></div>\n<p>It appears the issue is that <code>\"two\"</code> does not in fact contain the letter <code>e</code></p>",
        "id": 262324413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637590855
    },
    {
        "content": "<p>oops! forgot to add the condition that it is only suppose to be the odd ones <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 262327366,
        "sender_full_name": "Mac",
        "timestamp": 1637592095
    }
]