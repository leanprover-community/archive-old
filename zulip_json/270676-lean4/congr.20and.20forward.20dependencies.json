[
    {
        "content": "<p>Going off from <a href=\"https://github.com/leanprover/lean4/issues/1201\">this issue</a>, I wondered if there's any use of having a version/option for the <code>congr</code> tactic (be it inside or outside of <code>conv</code>) which does not skip arguments with forward dependencies, in order to do definitional rewriting. I think the default should still be that they're skipped, otherwise we lose all compatibility with Lean 3' s <code>congr</code>, but maybe an option would be good?</p>",
        "id": 285502869,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654763985
    },
    {
        "content": "<p>My suggestion: <code>@2</code> in <code>enter</code> and related functions means \"second argument including implicits/dependents\"</p>",
        "id": 285503009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654764068
    },
    {
        "content": "<blockquote>\n<p>we lose all compatibility with Lean 3' s <code>congr</code></p>\n</blockquote>\n<p>That's not exactly been a design concern so far. And I would be quite surprised if it broke more than a handful proofs in mathlib.</p>",
        "id": 285503568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654764410
    },
    {
        "content": "<p>In any case it's easy enough to work around incompatibilities by providing a <code>congr'</code> in mathlib4</p>",
        "id": 285503635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654764473
    },
    {
        "content": "<p>I think counting or not counting implicit arguments would make a big difference in <code>enter</code> since it would offset the numbering, but mathlib doesn't have <code>enter</code></p>",
        "id": 285503740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654764545
    },
    {
        "content": "<p>Oh counting all arguments should definitely use a separate syntax. Obscure syntax for obscured data.</p>",
        "id": 285504137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654764814
    },
    {
        "content": "<p>Does <code>enter</code> work with names for named arguments?</p>",
        "id": 285504268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654764880
    },
    {
        "content": "<p>i.e. <code>enter x</code> to enter <code>f (x: Nat) : Nat</code></p>",
        "id": 285504285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654764893
    },
    {
        "content": "<p>It doesn't, but that would be nice as well, yes</p>",
        "id": 285504382,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654764955
    },
    {
        "content": "<p>I think that's probably better for getting to implicit args than counting since it creates a dependency on ordering of implicits</p>",
        "id": 285504452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654764986
    },
    {
        "content": "<p>also the argument numbering should be 1-based, with <code>0</code> meaning to rewrite the head function (I think the first of those is implemented but not the second)</p>",
        "id": 285504647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765100
    },
    {
        "content": "<p><code>enter</code>'s arguments <em>are</em> 1-based right now</p>",
        "id": 285504688,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654765129
    },
    {
        "content": "<p>good, just checking</p>",
        "id": 285504731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765158
    },
    {
        "content": "<p>the 0 = head thing is how it's done in mathematica and it's fairly intuitive</p>",
        "id": 285504783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765189
    },
    {
        "content": "<p>I think we all agree on the implicits... for the fwd deps, I'll add<br>\nan option</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">congrApp</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">skipFwdDeps</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>which <code>enter</code> and <code>arg</code> set to <code>false</code></p>",
        "id": 285504860,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654765213
    },
    {
        "content": "<p>I don't think skipping forward dependencies should ever be a thing, it's not obvious from the call expression itself whether an argument is dependent or not</p>",
        "id": 285504935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765259
    },
    {
        "content": "<p>instead it should just reject if you try to rewrite at an argument you can't rewrite at</p>",
        "id": 285504974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765287
    },
    {
        "content": "<p>Yes, that's my idea as well. And there's a point to doing definitional rewrites, too</p>",
        "id": 285505024,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654765317
    },
    {
        "content": "<p>It is not at all simple to do definitional rewrites with congr though, because you can't introduce a metavariable and subgoal for the definitional equality</p>",
        "id": 285505152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765372
    },
    {
        "content": "<p>You would need an extension of the tactic monad itself to support <code>|- a === b</code> defeq goals</p>",
        "id": 285505207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765410
    },
    {
        "content": "<p>Is that also if we only open a goal for the first of the two dependent args?</p>",
        "id": 285505860,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654765808
    },
    {
        "content": "<p>The type check of the rhs kind of has to happen after the congr mvar is filled in...</p>",
        "id": 285505953,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654765873
    },
    {
        "content": "<p>right</p>",
        "id": 285505964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765879
    },
    {
        "content": "<p>Something like <code>f a b = f ?a' b</code> doesn't typecheck</p>",
        "id": 285506023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765919
    },
    {
        "content": "<p>or rather, it will probably immediately force <code>?a' := a</code> so you don't get a subgoal</p>",
        "id": 285506081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654765942
    },
    {
        "content": "<p>the \"extended tactic monad\" I mentioned would have a way to encode this as <code>f a b = f ?a' ?b</code> with \"and by the way set <code>?b := b</code> once it typechecks\"</p>",
        "id": 285506186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654766031
    },
    {
        "content": "<p>proposed a <a href=\"https://github.com/leanprover/lean4/pull/1203\">fix</a></p>",
        "id": 285516597,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654772386
    }
]