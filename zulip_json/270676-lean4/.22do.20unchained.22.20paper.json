[
    {
        "content": "<p>Hi, in the lean4 stdlib, I stumbled over the note: Typeclass for the polymorphic <code>forM</code> operation described in the \"do unchained\" paper (in src/Init/Control/Basic.lean). Could somebody tell me which paper this is?</p>",
        "id": 265415592,
        "sender_full_name": "Marius Melzer",
        "timestamp": 1639830175
    },
    {
        "content": "<p>As this perked my curiosity I looked for the paper and failed to find it. </p>\n<hr>\n<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Control/Basic.lean#L101-L109\">https://github.com/leanprover/lean4/blob/master/src/Init/Control/Basic.lean#L101-L109</a></p>",
        "id": 265416975,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1639832144
    },
    {
        "content": "<p>It's probably an upcoming paper (<a href=\"https://github.com/leanprover/lean4/commit/ef4d5950ae360b9ee65ad69c746ada938f402845\">https://github.com/leanprover/lean4/commit/ef4d5950ae360b9ee65ad69c746ada938f402845</a>)</p>",
        "id": 265418068,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1639833584
    },
    {
        "content": "<p>I'm not sure if that was ever published. I looked on arxiv but couldn't find it there either. <br>\nThere are a few comments in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Do.lean#L134\">Do.lean</a> explaining how Lean 4's do notation works, though. Note that there is also a <a href=\"https://github.com/leanprover/lean4/blob/e15a656fd2569c12b8e73da9be707f0a5f420bad/src/Init/Core.lean#L82\">forIn</a> class, and if I'm not mistaken, that's the one used for do notation (e.g. <code>#synth ForM Id (Array Nat) Nat</code> fails, but <code>#synth ForIn Id (Array Nat) Nat</code> succeeds).</p>",
        "id": 265418146,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1639833667
    },
    {
        "content": "<p>A littler later, the paper is finally published! <a href=\"https://twitter.com/derKha/status/1548325704877559810\">https://twitter.com/derKha/status/1548325704877559810</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/derKha/status/1548325704877559810\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/73b1cc6b0e68078201ad1856c80ab187a3c03baa/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313239313333333833303131333230363237332f4f7778726633696c5f6e6f726d616c2e6a7067\"></a><p>Accepted to ICFP'22:\n‘do’ Unchained: Embracing Local Imperativity in a Purely\nFunctional Language (Functional Pearl) with <a href=\"https://twitter.com/leodemoura\">@leodemoura</a>!\n\nPDF: <a href=\"https://t.co/POrLzgcIu7\">https://leanprover.github.io/papers/do.pdf</a>\nsupplement rendered via LeanInk/Alectryon: <a href=\"https://t.co/Qkow3SlItQ\">https://kha.github.io/do-supplement/</a> <a href=\"https://t.co/ubLIp1Blku\">https://twitter.com/derKha/status/1548325704877559810/photo/1</a></p><span>- Sebastian Ullrich (@derKha)</span><div class=\"twitter-image\"><a href=\"https://t.co/ubLIp1Blku\"><img src=\"https://uploads.zulipusercontent.net/d09d6e7b908f3be520395eb2d586e3e1451e23a3/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46587a43424b4c5655414d6a7956442e706e673a736d616c6c\"></a></div></div></div>",
        "id": 289844819,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658001335
    },
    {
        "content": "<p>Am I expected to see those little oval links which I can click on, on mobile, in the supplement?</p>",
        "id": 289844976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658001597
    },
    {
        "content": "<p>In proofs and <code>#</code> commands, yes. Do you not see them, or would you like to not see them :) ?</p>",
        "id": 289845072,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658001683
    },
    {
        "content": "<p>Oh, I didn't test it on mobile yet though. edit: works for me</p>",
        "id": 289845078,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658001706
    },
    {
        "content": "<p>Aah I was expecting to see ovals. Yes I don't see them on duck duck go browser on Android but clicking directly on a proof or # command gives me the popup. When I asked I wasn't sure what I should be clicking on</p>",
        "id": 289845298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658001986
    },
    {
        "content": "<p>Oh I've got them! They're very small! I just needed my glasses ;-)</p>",
        "id": 289845315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658002026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.22do.20unchained.22.20paper/near/289844819\">said</a>:</p>\n<blockquote>\n<p>A littler later, the paper is finally published! <a href=\"https://twitter.com/derKha/status/1548325704877559810\">https://twitter.com/derKha/status/1548325704877559810</a></p>\n</blockquote>\n<p>Reading it and trying the List example I noticed that we dont have <code>Monad List</code> even though there even exists <code>List.bind</code>, what's the reason for that?</p>",
        "id": 289845559,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658002345
    },
    {
        "content": "<p>Partially for the same reasons we didn't have <code>Monad Option</code> for a long time. But much more than for <code>Option</code>, strictness might also not be what you'd expect from a list monad.</p>",
        "id": 289845642,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658002457
    },
    {
        "content": "<p>So if we ever end up having one it'd be <code>Monad LazyList</code> I guess?</p>",
        "id": 289845675,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658002524
    },
    {
        "content": "<p>Yes, see <a href=\"https://kha.github.io/do-supplement/LazyList.lean.html\">https://kha.github.io/do-supplement/LazyList.lean.html</a> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 289845890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658002828
    },
    {
        "content": "<p>But I doubt that will get into the stdlib</p>",
        "id": 289845899,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658002850
    }
]