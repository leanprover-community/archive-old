[
    {
        "content": "<p>When adding a test that is just suppose tor run without error to Lean 4., does it go in the <code>lean/test/run</code> directory? If so, how do you make the test run when using <code>make tests</code> because it seems like tests added to that directory aren't automatically added to queue for <code>make tests</code> (or I may just be missing something).</p>",
        "id": 238915810,
        "sender_full_name": "Mac",
        "timestamp": 1621102564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> When I put a <code>.lean</code> file in <code>tests/lean/run</code>, it is automatically run as part of <code>make test</code>. Are you sure it isn't being run for you too? FYI the full test name should be \"leanruntest_&lt;oldname&gt;.lean\".</p>",
        "id": 238918855,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621105658
    },
    {
        "content": "<p>Hmm, that's what I thought should happen. Maybe it's because I didn't rebuild after adding the tests?</p>",
        "id": 238919206,
        "sender_full_name": "Mac",
        "timestamp": 1621106030
    },
    {
        "content": "<p>Oh! Yep, that's it! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  <br>\nI didn't think adding tests would require a rebuild.</p>",
        "id": 238919290,
        "sender_full_name": "Mac",
        "timestamp": 1621106105
    },
    {
        "content": "<p>FYI It does not require a rebuild for me.</p>",
        "id": 238919481,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621106319
    },
    {
        "content": "<p>Interesting! That's weird.<br>\n(Fyi, just to clarify, by \"rebuild\" I mean running <code>make</code> -- the new lean binary is not necessary though)</p>",
        "id": 238919596,
        "sender_full_name": "Mac",
        "timestamp": 1621106449
    },
    {
        "content": "<p>This may have to due to with the fact I am on Windows, using VSCode, using MSYS2, and/or using GCC as my compiler. (I am using MSYS2/MINGW64 GCC because Lean 4 does not build properly with MSYS2/MINGW64 Clang 11  on my setup).</p>",
        "id": 238919715,
        "sender_full_name": "Mac",
        "timestamp": 1621106557
    },
    {
        "content": "<p>We use globs in CMake to collect the tests, which is not recommended because of this issue, but I'm not aware of a reasonable alternative either</p>",
        "id": 238956735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621149490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Run.20Tests/near/238919715\">said</a>:</p>\n<blockquote>\n<p>MSYS2/MINGW64 GCC because Lean 4 does not build properly with MSYS2/MINGW64 Clang 11  on my setup).</p>\n</blockquote>\n<p>That's weird, since that is how the official Windows release is built</p>",
        "id": 238956765,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621149546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Run.20Tests/near/238956765\">said</a>:</p>\n<blockquote>\n<p>That's weird, since that is how the official Windows release is built</p>\n</blockquote>\n<p>Yep. The first time I built it, I didn't notice that line and didn't specify it to build with Clang so CMake ended up defaulting to GCC . When I later discovered my mistake and tried a fresh rebuild with Clang things broke. Thus I ended up reverting back to using GCC and everything still works. Surprisingly, it was still building even when the Windows CI/CD broke due to symbol issues, so maybe GCC doesn't have the same symbol issues (or something else is weird)?</p>",
        "id": 238960516,
        "sender_full_name": "Mac",
        "timestamp": 1621154031
    },
    {
        "content": "<p>Oh! Technically, according to <code>CMakeCache.txt</code>, my build is using the MSYS2's <code>c++</code> (which I believe is GCC -- based on it using other GNU Binutils such as <code>ld</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">c</span><span class=\"bp\">++</span> <span class=\"c1\">--version</span>\n<span class=\"n\">c</span><span class=\"bp\">++.</span><span class=\"n\">exe</span> <span class=\"o\">(</span><span class=\"n\">Rev10</span><span class=\"o\">,</span> <span class=\"n\">Built</span> <span class=\"kd\">by</span> <span class=\"n\">MSYS2</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">Copyright</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"mi\">2020</span> <span class=\"n\">Free</span> <span class=\"n\">Software</span> <span class=\"n\">Foundation</span><span class=\"o\">,</span> <span class=\"n\">Inc.</span>\n</code></pre></div>",
        "id": 238960709,
        "sender_full_name": "Mac",
        "timestamp": 1621154219
    },
    {
        "content": "<p>clang should also be using <code>ld</code> on Windows by default. It might be some minor difference like g++'s runtime library using fewer symbols than clang's or something</p>",
        "id": 238964769,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621158840
    }
]