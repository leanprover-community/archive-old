[
    {
        "content": "<p>I have encountered a problem with rewrite where I believe a certain class is not properly instantiated during unification.</p>\n<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">decEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableEq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.decEq</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instFooNat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">kron</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">kron_right_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">kron</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">kron</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">kron</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">kron</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">kron_right_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The rewrite <code>rw[kron_right_mul]</code> fails with \"tactic 'rewrite' failed, did not find instance of the pattern in the target expression\" and tracing isDefEq reveals that the problematic step is to decide the following equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">instDecidableEqNat</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=?=</span> <span class=\"n\">instDecidableEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Further inspection reveals that <code>instDecidableEq</code> is unfolded to <code>Foo.decEq</code> that is unfolded to <code>?foo.1</code>. Why is it a metavariable? It should be <code>instFooNat.1</code>.<br>\nNevertheless, <code>?foo</code> gets assigned: <code>[Meta.isDefEq.assign.final] ?foo := { decEq := Nat.decEq.match_1 } </code> but the match still fails at the end for some reason.</p>\n<p>The rewrite works if you specify the type <code>α</code> explicitly: <code>rw[kron_right_mul Nat]</code></p>\n<p>What is going on here?</p>",
        "id": 274870747,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1646934492
    },
    {
        "content": "<p>Pushed a fix for this: <a href=\"https://github.com/leanprover/lean4/commit/fddc8b06ac97fa61d8137d25d15956b76be95323\">https://github.com/leanprover/lean4/commit/fddc8b06ac97fa61d8137d25d15956b76be95323</a></p>",
        "id": 274877040,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646937343
    }
]