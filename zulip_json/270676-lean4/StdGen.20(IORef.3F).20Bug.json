[
    {
        "content": "<p>While porting <code>Control.Random</code> to Lean 4 for my quickcheck experimentation I noticed that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rng</span> <span class=\"bp\">←</span> <span class=\"n\">IO.stdGenRef.get</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Random!: {Prod.fst $ RandomGen.next rng}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>will actually hang on the <code>#eval</code> directive, is this intended? I'm guessing this is related to fact that this is trying to obtain an <code>IO.Ref</code> value?</p>",
        "id": 274241752,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646484611
    },
    {
        "content": "<p>I am seeing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">terminate</span> <span class=\"n\">called</span> <span class=\"n\">after</span> <span class=\"n\">throwing</span> <span class=\"n\">an</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception'</span>\n  <span class=\"n\">what</span><span class=\"o\">():</span>  <span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">init</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">IO.stdGenRef'</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">module</span>\n</code></pre></div>\n<p>in the output when I try this.</p>",
        "id": 274259643,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1646507136
    },
    {
        "content": "<p>Hm for me on <code>leanprover/lean4:nightly-2022-03-05</code> it just hangs in my emacs</p>\n<p>Either way that's probably a bug right?</p>",
        "id": 274260075,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646507689
    },
    {
        "content": "<p>I think so, the initializer for <code>IO.stdGenRef</code> should run on startup, not when the <code>#eval</code> is executed.</p>",
        "id": 274269955,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1646520610
    },
    {
        "content": "<p>Should work now</p>",
        "id": 274369917,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646647216
    }
]