[
    {
        "content": "<p>I'm implementing protobuffer support for lean4, and one interesting challenge is that the protobuf standard supports proto definitions with recursive type dependencies:</p>\n<div class=\"codehilite\" data-code-language=\"Protocol Buffer\"><pre><span></span><code><span class=\"kd\">message</span> <span class=\"nc\">A</span> <span class=\"p\">{</span>\n    <span class=\"k\">optional</span> <span class=\"n\">A</span> <span class=\"na\">recursive_field</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">optional</span> <span class=\"n\">B</span> <span class=\"na\">mutual_recursive_field</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">B</span> <span class=\"p\">{</span>\n    <span class=\"k\">optional</span> <span class=\"n\">A</span> <span class=\"na\">mutual_recursive_field</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I could in theory kinda-sorta translate this to Lean using mutual induction but the ergonomics of using generated code would be awful. I wonder if it's possible (likely through custom codegen) to better support these kinds of structures with the restriction that all structure fields are \"simple\" - either data or optional references of other such structs.</p>",
        "id": 228144031,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1614533297
    }
]