[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">tensor_inner_family</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tensor_product_family</span> <span class=\"bp\">𝕜</span> <span class=\"n\">α</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">to_inner_product_space</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">inner_tensor_distr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">has_inner.inner</span> <span class=\"o\">(</span><span class=\"n\">tensor_product_family.pr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tensor_product_family.pr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">has_inner.inner</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">has_inner.inner</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">norm_comm_inc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">tensor_product_family.pr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">==</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">tensor_product_family.pr</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>tensor_product_family</code> is defined above and equips an indexed family of types with a tensor product operation. No matter how I attempt to phrase the second axiom, the type checker refuses to let the inner product on the product space through. I suspect it may be the fault of a ridiculous syntax error I'm not seeing, since when I phrase it directly in terms of the product space (<code>  (inner_tensor_distr : ∀ (a b : α) (x y : X a) (z w : X b), (X (tensor_product_family.prₜ a b)).has_inner.inner (tensor_product_family.pr a b x z) (tensor_product_family.pr a b y w)) == (has_inner.inner x y) * (has_inner.inner z w))</code>) it fails in roughly the same location but on a different syntax element. Any tips would be greatly appreciated.</p>",
        "id": 296154739,
        "sender_full_name": "Quarrie",
        "timestamp": 1661875332
    },
    {
        "content": "<p>Just to confirm -- this is Lean 3, right? If so, you're in the wrong stream (and I forget who can move messages to, say, <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> , which would be more appropriate if I'm right).</p>",
        "id": 296169917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661878524
    }
]