[
    {
        "content": "<p>Is there any way to play with the tools that sit in <a href=\"https://github.com/leanprover/lean4/blob/master/script/reformat.lean\">script/reformat.lean</a>? Building lean doesn't seem to create an executable for that file.</p>",
        "id": 312641397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669645982
    },
    {
        "content": "<p>I think you can just use <code>lean --run</code></p>",
        "id": 312641553,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669646029
    },
    {
        "content": "<p>I guess I would need to run that from a project whose lean-tool-chain correspond to the version of the lean4 repo where this script is sitting?</p>",
        "id": 312642667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669646321
    },
    {
        "content": "<p>It doesn't seem to work <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 312643247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669646469
    },
    {
        "content": "<p>Is this script tested by CI and meant to work or could it be outdated?</p>",
        "id": 312643327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669646487
    },
    {
        "content": "<p>Its syntax is definitely outdated, and it might not work with <code>--run</code> after all. Also, I don't think you will be impressed by its current output.</p>",
        "id": 312644442,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669646826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I got it up to date (at least as far as getting it to run):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>reformat.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2021 Microsoft Corporation. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Gabriel Ebner</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">getCommands</span> <span class=\"o\">(</span><span class=\"n\">cmds</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"n\">Id</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">cmds.getKind</span> <span class=\"bp\">==</span> <span class=\"n\">nullKind</span> <span class=\"bp\">||</span> <span class=\"n\">cmds.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Module.header</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">cmd</span> <span class=\"k\">in</span> <span class=\"n\">cmds.getArgs</span> <span class=\"k\">do</span>\n      <span class=\"n\">getCommands</span> <span class=\"n\">cmd</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span> <span class=\"n\">cmds</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">reprintCore</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Format</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.missing</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.atom</span> <span class=\"n\">_</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val.trim</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.ident</span> <span class=\"n\">_</span> <span class=\"n\">rawVal</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rawVal.toString</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">args.toList.filterMap</span> <span class=\"n\">reprintCore</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arg</span>\n    <span class=\"bp\">|</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Format.group</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Format.nest</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Format.line.joinSep</span> <span class=\"n\">args</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reprint</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span>\n  <span class=\"n\">reprintCore</span> <span class=\"n\">stx</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getD</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">printCommands</span> <span class=\"o\">(</span><span class=\"n\">cmds</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">cmd</span> <span class=\"k\">in</span> <span class=\"n\">getCommands</span> <span class=\"n\">cmds</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">|&gt;.</span><span class=\"mi\">2</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppCategory</span> <span class=\"bp\">`</span><span class=\"n\">command</span> <span class=\"n\">cmd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pretty</span>\n    <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"/-</span><span class=\"se\">\\n</span><span class=\"s2\">cannot print: {← e.toMessageData.format}</span><span class=\"se\">\\n</span><span class=\"s2\">{reprint cmd}</span><span class=\"se\">\\n</span><span class=\"s2\">-/\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">failWith</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exitCode</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getStderr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">putStrLn</span> <span class=\"n\">msg</span>\n  <span class=\"n\">IO.Process.exit</span> <span class=\"n\">exitCode</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CommandSyntax</span> <span class=\"n\">where</span>\n  <span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span>\n  <span class=\"n\">currNamespace</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span>\n  <span class=\"n\">openDecls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">OpenDecl</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseModule</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Options</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"mi\">1024</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IO</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Array</span> <span class=\"n\">CommandSyntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainModuleName</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span> <span class=\"c1\">-- FIXME</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">parserState</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">header</span> <span class=\"n\">opts</span> <span class=\"n\">messages</span> <span class=\"n\">inputCtx</span> <span class=\"n\">trustLevel</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env.setMainModule</span> <span class=\"n\">mainModuleName</span>\n  <span class=\"k\">let</span> <span class=\"n\">env0</span> <span class=\"o\">:=</span> <span class=\"n\">env</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">inputCtx</span> <span class=\"n\">parserState</span>\n    <span class=\"o\">{</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">env</span> <span class=\"n\">messages</span> <span class=\"n\">opts</span> <span class=\"k\">with</span> <span class=\"n\">infoState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">topLevelCmds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">CommandSyntax</span> <span class=\"bp\">←</span> <span class=\"n\">s.commandState.infoState.trees.toArray.mapM</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">InfoTree.context</span> <span class=\"o\">{</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">currNamespace</span><span class=\"o\">,</span> <span class=\"n\">openDecls</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">InfoTree.node</span> <span class=\"o\">(</span><span class=\"n\">Info.ofCommandInfo</span> <span class=\"o\">{</span><span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">})</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">currNamespace</span><span class=\"o\">,</span> <span class=\"n\">openDecls</span><span class=\"o\">,</span> <span class=\"n\">stx</span><span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">failWith</span> <span class=\"s2\">\"unknown info tree\"</span>\n  <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env0</span><span class=\"o\">,</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">header</span> <span class=\"o\">:</span> <span class=\"n\">CommandSyntax</span> <span class=\"o\">}]</span> <span class=\"bp\">++</span> <span class=\"n\">topLevelCmds</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">fileName</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">args</span> <span class=\"bp\">|</span> <span class=\"n\">failWith</span> <span class=\"s2\">\"Usage: reformat file\"</span>\n  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"n\">moduleStx</span> <span class=\"bp\">←</span> <span class=\"n\">parseModule</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"n\">leadingUpdated</span> <span class=\"o\">:=</span> <span class=\"n\">mkNullNode</span> <span class=\"o\">(</span><span class=\"n\">moduleStx.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">stx</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">updateLeading</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getArgs</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">for</span> <span class=\"o\">{</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">currNamespace</span><span class=\"o\">,</span> <span class=\"n\">openDecls</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"k\">in</span> <span class=\"n\">moduleStx</span><span class=\"o\">,</span> <span class=\"n\">stx</span> <span class=\"k\">in</span> <span class=\"n\">leadingUpdated</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">first</span> <span class=\"k\">then</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"k\">else</span> <span class=\"n\">IO.print</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">printCommands</span> <span class=\"n\">stx</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toIO</span> <span class=\"o\">{</span><span class=\"n\">currNamespace</span><span class=\"o\">,</span> <span class=\"n\">openDecls</span><span class=\"o\">,</span> <span class=\"n\">fileName</span><span class=\"o\">,</span> <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">fileName.toFileMap</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">env</span><span class=\"o\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 312644461,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669646834
    },
    {
        "content": "<p>Thanks Kyle!</p>",
        "id": 312644533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669646858
    },
    {
        "content": "<p>My goal isn't to be impressed by its output, I only want to understand how it works because we try to understand how InfoTree are usable.</p>",
        "id": 312644683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669646893
    },
    {
        "content": "<p>It only uses the info tree superficially though to extract the syntax tree and environment of each command. The language server is the main user of the info tree.</p>",
        "id": 312644943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669646983
    },
    {
        "content": "<p>This is only extracting the syntax from each command's infotree and then pretty printing it (edit: what Sebastian said)</p>",
        "id": 312644955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669646985
    },
    {
        "content": "<p>That file seemed easier to read than the language server...</p>",
        "id": 312645162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669647039
    }
]