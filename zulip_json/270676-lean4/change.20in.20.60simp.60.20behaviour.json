[
    {
        "content": "<p>I will be the first to admit that I know absolutely nothing about how <code>simp</code> works. Is it expected that this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo.comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo.left_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo.right_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo.comm</span><span class=\"o\">,</span> <span class=\"n\">foo.left_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works in Lean 3 but not in Lean 4? Is telling <code>simp</code> about <code>foo.comm</code> basically a lottery? [PS <code>foo:=and</code>, this is a proof in logic.basic without the notation]</p>",
        "id": 236756036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619734724
    },
    {
        "content": "<p>it looks like it worked, the two sides are the same</p>",
        "id": 236756211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619734833
    },
    {
        "content": "<p>it's just missing iff.refl</p>",
        "id": 236756222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619734839
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>\n<p>doesn't work because <code>iff.rfl</code> doesn't exist and neither does <code>@[refl]</code></p>",
        "id": 236756349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619734917
    },
    {
        "content": "<p>the <code>rfl</code> tactic is also now simply <code>exact rfl</code> instead of looking up the refl lemma and so on</p>",
        "id": 236756432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619734954
    },
    {
        "content": "<p>this will probably need mathlib prelude work</p>",
        "id": 236756447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619734964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/change.20in.20.60simp.60.20behaviour/near/236756349\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>\n<p>doesn't work because <code>iff.rfl</code> doesn't exist and neither does <code>@[refl]</code></p>\n</blockquote>\n<p>Doesn't <code>Iff.rfl</code> exist?</p>",
        "id": 236756458,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619734983
    },
    {
        "content": "<p>silly me</p>",
        "id": 236756483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619734998
    },
    {
        "content": "<p>I had to <code>exact Iff.rfl</code> on some <code>a &lt;=&gt; a</code>alas, but was wondering if there was a better way to do it</p>",
        "id": 236756595,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619735050
    },
    {
        "content": "<p>It's <code>iff_self : a ↔ a ↔ true</code> which is missing</p>",
        "id": 236756829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619735213
    },
    {
        "content": "<p>in lean 3, this is handled by the <code>refl</code> tactic, which is automatically called with <code>reducible</code> reducibility by <code>simp</code> and <code>rw</code></p>",
        "id": 236756851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735228
    },
    {
        "content": "<p>Adding <code>iff_self_iff_true</code> to the simp only list will also fix it in this case, although I guess <code>exact Iff.rfl</code> is shorter</p>",
        "id": 236756892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735266
    },
    {
        "content": "<p>I noticed today that <code>rw</code> will try <code>Eq.refl</code> when it finishes in Lean 4 but not <code>Iff.refl</code>.</p>",
        "id": 236756943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619735288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/change.20in.20.60simp.60.20behaviour/near/236756943\">said</a>:</p>\n<blockquote>\n<p>I noticed today that <code>rw</code> will try <code>Eq.refl</code> when it finishes in Lean 4 but not <code>Iff.refl</code>.</p>\n</blockquote>\n<p>Correct, I wished it would, is this also a simp-lemmas list thing?</p>",
        "id": 236756979,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619735317
    },
    {
        "content": "<p>it uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">withCheapRefl</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">withReducible</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 236757010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735342
    },
    {
        "content": "<p>where <code>rfl</code> is the tactic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"rfl\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 236757035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735360
    },
    {
        "content": "<p>so there really isn't anything fancy here</p>",
        "id": 236757052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735371
    },
    {
        "content": "<p>It is not clear to me whether overriding the <code>rfl</code> tactic will make <code>withCheapRefl</code> change behavior</p>",
        "id": 236757157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735415
    },
    {
        "content": "<p>I think that in Lean 3 Lean tries <code>refl</code> after a <code>rw</code>, and <code>refl</code> will solve any <code>R a a</code> goal if <code>R</code> is tagged <code>@[refl]</code>. But we can't make user tags right now. I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"refl\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Iff.refl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in <code>git@github.com:kbuzzard/mathlib4_experiments.git</code></p>",
        "id": 236757176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619735424
    },
    {
        "content": "<p>you should try using <code>rfl</code> instead of <code>refl</code> and override the existing one</p>",
        "id": 236757240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735455
    },
    {
        "content": "<p>There is a funny new way of adding dynamic lists to the environment using <code>initialize</code> though</p>",
        "id": 236757398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735534
    },
    {
        "content": "<p>you might need special commands if we can't declare attributes though</p>",
        "id": 236757454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/change.20in.20.60simp.60.20behaviour/near/236757157\">said</a>:</p>\n<blockquote>\n<p>It is not clear to me whether overriding the <code>rfl</code> tactic will make <code>withCheapRefl</code> change behavior</p>\n</blockquote>\n<p>It should! Tactics are really just macros and can be extended/overridden in the same way (see also our macro paper). I'll leave it to you to evaluate whether that is a good idea in this case.</p>",
        "id": 236795961,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619767415
    },
    {
        "content": "<p>I assume that this only applies to macro-based tactics, though. I expect most tactics will be written as actual metaprograms, similar to lean 3, unless they are really trivial, and I assume that if you make it a program then you are actually calling a specific function when you refer to a subroutine, not calling into a forward reference in the macro system</p>",
        "id": 236819663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619781562
    },
    {
        "content": "<p>You can make it a forward reference using <code>evalTactic</code>. You may want to avoid that in the hot part of the code, but at that point you're probably calling function that don't have a tactic syntax anyway.</p>",
        "id": 236820109,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619781803
    }
]