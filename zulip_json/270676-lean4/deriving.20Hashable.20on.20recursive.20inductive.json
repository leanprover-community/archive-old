[
    {
        "content": "<p>The builtin deriving handler can deal with this simple recursive inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Hashable</span>\n</code></pre></div>\n<p>However, it does not seem to be able to handle the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T2</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T2</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Hashable</span> <span class=\"c1\">-- ERROR: failed to synthesize instance Hashable (List T2)</span>\n</code></pre></div>\n<p>Even though there is a Hashable instance for (List α), Lean can't  synthesize the instance.</p>\n<p>The generated mutual and instance looks good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n       <span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">hashT2</span><span class=\"bp\">✝</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span>\n         <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">T2.a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">T2.b</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mixHash</span><span class=\"bp\">✝</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"bp\">✝</span> <span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">hashT2</span><span class=\"bp\">✝</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>But it can't resolve <code>(hash✝ a✝)</code> for the List argument.</p>\n<p>What am I missing here?</p>",
        "id": 303163272,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665342008
    },
    {
        "content": "<p>the type is not declared as <code>Hashable</code> during the definition of the function so there is no instance to be found. Instead of recursively calling <code>hash</code> here it should do something with hashT2 on the list, probably a sort of fold operation.</p>",
        "id": 303163682,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1665342330
    },
    {
        "content": "<p>I see. I missed the fact that the generated <code>hashT</code> is calling <code>hashT</code> directly and not going through typeclass resolution.</p>\n<p>Thanks.</p>",
        "id": 303164380,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665342828
    },
    {
        "content": "<p>What option did you specify/what did you write to see that <code>mutual</code> code?  I tried a variety of the <code>pp</code> flags but can't get the infoview to show it.<br>\nThanks.</p>",
        "id": 303180480,
        "sender_full_name": "Tom",
        "timestamp": 1665359482
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"515083\">@Tom</span> , I used <code>set_option trace.Elab.Deriving.hashable true</code>. It will dump the mutual block and the instance.</p>",
        "id": 303188338,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665368907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/deriving.20Hashable.20on.20recursive.20inductive/near/303163682\">said</a>:</p>\n<blockquote>\n<p>Instead of recursively calling <code>hash</code> here it should do something with hashT2 on the list, probably a sort of fold operation.</p>\n</blockquote>\n<p>The fact that the <code>Hashable (List α)</code> instance is already the needed fold, makes inlining of this fold operation solution unsatisfactory, though. It seems that there needs to be a better solution for these mutual references.</p>",
        "id": 303189522,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665370218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> <a href=\"#narrow/stream/270676-lean4/topic/deriving.20Hashable.20on.20recursive.20inductive/near/303188338\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"515083\">Tom</span> , I used <code>set_option trace.Elab.Deriving.hashable true</code>. It will dump the mutual block and the instance.</p>\n</blockquote>\n<p>FYI, here is the deriving handler for Hashable <code>src/Lean/Elab/Deriving/Hashable.lean</code> (was enlightening to look at):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkHashableHandler</span> <span class=\"o\">(</span><span class=\"n\">declNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">declNames.allM</span> <span class=\"n\">isInductive</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">declNames.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">cmds</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkHashableInstanceCmds</span> <span class=\"n\">declNames</span>\n    <span class=\"n\">cmds.forM</span> <span class=\"n\">elabCommand</span>\n    <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 303256592,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665407084
    }
]