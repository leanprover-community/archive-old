[
    {
        "content": "<p>Is there some way to prevent <code>unsafe</code> from propagating outwards? Once again, my use case is dubious, but it would be useful to prototype something. I'm really looking for something like <code>unsafePerformIO: IO a -&gt; a</code>. Lean seems to have at most <a href=\"https://github.com/leanprover/lean4/blob/f78d3554168589af5538c1cea159d3008a5f0abf/stage0/src/Init/System/IO.lean#L85-L88\"><code>unsafeIO</code></a>, which infects the outer scope with <code>unsafe</code> annotations.</p>",
        "id": 272173357,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645043055
    },
    {
        "content": "<p>You can refer to an unsafe definition using the implemented by attribute as for example done  here <a href=\"https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Init/Data/Array/Basic.lean#L108-L130\">https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Init/Data/Array/Basic.lean#L108-L130</a></p>",
        "id": 272173614,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645043200
    },
    {
        "content": "<p>The actual problem: I'm trying to make generated paths relative for <code>doc-gen4</code>. There are paths that look like <code>./build/doc//./Init/Control</code>, which I want to normalize. It appears that <a href=\"https://doc.rust-lang.org/std/fs/fn.canonicalize.html#platform-specific-behavior\">rustc calls out to <code>realpath</code></a>. I'd like to quickly test that this solves the problem for me before I pull in an <code>IO</code> into the monad transformer stack...</p>",
        "id": 272173621,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645043203
    },
    {
        "content": "<p>You can't have <code>IO a -&gt; a</code> without <code>unsafe</code> because it would break the logic.</p>",
        "id": 272173716,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645043256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/sealing.20unsafe/near/272173614\">said</a>:</p>\n<blockquote>\n<p>You can refer to an unsafe definition using the implemented by attribute as for example done  here <a href=\"https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Init/Data/Array/Basic.lean#L108-L130\">https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Init/Data/Array/Basic.lean#L108-L130</a></p>\n</blockquote>\n<p>Wow that's neat! OK, let me try that</p>",
        "id": 272173726,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645043259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yes, I'm aware what I'm asking for is unsound  :)</p>",
        "id": 272173759,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645043279
    },
    {
        "content": "<p>Well Lean is sound, so the answer is no</p>",
        "id": 272173818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645043292
    },
    {
        "content": "<p>(hopefully <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 272173847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645043306
    },
    {
        "content": "<p>Lean also has<code>sorry</code>s, which it allows, and whose presence tracks in the kernel(?). I imagine it could hypothetically do something similar for <code>unsafePeformIOSealed: IO a -&gt; a</code>?</p>",
        "id": 272173874,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645043332
    },
    {
        "content": "<p>Regarding your normalization thingy, is <code>FilePath.normalize</code> strong enough for this?</p>",
        "id": 272173966,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645043390
    },
    {
        "content": "<p>Well, more practically for any inhabited <code>a</code> (like <code>String</code>) you can make <code>IO a -&gt; a</code> using unsafe/implementedBy</p>",
        "id": 272174055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645043420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> no, the implementation of <a href=\"https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Init/System/FilePath.lean#L44-L50\"><code>FilePath.normalize</code> has a TODO for this</a>.</p>\n<p>I was hoping I could quickly write out a correct implementation. But it seems like Rust calls out to C for this. This makes me feel that calling out to <a href=\"https://man7.org/linux/man-pages/man3/realpath.3.html\"><code>realpath</code></a> is the sanest thing to do</p>",
        "id": 272174133,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645043473
    },
    {
        "content": "<p>Hm it seems the reason cannonical would need IO is because it also does stuff such as resolving symlinks. Other than that the implementation in libc just looks like a ton of C string hackery.</p>",
        "id": 272175188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645044041
    },
    {
        "content": "<p>How does pathlib do it in Python?</p>",
        "id": 272206509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645064661
    }
]