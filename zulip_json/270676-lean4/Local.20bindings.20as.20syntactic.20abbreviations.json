[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- Just noticed I don't need to open `some`; no idea why</span>\n<span class=\"kn\">open</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tree.rec'</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">both</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">none</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">both</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"n\">where</span> <span class=\"n\">rec''</span> <span class=\"o\">:=</span> <span class=\"n\">rec'</span> <span class=\"n\">base</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"n\">both</span>\n</code></pre></div>\n<p>This doesn't work with Lean complaining about failing to show termination.  Normally that's reasonable, but here all applications of <code>rec''</code> are just applications of <code>rec'</code> to subtrees, i.e. if <code>rec''</code> was instead treated as an abbreviation and substituted wherever it appears, this would just be structural recursion.</p>\n<p>Is there any way to achieve such an effect and avoiding writing out <code>rec' base left right both</code> every time?</p>",
        "id": 283700192,
        "sender_full_name": "Raghuram",
        "timestamp": 1653371457
    },
    {
        "content": "<p>Indeed, <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html#local-definitions\">Theorem Proving in Lean 4</a> <em>seems</em> to be saying that <code>let</code>does this, but that doesn't work here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tree.rec'</span> <span class=\"bp\">...</span>\n    <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">tree</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">rec''</span> <span class=\"o\">:=</span> <span class=\"n\">rec'</span> <span class=\"n\">base</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"n\">both</span>\n<span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">none</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">both</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec''</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>still complains about failing to show termination.</p>",
        "id": 283701366,
        "sender_full_name": "Raghuram",
        "timestamp": 1653372683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501683\">Raghuram</span> <a href=\"#narrow/stream/270676-lean4/topic/Local.20bindings.20as.20syntactic.20abbreviations/near/283700192\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Just noticed I don't need to open `some`; no idea why</span>\n<span class=\"kn\">open</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>\n</blockquote>\n<p>You don't need to open either <code>none</code> or <code>some</code> because these are both <code>export</code>ed in the global namespace</p>",
        "id": 283701881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653373282
    },
    {
        "content": "<p>If the <code>where</code> was abbreviating something more complicated the answer might be different, but in this case there is a simpler alternative which is to use <code>variable</code> instead of binders left of the colon; these don't appear in the function call in recursive occurrences</p>",
        "id": 283702072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653373453
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">both</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tree.rec'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"n\">none</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">rec'</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">rec'</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">both</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">rec'</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rec'</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 283702139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653373529
    }
]