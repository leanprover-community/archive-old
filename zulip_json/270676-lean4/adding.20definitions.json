[
    {
        "content": "<p>What is the simplest way in <code>CommandElabM</code> to create a new definition using a object that we already have? For instance assume my tactic state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">PUnit</span>\n</code></pre></div>\n<p>What is the simplest way to add to the current environment a definition with name foo, type <code>Array Nat</code> and value <code>arr</code>? I know I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Array</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">Declaration</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">typ</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"n\">ReducibilityHints.opaque</span><span class=\"o\">,</span> <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.safe</span><span class=\"o\">}</span>\n  <span class=\"n\">addAndCompile</span> <span class=\"n\">decl</span>\n</code></pre></div>\n<p>but it seems very complicated and I don't really know how to construct the <code>val</code> expression. I could also try to create some Syntax and use <code>elabCommand</code> but it seems even more tortuous.</p>",
        "id": 294586452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661119513
    },
    {
        "content": "<p>I could be wrong, but I think you need to build the value expression</p>",
        "id": 294588724,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661122720
    },
    {
        "content": "<p>(I'm not sure if you don't want a solution that involves building the value expression of if you just don't know how to)</p>",
        "id": 294588771,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661122781
    },
    {
        "content": "<p>To build the value expression, you can use <code>mkNatLit</code> to build a <code>List Expr</code> from <code>arr</code>, <code>mkListLit</code> to build an expression that represents the <code>List Nat</code> and <code>mkApp</code> to build the expression that represents the <code>Array Nat</code></p>",
        "id": 294589263,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661123332
    },
    {
        "content": "<p>Thanks Arthur. I was really hoping for a much simpler way.  Basically I'd like a (monadic) function creating an Expr from a local declaration in my \"programming state\" (I don't really know how to call what the info view is showing while I'm programming in do notation).</p>",
        "id": 294618788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661152685
    },
    {
        "content": "<p>But maybe those difficulties show that I'm following a completely wrong path.</p>",
        "id": 294618821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661152711
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">arr</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Note that this will add a definition with the (inaccessible) declaration name <code>(← `(foo)).getId</code>.</p>",
        "id": 294630281,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661158027
    },
    {
        "content": "<p>If you want to go with <code>addAndCompile</code> directly, you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n  <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">toTypeExpr</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"n\">arr</span>\n  <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">regular</span> <span class=\"o\">(</span><span class=\"n\">getMaxHeight</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 294630867,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661158261
    },
    {
        "content": "<p>Thanks Gabriel!</p>",
        "id": 294632685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661158916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/adding.20definitions/near/294630281\">said</a>:</p>\n<blockquote>\n<p>Note that this will add a definition with the (inaccessible) declaration name <code>(← `(foo)).getId</code>.</p>\n</blockquote>\n<p>Unless I disable hygiene, right?</p>",
        "id": 294632762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661158933
    },
    {
        "content": "<p>I would never suggest to disable hygiene.  If you want a non-hygienic name for the definition I'd do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 294636031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661160170
    },
    {
        "content": "<p>Sorry about the heretic suggestion and thanks for telling me how to redeem myself.</p>",
        "id": 294637121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661160608
    },
    {
        "content": "<p>Oh, <code>toExpr</code> and <code>toTypeExpr</code> for the rescue! I didn't know those</p>",
        "id": 294656670,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661168311
    },
    {
        "content": "<p>Definitely would be worth including somewhere in the metaprogramming book, I had the exact question as Patrick earlier this week and resorted to manually reconstructing the syntax</p>",
        "id": 294722332,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661185255
    },
    {
        "content": "<p>Good call. Added as an issue</p>",
        "id": 294723661,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661185706
    },
    {
        "content": "<p>I'm back to Lean and none of Gabriel's solutions works in my real use case <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> There is no miracle, <code>quote</code>, <code>toExpr</code> and <code>toTypeExpr</code> all require instances.</p>",
        "id": 294742503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661192131
    },
    {
        "content": "<p>Then you should post your real use case. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 294742719,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661192218
    },
    {
        "content": "<p>And no luck with hoping for <code>deriving</code> miracles.</p>",
        "id": 294742788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661192239
    },
    {
        "content": "<p>In the real case <code>Nat</code> is replaced with a home-made structure.</p>",
        "id": 294742980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661192290
    },
    {
        "content": "<p>However the fields of that structure are either <code>Name</code> or <code>String</code> so I guess defining the missing instances shouldn't be too hard</p>",
        "id": 294743063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661192325
    },
    {
        "content": "<p>I managed to create the <code>Quote</code> instance!</p>",
        "id": 294744291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661192797
    },
    {
        "content": "<p>I don't know how the <code>deriving</code> magic works but it looks like what I did is easy to automate to get a <code>Quote</code> instance for a structure where all fields have <code>Quote</code> instances.</p>",
        "id": 294744462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661192873
    },
    {
        "content": "<p>I have a dual question. Inside a <code>TermElabM</code> computation I want to get access to an object that have been declared previously. Am I meant to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.find#doc\">docs4#Lean.Environment.find</a>? and then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConstantInfo.value#doc\">docs4#ConstantInfo.value</a>! and then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.evalExpr#doc\">docs4#Lean.Meta.evalExpr</a> or is there a more direct route?</p>",
        "id": 294939155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661285391
    },
    {
        "content": "<p>The Zulip linkfier doesn't like declaration names ending in punctuation marks <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 294939247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661285413
    },
    {
        "content": "<p>If you just want the expr then <code>((&lt;- getEnv).find? name).get!.value!</code> will do the trick</p>",
        "id": 294942149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661286809
    },
    {
        "content": "<p>I know, but I want the object, that's why I'm asking whether I should use <code>evalExpr</code>. It sounds a bit expensive to to this while Lean already did that work at declaration time.</p>",
        "id": 294942328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661286881
    },
    {
        "content": "<p><code>evalConst</code> is a bit easier than <code>evalExpr</code> for this case</p>",
        "id": 294942357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661286896
    },
    {
        "content": "<p><code>(&lt;- getEnv).evalConst A (&lt;- getOptions) name</code></p>",
        "id": 294942407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661286924
    },
    {
        "content": "<p>A definition, even with zero parameters, is not immediately evaluated to an object at declaration time</p>",
        "id": 294942457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661286948
    },
    {
        "content": "<p>Does it mean it's evaluated every time we use it?</p>",
        "id": 294942603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661287011
    },
    {
        "content": "<p>In compiled code, it is evaluated once. In interpreted code, it is currently evaluated once per interpreter invocation (i.e. if your interpreted tactic calls <code>evalConst</code> multiple times on the same declaration, it should only be evaluated once I think).</p>",
        "id": 294943161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661287280
    },
    {
        "content": "<p>It feels a but weird that I need to add <code>unsafe</code> everywhere because I want to access declared objects (both <code>evalExpr</code> and <code>evalConst</code> are unsafe).</p>",
        "id": 294958893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661296259
    },
    {
        "content": "<p>The operation is fundamentally unsafe, since nothing prevents you from passing the wrong type to <code>evalExpr</code></p>",
        "id": 294960538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661297544
    },
    {
        "content": "<p>You can use <code>Mathlib.Util.TermUnsafe</code> to make it a bit more ergonomic to call unsafe functions</p>",
        "id": 294960577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661297588
    },
    {
        "content": "<p>Now known as <code>Std.Util.TermUnsafe</code>.</p>",
        "id": 310918066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1668804453
    }
]