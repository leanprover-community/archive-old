[
    {
        "content": "<p>Is there a way to get a match to simplify when it gets hung up on proofs? In the example below, I can't reduce the definition of <code>bangStar</code> to <code>!</code>, which I think is a result of it not recognizing that any (_ : 0 &lt; 10) are definitionally equal. If I put another <code>⟨0, h'⟩</code> case first, I get a <code>redundant alternative</code> error, so apparently Lean does know (somewhere) that they're the same.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bangStar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"n\">Char</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'!'</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'!'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'*'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"n\">bangStar</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"sc\">'!'</span> <span class=\"bp\">∨</span> <span class=\"n\">bangStar</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"sc\">'*'</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bangStar</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 265077862,
        "sender_full_name": "Chris B",
        "timestamp": 1639603903
    },
    {
        "content": "<p>You can use the <code>split</code> tactic. It can split <code>match</code> and <code>if-then-else</code> expressions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bangStar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"n\">Char</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'!'</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'!'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'*'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"n\">bangStar</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"sc\">'!'</span> <span class=\"bp\">∨</span> <span class=\"n\">bangStar</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"sc\">'*'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">delta</span> <span class=\"n\">bangStar</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 265078497,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1639604180
    },
    {
        "content": "<p>That's super useful, thank you. I'll try to come up with some good examples and add that to the tactic section of the manual unless you think <code>split</code> will change in the near future.</p>",
        "id": 265079411,
        "sender_full_name": "Chris B",
        "timestamp": 1639604628
    },
    {
        "content": "<p>Thanks. We improve <code>split</code> in the future, but we do not expect any changes in the current functionality.</p>",
        "id": 265080060,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1639604766
    }
]