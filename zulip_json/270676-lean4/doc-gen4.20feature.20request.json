[
    {
        "content": "<p>In order to test a new feature I am adding to Lake, I ended up playing around with doc-gen4 and I had some feedback to share. I noticed that <code>doc-gen4</code> builds the entire dependency graph worth of modules every time it is run and also re-outputs the doc directory each time. <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, would it be feasible to split these tasks up? That is, have something like <code>doc-gen4 --setup</code> generate the directory first, and have a <code>doc-gen4 Module --single</code> output the documentation of single module?</p>\n<p>Now, I should explain why this would be useful. The feature I am adding to Lake is called \"module facets\". A package can define a facet like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span>\n\n<span class=\"n\">module_facet</span> <span class=\"n\">docs</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">mod</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">docGen4</span> <span class=\"bp\">←</span> <span class=\"n\">findLeanExe</span><span class=\"bp\">?</span> <span class=\"bp\">&amp;`«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span>\n    <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"s2\">\"no doc-gen4 executable configuration found in workspace\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">exeTarget</span> <span class=\"bp\">←</span> <span class=\"n\">docGen4.info.recBuild</span>\n  <span class=\"k\">let</span> <span class=\"n\">task</span> <span class=\"bp\">←</span> <span class=\"n\">exeTarget.bindSync</span> <span class=\"k\">fun</span> <span class=\"n\">exeFile</span> <span class=\"n\">depTrace</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">proc</span> <span class=\"o\">{</span>\n      <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">exeFile.toString</span>\n      <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mod.name.toString</span><span class=\"o\">]</span>\n      <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getLeanEnv</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"n\">depTrace</span>\n  <span class=\"n\">return</span> <span class=\"n\">ActiveTarget.opaque</span> <span class=\"n\">task</span>\n</code></pre></div>\n<p>And then users can build the facet on any module by using <code>lake build +Module:docs</code>. For example, doc-gen4 could define such a facet and then any package importing it can build documentation for a module using such am invocation.</p>\n<p><strong>P.S.</strong> I wasn't sure where was best to put this (e.g., here, on the doc-gen4 repository's issues, etc.). If there is a place you would prefer <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  feel free to say and I will do that next time. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 287799893,
        "sender_full_name": "Mac",
        "timestamp": 1656469197
    },
    {
        "content": "<p>This looks very cool. If you are up for a bit of bikeshedding, I'll note that I always found Lake's \"facet\" terminology a bit mysterious. As a non-native speaker, I could probably count on one hand the number of times I'd heard it used before Lake. This may well be an advantage - while there is a dictionary definition (which I just looked up), I can basically conceptualize \"facet of X\" as a new idea meaning \"a thing that Lake produces from X\" independently of non-programming uses. The first alternative that came to mind was <code>module_functor</code> but that's mysteriously mathematical and probably not better. <code>module_view</code> uses a more common noun. But again, maybe the more obscure word is a good idea.</p>",
        "id": 287800777,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1656470091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  I appreciate the feedback! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  I do note, though, that there was not actually much bikeshedding there as, by the end of the comment, you appear to have come around to the terminology. At least I think that is a fair reading?</p>",
        "id": 287801528,
        "sender_full_name": "Mac",
        "timestamp": 1656470902
    },
    {
        "content": "<p>That's right. I am raising the point in case others have thoughts on this.</p>",
        "id": 287802145,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1656471601
    },
    {
        "content": "<p>What exactly would you expect --setup to do? Just generate build/doc? Or the entire directory layout because creating that without analysis of the modules seems kinda hard?</p>\n<p>Regarding the --single output, that is possible but the page will likely end up with a million broken links (or a lot of links less) like that, do we really want that?</p>",
        "id": 287814401,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656486111
    },
    {
        "content": "<p>Ideally we could just build a caching mechanism into doc-gen that checks whether a doc file is older/newer than the .olean file and doesn't regen it right?</p>",
        "id": 287815326,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656486904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/287814401\">said</a>:</p>\n<blockquote>\n<p>What exactly would you expect --setup to do? Just generate build/doc? Or the entire directory layout because creating that without analysis of the modules seems kinda hard?</p>\n<p>Regarding the --single output, that is possible but the page will likely end up with a million broken links (or a lot of links less) like that, do we really want that?</p>\n</blockquote>\n<p>From my quick examination of the directory it seems like only the Module html files (e.g., Test.html) and the declaration data are dependent on the analysis. Everything else (e.g., CSS, JS, etc.) are just static resources copied into the directory. Thus, I was thinking <code>doc-gen4 --setup</code> would do just that later step (setting up the directory and copying the static resources).</p>\n<p>For <code>--single</code>, doc-gen generating links that are broken until the documentation for the linked module is generated is exactly what I would want. It would also maybe be nice to be able to specify an different base URLs for modules of different packages (this way doc-gen4 wouldn't need to generate the entire tree, but just link to already generated documentation for remote packages).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/287815326\">said</a>:</p>\n<blockquote>\n<p>Ideally we could just build a caching mechanism into doc-gen that checks whether a doc file is older/newer than the .olean file and doesn't regen it right?</p>\n</blockquote>\n<p>My plan was essentially to do the reverse. Have the doc-gen4 executable operate as a light-weight utility hat produces documentation that Lake can smartly call out to (if a rebuild is needed) when the user request new documentation. In such a situation, doc-gen could leave all the dependency analysis, module building, and trace checking to Lake. This allows each tool to focus on what it is good at and prevent code duplication across the core tools. What do you think, though?</p>",
        "id": 287818786,
        "sender_full_name": "Mac",
        "timestamp": 1656489413
    },
    {
        "content": "<p>Assuming we want to automatically run doc-gen4 in the <code>lean4</code> CI as well at some point and assuming we still use Nix for building the docs at that point, this setup sounds good to me as well. It should be relatively easy to integrate into an incremental Nix build, similar to how we're e.g. already doing that for doc/examples/ (which should also be ported to doc-gen4): <a href=\"https://github.com/leanprover/lean4/blob/c7c6fc8bc903392c0e4832a4c2804809bee1bd6f/doc/flake.nix#L82-L88\">https://github.com/leanprover/lean4/blob/c7c6fc8bc903392c0e4832a4c2804809bee1bd6f/doc/flake.nix#L82-L88</a></p>",
        "id": 287820795,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656490853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/287818786\">said</a>:</p>\n<blockquote>\n<p>For <code>--single</code>, doc-gen generating links that are broken until the documentation for the linked module is generated is exactly what I would want. It would also maybe be nice to be able to specify an different base URLs for modules of different packages (this way doc-gen4 wouldn't need to generate the entire tree, but just link to already generated documentation for remote packages).</p>\n</blockquote>\n<p>doc-gen4 still needs to take a look at the entire dependency tree to generate the tree view but that should be fine I guess, it doesn't need to run the expensive analysis part on them.</p>\n<p>Either way what you are asking for definitely makes sense to me if we want a tighter integration of doc-gen and lake in the future, people will stop using it as a standalone tool at that point anyways so its w/e.</p>\n<p>That being said I'll probably not get around to implementing it soon, I've my exams for this semester in 2 weeks (spread over 2 weeks) so my anxious mind won't allow me to write much Lean without feeling guilty and wanting to learn even though I know I'll easily pass :D So I'll get back to it in either 4 weeks or in the next week if I end up overcoming my guilt^^ Hence it would probably make sense to open an issue for it so I don't end up forgetting about it</p>",
        "id": 287887920,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656522970
    },
    {
        "content": "<p>I spent a while implementing this now, there is a second issue. doc-gen generates a file <code>declaration-data.bmp</code> (its bmp instead of JSON for Github pages hack reason...they cache .bmp, dont ask) which contains the declaration data the JS can use for the client side search of stuff. I had the idea of splitting this up into multipl <code>declaration-data-topLevelModule.bmp</code> but of course the JS needs to know which files to fetch, which I wanted to circumvent by using a central <code>declaration-data.bmp</code> that tells it where to fetch data from. However in order for this to work out the step that generates <code>declaration-data.bmp</code> would have to already know all the modules that are involved and not just a single one (in the case of --single) or none at all in the case of --setup. In theory I guess I could append to the file over time but that seems very hacky and wouldn't harmony nicely with the Nix idea of Sebastian :( so I'm out of ideas right now how to separate the steps for the modules properly and keep the search working. Would someone else happen to have one?</p>",
        "id": 290309872,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658357280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span></p>\n<p>How about generating it at the end (after documentation for some modules has been generated). For example:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>doc-gen4 --setup <span class=\"c1\"># setup doc directory</span>\ndoc-gen4 A --single <span class=\"c1\"># output module A docs</span>\ndoc-gen4 B C --single <span class=\"c1\"># output module B/C docs</span>\ndoc-gen4 --index <span class=\"c1\"># output `declaration-data.tmp` with index for search of A B C</span>\ndoc-gen4 D <span class=\"c1\"># output module D docs</span>\ndoc-gen4 --index <span class=\"c1\"># regenerate `declaration-data.tmp` with index for search of A B C D</span>\n</code></pre></div>\n<p>It also might be worthwhile to make the options subcommands instead (e.g., <code>setup</code>, <code>index</code>, <code>tree</code>, <code>single</code>, etc.)</p>",
        "id": 290329502,
        "sender_full_name": "Mac",
        "timestamp": 1658374790
    },
    {
        "content": "<p>Oh that would be fine for Nix as well? I was under the assumption that it wouldn't like if i mutate the file afterwards but if that works I'll do it like that.</p>",
        "id": 290356415,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658397958
    },
    {
        "content": "<p>We can always mutate a copy of the original file... :)</p>",
        "id": 290357453,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658398658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> got it: <a href=\"https://github.com/leanprover/doc-gen4#multi-stage\">https://github.com/leanprover/doc-gen4#multi-stage</a></p>",
        "id": 290406359,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658423863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Cool! Some comments:</p>\n<ul>\n<li>I was envisioning <code>single</code> to build literally a single module. It seems to only built root modules of a packages. I would also like to do e.g., <code>doc-gen4 single Lean.Data.Json</code></li>\n<li>The <code>init</code>/<code>setup</code> command seems to be missing? I see it in the code but there appears to be no CLI to use it.</li>\n</ul>",
        "id": 290414462,
        "sender_full_name": "Mac",
        "timestamp": 1658427916
    },
    {
        "content": "<p>Oh i forgot to delete that, it is not necessary finalize does both the init and the finalize part as suggested by <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> in the PR, there is no need to separate them.</p>",
        "id": 290414643,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658427994
    },
    {
        "content": "<p>The single non root module part requires a little more work but should be doable as well I believe.</p>",
        "id": 290415160,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658428247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290414643\">said</a>:</p>\n<blockquote>\n<p>Oh i forgot to delete that, it is not necessary finalize does both the init and the finalize part as suggested by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> in the PR, there is no need to separate them.</p>\n</blockquote>\n<p>Ah, maybe rename the command to <code>index</code> or something else that suggests it need not be used only at the end?</p>",
        "id": 290415771,
        "sender_full_name": "Mac",
        "timestamp": 1658428546
    },
    {
        "content": "<p>\"finalize\" sounds pretty eh final to me?</p>",
        "id": 290415811,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658428561
    },
    {
        "content": "<p>That's my point, it makes it sound like it can only be used at the end when, as you stated, it can also be used at the start.</p>",
        "id": 290415917,
        "sender_full_name": "Mac",
        "timestamp": 1658428612
    },
    {
        "content": "<p>Also, could you elaborate on why the top level module argument is needed for <code>single</code>?</p>",
        "id": 290415970,
        "sender_full_name": "Mac",
        "timestamp": 1658428648
    },
    {
        "content": "<p>Because in order for the navbar on the left hand side to show the entire module tree we need to know the module tree, I did also not like this as well but unless we get rid off the navbar as it is right now it is required.</p>",
        "id": 290416115,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658428700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290416115\">said</a>:</p>\n<blockquote>\n<p>Because in order for the navbar on the left hand side to show the entire module tree we need to know the module tree,</p>\n</blockquote>\n<p>Ah, so this is something that could be solve by <code>lake graph</code>?</p>",
        "id": 290416238,
        "sender_full_name": "Mac",
        "timestamp": 1658428765
    },
    {
        "content": "<p>Hmmmm, thinking further it is also required for the links between modules to work out because I need to know where <code>Nat</code> is in order to link to it from say <code>Mathlib</code>.</p>",
        "id": 290416413,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658428825
    },
    {
        "content": "<p>Or, wait, could the navbar on the left hand side use an iframe to point to a HTML file e.g., <code>navbar.html</code> that is generated during <code>doc-gen4 finalize</code>.</p>",
        "id": 290416435,
        "sender_full_name": "Mac",
        "timestamp": 1658428834
    },
    {
        "content": "<p>That might work out yeah but then the link issue is still blocking sadly :/</p>",
        "id": 290416485,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658428862
    },
    {
        "content": "<p>Could you elaborate on the link issues? I am not entirely sure what you mean.</p>",
        "id": 290416556,
        "sender_full_name": "Mac",
        "timestamp": 1658428904
    },
    {
        "content": "<p>Oh it actually doesn't happen because of transitive imports I guess mhm</p>\n<p>Buuuut I have a third thing ;p and this is actually a bug I noticed before introducing this. The imported-by part on the top right hand side needs to know all modules to know where it was imported from.</p>",
        "id": 290417011,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429086
    },
    {
        "content": "<p>So for example if we only import <code>Std</code> it wont show that <code>Std.Data.HashMap</code> is imported from <code>Lean</code> and <code>Mathilb</code>.</p>",
        "id": 290417127,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290417011\">said</a>:</p>\n<blockquote>\n<p>Oh it actually doesn't happen because of transitive imports I guess mhm</p>\n</blockquote>\n<p><code>doc-gen4 single</code> should not be building imports, correct?</p>",
        "id": 290417184,
        "sender_full_name": "Mac",
        "timestamp": 1658429157
    },
    {
        "content": "<p>Yes it has to because of this link issue. If I have a setup like this:</p>\n<ul>\n<li><code>Lib1</code> top level modules</li>\n<li><code>Lib2</code> top level module</li>\n<li><code>TopLevelLib</code> which imports <code>Lib1</code> and <code>Lib2</code></li>\n</ul>\n<p>and we have a declaration in <code>Lib1</code> that uses a type from <code>Lib2</code> I need to know the location (that is, the file) inside of <code>Lib2</code> to link that type from <code>Lib1</code>.</p>\n<p>So for example in <code>Mathlib</code> if I have a reference to <code>Nat</code> I need to have imported <code>Init</code> to know that it is in <code>Init.Prelude</code> and then link there from Mathlib.</p>",
        "id": 290417487,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290417127\">said</a>:</p>\n<blockquote>\n<p>So for example if we only import <code>Std</code> it wont show that <code>Std.Data.HashMap</code> is imported from <code>Lean</code> and <code>Mathilb</code>.</p>\n</blockquote>\n<p>I think that is fine.  If no top-level module(s) are provided, just don't generate the \"Imported by\" section. This makes sense for API documentation that is uploaded to the web, were the library creator will have no knowledge of what downstream modules import it.</p>",
        "id": 290417591,
        "sender_full_name": "Mac",
        "timestamp": 1658429309
    },
    {
        "content": "<p>testing: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs4#Nat</a></p>",
        "id": 290417796,
        "sender_full_name": "Mac",
        "timestamp": 1658429398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290417487\">said</a>:</p>\n<blockquote>\n<p>I need to know the location (that is, the file) inside of <code>Lib2</code> to link that type from <code>Lib1</code>.</p>\n</blockquote>\n<p>Could it not just link them using the same way Zulip command does e.g., <code>&lt;docs&gt;/find/?pattern=&lt;type&gt;#doc</code>?</p>",
        "id": 290418003,
        "sender_full_name": "Mac",
        "timestamp": 1658429483
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs4#Nat</a> uses find.js to figure out where Nat is. That is a possiblity to fix this (so just link to the right find.js call instead of linking directly) but a rather ugly one IMO.</p>",
        "id": 290418011,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429488
    },
    {
        "content": "<p>Yeah</p>",
        "id": 290418017,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429491
    },
    {
        "content": "<p>I would quite like it. The whole point, for me, of <code>doc-gen4 single Foo.Bar</code> is to generate the docs for  exactly the module <code>Foo.Bar</code> and  nothing else.</p>",
        "id": 290418213,
        "sender_full_name": "Mac",
        "timestamp": 1658429577
    },
    {
        "content": "<p>More broadly, my hope is remove Lake as a dependency for doc-gen4.</p>",
        "id": 290418611,
        "sender_full_name": "Mac",
        "timestamp": 1658429713
    },
    {
        "content": "<p>Okay so we have:</p>\n<ul>\n<li>iframe for navbar to avoid the top level module</li>\n<li>building single modules instead of just top level ones</li>\n<li>always using find.js instead of direct links</li>\n<li>rename finalize to index</li>\n<li>dropping Imported By<br>\nright?</li>\n</ul>",
        "id": 290418725,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290418611\">said</a>:</p>\n<blockquote>\n<p>More broadly, my hope is remove Lake as a dependency for doc-gen4.</p>\n</blockquote>\n<p>But I need <code>lake graph</code> for my search path and stuff :p though I guess you mean as a direct dependency?</p>",
        "id": 290418816,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658429784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290418816\">said</a>:</p>\n<blockquote>\n<p>But I need <code>lake graph</code> for my search path and stuff :p though I guess you mean as a direct dependency?</p>\n</blockquote>\n<p>No you don't. You can just use <code>lake exe doc-gen4 &lt;args&gt;</code> and lake will set the environment's search path appropriately. :)</p>",
        "id": 290418974,
        "sender_full_name": "Mac",
        "timestamp": 1658429860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290418725\">said</a>:</p>\n<blockquote>\n<p>Okay so we have:</p>\n<ul>\n<li>iframe for navbar to avoid the top level module</li>\n<li>building single modules instead of just top level ones</li>\n<li>always using find.js instead of direct links</li>\n<li>rename finalize to index</li>\n<li>dropping Imported By</li>\n</ul>\n</blockquote>\n<p>Sounds great to me!</p>\n<p>...</p>\n<p>Wait a second, is the <code>find.js</code> trick even needed? Isn't the information as to where a type comes from already available in the environment of the module to analyze? Since the import of e.g., <code>Foo.Bar</code> also includes its transitive dependencies?</p>",
        "id": 290419688,
        "sender_full_name": "Mac",
        "timestamp": 1658430141
    },
    {
        "content": "<p>Yeah that's what I said above as well but you seemed to disagree?</p>",
        "id": 290419978,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658430288
    },
    {
        "content": "<p>Sorry, I think there was a miscommunication. I meant that doc-gen4 should not need to generate documentation of transitive dependences (they still need to be built by Lean/Lake for the module to be built and imported, though) and I interpreted your response to mean that links require documentation to be generated for the transitive imports, but I think I musunderstood?</p>",
        "id": 290420298,
        "sender_full_name": "Mac",
        "timestamp": 1658430455
    },
    {
        "content": "<p>Yeah I just meant the same thing as you said just now, it already does not generate documentation for transitives right now^^</p>",
        "id": 290420419,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658430499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> like this? <a href=\"https://github.com/leanprover/doc-gen4/tree/improve-single#multi-stage\">https://github.com/leanprover/doc-gen4/tree/improve-single#multi-stage</a></p>",
        "id": 290433983,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658437487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Great!</p>\n<p>To verify, the following:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>doc-gen4 single Mathlib\ndoc-gen4 index Mathlib\n</code></pre></div>\n<p>Would just produce the documentation for the single top-level <code>Mathlib</code> module and not any of its submodules (e.g., <code>Mathlib.Algebra</code>), correct?  Similarly replacing <code>Mathlib</code> with <code>Mathlib.Algebra</code> would generate documentation just for the single <code>Mathlib.Algebra</code> module and not any of its submodules as well.</p>\n<p>Also, why does <code>doc-gen4 index</code> need a module as an argument?</p>",
        "id": 290434387,
        "sender_full_name": "Mac",
        "timestamp": 1658437695
    },
    {
        "content": "<p>Right now its transitive but that should be a one line diff <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> </p>\n<p>The module is for the navbar as explained above we need a module tree to build it, however it is now only built once and included as an iframe as you suggested.</p>",
        "id": 290434645,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658437856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290434645\">said</a>:</p>\n<blockquote>\n<p>The module is for the navbar as explained above we need a module tree to build it, however it is now only built once and included as an iframe as you suggested.</p>\n</blockquote>\n<p>Can you not just use the file tree in the <code>build/doc</code> folder to generate it?</p>",
        "id": 290434715,
        "sender_full_name": "Mac",
        "timestamp": 1658437904
    },
    {
        "content": "<p>A tree walk of the folder should work. However, you either need to special case away <code>index.html</code> or move the module documentation into a dedicated <code>api</code> folder so the other files (like <code>index.html</code>) don't get caught in the walk.</p>",
        "id": 290434962,
        "sender_full_name": "Mac",
        "timestamp": 1658438046
    },
    {
        "content": "<p>If you need an example of how to do such a walk see <a href=\"https://github.com/leanprover/lake/blob/aaaee4d4f90df96869cd3096e8d182b067cb21a0/Lake/Config/Glob.lean#L26-L33\"><code>forEachModuleIn</code></a> in Lake, which performs this walk for each <code>.lean</code> file in the directory tree.</p>",
        "id": 290435084,
        "sender_full_name": "Mac",
        "timestamp": 1658438120
    },
    {
        "content": "<p>True that would work, I'll get to that as well...I won't move it into an api folder for now since that would require some more refactoring basically everywhere for the linking stuff but I'll put that onto the list.</p>\n<p>The non transitive stuff now works as well, however not on Mathlib.Algebra since that is not a Lean file but it can now be used for single Lean files only.</p>",
        "id": 290435108,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658438137
    },
    {
        "content": "<p>Great! (Though it appears my lack of mathlib knowledge is showing.)</p>",
        "id": 290435224,
        "sender_full_name": "Mac",
        "timestamp": 1658438205
    },
    {
        "content": "<p>Also is there a specific reason you are not using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.FilePath.walkDir#doc\">docs4#System.FilePath.walkDir</a> for that forEachModuleIn?</p>",
        "id": 290435272,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658438238
    },
    {
        "content": "<p>For one, I am not sure that even existed at the time <code>Glob</code> was initially created.  <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>  Secondly, that returns the full real path of the file and it is non-trivial (and likely impossible in the presence of symlinks) to reverse engineer the module path from that.</p>",
        "id": 290435884,
        "sender_full_name": "Mac",
        "timestamp": 1658438595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290435272\">said</a>:</p>\n<blockquote>\n<p>Also is there a specific reason you are not using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.FilePath.walkDir#doc\">docs4#System.FilePath.walkDir</a> for that forEachModuleIn?</p>\n</blockquote>\n<p>Btw, that link sends me to an empty page on Safari 15.5. The HTML seems itself seems empty:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"preload\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\".././declaration-data.bmp\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">link</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">SITE_ROOT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\".././\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"module\"</span> <span class=\"na\">async</span><span class=\"o\">=</span><span class=\"s\">\"true\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"./find.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>",
        "id": 290436010,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658438669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Link works for me on Chromium 99.0.4844.65</p>",
        "id": 290436118,
        "sender_full_name": "Mac",
        "timestamp": 1658438747
    },
    {
        "content": "<p>Works on Firefox as well....mysterious.</p>\n<p>I want to add that my frontend knowledge is almost 0 and if something like this happens I have absolutely no clue how to help you /o\\</p>",
        "id": 290436209,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658438798
    },
    {
        "content": "<p>If I am reading the HTTP response correctly, the <code>body</code> is also empty there so this seems like a backend issue (the server is not sending anything).</p>",
        "id": 290437698,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658439617
    },
    {
        "content": "<p>The backend is just a static file host by github pages, I don't think it should be acting up.</p>",
        "id": 290438748,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658440254
    },
    {
        "content": "<p>You are right, it looks like the preload should be <code>&lt;link rel=\"preload\" href=\".././declaration-data.bmp\" as=\"image\"&gt;</code> (or whatever type you need for the <code>as</code>), otherwise Safari rejects it.</p>",
        "id": 290442445,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658442678
    },
    {
        "content": "<p>I'll push a fix for that soon then^^</p>",
        "id": 290442941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658442999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> next thing I noticed which will of course break like this. Foreign instances of typeclasses will no longer be visible at the instances list...I'm not quite sure whether that is reasonable? That seems to invalidate this feature as well kinda.</p>\n<p>Foreign in this context meaning: Not declared in this exact file.</p>",
        "id": 290442977,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658443036
    },
    {
        "content": "<p>But I got the <code>index</code> without import feature implemented as well now regardless, i'm just observing that it keeps cutting down on the information it can be provide which is obvious given the fact it doesn't use global analysis in this mode I guess.</p>",
        "id": 290443176,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658443173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290443176\">said</a>:</p>\n<blockquote>\n<p>i'm just observing that it keeps cutting down on the information it can be provide which is obvious given the fact it doesn't use global analysis in this mode I guess.</p>\n</blockquote>\n<p>While this is unfortunate, I also think it is reasonable. If a library author serves API documentation on the web it makes sense that it would not be able to tell you were you used / augmented the library in your own code. And it would also make sense for the API documentation not to include the documentation of all its dependencies. Especially since, at some point, a library should hopefully be compatible with multiple different versions of its dependencies rather than the specific one it was built with.</p>\n<p>However, for local documentation were we do have a global persepective, it is worthwhile to have the <em>option</em> to provide some root to give this information to doc-gen4 (or alternatively, it could invoke <code>lake graph</code> to get hat information once that command exists).</p>",
        "id": 290444008,
        "sender_full_name": "Mac",
        "timestamp": 1658443736
    },
    {
        "content": "<p>But the issue here is that not even all of the library author's instances will show up. Right now as we elaborated above <code>single Module.Foo.Bar</code> will only import that file and all of its dependencies. If this module declares a typeclass it will be the first module that can also declare instances on them so the renderer for the type class declaration will only see the instances in this exact same file and not say in <code>Module.Foo.Nat.Basic</code> which imports <code>Module.Foo.Bar</code> itself and declares an instance for <code>Nat</code>.</p>",
        "id": 290444303,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658443939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290442977\">said</a>:</p>\n<blockquote>\n<p>Foreign instances of typeclasses will no longer be visible at the instances list...I'm not quite sure whether that is reasonable?</p>\n</blockquote>\n<p>Could we have some equivalent to <code>find.js</code> that uses the data generated during <code>index</code> to dynamically populate this listing (and maybe the same could happen for \"imported by\")</p>",
        "id": 290444392,
        "sender_full_name": "Mac",
        "timestamp": 1658444014
    },
    {
        "content": "<p>So basically stuff even more information into the declaration-data files...I don't see why that shouldn't work at least. If i understood the JS stuff correctly it is also already organizing them in some sort of DB you can do queries on so I guess one could dynamically query for all instances of a certain class yeah.</p>",
        "id": 290444555,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658444143
    },
    {
        "content": "<p>This is kind of my general solution to these problems -- the information that can be generated from a single file should be generated immediately on <code>single</code> and information which needs larger scope should lazily acquire it from some resource generated by <code>index</code>.</p>",
        "id": 290444564,
        "sender_full_name": "Mac",
        "timestamp": 1658444157
    },
    {
        "content": "<p>Makes sense yeah. I'll see what I can do regarding that tomorrow then. I think focusing on specific files is a great idea for reducing complexity anyways so the refactors I'm doing right now are most likely beneficial in general.</p>",
        "id": 290444729,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658444279
    },
    {
        "content": "<p>Note that this incremental approach has a major advantage: It means you don't have to regenerate documentation for a module unless that module itself changes. Which, in turn, means that documentation for  static dependencies never has to be  regenerated.</p>",
        "id": 290444775,
        "sender_full_name": "Mac",
        "timestamp": 1658444289
    },
    {
        "content": "<p>Out of curiosity, what order of compile times are we talking about here for pure doc-gen? I know of course that adding LeanInk generation necessarily is slow, but for that we have the plan of plugging it right into the initial package build in order to avoid double elaboration of the whole project.</p>",
        "id": 290479638,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658479222
    },
    {
        "content": "<p>WIthout LeanInk a full render of mathlib (this includes the parts it imports from Init Std and Lean of course) that only reads the olean files and doesn't compile them via lake we have 47 seconds of build time right now and the tool itself is still not parallelized so I'd imagine there is a bit of speedup left there.</p>\n<p>The build time in general does also depend a little bit on how many equational lemmata it fails to generate, there are two reasons for failure right now:</p>\n<ol>\n<li>proof failure, those used to be there but are actually fully gone by now, very cool</li>\n<li>timeouts, the things that timeout while generating their proof say it was for 5k heartbeats and we have like a dozen timeouts right now. That used to be a <em>lot</em> more as well and I remember the build taking over a minute as well in past times. Now I guess we don't necessarily have to generate the proof for the equational lemma and can only steal the term from Lean? But I'd have to dig a little deeper in the API for that.</li>\n</ol>\n<p>Anyway, long story short: ~50s right now standalone.</p>",
        "id": 290481390,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658480513
    },
    {
        "content": "<p>Ah, generating equational lemmas is not cheap, yeah. Regarding parallelism, when invoked per module I guess this becomes the responsibility of whoever invokes doc-gen4.</p>",
        "id": 290482565,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658481443
    },
    {
        "content": "<blockquote>\n<p>It means you don't have to regenerate documentation for a module unless that module itself changes.</p>\n</blockquote>\n<p>We have (or want, or at least have in Lean 3) lots of documentation content that is global.  This is one of the big advantages over just browsing the source.  For example, type classes have a list of instances, types have a list of type classes that they implement.</p>",
        "id": 290497583,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658491952
    },
    {
        "content": "<p>The thing you saw in the JSON thread is for getting just that to work^^ The idea is that each module generates a JSON file with its information and then there is a final <code>doc-gen4 index</code> call that combines all of the JSONs into a huge JSON file that the instance lists, the search etc. is built from</p>",
        "id": 290497685,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658492024
    },
    {
        "content": "<p>Alright <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> i got your as image fix up now, does it work?</p>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I moved the other stuff to JSON as well now and played around a little with the builds, everything seems to be working nicely and one module at a time, no transitive stuff etc. Classes and Imported by still work <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 290537069,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658508616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> does that mean you can remove Lake as a dependency now? If not, what else do you need Lake for?</p>",
        "id": 290537190,
        "sender_full_name": "Mac",
        "timestamp": 1658508673
    },
    {
        "content": "<p>Lake is right now used for the search path and for linking to git source URLs so both of that would be covered by the <code>lake graph</code> we discussed. (the search path stuff also by the exec one but not the git source URLs)</p>",
        "id": 290537370,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658508751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> couldn't you git the git source URLS by walk the directories in <code>lean_packages</code> and running <code>git remote get-url origin</code>?</p>",
        "id": 290537961,
        "sender_full_name": "Mac",
        "timestamp": 1658508978
    },
    {
        "content": "<p>Yes but how would I know where each module is coming from?</p>",
        "id": 290538157,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658509072
    },
    {
        "content": "<p>To explain my rationale, not needing to call <code>lake</code> from <code>doc-gen4</code> would be beneficial as it would not require restarting <code>lake</code> and thus not re-elaborating the configuration files and re-resolving dependencies</p>",
        "id": 290538394,
        "sender_full_name": "Mac",
        "timestamp": 1658509165
    },
    {
        "content": "<p>I get that yeah but assuming I know all of the git remote urls from the lean_packages directory I still need a map from Lean module -&gt; directory its coming from right? Lean already has to figure this out when it loads the module I guess? But I dont know how to access this information.</p>",
        "id": 290538660,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658509264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290538157\">said</a>:</p>\n<blockquote>\n<p>Yes but how would I know where each module is coming from?</p>\n</blockquote>\n<p>How are you doing this currently doing this? Are you using <code>findModule?</code></p>",
        "id": 290538717,
        "sender_full_name": "Mac",
        "timestamp": 1658509296
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/SourceLinker.lean#L80-L84\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/SourceLinker.lean#L80-L84</a></p>",
        "id": 290539111,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658509448
    },
    {
        "content": "<p>But yeah basically asking Lake for help</p>",
        "id": 290539137,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658509460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290537069\">said</a>:</p>\n<blockquote>\n<p>Alright <span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> i got your as image fix up now, does it work?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> I moved the other stuff to JSON as well now and played around a little with the builds, everything seems to be working nicely and one module at a time, no transitive stuff etc. Classes and Imported by still work <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>\n</blockquote>\n<p>Ahh it still doesn't, it looks like the <em>actual</em> error that was obscured by the preload one is that Safari <a href=\"https://caniuse.com/js-regexp-lookbehind\">doesn't support lookbehind</a>. Honestly I wouldn't worry about it, I'll just use a more up-to-date browser :)</p>",
        "id": 290542810,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658511019
    },
    {
        "content": "<p>(Tbf though, you'll probably have people on Macs run into this again.)</p>",
        "id": 290542925,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658511091
    },
    {
        "content": "<p>I never signed up to do frontend work /o\\ :D but I guess I'll look into that as well. Though I want to get the Lake feature and the LeanInk link back done by the end of next week since I'll be back to work after that and have less time to spend on it</p>",
        "id": 290543416,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658511309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290542810\">said</a>:</p>\n<blockquote>\n<p>Safari <a href=\"https://caniuse.com/js-regexp-lookbehind\">doesn't support lookbehind</a>. </p>\n</blockquote>\n<p>I looked at  the Safari<a href=\"https://bugs.webkit.org/show_bug.cgi?id=174931\">WebKit Bugzilla entry</a> for it and its been sitting open for 5 years with virtually no feedback Safari is a major browser with regular updates, the fact it does not support a 5 year old standard feature is actually insane. Not only that, its not like this is some complex browser feature, this is just standard regex. If necessary, the could probably just directly copy existing an regex compiler implementation that supports the feature into the codebase.  I am honestly flabbergasted to learn this.</p>",
        "id": 290549934,
        "sender_full_name": "Mac",
        "timestamp": 1658514527
    },
    {
        "content": "<p>AFAIK there are only two regexp compilers used in browsers, JavaScriptCore's (YARR) and V8's (Irregexp). Firefox never had its own regexp compiler. It would be a shame to reduce that number in half.</p>",
        "id": 290551307,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658515217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290538717\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290538157\">said</a>:</p>\n<blockquote>\n<p>Yes but how would I know where each module is coming from?</p>\n</blockquote>\n<p>How are you doing this currently doing this? Are you using <code>findModule?</code></p>\n</blockquote>\n<p>Do you have an alternative idea?</p>",
        "id": 290559036,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658519804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  not at the moment</p>",
        "id": 290559257,
        "sender_full_name": "Mac",
        "timestamp": 1658519928
    }
]