[
    {
        "content": "<p>Meta was not able to type-check <code>fin.coe_two</code>, and it took me a while to figure out why. The short answer is that Lean4's <code>whnf</code> is more conservative than lean3's type_context.whnf or lean4's kernel. In particular,</p>\n<ol>\n<li>the major premise of a recursor is no longer unfolded with <code>TransparencyMode.all</code></li>\n<li>constants (not applications) that are theorems are not unfolded (which prevented <code>nat.lt_wf</code> from exposing a constructor)</li>\n</ol>\n<p>This means that <code>well_founded</code> is less likely to compute inside <code>MetaM</code>. Is this a big issue? If so, I suggest we just add the change to the mathlib4 fork of lean4.</p>",
        "id": 231172023,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616274867
    },
    {
        "content": "<p>These kinds of computations were already problematic in lean 3</p>",
        "id": 231173770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616276927
    },
    {
        "content": "<p>With luck, there aren't too many explicit defeq evaluations of well founded recursive definitions</p>",
        "id": 231173791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616276968
    },
    {
        "content": "<p>Here's a fix for <code>coe_two</code>, but a lot of tactics make it hard to do this proof because they are eager to use <code>rfl</code> to close the goal. Probably it would be better to patch lean 3 to make it less aggressive</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">val_two</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">le_add_left</span> <span class=\"mi\">3</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_two</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">val_two</span>\n</code></pre></div>",
        "id": 231174175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616277452
    },
    {
        "content": "<p>Even if we don't make the change, I don't think anything needs to be back-ported for this one -- the auto-porter works fine (since this issue is in <code>MetaM</code> not the kernel), and strategy X can be used to prove these theorems in lean4 during the manual porting phase.</p>",
        "id": 231176100,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616279792
    },
    {
        "content": "<p>I think these kinds of proofs should be avoided regardless (reduction of definitions by well founded recursion should work in all cases or not at all)</p>",
        "id": 231176813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616280812
    },
    {
        "content": "<p>which is why I am more inclined to label the lean 4 behavior as \"right\" and backport the limitations to lean 3. Unfolding and reducing proofs to make <code>rfl</code> work has no place in lean.</p>",
        "id": 231176897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616280920
    },
    {
        "content": "<p>I agree, though this policy could be adopted during the manual stage of the port. It is up to you whether to backport -- it would have the advantage that the delaborated proofs would already be good style (but I don't know how to estimate the cost of the backport)</p>",
        "id": 231176958,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616280979
    },
    {
        "content": "<p>Reducing proofs doesn't work most of the time anyway because it doesn't take long before you run into an axiom like <code>propext</code></p>",
        "id": 231176963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616281005
    },
    {
        "content": "<p>It would be interesting to investigate a reduction algorithm like the one in my thesis, where <code>acc.rec</code> is reduced by defeq replacing the major premise with an expression like <code>acc.mk (acc.inv h)</code> and using that to take another step</p>",
        "id": 231177031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616281109
    },
    {
        "content": "<p>this has the advantage that you never have to unfold proofs, but it doesn't necessarily terminate</p>",
        "id": 231177044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616281148
    },
    {
        "content": "<p>I made a github issue to track the backport: <a href=\"https://github.com/dselsam/mathport/issues/20\">https://github.com/dselsam/mathport/issues/20</a></p>",
        "id": 231178688,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616283135
    }
]