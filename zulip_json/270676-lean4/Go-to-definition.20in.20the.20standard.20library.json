[
    {
        "content": "<p>With development builds of Lean 4, go-to-definition only works with elaborate hacks (i.e., you need to set an environment variable depending on the build you're using).  I was about to automatically set this environment variable in the vscode extension.  But then I noticed that there is a much cleaner solution, which is already explicitly supported by the server:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ln -sr src build/release/stage1/lib/lean/src\n</code></pre></div>\n<p>Is there a reason the cmake build doesn't create this symlink by default?</p>",
        "id": 229841643,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615466562
    },
    {
        "content": "<p>(Admittedly, one downside is that vscode doesn't resolve the symlink after go-to-definition.  So you end up editing files in <code>build/release/stage1/lib/lean/src</code>.)</p>",
        "id": 229841932,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615466724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Go-to-definition.20in.20the.20standard.20library/near/229841643\">said</a>:</p>\n<blockquote>\n<p>Is there a reason the cmake build doesn't create this symlink by default?</p>\n</blockquote>\n<p>Part of the reason might be that I don't use the cmake build system anymore, so I wouldn't notice :) ...</p>",
        "id": 229842767,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615467145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Go-to-definition.20in.20the.20standard.20library/near/229841932\">said</a>:</p>\n<blockquote>\n<p>(Admittedly, one downside is that vscode doesn't resolve the symlink after go-to-definition.  So you end up editing files in <code>build/release/stage1/lib/lean/src</code>.)</p>\n</blockquote>\n<p>So should we do it only when <code>LEAN_SRC_PATH</code> is unset? Assuming that if it is set at <code>cmake</code> invocation, it is probably set in the editor as well</p>",
        "id": 229842836,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615467193
    },
    {
        "content": "<p>Surprisingly LEAN_SRC_PATH is used as a fallback and not as an override.</p>",
        "id": 229843388,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615467479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Go-to-definition.20in.20the.20standard.20library/near/229842836\">said</a>:</p>\n<blockquote>\n<p>So should we do it only when <code>LEAN_SRC_PATH</code> is unset? Assuming that if it is set at <code>cmake</code> invocation, it is probably set in the editor as well</p>\n</blockquote>\n<p>That seems like a reasonable (though slightly surprising) compromise.</p>",
        "id": 229843483,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615467512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Go-to-definition.20in.20the.20standard.20library/near/229843388\">said</a>:</p>\n<blockquote>\n<p>Surprisingly LEAN_SRC_PATH is used as a fallback and not as an override.</p>\n</blockquote>\n<p>Then let's change that instead</p>",
        "id": 229844068,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1615467732
    }
]