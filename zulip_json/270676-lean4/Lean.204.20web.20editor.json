[
    {
        "content": "<p>I have worked a little more on a web editor for Lean 4. Here is how it looks like so far: <a href=\"https://adam.math.uni-duesseldorf.de/\">https://adam.math.uni-duesseldorf.de/</a></p>\n<p>It's still missing a few features, but it is pretty usable already. In contrast to the Lean3 web editor, it is running on a server since there are issues with compiling Lean 4 to web assembly. To secure the server, Lean is running in a <a href=\"https://gvisor.dev/\">gVisor</a> container. The source code is here: <a href=\"https://github.com/hhu-adam/lean4web\">https://github.com/hhu-adam/lean4web</a>.</p>",
        "id": 307793461,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667494782
    },
    {
        "content": "<p>Have you tried how many users can use the editor simultaneously?</p>",
        "id": 307802223,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667497377
    },
    {
        "content": "<p>I tried opening ten tabs, all busy with heavy computation, and it didn't seem to hurt very much. But I haven't tested where the limit is.</p>",
        "id": 307803082,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667497621
    },
    {
        "content": "<p>What machine are you running it on?</p>",
        "id": 307803132,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667497637
    },
    {
        "content": "<p>8 cores, 20 GB memory</p>",
        "id": 307803601,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667497754
    },
    {
        "content": "<p>If you play your cards right, that might be enough for 100 simulateneous users.</p>",
        "id": 307803767,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667497801
    },
    {
        "content": "<p>Is memory the issue or CPU?</p>",
        "id": 307803889,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667497825
    },
    {
        "content": "<p>I'd be mostly worried about memory.</p>",
        "id": 307804026,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667497867
    },
    {
        "content": "<p>Ok, it might get worse with mathlib then, right?</p>",
        "id": 307804191,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667497921
    },
    {
        "content": "<p>If you've got too little CPU, then Lean will just become a bit slower.  But if you've got too little memory, then you can't start Lean at all.</p>",
        "id": 307804246,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667497926
    },
    {
        "content": "<p>I am afraid the server might even kill random processes at that point...</p>",
        "id": 307804366,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667497964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20web.20editor/near/307804191\">said</a>:</p>\n<blockquote>\n<p>Ok, it might get worse with mathlib then, right?</p>\n</blockquote>\n<p>We're doing mmap now, so it should be much better than in Lean 3.  But there's still a memory overhead proportional to the size of mathlib.  The best thing would be to test it out.</p>",
        "id": 307804448,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667497986
    },
    {
        "content": "<p>Do you know if gVisor shares mmaped files across containers?</p>",
        "id": 307804570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667498016
    },
    {
        "content": "<p>no idea, this is my first time to hear about mmap :-)</p>",
        "id": 307804747,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1667498062
    },
    {
        "content": "<p>Can the mmap be shared between Lean processes?</p>",
        "id": 307896433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667546462
    },
    {
        "content": "<p>Yes!</p>",
        "id": 307905808,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667551256
    },
    {
        "content": "<p>Nice, and then does Lean somehow avoid building in-memory data structures that are linear size in the amount of imports (e.g., the environment)?</p>",
        "id": 307926199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667558245
    },
    {
        "content": "<p>No, as Gabriel said it's still proportional. In particular, there's a hash map from imported constant names to their module and declaration. If Lean was module-based instead of namespaces-based, i.e. a declaration's full name unambiguously identified the module it comes from, this might have been avoided.</p>",
        "id": 307926920,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667558455
    },
    {
        "content": "<p>Something for lean 5 maybe</p>",
        "id": 308039259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667592070
    },
    {
        "content": "<p>We've moved it to <a href=\"https://lean.math.uni-duesseldorf.de\">https://lean.math.uni-duesseldorf.de</a></p>",
        "id": 310243108,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1668530961
    },
    {
        "content": "<p>I think the Lean4 web editor is ready to be released to the public now. Could you link to it from the community website? If you think that it's still missing something, let me know!<br>\n<span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 310576704,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1668679019
    },
    {
        "content": "<p>I think adding a link to the lean4 web editor to the community website, which AFAIK contains only Lean 3 content, would be very confusing!</p>",
        "id": 310576834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668679079
    },
    {
        "content": "<p>well, we probably need to consider changing that at some point...</p>",
        "id": 310576951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668679117
    },
    {
        "content": "<p>We certainly could do with a page mentioning Lean 4 and linking to the lean 4 website (and that editor)</p>",
        "id": 310576971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668679127
    },
    {
        "content": "<p>How about a new page for \"lean 4 content\" linked from the homepage and filled with TBD stuff about lean 4 / mathlib4?</p>",
        "id": 310577107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668679192
    },
    {
        "content": "<p>But we already have enough confused new users who install things/find the web editor for Lean X and then run code intended for Lean (7-X).</p>",
        "id": 310577165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668679206
    },
    {
        "content": "<p>We could probably do with inserting some 3s on the existing pages too</p>",
        "id": 310577213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668679226
    },
    {
        "content": "<p>I see, maybe <a href=\"https://github.com/leanprover/lean4\">https://github.com/leanprover/lean4</a> would be a better place then? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 310577660,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1668679376
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> <span class=\"user-mention\" data-user-id=\"504487\">@Sarah Smith</span></p>",
        "id": 310579931,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668680323
    },
    {
        "content": "<p>I think we should already be rewriting the leanprover-community webpage, explaining that we have a deprecated library based on Lean 3, and are busy porting to Lean 4.</p>",
        "id": 310592715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668685423
    },
    {
        "content": "<p>As precedent, during the Scala 2 to Scala 3 transition the website homepage reflected very clearly that there were two versions with different documentation, installation instructions, etc.  <a href=\"https://user-images.githubusercontent.com/332812/145356305-6a759841-6a05-4260-86aa-50f9245e4422.png\">https://user-images.githubusercontent.com/332812/145356305-6a759841-6a05-4260-86aa-50f9245e4422.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/332812/145356305-6a759841-6a05-4260-86aa-50f9245e4422.png\"><img src=\"https://uploads.zulipusercontent.net/bcdaa95c18ab70d041c3c8012bf4048a7aa5c99e/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3333323831322f3134353335363330352d36613735393834312d366130352d343236302d383661612d3530663932343565343432322e706e67\"></a></div>",
        "id": 310629068,
        "sender_full_name": "Jason Rute",
        "timestamp": 1668698086
    },
    {
        "content": "<p>There's the extra confusion for Lean that we have the leanprover-community vs leanprover distinction; it was really important for Lean 3 to steer people away from the really old Lean 3.4.2, but for Lean 4 we probably want to take advantage of all the nice documentation MSR is producing.</p>",
        "id": 310716075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668726185
    },
    {
        "content": "<p>We moved again, now with a shorter url: <a href=\"https://lean.math.hhu.de\">https://lean.math.hhu.de</a></p>",
        "id": 311644670,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669130809
    },
    {
        "content": "<p>Let me take the opportunity to mention this is really cool!</p>",
        "id": 311647324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669131482
    },
    {
        "content": "<p>With widget infoview even, hadn't noticed that before!</p>",
        "id": 311648231,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669131742
    },
    {
        "content": "<p>Shall we update the \"view in playground\" widget that shows up in Zulip, to send people here?</p>",
        "id": 311731527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669161300
    },
    {
        "content": "<p>I turned it on, but URL unencoding is not working correctly. I don't think there's anything that can be done at the zulip end.</p>",
        "id": 311731983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669161567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Fixed!</p>",
        "id": 311769198,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669189653
    },
    {
        "content": "<p>Could we arrange so that this moves to the latest lean4-nightly at regular intervals?</p>",
        "id": 313146348,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669839164
    },
    {
        "content": "<p>Most days there is a bugfix relevant to mathlib4 porting. (I just tried out using the web interface and realised it was behind the nightly.)</p>",
        "id": 313146473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669839214
    },
    {
        "content": "<p>This is amazing! Great work.<br>\nFeature proposal: custom escaping character for inputting unicode</p>",
        "id": 313155006,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669842169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Should we move it to the latest lean4-nightly or to the latest mathlib4? If we use the latest lean4-nightly, we might no longer be able to support importing mathlib... Or maybe there should be both variants available?</p>",
        "id": 313226047,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669883362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Thanks! I will look into the custom escaping character.</p>",
        "id": 313227974,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669884157
    },
    {
        "content": "<p>For now, I've manually updated to the latest mathlib4</p>",
        "id": 313229159,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669884630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Ok, the unicode escape character can now be customized in the settings!</p>",
        "id": 313240341,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669888807
    },
    {
        "content": "<p>I'd also like to move the project into <code>https://github.com/leanprover-community</code> if possible. Who manages that github organization?</p>",
        "id": 313241518,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669889176
    },
    {
        "content": "<p>Re whether to support mathlib or not: if a computer scientist wants to try lean 4 they can just follow the installation instructions. If a mathematician wants to try mathlib4 then they have to clone a repo which means learning about and installing git and possibly figuring out how to use the command line; these are things which are much more likely to be alien to them. So you get much greater gains by supporting mathlib4 because it's lowering the barrier far more, in some sense. We might want to consider also having some toy examples which users can select and play with. I always found the default lean 3 community web editor very intimidating; the start up screen is a bunch of CS stuff which I would always quickly delete if showing the editor off live to mathematicians.</p>",
        "id": 313243346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669889789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20web.20editor/near/313241518\">said</a>:</p>\n<blockquote>\n<p>I'd also like to move the project into <code>https://github.com/leanprover-community</code> if possible. Who manages that github organization?</p>\n</blockquote>\n<p>I'm sorry I didn't get back to you about that. We discussed it among maintainers but there is no super easy way to transfer the repo. We either need to temporarily make you an owner of the GitHub org or you need to temporarily make someone the owner of your repo.</p>",
        "id": 313250224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669891924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Right, I'll try to set up an automatic update to the latest Mathlib4. Do you have some toy examples that you'd like to see in there?</p>",
        "id": 313254678,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669893456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> No problem, I've made you admin of <code>lean4web</code>, <code>lean4game</code>, and <code>duper</code>. If I need to make somebody else admin, let me know.</p>",
        "id": 313256217,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1669894019
    },
    {
        "content": "<p>I tried the move on <a href=\"https://github.com/leanprover-community/lean4game\">https://github.com/leanprover-community/lean4game</a>. <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>, you should have an invite to a leanprover-community/lean4web team which maintains that repo as well as a personal invitation as an admin of this repository. Once you'll have confirmed everything works nicely I'll do the same for the other two repos.</p>",
        "id": 313268270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669898119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20web.20editor/near/313254678\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> Right, I'll try to set up an automatic update to the latest Mathlib4. Do you have some toy examples that you'd like to see in there?</p>\n</blockquote>\n<p>Here are some really dumb examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span> <span class=\"c1\">-- import the `ring` tactic</span>\n\n<span class=\"c1\">-- let R be a commutative ring (for example the real numbers)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- let x and y be elements of R</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- then (x+y)*(x+2y)=x^2+3xy+2y^2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- the `ring` tactic solves this goal automatically</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span> <span class=\"c1\">-- import the rationals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Init</span> <span class=\"c1\">-- import notation ℚ for rationals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span> <span class=\"c1\">-- a linear arithmetic tactic</span>\n\n<span class=\"c1\">-- let `x`, `y` and `z` be rationals</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- let's prove that if `x &lt; y` and `y + 3 &lt; z + 10` then `x + 37 &lt; z + 44`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">44</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- the `linarith` tactic can do this automatically</span>\n\n<span class=\"c1\">-- let's prove that (x+y)^2=x^2+2*x*y+y^2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- the `ring` tactic can do this automatically</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span> <span class=\"c1\">-- import the theory</span>\n<span class=\"c1\">-- of bijections as functions with two-sided inverses</span>\n\n<span class=\"c1\">-- Let X, Y and Z be sets</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Then there's a bijection between functions `X × Y → Z`</span>\n<span class=\"c1\">-- and functions from `X` to (the space of functions from `Y` to `Z`).</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"c1\">-- to go from f : X × Y → Z to a function X → (Y → Z),</span>\n  <span class=\"c1\">-- send x and y to f(x,y)</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- to go from g : X → (Y → Z) to a function X × Y → Z,</span>\n  <span class=\"c1\">-- send a pair p=(x,y) to (g p.1) (p.2) where p.i is the i'th element of p</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Here we prove that if f ↦ g ↦ f' then f' = f</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"c1\">-- let f : X × Y → Z be arbitrary.</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- turns out f' = f by definition</span>\n  <span class=\"c1\">-- here we prove that if g ↦ f ↦ g' then g' = g</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g</span> <span class=\"c1\">-- let f : X → (Y → Z) by arbitrary</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- turns out that g' = g by definition</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span> <span class=\"c1\">-- basic facts in logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span> <span class=\"c1\">-- a tactic which searches for</span>\n<span class=\"c1\">-- theorems in Lean's mathematics library</span>\n\n<span class=\"c1\">-- Let P and Q be true-false statements</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- The following is a basic result in logic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- its proof is already in Lean's mathematics library</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_and_or</span>\n\n<span class=\"c1\">-- Here is another basic result in logic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">library_search</span> <span class=\"c1\">-- we can search for the proof in the library</span>\n  <span class=\"c1\">-- we can also replace `library_search` with its output</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you probably have opinions on what should be here and how these suggestions should be changed if indeed you think they're useful for beginners who just stumble upon the web editor and want to experiment. I could imagine me as a mathematically-interested teenager stumbling upon this site and seeing these examples and being really intrigued.</p>",
        "id": 313268374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669898161
    },
    {
        "content": "<p>There isn't much we can do without a real mathlib4. At some point we will hopefully be able to translate <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/00_first_proofs.lean</a></p>",
        "id": 313268645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669898270
    },
    {
        "content": "<p>I think that toy examples are what people want to see. Young people like to see brief immediate stuff. I agree that we can do much more ambitious things when we have such fundamental objects as the real numbers, but we already have enough for toy examples as my examples show, and I think that people like playing with toy examples, especially if they can play around and edit them, which they'll be able to do in the web editor.</p>",
        "id": 313269081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669898420
    },
    {
        "content": "<p>Sure</p>",
        "id": 313269119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669898439
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> , widgets now work in the web editor:<br>\n<a href=\"https://lean.math.hhu.de/#url=https%3A%2F%2Fraw.githubusercontent.com%2Fleanprover%2Flean4%2Fmaster%2Fdoc%2Fexamples%2Fwidgets.lean\">https://lean.math.hhu.de/#url=https%3A%2F%2Fraw.githubusercontent.com%2Fleanprover%2Flean4%2Fmaster%2Fdoc%2Fexamples%2Fwidgets.lean</a></p>",
        "id": 313913763,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1670230036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20web.20editor/near/313146348\">said</a>:</p>\n<blockquote>\n<p>Could we arrange so that this moves to the latest lean4-nightly at regular intervals?</p>\n</blockquote>\n<p>The web editor now tells you which mathlib4 commit / lean4-nightly it is at (it should update automatically every hour).</p>",
        "id": 314701073,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1670513273
    },
    {
        "content": "<p>The server seems not to be running any more</p>",
        "id": 319196339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672753024
    },
    {
        "content": "<p>I was seeing intermittent errors recently where <code>bundle.js</code> would fail to download with <code>net::ERR_CONTENT_LENGTH_MISMATCH</code>. It seems to be working again however.</p>",
        "id": 322323620,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674145861
    }
]