[
    {
        "content": "<p>In the following (not exactly minimal) example, I get an error on <code>Graph.Path.extend</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Scheme</span> <span class=\"o\">(</span><span class=\"n\">Classes</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">«</span><span class=\"kd\">class</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">children</span> <span class=\"bp\">→</span> <span class=\"n\">Classes</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">classes</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">schemes</span> <span class=\"o\">:</span> <span class=\"n\">classes</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Scheme</span> <span class=\"n\">classes</span><span class=\"o\">)</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">classes</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Graph.rootScheme</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">graph.schemes</span> <span class=\"n\">graph.root</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Graph.subgraph</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">newRoot</span> <span class=\"o\">:</span> <span class=\"n\">graph.classes</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">graph</span> <span class=\"k\">with</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">newRoot</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Graph.Path</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">child</span> <span class=\"o\">:</span> <span class=\"n\">graph.rootScheme.children</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">graph</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">child</span> <span class=\"o\">:</span> <span class=\"n\">graph.rootScheme.children</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">graph.rootScheme.class</span> <span class=\"n\">child</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">graph.subgraph</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">graph</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Graph.class</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Path</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">graph.classes</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">child</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">graph.rootScheme.class</span> <span class=\"n\">child</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">child</span> <span class=\"n\">subpath</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">graph.rootScheme.class</span> <span class=\"n\">child</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">graph.subgraph</span> <span class=\"bp\">|&gt;.</span><span class=\"kd\">class</span> <span class=\"n\">subpath</span>\n\n<span class=\"c1\">-- error</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Graph.Path.extend</span> <span class=\"o\">{</span><span class=\"n\">graph</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extension</span> <span class=\"o\">:</span> <span class=\"n\">graph.class</span> <span class=\"n\">path</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">graph.schemes</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">path</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">child</span>         <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">child</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">extension</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">child</span> <span class=\"n\">subpath</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">child</span> <span class=\"o\">(</span><span class=\"n\">subpath.extend</span> <span class=\"n\">extension</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">fail to show termination for</span>\n<span class=\"cm\">  @extend</span>\n<span class=\"cm\">with errors</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Graph.Path.extend.match_1', and it does not have executable code</span>\n\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Graph.Path.extend.match_1', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>If I change <code>Graph.class</code> to be a <code>def</code> instead of an <code>abbrev</code>, the error goes away. What is the error trying to communicate?</p>",
        "id": 299737505,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1663676485
    }
]