[
    {
        "content": "<p>Is it easy to override <code>def</code>/<code>theorem</code> to, for example, add a specific user attribute to all definitions/theorems?</p>",
        "id": 283068775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1653053176
    },
    {
        "content": "<p>Do you mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">defs</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>That would be equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>?</p>",
        "id": 283069871,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653053616
    },
    {
        "content": "<p>I think ideally I would like <code>def f (n : Nat) : Nat := n</code> to mean <code>@[simp] def f (n : Nat) : Nat := n</code>, after some top-level command has been run or a scope opened or whatever.</p>",
        "id": 283070052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1653053693
    },
    {
        "content": "<p>Hm, someone more competent than myself might be able to answer this, but I don't know how to do that without triggering an infinite macro loop of <code>def ⋯</code> replacement by <code>@[simp] def ⋯</code></p>",
        "id": 283073702,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653055174
    },
    {
        "content": "<p>You should be able to add a scoped macro, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Topos</span>\n<span class=\"n\">scoped</span> <span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">@[topos]</span> <span class=\"kd\">def</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">Topos</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topos</span> <span class=\"c1\">-- now all defs are rewritten to @[topos] def</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 283073739,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653055188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/redefining.20def/near/283073702\">said</a>:</p>\n<blockquote>\n<p>Hm, someone more competent than myself might be able to answer this, but I don't know how to do that without triggering an infinite macro loop of <code>def ⋯</code> replacement by <code>@[simp] def ⋯</code></p>\n</blockquote>\n<p>Essentially you just need to do <code>if attrs contains simp then  throwUnsupported</code>.</p>",
        "id": 283073859,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653055220
    },
    {
        "content": "<p>You can look at this (now obsolete) hack for inspiration: <a href=\"https://github.com/leanprover-community/mathlib4/blob/70af8b92010bdae02ef1228093764a936ba5b244/Mathlib/Tactic/Ext.lean#L77-L90\">https://github.com/leanprover-community/mathlib4/blob/70af8b92010bdae02ef1228093764a936ba5b244/Mathlib/Tactic/Ext.lean#L77-L90</a></p>",
        "id": 283074076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653055295
    },
    {
        "content": "<p>So <code>throwUnsupported</code> will interrupt the macro expansion instead of signaling an error message? I didn't know that</p>",
        "id": 283074835,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653055572
    },
    {
        "content": "<p><code>@[attr] section</code> might also be a sensible option, though more likely as a built-in</p>",
        "id": 283074895,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653055599
    },
    {
        "content": "<p>Thanks! Is the <code>...</code> in <code>| `(def ...) =&gt; `(@[topos] def)</code> supposed to mean \"put the syntax of <code>def</code> here\"? I get an error \"expected identifier\" there</p>",
        "id": 283077949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1653056927
    },
    {
        "content": "<p>Here is macro that prints out all attributes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">declModifiers</span> <span class=\"s2\">\"theorem \"</span> <span class=\"n\">declId</span> <span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">term</span>  <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">params</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Theorem attributes are:\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">mods</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getNumArgs</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{mods[1][0][1][2*i][1][0]}\"</span>\n\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">params</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, export hoho, extern \"adsf\"]</span> <span class=\"kd\">theorem</span> <span class=\"n\">nat_add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It prints out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"n\">attributes</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n<span class=\"s2\">\"simp\"</span>\n<span class=\"s2\">\"export\"</span>\n<span class=\"s2\">\"extern\"</span>\n</code></pre></div>\n<p>However, I had to change <code>theorem</code> to <code>def</code> such that the macro does not expand infinitely.</p>",
        "id": 283078069,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1653056987
    },
    {
        "content": "<p>Also I do not understand the <code>declModifiers</code> parser. I got the sequence <code>mods[1][0][1][2*i][1][0]</code> by trial and error.</p>",
        "id": 283078194,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1653057030
    }
]