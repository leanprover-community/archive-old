[
    {
        "content": "<p>Many operators in Lean 4 can be entered as ASCII characters or Unicode symbols. However, the operator <code>=&gt;</code> can only be added as an ASCII sequence; <code>\\=&gt;</code> produces the expected symbol but results in an error. Are there any plans to allow the Unicode symbol?</p>\n<p>While on the topic, the symbols <code>\\N</code> and <code>\\Z</code> for <code>Nat</code> and <code>Int</code> also throw an error. How can I use these symbols such that they are associated with <code>Nat</code> and <code>Int</code>?</p>\n<p>It just occurs to me these may be defined in mathlib which explains why I get an error. Even when mathlib is ported to Lean 4, it would be nice to have these symbols associated with the types without having to load mathlib.</p>",
        "id": 253365623,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631684837
    },
    {
        "content": "<p>The symbols for <code>\\N</code> and <code>\\Z</code> are indeed defined in mathlib4</p>",
        "id": 253365699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631684884
    },
    {
        "content": "<p>In that case it is probably best to avoid them unless intending to use mathlib.</p>",
        "id": 253365802,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631685001
    },
    {
        "content": "<p>It's not hard to define them yourself either: <code>notation \"\\N\" =&gt; Nat</code></p>",
        "id": 253365861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631685016
    },
    {
        "content": "<p>But I agree that it is annoying to not be able to use the notation in basic code examples where you don't want to add imports</p>",
        "id": 253365908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631685071
    },
    {
        "content": "<p>Ok, I haven't got to the notation part as I work my way through the docs. So that notation just creates an alias.</p>",
        "id": 253365926,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631685101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span> I think the choice to make the <code>=&gt;</code> used for functions/matches/macros/etc. different from <code>\\=&gt;</code> was deliberate (there is even a commit in the Lean 4 repo a while back that specifically removed it). </p>\n<p>I suspect the rational is to allow <code>\\=&gt;</code> (which generals means logical implication) to still be used as such in logic while reserving the ASCII art for its special uses in the Lean syntax.</p>",
        "id": 253365977,
        "sender_full_name": "Mac",
        "timestamp": 1631685124
    },
    {
        "content": "<p>A notation is an additional parser rule, which generates the same expression under the hood as if you used <code>Nat</code> directly. It differs slightly from aliases defined with <code>abbreviation</code> since these create a different expression and can be handled differently by tactics</p>",
        "id": 253366125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631685289
    },
    {
        "content": "<p>Ok, thanks both for the info.</p>",
        "id": 253366326,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631685464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span> We wanted to make sure Lean 4 can also be used as a regular programming language, and the notation was not too exoteric for regular software developers. We assumed that <code>\\N</code> and <code>\\Z</code> are mainly used in math applications, and all math users will use Mathlib 4 anyway. <br>\n<span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> is correct about <code>\\=&gt;</code>, we didn't want to \"reserve\" the unicode symbol, math users can use it for something else.</p>",
        "id": 253418821,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631714499
    },
    {
        "content": "<p>Speaking about math users, I've noticed that the unicode symbol <code>â‰…</code> is <a href=\"https://github.com/leanprover/lean4/blob/ae8989a8c681dd1e960874d5daa07773f3e53e44/src/Init/Notation.lean#L104\">reserved for heterogeneous equality</a>. Is that here to stay? Because math users will probably want to use that for \"isomorphism\"...</p>",
        "id": 253424088,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631716375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span> We will remove it.</p>",
        "id": 253427713,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631717688
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/6fb2a2b47b4397b05e9e99346e713f81dace60d8\">https://github.com/leanprover/lean4/commit/6fb2a2b47b4397b05e9e99346e713f81dace60d8</a></p>",
        "id": 253430068,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631718482
    },
    {
        "content": "<p>I don't know what the CS people use for this idea, but I had also noticed this and to be honest am rather pleased that it's gone! Thank you!</p>",
        "id": 253437486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631721120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Regarding <code>\\N</code> and <code>\\Z</code>,  how about the compromise position: The notations are defined but not used at all in the lean core repo. That way programmers browsing the code won't be put off by overuse of unicode, and they can feel free to not use it at all in their own code, while math-oriented textbooks like TPIL can just use it exclusively in code examples etc.</p>",
        "id": 253475084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631734763
    },
    {
        "content": "<p>Yes, I think math-oriented documentation is a good motivation for having them at least available in <code>Init</code>. <br>\nWe currently avoid them in TPIL 4: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a><br>\nBTW, we also had to avoid references to the algebraic structure in TPIL4. It was not too bad.</p>",
        "id": 253483412,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631738109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The notation <code>\\N</code> and <code>\\Z</code> will have to be scoped in <code>Init</code>. Otherwise, the messages produced by Lean will use them.</p>",
        "id": 253484000,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631738343
    },
    {
        "content": "<p>Not sure whether we will be making things more confusing or not.</p>",
        "id": 253484080,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631738388
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> is investigating how to support a new feature on the VS Code Lean 4 extension. The idea is to have the option to communicate with a server running Lean. Then, we would be able to run Lean programs using the VS Code browser version. The server would have Mathlib 4, and would enable complex examples that depend on big chunks of Mathlib. The dream is to support the new \".\" feature available on GitHub, where we can start VS Code in the browser by simply pressing \".\" in any file on GitHub.</p>",
        "id": 253484637,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631738643
    },
    {
        "content": "<p>It's a good point about needing to scope the notations, else things ilke <code>#check 1 -- 1 : \\N</code> will cause problems</p>",
        "id": 253491574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631741684
    },
    {
        "content": "<p>Unfortunately it has to do one thing or the other starting from an empty file so we can't please everyone</p>",
        "id": 253491686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631741738
    },
    {
        "content": "<p>I wish we had data about how much programmers vs mathematicians care about this. Probably taking a poll here will give skewed results</p>",
        "id": 253491820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631741792
    },
    {
        "content": "<p>But my general impression is that mathematicians care a lot about seeing <code>\\N</code> and programmers are mostly ambivalent and don't really see the point</p>",
        "id": 253491904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631741831
    },
    {
        "content": "<p>I definitely care a lot about seeing \\N however I would not mind at all if I only see it in mathlib4. It is only very rarely I find myself looking at core Lean 3 files in practice. Now we have this policy of having Lean being the foundations and mathlib being the mathematics (which I think we all believe is great) the mathematicians aren't going to mind if the notation is in core lean or mathlib, as long as it's there somewhere :-)</p>",
        "id": 253495871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631743874
    },
    {
        "content": "<p>What I'm not sure about is to what extent we consider <code>Init</code> a good starting point for doing whatever. I don't know whether lean 4 is trying to be \"batteries-included\" or \"absolute bare necessities\" or (most likely) somewhere in between. What is the demographic that we are targeting here of people who can start up lean, import nothing and then do stuff?</p>",
        "id": 253497598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631744792
    },
    {
        "content": "<p>Certainly in mathlib / lean 3 community edition we have trended towards making core only be about absolute bare necessities, at the price of making no-import lean be less usable than it used to be</p>",
        "id": 253497782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631744903
    },
    {
        "content": "<p>Certainly Patrick and my opinion on this was that if you're targetting mathematicians then they should use <code>leanproject</code> and not <code>leanpkg</code> to make a new project, and mathlib is then automatically set up as a dependency. In particular the instructions called \"how to install lean\" on the community website give you a fully working mathlib (with all the oleans) before the user even understands what's going on. I tell all my students to start every file with <code>import tactic</code>.</p>",
        "id": 253497828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631744936
    },
    {
        "content": "<p>For the first few chapters of TPIL, I think the point is to dig down to the basics, and for that purpose any dependencies are problematic. In fact you can almost do everything from a no-core starting point: <code>prelude</code>, no imports. (I probably wouldn't do this, just because that requires explaining what <code>prelude</code> is, though.)</p>",
        "id": 253498439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631745275
    },
    {
        "content": "<p>But I think most of it can be done in a comfortable foundation with <code>import Mathlib.Init</code> or something of that nature. If we are committed to making sure that mathematicians never use <code>Init</code> only, then it wouldn't be too much trouble to have <code>notation \"\\N\" =&gt; Nat</code> out of init.</p>",
        "id": 253498692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631745440
    },
    {
        "content": "<p>It would be pretty cool if you could specify a custom init in the toml file or something, though, so that mathematicians can also get that init-only feel while also getting mathlib-specific init stuff</p>",
        "id": 253498833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631745512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<blockquote>\n<p>I don't know whether lean 4 is trying to be \"batteries-included\" or \"absolute bare necessities\" or (most likely) somewhere in between.</p>\n</blockquote>\n<p>We don't want the Lean 4 repo to be \"batteries-included\". The default installation is supposed to provide a working programming language.<br>\nThe near future goal is to have Mathlib 4 working.<br>\nThe long-term goal/dream is to have something like Rust crate <a href=\"https://crates.io\">https://crates.io</a> with many packages for software development. Disclaimer: we are not suggesting the Mathlib project should follow this path. </p>\n<blockquote>\n<p>It would be pretty cool if you could specify a custom init in the toml file or something, though, so that mathematicians can also get that init-only feel while also getting mathlib-specific init stuff</p>\n</blockquote>\n<p>This is feasible to implement. We are also considering \"persistent\" <code>set_option</code>s. <br>\nBTW, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> 's Lake build system will replace <code>leanpkg</code> soon, and it will open many new possibilities.</p>",
        "id": 253500631,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631746539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> What is your position on the role of the <code>Std</code> library? It sounds like something that might want to be a bit more batteries-included than <code>Init</code>, but it is also in the lean 4 core repo, probably because it is a dependency of lean 4, which leads to many of the same problems / complications as rust's <code>std</code> crate. Right now I'm not sure where development on a batteries-included standard library for lean 4 programming applications should go. Rust uses a model with many small crates, and I think we will want to go in that direction eventually, but centralized maintenance is a big plus while the ecosystem is still small. Like you say, <code>lake</code> will help a lot here with adding more build flexibility.</p>",
        "id": 253501783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631747193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<blockquote>\n<p>What is your position on the role of the Std library?</p>\n</blockquote>\n<p><code>Std</code> is currently on hold. One of the ideas discussed is to have it in a separate repo that can be populated by the community. We have a GitHub issue for that: <a href=\"https://github.com/leanprover/lean4/issues/528\">https://github.com/leanprover/lean4/issues/528</a><br>\nThe part of the <code>Std</code> library that is needed to implement Lean would be renamed to <code>StdCore</code>, but we would still use the <code>Std</code> namespace there. <br>\nThe nightly build would pack the <code>Lean</code>, <code>Lake</code>, and <code>Std</code> in a binary distribution package. <br>\nWe are not assuming this <code>Std</code> package would be a \"batteries included\" one. The goal is to have many small packages like Rust. This is the \"dream\".<br>\nHere is the reality for the near future, we want the following:</p>\n<ul>\n<li>Mathlib 4 in a usable state</li>\n<li>Lean 4 official release (including the missing features)</li>\n<li>Lake distributed with Lean 4</li>\n<li>Zig distributed with Lean 4 as a standalone C compiler</li>\n<li>Lake support for compiling shared libraries for Mathlib (i.e., Mathlib tactics compiled in native code without having to set up plugins or complicated makefiles).</li>\n<li>Widgets for Lean 4</li>\n<li>Better installation story for Lean 4</li>\n</ul>",
        "id": 253503917,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631748398
    },
    {
        "content": "<blockquote>\n<p>The part of the Std library that is needed to implement Lean would be renamed to StdCore, but we would still use the Std namespace there. </p>\n</blockquote>\n<p>I was also thinking of something like that. Rust's <code>core</code> / <code>std</code> comes to mind</p>",
        "id": 253503963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631748436
    },
    {
        "content": "<p>I like the near term goals, I will help when I can. (Especially the one about getting away from complicated makefiles. For me this has been the biggest step down from lean 3 to lean 4, it feels like I'm driving a C compiler with all the attendant dependency nightmares, compared to the old <code>lean --make</code> syntax. I can't wait for <code>lake</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 253504362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631748669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Unicode.20symbols/near/253491904\">said</a>:</p>\n<blockquote>\n<p>But my general impression is that mathematicians care a lot about seeing <code>\\N</code> and programmers are mostly ambivalent and don't really see the point</p>\n</blockquote>\n<p>You might be surprised at how finicky programmers can be! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  For instance, I know the heavy use of Unicode symbols is a major hurdle for  one of my colleagues who I have been trying to get to use Lean (and he was even a Computer Science / Math double major). I also know that the Unicode symbols were a major concern for me as well when I first started using Lean. I think I lot of programmers really like their ASCII art. </p>\n<p>It still annoys me once in a while when I see a symbol while exploring GitHub Lean code and have no clue what its name is or how to type it, but I have mostly gotten use to it. However, I still do prefer the ASCII art for computer science related-symbols (and is one of the reasons I would still love to see the anonymous constructor syntax <a href=\"#narrow/stream/270676-lean4/topic/Tuple.20vs.2E.20Anon.20Ctor/near/245475774\">just use plain parentheses</a>).</p>",
        "id": 253509902,
        "sender_full_name": "Mac",
        "timestamp": 1631752380
    },
    {
        "content": "<p>Hopefully after the mathlib4 port has stabilised we can start splitting out the \"standard library\" stuff, removing it from mathlib and putting it into something along the lines of <code>Std</code> (or multiple separate repositories). While I'm a big fan of a monolithic mathematics repository, it would be a disaster if programming users felt that they had to depend on mathlib to get access to basic \"standard library\" stuff. We've been able to ignore this in Lean3 / mathlib3 because performance issues were a bigger deal anyway.</p>",
        "id": 253540095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631777164
    }
]