[
    {
        "content": "<p>There is an annoyance in Lean 3, that nat multiplication <code>n * p</code> is defined by induction on the right variable <code>p</code>. This is an annoyance because a general monoid has an <code>ℕ</code>-module instance, where <code>n • x</code> is defined by induction on <code>n</code>, so on <code>ℕ</code> we get two <code>ℕ</code>-modules instance (the one for a general monoid, and the other one from the fact that any monoid is a module over itself) for which the multiplications are not defeq. And having two instances that are not defeq is something that we should avoid as much as possible. (For now, it means that we have to jump through hoops sometimes). The problem would disappear if nat multiplication were defined by induction on the left variable.</p>\n<p>Lean 4 multiplication is defined in the same way by induction on the right variable <code>p</code>, see <a href=\"https://github.com/leanprover/lean4/blob/597304db959b5d1fb69d10d2a15d405f637d19f6/src/Init/Prelude.lean#L481\">https://github.com/leanprover/lean4/blob/597304db959b5d1fb69d10d2a15d405f637d19f6/src/Init/Prelude.lean#L481</a>. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ,  would you consider a PR changing this to induction on the left-variable if it doesn't create problems elsewhere? (I'll perfectly understand if the answer is no, but if the answer can be yes then the sooner the change is made, the better, as it means fewer fixes down the road).</p>",
        "id": 221693092,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609876332
    },
    {
        "content": "<p>I think the nat-semimodule diamond is inevitable whatever we do</p>",
        "id": 221693521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609876552
    },
    {
        "content": "<p>It exists also for <code>linear_map</code> and <code>tensor_product</code>, and once I clean up my local changes will exist for <code>subtype</code> too</p>",
        "id": 221693631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609876593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/PR.20welcome.3F/near/221693521\">said</a>:</p>\n<blockquote>\n<p>I think the nat-semimodule diamond is inevitable whatever we do</p>\n</blockquote>\n<p>When you say \"diamond\", I guess you mean two instances that are not defeq, right? Changing the definition of multiplication on nat should fix it, as you would use literally the same definition in the two instances, no?</p>",
        "id": 221693863,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609876702
    },
    {
        "content": "<p>This kind of modification can only be performed by developers. That being said, we are open to listening to requests. We also expect consensus between users before we even consider this kind of change.</p>",
        "id": 221697393,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609878516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/PR.20welcome.3F/near/221697393\">said</a>:</p>\n<blockquote>\n<p>We also expect consensus between users before we even consider this kind of change.</p>\n</blockquote>\n<p>Yes, of course. Thanks for your answer!</p>",
        "id": 221698327,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609879011
    },
    {
        "content": "<p>I think this is a result of the fact that Lean's Nat is based off the Peano naturals, whose multiplication operation is defined by induction on the right variable. So there is tension between the monoid definition and Peano definition.</p>",
        "id": 229534156,
        "sender_full_name": "Mac",
        "timestamp": 1615316856
    },
    {
        "content": "<p>In the Peano naturals, you can define multiplication by induction on the right variable or on the left variable, as you prefer. In mathematical practice, we often write <code>n + 1</code>, <code>n + 2</code>, and so on (much more often than <code>1 + n</code>, <code>2 + n</code> and so on), but on the other hand we often write <code>1 * n</code>, <code>2 * n</code>, <code>3 * n</code> and so on (much more often than <code>n * 1</code>, <code>n * 2</code>, <code>n * 3</code> and so on), so in everyday practice there is a funny asymmetry between addition and multiplication. If Lean 4 could reflect this everyday practice in its definition of addition and multiplication, this would be nice (for defeq purposes with small numbers, and for defeqness of the natural monoid addition), but it's not a big deal in any case.</p>",
        "id": 229540612,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615319055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Have you discussed this change with the rest of the mathlib community? For example, have anyone tried this change on the Lean 3 community branch and mathlib? If yes, did it improve things or not?</p>",
        "id": 229542724,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615319912
    },
    {
        "content": "<p>Related: Reid refactored the <code>has_pow</code> instance for <code>nat</code> to match the one for monoids. This required a change in core lean3. It generally improved things for mathlib.</p>",
        "id": 229542958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615320003
    },
    {
        "content": "<p>No, we haven't tested the change in Lean 3, although most people agreed it would probably be an improvement with respect to some issues we have.</p>",
        "id": 229544359,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615320483
    },
    {
        "content": "<p>I almost wonder if we should remove the global nat-module instance and just have lemmas that use nat-smul take a typeclass argument</p>",
        "id": 229547565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615321685
    },
    {
        "content": "<p>(to be clear, I don't oppose the change, just the claim that it solves enough of these diamonds to be interesting)</p>",
        "id": 229548415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615321993
    },
    {
        "content": "<p>Do we have a thread on this outside <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>? I think I remember one</p>",
        "id": 229548456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615322013
    },
    {
        "content": "<p>If it only solves one diamond (and it does) and if it is more natural from the mathematical point of view (and it is), then it is a net improvement over the situation we have, although not a big one I agree. But this discussion is moot for Lean 4 while we haven't tried it on Lean 3.</p>",
        "id": 229551752,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615323208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/PR.20welcome.3F/near/229540612\">said</a>:</p>\n<blockquote>\n<p>In the Peano naturals, you can define multiplication by induction on the right variable or on the left variable, as you prefer.</p>\n</blockquote>\n<p>True, you <strong>could</strong>. You could also flip the module definition. My point was simply that the standard formulation of the Peano axioms uses induction on the right variable. Thus, if the nat multiplication uses induction on the left variable it would no longer be defeq to the Peano naturals. So changing it would create a similar problem elsewhere. This happened to be particularly notable to me, since I am currently  doing some proof work in Lean using Peano logic.</p>",
        "id": 229589947,
        "sender_full_name": "Mac",
        "timestamp": 1615341894
    },
    {
        "content": "<p>I don't care about any \"standard\" definition of the Peano naturals, clearly both definitions work and satisfy the same theorems. This is an implementation issue and history doesn't help with this -- for all we know Peano just chose randomly. I think Sebastién has a valid point and it's worth experimenting. I don't know if it's related but <code>to_additive</code> has problems relating <code>pow</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">g^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> with <code>smul</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>⋅</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">n \\cdot g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> because the order is switched. This makes me think the naturals are acting on the wrong side for one of these definitions.</p>",
        "id": 229611186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615358984
    },
    {
        "content": "<p>Finally we have tried the other nat (and int) multiplication in Lean 3. By \"we\", I mean <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , who's fixed everything in Lean core <a href=\"https://github.com/leanprover-community/lean/issues/551\">lean#551</a>, and then in mathlib <a href=\"https://github.com/leanprover-community/mathlib/issues/6773\">#6773</a>. Thanks a lot for this!</p>\n<p>To recap: currently, in Lean 3, nat addition <code>x + y</code> is defined by induction on <code>y</code> (so that <code>x + 0 = x</code> is definitional), and nat multiplication also (so that <code>x * 1 = x</code> is definitional -- well, this is not true but it could be true with a little tweak of the definition). This creates a few problems down the road, where we say that any type with <code>0</code> and <code>+</code> has a nat action <code>n • x</code> defined by induction on <code>n</code>, and this gives two different actions of nat on itself, where multiplication is defined by induction on the first variable in one case, on the second variable in the other case.</p>\n<p>The PR redefines nat multiplication to be by induction on the first variable (but addition remains an induction on the second variable). With this, our diamond problem disappears, and also <code>1 * n = n</code> becomes definitional, which is nice because in maths we write much more often <code>1 * n</code> or <code>2 * n</code> than <code>n * 1</code> or <code>n * 2</code>, for cultural reasons or whatever.  And also for int, in the same way. Also, the new definition is given by hand with <code>nat.rec_on</code> instead of using the equation compiler because the term produced by the equation compiler is a little bit messy.</p>\n<p>If I understand correctly, the refactor broke a few proofs that were probably relying too much on defeqness of multiplication, so resulting in more robust proofs. A more serious issue is with a technique converting automatically proofs from addition to multiplication or vice versa, through the <code>additive</code> or <code>multiplicative</code> type synonyms. Some of these proofs broke, because the definition of addition and multiplication are now different. I am not sure it matters a lot because this <code>additive</code> and <code>multiplicative</code> stuff is more or less a hack, and it is not clear how it will work in Lean 4 (there is another thread on this, I am not sure we came to a conclusion about this).</p>\n<p>For me, the pros of the change outweigh the cons, and by a rather big margin. I'd be curious to hear what others think. Of course, in the end, <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> has the final call on what he does in Lean 4, and I think we will merge <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> 's refactor if and only if Leo decides that changing the definition of nat and int multiplication is a good move for Lean 4. (With heterogeneous multiplication in Lean 4 it would be even easier to do it uniformly).</p>\n<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , maybe you want to comment more on how the refactor did go?</p>",
        "id": 231336590,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616429017
    },
    {
        "content": "<p>The motivating example <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  wanted to work was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.int_module.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">_</span> <span class=\"n\">int.ring</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.comm_ring</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which is now true for this branch.</p>\n<p>Regarding the refactor, it was almost entirely having to rephrase proofs that relied on <code>n * m.succ</code> being defeq to <code>n * m + m.succ</code> or proofs that relied on coercions being automatically applied to a particular level. More work was necessary to rephrase the <code>additive/multiplicative</code> proofs -- I was inspired by some of the formalization tooling <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has in <a href=\"https://github.com/leanprover-community/mathlib/issues/6045\">#6045</a>. I definitely got a large appreciation for proofs that rely on rewriting instead of \"deep-rfl\". The \"deep-rfl\" are the most brittle to such a refactor, particularly the ones that are used in a proof that is not part of the \"foundational\" API.</p>\n<p>I think that this refactor would change what some users are familiar with in terms of which terms are defeq and what \"cute\" proof-terminating strategies one can use. But I think in general it can help unify the \"nat\"-action and \"int\"-action with regular nat-mul and int-mul. I did not do any of that sort of refactoring other than now utilizing those facts (rewriting, not defeq) and providing the instance test example above.</p>",
        "id": 231339175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616429768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/PR.20welcome.3F/near/231336590\">said</a>:</p>\n<blockquote>\n<p>A more serious issue is with a technique converting automatically proofs from addition to multiplication or vice versa, through the <code>additive</code> or <code>multiplicative</code> type synonyms. Some of these proofs broke, because the definition of addition and multiplication are now different.</p>\n</blockquote>\n<p>Can you say more about what the issue is?</p>",
        "id": 231388742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616449035
    },
    {
        "content": "<p>A random example from <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> 's PR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_multiset_map_count</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">s.to_finset</span><span class=\"o\">,</span> <span class=\"n\">s.count</span> <span class=\"n\">m</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- @prod_multiset_map_count _ _ _ (multiplicative M) _ f</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">prod_multiset_map_count</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">of_add_nsmul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The old proof is the commented line. Here, <code>of_add_nsmul</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_add_nsmul</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiplicative.of_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- rfl</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_nsmul</span><span class=\"o\">,</span> <span class=\"n\">of_add_add</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where the old proof was <code>rfl</code>, but the new proof is not. Maybe changing the definition of the power function could also fix this.</p>",
        "id": 231389287,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616449330
    }
]