[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20lookup.20the.20precedence.20of.20a.20symbol.3F/near/305644419\">said</a>:</p>\n<blockquote>\n<p>please post code, not images: <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>changed accordingly</p>",
        "id": 305644889,
        "sender_full_name": "Erika Su",
        "timestamp": 1666520392
    },
    {
        "content": "<p>also note the link</p>",
        "id": 305645361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666520650
    },
    {
        "content": "<p><code>Lazy</code> doesn't compile for me</p>",
        "id": 305645376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666520665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20lookup.20the.20precedence.20of.20a.20symbol.3F/near/305645361\">said</a>:</p>\n<blockquote>\n<p>also note the link</p>\n</blockquote>\n<p>Have updated the code, sorry for the inconvenience brought.</p>",
        "id": 305646063,
        "sender_full_name": "Erika Su",
        "timestamp": 1666521090
    },
    {
        "content": "<p>Here's a simpler version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">lazyfn.eval</span> <span class=\"mi\">7</span> <span class=\"c1\">-- fails</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">lazyfn.eval</span><span class=\"o\">)</span> <span class=\"mi\">7</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>The role of the parentheses here is not precedence, but rather to break up the elaboration of the application into two groups. This appears to be a quirk of how dot notation works when there are explicit arguments which can be inferred by unification, here <code>α</code>. Personally I think it is surprising that <code>lazyfn.eval</code> works to produce an element of <code>Nat → String</code>, rather than <code>lazyfn.eval _</code> or <code>lazyfn.eval (Nat → String)</code> (since <code>α</code> is an explicit argument). cc: <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 305646636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666521464
    },
    {
        "content": "<p>Anyway, the correct answer here <span class=\"user-mention\" data-user-id=\"557291\">@Erika Su</span> is to use <code>{}</code> around <code>α</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lazy.eval</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Lazy</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.inner</span> <span class=\"n\">Unit.unit</span>\n</code></pre></div>\n<p>You will pretty much always see type arguments passed implicitly like this, and it makes both versions work</p>",
        "id": 305646748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666521535
    },
    {
        "content": "<p>thank you! You're right i should make implicit.</p>",
        "id": 305647159,
        "sender_full_name": "Erika Su",
        "timestamp": 1666521791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557291\">Erika Su</span> has marked this topic as resolved.</p>",
        "id": 305647162,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666521795
    }
]