[
    {
        "content": "<p>I was intrigued by the Linter API in the compiler and decided to give it a shot. And the SnakeLinter.lean gave me a good starting point.</p>\n<p>I do see that Lean.Elab.Command has a runLinters, but how do I get a Syntax to test my Linter without having to compile to a shared library, etc?</p>",
        "id": 275598142,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1647480717
    },
    {
        "content": "<p>If you are okay with explicitly <code>import</code>ing your linter, calling <code>addLinter</code> in <code>initialize</code> should work I think. The reason for the .so is of course that you shouldn't need to import linters, they should be optional parts you \"side-load\" into your development environment. The build system should ideally make it trivial to produce such <code>.so</code>s, about which I had an entire talk <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> .</p>",
        "id": 275625011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647509110
    },
    {
        "content": "<p>Here is a #MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.debug</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testLinter</span> <span class=\"o\">:</span> <span class=\"n\">Linter</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.debug</span><span class=\"o\">]</span> <span class=\"s2\">\"Test linter\"</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">addLinter</span> <span class=\"n\">testLinter</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Elab.Command.runLinters</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">quote</span> <span class=\"n\">test</span>  <span class=\"c1\">-- &lt;== ERROR</span>\n\n<span class=\"c1\">-- #eval Elab.Command.elabCommandTopLevel &lt;| quote test</span>\n</code></pre></div>\n<p>And this is where I am stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expression</span>\n  <span class=\"n\">Elab.Command.runLinters</span> <span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">test</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Elab.Command.CommandElabM</span> <span class=\"n\">Unit</span>\n<span class=\"n\">but</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MetaEval</span> <span class=\"o\">(</span><span class=\"n\">Elab.Command.CommandElabM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">synthesized</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"kd\">instance</span> <span class=\"n\">instructs</span> <span class=\"n\">Lean</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">type</span> <span class=\"n\">implementing</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Repr</span><span class=\"bp\">`</span> <span class=\"kd\">class</span> <span class=\"n\">also</span> <span class=\"n\">implements</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Lean.MetaEval</span><span class=\"bp\">`</span> <span class=\"kd\">class</span>\n</code></pre></div>\n<p>How can I test a test a linter without having to rely on building and packaging?</p>",
        "id": 275640837,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1647518201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Lint.20without.20compiling.20to.20.2Eso/near/275625011\">said</a>:</p>\n<blockquote>\n<p>If you are okay with explicitly <code>import</code>ing your linter, calling <code>addLinter</code> in <code>initialize</code> should work I think. The reason for the .so is of course that you shouldn't need to import linters, they should be optional parts you \"side-load\" into your development environment. The build system should ideally make it trivial to produce such <code>.so</code>s, about which I had an entire talk <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> .</p>\n</blockquote>\n<p>The design makes sense. It is just counter productive for experimentation, learning or unit testing.</p>",
        "id": 275641623,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1647518635
    },
    {
        "content": "<p>This is as far as a got at this point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.debug</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">formatLinter</span> <span class=\"o\">:</span> <span class=\"n\">Linter</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.debug</span><span class=\"o\">]</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"TBD: {stx}\"</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">addLinter</span> <span class=\"n\">formatLinter</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"#lint\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">formatLinter</span> <span class=\"n\">t</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">test</span><span class=\"o\">:</span><span class=\"n\">Nat</span> <span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am able to call the linter using some piece of syntax but it does not seem to have source info, which I guess is expected.</p>",
        "id": 275712599,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1647544895
    }
]