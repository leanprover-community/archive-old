[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">moveToEnd</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">Parsec.anyChar</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">c</span>\n  <span class=\"n\">moveToEnd</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">moveToEnd.run</span> <span class=\"s2\">\"ab\"</span>\n</code></pre></div>\n<p>What's the right approach to prove termination here? Use an explicit <code>fun it</code>?</p>",
        "id": 306983935,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667148988
    },
    {
        "content": "<p>I seem to have made some progress with my <code>moveToEnd</code> and <code>moveToEnd'</code> below, but now I don't know why the <code>moveToEnd'</code> has two independent <code>String.Iterator</code>s. For the case of the more \"manual\" definition in <code>moveToEnd</code>, how do I restrict the termination obligation to just a subset of cases where <code>it.hasNext</code>? Since if that's not true, then one terminates right away.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.lt_add_right_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.sub_lt_sub_left_of_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">csize_pos</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">String.csize</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">String.one_le_csize</span> <span class=\"n\">c</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_le_pos_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.byteIdx</span> <span class=\"bp\">≤</span> <span class=\"n\">q.byteIdx</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_lt_pos_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.byteIdx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.byteIdx</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">byteIdx_pos_add_char</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"bp\">=</span> <span class=\"n\">p.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">String.csize</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_lt_add_char_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pos_lt_pos_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_add_right_iff</span><span class=\"o\">,</span> <span class=\"n\">csize_pos</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">String.Iterator.s_next</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">String.Iterator</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">it.next.s</span> <span class=\"bp\">=</span> <span class=\"n\">it.s</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">String.Iterator.pos_next</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">String.Iterator</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">it.next.pos</span> <span class=\"bp\">=</span> <span class=\"n\">it.s.next</span> <span class=\"n\">it.pos</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">moveToEnd</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">it</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Parsec.ParseResult.success</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">Parsec.anyChar</span> <span class=\"n\">it</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">Parsec.ParseResult.error</span> <span class=\"n\">it</span> <span class=\"s2\">\"end\"</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">c</span>\n  <span class=\"n\">return</span> <span class=\"n\">moveToEnd</span> <span class=\"n\">it.next</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">moveToEnd</span> <span class=\"n\">it</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">it.s.length</span> <span class=\"bp\">-</span> <span class=\"n\">it.pos.byteIdx</span>\n<span class=\"n\">decreasing_by</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- a✝: String.Iterator -- only one such String.Iterator</span>\n  <span class=\"n\">rename</span> <span class=\"n\">String.Iterator</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">it</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.sub_lt_sub_left_of_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">moveToEnd'</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">it</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">Parsec.anyChar</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">c</span>\n  <span class=\"n\">moveToEnd'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">it</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">moveToEnd'</span> <span class=\"n\">it</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">it.s.length</span> <span class=\"bp\">-</span> <span class=\"n\">it.pos.byteIdx</span>\n<span class=\"n\">decreasing_by</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- a✝¹a✝: String.Iterator -- two such String.Iterators</span>\n  <span class=\"n\">rename</span> <span class=\"n\">String.Iterator</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">it</span> <span class=\"c1\">-- (aside, how do I rename both)</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">moveToEnd.run</span> <span class=\"s2\">\"ab\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">moveToEnd'.run</span> <span class=\"s2\">\"ab\"</span>\n</code></pre></div>",
        "id": 307034343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667190210
    }
]