[
    {
        "content": "<p>Suppose I have a syntax category called <code>kvbare</code> of string key-values, given by the syntax <code>key===value</code>. I now want to create a macro for a \"dictionary\", which is given by <code>&lt;[ key1 === value, key2 === value2, ..., keyn === valuen ]&gt;</code>. The macro should desugar into <code>List (String × String)</code>. Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">kvbare</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"s2\">\"===\"</span> <span class=\"n\">str</span>  <span class=\"o\">:</span> <span class=\"n\">kvbare</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"kvbare% \"</span> <span class=\"n\">kvbare</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"bp\">===</span>  <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobare</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span>  <span class=\"s2\">\"foobare\"</span>  <span class=\"bp\">===</span>  <span class=\"s2\">\"barbare\"</span> <span class=\"o\">)</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">dict</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">kvbare</span><span class=\"o\">,</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"s2\">\"]&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">dict</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"dict% \"</span> <span class=\"n\">dict</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">dict</span><span class=\"bp\">%</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">kvs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n     <span class=\"k\">let</span> <span class=\"n\">initList</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">([])</span>\n     <span class=\"n\">kvs.getElems.foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">initList</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">kv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">kvbare</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">kv</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dict0</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"bp\">×</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dict</span><span class=\"bp\">%</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span>  <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">dict0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dict1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"bp\">×</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dict</span><span class=\"bp\">%</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"s2\">\"foo\"</span> <span class=\"bp\">===</span> <span class=\"s2\">\"bar\"</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">dict1</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">dict2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"bp\">×</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dict</span><span class=\"bp\">%</span> <span class=\"bp\">&lt;</span><span class=\"o\">[</span> <span class=\"mi\">1</span> <span class=\"bp\">===</span> <span class=\"mi\">2</span> <span class=\"o\">]</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">dict2</span>\n</code></pre></div>\n<p>This works properly on <code>dict0</code> and <code>dict1</code>, and correctly errors on <code>dict2</code>, since the key and value are <code>int</code>, not <code>string</code>.  I have  a few questions at this stage:</p>\n<ol>\n<li>What are the special features of the <code>MacroM</code> monad? For one, one can use quoting inside the <code>MacroM</code> context. Are the functions I should be aware of / are commonly used, as a macro author?</li>\n<li>The error for <code>dict2</code> is:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">crash.lean</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span><span class=\"mi\">46</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"o\">]</span><span class=\"bp\">&gt;'</span>\n<span class=\"kd\">def</span> <span class=\"n\">dict2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[]</span>\n</code></pre></div>\n<p>is it possible to add hints to produce a more precise error? I would have expected an error of the form <code>expected kvbare</code>  pointing at <code>1 === 2</code>. I understand if this is difficult/impossible due to the complexity of the LEAN parser.</p>",
        "id": 255683283,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633057902
    }
]