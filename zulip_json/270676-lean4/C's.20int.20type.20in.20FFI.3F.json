[
    {
        "content": "<p>I'm experimenting with Lean bindings for a C library, and it uses lots of <code>int</code>s. The FFI documentation in the Lean 4 repository describes Lean counterparts of e.g. <code>uint32_t</code>, but not of plain old <code>int</code>. I've tried doing something like <code>@[extern \"int\"] constant CInt : Type</code>, but I can't then declare foreign constants of that type because Lean complains about a missing <code>Inhabited CInt</code> instance.</p>\n<p>What's the right way to do this kind of thing?</p>",
        "id": 260578144,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636296695
    },
    {
        "content": "<p>The particular pattern here is that there's a collection of flag <code>#define</code>s that can be bitwise-or'ed together to change various settings.</p>",
        "id": 260578234,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636296802
    },
    {
        "content": "<p>I suppose I can always just write some C wrappers that present a more FFI-convenient interface...</p>",
        "id": 260578471,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636297088
    },
    {
        "content": "<p>The \"dirty\" solution would be to assume that <code>int</code> and <code>uint32_t</code> are ABI-identical on all relevant platforms and thus to use <code>UInt32</code> on the Lean side and hope for the best :)</p>",
        "id": 260578521,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636297196
    },
    {
        "content": "<p>I think I'd rather not do that for this specific context. Is there not a way to say \"This abstract Lean type stands for this external C type\" when FFI'ing?</p>",
        "id": 260578666,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636297269
    },
    {
        "content": "<p>I'm imagining something to be used kind of like <code>Ptr</code> in Haskell</p>",
        "id": 260578741,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636297362
    },
    {
        "content": "<p>There is a common pattern <a href=\"https://github.com/kha/lean4/blob/b257f1fd80d30ff2d87fab4af39f64ed5c91e423/src/Std/ShareCommon.lean#L88-L94\">using <code>PointedType</code></a> for that. But that type will be assumed to have pointer size, so you will need a C wrapper.</p>",
        "id": 260579129,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636297897
    },
    {
        "content": "<p>I think it's inevitable that we will eventually want <code>Int32</code> etc as primitive types</p>",
        "id": 260579175,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636297927
    },
    {
        "content": "<p>Do you think that's a plausible first PR for someone not well versed in the compiler's guts?</p>",
        "id": 260579277,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636298057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/C's.20int.20type.20in.20FFI.3F/near/260579277\">said</a>:</p>\n<blockquote>\n<p>Do you think that's a plausible first PR for someone not well versed in the compiler's guts?</p>\n</blockquote>\n<p>No, it is not. There are parts of the compiler that were not ported to Lean yet and are still in C++.<br>\nWe are planning to refactor and improve the compiler in the future, but the main priority right now is the Mathlib port.<br>\nI am guessing we will only be able to touch the compiler at the end of 2022.<br>\nBTW, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  suggested a workaround here:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255328931\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255328931</a><br>\nWhat do you think?</p>",
        "id": 260579540,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1636298401
    },
    {
        "content": "<p>I think it makes sense, though note that there is nothing trivial about<br>\n<span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255328931\">said</a>:</p>\n<blockquote>\n<p>And, at the C/C++ level you can trivially cast between the two</p>\n</blockquote>\n<p>if you want to be standard-conformant: <a href=\"https://stackoverflow.com/questions/13150449/efficient-unsigned-to-signed-cast-avoiding-implementation-defined-behavior\">https://stackoverflow.com/questions/13150449/efficient-unsigned-to-signed-cast-avoiding-implementation-defined-behavior</a></p>",
        "id": 260580173,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636299118
    },
    {
        "content": "<p>Huh, apparently it <em>is</em> defined in C99: <a href=\"https://stackoverflow.com/questions/50605/signed-to-unsigned-conversion-in-c-is-it-always-safe\">https://stackoverflow.com/questions/50605/signed-to-unsigned-conversion-in-c-is-it-always-safe</a></p>",
        "id": 260581365,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636300586
    },
    {
        "content": "<p>I think that I'll get by with a bit more glue code in C, and it will be at the worst a bit tedious. Thanks!</p>",
        "id": 260588558,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1636309252
    }
]