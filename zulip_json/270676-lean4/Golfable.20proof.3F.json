[
    {
        "content": "<p>Hello! In the context of <code>std4</code> this proof felt like it should be a one-liner, but I ended up having to do a manual inversion. Does anyone see a quicker strategy? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q.fst</span> <span class=\"bp\">!=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hSome</span><span class=\"o\">:</span> <span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">q.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hEq</span><span class=\"o\">:</span> <span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hEq</span> <span class=\"bp\">▸</span> <span class=\"n\">hSome</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n      <span class=\"n\">Bool.eq_false_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">Bool.bne_iff_not_beq.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h</span> <span class=\"n\">hEq</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 311748022,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669173838
    },
    {
        "content": "<p>kind of hammer-ish, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cond_eq_ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bne_iff</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">bne</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q.fst</span> <span class=\"bp\">!=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hSome</span><span class=\"o\">:</span> <span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">q.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hSome</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cond_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">bne_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢;</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Option.isSome</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 311749494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669175092
    },
    {
        "content": "<p>there are probably more things you can do in the lead-up to this goal to avoid the case splitting</p>",
        "id": 311749613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669175212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bne_iff</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">bne</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isSome_cond_some</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Option.isSome</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q.fst</span> <span class=\"bp\">!=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hSome</span><span class=\"o\">:</span> <span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">p.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Option.isSome</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">q.fst</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isSome_cond_some</span><span class=\"o\">,</span> <span class=\"n\">bne_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hSome</span>\n</code></pre></div>",
        "id": 311749800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669175398
    }
]