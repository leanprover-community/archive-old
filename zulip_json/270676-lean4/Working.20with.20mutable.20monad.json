[
    {
        "content": "<p>I would like to have a function that replaces a subexpression, but it should be monadic so I can e.g. store the expression being replaced. However, I'm having hard time doing this using the <code>mut</code> notation.</p>\n<p>My partial attempt that does not typecheck. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">replaceSubExpression</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"n\">MetaM</span><span class=\"o\">]</span>\n            <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n  <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"k\">else</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.app</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">replaceSubExpression</span> <span class=\"n\">f</span> <span class=\"n\">test</span> <span class=\"n\">replace</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">replaceSubExpression</span> <span class=\"n\">x</span> <span class=\"n\">test</span> <span class=\"n\">replace</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.lam</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.lam</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">replaceSubExpression</span> <span class=\"n\">b</span> <span class=\"n\">test</span> <span class=\"n\">replace</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n  <span class=\"c1\">-- this is incomplete and should use lambda telescope</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">getfvar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span>\n  <span class=\"k\">let</span> <span class=\"n\">replace</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"k\">do</span> <span class=\"c1\">-- invalid 'do' notation, expected type is not available</span>\n                      <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n                      <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">←</span> <span class=\"n\">replaceSubExpression</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.isFVar</span><span class=\"o\">)</span> <span class=\"n\">replace</span>\n  <span class=\"n\">e'</span>\n</code></pre></div>\n<p>The problem is with the definition of <code>replace</code>, I'm expecting I should explicitly state what monad it should use.</p>",
        "id": 256549322,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633599566
    },
    {
        "content": "<p>You cannot use <code>mut</code> across lambdas. Use the state monad or an <code>IO.Ref</code>.</p>",
        "id": 256549788,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633599803
    },
    {
        "content": "<p>That is a shame that it cannot be used, but I will look into <code>IO.Ref</code>.</p>",
        "id": 256549998,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633599911
    },
    {
        "content": "<p>In that case you don't need to change the monad, so I would remove <code>m</code> completely</p>",
        "id": 256550146,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633599972
    },
    {
        "content": "<p>Any example on how to use <code>IO.Ref</code> ?</p>",
        "id": 256550274,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633600051
    },
    {
        "content": "<p>Never mind, it looks pretty straight forward :) It does not stop to amaze me how incredibly readable the code of Lean 4 is and if things typecheck they usually work.</p>",
        "id": 256550647,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633600216
    },
    {
        "content": "<p>Great excuse to avoid writing docs <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 256551509,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633600652
    },
    {
        "content": "<p>I have noticed :D I know very little about formal methods, programming language design etc. but for example I was able to understand the role of local contex of an expression just from reading the Lean code and successfully use it to do some expression transformations.</p>",
        "id": 256552329,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633601045
    }
]