[
    {
        "content": "<p>I'm looking for some advice regarding dot notation inside of an antiquotation. I can't seem to get it to work (albeit I only tried naive things). For example, how would I go about getting the second command to work similarly to the first command (modulo namespaces):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"c0\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">s</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">t</span>\n    <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">s.</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"n\">c0</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo.baz</span>\n\n<span class=\"n\">c1</span> <span class=\"n\">foo'</span> <span class=\"n\">bar'</span> <span class=\"n\">baz'</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 302577615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665026377
    },
    {
        "content": "<p>dot notation directly on identifiers is lexed as a single identifier, so you have to combine the idents yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c0\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">s</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">t</span>\n    <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_t</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">s.getId</span> <span class=\"bp\">++</span> <span class=\"n\">t.getId</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">s_t</span><span class=\"o\">)</span>\n\n<span class=\"n\">c0</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo.baz</span>\n<span class=\"c1\">-- def foo.baz : foo → Nat :=</span>\n<span class=\"c1\">-- foo.bar</span>\n\n<span class=\"n\">c1</span> <span class=\"n\">foo'</span> <span class=\"n\">bar'</span> <span class=\"n\">baz'</span>\n<span class=\"k\">#print</span> <span class=\"n\">baz'</span>\n<span class=\"c1\">-- def baz' : foo' → Nat :=</span>\n<span class=\"c1\">-- foo'.bar'</span>\n</code></pre></div>",
        "id": 302578493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665027387
    },
    {
        "content": "<p>Ah! I see. Thanks Mario!</p>",
        "id": 302578610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665027493
    },
    {
        "content": "<p>In fact, in this case you aren't actually using dot notation. The error you get in the original version is what you get if you force dot notation use, similar to writing <code>(foo).bar</code> or <code>foo |&gt;.bar</code>, which fails because <code>foo</code> is a type / namespace, not an expression whose type is in an appropriate namespace</p>",
        "id": 302578640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665027549
    },
    {
        "content": "<p>Yeah, I figured out that much... but had no idea what to try instead :)</p>",
        "id": 302578745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665027611
    },
    {
        "content": "<p>One more question: What's the purpose of <code>mkIdentFrom</code> and <code>mkNullNode</code>? The following works as well -- is it  equivalent?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_t</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">s.getId</span> <span class=\"bp\">++</span> <span class=\"n\">t.getId</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">s_t</span><span class=\"o\">)</span>\n\n<span class=\"n\">c1</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span>\n<span class=\"k\">#print</span> <span class=\"n\">baz</span>\n</code></pre></div>",
        "id": 302578987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665027860
    },
    {
        "content": "<p>it annotates the synthesized identifier <code>s_t</code> with the span of <code>foo bar</code> in the original call to <code>c1</code></p>",
        "id": 302579176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665028023
    },
    {
        "content": "<p>so for example if there was a type error when elaborating the <code>def</code> you would see a red underline on that span</p>",
        "id": 302579187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665028052
    },
    {
        "content": "<p>Ah interesting! Thanks!</p>",
        "id": 302579246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665028107
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"c1\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">s_t</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">s.getId</span> <span class=\"bp\">++</span> <span class=\"n\">t.getId</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">s_t</span><span class=\"o\">)</span>\n\n<span class=\"n\">c1</span> <span class=\"n\">foo'</span> <span class=\"n\">bar'</span> <span class=\"n\">baz'</span>\n<span class=\"c1\">-- ^^^^^^^^^ type mismatch, bla bla</span>\n</code></pre></div>",
        "id": 302579361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665028249
    },
    {
        "content": "<p>of course it's a design question where exactly you want to put those underlines for any given macro</p>",
        "id": 302579457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665028336
    }
]