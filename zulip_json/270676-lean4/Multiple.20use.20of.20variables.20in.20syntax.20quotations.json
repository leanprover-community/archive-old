[
    {
        "content": "<p>I feel like this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which elaborates to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"k\">if</span> <span class=\"n\">isOfKind</span> <span class=\"n\">discr</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.app</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">discr_1</span> <span class=\"o\">:=</span> <span class=\"n\">getArg</span> <span class=\"n\">discr</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">discr_2</span> <span class=\"o\">:=</span> <span class=\"n\">getArg</span> <span class=\"n\">discr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"n\">matchesNull</span> <span class=\"n\">discr_2</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:=</span> <span class=\"n\">getArg</span> <span class=\"n\">discr_2</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">discr</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">discr_1</span><span class=\"bp\">;</span>\n      <span class=\"n\">x</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:=</span> <span class=\"n\">getArg</span> <span class=\"n\">discr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n      <span class=\"n\">sorryAx</span> <span class=\"n\">Syntax</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">discr</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"n\">sorryAx</span> <span class=\"n\">Syntax</span>\n</code></pre></div>\n<p>Should not be valid? Mentioning the same variable twice inside of a regular pattern also leads to an error. And the elaborated function also basically just overloads things so in big patterns that use many antiquotations stuff like this might end up being hard to debug.</p>",
        "id": 286261093,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655321075
    },
    {
        "content": "<p>This topic was moved to <a class=\"stream-topic\" data-stream-id=\"147302\" href=\"/#narrow/stream/147302-lean4-dev/topic/Multiple.20use.20of.20variables.20in.20syntax.20quotations\">#lean4-dev &gt; Multiple use of variables in syntax quotations</a> by <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span>.</p>",
        "id": 286288048,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655335479
    }
]