[
    {
        "content": "<p>Mostly for the fun of it, I followed the <a href=\"https://raytracing.github.io/books/RayTracingInOneWeekend.html\">Ray Tracing in One Weekend</a> book but in Lean rather than C++.  It was overall a pleasant experience -- Lean is a nicely designed functional language!</p>\n<p>My code isn't particularly fast (and I wasn't particularly focused on performance), but at least it's easily parallelized.</p>\n<p>In case it's interesting, here's the code along with a rendered test image: <a href=\"https://github.com/kmill/lean4-raytracer\">https://github.com/kmill/lean4-raytracer</a></p>",
        "id": 224672752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1612136884
    },
    {
        "content": "<p>I was browsing <a href=\"https://github.com/topics/lean4\">the repos tagged with <code>lean4</code> on GitHub</a> and I stumbled upon another raytracer in Lean 4 by <span class=\"user-mention\" data-user-id=\"266262\">@Reed Mullanix</span>: <a href=\"https://github.com/TOTBWF/lean4-raytrace\">https://github.com/TOTBWF/lean4-raytrace</a></p>",
        "id": 225447086,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612677325
    },
    {
        "content": "<p>The other one is _much_ better than mine! I do like how I implemented images, but beyond that their code doesn't have this abomination:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">UInt8.ofFloat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">255</span> <span class=\"k\">then</span> <span class=\"mi\">255</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"mi\">255</span>\n\n  <span class=\"n\">where</span>\n    <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"bp\">+</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n      <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">lo</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">UInt8.ofNat</span> <span class=\"bp\">$</span> <span class=\"n\">lo</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Float.ofNat</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">go</span> <span class=\"n\">lo</span> <span class=\"n\">mid</span> <span class=\"k\">else</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 225447138,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1612677471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266262\">@Reed Mullanix</span> We have added the following coercions<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean#L79-L83\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/Float.lean#L79-L83</a></p>",
        "id": 225487636,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612737029
    },
    {
        "content": "<p>Small update here: now <a href=\"https://github.com/kmill/lean4-raytracer\">https://github.com/kmill/lean4-raytracer</a> is using lake and the newest Lean 4.</p>",
        "id": 287765635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656445078
    },
    {
        "content": "<p>It's also using some new syntax like the prefix dot notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HitRecord.scatter</span> <span class=\"o\">(</span><span class=\"n\">hitrec</span> <span class=\"o\">:</span> <span class=\"n\">HitRecord</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Ray</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">MaterialResponse</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hitrec.material</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lambertian</span> <span class=\"n\">albedo</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">scatterDir</span> <span class=\"o\">:=</span> <span class=\"n\">hitrec.normal</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">IO.randVec3InUnitSphere</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normalized</span>\n      <span class=\"k\">if</span> <span class=\"n\">scatterDir.nearZero</span> <span class=\"k\">then</span>\n        <span class=\"n\">scatterDir</span> <span class=\"o\">:=</span> <span class=\"n\">hitrec.normal</span>\n      <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">scatter</span> <span class=\"n\">albedo</span> <span class=\"o\">{</span> <span class=\"n\">origin</span> <span class=\"o\">:=</span> <span class=\"n\">hitrec.p</span><span class=\"o\">,</span> <span class=\"n\">dir</span> <span class=\"o\">:=</span> <span class=\"n\">scatterDir</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">metal</span> <span class=\"n\">albedo</span> <span class=\"n\">fuzz</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">reflected</span> <span class=\"o\">:=</span> <span class=\"n\">r.dir.normalized.reflect</span> <span class=\"n\">hitrec.normal</span>\n      <span class=\"k\">let</span> <span class=\"n\">scattered</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">origin</span> <span class=\"o\">:=</span> <span class=\"n\">hitrec.p</span><span class=\"o\">,</span> <span class=\"n\">dir</span> <span class=\"o\">:=</span> <span class=\"n\">reflected</span> <span class=\"bp\">+</span> <span class=\"n\">fuzz</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.randVec3InUnitSphere</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n      <span class=\"k\">if</span> <span class=\"n\">scattered.dir.dot</span> <span class=\"n\">hitrec.normal</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">scatter</span> <span class=\"n\">albedo</span> <span class=\"n\">scattered</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">absorb</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 287765668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656445083
    }
]