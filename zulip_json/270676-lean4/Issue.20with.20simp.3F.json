[
    {
        "content": "<p>I would think this should close via <code>simp</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>gets the helpful message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">HAdd</span> <span class=\"bp\">?</span><span class=\"n\">m.188</span> <span class=\"bp\">?</span><span class=\"n\">m.189</span> <span class=\"bp\">?</span><span class=\"n\">m.190</span>\n</code></pre></div>",
        "id": 304102986,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665775993
    },
    {
        "content": "<p>Two questions:</p>\n<ol>\n<li>what are the types of a,b,c? This is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></li>\n<li>why do you think <code>simp</code> should be able to solve this? (<code>ring</code> would make more sense to me, if you have Mathlib4 imported)</li>\n</ol>",
        "id": 304103236,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665776096
    },
    {
        "content": "<p>Good point -- poor typing on the example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>now just fails to close.</p>\n<p>my expectation from previous work with the NNG is that <code>simp</code> closes goals that can be solved via associativity and commutitivty</p>",
        "id": 304104009,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665776443
    },
    {
        "content": "<p>Sorry, I had to step away. Aha, you are working with NNG, which one? There are now a few of these floating around and you seem to be on a Lean 4 version (given that you typed <code>Nat</code> and not <code>nat</code>)? No, <code>simp</code> does not in general close goals involving associativity and commutativity. This is because such lemmas are generally not tagged with the <code>simp</code> attribute.</p>\n<p>A lemma will generally be a <code>simp</code> lemma if it is an equality (or an <code>↔</code>) for which the left-hand side is \"more complicated\" than the right-hand side, and for which you almost always want to replace the left-hand side with the right-hand side wherever you find it.</p>\n<p>So, a lemma like <code>zero_add (x : Nat) : 0 + x = x</code> should be a <code>simp</code> lemma. On the other hand, <code>add_comm (x y : Nat) : x + y = y + x</code> should not be a <code>simp</code> lemma because both sides are equally complicated, and similarly for <code>add_assoc</code>. A tactic that deals with associativity and commutativity would be <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ac_refl\">tactic#ac_refl</a>, but this is a Lean 3 tactic, I'm not sure if it exists in Lean 4 or if you have access to it in NNG.</p>",
        "id": 304111286,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665779246
    },
    {
        "content": "<p>Gotcha -- yeah, I'm learning Lean4 tactics from TPIL, and practicing by re-deriving the NNG work following the TPIL work. Back to figuring out the magic combination of rewrites.</p>",
        "id": 304113322,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665780062
    },
    {
        "content": "<p>The quote that I was leaning on was from NNG multiplication world 7 \"If your goal looks like <code>a+(b+c)=c+b+a</code> or something, don't mess around doing it explicitly with <code>add_comm</code> and <code>add_assoc</code>, just try <code>simp</code>.\" -- maybe <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> tagged those in the context of NNG?</p>",
        "id": 304113683,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665780211
    },
    {
        "content": "<p>Arien, I got that one working in lean4 already, so if you get stuck in your learning process you can go here for the lean4 answers:<br>\n<a href=\"https://github.com/leanprover/lean4-samples/tree/main/NaturalNumbers\">https://github.com/leanprover/lean4-samples/tree/main/NaturalNumbers</a><br>\nSee <a href=\"https://github.com/leanprover/lean4-samples/blob/main/NaturalNumbers/MultiplicationWorld/Level9.lean\">Level 9</a>, the trick is registering things with simp using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">mul_comm</span> <span class=\"n\">mul_left_comm</span>\n</code></pre></div>",
        "id": 304114607,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665780578
    },
    {
        "content": "<p>Yep, I'm doing a custom thing building my own definition of <code>mul</code> but relying on <code>Nat</code>'s built in definition. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>/NNG  must mark the relevant <code>add</code> version of <code>assoc</code> and <code>comm</code> as <code>simp</code> as well.</p>",
        "id": 304124711,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665785319
    },
    {
        "content": "<p>anyway</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rhs</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>closes this goal.</p>",
        "id": 304126584,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665786282
    },
    {
        "content": "<p>Just verifying that the lean3 equivalents are also not marked as <code>simp</code></p>",
        "id": 304127624,
        "sender_full_name": "Arien Malec",
        "timestamp": 1665786777
    },
    {
        "content": "<p>Back in the day, add_comm was tagged <code>simp</code>, and <code>ring</code> didn't exist, but times change. The <code>ring</code> tactic is now the appropriate tactic to solve lemmas such as this.</p>",
        "id": 304157645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665815806
    }
]