[
    {
        "content": "<p>Currently, wrapping a primitive type like <code>UInt32</code> in a structure makes it boxed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AddressSpace</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span>\n\n<span class=\"kd\">@[extern \"foo\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">addrSpace</span> <span class=\"o\">:</span> <span class=\"n\">AddressSpace</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span>\n<span class=\"c1\">-- passes address space as an `lean_object*`</span>\n\n<span class=\"kd\">@[extern \"bar\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">addrSpace</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span>\n<span class=\"c1\">-- passes address space as an `uint32`</span>\n</code></pre></div>\n<p>This poses a problem for examples like the above where, for type safety reasons, wrapping a primitive type in a singleton structure is desirable. </p>\n<p><strong>Would it be feasible for such wrappers to also be special-cased by the code generator?</strong></p>",
        "id": 244872200,
        "sender_full_name": "Mac",
        "timestamp": 1625424708
    },
    {
        "content": "<p>Oh... this is already the case, but, what I can only assume is an oversight, only in the case of <em>parameterized</em> structures</p>",
        "id": 244874272,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625427877
    },
    {
        "content": "<p>lol! Well then, should I submit an issue about it?</p>",
        "id": 244877632,
        "sender_full_name": "Mac",
        "timestamp": 1625432883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/556\">https://github.com/leanprover/lean4/pull/556</a></p>",
        "id": 244898220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625466018
    },
    {
        "content": "<p>I discovered another place where unbox-ness is not preserved. Though, this may be intended:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Address</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">USize</span>\n<span class=\"c1\">-- Address is a `lean_object*` instead of a `usize`</span>\n</code></pre></div>\n<p><strong>Would it be feasible for such opaque definitions to also preserve unbox-ness?</strong></p>",
        "id": 244975554,
        "sender_full_name": "Mac",
        "timestamp": 1625520517
    }
]