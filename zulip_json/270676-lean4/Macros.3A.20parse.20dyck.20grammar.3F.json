[
    {
        "content": "<p>I'm trying to learn the LEAN4 macro system well enough to parse context-free grammars I'm interested in. I started with trying the <a href=\"https://en.wikipedia.org/wiki/Dyck_language\">dyck grammar</a> / balanced parens.</p>\n<p>Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Dyck</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Round</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Dyck</span>\n   <span class=\"bp\">|</span> <span class=\"n\">End</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"End\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"End\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.End</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"n\">brack</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.Round</span> <span class=\"bp\">$</span><span class=\"n\">expr</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"brack\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"-&gt;\"</span> <span class=\"n\">brack</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"brack\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"End\"</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"o\">:=</span> <span class=\"n\">End</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- | macro that wants `( brack )`</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"brack\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"-&gt;\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">brack</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"o\">:=</span> <span class=\"n\">Dyck.Round</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">brack</span> <span class=\"n\">foo</span> <span class=\"n\">End</span>\n<span class=\"n\">print</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">brack</span> <span class=\"n\">bar</span> <span class=\"o\">(</span> <span class=\"n\">End</span> <span class=\"o\">)</span>\n<span class=\"n\">print</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>Unfortunately, the line that attempts to parse <code>\"(\" brack \")\"</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"n\">macros.lean</span>\n<span class=\"n\">macros.lean</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">33</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">stx</span>\n<span class=\"n\">macros.lean</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">identifier</span>\n<span class=\"n\">macros.lean</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">identifier</span>\n<span class=\"n\">macros.lean</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">macros.lean</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'-&gt;'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">End'</span>\n</code></pre></div>\n<p>How should I write the macro such that parse and evaluate the \"bracket language\" correctly? </p>\n<p>I'm on the nightly if it helps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">mlir</span><span class=\"bp\">-</span><span class=\"n\">verif</span><span class=\"bp\">$</span> <span class=\"bp\">~/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">contrib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">f4759c9a223f</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255484740,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1632953928
    },
    {
        "content": "<p>Your syntax looks like it expects a literal <code>-&gt;</code> but you don't have that in your usage examples</p>",
        "id": 255485971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632954539
    },
    {
        "content": "<p>also you need <code>#print foo</code> instead of <code>print foo</code></p>",
        "id": 255486026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632954568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>  Not sure exactly what you are trying to do, but I think the following example may illustrate may idioms we use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Dyck</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Round</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Dyck</span>\n   <span class=\"bp\">|</span> <span class=\"n\">End</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"End\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n\n<span class=\"c1\">-- auxiliary notation for translating `brack` into `term`</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"fromBrack% \"</span> <span class=\"n\">brack</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"n\">End</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.End</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.Round</span> <span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Remark: after this command `brack` will be a \"reserved\" keyword, and we will have to use `«brack»`</span>\n<span class=\"c1\">-- to reference the `brack` syntax category</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"brack\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"-&gt;\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">brack</span>  <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"o\">:=</span> <span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">brack</span> <span class=\"n\">bar</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span> <span class=\"n\">End</span> <span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def bar : Dyck :=</span>\n<span class=\"cm\">Dyck.End</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">brack</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span> <span class=\"o\">{</span> <span class=\"o\">{</span> <span class=\"n\">End</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : Dyck :=</span>\n<span class=\"cm\">Dyck.Round (Dyck.Round Dyck.End)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 255486790,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632954961
    },
    {
        "content": "<p>Thanks a lot, the example is super helpful! A question: is it possible to learn what the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"n\">End</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.End</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.Round</span> <span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>desugars into? I want to understand how to write everything in terms of the low level <code>macro</code> command, and I'm guessing there's a LEAN option to debug print macro expansions?</p>",
        "id": 255487144,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1632955143
    },
    {
        "content": "<p>the <code>macro</code> command is not low level, and in fact it desugars to <code>syntax</code> + <code>macro_rules</code></p>",
        "id": 255487195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632955180
    },
    {
        "content": "<p><code>macro_rules</code> desugars to a <code>def</code> with certain attributes</p>",
        "id": 255487217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632955200
    },
    {
        "content": "<p>and <code>syntax</code> also desugars to <code>def</code> with attributes</p>",
        "id": 255487278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632955217
    },
    {
        "content": "<p><code>macro</code> is usable in the special case where the corresponding <code>macro_rules</code> has only one alternative</p>",
        "id": 255487472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632955334
    },
    {
        "content": "<blockquote>\n<p>desugars into? I want to understand how to write everything in terms of the low level macro command, and I'm guessing there's a LEAN option to debug print macro expansions?</p>\n</blockquote>\n<p>Everything Mario wrote is correct. You can see the definition that is sent to the Lean kernel by using the option</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"n\">End</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.End</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.Round</span> <span class=\"o\">(</span><span class=\"n\">fromBrack</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 255487496,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632955352
    },
    {
        "content": "<p>If we use the option before the <code>macro</code> command, we will see two definitions: the parser and the macro expansion function.</p>",
        "id": 255487651,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632955459
    }
]