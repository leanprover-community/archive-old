[
    {
        "content": "<p>Does Lean 4 implement some sort of \"functional but in-place\" algorithm? That is the data structures are immutable to the user but they are mutated internally. Apologies if the terminology is not really correct.</p>",
        "id": 223644050,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611323985
    },
    {
        "content": "<p>because from what I've gathered pure functional programming programs can experience some sort of slowdown because of persistent data structures overhead</p>",
        "id": 223644247,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611324078
    },
    {
        "content": "<p>thanks in advance</p>",
        "id": 223644421,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611324133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/functional.20but.20in.20place.20paradigm/near/223644050\">said</a>:</p>\n<blockquote>\n<p>Does Lean 4 implement some sort of \"functional but in-place\" algorithm? That is the data structures are immutable to the user but they are mutated internally. Apologies if the terminology is not really correct.</p>\n</blockquote>\n<p>From what I can gather the terminology \"functional but in-place\" comes from a paper that was built right on top of <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a>, so yes</p>",
        "id": 223644611,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1611324219
    },
    {
        "content": "<p>What does the <span aria-label=\"seedling\" class=\"emoji emoji-1f331\" role=\"img\" title=\"seedling\">:seedling:</span> emoji mean in this context <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 223649171,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611326479
    },
    {
        "content": "<p>Immutable beans?</p>",
        "id": 223649293,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611326529
    },
    {
        "content": "<p>I guess that <code>X</code> planted a seed for <code>Y</code>?</p>",
        "id": 223649295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611326530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/functional.20but.20in.20place.20paradigm/near/223649171\">said</a>:</p>\n<blockquote>\n<p>What does the <span aria-label=\"seedling\" class=\"emoji emoji-1f331\" role=\"img\" title=\"seedling\">:seedling:</span> emoji mean in this context <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>the immutable beans sprouted <span aria-label=\"sprout\" class=\"emoji emoji-1f331\" role=\"img\" title=\"sprout\">:sprout:</span></p>",
        "id": 223658881,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1611330610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/functional.20but.20in.20place.20paradigm/near/223644247\">said</a>:</p>\n<blockquote>\n<p>because from what I've gathered pure functional programming programs can experience some sort of slowdown because of persistent data structures overhead</p>\n</blockquote>\n<p>I don't know the answer for Lean 4, but my understanding of modern data structures is that persistent data structures exactly \"fixed\" this performance problem in practice. I.e. old \"immutable\" data structures are indeed very expensive for copying, but persistent ones bring you terms that look mostly like O(log verygoodthing) for all the operations, and in practice say Clojure, where data structures are persistent, do just fine</p>",
        "id": 223674612,
        "sender_full_name": "Julian Berman",
        "timestamp": 1611337601
    },
    {
        "content": "<p>(In Python I'm a big proponent of \"use persistent data structures over the built in ones\", and anecdotally that doesn't affect performance benchmarks for most real applications I've seen)</p>",
        "id": 223674676,
        "sender_full_name": "Julian Berman",
        "timestamp": 1611337631
    },
    {
        "content": "<p>Yeah looks like lean 4 has PersistentArray, PersistentHashSet...</p>",
        "id": 223675072,
        "sender_full_name": "Julian Berman",
        "timestamp": 1611337806
    },
    {
        "content": "<p>Lean implementations of them too interesting...</p>",
        "id": 223675096,
        "sender_full_name": "Julian Berman",
        "timestamp": 1611337821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> Well, modern persistent data structures are fast when you need persistence!</p>\n<blockquote>\n<p>in practice say Clojure, where data structures are persistent, do just fine</p>\n</blockquote>\n<p>Yeah. Most applications aren't CPU bound, they are usually IO bound. And persistent data structures incur a very small or I'd say negligible overhead for those applications. Defensive copying is the root of most performance problems for these types of apps.</p>\n<blockquote>\n<p>that look mostly like O(log verygoodthing)</p>\n</blockquote>\n<p>Yeah, for HAMTs it's like 6 steps for every lookup/mutate operation when there are like 2 to the 64 elements.</p>\n<p>As a (retired) competitive programmer, I can implement a persistent binary tree in 7 minutes. Because I'm trained to do that. The easiest way to implement persistence is refcounting everything, and I'd imagine that it'd be easier in a functional programming language. There are more crafty approaches, I read somewhere on the internet that an array can be made persistent in a way that operations cost O(log log n) time. That's pretty close to constant time.</p>\n<p>But asymptotic time complexity is not everything. After all, you need a computer to execute an algorithm, an algorithm can't run itself. Persistence means a lot of pointer chasing, cache line fills and whatnot, and when it comes to compute-heavy programs the slowdown can be fatal. Programming competitions usually limit program runtime to something like 1 second or even one fifth of a second. Performance is critical. Every nanosecond counts. Abusing 64 bit integers can lead to TLE (time limit exceeded). If you make too many syscalls, you can get TLE too. Because the sandbox checks every syscall to make sure the syscalls won't do something wonky to the judging servers. And using STL binary trees (map and set) can inflate program runtime tenfold <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> Or even two orders of magnitude if you happen to be unlucky. Avoiding cache line fills is really important.</p>\n<p>There are circumstances where performance is really critical and mandatory persistence is pretty much inappropriate.</p>\n<p>Anyway, it's nice to hear that Lean 4 does optimize copying into in-place mutation.</p>",
        "id": 223724836,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611366449
    }
]