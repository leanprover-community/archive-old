[
    {
        "content": "<p>I decided to try to implement the <code>assume</code> syntax in Lean 4.  The following seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But it has one unfortunate feature: it requires a comma after the assumption.  This seems inconsistent with the syntax used in other situations--for example, <code>have</code> and <code>suffices</code> don't require commas.  So is there a way to get rid of the comma?  Simply leaving it out of the syntax and macro_rules doesn't seem to work, but I'm not sure why.  (Does Lean have trouble parsing two terms in a row with no delimiter between them?)</p>",
        "id": 286528112,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655491352
    },
    {
        "content": "<blockquote>\n<p>Does Lean have trouble parsing two terms in a row with no delimiter between them?</p>\n</blockquote>\n<p>Yes, <code>foo bar</code> is parsed as a function application. If you know something specific about the first term, e.g. that it's just one identifier you could write <code>ident term</code> and that should parse as two things (I think), but in general <code>term term</code> is not going to work.</p>",
        "id": 286528351,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1655491487
    },
    {
        "content": "<p>That makes sense.  But then how do <code>have</code> and <code>suffices</code> get parsed with no delimiter at the end?</p>",
        "id": 286528653,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655491663
    },
    {
        "content": "<p>it's not that they have no delimiter, the delimiter is allowed to be newline</p>",
        "id": 286528813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655491765
    },
    {
        "content": "<p>So can I require newline as a delimiter in my syntax?  How do I do that?</p>",
        "id": 286528975,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655491854
    },
    {
        "content": "<p>actually, the way <code>have</code> does it is using <code>withPosition</code></p>",
        "id": 286529139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655491933
    },
    {
        "content": "<p>I'm not familiar with <code>withPosition</code>.  Where do I learn about that?</p>",
        "id": 286529242,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655491986
    },
    {
        "content": "<p>This almost works, except that the last one probably shouldn't be accepted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\", \"</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\", \"</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[,]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[,]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 286529830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655492293
    },
    {
        "content": "<p>The API is still missing documentation, but <a href=\"#narrow/stream/270676-lean4/topic/using.20indentation.20to.20resolve.20syntactic.20ambiguity/near/275935580\">this thread</a> helped me with <code>withPosition</code></p>",
        "id": 286529871,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1655492318
    },
    {
        "content": "<p>Here's a version using the new <code>checkLinebreakBefore</code> combinator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.commaOrLinebreak</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">checkLinebreakBefore</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pushNone</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"n\">Lean.Parser.commaOrLinebreak</span><span class=\"o\">)</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"n\">Lean.Parser.commaOrLinebreak</span><span class=\"o\">)</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span>\n      <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span>\n      <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n       <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 286531047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655492907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You can also use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\", \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">linebreak</span><span class=\"o\">))</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\", \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">linebreak</span><span class=\"o\">))</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 286531562,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655493181
    },
    {
        "content": "<p>ah, I was just about to suggest the addition of such a <code>linebreak</code></p>",
        "id": 286531623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655493211
    },
    {
        "content": "<p>You also don't need the extra rules. The following is sufficient.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286531729,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655493258
    },
    {
        "content": "<p>We don't have good documentation for this yet, but Sebastian's PR <a href=\"https://github.com/leanprover/lean4/pull/1226\">https://github.com/leanprover/lean4/pull/1226</a> has several relevant remarks.</p>",
        "id": 286531927,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655493373
    },
    {
        "content": "<p>When using <code>linebreak</code> instead of my hand-rolled version, I'm getting some weird parse results on the ones that use the line break</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\", \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">linebreak</span><span class=\"o\">))</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"assume\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\", \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">linebreak</span><span class=\"o\">))</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n       <span class=\"n\">x</span> <span class=\"c1\">-- x is colored like text</span>\n<span class=\"c1\">-- fun x =&gt; sorryAx (?m.1038 x) true : (x : Nat) → ?m.1038 x</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n       <span class=\"n\">x</span>  <span class=\"c1\">-- x is colored like a variable</span>\n<span class=\"c1\">-- fun x =&gt; x : Nat → Nat</span>\n</code></pre></div>",
        "id": 286532018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655493440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for reporting. I will investigate it.</p>",
        "id": 286532268,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655493592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286531729\">said</a>:</p>\n<blockquote>\n<p>You also don't need the extra rules. The following is sufficient.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n</blockquote>\n<p>How does this work? Is this something in <code>linebreak</code> that causes it to produce a comma, or some magic in the pattern matcher?</p>",
        "id": 286532360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655493626
    },
    {
        "content": "<p>Sebastian wrote about this here: <a href=\"https://github.com/leanprover/lean4/pull/1226#discussion_r899029212\">https://github.com/leanprover/lean4/pull/1226#discussion_r899029212</a></p>",
        "id": 286532513,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655493725
    },
    {
        "content": "<p>The remark also makes it clear what is missing in the example above. The <code>linebreak</code> parser is not adding the <code>pushNone</code></p>",
        "id": 286532694,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655493839
    },
    {
        "content": "<p><code>group(linebreak)</code> should work</p>",
        "id": 286533673,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655494441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286533673\">said</a>:</p>\n<blockquote>\n<p><code>group(linebreak)</code> should work</p>\n</blockquote>\n<p>Yes, it should, but it looks too bizarre. I was writing a PR that changes the semantics of <code>linebreak</code> to include <code>pushNone</code>.</p>",
        "id": 286533821,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655494508
    },
    {
        "content": "<p>It feels like parsers such as <code>(\", \" &lt;|&gt; linebreak)</code> will be heavily used from now on when defining syntax such as <code>assume</code>.</p>",
        "id": 286533971,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655494591
    },
    {
        "content": "<p>And that's not the only caveat. <code>linebreak linebreak</code> does not check for two linebreaks.</p>",
        "id": 286534126,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655494697
    },
    {
        "content": "<p>Not sure if there are any macros out there that depend on <code>ws</code> being nullary</p>",
        "id": 286534256,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655494800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286534126\">said</a>:</p>\n<blockquote>\n<p>And that's not the only caveat. <code>linebreak linebreak</code> does not check for two linebreaks.</p>\n</blockquote>\n<p>Yes, this is not nice :( Another item for <a href=\"https://github.com/leanprover/lean4/issues/638\">https://github.com/leanprover/lean4/issues/638</a>?</p>",
        "id": 286534397,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655494884
    },
    {
        "content": "<p>For the <code>(\", \" &lt;|&gt; linebreak)</code> case, perhaps <code>orLinebreak(\", \")</code> is better to combine the pushNone behavior with the delimiter</p>",
        "id": 286535404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655495557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286534126\">said</a>:</p>\n<blockquote>\n<p>And that's not the only caveat. <code>linebreak linebreak</code> does not check for two linebreaks.</p>\n</blockquote>\n<p>If we wanted to fix this, we may want to generate an empty token after all</p>",
        "id": 286535558,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655495668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286534126\">said</a>:</p>\n<blockquote>\n<p>And that's not the only caveat. <code>linebreak linebreak</code> does not check for two linebreaks.</p>\n</blockquote>\n<p>I'm kind of okay with the current behavior, perhaps it just needs a clearer name like <code>checkLinebreakBefore</code></p>",
        "id": 286535579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655495688
    },
    {
        "content": "<p>alternatively, it could take an optional parameter like <code>linebreak(2)</code> to check for 2 linebreaks in the previous whitespace</p>",
        "id": 286535763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655495787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286533821\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20syntax/near/286533673\">said</a>:</p>\n<blockquote>\n<p><code>group(linebreak)</code> should work</p>\n</blockquote>\n<p>Yes, it should, but it looks too bizarre</p>\n</blockquote>\n<p>Let's fix this properly, once and for all <a href=\"https://github.com/leanprover/lean4/pull/1229\">https://github.com/leanprover/lean4/pull/1229</a></p>",
        "id": 286649202,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655555543
    }
]