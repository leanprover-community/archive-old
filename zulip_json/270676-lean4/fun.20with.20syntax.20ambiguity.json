[
    {
        "content": "<p>I don't know if we can/should do anything about this, but it's amusing to me to see how type ascription, implication and the new \"dependent implication\" syntax interact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- Nat → Prop : Type</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- Type → Prop : Type 1</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- Type → Prop : Type 1</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- Prop → Prop : Type</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- Nat → Prop : Type</span>\n</code></pre></div>",
        "id": 224796197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612216115
    },
    {
        "content": "<p>Looks perfectly reasonable to me <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 224796512,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612216258
    },
    {
        "content": "<p>also:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- Type → Type → Prop : Type 1</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">id</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- id Nat → Prop : Type</span>\n</code></pre></div>",
        "id": 224796758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612216376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't see any surprises above. Note that <code>Prop</code> is not an identifier, but a keyword. </p>\n<p>Disclaimer: the \"dependent implication\" notation is off-limits, I love it and we use it all the time :)</p>\n<p>We could try to change the type ascription notation. David Christiansen told me they use <code>the &lt;type&gt; &lt;expr&gt;</code> in Idris, where <code>the</code> is just our <code>id</code> where the type is an explicit argument. I think Agda uses <code>&lt;type&gt; ∋ &lt;expr&gt;</code>, but this is probably not a good match for mathlib :)</p>",
        "id": 224804064,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612219186
    },
    {
        "content": "<p>I think I'll get along just fine with the new notation; with the lack of initial symbol it's a little bit of a <a href=\"https://en.wikipedia.org/wiki/Garden-path_sentence\">garden path</a> notation but I don't think it's too big of a deal. I don't know whether we should learn to love this notation or find a way to change it to <code>∀</code> for actual for-all statements in mathematics like <code>∀ x : Nat, ∃ p : Prime, p &gt; x</code> though.</p>",
        "id": 224808629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612222130
    },
    {
        "content": "<p>currently that pretty prints as <code>(x : Nat) → Exists fun (p : Prime) =&gt; p &gt; x : Prop</code> btw, so I'm sure we'll be adding delaborator extensions in the mathlib prelude for this</p>",
        "id": 224808948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612222297
    },
    {
        "content": "<p>We can add a flag for pretty-printing \"dependent implication\" using <code>∀</code>.<br>\nThe delaborator for <code>Exists</code> and <code>Subtype</code> are missing right now, but they will be added soon.</p>",
        "id": 224811056,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612223533
    },
    {
        "content": "<p>In lean 3, there was an automatic switch between <code>\\forall</code> and <code>\\Pi</code> depending on the universe. Would something like that be acceptable here, where the prop version is <code>\\forall (x : A), B x</code> and the type version is <code>(x : A) -&gt; B x</code>?</p>",
        "id": 224811257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612223726
    },
    {
        "content": "<blockquote>\n<p>Mario Carneiro: In lean 3, there was an automatic switch between \\forall and \\Pi depending on the universe. Would something like that be acceptable here, where the prop version is \\forall (x : A), B x and the type version is (x : A) -&gt; B x?</p>\n</blockquote>\n<p>Yes, this is reasonable.</p>",
        "id": 224812546,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612224481
    },
    {
        "content": "<p>The docs claim the old sigma notation is still legal</p>",
        "id": 224813174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612224952
    },
    {
        "content": "<p>the example <code>∀ x : Nat, ∃ p : Prime, p &gt; x</code> parses in lean 4 today, so it looks like that has not changed</p>",
        "id": 224813266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612224998
    },
    {
        "content": "<p>it's just the pretty printing that is not supported yet</p>",
        "id": 224813278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612225012
    },
    {
        "content": "<p>However <code>Sigma</code>'s notation has also changed, to <code>(x : A) × B x</code> (which makes good sense to me)</p>",
        "id": 224813388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612225090
    },
    {
        "content": "<p><code>PSigma</code>, <code>Subtype</code> and <code>Exists</code> all have no pretty printing notation, but <code>{x // p x}</code> and <code> ∃ x, p x</code> work as parser input. (<code>PSigma</code> doesn't have any parser notation, although I'm not particularly fussed about losing <code>Σ'</code>. We could do <code>(x : A) ×' B x</code> if we want something similar)</p>",
        "id": 224813769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612225348
    },
    {
        "content": "<p>is mathlib compatible with lean4?</p>",
        "id": 224827326,
        "sender_full_name": "Nasos Evangelou-Oost",
        "timestamp": 1612239675
    },
    {
        "content": "<p>Not yet but it will eventually. Also this is offtopic for this thread. Create a new one.</p>",
        "id": 224827441,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612239793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"386149\">@Nasos Evangelou-Oost</span> tag to get your attention</p>",
        "id": 224827446,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1612239821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/fun.20with.20syntax.20ambiguity/near/224813174\">said</a>:</p>\n<blockquote>\n<p>Only tangentially related to this thread, but if commas are no longer used to introduce binders in functions, is the intent to also avoid them in unions/sums/existential notation, all of which are syntactic sugar for a function?</p>\n</blockquote>\n<p>Taking <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum\">docs#tsum</a> as an example, it seems odd to require <code>=&gt;</code> in <code>tsum $ λ i =&gt; f i</code> yet use a comma in <code>∑' i, f i</code> (c.f. lean 3's <code>tsum $ λ i, f i</code>, where <code>∑'</code> can be read as a shorthand for <code>tsum $ λ</code>). We could make these consistent by making the lean4 notation for <code>tsum</code> <code>∑' i =&gt; f i</code>, but I suspect that would be unpopular.</p>",
        "id": 224853696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612262324
    }
]