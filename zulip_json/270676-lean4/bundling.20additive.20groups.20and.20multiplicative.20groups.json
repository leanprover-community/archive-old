[
    {
        "content": "<p>I'm porting to_additive for mathlib4. The to_additive algorithm is complicated, and it seems like it is doing a lot because <code>add_group</code> and <code>group</code> are essentially part of completely separate class hierarchies and just coincidentally prove the same thing with different symbols. <br>\nI was wondering what the motivation was for having different classes in the first place. If I was coming to the problem for the first time I would attempt a bundled approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"bp\">...</span> <span class=\"kd\">axioms</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulGroup</span> <span class=\"n\">α</span> <span class=\"kd\">extends</span> <span class=\"n\">HasMul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasInv</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasOne</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Group</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"n\">α</span> <span class=\"kd\">extends</span> <span class=\"n\">HasAdd</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasNeg</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasZero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Group</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- define syntax for ∙ ~ e somewhere here</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span> <span class=\"bp\">∙</span> <span class=\"bp\">~</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_mul_mul_inv</span> <span class=\"o\">:</span> <span class=\"bp\">~</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∙</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">~</span><span class=\"n\">y</span> <span class=\"bp\">∙</span> <span class=\"bp\">~</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">...</span> <span class=\"n\">proof</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_mul_inv</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The main problem seems to me that you need higher order unification to spot that inv_mul_mul_inv would apply to the example. I wonder whether it would be possible to get around this with heuristics, most of the time you are matching <code>∙</code> on <code>+</code> or <code>*</code> or maybe <code>∘</code>. Are there any other reasons why the above bundling approach was not used?<br>\nI was wondering because it might be that the reasons are less compelling in Lean 4 and the design might be worth a revisit.</p>\n<p>I know that Lean very rarely has bundled classes, but I think I missed the memo explaining why bundling is a bad idea.</p>",
        "id": 275993131,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647818434
    },
    {
        "content": "<p>The following link should be relevant for this discussion <a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures#encoding-the-algebraic-hierarchy-1\">https://github.com/leanprover/lean/wiki/Refactoring-structures#encoding-the-algebraic-hierarchy-1</a></p>",
        "id": 275993271,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647818667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> The plan in the link above never moved forward. I think the general consensus was that it would take a lot of energy to refactor the library, and it was not clear whether we would hit performance problems or other unforeseen issues.</p>",
        "id": 275993363,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647818875
    },
    {
        "content": "<p>I see thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 275993487,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647819078
    }
]