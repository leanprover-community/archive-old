[
    {
        "content": "<p>I'd like to overload the inbuilt <code>true</code> in a custom context of mine. As an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- see how we can use bool both in custom syntax</span>\n<span class=\"c1\">-- and in \"regular\" Lean syntax</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"true\"</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[foo|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"true\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succeeds</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fails</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"c1\">-- &lt; ERROR: \"expected term\"</span>\n</code></pre></div>\n<p>I'd like <code>fails</code> to <em>not fail</em>. That is, I'd like the context to disambiguate if I'm taking about <code>true</code>that lives in the syntax category <code>foo</code> or in the Lean builtin category <code>term</code>.</p>",
        "id": 277180315,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1648661658
    },
    {
        "content": "<p>A quick <code>grep</code> led me to two potential ways of doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Parser</span><span class=\"bp\">/</span><span class=\"n\">Command.lean</span>\n<span class=\"mi\">115</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">optionValue</span> <span class=\"o\">:=</span> <span class=\"n\">nonReservedSymbol</span> <span class=\"s2\">\"true\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">nonReservedSymbol</span> <span class=\"s2\">\"false\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">numLit</span>\n\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Parser</span><span class=\"bp\">/</span><span class=\"n\">Term.lean</span>\n<span class=\"mi\">149</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">trueVal</span>  <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">nonReservedSymbol</span> <span class=\"s2\">\"true\"</span>\n</code></pre></div>\n<p>but I'm unsure how to use <code>nonReservedSymbol</code> to achieve what I want.</p>",
        "id": 277181860,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1648662402
    },
    {
        "content": "<p><code>syntax &amp;\"true\" : foo</code> should be what you need. What happens here is that your syntax decl makes <code>true</code> into a keyword, so it doesn't get parsed as the identifier <code>Bool.true</code> any more. You might also need <code>declare_syntax_cat foo (leading_ident_behavior := symbol)</code>.</p>",
        "id": 277183166,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1648663030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> We currently have a single token table in Lean. It is on our TODO list to have a separate table per syntax category, and rules for propagating reserved symbols between them. In the meantime, you can use the following workaround.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[foo|\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"true\"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"false\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">]</span>   <span class=\"c1\">-- \"true\"</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">]</span>  <span class=\"c1\">-- \"false\"</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"n\">bla</span><span class=\"o\">]</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 277183717,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648663232
    },
    {
        "content": "<p>Thank you for the perspective (that it's a TODO item). The idea of claiming to parse all identifiers and then selectively only parsing <code>true</code> and <code>false</code>, choosing to throw an error on the others is nice :)</p>",
        "id": 277185412,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1648664026
    }
]