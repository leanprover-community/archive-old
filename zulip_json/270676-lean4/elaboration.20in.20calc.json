[
    {
        "content": "<p>I am cross-posting a <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20blocks.20and.20heterogeneous.20operators\">question</a> of <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> from the <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> stream.  Does <code>calc</code> elaborate differently (and arguably \"worse\") in later lines than in the first line?  Consider the following examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- good error message</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- bad error message</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- bad error message</span>\n</code></pre></div>",
        "id": 321728389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673909173
    },
    {
        "content": "<p>In all these examples <code>2 ^ n</code> fails to typecheck, because there's no <code>HPow Nat Nat Int</code> instance in core Lean.  But the error messages are different.  In the first case (with the expression in the first line of the calc) we get the useful error message</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance\n  HPow Nat Nat Int\n</code></pre></div>\n<p>whereas in the other cases (with the expression in later lines of the calc) we get a perplexing error message</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid 'calc' step, left-hand-side is\n  ?m.381 : Nat\nprevious right-hand-side is\n  37 : Int\n</code></pre></div>\n<p>Would it be possible to change elaboration so that the good error message appears in all cases?</p>",
        "id": 321728398,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673909178
    },
    {
        "content": "<p>It seems unlikely with the typeclass based approaches to calc, since each equation is elaborated separately and they are combined by <code>Trans</code>. The issue is that <code>_ = 2 ^ n</code> on its own typechecks, as an equality in <code>Nat</code></p>",
        "id": 321732522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912164
    },
    {
        "content": "<p>Something has changed here since Lean 3, right?  In Lean 3 I get the same error message on both these two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fail</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fail</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 321734450,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673913714
    },
    {
        "content": "<p>Lean 4 calc is a complete reimplementation. It looks like we should replace the <code>_</code> with an mvar of the previous type before elaboration.</p>",
        "id": 321788021,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673948305
    },
    {
        "content": "<p>That would be great as far as I'm concerned.  I opened an issue <a href=\"https://github.com/leanprover/lean4/pull/2040\">lean4#2040</a> to record the suggestion.</p>",
        "id": 321880632,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673975270
    }
]