[
    {
        "content": "<p>What would be the idiomatic/ideal way of dealing with memory issues (where I'm running out of memory) in Lean4? I.e. if I know where I can serialize and store to disk some of my computation, is there a nice way to do this? Or perhaps phrase differently, how much does it involve me weaving IO into everything and defining a bunch of <code>toByteArray</code> functions manually?</p>",
        "id": 288540009,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657032142
    },
    {
        "content": "<p>It would definitely involve weaving IO around everywhere, at least without substantial hacks <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>RE: serialization, we could definitely derive serializations for most types. that would actually be a quite useful library, if you don't want to build it I might</p>\n<p>RE: weaving IO around everything, what I would personally do is set up your computation to be parameterized by the disk-saved values it needs. then you can do all the IO to save partial results to disk, open files, etc. in one top-level function, instead of having to pass IO around everywhere</p>",
        "id": 288805984,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657200571
    },
    {
        "content": "<p>(out of curiosity, what are you doing that's so memory intensive?)</p>",
        "id": 288806012,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657200589
    },
    {
        "content": "<p>I feared something like that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> that's a cool suggestion (parametrizing the computation). I've never looked into the code that does the derivation of instances, but that sounds like it would be a fun thing to try. I'd be happy to team up on building that library <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>  :)</p>",
        "id": 288853715,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657221814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Dealing.20with.20large.20computation.20.28memory.29/near/288806012\">said</a>:</p>\n<blockquote>\n<p>(out of curiosity, what are you doing that's so memory intensive?)</p>\n</blockquote>\n<p>It's basically an exhaustive search over a transition system (operational semantics) to check wether some behaviors are possible</p>",
        "id": 288853859,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657221870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Dealing.20with.20large.20computation.20.28memory.29/near/288853715\">said</a>:</p>\n<blockquote>\n<p>I feared something like that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> that's a cool suggestion (parametrizing the computation). I've never looked into the code that does the derivation of instances, but that sounds like it would be a fun thing to try. I'd be happy to team up on building that library <span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span>  :)</p>\n</blockquote>\n<p>ooh! I would also be up for that :) I'll have time this weekend/next week. shall I make a repo?</p>",
        "id": 288878067,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657235649
    },
    {
        "content": "<p>sounds good! I could also give it a shot later today/this weekend</p>",
        "id": 288909578,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657267174
    },
    {
        "content": "<p>Lean has internal serialization (and zero-cost mmap deserialization) routines that can handle any Lean value except for closures and external types. This is used for .olean files, but not currently exposed as a general Lean API.</p>",
        "id": 288912144,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657269088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> that sounds pretty useful! Do you think it would make sense for <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> and me to try to derive <code>Hashable</code> instances using that, or does that mean we should wait until these routines are exposed as a general Lean API?</p>",
        "id": 288925006,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657277818
    },
    {
        "content": "<p>Wait, where did <code>Hashable</code> come in from now?</p>",
        "id": 288925635,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657278266
    },
    {
        "content": "<p>(I presume Andres meant a Serializable typeclass)</p>",
        "id": 288927481,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657279630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> if I understand correctly, the internal serialization is just copying the Lean ABI representation of the value? (with some sort of special handling to ensure the reference counts are correct?)</p>\n<p>The only issue with the ABI encoding is space efficiency. A serialization routine that optimizes better for space would be useful for network applications, but I am guessing the internal serialization would be fine for <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> 's application</p>",
        "id": 288928316,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657280194
    },
    {
        "content": "<p>Yeah, specialized encodings could be much more space-efficient. And the internal serialization might require non-trivial work before it could be exposed as a general API. For example, the serialized objects do not contain reference counts at all, so there is no safe way to free them.</p>",
        "id": 288929067,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657280698
    },
    {
        "content": "<p>Ah, I see... Okay, then it won't take us too long to put together something workable for now</p>",
        "id": 288931821,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1657282535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Dealing.20with.20large.20computation.20.28memory.29/near/288925635\">said</a>:</p>\n<blockquote>\n<p>Wait, where did <code>Hashable</code> come in from now?</p>\n</blockquote>\n<p>oh sorry, that was a lapsus, I meant something like <code>Serializable</code> or <code>ToByteArray</code></p>",
        "id": 288947201,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657290349
    }
]