[
    {
        "content": "<p>The core <code>Stream</code> class is intended to be usable in monadic code, but the return type of <code>Stream.next?</code> looks incorrect to me. Right now it returns <code>Option (value × stream)</code> but it should return <code>Option value × stream</code>. The idea is that <code>next?</code> could have side-effects even if there is no output, so it should update the stream state. For example, if a stream processes data from another input stream, it receives some data from the input but not enough to produce an output, returning <code>none</code> simply loses the partial data.</p>\n<p>Is there a better stream class elsewhere? Or is this a defect with the current <code>Stream</code> class?</p>",
        "id": 321721593,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673905277
    },
    {
        "content": "<p>I think the class is okay as is. If a stream has a \"partial-next\" then I think it is difficult to describe what the output type of that partial result is, and it is better to just have a special (non-typeclass) method on the object to express that.</p>",
        "id": 321725005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673907203
    },
    {
        "content": "<p>I thought the idea of making <code>Stream</code> a class was to keep it lightweight but still usable in monadic code. There are definitely many monadic <code>StreamM</code> and even <code>StreamT</code> options, but that's what I'm trying to avoid. (Am I falling into an anti-pattern?)</p>\n<p>Since <code>Stream</code> is a pure class, <code>Stream.next?</code> can't have side-effects  on its own and so any \"partial-next\" would have to be stored in the stream state. It's the job of the user to work with the enclosing monad to keep track of the state change.</p>\n<p>My use case is with unicode normalization where it makes perfect sense to gradually process a string, especially inside monadic code like inside <code>IO</code>, but it makes little sense to add a layer the monad stack just for that.</p>",
        "id": 321727980,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673908948
    },
    {
        "content": "<p>Note that <code>Stream</code> is used by <code>do</code> notation, so its type is partially affected by the use case there</p>",
        "id": 321732121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673911809
    },
    {
        "content": "<p>What I'm saying is that you could have a <code>UnicodeStream.partialNext? : UnicodeStream -&gt; Except PartialChar (Char × UnicodeStream)</code> and then wrap that for the typeclass <code>next?</code> operation</p>",
        "id": 321732255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673911925
    },
    {
        "content": "<p>Yes, it's embedded really deep! I'm toying with the idea of adding a <code>Std.Stream</code> class but I'm not sure, that's why I'm asking.</p>",
        "id": 321732273,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673911950
    },
    {
        "content": "<p>(Out of order reply) That makes sense but there's lots of normalizations and intermediate steps, each of which has their own <code>PartialChar</code> type. Some of these are internal where it doesn't matter, but some are user facing. There's also the issue when the input reaches a hard ending but the last character hasn't been output yet...</p>",
        "id": 321732563,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912210
    },
    {
        "content": "<p>I thought the last thing was what <code>PartialChar</code> was</p>",
        "id": 321732670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912287
    },
    {
        "content": "<p>If you run out of the current buffer but you aren't at the actual end, you shouldn't be returning <code>none</code></p>",
        "id": 321732695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912322
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 321732708,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912342
    },
    {
        "content": "<p>I'm not even sure you should be using a stream for that</p>",
        "id": 321732714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912347
    },
    {
        "content": "<p>That's why I asked for another option.</p>",
        "id": 321732727,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912368
    },
    {
        "content": "<p>the return value can be a sum type representing the possible completions, e.g. \"need more input\", \"invalid UTF8\", \"input ended with partial char\", \"complete char\"</p>",
        "id": 321732808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912427
    },
    {
        "content": "<p>There's no need for that complexity.</p>",
        "id": 321732863,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912463
    },
    {
        "content": "<p>if you want to make a state machine for utf8 then that's roughly what you would need to have internally</p>",
        "id": 321732889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912488
    },
    {
        "content": "<p>Normalization works with code points, not utf8 specifically.</p>",
        "id": 321732973,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912535
    },
    {
        "content": "<p>I'm not sure I would expose any of it to the user except for a basic stream of chars</p>",
        "id": 321733004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912556
    },
    {
        "content": "<p>normalization has similar characteristics to utf8 chars in this regard I think</p>",
        "id": 321733045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912593
    },
    {
        "content": "<p>The Unicode standard recommends it (and I recommend it too!)</p>",
        "id": 321733052,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912601
    },
    {
        "content": "<p>why should the user need to care about it?</p>",
        "id": 321733080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912632
    },
    {
        "content": "<p>utf8 is a specific encoding of Unicode characters. It has nothing to do with what I care about.</p>",
        "id": 321733146,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912662
    },
    {
        "content": "<p>sure, my point is only that normalization involves looking at some units and merging them together</p>",
        "id": 321733188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912702
    },
    {
        "content": "<p>so if you are in a streaming context then you have to remember whether you are mid-merge</p>",
        "id": 321733204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912717
    },
    {
        "content": "<p>It's about accented characters and their many equivalent representations as actual <code>String</code> type.</p>",
        "id": 321733215,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912723
    },
    {
        "content": "<p>Obviously it's going to be a lot simpler to do normalization as a bulk operation</p>",
        "id": 321733294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912764
    },
    {
        "content": "<p>What bulk?</p>",
        "id": 321733329,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912804
    },
    {
        "content": "<p>the string</p>",
        "id": 321733333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912810
    },
    {
        "content": "<p>input: unnormalized string, output: normalized string</p>",
        "id": 321733350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912835
    },
    {
        "content": "<p>simple type, hard to misuse</p>",
        "id": 321733365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673912845
    },
    {
        "content": "<p>Yes, but you're thinking of normalization is a one-step procedure. It's not, there's several normalization types and steps and the intermediate steps have their own uses, so it's optimal to process as a stream, piggy backing each step to achieve linear-ish processing.</p>",
        "id": 321733539,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673912992
    },
    {
        "content": "<p>The stream type I originally described is perfect for this.</p>",
        "id": 321733650,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673913087
    },
    {
        "content": "<blockquote>\n<p>Yes, but you're thinking of normalization is a one-step procedure. It's not, there's several normalization types and steps and the intermediate steps have their own uses, so it's optimal to process as a stream, piggy backing each step to achieve linear-ish processing.</p>\n</blockquote>\n<p>From a user standpoint, it is simpler to <em>present</em> it as a one-step procedure. Anything more than that is decidedly advanced usage</p>",
        "id": 321733738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913183
    },
    {
        "content": "<p>Moreover, I'm fairly certain that layering a bunch of option functions processing characters will result in a slower code than a bunch of passes over the data. You should benchmark the options first</p>",
        "id": 321733871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913309
    },
    {
        "content": "<p>Yes, but as I said before, the Unicode standard recommends exposing some (but not all) intermediate steps to allow users to implement optimizations (e.g. locale-specific optimizations).</p>",
        "id": 321733885,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673913322
    },
    {
        "content": "<p>anyway, you don't need a stream typeclass to do what you want. Just have functions that return whatever you find preferable</p>",
        "id": 321734030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class/near/321733871\">said</a>:</p>\n<blockquote>\n<p>Moreover, I'm fairly certain that layering a bunch of option functions processing characters will result in a slower code than a bunch of passes over the data. You should benchmark the options first</p>\n</blockquote>\n<p>I thought so too but no, the most efficient way is to skip characters where the transformation stack would be useless (there's always a table for that) and only apply the transformations when necessary. So the optimizations are always handled in the earliest transformation step. This is built-into the standard and annexes.</p>",
        "id": 321734283,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673913605
    },
    {
        "content": "<p>I'm thinking more about the cost of the operations themselves in lean's runtime rather than the algorithmic cost. Again, benchmarking is key</p>",
        "id": 321734600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class/near/321734030\">said</a>:</p>\n<blockquote>\n<p>anyway, you don't need a stream typeclass to do what you want. Just have functions that return whatever you find preferable</p>\n</blockquote>\n<p>Yes, it's easy to implement a <code>Unicode.Stream</code> class that does the right thing. Which brings me back to my original question:  Is there a better steam class elsewhere?</p>",
        "id": 321734666,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673913856
    },
    {
        "content": "<p>I don't think you need a class at all</p>",
        "id": 321734686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913890
    },
    {
        "content": "<p>just plain functions</p>",
        "id": 321734691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913901
    },
    {
        "content": "<p>I'm not ready to generalize from this example to a typeclass with a big API</p>",
        "id": 321734738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673913947
    },
    {
        "content": "<p>What big API? There's just one function!?</p>",
        "id": 321734805,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673913981
    },
    {
        "content": "<p>If the one function is all you want, then why bother with a class?</p>",
        "id": 321735664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673914724
    },
    {
        "content": "<p>I think we're running in circles here.</p>\n<ul>\n<li>I want to use a class because (1) a unified interface is useful (2) it's reused in the codebase a lot and (3) there are user facing applications. (The last point is why I'm asking about existing options.)</li>\n<li>I don't want to use a monad or anything heavyweight or too specialized because the API has only one nontrivial function (which is exactly the same signature in all use cases, but different implementations). </li>\n<li>It's only a tiny variation of an existing class. (Which is baked hard in core, so hard to change.)</li>\n</ul>",
        "id": 321737272,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673915933
    },
    {
        "content": "<p>In that case you should make your own class and test it out</p>",
        "id": 321739592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673917613
    },
    {
        "content": "<p>I did and it works fine! I wouldn't have asked this without testing it out first!</p>\n<p>If there are no existing alternatives that meet my needs, then the second question still stands: is this a defect in the core <code>Stream</code> class? Or is it really intended as a \"fused stream\"?</p>",
        "id": 321739951,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673917905
    },
    {
        "content": "<p>(That's \"fused\" as in \"fuse box\", once it blows you have to replace it.)</p>",
        "id": 321740215,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673918111
    },
    {
        "content": "<p>It is clearly a fused stream</p>",
        "id": 321743552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673921157
    },
    {
        "content": "<p>(which is a very useful class for representing iteration, since it has a clear indication of the end of iteration)</p>",
        "id": 321751531,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673928918
    },
    {
        "content": "<p>I suspect eventually we'll have a library of classes for expressing transformer pipelines, but like Mario said it feels super unclear what that should look like without examples.</p>\n<p>I'm not sure I followed the Unicode example, but if you have the code pushed to a repository somewhere I'm interested in taking a look :D</p>",
        "id": 321751672,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673929081
    },
    {
        "content": "<p>I didn't know this was allowed in e.g. Rust, but it still sounds crazy to me. Would be interesting to know how much they rely on it.</p>\n<blockquote>\n<p>Individual iterator implementations may choose to resume iteration, and so calling next() again may or may not eventually start returning Some(Item) again at some point. <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next</a></p>\n</blockquote>",
        "id": 321785580,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673947477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>  This is the basic code I am using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Stream class appropriate for monadic use. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">MStream</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Attempt to get the next item -/</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MStream</span> <span class=\"n\">σ</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">Stream.next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `ForIn` for `MStream` -/</span>\n<span class=\"kn\">protected</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">MStream.forIn</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MStream</span> <span class=\"n\">ρ</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pure</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">visit</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ForInStep.done</span> <span class=\"n\">b</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ForInStep.yield</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">visit</span> <span class=\"n\">s</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">b</span>\n    <span class=\"n\">return</span> <span class=\"n\">b</span>\n  <span class=\"n\">visit</span> <span class=\"n\">s</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MStream</span> <span class=\"n\">ρ</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">forIn</span> <span class=\"o\">:=</span> <span class=\"n\">MStream.forIn</span>\n</code></pre></div>\n<p>The monad <code>m</code> parameter would also be helpful addition to core <code>Stream</code>. As far as I can tell, these two instances are impossible with the current <code>Stream</code> class.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- IO.FS.Stream as a byte stream -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MStream</span> <span class=\"n\">IO.FS.Stream</span> <span class=\"n\">IO</span> <span class=\"n\">UInt8</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">bs</span> <span class=\"bp\">←</span> <span class=\"n\">s.read</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bs.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bs.get</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- IO.FS.Stream as a line stream -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MStream</span> <span class=\"n\">IO.FS.Stream</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ln</span> <span class=\"bp\">←</span> <span class=\"n\">s.getLine</span>\n    <span class=\"k\">if</span> <span class=\"n\">ln.isEmpty</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ln.dropRightWhile</span> <span class=\"o\">(</span><span class=\"bp\">·==</span><span class=\"sc\">'\\n'</span><span class=\"o\">),</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Rust gave me the idea to use the different signature.</p>",
        "id": 321821100,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673959390
    },
    {
        "content": "<p>One small advantage of using <code>Option α × σ</code> over <code>Option (α × σ)</code> is to avoid partial defs. For example: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">LineStreamOfCharStream</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"n\">σ</span>\n  <span class=\"n\">buffer</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MStream</span> <span class=\"n\">σ</span> <span class=\"n\">m</span> <span class=\"n\">Char</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MStream</span> <span class=\"o\">(</span><span class=\"n\">LineStreamOfCharStream</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">MStream.next</span><span class=\"bp\">?</span> <span class=\"n\">s.stream</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"sc\">'\\n'</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">s.buffer</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">stream</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"o\">,</span> <span class=\"n\">buffer</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">})</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">stream</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"o\">,</span> <span class=\"n\">buffer</span> <span class=\"o\">:=</span> <span class=\"n\">s.buffer.push</span> <span class=\"n\">c</span><span class=\"o\">})</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">stream</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>Since there's no way to know whether or when a newline will occur, a fused version of this would have to be partial or somehow break long lines.</p>",
        "id": 321826273,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673961010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class/near/321785580\">said</a>:</p>\n<blockquote>\n<p>I didn't know this was allowed in e.g. Rust, but it still sounds crazy to me. Would be interesting to know how much they rely on it.</p>\n</blockquote>\n<p><a href=\"https://www.reddit.com/r/rust/comments/sbdb9t/comment/htzl4rp/\">https://www.reddit.com/r/rust/comments/sbdb9t/comment/htzl4rp/</a> It kinda sounds like the API  is a source of problems... But I've asked the local Rustaceans if they had any idea why it's like that, will update y'all :)</p>",
        "id": 321828354,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673961687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class/near/321826273\">said</a>:</p>\n<blockquote>\n<p>One small advantage of using <code>Option α × σ</code> over <code>Option (α × σ)</code> is to avoid partial defs. For example: </p>\n</blockquote>\n<p>I have some infrastructure lying around for dealing with specifically finite iterators (it gives you a well-foundedness proof that the iteration eventually terminates, which satisfies Lean). And for potentially infinite iterators I assume eventually we'll have infrastructure around coinduction but I'm not sure unfused streams are the right way to go...</p>",
        "id": 321830105,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673962211
    },
    {
        "content": "<p>I guess in principle Python's <code>__iter__</code> / <code>__next__</code> framework allows these resumable streams too; but note that the coroutine syntax with <code>yield</code> does not support them, nor can I think of any examples in the standard library that behave in this way.</p>",
        "id": 321830302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673962268
    },
    {
        "content": "<p>I agree that non-fused streams are strange. But after some thought I realized that the issue with <code>Stream.next?</code> is not the output type but the missing monad parameter. I think the best type would be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Stream</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That way <code>Stream σ Id α</code> is an infinite stream, <code>Stream σ Option α</code> is the same as the current class, and <code>Stream σ (Except σ) α</code> would basically be the same as the type I originally suggested. It also provides a direct way to turn <code>IO.FS.Stream</code> into a stream within <code>IO</code>.</p>",
        "id": 321836996,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1673964096
    }
]