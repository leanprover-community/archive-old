[
    {
        "content": "<p>Your example is misusing <code>implementedBy</code>. The <code>implementedBy</code> attribute is instructing Lean to apply a replacement when generating code. Recall that <code>constant odd : Int -&gt; Foo</code> is an opaque definition, and its implementation is just the default element for <code>Int -&gt; Foo</code>. The idea is to prevent users from creating constants for uninhabited types. <br>\nThen, when code is generated for <code>even_impl</code> and <code>odd_impl</code>, there is no replacement registered for <code>even</code> and <code>odd</code>. Thus, the default value for <code>Int -&gt; Foo</code> is used.<br>\nThen, later you tell Lean that it should replace <code>odd</code> and  <code>even</code> with <code>odd_impl</code> and <code>even_impl</code>, but the code for <code>odd</code> and <code>even</code> has already been generated. <br>\nThe idiom used also does not reflect how <code>partial</code> is compiled.</p>",
        "id": 255612607,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633022446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 255613045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633022615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> sorry, that is my fault. That is how I understood mutual <code>partial def</code>s to work and thus misinformed <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>.</p>",
        "id": 255632154,
        "sender_full_name": "Mac",
        "timestamp": 1633029614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> No problem. Thanks for helping with the questions.</p>",
        "id": 255633022,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633029967
    }
]