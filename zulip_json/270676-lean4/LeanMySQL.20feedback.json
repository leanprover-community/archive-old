[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> any tip/idea on how to make it a bit simpler/straightforward than having to write <code>colProp%</code> everytime?</p>",
        "id": 263242499,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638331935
    },
    {
        "content": "<p>Actually wait, I need to think of the use cases better</p>",
        "id": 263243383,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638333224
    },
    {
        "content": "<p>you could make <code>filter</code> a macro which takes a <code>colProp</code> and produces a <code>term</code></p>",
        "id": 263243530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638333407
    },
    {
        "content": "<p>Might as well go full LINQ at this point</p>",
        "id": 263259056,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638348292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/263054245\">said</a>:</p>\n<blockquote>\n<p>Is there a way to hide things from the API user? Or this is not a thing in Lean?</p>\n</blockquote>\n<p><code>private</code> is as much a thing in Lean programming as in other languages. While it's true that it can be counterproductive for <em>proving</em>, it is extremely unlikely that code that was not designed to be reasoned about from the very beginning will ever be reasoned about. So you should not worry about it.</p>",
        "id": 263259462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638348540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> incidental reasoning still appears (e.g., for things like <code>Array.get</code>). Also, like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , I think <code>private</code> in general is (in most cases) a bad idea. </p>\n<p>It makes sense in purely compiled languages where the compiler can use that information to do smarter optimizations because it knows the symbols won't be used outside the current target. For a  highly reflective language like Lean, though, where it is still perfectly possible circumvent <code>private</code> with tricks, it just makes for bad UX.  </p>\n<p>For example, there are a number of <code>private</code> definitions in the Lean core that I have had to copy paste into various projects because I needed to use them. One good example that has been brought up in the <code>doc-gen4</code> discussion is <code>Name.isBlacklisted</code>.</p>",
        "id": 263288343,
        "sender_full_name": "Mac",
        "timestamp": 1638364846
    },
    {
        "content": "<p>Is there any use for the <code>private</code> keyword at all in your opinion then?</p>",
        "id": 263291191,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638366111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 263291200,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638366118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I think it works fine for auxiliary functions to <code>partial</code> definitions (though <code>where</code> clauses are an alternative there) and for some tricks with runtime unsafe code like <a href=\"https://github.com/leanprover/lean4/blob/5c39ddbad1bd187a4db71610bc874c402ae24356/src/Init/Prelude.lean#L2141\"><code>Macro.MethodsRefPointed</code></a> where an end user fiddling with the definition directly can break invariants and be quite bad.</p>\n<p>But, in general, no, I don't think <code>private</code> should be used (an opinion I believe is shared by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>).</p>",
        "id": 263292497,
        "sender_full_name": "Mac",
        "timestamp": 1638366678
    },
    {
        "content": "<p>Auxiliary definitions in general can't be <code>private</code>, since that's often where you want to start when proving properties about an operation. If it's a <code>partial</code> definition you are already hosed though, so I agree with <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> 's assessment</p>",
        "id": 263292768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638366777
    },
    {
        "content": "<p>I think of <code>private</code> as the keyword to use when you want someone to curse your name 2 years later</p>",
        "id": 263292957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638366864
    },
    {
        "content": "<p>I like to think of  the proper use of <code>private</code> in  program languages as \"if an user interacts with this directly, the computer is likely to halt and catch fire\". In imperative languages, <code>private</code> is thus most apt for black magic implementation details. In a declarative, functional language like Lean, though, such black magic should be vanishingly rare (and thus the use of <code>private</code> as well).</p>",
        "id": 263293998,
        "sender_full_name": "Mac",
        "timestamp": 1638367230
    },
    {
        "content": "<p><code>private</code> can also be seen as a means to simplify APIs, so the user can focus on learning how to make use of the lib more easily</p>",
        "id": 263295890,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638367989
    },
    {
        "content": "<p>\"Look at this HUGE lib, but you can make full usage of its potential with these 4 functions\"</p>",
        "id": 263295966,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638368032
    },
    {
        "content": "<p>I think another mechanism should be used for that, analogous to rust's <code>#[doc(hidden)]</code></p>",
        "id": 263296031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638368047
    },
    {
        "content": "<p>we've talked about a mechanized version of the \"main definitions\" section in mathlib files before using some kind of <code>@[main_definition]</code> attribute</p>",
        "id": 263296179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638368114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/263295890\">said</a>:</p>\n<blockquote>\n<p><code>private</code> can also be seen as a means to simplify APIs, so the user can focus on learning how to make use of the lib more easily</p>\n</blockquote>\n<p>The problem is that it also prevents more advanced users from adapting it to suit their needs.</p>",
        "id": 263296194,
        "sender_full_name": "Mac",
        "timestamp": 1638368121
    },
    {
        "content": "<p>I wonder whether it would be effective to just count mathlib-internal lemma uses to get a pretty accurate usefulness metric for theorems in a mathlib file. (This could also apply to anything generated by doc-gen, but mathlib probably has enough internal uses that it is not misleading except for leaf theorems)</p>",
        "id": 263296845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638368398
    },
    {
        "content": "<p>Re-sorting lemmas is sometimes problematic though, because order in the source is also a useful signal for relevance</p>",
        "id": 263297086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638368506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> instead of re-sorting the lemma, one could just stick a <code>Popular definitions: foo, bar, etc.</code> string with a links to said definitions at the bottom of the module introduction.</p>",
        "id": 263297506,
        "sender_full_name": "Mac",
        "timestamp": 1638368642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/263297506\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> instead of re-sorting the lemma, one could just stick a <code>Popular definitions: foo, bar, etc.</code> string with a links to said definitions at the bottom of the module introduction.</p>\n</blockquote>\n<p>I think something machine parsable would be nicer for this, that way one could for example also have these lemmas rank higher in auto complete suggestions.</p>",
        "id": 263300013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638369640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> ah, sorry, I meant at the bottom of the introduction in the generated module documentation, not in the module docstring (i.e., the popular lemma would be automatically deduced from usage data as Mario was suggesting).</p>",
        "id": 263300163,
        "sender_full_name": "Mac",
        "timestamp": 1638369705
    },
    {
        "content": "<p>Ahh, that certainly sounds nice yes, although I'm still far from that with my doc-gen4 stuff <em>takes note</em></p>",
        "id": 263300345,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638369760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/263295890\">said</a>:</p>\n<blockquote>\n<p><code>private</code> can also be seen as a means to simplify APIs, so the user can focus on learning how to make use of the lib more easily</p>\n</blockquote>\n<p>In C++ this is often <a href=\"https://stackoverflow.com/questions/26546265/what-is-the-detail-namespace-commonly-used-for\">done</a> by hiding implementation details into <code>internal</code> or <code>detail</code> namespace. The same can be done in Lean and does not prevent user from reasoning about your code.</p>",
        "id": 263308929,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638373156
    },
    {
        "content": "<p>indeed, you will find lots of definitions in mathlib with <code>_aux</code> in their names, used to evoke exactly this sense of internalness. For example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.permutations_aux\">docs#list.permutations_aux</a> is called that because you probably don't want to be using it unless you know what you are doing, but it nevertheless has a bunch of theorems about it, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mem_permutations_aux_of_perm\">docs#list.mem_permutations_aux_of_perm</a> (naturally, in order to prove theorems about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.permutations\">docs#list.permutations</a>)</p>",
        "id": 263310771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638373893
    },
    {
        "content": "<p>Thanks for such a rich set of ideas!</p>",
        "id": 263311751,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638374248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I wonder if <code>private</code> would be more useful if it were like <code>protected</code> but put its definition in a namespace called <code>private</code> and opened the private namespace.  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">baz</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">frobnicate_whatsits</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"n\">frobnicate_whatsits</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">baz</span>\n</code></pre></div>\n<p>would be like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">baz</span>\n\n<span class=\"kn\">namespace</span> <span class=\"kn\">private</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frobnicate_whatsits</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"kn\">private</span>\n<span class=\"kn\">open</span> <span class=\"kn\">private</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"n\">frobnicate_whatsits</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">baz</span>\n</code></pre></div>\n<p>Then outside the <code>baz</code> namespace, you'd have to go out of your way to refer to <code>baz.private.frobnicate_whatsits</code>, but it's still referenceable.</p>",
        "id": 263317296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638376284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> that would make <code>private</code> extremely trivial syntactic sugar: <code>private def foo</code> would just be short for <code>def private.foo</code></p>",
        "id": 263317925,
        "sender_full_name": "Mac",
        "timestamp": 1638376520
    },
    {
        "content": "<p>Don't forget that I'm suggesting it also be extremely trivial syntactic sugar for <code>open private</code> so that you can refer to it without <code>private</code>.</p>",
        "id": 263318167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638376587
    },
    {
        "content": "<p>At least in Lean 3, defining something as <code>def private.foo</code> can be different from <code>def foo</code> because in a recursive function it seems you need to use the full name.</p>",
        "id": 263318465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638376689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/263318465\">said</a>:</p>\n<blockquote>\n<p>At least in Lean 3, defining something as <code>def private.foo</code> can be different from <code>def foo</code> because in a recursive function it seems you need to use the full name.</p>\n</blockquote>\n<p>that is not true in Lean 4 anymore, <code>def foo.bar</code> is literally just syntactic sugar for <code>namespace foo; def bar; end foo</code>.</p>",
        "id": 263318629,
        "sender_full_name": "Mac",
        "timestamp": 1638376762
    },
    {
        "content": "<p>I can't tell, is it being trivial syntactic sugar an objection?</p>",
        "id": 263318974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638376879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> yeah, while I don't think the current <code>private</code> should be used often, there are cases were it is appropriate and it does do something more complex than what you are proposing (which doesn't seem worth the sugar in my honest opinion).</p>",
        "id": 263319336,
        "sender_full_name": "Mac",
        "timestamp": 1638377018
    },
    {
        "content": "<p>While the current <code>private</code> might sometimes be appropriate, is it <em>necessary</em>? The reasoning behind this proposal is that it's sort of the minimal functionality to make it feel like Lean has a <code>private</code> modifier, but it still makes the definitions available enough for proofs.</p>\n<p>A more complicated proposal is that anything that's <code>private</code> becomes noncomputable outside where it should be used (or some other mechanism to prevent you from evaluating private definitions).</p>",
        "id": 263320735,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638377571
    },
    {
        "content": "<p>Three words that have been around my head: <code>private</code>, <code>secret</code> and <code>internal</code>. Maybe having different behaviors available can help</p>",
        "id": 263321058,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638377704
    },
    {
        "content": "<p>I've finished the first \"stable\" version of <code>LeanMySQL</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\n<a href=\"https://github.com/arthurpaulino/LeanMySQL\">https://github.com/arthurpaulino/LeanMySQL</a><br>\nI've dropped some problematic approaches and decided to keep this initial version simple.<br>\nFeedback is more than welcome!</p>\n<p>And thanks everyone for the support <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 263383719,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638409672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> and <span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> I read what you said <a href=\"#narrow/stream/270676-lean4/topic/new.20lean4-samples.20repo/near/274075023\">here</a> so I brought the conversation to this more specific thread.</p>\n<p>The <code>LeanMySQL</code> package has evolved since the last time I shared news about it and the next step is precisely providing a better API for queries. I've been thinking about a simple SQL DSL.</p>\n<p>I don't think I've fully understood the ideas you guys mentioned. Are you talking about a way to make lean query the database at compile time (while writing Lean code) like <a href=\"https://raw.githubusercontent.com/fsprojects/SQLProvider/master/docs/files/sqlprovider.gif\">this</a>?</p>\n<div class=\"message_inline_image\"><a href=\"https://raw.githubusercontent.com/fsprojects/SQLProvider/master/docs/files/sqlprovider.gif\" title=\"this\"><img src=\"https://uploads.zulipusercontent.net/4eae66ad5080264948f5f451fa23b722f6c292f6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f667370726f6a656374732f53514c50726f76696465722f6d61737465722f646f63732f66696c65732f73716c70726f76696465722e676966\"></a></div>",
        "id": 274177603,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646422212
    },
    {
        "content": "<p>I vaguely remember <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> providing a link to that F# page too</p>",
        "id": 274177973,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646422388
    },
    {
        "content": "<p>I was thinking only of the language integrated query aspects of this kind of integration, being able to query the database live for metadata to provide intellisense fricken cool too.  If we could do both that would rock.  Is Lean4 InfoTree extensible enough to do that?</p>",
        "id": 274178722,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1646422718
    },
    {
        "content": "<p>I <em>suspect</em> it's possible, but I still haven't been able to make custom C code computations available via FFI like that. I've always been reliant on using the computation of C code inside the IO monad on built Lean code.</p>\n<p>On your question about the InfoTree, I don't know the InfoTree is</p>",
        "id": 274179047,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646422888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434989\">Chris Lovett</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/274178722\">said</a>:</p>\n<blockquote>\n<p>I was thinking only of the language integrated query aspects of this kind of integration</p>\n</blockquote>\n<p>Can you explain this in more detail? I couldn't grasp the idea</p>",
        "id": 274179746,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646423237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Yes, that is exactly it. Really useful when integrating common external models such as SQL but could be anything including C headers, etc. However, it is way less important than a proper SQL DSL  (LINQ or otherwise).</p>",
        "id": 274179915,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646423329
    },
    {
        "content": "<p>Language integrated query to me is just how they added \"from\", \"select\", \"groupby\", and \"join\" as keywords to C# and F#? so that you can write SQL queries in the language in a first class way rather than embedding the SQL query in an opaque string literal which was the old fashioned way of doing things before LINQ came along...</p>",
        "id": 274180246,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1646423525
    },
    {
        "content": "<p>Lean4 has extensible syntax so this part should be easy to do in Lean4...</p>",
        "id": 274180376,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1646423605
    },
    {
        "content": "<p>I see, thanks. I get it now. I'm going for it!</p>",
        "id": 274180539,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646423698
    },
    {
        "content": "<p>You should basically be able to declare a bunch of <code>syntax</code> + a custom <code>TermElab</code> (I suspect this might be too hard for just a <code>macro_rules</code> to get right) to elaborate some sort of built-in query language to something one can pass to the SQL server/whatever</p>",
        "id": 274181773,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646424256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> I can see it working if I declare a representation of the schemes in Lean by hand, but I don't know how to make Lean query the schemes dynamically like that</p>",
        "id": 274183275,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646425003
    },
    {
        "content": "<p>I am not entirely sure, but I am afraid it would require some support from the compiler.</p>",
        "id": 274205640,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646438548
    },
    {
        "content": "<p>I was able to get a minimal DSL for simple \"select from where\"-like queries that's able to express things like <a href=\"https://github.com/arthurpaulino/LeanMySQL/blob/7feb06b8e008ccbd9c2a49daca9cf3e151541037/lib/SQL.lean#L91\">this</a>.</p>\n<p>But I have no idea how to build a syntax for it. I would like to be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">SQLQuery</span> <span class=\"o\">:=</span> <span class=\"n\">SELECT</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">age</span> <span class=\"n\">FROM</span> <span class=\"n\">person</span> <span class=\"n\">WHERE</span> <span class=\"n\">age</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">20</span>\n</code></pre></div>\n<p>Help is very much appreciated <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span><br>\nBy \"help\" I mean any help. Examples, documentation etc</p>",
        "id": 274241767,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646484650
    },
    {
        "content": "<p>You can look at Mac's lean4-alloy which defines quite an extensive amount of syntax, there is also lots of syntax declarations to be viewed in the compiler you can grep for and a few examples on how to custom syntax in the docs folder.</p>",
        "id": 274251876,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646497482
    },
    {
        "content": "<p>Hi, speaking of SQL and feedback, I'm trying to get my feet wet with Lean (and functional programming). I investigated a little bit about <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> s approach of using custom syntax and TermElab. I was able to get simple SELECT FROM queries working, but it felt more tedious than it should be. I'd be more than happy to receive some feedback (Especially before I move to more complex syntax like Where and Having) on the <a href=\"https://github.com/FWuermse/lean-postgres\">project</a> to make sure this is the right way to do custom syntax and other things. Although this is for postgres, the dialects don't differ that much, and I'm hoping we can generalize queries like syntax in the future.</p>",
        "id": 274251992,
        "sender_full_name": "Florian Würmseer",
        "timestamp": 1646497677
    },
    {
        "content": "<p>Nice pointers! <code>alloy</code> is indeed a rich example.</p>\n<p><span class=\"user-mention\" data-user-id=\"466861\">@Florian Würmseer</span>, I definitely think we can merge efforts with more granular packages. I'm really happy to know that you're doing something similar <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 274253408,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646499462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> If you like, there's more examples over at <a href=\"https://github.com/opencompl/lean-mlir/blob/master/MLIR/EDSL.lean#L114-L120\"><code>opencompl/lean-mlir/EDSL.lean</code></a>, which follows exactly the grammar defined over at <a href=\"https://github.com/joker-eph/llvm-project-with-mlir/blob/master/mlir/g3doc/LangRef.md#type-system\">MLIR/LangRef.md</a>. This maybe useful to see a <code>1:1</code> translation :)</p>",
        "id": 274253867,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646499825
    },
    {
        "content": "<p>Well sadly we are in SQL land so there is no \"the grammar\" there is a grammar for every dialect :/</p>",
        "id": 274253955,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1646499924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466861\">Florian Würmseer</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/274251992\">said</a>:</p>\n<blockquote>\n<p>I'd be more than happy to receive some feedback</p>\n</blockquote>\n<p>I'm unsure about accepting a list of tables on the <code>FROM</code> clause (I'm checking your code)</p>",
        "id": 274279533,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646534107
    },
    {
        "content": "<p>Also I don't think we're supposed to perform matches against those autogenerated syntax terms like <code>`Query.col_AS_</code>. I am (slowly) figuring it out by looking at all sources provided (including your project) and also based on some limited experience writing a few tactics in Lean 4. Will let you know as soon as I achieve something more concrete</p>",
        "id": 274295529,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646558614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanMySQL.20feedback/near/274295529\">said</a>:</p>\n<blockquote>\n<p>Also I don't think we're supposed to perform matches against those autogenerated syntax terms like <code>`Query.col_AS_</code>. </p>\n</blockquote>\n<p>Yeah this is not the way. <span class=\"user-mention\" data-user-id=\"466861\">@Florian Würmseer</span> , I've created <a href=\"https://github.com/FWuermse/lean-postgres/pull/1\">a PR</a> for your project that makes the elaboration code more idiomatic. For the syntax implemented so far, you could also get away with macros, but maybe you'll eventually need more power.</p>",
        "id": 274400612,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646664182
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> and <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  for the feedback! Very much appreciated. And your pull request really helped me to understand the Syntax and original intention of termElabs.</p>",
        "id": 274439415,
        "sender_full_name": "Florian Würmseer",
        "timestamp": 1646678979
    },
    {
        "content": "<p>Interesting ... looking a the PR created by <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> , I was also <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> over it as it is a bit different than what I read in another document (I think the official one?).</p>\n<p>I would also have reached out to declare_syntax_cat and company, but probably just for a single category for the whole DSL.</p>",
        "id": 274442636,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1646680322
    },
    {
        "content": "<p>My pleasure! No claims that this code is in any way optimal btw, it still doesn't feel particularly elegant to me.</p>",
        "id": 274446089,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646681894
    },
    {
        "content": "<p>I'm needing some help too. I'm seeing myself writing repeated code because of parentheses. For example, on <a href=\"https://github.com/arthurpaulino/LeanMySQL/blob/255f1dbc0e9dbd8090c2b512d58188ba58b11b9c/lib/SQLSyntax.lean#L88-L89\">these two lines</a>, I've written match cases that are very similar and have the same consequences.</p>\n<p>Is there a way to avoid this duplication hell? It's gonna get worse once I write the match cases for <code>sqlProp</code> <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 274448573,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683012
    },
    {
        "content": "<p>Why do you have non-nestable parentheses like that?</p>",
        "id": 274448776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646683112
    },
    {
        "content": "<p>You could always call yourself recursively in the paren case</p>",
        "id": 274448805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646683129
    },
    {
        "content": "<p>I see what you mean. I'll do some work</p>",
        "id": 274448955,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683202
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 274449009,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683207
    },
    {
        "content": "<p>I'm not sure why the <code>sqlProp</code> case would be particularly bad</p>",
        "id": 274449033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646683213
    },
    {
        "content": "<p>you should have a function for \"get value from ident\" or whatever you need to make the six relational operators work</p>",
        "id": 274449160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646683239
    },
    {
        "content": "<p>in any case you can make it six calls to a function for relational operators</p>",
        "id": 274449215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646683265
    },
    {
        "content": "<p>It would be bad for the <code>sqlProp</code> case because each side of the operator can be inside parens too</p>",
        "id": 274449465,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683372
    },
    {
        "content": "<p>But I can kill it all with the recursive call. I'll try that</p>",
        "id": 274449537,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683408
    },
    {
        "content": "<p>Normally you would handle that by having a grammar construction like <code>syntax \"(\" sqlProp \")\" : sqlProp</code> and then it only has to be handled once</p>",
        "id": 274449732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646683477
    },
    {
        "content": "<p>For the first case it's a bit trickier because the parens don't always cover the entire syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span>                  <span class=\"n\">selectField</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span>                      <span class=\"o\">:</span> <span class=\"n\">selectField</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\" AS \"</span> <span class=\"n\">ident</span>         <span class=\"o\">:</span> <span class=\"n\">selectField</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\")\"</span>              <span class=\"o\">:</span> <span class=\"n\">selectField</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\" AS \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">selectField</span>\n</code></pre></div>",
        "id": 274450033,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683628
    },
    {
        "content": "<p>but it's definitely manageable with a new <code>declare_syntax_cat</code></p>",
        "id": 274450077,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646683653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I make heavy use of <code>private</code>, and I think it is very useful when maintaining the code. It makes it clear the function should not be used in other modules. It also helps accidental misuse when the function makes many assumptions about the input arguments. It also makes it clear to Lean users they should not assume this function will exist forever. </p>\n<blockquote>\n<p>For a highly reflective language like Lean, though, where it is still perfectly possible circumvent private with tricks, it just makes for bad UX.</p>\n</blockquote>\n<p>Sure, you can circumvent with tricks, but you cannot complain when things break if you use this kind of trick. </p>\n<blockquote>\n<p>In imperative languages, private is thus most apt for black magic implementation details. </p>\n</blockquote>\n<p>This is not true . <code>private</code> (<code>static</code>) is heavily used in many projects to hide implementation details from others even when there is no black magic.</p>",
        "id": 274454728,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646685999
    },
    {
        "content": "<p>(sorry for the little mess btw. I wanted to rename the thread I created but for some reason Zulip split it in two)</p>",
        "id": 274455264,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646686242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> Since this thread is quite old, I am not going to resurrect it. However, I do appreciate hearing your thoughts on the topic, even if I (and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ) disagree.</p>",
        "id": 274457981,
        "sender_full_name": "Mac",
        "timestamp": 1646687436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I thought it was a new thread since it was on the top today. It seems it accidentally moved to the top when Arthur renamed some thread.</p>",
        "id": 274458558,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646687695
    }
]