[
    {
        "content": "<p>Hi! I'm trying to build a query API à la Spark for Scala (and I am learning a lot in the process). So far, this is where I'm at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Col</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ColProp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EqE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EqC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NeqE</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Entry</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NeqC</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cp'</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cp'</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- constant colEqEntry (c : Nat) (e : Entry) : Type</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" =e \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.EqE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" =c \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.EqC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ≠e \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.NeqE</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ≠c \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.NeqC</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"s2\">\" ∧ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.And</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"s2\">\" ∨ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ColProp.Or</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">QueryStep</span>\n  <span class=\"bp\">|</span> <span class=\"n\">table</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">joinₗ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Query</span> <span class=\"n\">where</span>\n  <span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">table</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨[</span><span class=\"n\">QueryStep.table</span> <span class=\"n\">n</span><span class=\"o\">]⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Query</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">q.steps.concat</span> <span class=\"o\">(</span><span class=\"n\">QueryStep.select</span> <span class=\"n\">l</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">q.steps.concat</span> <span class=\"o\">(</span><span class=\"n\">QueryStep.filter</span> <span class=\"n\">cp</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">joinₗ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">q.steps.concat</span> <span class=\"o\">(</span><span class=\"n\">QueryStep.joinₗ</span> <span class=\"n\">t</span> <span class=\"n\">on</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Query</span>\n<span class=\"k\">#check</span> <span class=\"o\">(((</span><span class=\"n\">table</span> <span class=\"s2\">\"cars\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">select</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">name</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">joinₗ</span> <span class=\"s2\">\"prices\"</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">id</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">price</span> <span class=\"bp\">≠</span><span class=\"n\">e</span> <span class=\"mi\">500</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Query.filter (Query.joinₗ (Query.select (table \"cars\") [`id, `name]) \"prices\" [`id]) (`price ≠e 500) : Query</span>\n</code></pre></div>\n<p>Two things:</p>\n<ul>\n<li>Is it possible to avoid the need for this process of going back and adding parentheses everytime I want to add a new transformation?</li>\n<li>I'd like the <code>joinₗ</code> query step to receive another <code>Query</code> in the first parameter, but I got into some kind of definition chicken/egg race. Is it possible to avoid this problem?</li>\n</ul>",
        "id": 262717601,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637853402
    },
    {
        "content": "<p>you can use <code>mutual inductive</code>, although you will have to convert the structure to an inductive like <code>inductive Query | mk (steps : List QueryStep)</code></p>",
        "id": 262726388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637859187
    },
    {
        "content": "<p>Thanks! Let me try that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 262726705,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637859443
    },
    {
        "content": "<p>Is <a href=\"https://leanprover.github.io/lean4/doc/declarations.html?highlight=mutual%20inductive#mutual-and-nested-inductive-definitions\">this</a> updated? It's a bit hard to read</p>",
        "id": 262727041,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637859632
    },
    {
        "content": "<p>doesn't look like it</p>",
        "id": 262727239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637859788
    },
    {
        "content": "<p>the cliff notes version is that to write a mutual inductive you say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262727282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637859841
    },
    {
        "content": "<p>Thanks!! This is looking clean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Query</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span><span class=\"o\">)</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">QueryStep</span>\n    <span class=\"bp\">|</span> <span class=\"n\">table</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">joinₗ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Query</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262727649,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637860120
    },
    {
        "content": "<p>But how do I access <code>steps</code> of a certain <code>q : Query</code>? <code>q.steps</code> is causing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">steps'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Query.steps'</span>\n  <span class=\"n\">q</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Query</span>\n</code></pre></div>",
        "id": 262728162,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637860561
    },
    {
        "content": "<p>Since its an inductive now you would pattern match on it, you could also define a utility function like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Query</span>\n  <span class=\"kd\">def</span> <span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">Query</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">QueryStep</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">steps</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">steps</span>\n<span class=\"kd\">end</span> <span class=\"n\">Query</span>\n</code></pre></div>",
        "id": 262729319,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637861559
    },
    {
        "content": "<p>It's looking good!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">table</span> <span class=\"s2\">\"cars\"</span> <span class=\"bp\">↠</span> <span class=\"n\">select</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">name</span><span class=\"o\">]</span> <span class=\"bp\">↠</span> <span class=\"n\">joinₗ</span> <span class=\"o\">(</span><span class=\"n\">table</span> <span class=\"s2\">\"prices\"</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">id</span><span class=\"o\">]</span>\n<span class=\"c1\">-- table \"cars\" ↠ select [`id, `name] ↠ joinₗ (table \"prices\") [`id] : Query</span>\n</code></pre></div>",
        "id": 262729677,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637861909
    },
    {
        "content": "<p>If you are feeling particulary fancy you could maybe even define join with \\bowtie like in  relational algebra (<a href=\"https://en.wikipedia.org/wiki/Relational_algebra#Natural_join_(%E2%8B%88)\">https://en.wikipedia.org/wiki/Relational_algebra#Natural_join_(%E2%8B%88)</a>) which would spare you the need of typing ↠ joinₗ every time you want to join i guess.</p>",
        "id": 262729820,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637862039
    },
    {
        "content": "<p>Hm, I was planning to use <code>joinᵢ joinₗ joinᵣ joinₒ</code> to differentiate inner, left, right and outer joins. If I use <code>⋈</code> I think it will be a bit hard to remember the code for all variations</p>",
        "id": 262730317,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637862485
    },
    {
        "content": "<p>Or I could just accept a third parameter (<code>how</code>) like most APIs do <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 262730522,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637862687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> fyi, you could avoid the <code>mutual</code> and use a structure by doing the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">BaseQuery</span> <span class=\"o\">(</span><span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Step</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">QueryStep</span>\n<span class=\"bp\">|</span> <span class=\"n\">table</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">select</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">cp</span> <span class=\"o\">:</span> <span class=\"n\">ColProp</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">joinₗ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">BaseQuery</span> <span class=\"n\">QueryStep</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">on</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Col</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Query</span> <span class=\"o\">:=</span> <span class=\"n\">BaseQuery</span> <span class=\"n\">QueryStep</span>\n</code></pre></div>",
        "id": 262742845,
        "sender_full_name": "Mac",
        "timestamp": 1637876800
    },
    {
        "content": "<p>Small victory today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Ffi</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mysql</span> <span class=\"bp\">←</span> <span class=\"n\">MySQL.mk</span>\n  <span class=\"n\">mysql.login</span> <span class=\"s2\">\"localhost\"</span> <span class=\"s2\">\"root\"</span> <span class=\"s2\">\"root\"</span>\n  <span class=\"n\">mysql.useDB</span> <span class=\"s2\">\"test_db\"</span>\n  <span class=\"n\">mysql.querySQL</span> <span class=\"s2\">\"select car.id, car.name, price.price from car join price on car.id = price.id\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mysql.getQueryResult.toString</span>\n</code></pre></div>\n<p>Outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">id</span><span class=\"bp\">|</span><span class=\"n\">name</span><span class=\"bp\">|</span><span class=\"n\">price</span><span class=\"bp\">|</span>\n<span class=\"mi\">1</span><span class=\"bp\">|</span><span class=\"sc\">'A'</span><span class=\"bp\">|</span><span class=\"mi\">3</span><span class=\"bp\">|</span>\n<span class=\"mi\">2</span><span class=\"bp\">|</span><span class=\"sc\">'B'</span><span class=\"bp\">|</span><span class=\"mi\">2</span><span class=\"bp\">|</span>\n<span class=\"mi\">3</span><span class=\"bp\">|</span><span class=\"sc\">'C'</span><span class=\"bp\">|</span><span class=\"mi\">1</span><span class=\"bp\">|</span>\n</code></pre></div>",
        "id": 262906414,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638069649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Wanna join forces? <a href=\"#narrow/stream/270676-lean4/topic/general-purpose.20programming/near/262192146\">This</a> work of yours is closely related. My representation of a query result is the bottleneck of my pipeline.</p>\n<p><a href=\"https://github.com/arthurpaulino/LeanMySQL/blob/2cc4bcd583d19fcd69a76869739c1d73680c018f/lib/Ffi.lean#L184\">My first approach</a>, just to get the funnel working, was to return the query result as a beautifully formatted string and parse it in Lean. But something more similar to <code>numpy</code> should be way faster</p>",
        "id": 262926809,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638103259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I do not see the immediate relation between your project and mine, could be due to my complete ignorance of databases. I have no clue what SQL is, what exactly database is and so on.</p>\n<p>The connection I can see is that I want to work with tensors/multidimensional arrays and you work with databases that are also multidimensional arrays of sorts. Not sure if there is a big overlap of what we want to do with these objects. Probably a common and hard one is slicing. </p>\n<p>Apart of that, right now I do not need too fancy stuff with tensors and my current focus is still on automatic/symbolic differentiation.</p>",
        "id": 262927617,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638104417
    },
    {
        "content": "<p>How are you storing data?</p>",
        "id": 262927667,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638104497
    },
    {
        "content": "<p>That is currently not a big concert to me, but I will last long with <code>FloatArray</code> which I just wrap into column major matrix/tensor. I do not see the need for anything much more complicated in a near future. In a long run, I see the need for writing wrappers for Eigen matrices, Cuda arrays and OpenVDB(sparse voxel grid).</p>",
        "id": 262927905,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638104805
    },
    {
        "content": "<p>Indeed, I need something more versatile for the context of query results. Something that supports different types (including strings) and the presence of NULL values (or absence of values)</p>",
        "id": 262928014,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638104993
    },
    {
        "content": "<p>First, I want to stabilize the interface on top of which all of this will be build. That is where I believe Lean can shine and if I do not manage to get a nice, versatile and powerful interface then there is no point in my project. So currently I'm really not concerned with run-time performance, it is still in the back of my mind but not in focus.</p>",
        "id": 262928019,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638104997
    },
    {
        "content": "<p>Yeah, I think our needs are very different. Looking at other libraries, is there a library that is advertised as database library and numerical linear algebra package? I'm not aware of it, the uses are way too different.</p>",
        "id": 262928156,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638105168
    },
    {
        "content": "<p>In Python, <code>numpy</code> is used to implement <code>pandas</code>, which is largely used in <code>pyspark</code> to return results of queries. But <code>numpy</code> was primarily a package for heavy matricial operations</p>",
        "id": 262928307,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638105331
    },
    {
        "content": "<p>Ahh ok, that just reveals my complete lack of understanding databases.</p>",
        "id": 262928652,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638105797
    },
    {
        "content": "<p>In my recent <a href=\"#narrow/stream/270676-lean4/topic/Interface.20for.20multi-dimensional.20arrays\">thread</a> , I have discussed interface for multi dimensional arrays. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> shared some interesting ideas how to approach it. I will be playing around with it a bit and maybe coming up with something that might be of use to you.</p>",
        "id": 262928945,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1638106194
    },
    {
        "content": "<p>Expanded the API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mysql</span> <span class=\"bp\">←</span> <span class=\"n\">MySQL.mk</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"n\">mysql.version</span> <span class=\"c1\">-- queries mysql version</span>\n  <span class=\"n\">mysql.login</span> <span class=\"s2\">\"localhost\"</span> <span class=\"s2\">\"root\"</span> <span class=\"s2\">\"root\"</span>\n  <span class=\"n\">mysql.close</span> <span class=\"c1\">-- closes connection with mysql</span>\n  <span class=\"n\">mysql.login</span> <span class=\"s2\">\"localhost\"</span> <span class=\"s2\">\"root\"</span> <span class=\"s2\">\"root\"</span>\n\n  <span class=\"n\">mysql.createDB</span> <span class=\"s2\">\"test_db\"</span> <span class=\"c1\">-- create database</span>\n  <span class=\"n\">mysql.dropDB</span> <span class=\"s2\">\"test_db\"</span> <span class=\"c1\">-- drop database</span>\n  <span class=\"n\">mysql.createDB</span> <span class=\"s2\">\"test_db\"</span> <span class=\"c1\">-- create it again</span>\n\n  <span class=\"n\">mysql.useDB</span> <span class=\"s2\">\"test_db\"</span> <span class=\"c1\">-- use database</span>\n\n  <span class=\"n\">mysql.createTable</span> <span class=\"s2\">\"job\"</span> <span class=\"o\">[</span>\n    <span class=\"o\">⟨</span><span class=\"s2\">\"id\"</span><span class=\"o\">,</span> <span class=\"s2\">\"INT PRIMARY KEY\"</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"s2\">\"name\"</span><span class=\"o\">,</span> <span class=\"s2\">\"VARCHAR(255)\"</span><span class=\"o\">⟩</span>\n  <span class=\"o\">]</span>\n  <span class=\"n\">mysql.insertIntoTable</span> <span class=\"s2\">\"job\"</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"Computer Scientist\"</span><span class=\"o\">]</span>\n  <span class=\"n\">mysql.insertIntoTable</span> <span class=\"s2\">\"job\"</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"Mathematician\"</span><span class=\"o\">]</span>\n\n  <span class=\"n\">mysql.createTable</span> <span class=\"s2\">\"person\"</span> <span class=\"o\">[</span>\n      <span class=\"o\">⟨</span><span class=\"s2\">\"id\"</span><span class=\"o\">,</span> <span class=\"s2\">\"INT PRIMARY KEY\"</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">⟨</span><span class=\"s2\">\"name\"</span><span class=\"o\">,</span> <span class=\"s2\">\"VARCHAR(255)\"</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">⟨</span><span class=\"s2\">\"age\"</span><span class=\"o\">,</span> <span class=\"s2\">\"INT\"</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">⟨</span><span class=\"s2\">\"job_id\"</span><span class=\"o\">,</span> <span class=\"s2\">\"INT\"</span><span class=\"o\">⟩</span>\n    <span class=\"o\">]</span>\n\n  <span class=\"c1\">-- inserting data</span>\n  <span class=\"n\">mysql.insertIntoTable</span> <span class=\"s2\">\"person\"</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"Alice\"</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">mysql.insertIntoTable</span> <span class=\"s2\">\"person\"</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"Bod\"</span><span class=\"o\">,</span> <span class=\"mi\">21</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">mysql.insertIntoTable</span> <span class=\"s2\">\"person\"</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"s2\">\"Craig\"</span><span class=\"o\">,</span> <span class=\"mi\">22</span><span class=\"o\">,</span> <span class=\"n\">NULL</span><span class=\"o\">]</span>\n\n  <span class=\"n\">mysql.querySQL</span> <span class=\"o\">(</span><span class=\"s2\">\"select person.name, person.age, job.name \"</span> <span class=\"bp\">++</span>\n    <span class=\"s2\">\"from person left join job on person.job_id = job.id\"</span><span class=\"o\">)</span>\n  <span class=\"n\">mysql.close</span>\n  <span class=\"c1\">-- connection is closed, but the query result is still available in memory</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"n\">mysql.getQueryResult</span>\n</code></pre></div>\n<p>Prints out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">27</span>\n<span class=\"n\">name</span><span class=\"bp\">|</span><span class=\"n\">age</span><span class=\"bp\">|</span><span class=\"n\">name</span><span class=\"bp\">|</span>\n<span class=\"bp\">'</span><span class=\"n\">Alice'</span><span class=\"bp\">|</span><span class=\"mi\">20</span><span class=\"bp\">|'</span><span class=\"n\">Computer</span> <span class=\"n\">Scientist'</span><span class=\"bp\">|</span>\n<span class=\"bp\">'</span><span class=\"n\">Bod'</span><span class=\"bp\">|</span><span class=\"mi\">21</span><span class=\"bp\">|'</span><span class=\"n\">Mathematician'</span><span class=\"bp\">|</span>\n<span class=\"bp\">'</span><span class=\"n\">Craig'</span><span class=\"bp\">|</span><span class=\"mi\">22</span><span class=\"bp\">|</span><span class=\"n\">NULL</span><span class=\"bp\">|</span>\n</code></pre></div>",
        "id": 262955384,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638143649
    }
]