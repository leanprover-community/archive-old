[
    {
        "content": "<p>I have a pretty contrived MWE, showing a case where Lean/I can't figure out a universe constraint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ia</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ib</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.type</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.thing</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E.type</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Inhabited.default</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inhabited.default</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Inhabited.default</span> <span class=\"n\">β</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">E.thing</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ia</span> <span class=\"n\">ib</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">E.thing</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ia</span> <span class=\"n\">ib</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>On the last line, Lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4095</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4106</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4096</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4095</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.4106</span> <span class=\"bp\">?</span><span class=\"n\">u.4095</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4106</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4095</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.4096</span> <span class=\"bp\">?</span><span class=\"n\">u.4095</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4096</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.4095</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I think the problem arises in some way from the type signature of <code>E.type</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">E.type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The signature shows that Lean has to assume <code>α</code> to live in a universe at least as big as <code>β</code>'s, so we get <code>α : Type (max u_1 u_2)</code>.<br>\nChanging <code>E.type</code> to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">E.type</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>... makes the type signature simpler (<code>Type u_1 → Type u_2 → E → Type (max u_1 u_2)</code>) and fixes the problem.<br>\nWhat is the underlying problem here?</p>",
        "id": 253232009,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1631617720
    },
    {
        "content": "<p>Here's a slight simplification of the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₁</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.type</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">make</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E.thing</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E.type</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">make</span> <span class=\"o\">(</span><span class=\"n\">E.type</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253232302,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1631617902
    },
    {
        "content": "<p>Lean inferred the correct type for <code>E.type</code>, but it's kind of unusable (unless you write explicit universe variable arguments) because there is no way to infer <code>u_1</code> at a use of it. I imagine you just want to assume that <code>α</code> and <code>β</code> live in the same universe.</p>",
        "id": 253236305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631620065
    },
    {
        "content": "<p>Also, I can't tell what you're doing from the MWE obviously, but you could consider forgetting about universes and just using <code>Type</code> everywhere.</p>",
        "id": 253236813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631620320
    },
    {
        "content": "<p>I'm never sure what I'd be \"losing\" by constraining type-parameters to certain universes, so I always go for <code>Type _</code>.<br>\nBut having <code>α</code> and <code>β</code> live in the same universe seems like a good solution.</p>",
        "id": 253238815,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1631621229
    },
    {
        "content": "<p>One thing that surprises me here is that<code>α</code> and <code>β</code> are in the same binder, but don't they have the same type (and thus the same universe) . Apparently <code>Type _</code> does some magic that assigns them different types none-the-less (which wouldn't be possible normally). Is that expected? It seems rather odd to me.</p>",
        "id": 253270805,
        "sender_full_name": "Mac",
        "timestamp": 1631633231
    },
    {
        "content": "<p>I guess it gets syntactically expanded to two binders first, then the metavariables get filled in. Whether this is a good thing is perhaps debatable.</p>",
        "id": 253271020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631633319
    },
    {
        "content": "<p>FWIW, when I write <code>def foo (α β) : ...</code> I expect the semantics of <code>def foo (α : Type u) (β : Type v) : ...</code>, because it's the most general version.</p>",
        "id": 253278614,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1631636264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> note that <code>def foo (α β) : ...</code> actually gives <code>def foo (α : Sort u) (β : Sort v) : ...</code> because <em>that</em> it is the most general version. :P</p>",
        "id": 253281391,
        "sender_full_name": "Mac",
        "timestamp": 1631637342
    },
    {
        "content": "<p>Ahh of course :D</p>",
        "id": 253281890,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1631637518
    }
]