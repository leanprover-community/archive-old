[
    {
        "content": "<p>In the following setting, the <code>HashMap a.type Nat</code> declaration fails because <code>failed to synthesize instance BEq a.type</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">beq</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hashable</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">a.type</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>What I'm trying to express in <code>A</code> is that <code>type</code> is some type which is equatable and hashable. Is this the right approach? If so, how do I make use of the local instances later on?</p>",
        "id": 296082635,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1661859448
    },
    {
        "content": "<p>You're running into two issues here.</p>",
        "id": 296082829,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661859525
    },
    {
        "content": "<p>1) You need to write <code>BEq type</code> instead of <code>BEq a</code>.  <code>[beq :  BEq a]</code> means <code>[beq : âˆ€ {a}, BEq a]</code>.</p>",
        "id": 296082919,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661859558
    },
    {
        "content": "<p>2) You need to mark <code>A.beq</code> and <code>A.hashable</code> as instances.</p>",
        "id": 296082954,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661859575
    },
    {
        "content": "<p>and 0) you need to <code>import Std</code> and <code>open Std</code> <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 296082998,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661859595
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">beq</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">type</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hashable</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">type</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">A.beq</span> <span class=\"n\">A.hashable</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">a.type</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 296083008,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661859600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Use.20local.20instance/near/296082829\">said</a>:</p>\n<blockquote>\n<p>You need to write <code>BEq type</code> instead of <code>BEq a</code></p>\n</blockquote>\n<p>Sorry, that was just bad copy paste.</p>",
        "id": 296083012,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1661859602
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 296083206,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1661859677
    }
]