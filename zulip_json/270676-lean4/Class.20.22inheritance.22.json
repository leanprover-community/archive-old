[
    {
        "content": "<p>I want to define a type class that enforces <code>DecidableEq</code> as well as additional constraints on a given type.<br>\nCurrently I've defined it this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ID</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">decEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ID.DecidableEq</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ID</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">ID.decEq</span>\n</code></pre></div>\n<p>Is there a nicer way of enforcing <code>DecidableEq</code> on <code>α</code> without externalizing the responsibility through  <code>[DecidableEq α]</code>?</p>",
        "id": 262231006,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637486386
    },
    {
        "content": "<p>I don't really understand your last sentence, but we do have actual inheritance via <code>extends</code>, which will declare the transitive instance automatically</p>",
        "id": 262233213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637489886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Class.20.22inheritance.22/near/262233213\">said</a>:</p>\n<blockquote>\n<p>I don't really understand your last sentence, but we do have actual inheritance via <code>extends</code>, which will declare the transitive instance automatically</p>\n</blockquote>\n<p>By the last sentence I mean that I don't want to define <code>ID</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ID</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">alpha</span>\n</code></pre></div>\n<p>... because then I would always need to include an explicit typeclass <code>Decidable \\alpha</code> when using <code>ID \\alpha</code> (right?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I assume this doesn't work because 'DecidableEq \\alpha' can't be synthesized:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ID</span> <span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Instead I have to do:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ID</span> <span class=\"bp\">\\</span><span class=\"n\">alpha</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And I thought <code>extends</code> doesn't work with <code>Decidable</code>, since it is not a struct.</p>",
        "id": 262245031,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637507514
    },
    {
        "content": "<p>Right, the rare <code>class inductive</code>... the closest code to <code>extends</code> should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ID</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"n\">toDecEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">ID.toDecEq</span>\n</code></pre></div>",
        "id": 262245162,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637507681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Class.20.22inheritance.22/near/262245162\">said</a>:</p>\n<blockquote>\n<p>Right, the rare <code>class inductive</code>... the closest code to <code>extends</code> should be</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ID</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"n\">toDecEq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">ID.toDecEq</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That seems to work <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Could you perhaps explain how it works? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 262258626,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637526125
    },
    {
        "content": "<p>What don't you understand? Giving <code>ID.toDecEq</code> the instance attribute makes it available to type class inference. Usually an instance is defined with <code>instance foo : bar := ...</code> and this is short for <code>def foo : bar := ...</code> + <code>attribute [instance] foo</code>. Here <code>Id.toDecEq</code> is defined as part of the class and right now there's no machinery for making it automatically an instance, so we have to do it afterwards.</p>",
        "id": 262262008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637530672
    },
    {
        "content": "<p>Ah ok, that solves one part of the mystery for me. What does the notation <code>[toDecEq : DecidableEq \\alpha]</code> do on this case though?<br>\nThat is, why the brackets?</p>",
        "id": 262296126,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637573516
    },
    {
        "content": "<p>I think that just changes the brackets in the constructor</p>",
        "id": 262296764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637573869
    }
]