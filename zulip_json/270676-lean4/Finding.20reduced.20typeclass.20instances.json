[
    {
        "content": "<p>In the following example, typeclass resolution is able to synthesize the instance when the type directly matches the instance, but not when it only reduces to the instance type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Foo</span> <span class=\"mi\">2</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Foo</span> <span class=\"o\">[(),</span> <span class=\"o\">()]</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"c1\">-- failed to synthesize</span>\n</code></pre></div>\n<p>Is there any way to get this to work?</p>",
        "id": 310315826,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1668556630
    },
    {
        "content": "<p>Typeclass synthesis only unfolds reducible definitions (<code>abbrev</code> or <code>@[reducible]</code>). Additionally, the indexing data structures assume, iiuc, that only non-recursive definitions are reducible. These are pretty fundamental restrictions, so you probably won't be able to make your example work as-is.</p>",
        "id": 310316659,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1668557064
    },
    {
        "content": "<p>I was trying to implement a coercion from lists to fintuples.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">l.get</span>\n</code></pre></div>\n<p>I guess I'll stick to using a macro.</p>\n<p>I'm not sure if this is related or not, but I ran into another issue when defining a different coercion from lists to fintuples.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">l.get</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>",
        "id": 310317389,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1668557515
    },
    {
        "content": "<p>Yeah, I don't see immediately how you could get the desired coercion. Bit unfortunate. If we ever get the ability to run custom code during typeclass synthesis, this would become possible.</p>\n<p>For your second issue, the problem seems to be that <code>[]</code> has type <code>List ?α</code> where <code>?α</code> is undetermined. In this case, the elaborator apparently doesn't apply coercions. You can write <code>(([] : List Nat) : (n : Nat) × (Fin n → Nat))</code> if you like type salad.</p>",
        "id": 310379859,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1668595301
    },
    {
        "content": "<p>It's technically possible to make the function coercion work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">·.</span><span class=\"n\">length</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l.get</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span> <span class=\"n\">i</span>\n<span class=\"k\">#check</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 310462053,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668620130
    },
    {
        "content": "<p>But I would really strongly advise you not to add any of these as coercions.</p>",
        "id": 310462097,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668620147
    }
]