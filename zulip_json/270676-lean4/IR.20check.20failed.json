[
    {
        "content": "<p>I broke something again \\o/, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">shrinkFn</span> <span class=\"n\">α</span> <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Sampleable.wf</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prod.shrink</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">shrA</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shrB</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Sampleable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sampleable</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.shrink</span> <span class=\"n\">Sampleable.shrink</span> <span class=\"n\">Sampleable.shrink</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">instSampleableProd._rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Prod._sizeOf_inst'</span>\n</code></pre></div>\n<p>but <code>Prod._sizeOf_inst</code> is very much a thing, version is latest nightly</p>",
        "id": 275583307,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647468120
    },
    {
        "content": "<p>We do not generate code for <code>SizeOf</code> instances, and we will not change that in the near future.  We only use them in proofs to justify termination. <br>\nIf you are building more infrastructure to justify termination. You can add <code>noncomputable</code> to your instance.</p>",
        "id": 275584217,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647468745
    },
    {
        "content": "<p>I see...but why exactly does it even try to generate executable code for sizeOf here? I didn't call it anywhere did I?</p>",
        "id": 275584253,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647468784
    },
    {
        "content": "<p>Your <code>Sampleable</code> depends on <code>SizeOf</code>.  Try the following, and you will find the <code>sizeOf</code> instance there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">ex</span> <span class=\"o\">[</span><span class=\"n\">Sampleable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sampleable</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.shrink</span> <span class=\"n\">Sampleable.shrink</span> <span class=\"n\">Sampleable.shrink</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">ex</span>\n</code></pre></div>",
        "id": 275584438,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647468944
    },
    {
        "content": "<p>Ah indeed there it is, I see, notabug then^^</p>",
        "id": 275584531,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647469012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 275584534,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647469014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as unresolved.</p>",
        "id": 275585107,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647469421
    },
    {
        "content": "<p>While I got this Sampleable code here, I did define <code>Prod.shrink</code> to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Prod.shrink</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">shrA</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shrB</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">shrink1</span> <span class=\"o\">:=</span> <span class=\"n\">shrA</span> <span class=\"n\">fst</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">snd</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SizeOf.sizeOf</span><span class=\"o\">,</span> <span class=\"n\">Prod._sizeOf_1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_lt_add_left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_lt_add_right</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"o\">)⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">shrink2</span> <span class=\"o\">:=</span> <span class=\"n\">shrB</span> <span class=\"n\">snd</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Prod.mk</span> <span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">SizeOf.sizeOf</span><span class=\"o\">,</span> <span class=\"n\">Prod._sizeOf_1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_lt_add_left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_lt_add_left</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"o\">)⟩</span>\n  <span class=\"n\">shrink1</span> <span class=\"bp\">++</span> <span class=\"n\">shrink2</span>\n</code></pre></div>\n<p>And I basically have two issues with this, the first being that I'm mentioning this <code>Prod._sizeOf_1</code> explicitly but its an autogenerated name so I should probably do something different? And the second is the way I'm rewriting here with applying associativity, then canceling the 1, then canceling the other part, that feels very manual, do we have automation for this type of stuff yet?</p>",
        "id": 275585110,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647469423
    },
    {
        "content": "<p>Making most <code>Sampleable</code> instances <code>noncomputable</code> is going to throw a wrench in the plan of using it to generate test cases for Lean code. Changing the class declaration to this should get around that issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">shrinkFn</span> <span class=\"n\">α</span> <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 275586226,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647470256
    },
    {
        "content": "<p>Thaaat will in turn mess up <code>Sampleable.lift</code> quite a lot though since that one relies on explicit specification of this parameter....</p>",
        "id": 275587080,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647470947
    },
    {
        "content": "<p>I guess I'll get it to work somehow^^</p>",
        "id": 275587098,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647470963
    },
    {
        "content": "<p>You're going to need to give it type: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sampleable.lift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sizeof</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sizeof</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sampleable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">sizeof</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sampleable</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and it won't be producing its own definition of <code>sizeof β</code></p>",
        "id": 275590418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647473375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Your example above helped me to fix problems with the arith simplifier. I pushed some fixes, and you can now write the example above as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prod.shrink</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">shrA</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shrB</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">shrink1</span> <span class=\"o\">:=</span> <span class=\"n\">shrA</span> <span class=\"n\">fst</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all_arith</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">shrink2</span> <span class=\"o\">:=</span> <span class=\"n\">shrB</span> <span class=\"n\">snd</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all_arith</span><span class=\"o\">⟩</span>\n  <span class=\"n\">shrink1</span> <span class=\"bp\">++</span> <span class=\"n\">shrink2</span>\n</code></pre></div>",
        "id": 275593413,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647475911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/IR.20check.20failed/near/275590418\">said</a>:</p>\n<blockquote>\n<p>You're going to need to give it type: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sampleable.lift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sizeof</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sizeof</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sampleable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">sizeof</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sampleable</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and it won't be producing its own definition of <code>sizeof β</code></p>\n</blockquote>\n<p>Yeah I did that already and sorried out the correctness proof, it will cause stuff like this FIn.sampleable instance to break due to the same SizeOf noncomputable issue again :(</p>",
        "id": 275618038,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647504598
    },
    {
        "content": "<p>Namely like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">shrinkFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">sz</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sz.sizeOf</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">shrinkFn</span> <span class=\"n\">α</span> <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.shrink</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">sizeOf</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">shrink</span> <span class=\"n\">m</span>\n    <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">rest.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">x.property</span> <span class=\"n\">h</span><span class=\"o\">})</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Nat.sampleable</span> <span class=\"o\">:</span> <span class=\"n\">Sampleable</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">shrink</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.shrink</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sampleable.lift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sampleable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sampleable</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">shrink</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">shrink</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Fin.sampleable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Sampleable</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Sampleable.lift</span> <span class=\"n\">Nat</span> <span class=\"n\">Fin.ofNat</span> <span class=\"n\">Fin.val</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.mod_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275619547,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647505631
    },
    {
        "content": "<p>I have some more IR checks failed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">TupleNTyp</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">TupleNTyp</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TupleN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">TupleNTyp</span> <span class=\"n\">n.val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"c1\">--  | 1 =&gt; Solo</span>\n<span class=\"c1\">--  | 2 =&gt; Prod</span>\n<span class=\"c1\">--  | 3 =&gt; fun a b c =&gt; Prod a (Prod b c)</span>\n</code></pre></div>\n<p><code>IR check failed at 'TupleN', error: unexpected type '◾', object expected</code></p>\n<ol>\n<li>Quite the confusing message, the fuck is that square?</li>\n<li>I feel like this should work?</li>\n</ol>",
        "id": 291273074,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659057437
    },
    {
        "content": "<p>the square is the \"neutral object\" aka \"erased thing\" which takes the place of universes and propositions (types that are erased)</p>",
        "id": 291273500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659057926
    },
    {
        "content": "<p>It sounds like lean is having trouble deciding whether <code>TupleNTyp n.val</code> should be erased or not</p>",
        "id": 291273561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659058007
    }
]