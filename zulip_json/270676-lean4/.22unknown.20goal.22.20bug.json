[
    {
        "content": "<p>Providing these field values as <code>by intros; trivial</code> leaves us with no errors. Also, it's just <code>le_sup_inf</code> that seems to have an issue, which might be a clue.</p>",
        "id": 314186844,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670313917
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.5BRFC.5D.20refine_struct.20functionality.20via.20new.20.3F.2E.2E.20syntax\">#lean4 &gt; [RFC] refine_struct functionality via new ?.. syntax</a> by <span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>.</p>",
        "id": 314187029,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670313993
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.5BRFC.5D.20refine_struct.20functionality.20via.20new.20.3F.2E.2E.20syntax\">#lean4 &gt; [RFC] refine_struct functionality via new ?.. syntax</a> by <span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>.</p>",
        "id": 314187072,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670314015
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.5BRFC.5D.20refine_struct.20functionality.20via.20new.20.3F.2E.2E.20syntax\">#lean4 &gt; [RFC] refine_struct functionality via new ?.. syntax</a> by <span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>.</p>",
        "id": 314187110,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670314031
    },
    {
        "content": "<p>Could you file an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 314192049,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670316407
    },
    {
        "content": "<p>I can try :) But given how large the structures involved are I expect that finding where something is going wrong will be a considerable part of the challenge…is there any capability in Lean to trace back what functions called what other functions that eventually led to a given error? (as opposed to <code>trace</code>-ing specific messages—or maybe there is some specific trace class that represents this?) Somehow this is coming from <code>withGoalCtx</code> but I have no idea what called that (or what prepared its arguments for it)</p>",
        "id": 314196644,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670318376
    },
    {
        "content": "<p>I would just try to do this by hand: make up two structures, one extending the other, and make two instances like in your example. If that doesn't reproduce the error, BooleanAlgebra is not that far into mathlib. I think it would be possible to just reduce this to a MWE step-by-step. I would put this instance in a new file, then repeat the following steps:</p>\n<ul>\n<li>remove an import X</li>\n<li>if that fails because it can't find a declaration Y, copy and paste Y into your file, go back to the start.</li>\n</ul>",
        "id": 314203766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670321283
    },
    {
        "content": "<p>I can help if the second approach proves necessary. (I have lots of practice at stripping mathlib to MWEs recently...)</p>",
        "id": 314203797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670321299
    },
    {
        "content": "<p>Let me echo that -- a working example even on a branch of mathlib4 is a good way to start (at that point you can show it to others and they can see what you're seeing, and if you're lucky then that's already enough). If that's still too big and it's necessary to remove mathlib4 from the picture then this can be kind of an algorithmic process which e.g. I could try on the tube journey home if someone else doesn't do it first.</p>",
        "id": 314226999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670329991
    },
    {
        "content": "<p>Progress! (the following is longer, but self-contained)</p>",
        "id": 314336313,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670364758
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LE'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasSup'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasInf'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasCompl'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SDiff'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sdiff</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DistribLattice'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE'</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasSup'</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasInf'</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_sup_inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">inf</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">inf</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BooleanAlgebra'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">DistribLattice'</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasCompl'</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">SDiff'</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"n\">sdiff_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sdiff</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">inf</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">booleanAlgebra'</span> <span class=\"o\">:</span> <span class=\"n\">BooleanAlgebra'</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">,</span>\n     <span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">sdiff</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">,</span>\n     <span class=\"n\">sdiff_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">,</span> <span class=\"n\">le_sup_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 314336394,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670364798
    },
    {
        "content": "<p>Ok, I think this is pretty close to an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> !</p>",
        "id": 314343149,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670367570
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(),</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 314343166,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670367579
    },
    {
        "content": "<p>If I move either <code>f</code> or <code>p</code> down into <code>Bar</code>, the \"unknown goal\" error disappears.</p>",
        "id": 314343298,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670367620
    },
    {
        "content": "<p>Note that <code>by aesop</code> is what's underlined in red here, so I think it's an aesop error—especially since replacing it with <code>by intros; rfl</code>resolves the error.</p>",
        "id": 314343680,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670367764
    },
    {
        "content": "<p>Definitely an Aesop bug. I'll take a look, thanks!</p>",
        "id": 314343928,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670367876
    },
    {
        "content": "<p>Fixed. Thank you for the nice MWE!</p>",
        "id": 314466315,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670422813
    }
]