[
    {
        "content": "<p>Why is there no instance for  <code>MonadLift IO CommandElabM</code>? There is an instance for its transitive closure <code>MonadLiftT IO CommandElabM</code>.</p>\n<p>I want to write a function that recursively visits all files in the specified path and the lack of the above instance gives me trouble using the function <code>visitFiles</code>. To circumvent that I have to convert an instance of <code>MonadLiftT</code> to an instance <code>MonadLift</code>. </p>\n<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">System</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">visitFiles</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLift</span> <span class=\"n\">IO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fp</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">fp.isDir</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">dirEntry</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">fp.readDir</span> <span class=\"k\">do</span>\n      <span class=\"n\">visitFiles</span> <span class=\"n\">dirEntry.path</span> <span class=\"n\">f</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">f</span> <span class=\"n\">fp</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">visitFilesT</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">MonadLiftT</span> <span class=\"n\">IO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fp</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">IO</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">inst.monadLift</span><span class=\"o\">⟩</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">fp.isDir</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">dirEntry</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">fp.readDir</span> <span class=\"k\">do</span>\n      <span class=\"n\">visitFiles</span> <span class=\"n\">dirEntry.path</span> <span class=\"n\">f</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">f</span> <span class=\"n\">fp</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dir</span> <span class=\"bp\">←</span> <span class=\"n\">IO.currentDir</span>\n  <span class=\"c1\">-- visitFiles dir (λ p =&gt; IO.println p) -- failed to synthesize instance MonadLift IO CommandElabM</span>\n  <span class=\"n\">visitFilesT</span> <span class=\"n\">dir</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">command</span>\n</code></pre></div>",
        "id": 293750653,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1660666798
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">System</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">MonadLift</span> <span class=\"n\">BaseIO</span> <span class=\"n\">IO</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">visitFiles</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">IO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fp</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">MonadLiftT</span> <span class=\"n\">BaseIO</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">BaseIO</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">IO</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)⟩</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"n\">fp.isDir</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">dirEntry</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">fp.readDir</span> <span class=\"k\">do</span>\n      <span class=\"n\">visitFiles</span> <span class=\"n\">dirEntry.path</span> <span class=\"n\">f</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">f</span> <span class=\"n\">fp</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dir</span> <span class=\"bp\">←</span> <span class=\"n\">IO.currentDir</span>\n  <span class=\"n\">visitFiles</span> <span class=\"n\">dir</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In general:</p>\n<ul>\n<li><code>MonadLift</code> does one step of monad lifting, so e.g. we have <code>MonadLift m (ReaderT α m)</code> but not <code>MonadLift m (ReaderT α (ReaderT β m)))</code>.</li>\n<li><code>MonadLiftT</code> is the multi-step version (transitive closure) of <code>MonadLift</code>, so we have both <code>MonadLiftT m (ReaderT α m)</code> and<code>MonadLiftT m (ReaderT α (ReaderT β m)))</code>.</li>\n</ul>\n<p>The strange thing with this example is that Lean does not infer <code>MonadLiftT BaseIO m</code> from <code>MonadLift BaseIO IO</code> and <code>MonadLiftT IO m</code>. This seems to be a limitation of the way the <code>MonadLiftT</code> instances are constructed: Lean can infer <code>MonadLiftT m o</code> from <code>MonadLiftT m n</code> and <code>MonadLift n o</code> (extending the chain on the right), but not from <code>MonadLift m n</code> and <code>MonadLiftT n o</code> (extending the chain on the left). Not sure if anything can be done about this.</p>",
        "id": 293876421,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1660734861
    },
    {
        "content": "<p>Nice observations, just one step lifting with <code>MonadLift</code> makes sense. </p>\n<p>Also the transitivity seems to behave the same as with coercion. <code>CoeTC A B</code> and <code>Coe B C</code> implies <code>CoeTC A C</code> but <code>Coe A B</code> and <code>CoeTC B C</code> does not imply <code>CoeTC A C</code>.</p>\n<p>But as a solution I like my approach <code>have _ : MonadLift IO m := ⟨inst.monadLift⟩</code> more as it is simpler and there is no need for <code>liftM</code> in <code>← fp.isDir</code>.</p>",
        "id": 294025999,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1660808180
    },
    {
        "content": "<p>As a general rule, always accept <code>MonadLiftT</code> and provide <code>MonadLift</code>.  My suggested solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">System</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">visitFiles</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">IO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fp</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">IO</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">·</span><span class=\"o\">)⟩</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">fp.isDir</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">dirEntry</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">fp.readDir</span> <span class=\"k\">do</span>\n      <span class=\"n\">visitFiles</span> <span class=\"n\">dirEntry.path</span> <span class=\"n\">f</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">f</span> <span class=\"n\">fp</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">visitFiles</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.currentDir</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IO.println</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294029631,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660810259
    }
]