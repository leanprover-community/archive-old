[
    {
        "content": "<p>In the \"Theorem proving with Lean4\" book there is an inductive for Vectors in the section on \"Inductive families\".  I looked at the standard library but no vectors there.  Did someone tried to implement the basic operations on vectors : append, fromList, toList, etc. ? I must confess I am stuck with these basic things.</p>",
        "id": 286927235,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1655823868
    },
    {
        "content": "<p>The area you are talking about are so called \"length indexed lists\" (indexed is a type theory, not a list term here), the standard library is however just a piece of code that the compiler requires in order to bootstrap itself right now so don't expect too fancy things from it. I have a few operations I translated from the coq code in CPDT (this book: <a href=\"http://adam.chlipala.net/cpdt/cpdt.pdf\">http://adam.chlipala.net/cpdt/cpdt.pdf</a>) here: <a href=\"https://github.com/hargoniX/cpdt-lean/blob/main/Cpdt/Chapter8/LengthIndexed.lean\">https://github.com/hargoniX/cpdt-lean/blob/main/Cpdt/Chapter8/LengthIndexed.lean</a> but nothing too fancy.</p>\n<p>If you have more concrete questions just ask here, we're happy to help.</p>",
        "id": 286934074,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655826458
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> this gives me a starting point ... I see that subtypes could be useful ...</p>",
        "id": 287030309,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1655891692
    },
    {
        "content": "<p>I've a follow-up question/kind of in the same spirit. If I wanted to express more complex properties in the type like this, say, for ordered lists, is there a way to encode it in the type, the same way? My  naive attempt at this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">OrderedList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrderedNil</span> <span class=\"o\">:</span> <span class=\"n\">OrderedList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrederedCons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">OrderedList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">OrderedNil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span> <span class=\"bp\">|</span> <span class=\"n\">OrderedCons</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I suppose that the construction isn't in scope yet in its own constraint. Is there a way to express a constraint like this? I suppose I can \"split it up\" like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OrderedList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">OrderedList</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>But that's somewhat unsatisfactory, as we don't get the same types of guarantees with the type as we do for length-indexed lists (i.e. correct by construction)</p>",
        "id": 287289598,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656046934
    },
    {
        "content": "<p>If you define a notion of membership for a list like mathlib (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Mem#doc\">docs4#List.Mem</a>) you can (in the cons case) say something like <code>(h : ∀ y, y ∈ as → a ≤ y)\n</code></p>",
        "id": 287298292,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656055527
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">OrderedList'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">OrderedList'</span> <span class=\"n\">α</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons_nil</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">OrderedList'</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">none</span>  <span class=\"o\">)</span>           <span class=\"o\">:</span> <span class=\"n\">OrderedList'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">OrderedList'</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">OrderedList'</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderedList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">OrderedList'</span> <span class=\"n\">α</span> <span class=\"n\">head</span>\n</code></pre></div>",
        "id": 287315070,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1656067280
    },
    {
        "content": "<p>ahh, you're \"remembering\" the item at the head with the type, that's a really cool solution!</p>",
        "id": 287338793,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656081338
    },
    {
        "content": "<p>What is the problem with defining inductively a Prop that the list is ordered and then OrderedList is just a Subtype of List?</p>\n<p>The only complicated thing is how to write a match statements with this type. You definitely want to match on the List and the Prop at the same time.</p>",
        "id": 287359513,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1656091155
    },
    {
        "content": "<p>You can try using <code>@[matchPattern]</code> to define your own patterns:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.precede</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IsOrdered</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">IsOrdered</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List.precede</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">IsOrdered</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">IsOrdered</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderedList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">IsOrdered</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">@[matchPattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">OrderedList.nil</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OrderedList</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[],</span> <span class=\"n\">IsOrdered.nil</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[matchPattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">OrderedList.cons</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.precede</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsOrdered</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OrderedList</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">IsOrdered.cons</span> <span class=\"n\">h</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matchTest</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OrderedList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrderedList.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrderedList.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 287383617,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1656103931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/287359513\">said</a>:</p>\n<blockquote>\n<p>What is the problem with defining inductively a Prop that the list is ordered and then OrderedList is just a Subtype of List?</p>\n<p>The only complicated thing is how to write a match statements with this type.</p>\n</blockquote>\n<p>This is the big problem with subtypes (and propositions in general) when it comes to programming. Most natural pattern matching, structural recursion, type class deriving (e.g., <code>Inhabited</code>), namespacing, etc. is broken and thus requires lots of proving and other manual work to fix (instead of things \"just working\").</p>\n<p>Don't get me wrong the tools (subtypes and proofs) are powerful, they are just often best reserved for when they are needed and use other, more convenient, approaches when possible (in the programming context at least).</p>",
        "id": 287415080,
        "sender_full_name": "Mac",
        "timestamp": 1656135857
    },
    {
        "content": "<p>I played a little bit more with vectors, still based on the following definition :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vnil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vcons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n   <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>... I have something I don't undestand perfectly below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vindex</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"n\">vcons</span> <span class=\"n\">e</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">hk</span><span class=\"o\">⟩,</span> <span class=\"n\">vcons</span> <span class=\"n\">_</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">vindex</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>Seems fine (from my naive point of view)...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">vcons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">4</span> <span class=\"n\">vnil</span><span class=\"o\">)))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">2</span> <span class=\"n\">v4</span> <span class=\"c1\">-- =&gt; 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">3</span> <span class=\"n\">v4</span> <span class=\"c1\">-- =&gt; 4</span>\n</code></pre></div>\n<p>But ... oops</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">4</span> <span class=\"n\">v4</span> <span class=\"c1\">-- =&gt; 1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">5</span> <span class=\"n\">v4</span> <span class=\"c1\">-- =&gt; 2</span>\n</code></pre></div>\n<p>... not exactly what I intended <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> <br>\nCould someone explain me what happens here (probably this is not the <code>Fin</code> I imagined) ?<br>\nAlso if you have a better proposition for <code>vindex</code> I would be interested</p>",
        "id": 288040086,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1656600761
    },
    {
        "content": "<p>Literals for <code>Fin n</code> are interpreted modulo <code>n</code>. So <code>4 : Fin 4</code> is 0, <code>5 : Fin 4</code>is 1. Arguably Lean should throw an error instead, but that doesn't play well with how these literals are implemented.</p>",
        "id": 288041048,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1656601148
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  I understand now the issue.  Probably I will play a little bit with a variant, such as <code>Bound n</code>  with the behavior I'm expecting   (a type error).   However then I don't really understand when one would like to use <code>Fin</code> (at least in my understanding on why and when it's useful...).</p>",
        "id": 288056163,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1656607679
    },
    {
        "content": "<p>When you want to make mathematical arguments about numbers mod n of course.</p>",
        "id": 288057686,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656608353
    },
    {
        "content": "<p>There are two potentially separate problems at play here:</p>\n<ol>\n<li>What should <code>5 : fin 4</code> parse as?</li>\n<li>What is the value of <code>(3 : fin 4) + (2 : fin 4)</code>?</li>\n</ol>\n<p>I think there are technical limitations which make  it hard to emit an error for <code>1</code>, while 2 is chosen because it's as good an option as any</p>",
        "id": 288058327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656608607
    },
    {
        "content": "<p>... and then maybe <code>(Mod n)</code> would be a better name ?   (Fin is already quite connoted in dependent type theory, no ?)</p>",
        "id": 288059612,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1656609200
    },
    {
        "content": "<p>We should have a glossary or faq entry for the nuances of fin, vs bounded (unallowed) finite numbers, vs ones with saturated ops, etc.</p>",
        "id": 288061363,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656610067
    },
    {
        "content": "<p>It should also be noted that <code>Fin</code> is used to implemented native fixed-sized (finite) unsigned integers -- <code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, <code>UInt64</code>. Mathematically, though, that is also just modular arithmetic (assuming wrapping  under/overflow as opposed to trapping under/overflow), so the name <code>Mod n</code> would still fit there too.</p>",
        "id": 288084871,
        "sender_full_name": "Mac",
        "timestamp": 1656621858
    },
    {
        "content": "<p>Also when indexing arrays shouldn't we use some variant of <code>Fin n</code> that is based on <code>USize</code> instead of <code>Nat</code>. Why pay for arbitrary large integers if they can be a meaningful memory address?</p>",
        "id": 288090306,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1656624735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> <code>Nat</code> only uses arbitrary-sized integers if the value is over a certain threshold (e.g., word-size - 1 bits) otherwise it only consumes one word. Also, many of the <code>Array</code> functions do take advantage of the fact that Arrays are at max <code>USize</code>. There is even a variant of <code>Array.get</code> that does just that (<code>Array.uget</code>).</p>",
        "id": 288099447,
        "sender_full_name": "Mac",
        "timestamp": 1656630241
    },
    {
        "content": "<p>Sure, but if you look at the generated C code then <code>Nat</code> gets passed through a pointer but <code>USize</code> is passed by value.</p>",
        "id": 288099602,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1656630328
    },
    {
        "content": "<p>One of the advantages of the <code>Conditional</code> <a href=\"#narrow/stream/270676-lean4/topic/String.2EgetOp/near/287930524\">approach</a> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> suggested for <code>getOp</code> is that it could use <code>USize</code> instead of <code>Fin</code> for <code>Array</code> indexing.</p>",
        "id": 288099641,
        "sender_full_name": "Mac",
        "timestamp": 1656630344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/288099602\">said</a>:</p>\n<blockquote>\n<p>Sure, but if you look at the generated C code then <code>Nat</code> gets passed through a pointer but <code>USize</code> is passed by value.</p>\n</blockquote>\n<p>The <code>lean_object*</code> is not actually always a pointer. It can actually be either <code>lean_object*</code> OR a raw <code>Nat</code> (if the lower order bit is 1).</p>",
        "id": 288099736,
        "sender_full_name": "Mac",
        "timestamp": 1656630409
    },
    {
        "content": "<p>Such a pointer trick is actually a familiar idea in language design (e.g., Ruby's C implementation does a similar trick for <code>Fixnum</code>, <code>True</code>, <code>False</code>, and <code>Nil</code>).</p>",
        "id": 288099863,
        "sender_full_name": "Mac",
        "timestamp": 1656630506
    },
    {
        "content": "<p>Ohh I was not aware of that. I saw the pointer and updates on the reference counter in the C code. Assumed that it is not ideal and should use <code>USize</code> instead.</p>",
        "id": 288100496,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1656631029
    },
    {
        "content": "<p>I have a simple vector datatype used for a Lean crypto library that I am working on in my spare time.  Polymorphic vectors are in this <a href=\"https://github.com/joehendrix/lean-crypto/blob/main/lib/Crypto/Vector.lean\">file</a>, and are a subtype of Array.  There's also byte vectors and bitvectors (which use <code>Fin</code>).</p>",
        "id": 288102986,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1656633009
    },
    {
        "content": "<p>It'd be nice to have a rich set of linear algebra operations and transforms such as scans for array-oriented programming.</p>",
        "id": 288103035,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1656633081
    },
    {
        "content": "<p>Here's an ugly version ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vindex</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">vcons</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">vcons</span> <span class=\"n\">_</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n                                  <span class=\"bp\">@</span><span class=\"n\">vindex</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">p'</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">vcons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">4</span> <span class=\"n\">vnil</span><span class=\"o\">)))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"c1\">-- =&gt; 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"c1\">-- =&gt; 4</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">vindex</span> <span class=\"mi\">4</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"c1\">-- crash !</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"bp\">-</span> <span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">]</span> <span class=\"n\">Request</span> <span class=\"n\">textDocument</span><span class=\"bp\">/</span><span class=\"n\">foldingRange</span> <span class=\"n\">failed.</span>\n  <span class=\"n\">Message</span><span class=\"o\">:</span> <span class=\"n\">Server</span> <span class=\"n\">process</span> <span class=\"n\">for</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"bp\">///&lt;...&gt;/</span><span class=\"n\">Vectors.lean</span> <span class=\"n\">crashed</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">stack</span> <span class=\"n\">overflow</span> <span class=\"k\">in</span> <span class=\"n\">user</span> <span class=\"n\">code.</span>\n  <span class=\"n\">Code</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">32603</span>\n</code></pre></div>",
        "id": 288165817,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1656680509
    },
    {
        "content": "<p>(no need to say that I navigate by sight <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 288165908,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1656680547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506086\">@Frederic Peschanski</span> Could you please try the Lean latest nightly build? If it does not fix the problem, could you please create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?<br>\nI tried the following using the code fragments above, and it works in the latest nightly build</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vnil</span>  <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vcons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n   <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Vector</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vindex</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">vcons</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">vcons</span> <span class=\"n\">_</span> <span class=\"n\">v'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n                                  <span class=\"bp\">@</span><span class=\"n\">vindex</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">p'</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">vcons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">vcons</span> <span class=\"mi\">4</span> <span class=\"n\">vnil</span><span class=\"o\">)))</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"c1\">-- =&gt; 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">vindex</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"c1\">-- =&gt; 4</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">vindex</span> <span class=\"mi\">4</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"c1\">-- vindex 4 ?m v : Nat</span>\n</code></pre></div>",
        "id": 288166978,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656681091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I've just <code>elan update</code>'d and I can confirm it does not crash anymore with <code>4.0.0-nightly-2022-07-01</code>, sorry for the false alarm.</p>",
        "id": 288171588,
        "sender_full_name": "Frederic Peschanski",
        "timestamp": 1656683334
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 291113711,
        "sender_full_name": "cognivore",
        "timestamp": 1658957778
    },
    {
        "content": "<p>Vector isn't in Lean 4 yet</p>",
        "id": 291425908,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659183424
    },
    {
        "content": "<p>Is contribution welcome or not (adding Vector to Init.Data.Vector)?</p>",
        "id": 291425915,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659183461
    },
    {
        "content": "<p>Contributions to the Core libraries are in general not welcome unless the additions are required for something in the compilers since the todo list of the compiler team is overhelming already. You can contribute it to mathlib4 though</p>",
        "id": 291425992,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659183587
    },
    {
        "content": "<p>mathlib still don't have Vector? I was suprised</p>",
        "id": 291426046,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659183658
    },
    {
        "content": "<p>oh I think Github added a \"clone master branch only\" (option) when forking</p>",
        "id": 291426066,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659183696
    },
    {
        "content": "<p>Mathlib4 is still very rudimentary at this point.</p>\n<p>Such PRs are also welcome here: <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean\">https://github.com/yatima-inc/YatimaStdLib.lean</a>. We're focusing on algorithms and data structures, mostly</p>",
        "id": 291426120,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659183752
    },
    {
        "content": "<p>What's Yamata Inc?</p>",
        "id": 291426188,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659183872
    },
    {
        "content": "<p><a href=\"https://github.blog/changelog/2022-07-27-you-can-now-fork-a-repo-and-copy-only-the-default-branch/\">https://github.blog/changelog/2022-07-27-you-can-now-fork-a-repo-and-copy-only-the-default-branch/</a></p>",
        "id": 291426284,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659184061
    },
    {
        "content": "<p>I have a bad feeling about this</p>",
        "id": 291426289,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659184068
    },
    {
        "content": "<p>Why? Big projects tend to have 100s of branches and if you need any of them you can still fetch them from the other remote regardless</p>",
        "id": 291426357,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659184143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515610\">@Locria Cyber</span> Yatima Inc is an R&amp;D company lead by <span class=\"user-mention\" data-user-id=\"432681\">@John Burnham</span> that develops open source technology, currently using Lean 4 in its stack</p>",
        "id": 291426430,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659184242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291426357\">said</a>:</p>\n<blockquote>\n<p>Why? Big projects tend to have 100s of branches and if you need any of them you can still fetch them from the other remote regardless</p>\n</blockquote>\n<p>It's on github clone, not github to local.</p>\n<p>Maybe Github is paving the way for its clound-based \"workspace\".</p>",
        "id": 291426755,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659184720
    },
    {
        "content": "<p>Also, I had some trouble here. Seems like <code>::</code> and <code>[term*]</code>must be a typeclass in core for this to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"s2\">\" :: \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"n\">Vector.nil</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"n\">Vector.nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"bp\">?</span><span class=\"n\">m.1893</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.1894</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n  <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"bp\">?</span><span class=\"n\">m.1958</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.1914</span>\n</code></pre></div>",
        "id": 291426872,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659184818
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"n\">Vector.nil</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div>",
        "id": 291426933,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659184892
    },
    {
        "content": "<p>I do need to unify <code>a</code>'s type with declaration though.</p>",
        "id": 291427025,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659184964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291426933\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"n\">Vector.nil</span>\n</code></pre></div>\n<p>error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span>\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is the way it is supposed to work, the idea is that if you explicitly denote the type of <code>a</code> you are supposed to provide all arguments to that type explicitly which is a good thing IMO, if you are doing an explicit type you should go through with it</p>",
        "id": 291427151,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659185118
    },
    {
        "content": "<p>what if I do want to get the length from compiler?</p>",
        "id": 291427291,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659185382
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">::</span> <span class=\"n\">Vector.nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Nat</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this would work as long as <code>::</code> isn't TC</p>",
        "id": 291427655,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659185828
    },
    {
        "content": "<p>thanks</p>",
        "id": 291428413,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659186841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span>\n<span class=\"n\">habs'</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">bs</span>\n</code></pre></div>",
        "id": 291428453,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659186848
    },
    {
        "content": "<p>question: how do I prove this?</p>",
        "id": 291428457,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659186853
    },
    {
        "content": "<p><code>::</code> is the constructor for Vect</p>",
        "id": 291428478,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659186901
    },
    {
        "content": "<p>by injectivity of constructor applications:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h1</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 291428552,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659186970
    },
    {
        "content": "<p>thanks!</p>",
        "id": 291428795,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187347
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"o\">(</span><span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sizeOf</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Is this a correct use of <code>SizeOf</code>?</p>",
        "id": 291428804,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187361
    },
    {
        "content": "<p>Lean should have already synthesized a SizeOf instance for you automatically that does at least yield the same result though via structural recursion instead of directly getting the <code>n</code> argument.</p>",
        "id": 291429028,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659187744
    },
    {
        "content": "<p>ok</p>",
        "id": 291429126,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187912
    },
    {
        "content": "<p>Ah actually no it didnt</p>",
        "id": 291429127,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659187915
    },
    {
        "content": "<p>I think by default it's all 0</p>",
        "id": 291429134,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187922
    },
    {
        "content": "<p>Also, why is <code>Fin</code> so complicated?</p>",
        "id": 291429178,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187953
    },
    {
        "content": "<p>In Idris2, all the data types are their own type, and it's easier to reason about.</p>",
        "id": 291429190,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187974
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span> <span class=\"n\">for</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">isLt'</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n</code></pre></div>",
        "id": 291429193,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659187980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429134\">said</a>:</p>\n<blockquote>\n<p>I think by default it's all 0</p>\n</blockquote>\n<p>That is not correct, yes the default SizeOf instance is <code>0</code> but lean generate an additional SizeOf instance for all inductive and structure declarations automatically while elaborating them, in the case of your Vector this is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Vector.rec</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">a_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a_ih</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 291429209,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188016
    },
    {
        "content": "<p>ok</p>",
        "id": 291429262,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188069
    },
    {
        "content": "<p>Maybe I should make Nat literal its own type class, and make a new simpler <code>Fin</code>.</p>",
        "id": 291429287,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429178\">said</a>:</p>\n<blockquote>\n<p>Also, why is <code>Fin</code> so complicated?</p>\n</blockquote>\n<p><code>Fin</code> isn't complicated its definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">LT.lt</span> <span class=\"n\">val</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>which is pretty printed more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>It's just that arguing about <code>Fin</code> while doing recursion on the <code>n</code> argument is icky</p>",
        "id": 291429289,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429287\">said</a>:</p>\n<blockquote>\n<p>Maybe I should make Nat literal its own type class, and make a new simpler <code>Fin</code>.</p>\n</blockquote>\n<p>Nat literals are already managed by the <code>OfNat</code> typeclass</p>",
        "id": 291429292,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188143
    },
    {
        "content": "<p>interesting</p>",
        "id": 291429342,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188177
    },
    {
        "content": "<p>your goal earlier should be something like <code>Nat.lt_of_succ_lt_succ prf</code></p>",
        "id": 291429350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188213
    },
    {
        "content": "<p>Here's <code>Fin</code> in Idris2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"n\">Data.Fin.Fin</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Numbers</span> <span class=\"n\">strictly</span> <span class=\"n\">less</span> <span class=\"n\">than</span> <span class=\"n\">some</span> <span class=\"n\">bound.</span> <span class=\"n\">The</span> <span class=\"n\">name</span> <span class=\"n\">comes</span> <span class=\"k\">from</span> <span class=\"s2\">\"finite sets\"</span><span class=\"bp\">.</span>\n\n  <span class=\"n\">It's</span> <span class=\"n\">probably</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">good</span> <span class=\"n\">idea</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">Fin</span><span class=\"bp\">`</span> <span class=\"n\">for</span> <span class=\"n\">arithmetic</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">they</span> <span class=\"n\">will</span> <span class=\"n\">be</span>\n  <span class=\"n\">exceedingly</span> <span class=\"n\">inefficient</span> <span class=\"n\">at</span> <span class=\"n\">run</span> <span class=\"n\">time.</span>\n  <span class=\"bp\">@</span> <span class=\"n\">n</span> <span class=\"n\">the</span> <span class=\"n\">upper</span> <span class=\"n\">bound</span>\n  <span class=\"n\">Totality</span><span class=\"o\">:</span> <span class=\"n\">total</span>\n  <span class=\"n\">Visibility</span><span class=\"o\">:</span> <span class=\"n\">public</span> <span class=\"kn\">export</span>\n  <span class=\"n\">Constructors</span><span class=\"o\">:</span>\n    <span class=\"n\">FZ</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"n\">FS</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291429352,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188219
    },
    {
        "content": "<p>This is much easier to reason about</p>",
        "id": 291429358,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188229
    },
    {
        "content": "<p>Because I only need to get from <code>Fin (S k)</code> to <code>Fin k</code> (in recursion).</p>",
        "id": 291429372,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188277
    },
    {
        "content": "<p>It's a lot harder to work with equalities in the index with that representation</p>",
        "id": 291429381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188282
    },
    {
        "content": "<p>in mathlib there are API lemmas for the FZ and FS constructors</p>",
        "id": 291429421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188295
    },
    {
        "content": "<p>it's pretty easy to define them</p>",
        "id": 291429433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188310
    },
    {
        "content": "<p>equalitiies in the index?</p>",
        "id": 291429434,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188316
    },
    {
        "content": "<p>I imagine you could even build a custom induction principle that reflects them, there is no reason to build a new type really</p>",
        "id": 291429439,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188323
    },
    {
        "content": "<p>stuff like <code>Fin (m + n) -&gt; Fin (n + m)</code></p>",
        "id": 291429449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188340
    },
    {
        "content": "<p>I'm newbie to Lean though</p>",
        "id": 291429454,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429449\">said</a>:</p>\n<blockquote>\n<p>stuff like <code>Fin (m + n) -&gt; Fin (n + m)</code></p>\n</blockquote>\n<p>You just need to prove that <code>m + n = n + m</code>, and they are the same type.</p>",
        "id": 291429467,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188383
    },
    {
        "content": "<p>you have to be advanced type tetris master to actually come up with a proof of that using FZ and FS</p>",
        "id": 291429469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188391
    },
    {
        "content": "<p>not really</p>",
        "id": 291429514,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188413
    },
    {
        "content": "<p>Advanced type tetris master is going in my type theory urban dictionary</p>",
        "id": 291429520,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188437
    },
    {
        "content": "<p>Idris has this <code>cast : (a: A) -&gt; (A = B) -&gt; B</code></p>",
        "id": 291429525,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188447
    },
    {
        "content": "<p>You can prove it using <code>cast</code> but then you don't know e.g. how the value computes on successor</p>",
        "id": 291429527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188449
    },
    {
        "content": "<p>It's literally the same type though</p>",
        "id": 291429532,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188472
    },
    {
        "content": "<p>you won't be able to apply equation lemmas for other recursive definitions</p>",
        "id": 291429534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188489
    },
    {
        "content": "<p>what's equation lemma</p>",
        "id": 291429540,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188501
    },
    {
        "content": "<p>we usually call this DTT hell</p>",
        "id": 291429543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188510
    },
    {
        "content": "<p>equation lemmas are the definitional equalities that follow from a definition by pattern matching</p>",
        "id": 291429587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188533
    },
    {
        "content": "<p>I've been avoiding using tactics because I don't quite understand the magic.</p>",
        "id": 291429598,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188562
    },
    {
        "content": "<p>You can say that I'm a type tetris master</p>",
        "id": 291429602,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188573
    },
    {
        "content": "<p>The advantage of the structure definition of <code>Fin</code> is that you can do all the \"real\" reasoning on a non-dependent type, namely <code>Nat</code></p>",
        "id": 291429606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188580
    },
    {
        "content": "<p>Yes, this style of programming you are using is seen mostly in idris and agda</p>",
        "id": 291429621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429598\">said</a>:</p>\n<blockquote>\n<p>I've been avoiding using tactics because I don't quite understand the magic.</p>\n</blockquote>\n<p>I'm afraid that won't really get you too far in the Lean eco system, we are pretty focused on tactics for non trivial term level proofs</p>",
        "id": 291429627,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188617
    },
    {
        "content": "<p>The situation with vectors is pretty similar BTW. In lean 4 they aren't defined, but the lean 3 definition of <code>Vector A n</code> is <code>{l : List A // l.length = n}</code></p>",
        "id": 291429694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188709
    },
    {
        "content": "<p>so all the vector operations are just list operations tupled with a proof that they preserve lengths</p>",
        "id": 291429711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188750
    },
    {
        "content": "<p>and you don't have any problems with e.g. associativity of vector append</p>",
        "id": 291429757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188788
    },
    {
        "content": "<p>This also makes the runtime representation nicer right? With the indexed variant each node is also carrying the rest of the length around</p>",
        "id": 291429766,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188816
    },
    {
        "content": "<p>Indeed</p>",
        "id": 291429772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188824
    },
    {
        "content": "<p>I think agda has a mechanism to avoid this using ghost arguments</p>",
        "id": 291429778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188838
    },
    {
        "content": "<p>not sure about idris</p>",
        "id": 291429782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188844
    },
    {
        "content": "<p>Idris has beta reduction for Nat-like and  (i forgot the name) for List-like</p>",
        "id": 291429791,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188874
    },
    {
        "content": "<p>(runtime representation)</p>",
        "id": 291429831,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188884
    },
    {
        "content": "<p>It doesn't have the <code>Array</code> type in Lean, because its <code>List</code> is just as fast</p>",
        "id": 291429845,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188921
    },
    {
        "content": "<p>in lean 4 the improvement of runtime representation for <code>Fin</code> is even more stark. the FZ/FS representation is a unary linked list, while the structure over Nat is a zero-cost wrapper around a GMP bignum with a direct numeral representation for numbers less than I think 2^63</p>",
        "id": 291429854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188944
    },
    {
        "content": "<p>Idris compile to scheme, so it's different</p>",
        "id": 291429857,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429845\">said</a>:</p>\n<blockquote>\n<p>It doesn't have the <code>Array</code> type in Lean, because its <code>List</code> is just as fast</p>\n</blockquote>\n<p>How can a linked list be just as fast as a slice of memory?</p>",
        "id": 291429864,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659188966
    },
    {
        "content": "<p>scheme magic?</p>",
        "id": 291429866,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659188980
    },
    {
        "content": "<p>does it have O(1) push?</p>",
        "id": 291429873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659188999
    },
    {
        "content": "<p>push to the <em>end</em></p>",
        "id": 291429916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189010
    },
    {
        "content": "<p>never tried</p>",
        "id": 291429919,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189016
    },
    {
        "content": "<p>need to check Chez Scheme's source code to know</p>",
        "id": 291429942,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189066
    },
    {
        "content": "<p>a google search turns up <a href=\"https://www.idris-lang.org/docs/idris2/current/contrib_docs/docs/Data.Linear.Array.html\">https://www.idris-lang.org/docs/idris2/current/contrib_docs/docs/Data.Linear.Array.html</a></p>",
        "id": 291429961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189114
    },
    {
        "content": "<p>that's a type class</p>",
        "id": 291430003,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189131
    },
    {
        "content": "<p><code>interface</code></p>",
        "id": 291430005,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189134
    },
    {
        "content": "<p>there's a <code>data</code> right after</p>",
        "id": 291430012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189153
    },
    {
        "content": "<p>that's in contrib (akin to mathlib4)</p>",
        "id": 291430019,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189170
    },
    {
        "content": "<p>okay, is that a disqualification?</p>",
        "id": 291430031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189191
    },
    {
        "content": "<p>They seem to have a lot of array thingies below</p>",
        "id": 291430036,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659189200
    },
    {
        "content": "<p>there's no <code>push</code> though</p>",
        "id": 291430050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189221
    },
    {
        "content": "<p>it's probably incomplete (again, things in <code>contrib</code> are like that)</p>",
        "id": 291430098,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189244
    },
    {
        "content": "<p><a href=\"https://idris2-quickdocs.surge.sh/\">https://idris2-quickdocs.surge.sh/</a></p>",
        "id": 291430102,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189246
    },
    {
        "content": "<p>Even third-party packages are better than <code>contrib</code>. <code>contrib</code> is the historical artifact before Idris2 core team decided it's a bad idea to let anything in the main repo.</p>",
        "id": 291430118,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189302
    },
    {
        "content": "<p>I would be generally doubtful that a fully functional <code>List</code> type is going to get array performance \"by magic\"</p>",
        "id": 291430122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189305
    },
    {
        "content": "<p>idk<br>\nI assume that list operation in LISP is fast enough</p>",
        "id": 291430132,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189335
    },
    {
        "content": "<p>It's a linked list</p>",
        "id": 291430134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189352
    },
    {
        "content": "<p>But that's not how memory works, as soon as you have a linked list cache performance <em>sucks</em></p>",
        "id": 291430140,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659189361
    },
    {
        "content": "<p>probably not in memory</p>",
        "id": 291430156,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189362
    },
    {
        "content": "<p>no, it really is</p>",
        "id": 291430182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189372
    },
    {
        "content": "<p>Do you think that popular scheme implementations would only use linked list (in C)?</p>",
        "id": 291430190,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189405
    },
    {
        "content": "<p>you can sometimes optimize it to be a linked list of arrays but there are lots of operations that will break up the arrays</p>",
        "id": 291430193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189410
    },
    {
        "content": "<p>(I know because I've written an optimized lisp interpreter)</p>",
        "id": 291430205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189446
    },
    {
        "content": "<p>Idris can't compile to C good enough yet.</p>",
        "id": 291430209,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189449
    },
    {
        "content": "<p>The mature backends are Scheme/Racket/Javascript</p>",
        "id": 291430236,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189462
    },
    {
        "content": "<p>Scheme has an actual vector type though</p>",
        "id": 291430250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189481
    },
    {
        "content": "<p>lists are lists and arrays are arrays in scheme</p>",
        "id": 291430302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189498
    },
    {
        "content": "<p>yes</p>",
        "id": 291430311,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189510
    },
    {
        "content": "<p>pretty sure racket does too</p>",
        "id": 291430315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189518
    },
    {
        "content": "<p>and javascript has a whole zoo</p>",
        "id": 291430319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189529
    },
    {
        "content": "<p>so I don't see how a language with only one <code>List</code> type is going to be able to lower this to both lists and arrays</p>",
        "id": 291430337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189555
    },
    {
        "content": "<p>not both</p>",
        "id": 291430437,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189628
    },
    {
        "content": "<p>it's mapped to Scheme's list</p>",
        "id": 291430444,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189636
    },
    {
        "content": "<p>which is why I don't think you will get O(1) push with idris <code>List</code></p>",
        "id": 291430458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659189650
    },
    {
        "content": "<p>Maybe not</p>",
        "id": 291430635,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659189875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/vectors.20in.20lean4/near/291429525\">said</a>:</p>\n<blockquote>\n<p>Idris has this <code>cast : (a: A) -&gt; (A = B) -&gt; B</code></p>\n</blockquote>\n<p>How do you do something like this (in Lean)?</p>",
        "id": 291430767,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659190078
    },
    {
        "content": "<p>You just do it: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cast#doc\">docs4#cast</a></p>",
        "id": 291431386,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659190799
    }
]