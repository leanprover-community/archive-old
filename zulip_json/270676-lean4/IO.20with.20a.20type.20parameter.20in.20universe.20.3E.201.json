[
    {
        "content": "<p>Hi, I'm trying to create the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Wrapper</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pure</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Effect</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>which fails because <code>IO</code> has type <code>Type → Type</code>.</p>\n<p>Is there a way to overcome this issue?</p>",
        "id": 289339344,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1657638816
    },
    {
        "content": "<p>Relevant: <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a></p>",
        "id": 289340161,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1657639105
    },
    {
        "content": "<p>Which I should be able to look into again. I left it unfinished because of more pressing problems.</p>",
        "id": 289341217,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1657639548
    },
    {
        "content": "<p>I managed to make it work with liberal use of <code>ULift</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Wrapper</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Pure</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Effect</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">IO</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">w</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Pure</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">next</span> <span class=\"n\">a</span>\n\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Effect</span> <span class=\"n\">lio</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">io</span> <span class=\"o\">:=</span> <span class=\"n\">ULift.down.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">lio</span>\n      <span class=\"n\">io.bind</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">ULift.up.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289375592,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1657654904
    },
    {
        "content": "<p>Right. If this is sufficient for your needs, then it's likely the best option. Note that compared to your original definition you are limited to computing in <code>Type</code> while in the IO monad. I might be wrong here, but this looks like a free(r) monad, and I believe this typing will make it hard for you to bind with effects. You can see how already your continuation is restricted to <code>B: Type</code>. If you want to use a <code>B: Type v</code> or simply a <code>Wrapper B</code> to continue the program, you will find yourself matching <code>B</code> against a universe lift of <code>A: Type</code> in the <code>Effect</code> constructor, so basically you're grounded at Type 0.</p>",
        "id": 289377071,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1657655641
    },
    {
        "content": "<p>It's good for now, thanks!</p>",
        "id": 289387196,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1657660902
    }
]