[
    {
        "content": "<p>For example, I want to have an expression on real</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">r</span>  <span class=\"bp\">≠</span>  <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>How to do the <code>r ≠  0</code> part in the <code>inv</code> arm?</p>",
        "id": 288238451,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656723084
    },
    {
        "content": "<p>I mean, <code>Expr</code> type must be defined before we have any <code>Eq</code> instance on it. But it seems that only mutually inductive type is allowed in <code>mutual</code> block, so there is no way to define such an instance?</p>",
        "id": 288238905,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656723634
    },
    {
        "content": "<p>(do you mean <code>(e : Expr)  -&gt; e  ≠  0 -&gt; Expr</code>?)</p>",
        "id": 288239085,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656723863
    },
    {
        "content": "<p>Oh, yes. editted.</p>",
        "id": 288239171,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656723967
    },
    {
        "content": "<p>I think the way I was recommended to do this before is to separate concerns -- define your inductive type, without constraining valid values, and then define a predicate for valid values.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Real</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">validExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">validExpr</span> <span class=\"n\">e₁</span> <span class=\"bp\">∧</span> <span class=\"n\">validExpr</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">validExpr</span> <span class=\"n\">e₁</span> <span class=\"bp\">∧</span> <span class=\"n\">validExpr</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">validExpr</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">validExpr</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 288239273,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656724124
    },
    {
        "content": "<p>and then, you can write functions which take <code>(e : Expr) -&gt; validExpr e -&gt; ...</code> and match on both simultaneously, which gives you a proof that <code>eval e ≠ 0</code> in the <code>.inv e</code> case</p>",
        "id": 288239304,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656724188
    },
    {
        "content": "<p>Thanks! That's exactly what I need.</p>",
        "id": 288239539,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656724500
    },
    {
        "content": "<p>I also have another question. The original use of this is to have symbolic computation on real, while mathlib3 already have some applications, e.g. the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv\">docs#deriv</a> simplifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">sin</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">cos</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But I just couldn't figure out how it is done. Is this simpilfier achieved on meta level? And can we extend it to automatic symbolic computation?</p>",
        "id": 288239958,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1656725118
    }
]