[
    {
        "content": "<p>In mathlib3, we sometimes protect inductive constructors like so (from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_rel.inl/src\">src#lift_rel.inl</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Lifts pointwise two relations between `α` and `γ` and between `β` and `δ` to a relation between</span>\n<span class=\"sd\">`α ⊕ β` and `γ ⊕ δ`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">lift_rel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">⊕</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">lift_rel</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">lift_rel</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">protected</span><span class=\"o\">]</span> <span class=\"n\">lift_rel.inl</span> <span class=\"n\">lift_rel.inr</span>\n</code></pre></div>\n<p>What would be the equivalent for lean4 in this snippet?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Sum</span>\n\n<span class=\"sd\">/-- Lifts pointwise two relations between `α` and `γ` and between `β` and `δ` to a relation between</span>\n<span class=\"sd\">`α ⊕ β` and `γ ⊕ δ`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">LiftRel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sum</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">LiftRel</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">LiftRel</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Sum</span>\n</code></pre></div>",
        "id": 305746590,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666587267
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Lifts pointwise two relations between `α` and `γ` and between `β` and `δ` to a relation between</span>\n<span class=\"sd\">`α ⊕ β` and `γ ⊕ δ`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">LiftRel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sum</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">inl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">LiftRel</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"kn\">protected</span> <span class=\"n\">inr</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">LiftRel</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305750488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666590197
    }
]