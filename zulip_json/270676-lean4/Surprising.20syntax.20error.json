[
    {
        "content": "<p>I wouldn't have guessed where the error is reported here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">frob</span> <span class=\"mi\">5</span> <span class=\"k\">else</span> <span class=\"n\">frob</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The error is <code>expected 'else'</code> right at the 5.  It works if you write <code>(frob 5)</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>But apparently I have no intuition for indentation-sensitive syntax.</p>\n</div></div>\n</div></div>",
        "id": 230054650,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615565202
    },
    {
        "content": "<p>Interestingly the same error doesn't occur when the function is written like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">frob</span> <span class=\"mi\">5</span> <span class=\"k\">else</span> <span class=\"n\">frob</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230067291,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1615569966
    },
    {
        "content": "<p>Might be a much simpler thing, but I also noticed a bit of differing syntactical behavior with <code>else</code>, specifically this works: <code>#check (do if true then return PUnit.unit : PUnit)</code> because it macro expands to an <code>if/then/else</code> with the else present, but otherwise outside of <code>do</code> the <code>else</code> is always required</p>",
        "id": 230070028,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615571106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> The weird error message is due to the whitespace-sensitive indentation rules. I added a missing constraint, and the error message is now at the <code>if</code>, and it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">alternative</span> <span class=\"n\">right</span><span class=\"bp\">-</span><span class=\"n\">hand</span><span class=\"bp\">-</span><span class=\"n\">side</span> <span class=\"n\">to</span> <span class=\"n\">start</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"n\">column</span> <span class=\"n\">greater</span> <span class=\"n\">than</span> <span class=\"n\">or</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">corresponding</span> <span class=\"sc\">'|'</span>\n</code></pre></div>\n<p>Does it make sense to you?</p>",
        "id": 230074750,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615573029
    },
    {
        "content": "<p>Anything that points towards indentation is great.  I didn't make that connection at all.</p>",
        "id": 230075013,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615573172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20syntax.20error/near/230070028\">said</a>:</p>\n<blockquote>\n<p>Might be a much simpler thing, but I also noticed a bit of differing syntactical behavior with <code>else</code>, specifically this works: <code>#check (do if true then return PUnit.unit : PUnit)</code> because it macro expands to an <code>if/then/else</code> with the else present, but otherwise outside of <code>do</code> the <code>else</code> is always required</p>\n</blockquote>\n<p>These are two different <code>if</code>-terms. You should view the <code>do</code>-notation as a domain-specific language for writing effectful code. The <code>if</code> without an <code>else</code> is the equivalent of Haskell <code>when</code>.</p>",
        "id": 230075479,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615573384
    },
    {
        "content": "<p>I see, thanks, that makes sense!</p>",
        "id": 230075665,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615573462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20syntax.20error/near/230075013\">said</a>:</p>\n<blockquote>\n<p>Anything that points towards indentation is great.  I didn't make that connection at all.</p>\n</blockquote>\n<p>Do you think this restriction is reasonable? There are different ways to address this issue, but we don't want to give up on whitespace sensitivity.<br>\nIf you are interested I can describe the parser combinators we use to specify these constraints.</p>",
        "id": 230076140,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615573674
    },
    {
        "content": "<p>It's on one line though. Why would whitespace sensitivity come in? I thought that was just for multiline expressions</p>",
        "id": 230077759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574381
    },
    {
        "content": "<p>it's not even in a <code>do</code> block</p>",
        "id": 230077924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574446
    },
    {
        "content": "<p>It is two lines. The alternative <code>| i =&gt;</code> starts in the first line.</p>",
        "id": 230077935,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615574453
    },
    {
        "content": "<p>There are always tradeoffs when it comes to indentation-sensitive syntax.  I think we can get used to it.</p>",
        "id": 230077950,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615574461
    },
    {
        "content": "<p>is the <code>else</code> somehow associating to the <code>| i =&gt;</code>?</p>",
        "id": 230077991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574478
    },
    {
        "content": "<p>that's the part I'm not getting</p>",
        "id": 230078003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574488
    },
    {
        "content": "<p>Or is it just that the <code>if</code> starts in the first column and you aren't allowed to do that anymore (at least if you use the equation compiler syntax)</p>",
        "id": 230078186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574563
    },
    {
        "content": "<blockquote>\n<p>Do you think this restriction is reasonable? There are different ways to address this issue, but we don't want to give up on whitespace sensitivity.</p>\n</blockquote>\n<p>I at least would like to find a way to preserve this kind of pattern (assuming we can figure out what the pattern is) while also keeping whitespace sensitivity when code is formatted to take advantage of it</p>",
        "id": 230078492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The issue is not really the <code>if</code>, but the application <code>frob 5</code>. The application parser enforces that the next argument must occur in a column greater than the one in \"the context\". This is how we can parse code such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.length_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">as.length.succ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Eq</span> <span class=\"o\">((</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lengthAux</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as.lengthAux</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>       <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">n.succ</span>\n  <span class=\"n\">aux</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"mi\">0</span> <span class=\"c1\">-- This is not part of the previous application</span>\n</code></pre></div>",
        "id": 230078685,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615574785
    },
    {
        "content": "<p>The \"context\" is updated using the combinator <code>withPosition p</code> where <code>p</code> is a parser</p>",
        "id": 230078956,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615574915
    },
    {
        "content": "<p>One observation I can make about the difference between that example and Gabriel's is that in your example the <code>| .. =&gt;</code> is the first thing on the line, i.e. it has higher indentation than the <code>aux a as 0</code> on the following line</p>",
        "id": 230079002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615574938
    },
    {
        "content": "<p>What kind of trouble do we get into if we use the first non-whitespace character in the line instead of the <code>|</code> character to define the baseline?</p>",
        "id": 230079248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615575050
    },
    {
        "content": "<p>One thing that comes to mind is alignment like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 230079381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615575107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20syntax.20error/near/230078492\">said</a>:</p>\n<blockquote>\n<p>I at least would like to find a way to preserve this kind of pattern (assuming we can figure out what the pattern is) while also keeping whitespace sensitivity when code is formatted to take advantage of it</p>\n</blockquote>\n<p>This particular pattern is no longer necessary in Lean 4.  When you write a function with well-founded recursion, you no longer need to indicate which of the arguments change in the recursive call.  This works now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 230082236,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615576275
    },
    {
        "content": "<p>A slight variant on this indentation pattern is when matching on something, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I don't think preserving this is particularly important though, since it's less common than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 230082735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615576516
    },
    {
        "content": "<p>Note that we can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 230084243,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615577272
    }
]