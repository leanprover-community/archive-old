[
    {
        "content": "<p>I've implemented <code>OfNat</code> for my type, and <code>infer_instance</code> is able to find it just fine, but when trying to use a literal, like <code>0</code> in a pattern match the typeclass inference fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Foo</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.one</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Foo</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"zero\"</span>  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">   failed to synthesize instance</span>\n<span class=\"cm\">     OfNat Foo 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"one\"</span>\n</code></pre></div>",
        "id": 279683936,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1650549613
    },
    {
        "content": "<p>I'm more than happy to use a workaround in case it's just not possible to match on literals, it's just the error that very much confuses me</p>",
        "id": 279684121,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1650549691
    },
    {
        "content": "<p>I think you need </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.one</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 279684401,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1650549830
    },
    {
        "content": "<p>Indeed, thank you very much. Kinda weird that even with pretty printing turned off, the error did not mention <code>nat_lit</code> at all</p>",
        "id": 279685110,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1650550148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> has marked this topic as resolved.</p>",
        "id": 279685253,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650550206
    }
]