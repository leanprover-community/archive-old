[
    {
        "content": "<p>Some time ago, there was a decision to snake_case theorems in Lean 4. That change is not complete yet but that's fine, there are more important things to do. I'm puzzled about the implications. For example, which of these is the correct Lean 4 theorem name:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">beq_iff_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">beq_iff_Eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">beq_Iff_Eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">BEq_iff_Eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">BEq_Iff_Eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Perhaps this one is tricky because of the implicit coercion, but I would still like to know. (FWIW, my fave is <a href=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a> but I'd be fine with any one.)</p>",
        "id": 232662220,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1617223512
    },
    {
        "content": "<p>I think it is 3</p>",
        "id": 232662439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617223584
    },
    {
        "content": "<p>I got this from an earlier post by S. Ullrich <a href=\"/user_uploads/3121/V81WLlCf44yjlqE1VbJKk3Hz/lean4_naming.png\">lean4_naming.png</a> , not sure if it's still good.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/V81WLlCf44yjlqE1VbJKk3Hz/lean4_naming.png\" title=\"lean4_naming.png\"><img src=\"/user_uploads/3121/V81WLlCf44yjlqE1VbJKk3Hz/lean4_naming.png\"></a></div>",
        "id": 232663073,
        "sender_full_name": "Chris B",
        "timestamp": 1617223865
    },
    {
        "content": "<p>I'm not sure how that applies actually. There's a theorem <code>succ_Eq_add_one (n : Nat) : succ n = n + 1</code> and one called <code>mod_eq_sub_mod {a b : Nat} (h : a ≥ b) : a % b = (a - b) % b</code>, the capitalization of <code>Eq</code> is up in the air.</p>",
        "id": 232663887,
        "sender_full_name": "Chris B",
        "timestamp": 1617224282
    },
    {
        "content": "<p>We are still experimenting with different styles for naming theorems.</p>",
        "id": 232664202,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1617224416
    },
    {
        "content": "<p>I would like <code>Eq</code> to not be capitalized, but I see why it is in the current convention</p>",
        "id": 232664240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617224425
    },
    {
        "content": "<p>What if all type names in <code>Prop</code> were actually lower case, using the handwavy \"well these are just like functions returning a bool\" argument?</p>",
        "id": 232674035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617229003
    },
    {
        "content": "<p>Not just in lemma names, but actually rename <code>Eq</code> back to <code>eq</code> etc</p>",
        "id": 232674136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617229064
    },
    {
        "content": "<p>I would support that, although that means changing <code>Bool.true</code> back to <code>tt</code> so that it doesn't clash with <code>True</code></p>",
        "id": 232674839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617229427
    },
    {
        "content": "<p>I can see why <code>tt</code> might seem unsatisfying to a user using Lean only for data / \"regular programming\"</p>",
        "id": 232676023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617230045
    }
]