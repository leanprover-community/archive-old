[
    {
        "content": "<p>Why is there an IO.waitAny that waits for first task in a List of tasks to complete, but no corresponding IO.waitAll that returns the combined results as <code>List α</code> ?</p>",
        "id": 300919789,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664237698
    },
    {
        "content": "<p>I can do this, but why should I have to do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">tasks</span> <span class=\"o\">:=</span> <span class=\"n\">args.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dbgSleep</span> <span class=\"mi\">1000</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">tasks.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Task.get</span> <span class=\"n\">s</span>\n    <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">([]:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">result</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">processTasks</span> <span class=\"o\">[</span><span class=\"s2\">\"apple\"</span><span class=\"o\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"o\">,</span> <span class=\"s2\">\"orange\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 300920922,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664238541
    },
    {
        "content": "<p>I don't see the problem with that. You can write it more succinctly as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">args.map</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Task.spawn</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dbgSleep</span> <span class=\"mi\">1000</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Task.get</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 300922665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664240099
    },
    {
        "content": "<p>by playing with the number it is amusing to see that the task manager will schedule up to 7 tasks in parallel on my machine (presumably one less than the number of cores on the machine with one being the main thread / scheduler)</p>",
        "id": 300922765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664240196
    },
    {
        "content": "<p>I find the current interface more flexible in allowing you to stuff the results in your own data structure instead of pulling it out of a list</p>",
        "id": 300922909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664240333
    },
    {
        "content": "<blockquote>\n<p>I find the current interface more flexible in allowing you to stuff the results in your own data structure instead of pulling it out of a list</p>\n</blockquote>\n<p>Yeah, I can see that now.  I guess part of the problem is I'm still hopeless at writing good Lean code, not sure what I was thinking with that <code>foldl</code> call :-)   I have 24 cores and I can definitely see the batching take place in this test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"running \"</span> <span class=\"o\">(</span><span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">20</span><span class=\"o\">))</span> <span class=\"c1\">-- running  1.02s</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"running \"</span> <span class=\"o\">(</span><span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">40</span><span class=\"o\">))</span> <span class=\"c1\">-- running  2.03s</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"running \"</span> <span class=\"o\">(</span><span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">60</span><span class=\"o\">))</span> <span class=\"c1\">-- running  3.03s</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"running \"</span> <span class=\"o\">(</span><span class=\"n\">processTasks</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">80</span><span class=\"o\">))</span> <span class=\"c1\">-- running  4.03s</span>\n</code></pre></div>",
        "id": 300944214,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664259426
    }
]