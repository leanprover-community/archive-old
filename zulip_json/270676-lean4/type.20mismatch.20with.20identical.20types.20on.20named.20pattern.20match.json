[
    {
        "content": "<p>I'm getting a strange behavior where Lean complains about a type mismatch, yet reports the expected and inferred types to be identical. This happens when trying to name a pattern-matched expression. Here is an attempt at an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListTree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">val</span>\n <span class=\"bp\">|</span> <span class=\"n\">parentNil</span>  <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">val</span>\n <span class=\"bp\">|</span> <span class=\"n\">parentCons</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">sibling</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>  <span class=\"n\">child.head</span><span class=\"bp\">?</span> <span class=\"bp\">==</span> <span class=\"n\">sibling.head</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">sibling</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ListTree.foo</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁.head</span><span class=\"bp\">?</span> <span class=\"bp\">==</span> <span class=\"n\">l₂.head</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t1</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">l₁</span><span class=\"o\">),</span> <span class=\"n\">t₂</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">parentNil</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">parentCons</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">namedPattern</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">leaf</span> <span class=\"n\">l₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Am I missing something here?</p>",
        "id": 288178688,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656686584
    },
    {
        "content": "<p>The latest nightly reveals the problem (notice the extra dagger):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">namedPattern</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">leaf</span> <span class=\"n\">l₁</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Pattern matching can destructure your inputs and name the subterms, but it can't implicitly check for equality. The pattern you wrote allows t₁ to be any leaf and then names that leaf's parameter l₁, shadowing the original name. By that time the strong information you had from the dependent type (that the parameter of <code>leaf</code> must be l₁) is lost.</p>\n<p>The easy way around this problem is to simply let Lean infer with dependent matching.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ListTree.foo</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁.head</span><span class=\"bp\">?</span> <span class=\"bp\">==</span> <span class=\"n\">l₂.head</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">ListTree</span> <span class=\"n\">α</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t₁</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">t₂</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">parentNil</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">parentCons</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 288180031,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656687202
    },
    {
        "content": "<p>(deleted, lost the race)</p>",
        "id": 288180178,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1656687253
    },
    {
        "content": "<p>thanks for the explanation <span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> ! Does it mean I couldn't pattern match for the argument to be equal (without the <code>@t</code> name)? Can you pattern match to check for that equality? In my actual code I also care about that argument, just didn't need it for the MWE</p>",
        "id": 288181637,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656687929
    },
    {
        "content": "<p>btw, I thought I tried using the latest nightly, apparently changing it in the <code>lean_toolchain</code> file and restarting lean4 mode doesn't update the version <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 288181819,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656688017
    },
    {
        "content": "<p>Barring more complicated features that I am not aware of, pattern matching is really only destructuring + binding new names. The thing is, checking for equality is not always possible; you either need the terms to be definitionally equal, or you need to have <code>DecidableEq</code> on the relevant type. Currently you only have <code>BEq</code>, which is simply any relation on the type, so you do not have the guarantees needed to compare <code>List α</code>. In addition to that, supporting equality would make it much harder to checking that patterns are exhaustive.</p>\n<p>If you need to check for equality, then you would (1) want a strong enough structure on α: <code>DecidableEq</code> would definitely do, I believe there might also be something like <code>LawfulBEq</code>; and (2) check for equality explicitly.</p>",
        "id": 288182305,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656688256
    },
    {
        "content": "<p>As for changing the lean version, I personally run <code>elan toolchain install leanprover/lean4:nightly-2022-07-01</code>, then update the <code>lean-toolchain</code> file, and use the \"Lean 4: Select Lean Toolchain\" command of VSCode to make sure I switched to the new one.</p>",
        "id": 288182410,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656688314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> You likely want <code>M-x lsp-workspace-restart</code> in Emacs</p>",
        "id": 288183685,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656688867
    },
    {
        "content": "<p>ahh, right! just because someone says <code>BEq</code> corresponds to equality doesn't mean it actually does, that makes a lot of sense, thanks! Does that mean the delaborator checks for a <code>DecidableEq</code> instance in the pattern match and change its behavior accordingly? <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 288186015,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656690040
    },
    {
        "content": "<p>The pattern match remains the same and will shadow existing variables even if decidable equality is available. If you do want equality, you need to check after <code>=&gt;</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">follow_each_other</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n<span class=\"c1\">--| .S n =&gt; true -- INCORRECT</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">S</span> <span class=\"n\">n'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 288186782,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656690452
    },
    {
        "content": "<p>Yep, I've used that pattern too, it makes sense. Thanks for the explanation.</p>",
        "id": 288212423,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656702377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/type.20mismatch.20with.20identical.20types.20on.20named.20pattern.20match/near/288183685\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> You likely want <code>M-x lsp-workspace-restart</code> in Emacs</p>\n</blockquote>\n<p>Hm, that's curious, I actually don't get the dagger in emacs (I opened up vs code to check and it shows in vs code)</p>",
        "id": 288212564,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656702466
    },
    {
        "content": "<p>which is strange, I imagine that should come directly from the LSP, right?</p>",
        "id": 288212708,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656702550
    }
]