[
    {
        "content": "<p>Hi! I'm wondering if it's possible to configure a lakefile such that different lean files look to different c files when <code>extern</code>ing their functions (Apologies if my vernacular isn't right). It would be nice to have seperate files <code>Foo.c</code> and <code>Bar.c</code> which correspond to different lean files <code>Foo.lean</code> and Bar.lean`. Looking on Github, it seems most projects use one c file, so I'm wondering if it's possible to do such a thing. Thank you so much!</p>",
        "id": 285999120,
        "sender_full_name": "z battleman",
        "timestamp": 1655160306
    },
    {
        "content": "<p>In case anyone comes across this in the future, while I didn't manage to figure out how to do exactly what I described, what you can do is <code>#include</code> your other c files in a main c file which is referenced by your lakefile. Then, the only change to your lakefile is adding adding the new lean files to the <code>libRoots</code> in the declaration of the package</p>",
        "id": 286012395,
        "sender_full_name": "z battleman",
        "timestamp": 1655172778
    },
    {
        "content": "<p>The target used in an <code>extern_lib</code> declaration is generally a static library (i.e., a <code>staticLibTarget</code>). You can pass as many different <code>.o</code> file targets as want to such a library and they will all be available to Lean files. To demonstration, here is an adaption of Lake's <a href=\"https://github.com/leanprover/lake/tree/master/examples/ffi/lib\">ffi example</a> with multiple <code>.c</code> file inputs (i.e., <code>a.c</code>, <code>b.c</code>, <code>c.c</code> from the directory <code>c</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pkgDir</span> <span class=\"o\">:=</span> <span class=\"n\">__dir__</span>\n<span class=\"kd\">def</span> <span class=\"n\">cSrcDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkgDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">cBuildDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkgDir</span> <span class=\"bp\">/</span> <span class=\"n\">_package.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oTarget</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FileTarget</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">cBuildDir</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{fileName}.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcTarget</span> <span class=\"o\">:=</span> <span class=\"n\">inputFileTarget</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">cSrcDir</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{fileName}.c\"</span>\n  <span class=\"n\">fileTargetWithDep</span> <span class=\"n\">oFile</span> <span class=\"n\">srcTarget</span> <span class=\"k\">fun</span> <span class=\"n\">srcFile</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">compileO</span> <span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span> <span class=\"s2\">\"cc\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">cLib</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">libFile</span> <span class=\"o\">:=</span> <span class=\"n\">cBuildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"libffi.a\"</span>\n  <span class=\"n\">staticLibTarget</span> <span class=\"n\">libFile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">oTarget</span> <span class=\"s2\">\"a.c\"</span><span class=\"o\">,</span> <span class=\"n\">oTarget</span> <span class=\"s2\">\"b.c\"</span><span class=\"o\">,</span> <span class=\"n\">oTarget</span> <span class=\"s2\">\"c.c\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 286015096,
        "sender_full_name": "Mac",
        "timestamp": 1655175773
    },
    {
        "content": "<p>oh thank you so much!</p>",
        "id": 286017717,
        "sender_full_name": "z battleman",
        "timestamp": 1655178643
    },
    {
        "content": "<p>I find it very difficult to express platform specific <code>extern_lib</code> when I'm updating socket package to new lakefile format: <code>moreLibTargets := if Platform.isWindows then #[cLibTarget, inputFileTarget \"C:\\\\Windows\\\\System32\\\\ws2_32.dll\"] else #[cLibTarget]</code><br>\nShall we now have conditional elaboration as Lean's builtin feature? For example with <code>section</code>-like format:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"k\">if</span> <span class=\"n\">Platform.isWindows</span>  <span class=\"c1\">-- only elaborate when if condition satisfies</span>\n<span class=\"n\">extern_lib</span> <span class=\"n\">ws2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inputFileTarget</span> <span class=\"s2\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Windows</span><span class=\"se\">\\\\</span><span class=\"s2\">System32</span><span class=\"se\">\\\\</span><span class=\"s2\">ws2_32.dll\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286378799,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655397132
    },
    {
        "content": "<p>Oof, yeah that is use case I forgot about.  As a stop gap solution this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake.Util.EvalTerm</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"meta \"</span> <span class=\"s2\">\"if \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" then \"</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">runTermElabM</span> <span class=\"n\">none</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTerm</span> <span class=\"n\">Bool</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n\n<span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">System.Platform.isWindows</span> <span class=\"k\">then</span>\n<span class=\"n\">extern_lib</span> <span class=\"n\">ws2</span> <span class=\"o\">:=</span> <span class=\"n\">inputFileTarget</span> <span class=\"s2\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Windows</span><span class=\"se\">\\\\</span><span class=\"s2\">System32</span><span class=\"se\">\\\\</span><span class=\"s2\">ws2_32.dll\"</span>\n</code></pre></div>\n<p>However, I will add a more long term solution later. My idea is to add a <code>when</code> block to specify the condition under which the <code>extern_lib</code> should be use. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">ws2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inputFileTarget</span> <span class=\"s2\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Windows</span><span class=\"se\">\\\\</span><span class=\"s2\">System32</span><span class=\"se\">\\\\</span><span class=\"s2\">ws2_32.dll\"</span>\n<span class=\"n\">when</span>\n  <span class=\"n\">System.Platform.isWindows</span>\n</code></pre></div>\n<p>I  lean towards this approach as it allows the target to still exist on other platforms (e.g., for potential cross-compilation) but just not be used by default.</p>\n<p>I may still add <code>meta</code> utilities like the one above to the DSL, though.</p>",
        "id": 286387534,
        "sender_full_name": "Mac",
        "timestamp": 1655401235
    },
    {
        "content": "<p>Great!</p>",
        "id": 286389175,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655401968
    }
]