[
    {
        "content": "<p>I just realized the following change. In Lean3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">list.filter</span>\n<span class=\"c1\">-- list.filter : Π {α : Type u_1} (p : α → Prop) [_inst_1 : decidable_pred p], list α → list α</span>\n</code></pre></div>\n<p>In Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">List.filter</span>\n<span class=\"c1\">-- List.filter : {α : Type u_1} → (α → Bool) → List α → List α</span>\n</code></pre></div>\n<p>What's the reason for this change in <code>filter</code>?Is there a larger design decision of moving away from decidable propositions and closer to booleans? (of course the two were pretty much interchangeable in Lean3 also, due to coercions)</p>",
        "id": 262036254,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1637308204
    },
    {
        "content": "<p>This coercion was added to Mathlib4 to deal with the filter thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Decidable.predToBool</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"bp\">$</span> <span class=\"n\">p</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I originally thought this had to do with the addition of bool reduction to the kernel, but Mario informed me there's probably no difference in generated code between bool and a decidable prop. If I had to guess, it has to do with bool being more familiar to programmers, and making it a boolean predicate doesn't take the user's ability to write a prop-valued version and prove that <code>p &lt;-&gt; (b = true)</code>, or for predicates <code>forall x, p x &lt;-&gt; (b x = true)</code>. I would be interested to hear from the devs though.</p>",
        "id": 262091475,
        "sender_full_name": "Chris B",
        "timestamp": 1637339775
    }
]