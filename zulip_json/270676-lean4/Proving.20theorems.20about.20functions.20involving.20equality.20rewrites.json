[
    {
        "content": "<p>I am facing some trouble proving theorems about a function that makes use of an equality rewrite (in my case, this was done to ensure consistency with the declared output type).  I have replicated the essence of the issue in the following code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.bar₁</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">f₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">f₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f₁</span> <span class=\"bp\">+</span> <span class=\"n\">f₂</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.bar₂</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.add_comm</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">▸</span> <span class=\"n\">Foo.bar₁</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar₁</span> <span class=\"n\">fm</span> <span class=\"n\">fn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar₂</span> <span class=\"n\">fm</span> <span class=\"n\">fn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">fm</span> <span class=\"n\">fn</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Foo.bar₁</span><span class=\"o\">,</span> <span class=\"n\">Foo.bar₂</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Goal : fm.1 + fn.1 =</span>\n  <span class=\"c1\">-- (Eq.rec (motive := fun α x =&gt; Foo m → Foo n → Foo α) (fun x x_1 =&gt; { foo := x.1 + x_1.1 }) (_ : n + m = m + n) fm fn).foo</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am unable to proceed here because the portion involving the equality rewrite is blocking the simplification. Does anyone know of a way around this? Thanks in advance.</p>",
        "id": 271322395,
        "sender_full_name": "Anand Rao",
        "timestamp": 1644430048
    },
    {
        "content": "<p>You can use the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">barEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">fm</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar₁</span> <span class=\"n\">fm</span> <span class=\"n\">fn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar₂</span> <span class=\"n\">fm</span> <span class=\"n\">fn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">fm</span> <span class=\"n\">fn</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Foo.bar₁</span><span class=\"o\">,</span> <span class=\"n\">Foo.bar₂</span><span class=\"o\">]</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"bp\">=</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"bp\">=</span><span class=\"n\">h</span>\n  <span class=\"c1\">-- We applied the `generalize` tactic to make sure we can use the `subst` tactic</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- After this `subst`, the `Eq.rec` application will reduce since its major premise is now an `Eq.refl`</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In the future, we will add better support for <code>Eq.rec</code> to the <code>simp</code> tactic.</p>",
        "id": 271327649,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644432190
    },
    {
        "content": "<p>Another (also more generally applicable) trick is to push casts into structures as far as possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.bar₂</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Foo.bar₁</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n  <span class=\"c1\">-- bar := Nat.add_comm n m ▸ (Foo.bar₁ f₁ f₂).bar</span>\n</code></pre></div>\n<p>This has the additional advantage that <code>(Foo.bar₁ f₁ f₂).foo</code> will reduce definitionally.  We do this extensively in mathlib for various structures, see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_of_iff\">docs#decidable_of_iff</a></p>",
        "id": 271329036,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644432746
    },
    {
        "content": "<p>Thank you very much for the suggestions. I have a related question about simplifying functions with termination proofs, which I will ask on a separate thread.</p>",
        "id": 271687359,
        "sender_full_name": "Anand Rao",
        "timestamp": 1644670036
    }
]