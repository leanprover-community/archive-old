[
    {
        "content": "<p>Is there a way to declare aliases of substructure fields (ideally automatically), so that instead of writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">a_.a0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">a_.a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">b_</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n  <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_.a_.a0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b_.b0</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_.a_.a1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b_.b1</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">[</span><span class=\"n\">coercion</span><span class=\"o\">]</span>\n  <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">b_</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">[</span><span class=\"n\">coercion</span><span class=\"o\">]</span>\n  <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b0</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>or even just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">a_.a0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">a_.a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">b_</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n  <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_.a0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b_.b0</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_.a1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b_.b1</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>?  (Notably, I want <code>C.mk</code> to still only have three arguments, and the first one to be of type <code>B</code>, and I want <code>C.b_</code> to still exist.  I just want to be able to implicitly treat anything of type <code>C</code> as also being of type <code>B</code> and anything of type <code>B</code> as also being of type <code>A</code>, at least for the purposes of field accesses, and perhaps also in general.</p>",
        "id": 229716361,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615400551
    },
    {
        "content": "<p>Have you tried to use <code>extends</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">a0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b0</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"c1\">-- C.mk is still 3 arguments</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">C.mk</span>\n<span class=\"c1\">-- C.mk : (_toB : B) → ({x : _toB.toA.a0} → B.b0 _toB x → Type) → ({x : _toB.toA.a1} → B.b1 _toB x → Type) → C</span>\n\n<span class=\"c1\">-- The structure instance `{ ...}` notation has special support for `extends`.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span>  <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">a0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">c0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">c1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">}</span>\n  <span class=\"bp\">=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toB</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toA</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span> <span class=\"o\">},</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">b1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">},</span>\n    <span class=\"n\">c0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">c1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">}</span>\n  <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a.a0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">c.toA</span>  <span class=\"c1\">-- We currently do not register a coercion from `C` to `B` and `B` to `A`</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">C</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c.toA</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"c1\">-- coercion is being used here</span>\n</code></pre></div>",
        "id": 229718653,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615401384
    },
    {
        "content": "<p>We haven't decided yet whether we should generate the coercions from <code>C</code> to <code>B</code> and <code>B</code> to <code>A</code> automatically or not.</p>",
        "id": 229719447,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615401679
    },
    {
        "content": "<p>Ah, neat, thanks!</p>",
        "id": 229730460,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615405624
    },
    {
        "content": "<p>what about <a href=\"https://coq.inria.fr/refman/addendum/implicit-coercions.html\">https://coq.inria.fr/refman/addendum/implicit-coercions.html</a>, that is, coercions for modeling inheritance between types... I am still trying to understand the best approach to that in Lean4. I mean, we don't necessary need the structures to use coe, right? But in the example from <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> the <code>.toA</code> was implicated defined during the structure+extends declaration right?</p>",
        "id": 282871489,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1652925111
    }
]