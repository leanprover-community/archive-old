[
    {
        "content": "<p>Hi</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">constant</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>I want to say \"T is a fixed type with decidable equality\". How can I do it? Please, give a complete solution.</p>",
        "id": 276180164,
        "sender_full_name": "Pavel Shuhray",
        "timestamp": 1647951916
    },
    {
        "content": "<p>it depends on what you mean by fixed. Usually <code>variable (T : Type u) [DecidableEq T]</code> is sufficient</p>",
        "id": 276183125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647953443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480095\">Pavel Shuhray</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20equality/near/276180164\">said</a>:</p>\n<blockquote>\n<p>I want to say \"T is a fixed type with decidable equality\". How can I do it? Please, give a complete solution.</p>\n</blockquote>\n<p>I think I've tried to do the same thing before: <a href=\"#narrow/stream/270676-lean4/topic/Opaque.20type.20with.20interface\">Opaque type with interface</a><br>\nAdapting that approach to your case would yield:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">constant</span> <span class=\"n\">_T</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">Unit</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">_T.fst</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">_T.snd</span>\n</code></pre></div>\n<p>(But I think you should really consider Mario's version unless you have strong reasons to use a constant.)</p>",
        "id": 276189508,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1647956329
    },
    {
        "content": "<p>Are  there \"parameters\" in Lean4?</p>",
        "id": 276458084,
        "sender_full_name": "Pavel Shuhray",
        "timestamp": 1648119100
    },
    {
        "content": "<p>You'll have to explain what you mean by that</p>",
        "id": 276458156,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648119126
    },
    {
        "content": "<p>In Lean3 I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">parameter</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 276458265,
        "sender_full_name": "Pavel Shuhray",
        "timestamp": 1648119206
    },
    {
        "content": "<p>No, see this thread: <a href=\"#narrow/stream/270676-lean4/topic/parameter\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/parameter</a></p>",
        "id": 276458437,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1648119318
    },
    {
        "content": "<p>But Sebastian also gives there a way users can implement <code>parameter</code> themselves.</p>",
        "id": 276458604,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1648119429
    }
]