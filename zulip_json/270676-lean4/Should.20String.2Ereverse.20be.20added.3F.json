[
    {
        "content": "<p>Should a <code>String.reverse</code> be added to the std? I have found myself needing it quite a few times, and I even have an implementation in my <code>Soup</code> project:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">String.reverse</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">String.intercalate</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">List.reverse</span> <span class=\"bp\">∘</span> <span class=\"n\">String.toList</span>\n</code></pre></div>\n<p>I also looked through the docs carefully and wasn't able to find one.</p>",
        "id": 284131929,
        "sender_full_name": "Joseph O",
        "timestamp": 1653657974
    },
    {
        "content": "<p>You can make use of <code>List.reverse</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">String.reverse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">s.data.reverse</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 284132412,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653658190
    },
    {
        "content": "<p>Doesnt that return a list?<br>\nOr do the brackets do something special</p>",
        "id": 284132783,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658338
    },
    {
        "content": "<p>The brackets are the anonymous constructor notation which you can use if the expected data type has only one constructor because what you want can be inferred perfectly then.</p>",
        "id": 284132904,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653658391
    },
    {
        "content": "<p>So it implicitly converts the list to a String?</p>",
        "id": 284132981,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658429
    },
    {
        "content": "<p>No its quite explicit, after all you wrote it out</p>",
        "id": 284133057,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653658446
    },
    {
        "content": "<p>But I didn't call <code>String.intercalate \"\"</code></p>",
        "id": 284133213,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658523
    },
    {
        "content": "<p>That being said operating directly on <code>String</code>s data field is mayube not what you really want to do? Strings have an FFI representation as evident by their constructors etc. being external functions <a href=\"https://github.com/leanprover/lean4/blob/d13fac6f458bd1efd772424066f2a85f8c8ba32a/src/Init/Prelude.lean#L1122-L1123\">https://github.com/leanprover/lean4/blob/d13fac6f458bd1efd772424066f2a85f8c8ba32a/src/Init/Prelude.lean#L1122-L1123</a> so you probably want to define this function either in terms of existing string functions or via the FFI</p>",
        "id": 284133266,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653658550
    },
    {
        "content": "<p>So you can construct a string with a list essentially? I guess it makes sense, as a string is a list of chars</p>",
        "id": 284133390,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20String.2Ereverse.20be.20added.3F/near/284133213\">said</a>:</p>\n<blockquote>\n<p>But I didn't call <code>String.intercalate \"\"</code></p>\n</blockquote>\n<p>That doesnt matter at all, string is a structure around a list of characters so calling the constructor of that structure is the only thing you need to do, however as explained this \"list of characters\" is just the representation that is given to the lean programmer and not the one you usually want to work with</p>",
        "id": 284133404,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653658612
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(⟨[</span><span class=\"sc\">'h'</span><span class=\"o\">,</span> <span class=\"sc\">'i'</span><span class=\"o\">]⟩</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"c1\">-- \"hi\"</span>\n</code></pre></div>",
        "id": 284133461,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20String.2Ereverse.20be.20added.3F/near/284133404\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20String.2Ereverse.20be.20added.3F/near/284133213\">said</a>:</p>\n<blockquote>\n<p>But I didn't call <code>String.intercalate \"\"</code></p>\n</blockquote>\n<p>That doesnt matter at all, string is a structure around a list of characters so calling the constructor of that structure is the only thing you need to do, however as explained this \"list of characters\" is just the representation that is given to the lean programmer and not the one you usually want to work with</p>\n</blockquote>\n<p>Yeah I see<br>\nThats pretty cool</p>",
        "id": 284133487,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658656
    },
    {
        "content": "<p>But now to the original question, should this be added to the std</p>",
        "id": 284133516,
        "sender_full_name": "Joseph O",
        "timestamp": 1653658667
    },
    {
        "content": "<p>Maybe in a future. I wouldn't worry about Std at the moment. The core devs have bigger fish to fry</p>",
        "id": 284133682,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653658737
    },
    {
        "content": "<p>As you've been told before, <code>Std</code> is the things the compiler needs to work and not a general purpose Std library that is receiving contributions right now so no, not unless the compiler needs it.</p>",
        "id": 284133691,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653658742
    },
    {
        "content": "<p>What about the case with <code>HashMap.toList</code>?</p>",
        "id": 284134651,
        "sender_full_name": "Joseph O",
        "timestamp": 1653659164
    },
    {
        "content": "<p>But if it isn't needed in the std, Ill probably add it in mathlib 4</p>",
        "id": 284134729,
        "sender_full_name": "Joseph O",
        "timestamp": 1653659197
    },
    {
        "content": "<p>String reversal is a questionable operation if there's not a specification for what it's supposed to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">String.reverse</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">String.intercalate</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">toString</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">List.reverse</span> <span class=\"bp\">∘</span> <span class=\"n\">String.toList</span>\n\n<span class=\"k\">#eval</span> <span class=\"s2\">\"mañana\"</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n<span class=\"c1\">-- \"anãnam\"</span>\n</code></pre></div>",
        "id": 284134972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653659311
    },
    {
        "content": "<p>Well all it does it reverse a string</p>",
        "id": 284135056,
        "sender_full_name": "Joseph O",
        "timestamp": 1653659357
    },
    {
        "content": "<p>I might have expected <code>anañam</code> if you just told me that this reverses strings.</p>",
        "id": 284135205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653659413
    },
    {
        "content": "<p>There's also grapheme cluster reversal. Codepoint reversal is valid, but my point is that there's not just one string reversal operation.</p>",
        "id": 284135320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653659468
    },
    {
        "content": "<p>Ah right</p>",
        "id": 284135359,
        "sender_full_name": "Joseph O",
        "timestamp": 1653659486
    }
]