[
    {
        "content": "<p>I'm trying to write a macro that generates a type class instance.<br>\nWhat is the correct category to use for the type parameters of the class?</p>\n<p>For example, I want to generate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MyClass</span> <span class=\"n\">Type1</span> <span class=\"o\">(</span><span class=\"n\">someComputation</span> <span class=\"bp\">.</span><span class=\"n\">returning</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type2</span> <span class=\"n\">where</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"generate_instance\"</span> <span class=\"n\">first</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">second</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But that results in <code>expected term</code> when writing <code>generate_instance Type1 (someComputation .returning).type2</code>.</p>",
        "id": 302445290,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1664972761
    },
    {
        "content": "<p>The parser for <code>instance</code> commands is defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">instance</span><span class=\"bp\">»</span>       <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">Term.attrKind</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\"instance\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optNamedPrio</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declId</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppIndent</span> <span class=\"n\">declSig</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declVal</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">terminationSuffix</span>\n</code></pre></div>\n<p>I found this in <code>Lean/Parser/Command.lean</code> by searching for 'instance'.</p>",
        "id": 302451833,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664975099
    },
    {
        "content": "<p>Alternatively, the parser for a builtin syntax can also be found by the go-to-definition feature <a href=\"#narrow/stream/270676-lean4/topic/structure-like.20custom.20syntax/near/294606430\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/structure-like.20custom.20syntax/near/294606430</a></p>",
        "id": 302478081,
        "sender_full_name": "pcpthm",
        "timestamp": 1664982608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I'm guessing that the relevant part in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">instance</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">Term.attrKind</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\"instance\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optNamedPrio</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declId</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppIndent</span> <span class=\"n\">declSig</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declVal</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">terminationSuffix</span>\n</code></pre></div>\n<p>... is <code>declSig</code> (which I'm guessing stands for \"declaration signature\"), right? From its definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">declSig</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">Term.binderIdent</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">Term.bracketedBinder</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Term.typeSpec</span>\n</code></pre></div>\n<p>... I'd take the relevant part to be <code>Term.typeSpec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">typeSpec</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\" : \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span>\n</code></pre></div>\n<p>... and hence <code>termParser</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">termParser</span> <span class=\"o\">(</span><span class=\"n\">prec</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">categoryParser</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">prec</span>\n</code></pre></div>\n<p>But for me that's basically a dead end.<br>\nOr does this mean that <code>term</code> is in fact the correct category to use in my example?</p>",
        "id": 302603417,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665044725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347012\">pcpthm</span> <a href=\"#narrow/stream/270676-lean4/topic/Parser.20category.20for.20instance.20parameters/near/302478081\">said</a>:</p>\n<blockquote>\n<p>Alternatively, the parser for a builtin syntax can also be found by the go-to-definition feature <a href=\"#narrow/stream/270676-lean4/topic/structure-like.20custom.20syntax/near/294606430\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/structure-like.20custom.20syntax/near/294606430</a></p>\n</blockquote>\n<p>This doesn't seem to work for <code>instance</code> (at least when I tried).</p>",
        "id": 302603569,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665044789
    },
    {
        "content": "<blockquote>\n<p>Or does this mean that term is in fact the correct category to use in my example?</p>\n</blockquote>\n<p>No, the correct category (parser, actually, but parsers and syntax categories are, I believe, interchangeable here) is <code>declSig</code>. You'll have to lift your <code>term</code> into a <code>declSig</code>, e.g. with something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">sig</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">declSig</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">first</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If you give an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I can look into the issue in more detail. It usually takes some experimentation for me to get the syntax system to cooperate. ;)</p>",
        "id": 302615396,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1665049225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Hmm, I don't quite see how to use <code>declSig</code> yet. An MWE would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"gen_coe\"</span> <span class=\"n\">src</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">dst</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"bp\">$</span><span class=\"n\">src</span> <span class=\"bp\">$</span><span class=\"n\">dst</span> <span class=\"n\">where</span>\n      <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">gen_coe</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">Nat</span> <span class=\"k\">else</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 302657676,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665064485
    },
    {
        "content": "<p>The error seems to be that Lean parses <code>Bool (if true then Nat else Int)</code> as one <code>term</code> (an ill-typed application). This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"gen_coe\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">src</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">dst</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"bp\">$</span><span class=\"n\">src</span> <span class=\"bp\">$</span><span class=\"n\">dst</span> <span class=\"n\">where</span>\n      <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">gen_coe</span> <span class=\"o\">[</span><span class=\"n\">Bool</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, I would recommend that you write <code>$src:term</code> and <code>$dst:term</code> in the body of the macro. Without these annotations, you may get weird errors. (Maybe this is no longer the case with <code>TSyntax</code>.)</p>",
        "id": 302660020,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1665065038
    },
    {
        "content": "<p>Yes, that issue should no longer be an issue :)</p>",
        "id": 302661320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665065361
    },
    {
        "content": "<p>You can also use <code>src:term:max</code> to make sure it's not parsed as an application</p>",
        "id": 302661501,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665065405
    },
    {
        "content": "<p>Thanks you two!</p>",
        "id": 302662543,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1665065700
    }
]