[
    {
        "content": "<p>I am having trouble finishing this proof. What can I do to replace the sorry?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SystemState</span> <span class=\"n\">where</span>\n  <span class=\"n\">evenCount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">oddCount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">SystemState</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">SystemState</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">SystemState</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">S.oddCount</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">Option.some</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">Option.none</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">SystemState</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ge2</span> <span class=\"o\">:</span> <span class=\"n\">x.oddCount</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Option.some</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have simplified it to retain only the relevant parts. This is part of a larger proof, where bar does something, and where I get x and ge2 from assumptions</p>",
        "id": 319434473,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1672852846
    },
    {
        "content": "<p>To be as explicit as possible, one can first inspect the definition of foo and apply a lemma (<code>if_pos</code>) stating that if the boolean test is true, then we get the first branch. As such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Option.some</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">ge2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 319438756,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1672854329
    },
    {
        "content": "<p>Normally for proofs that have an obvious series of rewrites to reach the goal, you'll see something like <code>by simp [foo, *]</code>.</p>",
        "id": 319439049,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1672854423
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 319440609,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1672854896
    }
]