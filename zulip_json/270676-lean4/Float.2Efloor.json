[
    {
        "content": "<p>Is there some kind of flooring function for <code>Float</code> (preferably returning a <code>Nat</code>)?<br>\nI'm trying and struggling to express the <a href=\"https://en.wikipedia.org/wiki/Pairing_function#Inverting_the_Cantor_pairing_function\">inverse to Cantor's pairing function</a>.</p>",
        "id": 257821615,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634380886
    },
    {
        "content": "<p>Whatever does <code>Float</code> have to do with Cantor's pairing function? You know that there are infinitely many naturals but only finitely many floats, right?</p>",
        "id": 257821699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634380976
    },
    {
        "content": "<p>The <em>inverse</em> to Cantor's pairing function requires a square root and a floor. So I was just looking for something in Lean 4 that allows me to take a square root.<br>\nI'm not trying to prove any theorems about the definition.</p>",
        "id": 257821822,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634381112
    },
    {
        "content": "<p>The inverse to Cantor's pairing function does not <em>require</em> floats (or reals). Your reference for it does. Just use <code>nat.sqrt</code>. Port it from Lean 3, I doubt it's in Lean 4 yet but it would be a fun exercise.</p>",
        "id": 257821950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634381265
    },
    {
        "content": "<p>For <code>floor</code> you can always cheat if you don't mind the linear complexity. <code>def poorMansFloor (x : Float) := x.toString.takeWhile (·≠'.')</code></p>",
        "id": 257822149,
        "sender_full_name": "František Silváši",
        "timestamp": 1634381445
    },
    {
        "content": "<p>Just glancing over the Wikipedia ref you posted, it seems that the issue is that given a natural <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> you want to find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=\\pi(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>. The definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> is \"some triangular number, + y\", and the triangular number is the largest triangular number which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">\\leq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>. So what you _really_ need is a good algorithm to find the largest triangular number (i.e. number of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo stretchy=\"false\">(</mo><mi>w</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">w(w+1)/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span></span></span></span>) which is at most <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>. So you need to find the largest natural <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>w</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>≤</mo><mn>8</mn><mi>z</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(2w+1)^2\\leq 8z+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">8</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. You don't need floats or reals for that, you could knock up a dumb algorithm easily and a smarter algorithm with some work.</p>",
        "id": 257822393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634381722
    },
    {
        "content": "<p>You can also use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Float.toNat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x.toUInt64.toNat</span>\n</code></pre></div>\n<p>but it seems that <code>Float</code> is not meant for mathematical use.</p>",
        "id": 257822400,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634381731
    },
    {
        "content": "<p>For example you could start with 1 and then keep adding powers of 2 and backtrack when you go over.</p>",
        "id": 257822479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634381802
    },
    {
        "content": "<p>(the dumb algorithm is just to start with 1 and then keep adding 2 until you go over)</p>",
        "id": 257822507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634381842
    },
    {
        "content": "<p>FYI the inverse to cantor's pairing function is implemented in lean 3, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.unpair/src\">src#nat.unpair</a></p>",
        "id": 257822627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634381978
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.sqrt/src\">src#nat.sqrt</a> if you are interested in how to do sqrt without floats</p>",
        "id": 257822736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382036
    },
    {
        "content": "<p>Looking at the Lean code that looks to me at first sight like it's a different bijection to the one on the Wikipedia page.</p>",
        "id": 257822752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634382049
    },
    {
        "content": "<p>Thanks for all the feedback <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span><br>\nMy purpose for this is really just to have a method for iterating over all tuples in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>26</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^{26}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">26</span></span></span></span></span></span></span></span></span></span></span></span>.<br>\nSo I thought a generalized inverse pairing function would do the job :D</p>",
        "id": 257822755,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382051
    },
    {
        "content": "<p>Oh, actually that's true, this is the box-shaped bijection, not the diagonal one. It just changes a couple constants</p>",
        "id": 257822789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382087
    },
    {
        "content": "<p>Note that for high dimensions, iterating the unpairing function results in (inverse) superexponential growth, so you get really biased coverage</p>",
        "id": 257822880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382166
    },
    {
        "content": "<p>Awesome! <code>unpair</code> is perfect for my purposes.</p>",
        "id": 257822885,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Float.2Efloor/near/257822880\">said</a>:</p>\n<blockquote>\n<p>Note that for high dimensions, iterating the unpairing function results in (inverse) superexponential growth, so you get really biased coverage</p>\n</blockquote>\n<p>What does that mean?</p>",
        "id": 257822930,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382221
    },
    {
        "content": "<p>The Lean bijection is more convenient than the Wikipedia definition because you don't need \"largest odd integer whose square is &lt;= n\", you need \"largest integer whose square is &lt;= n\" , and there's already a name for that.</p>",
        "id": 257822974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634382244
    },
    {
        "content": "<p>If you map <code>n0, ..., n25</code> to <code>(((n0, n1), ... n25)</code> then if each <code>ni</code> is O(k) then <code>(n0, n1)</code> is O(k^2), <code>((n0, n1), n2)</code> is O((k^2)^2), and so on so that <code>(((n0, n1), ... n25)</code> is O(k^(2^25))</p>",
        "id": 257823103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382398
    },
    {
        "content": "<p>Which means that if you won't hit (3,3,3, ..., 3) until about 3^(2^25)</p>",
        "id": 257823147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382451
    },
    {
        "content": "<p>Hmmm... I guess I didn't consider the number of combinations <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257823241,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382539
    },
    {
        "content": "<p>A much more balanced way to hit the numbers is to convert every number into binary and then read a sequence like <code>101,10,111,...,1000</code> as a number written in ternary on the alphabet <code>0 1 ,</code></p>",
        "id": 257823262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382566
    },
    {
        "content": "<p>I think that is within a constant factor of optimal; you can do a bit better to encode the fact that there are exactly 25 <code>,</code>'s</p>",
        "id": 257823343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382640
    },
    {
        "content": "<p>but depending on what you are doing that may or may not be important</p>",
        "id": 257823358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382668
    },
    {
        "content": "<p>Ok now I'm not sure if we're talking about the same thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI have a function with 26 inputs <code>f (a b c ... x y z : Nat) : Int</code> and would like to systematically go through all input combinations (I'm aware that there are infinitely many).</p>",
        "id": 257823449,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382745
    },
    {
        "content": "<p>Yes, that's what I'm talking about too</p>",
        "id": 257823459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382762
    },
    {
        "content": "<p>I'm pointing out that within such functions, there is still a notion of optimality, where we ask that for small inputs we want small outputs</p>",
        "id": 257823477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382794
    },
    {
        "content": "<p>you get okay results with iterated unpairing if you split the coordinates in a balanced way</p>",
        "id": 257823542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382843
    },
    {
        "content": "<p>Ahhh, now I get it</p>",
        "id": 257823565,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382869
    },
    {
        "content": "<p>for a lot of theoretical purposes, it literally doesn't matter at all what the growth rate of the function is, in which case iterated unpairing is the simplest implementation</p>",
        "id": 257823594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382915
    },
    {
        "content": "<p>and in fact that's what mathlib does in its <code>encodable</code> instances</p>",
        "id": 257823612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382946
    },
    {
        "content": "<p>Now I just have to figure out how to convert <code>Nat</code> into a list of ternary digits</p>",
        "id": 257823617,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634382949
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.encode_list/src\">src#encodable.encode_list</a></p>",
        "id": 257823663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634382964
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.digits/src\">src#nat.digits</a> for converting a nat into a list of digits</p>",
        "id": 257823722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383049
    },
    {
        "content": "<p>Another variation is the high-dimensional analogue of cantor's bijection, where you iterate over the level sets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>x</mi><mn>25</mn></msub><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">x_0+x_1+x_2+...+x_{25}=k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">...</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">25</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></p>",
        "id": 257823796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383112
    },
    {
        "content": "<p>I think you need inverse nth roots to express the inverse function though</p>",
        "id": 257823818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383149
    },
    {
        "content": "<p>Iterate over max&lt;=k rather than sum&lt;=k to make the inverse function nicer</p>",
        "id": 257823898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634383208
    },
    {
        "content": "<p>Actually, I don't get it ....<br>\nIf I have a natural number <code>n</code> that I want to convert into a 26-tuple <code>(a, b, c, ..., x, y, z)</code>, I first interpret <code>n</code> as ternary over symbols <code>0</code>, <code>1</code> and <code>,</code>. Let's say <code>n = 01,1,001</code>. How do I extract <code>a</code> to <code>z</code> from this? Since <code>n</code>'s representation doesn't contain 25 <code>,</code>s I don't know where to \"split\" <code>n</code>.</p>",
        "id": 257824095,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1634383412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Float.2Efloor/near/257823898\">said</a>:</p>\n<blockquote>\n<p>Iterate over max&lt;=k rather than sum&lt;=k to make the inverse function nicer</p>\n</blockquote>\n<p>I think you need the inverse nth root regardless, because the volume of a 26 dimensional box and a 26 dimensional simplex both grows as n^26</p>",
        "id": 257824211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383522
    },
    {
        "content": "<p>yes, but with the triangular one you need more than 26th root, you need \"inverse of some random degree 26 polynomial\"</p>",
        "id": 257824230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634383551
    },
    {
        "content": "<p>like we needed inverse of triangular number for the Wikipedia version, but we could complete the square.</p>",
        "id": 257824291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634383588
    },
    {
        "content": "<p>aha</p>",
        "id": 257824299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383594
    },
    {
        "content": "<p>yes, that will be a problem for d &gt;= 5</p>",
        "id": 257824309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383609
    },
    {
        "content": "<p>:-)</p>",
        "id": 257824315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634383616
    },
    {
        "content": "<p>Given that 3^26 is quite a big number, maybe a table of small values will be fine :-)</p>",
        "id": 257824347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634383659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> Are you allowed to have a partial inverse, because that will make things easier. You can just reject inputs that don't have 25 <code>,</code>'s</p>",
        "id": 257824407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383692
    },
    {
        "content": "<p>One way to enforce this is with some kind of stars-and-bars way of enumerating exactly where to place the commas. But at that point the high dimensional cantor is looking like a simpler solution</p>",
        "id": 257824455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634383779
    },
    {
        "content": "<p>Actually balanced <code>unpair</code> is much simpler. You are off from optimal by a polynomial factor depending on the amount of unbalance in the tree, which can't be perfect because 26 isn't a power of two, but that should only be something like O(n^0.4) or so from optimal, which is probably passable for practical use (certainly it's much better than n^(2^25))</p>",
        "id": 257824906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634384227
    },
    {
        "content": "<p>If you have 26 elements of O(k), then the result is O(k^32), where the optimal is O(k^26), so it's off by a factor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mrow><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>13</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>0.24</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{3/13}) \\le O(n^{0.24})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3/13</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0.24</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 257825136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634384440
    }
]