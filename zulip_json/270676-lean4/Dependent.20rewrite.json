[
    {
        "content": "<p>Newbie question about rewriting functions with dependencies -- I know I should do an explicit generalization here, but I have no clue what generalization to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">map'</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">τ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hL</span> <span class=\"o\">:</span> <span class=\"n\">L2</span> <span class=\"bp\">=</span> <span class=\"n\">L1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">L1</span> <span class=\"bp\">→</span> <span class=\"n\">τ'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">map'</span> <span class=\"n\">L1</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">map'</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hL.subst</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 293532932,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660574699
    },
    {
        "content": "<p>help would be sorely appreciated; I keep guessing what to generalize, and failing <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 293533059,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660574742
    },
    {
        "content": "<p>wait a minute, casing on hL is enough</p>",
        "id": 293533681,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660574868
    },
    {
        "content": "<p>okay, new question: will eliminating on eq always work if it's between two variables? is the goal of doing explicit generalizations to make an equality be between two variables so you can eliminate on it?</p>",
        "id": 293533914,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660574934
    },
    {
        "content": "<p>this actually makes substantially more sense now. hm.</p>",
        "id": 293533941,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1660574943
    },
    {
        "content": "<p>Or even if just one side is a variable</p>",
        "id": 293534588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1660575127
    }
]