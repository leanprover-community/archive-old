[
    {
        "content": "<p>Why is recursion forbidden in structures? </p>\n<p>I ran into this limitation again today while refactoring Lake (to make the dependencies of <code>Package</code> the resolved packages rather than just the declarative specification). Thus, I either need to refactor <code>Package</code> into an inductive (and lose nice things like the structure syntax) or work around the type system with the via <code>OpaquePackage</code>.  Both seem less than ideal, so I am curious as to the rational behind forbidding recursion.</p>",
        "id": 290462615,
        "sender_full_name": "Mac",
        "timestamp": 1658463225
    },
    {
        "content": "<p>Observation: a recursive one-arg constructor supports the anonymous constructor notation, but not <code>foo.1</code> syntax; however the kernel accepts <code>foo.1</code> primitive projections:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">â†’</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">f.1</span> <span class=\"c1\">-- failed</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"mk_foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">addDecl</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">test</span>\n    <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n    <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"bp\">``</span><span class=\"n\">Foo</span> <span class=\"mi\">0</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n    <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">opaque</span>\n    <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span> <span class=\"o\">}</span>\n\n<span class=\"n\">mk_foo</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 290464358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658464858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Recursive.20Structures/near/290462615\">said</a>:</p>\n<blockquote>\n<p>Both seem less than ideal, so I am curious as to the rational behind forbidding recursion.</p>\n</blockquote>\n<p>I think the direct reason is that the structure elaborator does not use the inductive elaborator, so it can only support simple kernel inductive decls. It sounds like you instead want a nested inductive as a structure?<br>\nI imagine, without hard evidence, that combining the structure and inductive elaborator would be like putting the two in a particle collider and marveling at the fun bugs resulting from the collision.</p>",
        "id": 290478538,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658478569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Recursive.20Structures/near/290478538\">said</a>:</p>\n<blockquote>\n<p>so it can only support simple kernel inductive decls. It sounds like you instead want a nested inductive as a structure?</p>\n</blockquote>\n<p>I'm sorry, but my grasp of type theory jargon is not what it should be. What is the difference between a simple inductive and a nested inductive?</p>",
        "id": 290480432,
        "sender_full_name": "Mac",
        "timestamp": 1658479800
    },
    {
        "content": "<p>If you want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Package</span> <span class=\"o\">:=</span>\n  <span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Package</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>then that is a nested occurrence of <code>Package</code> inside the inductive type <code>List</code>. The inductive elaborator has to define <code>Package</code> as a mutually inductive type together with a specialized copy of <code>List</code> in this case.</p>",
        "id": 290480938,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658480150
    },
    {
        "content": "<p>Thank you, for the link to the previous discussion about this.</p>",
        "id": 293953573,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660761361
    },
    {
        "content": "<p>Maybe use an inductive? Structures are not recursive.</p>",
        "id": 293962434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660764916
    },
    {
        "content": "<p>Yes, that is the approach I am taking but bumping into the nice conveniences (as Mac puts it) of the structure syntax etc that I am missing. For instance, being able to use <code>..</code> in pattern matching.</p>",
        "id": 293966689,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1660766470
    },
    {
        "content": "<p>you should be able to use <code>Value.mk (data := d) ..</code> as a pattern even if it's an inductive constructor</p>",
        "id": 293994065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660778648
    }
]