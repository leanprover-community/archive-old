[
    {
        "content": "<p>To do automatic differentiation you need to smartly differentiate through let bindings to get efficient code. Turning of zeta reduction in the simplifier can get me partially there but not fully.</p>\n<p>The crucial simplification rule is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">D_let</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n         <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">tmp</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">tmp</span>  <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n         <span class=\"k\">let</span> <span class=\"n\">dtmp</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">dx</span>\n         <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">tmp</span> <span class=\"n\">dtmp</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"n\">tmp</span>\n</code></pre></div>\n<p>Is seems that when the simplifier looks for the pattern it removed let binding on the left hand side i.e. applies zeta during unification. It does not matter whether you write <code>D (fun x =&gt; let tmp = g x; f x tmp)</code> or <code>D (fun x =&gt; f x (g x))</code> on the left hand side. Is there a way to turn zeta off when simp searches for patterns to match on?</p>\n<p>An example, the expression</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">gx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n         <span class=\"n\">f</span> <span class=\"n\">gx</span> <span class=\"n\">gx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gets simplified with <code> simp (config := {zeta := false})</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">dtmp</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">dx</span><span class=\"bp\">;</span>\n    <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">tmp</span> <span class=\"n\">dtmp</span> <span class=\"bp\">+</span>\n      <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">dtmp</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">dx</span><span class=\"bp\">;</span>\n        <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">tmp</span> <span class=\"n\">dtmp</span><span class=\"o\">)</span>\n        <span class=\"n\">tmp</span>\n</code></pre></div>\n<p>You can see that <code>g x</code> and <code>D g x dx</code> is computed twice. </p>\n<p>I would like to get the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">gx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">dgx</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">dx</span>\n  <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">gx</span><span class=\"o\">)</span> <span class=\"n\">gx</span> <span class=\"n\">dgx</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">gx</span> <span class=\"n\">dgx</span> <span class=\"n\">gx</span>\n</code></pre></div>\n<p>Here is mwe, look at the last example where I apply <code>D_let</code> manually to the lhs and automatically to the rhs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">β₁</span> <span class=\"n\">β₂</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β₂</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a'</span><span class=\"o\">,</span><span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">b'</span><span class=\"o\">)⟩</span>\n\n <span class=\"c1\">-- default plays role of a zero</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_default</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">default</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">default_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">default</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- derivative in zero direction is zero</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D_default</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">default</span> <span class=\"bp\">=</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">default_eval</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">default</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">instInhabitedForAll_1</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">default</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Basic combinators</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D_I</span>\n  <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dx</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D_K</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D_S</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">dx</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D_add_1</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dx</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D_add_2</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">dy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dy</span>\n\n<span class=\"kd\">@[simp high]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">D_let</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">tmp</span>  <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n         <span class=\"k\">let</span> <span class=\"n\">dtmp</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">dx</span>\n         <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">tmp</span> <span class=\"n\">dtmp</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">dx</span> <span class=\"n\">tmp</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">x</span> <span class=\"n\">dx</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">gx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n         <span class=\"n\">f</span> <span class=\"n\">gx</span> <span class=\"n\">gx</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span>\n    <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">gx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n         <span class=\"n\">f</span> <span class=\"n\">gx</span> <span class=\"n\">gx</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">D_let</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"c1\">-- this simplifes the derivative of constant function `D (λ x =&gt; f y y)`</span>\n    <span class=\"n\">trace_state</span>\n\n<span class=\"c1\">-- | fun x dx =&gt;</span>\n<span class=\"c1\">--     let tmp := g x;</span>\n<span class=\"c1\">--     let dtmp := D g x dx;</span>\n<span class=\"c1\">--     let tmp_1 := tmp;</span>\n<span class=\"c1\">--     let dtmp_1 := dtmp;</span>\n<span class=\"c1\">--     D (f tmp) tmp_1 dtmp_1 + D (fun x =&gt; f x) tmp dtmp tmp_1</span>\n\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rhs</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span>\n    <span class=\"n\">trace_state</span>\n\n<span class=\"c1\">-- | fun x dx =&gt;</span>\n<span class=\"c1\">--     let tmp := g x;</span>\n<span class=\"c1\">--     let dtmp := D (fun x =&gt; g x) x dx;</span>\n<span class=\"c1\">--     D (f (g x)) tmp dtmp +</span>\n<span class=\"c1\">--       (let tmp := g x;</span>\n<span class=\"c1\">--         let dtmp := D (fun x =&gt; g x) x dx;</span>\n<span class=\"c1\">--         D f tmp dtmp)</span>\n<span class=\"c1\">--         tmp</span>\n</code></pre></div>",
        "id": 282266177,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652456908
    },
    {
        "content": "<p>Would my requirement mean to modify the <code>isDefEq</code> at the beginning of <code>tryTheoremCore</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">tryTheoremCore</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bis</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorem</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">numExtraArgs</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">discharge</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">SimpM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">SimpM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Result</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Result</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">lhs</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>However <code>isDefEq</code> is calling <code>whnfCore</code></p>\n<p>Which looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">whnfCore</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">whnfEasyCases</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.whnf</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"bp\">..</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Expr.letE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">whnfCore</span> <span class=\"bp\">$</span> <span class=\"n\">b.instantiate1</span> <span class=\"n\">v</span>\n<span class=\"bp\">....</span>\n</code></pre></div>\n<p>so it always reduces let binding. Well it is called whnf after all. So there is no option to turn off zeta.</p>",
        "id": 282269849,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652458404
    },
    {
        "content": "<p>I will probably write my own tactic that  handles let bindings properly as changing these internals is a bad idea.</p>",
        "id": 282270828,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652458833
    }
]