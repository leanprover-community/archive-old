[
    {
        "content": "<p>Github copilot on Lean4 is sometimes helpful as you can see in this video.<br>\n<a href=\"https://www.youtube.com/watch?v=DXvA1qaQFtY\">https://www.youtube.com/watch?v=DXvA1qaQFtY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"DXvA1qaQFtY\" href=\"https://www.youtube.com/watch?v=DXvA1qaQFtY\"><img src=\"https://uploads.zulipusercontent.net/f2723687856caaf53c0373ca8fe0a2a46f8aa976/68747470733a2f2f692e7974696d672e636f6d2f76692f44587641317161514674592f64656661756c742e6a7067\"></a></div>",
        "id": 303541846,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665534707
    },
    {
        "content": "<p>Also, besides copilot itself, there have been a lot of recent papers showing that Codex, the model behind copilot, is pretty good at a lot of Lean- and Isabelle-related tasks like formalizing informal statements, formalizing informal proofs (including ones created by another AI model), informalizing formal Lean code, etc.  A lot of it is discussed on <a class=\"stream\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving\">#Machine Learning for Theorem Proving</a> .   And unlike a lot of research, this work is directly implementable.  It is already making its way into VS code plugins for Lean, and into the Lean docs.</p>",
        "id": 303605069,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665573141
    },
    {
        "content": "<p>I hope one day features like \"generate all cases in a match expression\" will get added to VSCode directly, but in the meantime copilot helps:<br>\n<a href=\"/user_uploads/3121/7zvqHKu9F3cr21QC2i3fP96i/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7zvqHKu9F3cr21QC2i3fP96i/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7zvqHKu9F3cr21QC2i3fP96i/image.png\"></a></div>",
        "id": 303678354,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1665593022
    },
    {
        "content": "<p>I think in Lean 3, you can do that with the <code>{! !}</code> hole syntax.</p>",
        "id": 303702311,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665601052
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/hole_commands.html#Match%20Stub\">https://leanprover-community.github.io/mathlib_docs/hole_commands.html#Match%20Stub</a></p>",
        "id": 303702508,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665601107
    },
    {
        "content": "<p>You don't even need this, writing a <code>_</code> is enough to trigger the code action.</p>",
        "id": 303703458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665601422
    }
]