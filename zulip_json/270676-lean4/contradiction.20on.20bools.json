[
    {
        "content": "<p>I expected contradiction to be able to close this goal -- is this something it should handle?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>Or more generally, any time when there are two hypotheses that have the same expression equal to different constructors</p>",
        "id": 295765520,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661730136
    },
    {
        "content": "<p>I'm not sure what <code>contradiction</code> should or shouldn't do, but you can add in <code>subst_vars</code> to help <code>contradiction</code> out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst_vars</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 295771411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661738157
    },
    {
        "content": "<p>ooooooh, never seen that tactic before, thanks!</p>",
        "id": 296027686,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661827231
    },
    {
        "content": "<p>I now realize this doesn't quite work for my use case, which is more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I think it's probably easiest to just wait for <code>cc</code> to be implemented</p>",
        "id": 296042584,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661840832
    },
    {
        "content": "<p>You can just rewrite and then use cases</p>",
        "id": 296043935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661841595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/contradiction.20on.20bools/near/296042584\">said</a>:</p>\n<blockquote>\n<p>I now realize this doesn't quite work for my use case, which is more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I think it's probably easiest to just wait for <code>cc</code> to be implemented</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h₁.symm.trans</span> <span class=\"n\">h₂</span> <span class=\"c1\">-- establishes `true = false`</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 296044389,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1661841906
    },
    {
        "content": "<p>or <code>cases h₁ ▸ h₂</code></p>",
        "id": 296047376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661843599
    },
    {
        "content": "<p>For a single case doing it manually is perfectly fine, but I have a proof where there are a handful of cases that would almost all be solved by <code>cc</code>. So right now I manually go through the cases and name the hypotheses and construct the proof terms, but doing <code>&lt;;&gt; (fst | cc | simp; assumption)</code> instead would be really nice</p>",
        "id": 296136974,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661870513
    },
    {
        "content": "<p>Actually, is somebody working on reimplementing <code>cc</code> yet? I've been looking for metaprogramming projects to try out</p>",
        "id": 296137137,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661870557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/contradiction.20on.20bools/near/296137137\">said</a>:</p>\n<blockquote>\n<p>Actually, is somebody working on reimplementing <code>cc</code> yet? I've been looking for metaprogramming projects to try out</p>\n</blockquote>\n<p>Nobody is currently working on <code>cc</code>, and would be great to have someone helping with it.</p>",
        "id": 296138812,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661871024
    },
    {
        "content": "<p>Ok, I'll give it a shot! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Should it live in core or mathlib?</p>",
        "id": 296139631,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1661871269
    },
    {
        "content": "<p>It should be in the lean4 repo.</p>",
        "id": 296140239,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661871454
    }
]