[
    {
        "content": "<p>I've asked in a <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Simple.20HEq\">previous thread</a> how to prove a simple heterogeneous equality. Unfortunately that didn't work for my real project, so I've come up with a more complex MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Graph</span>            <span class=\"o\">:</span> <span class=\"kt\">Type</span>                                  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>                                  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Path.final</span>       <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>                         <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Path.NonEmpty</span>    <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>                         <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Path.SamePrefix</span>  <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>                <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Path.final'</span>      <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path.NonEmpty</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sibling</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span> <span class=\"bp\">//</span> <span class=\"n\">Path.SamePrefix</span> <span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">}</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Leaf</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Leaf</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sibling</span> <span class=\"n\">l.path</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s.val.final</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Path.NonEmpty</span> <span class=\"n\">s.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">s.val.final</span> <span class=\"bp\">=</span> <span class=\"n\">s.val.final'</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Again the goal is in a sense trivial as it feels intuitively obvious that a type cast should produce something heterogeneously equal (perhaps my intuition fails me here?). But I don't know how to solve this proof.<br>\nAny guidance on how to approach this would be appreciated :)</p>",
        "id": 312628478,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1669642467
    },
    {
        "content": "<p>This is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cast_heq#doc\">docs4#cast_heq</a></p>",
        "id": 312629164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669642695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Leaf</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sibling</span> <span class=\"n\">l.path</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s.val.final</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Path.NonEmpty</span> <span class=\"n\">s.val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">s.val.final</span> <span class=\"bp\">=</span> <span class=\"n\">s.val.final'</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">HEq</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cast_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 312629225,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669642718
    },
    {
        "content": "<p>Hmm, this still doesn't work for my real project. I'll try to refine the MWE.</p>",
        "id": 312676564,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1669655457
    }
]