[
    {
        "content": "<p>I ran into some confusing behaviour when writing <code>induction y with case mk a b =&gt;</code>.<br>\nNow I figure that it should be <code>induction y with | mk a b =&gt;</code>, but the error is shown very far from the place where the actual problem occurred.<br>\nFurthermore, the vscode infoview keeps working and updating the tactic state, so it seems to think <code>with case</code> is fine.</p>\n<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- The infoview keeps working</span>\n    <span class=\"k\">have</span> <span class=\"n\">other</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"c1\">-- `other` is shown in the infoview as expected</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"c1\">-- infoview shows: goals accomplished!</span>\n\n\n<span class=\"c1\">-- But here it finally errors with `expected |`</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Foo\"</span>\n\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- no error shows up here, but the infoview does stop updating</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nonexistent</span><span class=\"bp\">;</span>\n    <span class=\"n\">constructor</span>\n\n<span class=\"c1\">-- The first error appears here, `expected |`</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"s2\">\"BAR\"</span>\n</code></pre></div>\n<p>This is especially confusing in larger proofs, where the error may occur off-screen</p>",
        "id": 287498484,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656256554
    },
    {
        "content": "<p><code>with</code> can be followed by a tactic that is evaluated for every branch, so this is by design</p>",
        "id": 287501457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656260707
    },
    {
        "content": "<p>Though perhaps a different choice of syntax could make that clearer</p>",
        "id": 287501541,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656260840
    },
    {
        "content": "<p>Hmm, then maybe the <code>|</code> should be optional, since that tactic might close all goals. That fixes the first example.<br>\nThen, if the <code>|</code> is omitted, maybe we can also stop suppressing errors in the tactic, so the second example will error at <code>apply nonexistent</code></p>",
        "id": 287501687,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656261038
    }
]