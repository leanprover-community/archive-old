[
    {
        "content": "<p>What's the right approach to get lean3 style <code>cases h with hp hq hr</code> working? Here's a test case for <code>And</code> that I am not sure how to get working</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this is the existing way</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"cases\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- my attempt</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span>\n  <span class=\"c1\">-- failed with</span>\n  <span class=\"c1\">-- elaboration function for 'missing' has not been implemented</span>\n  <span class=\"c1\">-- [Error pretty printing syntax: unknown constant 'missing'. Falling back to raw printer.]</span>\n  <span class=\"c1\">-- &lt;missing&gt;</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 231516176,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616522733
    },
    {
        "content": "<p>Reading the rss feed, I guess my usage of <code>| _</code>, specifically <code>_</code> was the problem?</p>",
        "id": 231517794,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616523361
    },
    {
        "content": "<p>No, that was unrelated :)</p>",
        "id": 231517918,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616523406
    },
    {
        "content": "<p>If something goes wrong in expanded syntax, adding antiquotation kinds is always the best first move</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231518139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616523511
    },
    {
        "content": "<p>This is because <code>cases</code> can accept a sequence of targets (which in turn can be more than just a <code>term</code>): <a href=\"https://github.com/leanprover/lean4/blob/a0eff55772c7c02e6e203dccda9c7ee51b623146/src/Init/Notation.lean#L296\">https://github.com/leanprover/lean4/blob/a0eff55772c7c02e6e203dccda9c7ee51b623146/src/Init/Notation.lean#L296</a></p>",
        "id": 231518318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616523601
    },
    {
        "content": "<p>Thanks Yakov and Sebastian!</p>",
        "id": 231518731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616523777
    },
    {
        "content": "<p>(Now to get the variadic one working ...)</p>",
        "id": 231518829,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616523830
    },
    {
        "content": "<p>Why does the first example work, and what about the semicolon makes it work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">And3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">intro</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">third</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"cases\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- nil case</span>\n\n<span class=\"c1\">-- works, but why?</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">And3</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"bp\">;</span> <span class=\"c1\">-- notice semicolon here</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n\n<span class=\"c1\">-- this breaks, as I think it should</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">And3</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"c1\">-- parse error because we did not deal with the cons case</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 231521816,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616524938
    },
    {
        "content": "<p>Ah the working example is that match destructs across all the structure/inductive fields; the third one is hidden under an unhygienic name</p>",
        "id": 231527167,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616526931
    }
]