[
    {
        "content": "<p>I'm struggling to understand why the <code>baz</code> proof does not work here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.CasesM</span>\n\n<span class=\"c1\">-- This works:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n   <span class=\"bp\">·</span> <span class=\"n\">casesm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n     <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n   <span class=\"bp\">·</span> <span class=\"n\">casesm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n     <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This works too:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span>\n               <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n   <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span>\n               <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n\n<span class=\"c1\">-- This does not work:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n   <span class=\"bp\">·</span> <span class=\"n\">casesm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n     <span class=\"c1\">-- tactic 'cases' failed, nested error:</span>\n     <span class=\"c1\">-- failed to revert baz, it is an auxiliary declaration created to represent recursive definitions</span>\n   <span class=\"bp\">·</span> <span class=\"n\">casesm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n     <span class=\"c1\">-- tactic 'cases' failed, nested error:</span>\n     <span class=\"c1\">-- failed to revert baz, it is an auxiliary declaration created to represent recursive definitions</span>\n</code></pre></div>",
        "id": 315681420,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670963898
    },
    {
        "content": "<p>Like, is this a bug in <a href=\"https://github.com/leanprover-community/mathlib4/blob/dd4f8930565fc17125c9e83f72f6ab35aeaac18d/Mathlib/Tactic/CasesM.lean#L75\"><code>casesm</code></a>, or a bug in Lean 4 core, or I am doing something wrong?</p>",
        "id": 315681746,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670964025
    },
    {
        "content": "<p>Looks like a missing <code>isAuxDecl</code> check in <code>casesm</code></p>",
        "id": 315682134,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670964193
    },
    {
        "content": "<p>what should happen if <code>ldecl.isAuxDecl</code> is true?</p>",
        "id": 315684144,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670964952
    },
    {
        "content": "<p>It should not try to match that hypothesis as it is merely an internal helper</p>",
        "id": 315684319,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670965002
    },
    {
        "content": "<p>The context at the <code>casesm</code> call is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">inl</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 315684677,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670965117
    },
    {
        "content": "<p>where that <code>h</code> is italic</p>",
        "id": 315684688,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670965123
    },
    {
        "content": "<p>I'm guessing it considers that <code>h</code> to be auxiliary? It was generated by the preceding <code>cases h</code> line.</p>",
        "id": 315684762,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670965150
    },
    {
        "content": "<p>I don't want to ignore that <code>h</code>, because it's exactly what I need to proceed with the proof.</p>",
        "id": 315684956,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670965207
    },
    {
        "content": "<p>No, the auxiliary decl is <code>baz</code> itself for use in recursion. Which I assume you don't want to case on.</p>",
        "id": 315685104,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670965254
    },
    {
        "content": "<p>yep, that seems to fix it. Thanks!</p>",
        "id": 315685503,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670965355
    },
    {
        "content": "<p>I'll submit a PR to fix this in mathlib4.</p>",
        "id": 315685539,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670965366
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/991\">https://github.com/leanprover-community/mathlib4/pull/991</a></p>",
        "id": 315688243,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670966372
    }
]