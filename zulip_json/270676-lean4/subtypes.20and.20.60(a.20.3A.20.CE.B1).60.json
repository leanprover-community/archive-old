[
    {
        "content": "<p>In Lean 3 we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extract_val</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">extract_val</span>\n\n<span class=\"c1\">-- 115:1: def extract_val : Π {α : Type} (p : α → Prop), {x // p x} → α :=</span>\n<span class=\"c1\">--  λ {α : Type} (p : α → Prop) (a : {x // p x}), ↑a</span>\n</code></pre></div>\n<p>i.e.  <code>(a : α)</code> expands to <code>↑a</code>, which further elaborates to some <code>coe</code> stuff.</p>\n<p>In Lean 4 we instead have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extract_val</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">extract_val</span>\n\n<span class=\"c1\">-- def extract_val : {α : Type} → (p : α → Prop) → (Subtype fun (x : α) =&gt; p x) → α :=</span>\n<span class=\"c1\">--  fun {α : Type} (p : α → Prop) (a : Subtype fun (x : α) =&gt; p x) =&gt; a.val</span>\n</code></pre></div>\n<p>i.e. <code>(a : α)</code> expands directly to <code>a.val</code>, with no apparent intermediate steps.</p>\n<p>My question is: where is the logic governing that expansion in the Lean 4 version? Is it still going through <code>coe</code> somehow, but getting normalized before I can print it? Or is there some other magic somewhere?</p>",
        "id": 247802960,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627736097
    },
    {
        "content": "<p>It uses <code>coe</code> like lean 3, but the definition of the coercion is used directly rather than using the generic arrow</p>",
        "id": 247803098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627736322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/subtypes.20and.20.60.28a.20.3A.20.CE.B1.29.60/near/247802960\">said</a>:</p>\n<blockquote>\n<p>My question is: where is the logic governing that expansion in the Lean 4 version?</p>\n</blockquote>\n<p>As Mario said, you still declare the coercions by adding instances for the <code>Coe</code> type class.  The expansion is done here:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/479edbe2359b549c59b7d3de6e61a7f576e0df00/src/Lean/Elab/BuiltinNotation.lean#L243-L249\">https://github.com/leanprover/lean4/blob/479edbe2359b549c59b7d3de6e61a7f576e0df00/src/Lean/Elab/BuiltinNotation.lean#L243-L249</a><br>\n<a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/Lean/Meta/Coe.lean#L24-L40\">https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/Lean/Meta/Coe.lean#L24-L40</a></p>",
        "id": 247803323,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627736612
    },
    {
        "content": "<blockquote>\n<p>It uses coe like lean 3, but the definition of the coercion is used directly rather than using the generic arrow</p>\n</blockquote>\n<p>The uparrow is notation for <code>coe</code>:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/32bea737089f5153cef65e480601e2e610973222/src/Init/Coe.lean#L62\">https://github.com/leanprover/lean4/blob/32bea737089f5153cef65e480601e2e610973222/src/Init/Coe.lean#L62</a></p>\n<p>So I'm a bit confused about what would be different about using one or the other.</p>",
        "id": 247805033,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627739162
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/Lean/Meta/Coe.lean#L24-L40\">https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/Lean/Meta/Coe.lean#L24-L40</a></p>\n</blockquote>\n<p>This appears to validate my hypothesis that the main difference between Lean 3 and Lean 4 here is that Lean 4 is doing more normalization sooner.</p>",
        "id": 247805094,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627739241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/subtypes.20and.20.60.28a.20.3A.20.CE.B1.29.60/near/247805033\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It uses coe like lean 3, but the definition of the coercion is used directly rather than using the generic arrow</p>\n</blockquote>\n<p>The uparrow is notation for <code>coe</code>:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/32bea737089f5153cef65e480601e2e610973222/src/Init/Coe.lean#L62\">https://github.com/leanprover/lean4/blob/32bea737089f5153cef65e480601e2e610973222/src/Init/Coe.lean#L62</a></p>\n</blockquote>\n<p>I'd avoid the uparrow completely since it produces a different expression than the type annotation.  We should probably change it to a custom elaborator so that it does the same thing as the regular coercion.</p>",
        "id": 247806327,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627741153
    },
    {
        "content": "<blockquote>\n<p>Is it still going through <code>coe</code> somehow, but getting normalized before I can print it?</p>\n</blockquote>\n<p>Missed this one, you're almost right except for the time point.  The normalization happens during elaboration.</p>",
        "id": 247806459,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627741349
    },
    {
        "content": "<p>Should we reverse the transformation in delab / pretty printing? I see arguments both ways</p>",
        "id": 247806733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627741744
    },
    {
        "content": "<p>I think a <code>pp.coe</code> option would be good for common stuff (like <code>Int.ofNat</code>, etc.).  But we can add this very easily in mathlib.</p>",
        "id": 247807122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627742266
    },
    {
        "content": "<p>As in, we have one <code>pp.coe</code> option that turns on all uses of the arrow instead of coe-unfoldings, or we have an attribute that selects particular coercions that are affected by <code>pp.coe</code> and others are always expanded?</p>",
        "id": 247807218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627742383
    },
    {
        "content": "<p>One <code>pp.coe</code> option that prints the arrow instead of the specific functions.</p>",
        "id": 247807272,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627742416
    },
    {
        "content": "<p>(Or even nothing.)</p>",
        "id": 247807275,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627742426
    },
    {
        "content": "<p>I would go for using the arrow by default (not nothing and not the expansion), and the others can be pp options</p>",
        "id": 247807317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627742509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/subtypes.20and.20.60.28a.20.3A.20.CE.B1.29.60/near/247806733\">said</a>:</p>\n<blockquote>\n<p>Should we reverse the transformation in delab / pretty printing? I see arguments both ways</p>\n</blockquote>\n<p>I'm curious: how would one reverse the <code>coe</code>? Isn't the information that a function application came from a <code>coe</code> lost during elaboration?</p>",
        "id": 247818375,
        "sender_full_name": "Mac",
        "timestamp": 1627756495
    },
    {
        "content": "<p>I believe you can attach the delab to whatever expression is used in the coe, unless it is too basic (i.e. an identity function or a lambda or other built in syntax)</p>",
        "id": 247820829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627760052
    },
    {
        "content": "<p>I think we will need to have a best practice around using only coes of the form <code>func x</code> or things only marginally more complicated than that, so that there is a definition to attach the delab to</p>",
        "id": 247820858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627760154
    }
]