[
    {
        "content": "<p>Hello, I am trying to create a custom command. I would like the user to provide a proof, either in term or in tactic mode. But unfortunately when using tactic mode, the tactic state is invisible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span><span class=\"n\">testCommand</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"#test\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[commandElab testCommand]</span> <span class=\"kd\">def</span> <span class=\"n\">elabTestCommand</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"bp\">$</span><span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"n\">none</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">expr</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n    <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- Why does it not show \"⊢ Nat\"?</span>\n</code></pre></div>\n<p>What am I missing?</p>",
        "id": 271855131,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1644857705
    },
    {
        "content": "<p>It seems like this happens because that, by itself, the <code>by</code> <a href=\"https://github.com/leanprover/lean4/blob/bdbffdaaf705e4fc9554aa03a99a076d9bb67477/src/Lean/Elab/BuiltinTerm.lean#L155\">elaborator</a> does nothing more than registering an mvar. Note the term isn't elaborated any further than that, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">exact</span> <span class=\"s2\">\"abc\"</span>\n</code></pre></div>\n<p>gives no error whereas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"s2\">\"abc\"</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does. You may want to use <code>elabTermAndSynthesize</code> to ensure tactic code is executed.</p>",
        "id": 271868811,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1644863809
    },
    {
        "content": "<p>Ah, that's great! Thanks!</p>",
        "id": 271880044,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1644868567
    },
    {
        "content": "<p>Unfortunately, <code>elabTermAndSynthesize</code> doesn't enforce the expected type in term mode. There is also a function<code>elabTermEnsuringType</code>, but that one does not support tactic mode. I have written my own combination of the two now (below). Is such a function already defined somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elabTermAndSynthesizeEnsuringType</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">errorMsgHeader</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n  <span class=\"n\">withRef</span> <span class=\"n\">stx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ensureHasType</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"n\">e</span> <span class=\"n\">errorMsgHeader</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 272387310,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645181862
    }
]