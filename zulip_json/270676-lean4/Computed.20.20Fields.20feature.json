[
    {
        "content": "<p>We have merged the \"Computed Fields\" PR. It is an amazing new feature. See release notes for additional details: <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a><br>\nThe following Lean types are using this feature: <code>Lean.Expr</code>, <code>Lean.Level</code>, and <code>Lean.Name</code>. So,  it is quite disruptive for meta-programmers that use these types. Please update your projects, and thanks for your patience.</p>",
        "id": 289258950,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657579404
    },
    {
        "content": "<p>Many thanks to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> for developing this feature!</p>",
        "id": 289259092,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657579483
    },
    {
        "content": "<blockquote>\n<p>The notation a[i] is not defined as follows</p>\n</blockquote>\n<p>Is this a typo for <code>now</code>?</p>",
        "id": 289259165,
        "sender_full_name": "Kevin Mullins",
        "timestamp": 1657579537
    },
    {
        "content": "<p>In the release notes, I guess that</p>\n<blockquote>\n<p>The notation <code>a[i]</code> is not defined as follows</p>\n</blockquote>\n<p>is meant to be</p>\n<blockquote>\n<p>The notation <code>a[i]</code> is <em>now</em> defined as follows</p>\n</blockquote>",
        "id": 289259167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657579537
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 289259242,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657579577
    },
    {
        "content": "<p>I will fix it.</p>",
        "id": 289259248,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657579581
    },
    {
        "content": "<p>Nice!  I used this sort of thing a lot in Scala case classes (which are like inductive types).  In Scala could define say <code>Expr.hash</code> in three different ways: (1) as a method which was recomputed every time, (2) as a value which was computed on creation of the object, (3) as a lazy value which was computed and cached only the first time it was called which was good for some expensive calculations.  All three were called the same way <code>e.hash</code> which made refactoring easy.</p>",
        "id": 289262289,
        "sender_full_name": "Jason Rute",
        "timestamp": 1657582013
    },
    {
        "content": "<p>What are the common use cases for this feature?</p>",
        "id": 289265979,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657585583
    },
    {
        "content": "<p>Any kind of O(1) precomputed information which is structurally recursive on the term, like the size of a subtree</p>",
        "id": 289266345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657586042
    },
    {
        "content": "<p>The obvious immediate application is the <code>Data</code> field of <code>Expr</code>, <code>Name</code>, <code>Level</code> which was an ergonomic wart compared to the lean 3 implementation of these types (which cheated by having a custom implementation which stored the computed field where lean couldn't reach it)</p>",
        "id": 289266418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657586123
    },
    {
        "content": "<p>This technique of \"augmented trees\" is very common in data structures</p>",
        "id": 289266521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657586238
    },
    {
        "content": "<p>Here's a whole lecture on it: <a href=\"https://www.youtube.com/watch?v=xVka6z1hu-I\">https://www.youtube.com/watch?v=xVka6z1hu-I</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"xVka6z1hu-I\" href=\"https://www.youtube.com/watch?v=xVka6z1hu-I\"><img src=\"https://uploads.zulipusercontent.net/fc0e73920efd77bd56a4579f2aae7dd4b976072f/68747470733a2f2f692e7974696d672e636f6d2f76692f78566b61367a3168752d492f64656661756c742e6a7067\"></a></div>",
        "id": 289266640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657586379
    },
    {
        "content": "<p>Very cool! Is the reason for taking <code>BinderInfo</code> out of <code>Data</code> basically that <code>BinderInfo</code> is \"actual\" data rather than a pure function of the rest of the <code>Expr</code>?</p>",
        "id": 289267410,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657587346
    },
    {
        "content": "<p>yes, this doesn't work if it's not a pure function</p>",
        "id": 289267595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657587527
    },
    {
        "content": "<p>it would be cool if we could bit-pack those together but that sounds difficult given lean's uniform ABI</p>",
        "id": 289267698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657587641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Computed.20.20Fields.20feature/near/289267698\">said</a>:</p>\n<blockquote>\n<p>it would be cool if we could bit-pack those together but that sounds difficult given lean's uniform ABI</p>\n</blockquote>\n<p>Yeah, there is now a new <code>BinderInfo</code> field in <code>Expr.lam/forallE</code> with (I am guessing) some small memory overhead.</p>",
        "id": 289267791,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657587746
    },
    {
        "content": "<p>An interesting side effect of the change is that <code>letE</code> no longer has <code>BinderInfo</code>. Not that this made much sense, so maybe the side effect is really a bug fix. However there is a mysterious <code>Bool</code> field in <code>| letE    : Name → Expr → Expr → Expr → Bool → Expr</code> -- is that the <code>nonDepLet</code> flag?</p>",
        "id": 289267816,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657587806
    },
    {
        "content": "<p>that sounds like it should be a computed field</p>",
        "id": 289267874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657587844
    },
    {
        "content": "<p>Oh okay, it is. In the <code>data</code> computation we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">_x</span> <span class=\"n\">t</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">nonDep</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"bp\">...</span>\n      <span class=\"n\">mkDataForLet</span> <span class=\"bp\">...</span> <span class=\"n\">nonDep</span>\n</code></pre></div>\n<p>which is both stored and computed.</p>",
        "id": 289267916,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657587913
    },
    {
        "content": "<p>It is an input in <code>mkLet</code>, so it seems like it's not actually a computed field. Not sure what the story is there</p>",
        "id": 289268013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657588023
    },
    {
        "content": "<p>I mean, the data in <code>Expr.data</code> is not sufficient to determine whether a given variable in fact appears in the body, so even though it is a pure function of the expr inputs it would be computationally expensive to determine it</p>",
        "id": 289268096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657588136
    },
    {
        "content": "<p>I am assuming: previously, <code>Data</code> was a mix of stored and computed fields; now, we have an actual computed field; but, for backwards compatibility, we still expose the stored parts (binder infos and the non-dep let flag) within <code>Data</code>.</p>",
        "id": 289268112,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657588160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Computed.20.20Fields.20feature/near/289267816\">said</a>:</p>\n<blockquote>\n<p>An interesting side effect of the change is that <code>letE</code> no longer has <code>BinderInfo</code>. Not that this made much sense, so maybe the side effect is really a bug fix. However there is a mysterious <code>Bool</code> field in <code>| letE    : Name → Expr → Expr → Expr → Bool → Expr</code> -- is that the <code>nonDepLet</code> flag?</p>\n</blockquote>\n<p>The <code>nonDepInfo</code> flag is purely a placeholder for a future possible optimization in the compiler.  It doesn't have any effect at the moment, but it is very much a flag and cannot be (purely) computed from the expression since it depends on type checking.  The idea is that <code>nonDepLet := true</code> flags let-expressions which do not require ζ-reduction, that is, which could be replaced by a <code>let_fun</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">nonDep</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- type checks</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">nonDep</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- doesn't type check</span>\n</code></pre></div>\n<p>(Purely hypothetical, of course.  To reiterate, the flag is completely unused at the moment.)</p>",
        "id": 289285054,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1657608251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Computed.20.20Fields.20feature/near/289268112\">said</a>:</p>\n<blockquote>\n<p>I am assuming: previously, <code>Data</code> was a mix of stored and computed fields; now, we have an actual computed field; but, for backwards compatibility, we still expose the stored parts (binder infos and the non-dep let flag) within <code>Data</code>.</p>\n</blockquote>\n<p>I tried to keep the diff minimal for the Expr-refactoring.  There are indeed a lot of parts that can be cleaned up or changed now (without affecting the API and without big refactorings, which is the whole point of the feature).  For example the <code>nonDepLet</code> and <code>binderInfo</code> bits in <code>Data</code> are indeed vestigial and can be removed.  With the extra 4 bits we could support 1048575 bound variables instead of 65535 (one can dream).  We could also split the hash, the bitmask, the approximate depth, and the loose variable bound into different fields.  (Maybe allowing four billion bound variables. <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span>)</p>",
        "id": 289285460,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1657608662
    },
    {
        "content": "<blockquote>\n<p>it would be cool if we could bit-pack those together but that sounds difficult given lean's uniform ABI</p>\n</blockquote>\n<p>There's nothing in Lean's ABI that prevents bit-packing of fields in a constructor (uniformity only means we can't pack <code>Bool × Bool</code> etc.)</p>",
        "id": 289285806,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1657609006
    },
    {
        "content": "<p>If I have a <code>List Nat</code> and I compute length with this new feature, am I doubling memory consumption? I.e. does every tail store its length?</p>",
        "id": 289293431,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657614979
    },
    {
        "content": "<p>It would indeed store the length in every cons cell, but that's only a 33% increase per cons cell (which is 24 bytes at the moment if I'm not mistaken).  The impact on the total memory consumption is less since not everything is a cons cell.</p>",
        "id": 289294025,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1657615342
    },
    {
        "content": "<p>Is the definition of the function also exposed for proof purposes? I was doing some backflips before to cache these values -- super useful feature :)</p>",
        "id": 290040112,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1658190298
    },
    {
        "content": "<p>It's just a regular function on the datatype from the kernel's PoV</p>",
        "id": 290066279,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658218210
    },
    {
        "content": "<p>Can this be used with structures and/or classes, or am I thinking about this incorrectly? I think the other alternative is to make it a def and use the caching offered by <code>Thunk</code>?</p>\n<p>For instance replacing <code>sum</code> and <code>h_sum</code> with a computed field:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_sum</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290147485,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658258216
    },
    {
        "content": "<p>Note that <code>Thunk</code> is different: <code>Thunk</code> is lazy while the computed fields for inductives are strict.</p>",
        "id": 290147592,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658258278
    },
    {
        "content": "<p>The reason computed fields are not implemented (yet) for structures is twofold: 1) structures are a bit more work since you need to override the projections as well, and 2) it's much less urgent for structures since you can simulate most of the feature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cached</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">cached</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">cached</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EmptyCollection</span> <span class=\"o\">(</span><span class=\"n\">Cached</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">emptyCollection</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Cached</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">Cached</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">allEq</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">hb</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">hc</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Cached</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.allEq</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"o\">(</span><span class=\"n\">Cached</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">hash</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">hash</span> <span class=\"o\">:</span> <span class=\"n\">Cached</span> <span class=\"o\">(</span><span class=\"n\">Hashable.hash</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span>\n\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eq_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.allEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">A.extIff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.a</span> <span class=\"bp\">=</span> <span class=\"n\">b.a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The only downside of this simulation is that you get extra fields.  But you don't get any exotic terms where the extra fields have the wrong value.</p>",
        "id": 290148231,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658258590
    },
    {
        "content": "<p>(Deleted unreproducible bug report)</p>",
        "id": 300819928,
        "sender_full_name": "cognivore",
        "timestamp": 1664200661
    },
    {
        "content": "<p>(Deleted irrelevant version details)</p>",
        "id": 300820040,
        "sender_full_name": "cognivore",
        "timestamp": 1664200687
    },
    {
        "content": "<p>It's interesting that <code>computedField</code> doesn't seem to be used neither in lean4 nor in mathlib. Is there a reason? Am I just bad at <code>grepping</code>?</p>",
        "id": 300820212,
        "sender_full_name": "cognivore",
        "timestamp": 1664200752
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"bp\">'\\</span><span class=\"o\">[</span><span class=\"n\">computedField'</span> <span class=\"n\">src</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Level.lean</span>\n<span class=\"mi\">97</span><span class=\"o\">:</span>  <span class=\"kd\">@[computedField]</span> <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Data</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr.lean</span>\n<span class=\"mi\">469</span><span class=\"o\">:</span>  <span class=\"kd\">@[computedField, extern c inline \"lean_ctor_get_uint64(#1, lean_ctor_num_objs(#1)*sizeof(void*))\"]</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude.lean</span>\n<span class=\"mi\">3299</span><span class=\"o\">:</span>  <span class=\"kd\">@[computedField]</span> <span class=\"n\">hash</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">UInt64</span>\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">ComputedFields.lean</span>\n<span class=\"mi\">38</span><span class=\"o\">:</span>      <span class=\"n\">throwError</span> <span class=\"s2\">\"The @[computedField] attribute can only be used in the with-block of an inductive\"</span>\n<span class=\"mi\">202</span><span class=\"o\">:</span>        <span class=\"n\">logError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{computedFieldName}' must be tagged with @[computedField]\"</span>\n</code></pre></div>",
        "id": 300830247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664203548
    },
    {
        "content": "<p>Funny. Sorry, I don't think I had my terminals straight today.</p>",
        "id": 300830970,
        "sender_full_name": "cognivore",
        "timestamp": 1664203758
    }
]