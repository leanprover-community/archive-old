[
    {
        "content": "<p>Leo and I recently revisited some of the forwardport/backport decisions that we had postponed when first working on binport. We decided that we will not support <a href=\"https://github.com/dselsam/binport/issues/3\">https://github.com/dselsam/binport/issues/3</a> in Lean4. Could somebody please backport this change? (Not removing the feature from the kernel, just changing the very small number of inductive types that currently use the feature)</p>",
        "id": 246659192,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626820439
    },
    {
        "content": "<p>We could also support this in the porting tool</p>",
        "id": 246659382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626820577
    },
    {
        "content": "<p>It is barely used. It seems much easier to backport.</p>",
        "id": 246659401,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626820600
    },
    {
        "content": "<p>Is there an easy way to produce a list of the places in mathlib this currently occurs?</p>",
        "id": 246685054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626850157
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bad</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">declaration.to_name</span> <span class=\"bp\">$</span>\n    <span class=\"n\">env.filter</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">env.is_inductive</span> <span class=\"n\">d.to_name</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bad</span> <span class=\"n\">d.type</span>\n\n<span class=\"c1\">-- [category_theory.presieve.singleton,</span>\n<span class=\"c1\">--  category_theory.presieve.pullback_arrows,</span>\n<span class=\"c1\">--  has_finite_inter.finite_inter_closure,</span>\n<span class=\"c1\">--  zorn.chain_closure,</span>\n<span class=\"c1\">--  ε_NFA.ε_closure,</span>\n<span class=\"c1\">--  category_theory.presieve.of_arrows,</span>\n<span class=\"c1\">--  generate_pi_system]</span>\n</code></pre></div>",
        "id": 246686251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626851312
    },
    {
        "content": "<p>There are some others where the issue is in constructor arguments, e.g. the <code>thunk lazy_list</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">lazy_list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">lazy_list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">thunk</span> <span class=\"n\">lazy_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lazy_list</span>\n</code></pre></div>",
        "id": 246727139,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626877605
    },
    {
        "content": "<p>Oh that one's actually a problem, we can't change that without breaking <code>lazy_list</code> because <code>thunk</code> is magic</p>",
        "id": 246728324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626878163
    },
    {
        "content": "<p>but surely lean should be able to handle this, it's a nested inductive</p>",
        "id": 246728458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626878224
    },
    {
        "content": "<p>thunk is just a def in lean3, but a structure in lean4 -- for this example, it would be sufficient for binport if we just make thunk a structure in lean3 instead of changing this type (so we can auto-align <code>thunk</code> -&gt; <code>Thunk</code>)</p>",
        "id": 246729753,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626878821
    },
    {
        "content": "<p>Well, I want to press more on the issue with defs in constructors, because that seems like it might be a problem in lean 4. It seems weird to me that this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Sum</span> <span class=\"n\">A</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>But this would not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Sum</span> <span class=\"n\">A</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 246732946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626879935
    },
    {
        "content": "<p>Ah, no after some testing the line is a bit different; defs like <code>X</code> just can't be used at all in nested inductives</p>",
        "id": 246733410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626880151
    },
    {
        "content": "<p>Currently, (most of) the type traversals inside the inductive-type module (and all built-in constructions) do not <code>whnf</code> before descending into the body. So, many of the checks (e.g. ok-nesting/positivity) are effectively syntactic.</p>",
        "id": 246741626,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1626884032
    }
]