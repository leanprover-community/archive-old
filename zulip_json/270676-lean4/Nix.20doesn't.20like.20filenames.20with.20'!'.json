[
    {
        "content": "<p>Reposting <a href=\"https://github.com/leanprover-community/mathlib4/pull/1212\">mathlib4#1212</a> here in case someone knows whether this is a Nix issue or an issue in the lean Nix derivation (<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ?):</p>\n<blockquote>\n<p>I've tried to follow the lean4 manual to get a working flake.nix under NixOS because I haven't figured out how to get elan run correctly.</p>\n<p><div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"ss\">description =</span> <span class=\"s2\">\"My Lean package\"</span><span class=\"p\">;</span>\n\n  inputs<span class=\"o\">.</span>lean<span class=\"o\">.</span><span class=\"ss\">url =</span> <span class=\"l\">github:leanprover/lean4</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>std4-src<span class=\"o\">.</span><span class=\"ss\">url =</span> <span class=\"l\">github:leanprover/std4</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>std4-src<span class=\"o\">.</span><span class=\"ss\">flake =</span> <span class=\"no\">false</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>qq-src<span class=\"o\">.</span><span class=\"ss\">url =</span> <span class=\"l\">github:gebner/quote4</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>qq-src<span class=\"o\">.</span><span class=\"ss\">flake =</span> <span class=\"no\">false</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>aesop-src<span class=\"o\">.</span><span class=\"ss\">url =</span> <span class=\"l\">github:JLimperg/aesop</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>aesop-src<span class=\"o\">.</span><span class=\"ss\">flake =</span> <span class=\"no\">false</span><span class=\"p\">;</span>\n  inputs<span class=\"o\">.</span>flake-utils<span class=\"o\">.</span><span class=\"ss\">url =</span> <span class=\"l\">github:numtide/flake-utils</span><span class=\"p\">;</span>\n\n  <span class=\"ss\">outputs =</span> <span class=\"p\">{</span> self<span class=\"p\">,</span> lean<span class=\"p\">,</span> std4-src<span class=\"p\">,</span> qq-src<span class=\"p\">,</span> aesop-src<span class=\"p\">,</span> flake-utils <span class=\"p\">}:</span> flake-utils<span class=\"o\">.</span>lib<span class=\"o\">.</span>eachDefaultSystem <span class=\"p\">(</span>system<span class=\"p\">:</span>\n    <span class=\"k\">let</span>\n      <span class=\"ss\">leanPkgs =</span> lean<span class=\"o\">.</span>packages<span class=\"o\">.</span><span class=\"err\">$</span><span class=\"p\">{</span>system<span class=\"p\">};</span>\n      <span class=\"ss\">std =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n        <span class=\"ss\">name =</span> <span class=\"s2\">\"Std\"</span><span class=\"p\">;</span>\n    <span class=\"ss\">src =</span> <span class=\"s2\">\"</span><span class=\"si\">${</span>std4-src<span class=\"si\">}</span><span class=\"s2\">/\"</span><span class=\"p\">;</span>\n      <span class=\"p\">};</span>\n      <span class=\"ss\">qq =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n        <span class=\"ss\">name =</span> <span class=\"s2\">\"Qq\"</span><span class=\"p\">;</span>\n    <span class=\"ss\">src =</span> <span class=\"s2\">\"</span><span class=\"si\">${</span>qq-src<span class=\"si\">}</span><span class=\"s2\">/\"</span><span class=\"p\">;</span>\n      <span class=\"p\">};</span>\n      <span class=\"ss\">aesop =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n        <span class=\"ss\">deps =</span> <span class=\"p\">[</span> std <span class=\"p\">];</span>\n        <span class=\"ss\">name =</span> <span class=\"s2\">\"Aesop\"</span><span class=\"p\">;</span>\n    <span class=\"ss\">src =</span> <span class=\"s2\">\"</span><span class=\"si\">${</span>aesop-src<span class=\"si\">}</span><span class=\"s2\">/\"</span><span class=\"p\">;</span>\n      <span class=\"p\">};</span>\n      <span class=\"ss\">pkg =</span> leanPkgs<span class=\"o\">.</span>buildLeanPackage <span class=\"p\">{</span>\n        <span class=\"ss\">deps =</span> <span class=\"p\">[</span> std  qq aesop <span class=\"p\">];</span>\n        <span class=\"ss\">name =</span> <span class=\"s2\">\"Mathlib\"</span><span class=\"p\">;</span>  <span class=\"c1\"># must match the name of the top-level .lean file</span>\n        <span class=\"ss\">src =</span> <span class=\"o\">.</span><span class=\"l\">/.</span><span class=\"p\">;</span>\n      <span class=\"p\">};</span>\n    <span class=\"k\">in</span> <span class=\"k\">rec</span> <span class=\"p\">{</span>\n      <span class=\"ss\">packages =</span> pkg <span class=\"o\">//</span> <span class=\"p\">{</span>\n        <span class=\"k\">inherit</span> std<span class=\"p\">;</span>\n    <span class=\"k\">inherit</span> aesop<span class=\"p\">;</span>\n    <span class=\"k\">inherit</span> qq<span class=\"p\">;</span>\n        <span class=\"k\">inherit</span> <span class=\"p\">(</span>leanPkgs<span class=\"p\">)</span> lean<span class=\"p\">;</span>\n      <span class=\"p\">};</span>\n\n      <span class=\"ss\">defaultPackage =</span> packages<span class=\"o\">.</span>modRoot<span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 317843868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671979219
    },
    {
        "content": "<blockquote>\n<p>when running nix shell I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">store</span> <span class=\"n\">path</span> <span class=\"bp\">'</span><span class=\"mi\">0</span><span class=\"n\">v269bm9c066cm2xrgj4ic37cy7j1y2n</span><span class=\"bp\">-</span><span class=\"n\">Clear</span><span class=\"bp\">!.</span><span class=\"n\">lean'</span> <span class=\"n\">contains</span> <span class=\"n\">illegal</span> <span class=\"n\">character</span> <span class=\"sc\">'!'</span>\n<span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"c1\">--show-trace' to show detailed location information)</span>\n</code></pre></div>\n</blockquote>",
        "id": 317843951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671979281
    },
    {
        "content": "<p>I guess I didn't anticipate that. I'll add escaping.</p>",
        "id": 317844082,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671979353
    }
]