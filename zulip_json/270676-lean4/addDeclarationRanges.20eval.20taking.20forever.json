[
    {
        "content": "<p>The final #eval in this snippet is being processed forever</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">name</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">drs</span> <span class=\"o\">:</span> <span class=\"n\">DeclarationRanges</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">column</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n        <span class=\"n\">charUtf16</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">endPos</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">column</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n        <span class=\"n\">endCharUtf16</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n    <span class=\"n\">selectionRange</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">column</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n        <span class=\"n\">charUtf16</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">endPos</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">column</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n        <span class=\"n\">endCharUtf16</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">addDeclarationRanges</span> <span class=\"n\">name</span> <span class=\"n\">drs</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235317338,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1618912630
    },
    {
        "content": "<p>Actually it does work when executing in command line but not in VSCode</p>",
        "id": 235318355,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1618913164
    },
    {
        "content": "<p>I wonder if this is related to <a href=\"#narrow/stream/270676-lean4/topic/can't.20print.20unit/near/234134267\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/can't.20print.20unit/near/234134267</a></p>",
        "id": 235318480,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618913257
    },
    {
        "content": "<p>In Emacs I just get an empty message as expected</p>",
        "id": 235318959,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618913530
    },
    {
        "content": "<p>This is interesting.  Apparently the server returns empty messages:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code>  <span class=\"p\">{</span>\n    <span class=\"nt\">\"params\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"uri\"</span><span class=\"p\">:</span> <span class=\"s2\">\"file:///home/gebner/lean4/foo.lean\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"diagnostics\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n          <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lean 4 server\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"severity\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"range\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"start\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"nt\">\"line\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n              <span class=\"nt\">\"character\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"end\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"nt\">\"line\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n              <span class=\"nt\">\"character\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">},</span>\n          <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"fullRange\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"start\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"nt\">\"line\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n              <span class=\"nt\">\"character\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"end\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"nt\">\"line\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n              <span class=\"nt\">\"character\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"textDocument/publishDiagnostics\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"jsonrpc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2.0\"</span>\n  <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 235342814,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618925122
    },
    {
        "content": "<p>I wonder if it's related to a similar issue I'm facing with side-effecting <code>MetaM Unit</code> stuff.</p>",
        "id": 235342943,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618925171
    },
    {
        "content": "<p>I seem to also get infinite loops if I don't print something using <code>trace[Meta.debug]</code> and make a pure side-effect.</p>",
        "id": 235342997,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618925198
    },
    {
        "content": "<p>The vscode extension then throws an exception (and doesn't update the diagnostics):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Notification handler 'textDocument/publishDiagnostics' failed with message: message must be set\n</code></pre></div>",
        "id": 235343009,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618925202
    },
    {
        "content": "<p>I see <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> fixed it on the extension side, but I suppose we could still suppress empty messages from the server?</p>",
        "id": 235349079,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618927539
    },
    {
        "content": "<p>I'm not sure what the right solution here is.  Empty messages are not forbidden by the LSP protocol AFAICT.</p>",
        "id": 235349228,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618927582
    },
    {
        "content": "<p>Yeah, I just wonder what's the more helpful behavior. If people use it for side-effects, they probably don't want to see any empty message.</p>",
        "id": 235349423,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618927667
    },
    {
        "content": "<p>Yeah, suppressing the empty message is probably more helpful.</p>",
        "id": 235350159,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618927952
    },
    {
        "content": "<p>I think that suppressing empty messages should be done on the extension side. I think it is difficult to find all the places where lean can possibly send an empty message, I've run into this problem in 3 or 4 places before</p>",
        "id": 235407235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618949490
    },
    {
        "content": "<p>I would have made it specific to <code>#eval</code>, I don't know about any other parts that could send empty messages. But even then, there is a single function in the code that actually writes out the diagnostics notification to the client, so we could also filter them there.</p>",
        "id": 235407482,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618949633
    }
]