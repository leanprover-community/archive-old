[
    {
        "content": "<p>I would have expected </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Wrapper</span> <span class=\"n\">α</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>to return an error since it is clearly false for arbitrary <code>α</code>. But it seems that Lean will try to synthesize instances on a cases by cases basis after an instantiation of <code>α</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>The first line works, while the second rightfully throws a <code>failed to synthesize typeclass</code>. Am I understanding this right?</p>",
        "id": 290391976,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1658417745
    },
    {
        "content": "<p>The derived instance for <code>Wrapper</code> is indeed parametrized by the instance for <code>α</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">instDecidableEqWrapper</span>\n<span class=\"c1\">-- def instDecidableEqWrapper : {α : Type} → [inst : DecidableEq α] → DecidableEq (Wrapper α) :=</span>\n<span class=\"c1\">--   fun {α} [DecidableEq α] =&gt; [anonymous]</span>\n</code></pre></div>",
        "id": 290392245,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658417868
    }
]