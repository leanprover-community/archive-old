[
    {
        "content": "<p>I'm writing this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Table</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"o\">⟨[],</span> <span class=\"o\">[],</span> <span class=\"o\">[]⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s.splitOn</span> <span class=\"s2\">\"¨\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">header</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">data.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">headerParts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">header.splitOn</span> <span class=\"s2\">\"~\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">headerPart</span> <span class=\"k\">in</span> <span class=\"n\">headerParts</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">headerPart.splitOn</span> <span class=\"s2\">\" \"</span>\n      <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">names.concat</span> <span class=\"o\">(</span><span class=\"n\">split.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"n\">types</span> <span class=\"o\">:=</span> <span class=\"n\">types.concat</span> <span class=\"o\">(</span><span class=\"n\">typesMap</span> <span class=\"o\">(</span><span class=\"n\">split.get</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">⟨</span><span class=\"n\">names</span><span class=\"o\">,</span> <span class=\"n\">types</span><span class=\"o\">,</span> <span class=\"o\">[]⟩</span>\n</code></pre></div>\n<p>On the line <code>names := names.concat (split.get! 0)</code>, it's raising an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">names</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.18868</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Has anyone seen this?</p>",
        "id": 262895979,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638051617
    },
    {
        "content": "<p>In Lean 3 at least, that's usually because at the moment it's trying to resolve the dot notation, it does not know the type of the variable (<code>names</code> in this case).  This can be due to the order in which it is elaborating expressions.</p>\n<p>You can try doing <code>String.concat names (split.get! 0)</code> instead to help it out.</p>",
        "id": 262896144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638051909
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Table</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"o\">⟨[],</span> <span class=\"o\">[],</span> <span class=\"o\">[]⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s.splitOn</span> <span class=\"s2\">\"¨\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">types</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">header</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">data.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">headerParts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">header.splitOn</span> <span class=\"s2\">\"~\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">headerPart</span> <span class=\"k\">in</span> <span class=\"n\">headerParts</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">split</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">headerPart.splitOn</span> <span class=\"s2\">\" \"</span>\n      <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">List.concat</span> <span class=\"n\">names</span> <span class=\"o\">(</span><span class=\"n\">split.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n      <span class=\"n\">types</span> <span class=\"o\">:=</span> <span class=\"n\">types.concat</span> <span class=\"o\">(</span><span class=\"n\">typesMap</span> <span class=\"o\">(</span><span class=\"n\">split.get</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">⟨</span><span class=\"n\">names</span><span class=\"o\">,</span> <span class=\"n\">types</span><span class=\"o\">,</span> <span class=\"o\">[]⟩</span>\n</code></pre></div>\n<p>Still a bit weird</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">mk</span> <span class=\"n\">names</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">names</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.19230</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 262896224,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638052051
    },
    {
        "content": "<p>Hard to say without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 262896489,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638052504
    },
    {
        "content": "<p>I'm going to guess that it's because the <code>types</code> list is in a different universe than <code>names</code>.</p>",
        "id": 262896582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638052653
    },
    {
        "content": "<p><a href=\"https://gist.github.com/arthurpaulino/73fb9d6c4b26b786ce329f84a554d6cc\">https://gist.github.com/arthurpaulino/73fb9d6c4b26b786ce329f84a554d6cc</a></p>",
        "id": 262896597,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638052683
    },
    {
        "content": "<p>You could check this by removing <code>types</code> and seeing if the error goes away, and removing <code>names</code> and doing the same.</p>",
        "id": 262896629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638052694
    },
    {
        "content": "<p>I removed <code>types</code> and it still doesn't work. Then I removed <code>names</code> and it works smoothly</p>",
        "id": 262896654,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638052755
    },
    {
        "content": "<p>It's probably because <code>Table</code> is also in a different universe</p>",
        "id": 262896668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638052796
    },
    {
        "content": "<p>How is this universe change happening? And how can I prevent it from happening?</p>",
        "id": 262896790,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638052969
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span>\n<span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>A way to prevent this from happening is to use the suggestion that's come up to use an inductive type (an enum basically) that represents the specific types that can appear in your database.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DType</span> <span class=\"bp\">|</span> <span class=\"n\">DNat</span> <span class=\"bp\">|</span> <span class=\"n\">DString</span> <span class=\"bp\">|</span> <span class=\"n\">DBool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DType.toType</span> <span class=\"o\">:</span> <span class=\"n\">DType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">DNat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">DString</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">DBool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DVal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">DType</span><span class=\"o\">),</span> <span class=\"n\">t.toType</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">DVal</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">DType.DString</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Then <code>List DType : Type 0</code>.</p>",
        "id": 262897026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638053396
    },
    {
        "content": "<p>There's nothing you can do with a <code>Type</code> at runtime anyways, so the <code>list Type</code> was kind of useless I think.</p>",
        "id": 262897100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638053507
    },
    {
        "content": "<p>Hm, I will try that. Thanks!</p>",
        "id": 262899538,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638057438
    },
    {
        "content": "<p>Also if you are writing non trivial parsers you might be interested in the <code>Lean.Data.Parsec</code> module which is a partial copy of Haskells <code>parsec</code></p>",
        "id": 262899612,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638057602
    },
    {
        "content": "<p>It worked! Thanks!<br>\nI will improve the parser once I get a first working version</p>",
        "id": 262902242,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638062151
    }
]