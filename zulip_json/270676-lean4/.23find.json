[
    {
        "content": "<p>Four years after the initial crappy version, I've made a <a href=\"https://github.com/IPDSnelting/tba-2021/blob/master/TBA/Util/Find.lean\">less bad version of <code>#find</code></a> for our lab course using Lean 4 powers:</p>\n<ul>\n<li>support for named metavariables allows for nonlinear patterns as in <code>?n + _ = _ + ?n</code></li>\n<li>crucially, it should now be mostly instantaneous after the first run: we cache all imported declarations in a head-indexed hash map in a global IO ref. We can easily do this because Lean 4's environment uses a two-level (imported/local) declaration map, and because the server process is restarted whenever the imports change (so we don't have to worry about cache invalidation).</li>\n</ul>",
        "id": 243616013,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624433749
    },
    {
        "content": "<p>It's not exactly thoroughly tested, and at least one issue with hypotheses (induces higher-order unification, see TODO) is known.</p>",
        "id": 243616134,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624433834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span></p>",
        "id": 243619394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624435935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.23find/near/243616013\">said</a>:</p>\n<blockquote>\n<p>and because the server process is restarted whenever the imports change (so we don't have to worry about cache invalidation).</p>\n</blockquote>\n<p>There's still cache invalidation issues if you change something in the current file, right?</p>",
        "id": 243619913,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624436275
    },
    {
        "content": "<p>No, declarations from the current module are uncached <a href=\"https://github.com/IPDSnelting/tba-2021/blob/c62f8241cd2dadb9851c556e5f05e9d59eef7a8a/TBA/Util/Find.lean#L52\">https://github.com/IPDSnelting/tba-2021/blob/c62f8241cd2dadb9851c556e5f05e9d59eef7a8a/TBA/Util/Find.lean#L52</a></p>",
        "id": 243620083,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624436363
    },
    {
        "content": "<p>Nice!</p>",
        "id": 243620142,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624436401
    },
    {
        "content": "<p>For consistency, we might still want to do a head match on them so that the behavior is them same as for imported decls, that would be a simple change</p>",
        "id": 243620199,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624436422
    },
    {
        "content": "<p>Is there a reason you used forallMetaTelescopeReducing instead of forallTelescopeReducing here?<br>\n<a href=\"https://github.com/IPDSnelting/tba-2021/blob/c62f8241cd2dadb9851c556e5f05e9d59eef7a8a/TBA/Util/Find.lean#L41\">https://github.com/IPDSnelting/tba-2021/blob/c62f8241cd2dadb9851c556e5f05e9d59eef7a8a/TBA/Util/Find.lean#L41</a></p>\n<p>The forallMetaTelescopeReducing leaks the metavariables afaict (which is of course not a big issue when used on a small library).</p>",
        "id": 243620836,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624436861
    },
    {
        "content": "<p>No, no reason :)</p>",
        "id": 243621305,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624437153
    },
    {
        "content": "<p>Apart from this part being written 2min before the lab session started afair</p>",
        "id": 243622524,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1624437931
    },
    {
        "content": "<p>I PR'd this to mathlib4; I hope that's okay, <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>. It's <a href=\"https://github.com/leanprover-community/mathlib4/pull/51\">https://github.com/leanprover-community/mathlib4/pull/51</a>. I left TODO notes mentioning the two issues raised here, but didn't actually address them. (Baby steps...)</p>",
        "id": 255345641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632894601
    },
    {
        "content": "<p>Sure, go ahead</p>",
        "id": 255354461,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632900456
    }
]