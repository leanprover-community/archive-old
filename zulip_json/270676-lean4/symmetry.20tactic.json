[
    {
        "content": "<p>Is there another <code>symmetry</code> tactic besides this one <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Meta/Tactic.lean\">symmetry</a>? I'm trying to use it for <a href=\"https://github.com/leanprover/lean4-samples/blob/main/NaturalNumbers/AdvancedAdditionWorld/Level9.leann\">NNG Advanced Addition World Level 9</a>, but it is failing and the <code>trace.Meta.synthInstance</code> trace is not super useful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symmetry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_ne_succ</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"bp\">@</span><span class=\"n\">Symmetric.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ne.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">Symmetric.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ne.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"bp\">@</span><span class=\"n\">Symmetric.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ne.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>Any ideas on how to debug this?</p>",
        "id": 303917749,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665692773
    },
    {
        "content": "<p>Does it work if you add the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span>  <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">c.symm</span>\n</code></pre></div>",
        "id": 303918823,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665693170
    },
    {
        "content": "<p>If so, then it seems like a missing instance.</p>",
        "id": 303918871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665693194
    },
    {
        "content": "<p>I can't get the symmetry tactic to work at all on my machine for some reason...</p>",
        "id": 303918896,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665693207
    },
    {
        "content": "<p>wait, I'm just not using this ground_zero repo at all... that's my problem.</p>",
        "id": 303919332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665693369
    },
    {
        "content": "<p>the symmetry tactic is in mathlib4, it's called <code>symm</code> now</p>",
        "id": 303922621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665694774
    },
    {
        "content": "<p>that's why I couldn't find it, thanks. But I don't see it listed in <a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Tactic\">https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Tactic</a>. <br>\n I do see this in Mathlib/Mathport/Syntax.lean? <code> /- E -/ syntax (name := symm) \"symm\" : tactic</code>. I also checked <a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a> ?</p>",
        "id": 303924140,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665695401
    },
    {
        "content": "<p>Perhaps I need to <code>import Mathlib.Mathport.Syntax</code> to connect all the .symm functions on to a tactic, but this gives me an error <code>import failed, environment already contains 'Lean.Expr.withAppAux._at.Lean.Expr.getAppFnArgs._spec_1._cstage2'</code> ?  Oh, but I just realized I can do this instead for now as a workaround: <code>apply Ne.symm  </code></p>",
        "id": 303925030,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665695818
    },
    {
        "content": "<p>I will claim that tactic...looks like it is on the list of tactics that still need to be ported to <code>mathlib4</code></p>",
        "id": 303925077,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665695845
    },
    {
        "content": "<p>nm, those are already in there...weird that the syntax line is still there</p>",
        "id": 303925287,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665695929
    },
    {
        "content": "<blockquote>\n<p>those are already in there<br>\nwhat are you looking at?</p>\n</blockquote>",
        "id": 303925352,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665695958
    },
    {
        "content": "<p>Sorry, I jumped in on this conversation and am basically mumbling to myself.  Here is what I was referring to. <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/issues/430\">https://github.com/leanprover-community/mathlib4/issues/430</a></p>\n<p><code>symm</code> and <code>trans</code> have been PR'd but haven't been committed yet.</p>",
        "id": 303925655,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665696062
    },
    {
        "content": "<p>Ah, thanks.</p>",
        "id": 303926016,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665696181
    },
    {
        "content": "<p>I got it working with that mathlib symm tactic, thanks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[symm]</span> <span class=\"kd\">def</span> <span class=\"n\">neqSymm</span><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Ne.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">zero_ne_succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 303928885,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665697367
    },
    {
        "content": "<p>Rats the <code>symm</code> tactic can't seem to rewrite hypotheses.  Is there are way to work around that somehow?  <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level4.lean\">NNG advanced multiplication world level 4</a> uses <code>symmetry at hb</code>?</p>",
        "id": 303939186,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665703098
    },
    {
        "content": "<p>the workaround is <code>have hb : _ = _ := by symmetry; exact hb</code> but it would be better to not bother and just fix the tactic</p>",
        "id": 303939453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665703300
    },
    {
        "content": "<p>or just <code>have hb := hb.symm</code></p>",
        "id": 303939520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665703340
    },
    {
        "content": "<p><code>symmetry</code> in Lean 3 can't rewrite hypotheses either. I hacked NNG <code>symmetry</code> so it worked on hypotheses but the lean tactic was in core so at the time I couldn't touch it. There's a mathlib3 tactic <code>symmetry'</code> which works on hypotheses.</p>",
        "id": 303946573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665708781
    },
    {
        "content": "<p>The <code>symmetry'</code> tactic was skipped because it was in the category \"tactics that are the same as lean tactics + apply bug fix\"</p>",
        "id": 303946707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665708905
    }
]