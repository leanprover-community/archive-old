[
    {
        "content": "<p>I am trying to figure out the best way to represent a system. I am currently representing it with Nat x Nat, but (0, 0) is invalid. I am getting around that by just assuming in all of my theorems that the state is not (0,0). Is there any better way I could represent the system to avoid this? In the future I will generalize this to more dimensions, and I will likely end up having more invalid states, but it will always be a small finite number. Is there a good way to represent this more general case??</p>",
        "id": 320730038,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1673450864
    },
    {
        "content": "<p>You could represent your system with a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype#doc\">docs4#Subtype</a>, but that's essentially the same as your current approach of passing around a proof that the state is not zero. All that changes is you now you pass it around in one argument instead of two.</p>",
        "id": 320732610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673451533
    },
    {
        "content": "<p>Sometimes it's convenient to make your own subtype, as in <code>Fin</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyState</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 320805817,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673474492
    },
    {
        "content": "<p>You might also get some inspiration from the std definition of RBMap, where they have a base type and then a subtype using an inductive prop to describe the well-formed states.</p>",
        "id": 320806090,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673474607
    }
]