[
    {
        "content": "<p>For proofs about nat, I can use <code>induction n using Nat.strong_induction_on</code> to strengthen my induction hypothesis to be about all smaller numbers.</p>\n<p>For a proof about lists, I would like to do a similar thing.  I could imagine strengthening it to all suffixes, all prefixes, all substrings, etc, or ultimately all <code>List</code>s with smaller <code>sizeOf</code>. I couldn't figure out how to do this.</p>",
        "id": 320139271,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673229994
    },
    {
        "content": "<p>use <code>termination_by _ l =&gt; l.length</code>, it subsumes most of those</p>",
        "id": 320139320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673230047
    },
    {
        "content": "<p>It would be nice to have a <code>List.induction_by_length_on</code> for use in tactic-mode.</p>",
        "id": 320140568,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673231046
    },
    {
        "content": "<p>I don't think it would be too hard to define using well-founded recursion like Mario suggested</p>",
        "id": 320140616,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673231104
    },
    {
        "content": "<p>Hmm ok I will try to implement it by copying <code>Nat.strong_induction_on</code></p>",
        "id": 320141665,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673232197
    },
    {
        "content": "<p>Ok I think I did it! I wasn't able to prove it outside of tactics mode, but here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">@[elab_as_elim]</span>\n <span class=\"kd\">lemma</span> <span class=\"n\">List.induction_by_length_on</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">l₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">heq</span><span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">len</span>\n  <span class=\"n\">induction</span> <span class=\"n\">len</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strong_induction_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">subst</span> <span class=\"n\">heq</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l₂</span> <span class=\"n\">hlt</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">hlt</span> <span class=\"n\">l₂</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I'm not sure if elab_as_elim is important.</p>",
        "id": 320150282,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673241031
    },
    {
        "content": "<p>elab_as_elim i .. think ? changes the way <code>p</code> is inferred in the definition. I believe it is right to put it there, but someone should correct me</p>",
        "id": 320150382,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673241134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">List.induction_by_length_on</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">l₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IH</span> <span class=\"n\">l</span> <span class=\"k\">fun</span> <span class=\"n\">l₂</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.induction_by_length_on</span> <span class=\"n\">l₂</span> <span class=\"n\">IH</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>\n<p>is how you do it using <code>termination_by</code></p>",
        "id": 320150430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673241219
    }
]