[
    {
        "content": "<p>I am looking at the very first usage of <code>universe</code> in the Lean book:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n<span class=\"k\">#check</span> <span class=\"n\">F</span>    <span class=\"c1\">-- Type u → Type u</span>\n</code></pre></div>\n<p>Perhaps I am taking this too literally, but I notice that when I put these lines into VSCode and check the type of <code>F</code>, the Lean Infoview gives <code>Type u_1 → Type u_1</code> instead of <code>Type u → Type u</code>, and that seems at odds with the comment following <code>#check F</code> above. Shouldn't I see <code>Type u → Type u</code>, exactly like that?</p>\n<p>What am I missing?</p>",
        "id": 313743007,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1670109010
    },
    {
        "content": "<p>Since <code>u,u_1</code> are both universe variables, the two types <code>Type u → Type u</code> and <code>Type u_1 → Type u_1</code> are the same up to renaming (up to \"α-equivalence\"), similarly to how <code>fun x =&gt; x + 1</code> and <code>fun y =&gt; y + 1</code> are the same function. (Universe variables are implicitly quantified rather than \"fixed\".)</p>",
        "id": 313743425,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670109373
    },
    {
        "content": "<p>That makes sense. So any universe variable declared like this is meant to range over all possible type levels?</p>",
        "id": 313746296,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1670112055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416965\">Martin Harrison</span> has marked this topic as resolved.</p>",
        "id": 313746681,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670112353
    },
    {
        "content": "<p>It's also worth knowing that each definition is universally quantified over its universe variables. They use a different syntax from normal arguments, and what the <code>universes</code> command is doing is saving you from having to write this explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 313926211,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670234478
    },
    {
        "content": "<p>When you're checking the type of <code>F</code>, what's happening is that Lean is instantiating <code>F</code> with fresh universe variables, which is why you're seeing <code>u_1</code>. If you want to choose specific universe variables, you can use the same syntax as in the <code>def</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">F.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"c1\">-- F : Type u → Type u</span>\n</code></pre></div>",
        "id": 313926636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670234604
    },
    {
        "content": "<p>You can also convince Lean to show explicit universes with a pretty printer option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">F</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def F.{u} : Type u → Type u :=</span>\n<span class=\"cm\">fun α =&gt; Prod.{u, u} α α</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 313926722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670234639
    }
]