[
    {
        "content": "<p>I had hoped (perhaps unreasonably) that the following should unfold and be proved by reflexivity (actually a little more complicated case, but this is after minimization. Could someone help me with the best approach (lean 4 stable build)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">shiftAtNat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">match</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n            <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n                  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n                      <span class=\"o\">(</span><span class=\"n\">shiftAtNat</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seqShiftNatLemma</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n     <span class=\"o\">(</span><span class=\"n\">shiftAtNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">shiftAtNat</span> <span class=\"n\">m</span> <span class=\"n\">l</span>  <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks.</p>",
        "id": 242021483,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1623218904
    },
    {
        "content": "<p>I believe this to be a bug, <a href=\"https://github.com/leanprover/lean4/issues/445\">leanprover/lean4#445</a></p>",
        "id": 242022110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623219649
    },
    {
        "content": "<p>The proof is <code>rfl</code> but you have to circumvent the elaborator to get the proof to be accepted</p>",
        "id": 242022144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623219684
    },
    {
        "content": "<p>Thanks. How do I circumvent the elaborator?</p>",
        "id": 242022451,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1623219995
    },
    {
        "content": "<p>Actually, I tested this and the generated smart unfolding lemma is fine; the only issue is you didn't intro the arguments</p>",
        "id": 242022457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">seqShiftNatLemma</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">shiftAtNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">shiftAtNat</span> <span class=\"n\">m</span> <span class=\"n\">l</span>  <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 242022467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220017
    },
    {
        "content": "<p>Thanks a lot. I now see that <code>fun m =&gt; fun l =&gt; fun i =&gt; rfl</code> also works.</p>",
        "id": 242022590,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1623220159
    },
    {
        "content": "<p>you can also write <code>fun m l i =&gt; rfl</code> fyi</p>",
        "id": 242022611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220188
    },
    {
        "content": "<p>same thing with the <code>(m l i : Nat) → ...</code> binder</p>",
        "id": 242022668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623220223
    },
    {
        "content": "<p>Yes, thanks. I am learning lean and so tend to be very verbose.</p>",
        "id": 242023214,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1623220885
    }
]