[
    {
        "content": "<p>I'm getting an odd timeout on typeclass resolution, it is a mix of addition on product type and usage of <code>outParam</code>. I don't really understand what is going on here, especially I do not understand what exactly <code>outParam</code> is doing but it is necessary here to allow the nice and simple notation <code>⟪x,y⟫</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SemiInner.semiInner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- This is here to demonstrate the need of `outParam` in the `R` parameter</span>\n<span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"bp\">⟫</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">+</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">+</span> <span class=\"n\">q.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- This does not ... why?</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>How can I change the setup such that the last class inference works but I can still use the notation <code>⟪x,y⟫</code> without specifying the type <code>R</code>?</p>",
        "id": 265452460,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639874623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> ypur code gives me an \"unknown metavariable '?_uniq.1543'\" error, which feels like a Lean bug to me.</p>",
        "id": 265453368,
        "sender_full_name": "Mac",
        "timestamp": 1639876124
    },
    {
        "content": "<p>Which version of are you running? Mine is nightly-12-15.</p>",
        "id": 265453599,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639876544
    },
    {
        "content": "<p>For me it gets stuck at an infinite loop, synthesizing instances of <code>Add (USize × ... × USize)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.1642</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">Add</span> <span class=\"n\">USize</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">Add</span> <span class=\"n\">USize</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">instAddProd</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">instAddProd</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newAnswer</span><span class=\"o\">]</span> <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">instAddProd</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.resume</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">Add</span>\n      <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 265453741,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639876859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I'm on <code>Lean (version 4.0.0-nightly-2021-12-17, commit e65f3fe81032, Release)</code>.</p>",
        "id": 265453952,
        "sender_full_name": "Mac",
        "timestamp": 1639877246
    },
    {
        "content": "<p>Hmm, now I'm getting the unknown metavariable too. Not sure what changed but the trace still shows the infinite loop of synthesizing longer and longer versions of <code>Add (USize × ... × USize)</code></p>",
        "id": 265453956,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639877255
    },
    {
        "content": "<p>I have tried nigtly 11-12, 12-15, 12-19 and all give the same error.</p>",
        "id": 265454018,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639877376
    },
    {
        "content": "<p>You get the timeout error when you turn of the tracing.</p>",
        "id": 265454135,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639877529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> after looking at the trace,  I figured out the problem is that the <code>Add R</code> instance comes first, when it should come last in the the parameter list. That is, the following modified mwe works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SemiInner.semiInner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span>\n\n<span class=\"c1\">-- The `Add R` being at the end here is important</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">+</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">+</span> <span class=\"n\">q.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"c1\">-- This works too now</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>The problem is that add instance synthesis is defaulting <code>R</code> to something other than the natural <code>outParam</code> result which is then causing problems in synthesis.</p>",
        "id": 265460626,
        "sender_full_name": "Mac",
        "timestamp": 1639888096
    },
    {
        "content": "<p>Instance synthesis works in parameter order (e.g., from left to right). If the <code>outParam</code> class comes first, it fixes <code>R</code> for the coming <code>Add</code> synthesis (as desired). If <code>Add R</code> comes first instead, it may try to choose an <code>R</code> itself for future synthesis (which you do not want).</p>",
        "id": 265460788,
        "sender_full_name": "Mac",
        "timestamp": 1639888417
    },
    {
        "content": "<p>Thanks a lot! I have encountered this problem before, where I had to reorder the typeclass parameters, but didn't realize that is the problem here again.<br>\nWould be nice to detect a dangerous order automatically and give a warning.</p>",
        "id": 265467820,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639901070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as unresolved.</p>",
        "id": 265476903,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639915411
    },
    {
        "content": "<p>I'm having more issues, I also want to define product on <code>SemiHilbert</code> there you cannot move <code>Add R</code> after <code>SemiHilbert</code> arguments. I'm getting timeout error again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SemiInner.semiInner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- The `Add R` being at the end here is important</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">+</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">+</span> <span class=\"n\">q.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- Here I'm getting timeout again</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>It does not happen when <code>R</code> is not marked as <code>outParam</code> in the definition of <code>SemiHilbert</code>, but I want it there as I often want <code>R</code> to be automatically inferred.</p>",
        "id": 265477038,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639915588
    },
    {
        "content": "<p>The reason why I need the <code>outParam</code> under the <code>R</code> parameter in <code>SemiHilbert</code> is that I then want to define class Prop <code>HasAdjoint</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasAdjoint</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">hasAdjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasAdjoint</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>and without the <code>outParam</code> the  <code>[HasAdjoint f]</code> can't figure out what <code>R</code> is.</p>",
        "id": 265478328,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639917664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> here is a working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SemiInner.semiInner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- The `Add R` being at the end here is important</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"bp\">⟫</span>\n\n<span class=\"c1\">-- We set this to priority low so every other `Add` instance is tried first</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">+</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">+</span> <span class=\"n\">q.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span>\n\n<span class=\"c1\">-- Same here</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- This comes after `SemiHilbert` because we want to try the `AddSemogroup.toAdd` instance before the `SemiHilbert.toAdd` one</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This now works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasAdjoint</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">hasAdjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasAdjoint</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 265491079,
        "sender_full_name": "Mac",
        "timestamp": 1639935702
    },
    {
        "content": "<p>However, the man problem here that I find suspicious is that Lean's typeclass synthesis doesn't try to synthesize <code>SemiHilbert (X × Y) R</code>(i.e., the desired instance) first, but instead immediately tries <code>SemiHilbert (X × Y) ?m.1657</code>(i.e., with an metavariable output -- a produce of the <code>outParam</code>) which is a major cause of all this trouble.</p>\n<p>I feel like it should try to synthesize <code>SemiHilbert (X × Y) R</code> first and only when that fails try <code>SemiHilbert (X × Y) ?m.1657</code>, but that may just be an uniformed opinion.</p>",
        "id": 265491514,
        "sender_full_name": "Mac",
        "timestamp": 1639936319
    },
    {
        "content": "<p><code>[outParam $ Add R]</code> seems to express two contradictory intents: one that the argument should be synthesized by TC instance search, the other that it should be determined by the <code>SemiHilbert</code> instance.</p>",
        "id": 265493622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639939254
    },
    {
        "content": "<p>I wonder whether this interaction of features has been properly thought through (certainly it hasn't been by me).</p>",
        "id": 265493657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639939307
    },
    {
        "content": "<p>I would be inclined to try <code>{}</code> binders for the <code>Add R</code> in the <code>SemiHilbert</code> class and instances.</p>",
        "id": 265493709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639939347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> but <code>[outParam $ Add R]</code> wasn't the problem here?</p>",
        "id": 265495239,
        "sender_full_name": "Mac",
        "timestamp": 1639941305
    },
    {
        "content": "<p>I think it is the core issue though--you don't want to try synthesizing <code>Add R</code> ever</p>",
        "id": 265495270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639941350
    },
    {
        "content": "<p>Instead, you want to learn it from the <code>SemiHilbert</code> instance</p>",
        "id": 265495343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639941407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  true, an alternative way to structure this would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_X</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n  <span class=\"n\">add_R</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">add_X</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"n\">add_R</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SemiHilbert.add_X</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SemiHilbert.add_R</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_X</span> <span class=\"o\">:=</span> <span class=\"n\">Add.add</span>\n  <span class=\"n\">add_R</span> <span class=\"o\">:=</span> <span class=\"n\">Add.add</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 265496116,
        "sender_full_name": "Mac",
        "timestamp": 1639942387
    },
    {
        "content": "<p>This looks awkward though because in the actual instances, you probably want to use existing <code>Add</code> instances for <code>real</code> etc.</p>",
        "id": 265496700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639943136
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>looks very dubious as there is no way to determine <code>X</code></p>",
        "id": 265496746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639943168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> very true, there is not really a silver bullet here, because Lean does not, afaik, provide a neat way to force <code>Add R</code> use the instance and <code>R</code> that come from <code>SemiHilbert</code>. <code>[outParam $ Add R]</code> is closest approximation, but it has the problems you mentioned.</p>",
        "id": 265499031,
        "sender_full_name": "Mac",
        "timestamp": 1639946504
    },
    {
        "content": "<p>Here is my solution using utility classes <code>Trait X</code> and <code>Trait₂ X Y</code> that fetch <code>R</code> based on <code>X</code> or <code>X Y</code> and there is an instance of <code>Trait</code> whenever there is an instance of <code>SemiInner</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SemiInner.semiInner</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Trait</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"kd\">class</span> <span class=\"n\">Trait₂</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">Trait.R</span> <span class=\"n\">Trait₂.R</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trait</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Trait</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trait₂</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Trait.R</span> <span class=\"n\">X</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Trait</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trait₂</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Trait.R</span> <span class=\"n\">Y</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- The `Add R` being at the end here is important</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">+</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">+</span> <span class=\"n\">q.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟫</span>\n\n<span class=\"c1\">-- The important bit here is that `R` is fetched with the utility class Trait and not spelled out explicitely</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Trait₂</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Trait₂.R</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Trait₂.R</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">Trait₂.R</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)]</span>\n  <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Trait₂.R</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasAdjoint</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">hasAdjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">shy</span> <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasAdjoint</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Trait₂.R</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"bp\">⟫</span> <span class=\"bp\">+</span> <span class=\"n\">r</span>  <span class=\"c1\">-- This works because `Trait₂.R` is reducible</span>\n</code></pre></div>",
        "id": 265502136,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639950923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Typeclass.20timeout.20and.20outParam/near/265491079\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> here is a working example:</p>\n</blockquote>\n<p>Nice! I was fiddling with priorities quite a bit and was unable to get it working.</p>",
        "id": 265502218,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639951058
    },
    {
        "content": "<p>Arghhh, the approach with <code>Trait</code> is also problematic. The <code>SemiHilbert</code> instance on product type causes a timeout error on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>As it does not fail properly it completely messes up other type class inferences.</p>",
        "id": 265507610,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639958211
    },
    {
        "content": "<p>Adding <code>[Trait₂ X Y]</code> at the beginning of the instance of <code>SemiHilbert (X × Y) R</code> seems to solve the above problem. The value <code>[Trait₂ X Y]</code> is not used at all, but is there just to safe guard a misuse of  instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Trait₂</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemiHilbert</span> <span class=\"n\">Y</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">SemiHilbert</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">add_inner</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265509202,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639959980
    }
]