[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 258300663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634694815
    },
    {
        "content": "<p>There isn't one, but we could add it! It does seem useful for some use cases.</p>",
        "id": 258308630,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1634702158
    },
    {
        "content": "<p>I would vote for this, it really would  help on files that take a decent chunk of time (i.e. ~1s or more) to elaborate.</p>",
        "id": 258309096,
        "sender_full_name": "Mac",
        "timestamp": 1634702554
    },
    {
        "content": "<p>(which tends to be the case for any metaprogramming heavy file)</p>",
        "id": 258309121,
        "sender_full_name": "Mac",
        "timestamp": 1634702588
    },
    {
        "content": "<p>Should this thread be taken as a <em>feature request</em> then, or should I report it as an issue or in some other way?</p>",
        "id": 258313859,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634707119
    },
    {
        "content": "<p>We've had such a feature in Lean 3 and it has seen little use (maybe because it was not advertised well enough or other nonfunctional reasons).  Note that if you disable compilation, you also lose autocompletion, hover, etc.</p>",
        "id": 258325103,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634715504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the idea is not to disable it permanently but to only rerun the elaborator on each save rather than each edit. While sure, there are cases where this would break some interactive features if there has been a long time between the last save and current state of the program, I would think that in most cases many such features would still be able to function serviceably without needing to re-elab the whole file.</p>",
        "id": 258327378,
        "sender_full_name": "Mac",
        "timestamp": 1634716820
    },
    {
        "content": "<p>Yes, I understand you.  The features would of course continue to work above your edits, but would probably be broken below.</p>",
        "id": 258327593,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634716926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258327593\">said</a>:</p>\n<blockquote>\n<p>but would probably be broken below.</p>\n</blockquote>\n<p>this may be due to my lack of expertise on how the server works, but this confuses me somewhat.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ...</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ...</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ...</span>\n</code></pre></div>\n<p>Why would editing the definition of <code>bar</code> break the autocompletion/hover in <code>baz</code>? Or is this example simple enough that it would work?</p>",
        "id": 258327937,
        "sender_full_name": "Mac",
        "timestamp": 1634717110
    },
    {
        "content": "<p>Two reasons: 1) positions change after the edit, 2) if you edit bar, then information about everything below is discarded.</p>",
        "id": 258328154,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634717229
    },
    {
        "content": "<p>This is nothing that couldn't be overcome, but it's not trivial.</p>",
        "id": 258328207,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634717258
    },
    {
        "content": "<p>I would say short term this feature is worth that breakage for me (as I have personally experience a decent amount of lag do to per-change elaboration when working on metaprogramming heavy files). However, making the server less position dependent long term is a good idea nd may have other uses as well.</p>",
        "id": 258328905,
        "sender_full_name": "Mac",
        "timestamp": 1634717621
    },
    {
        "content": "<p>One great example of this is interpreter level test files, which can easily have a lot of time consuming meta tasks that make frequent elabs cause heavy editing lag.</p>",
        "id": 258329115,
        "sender_full_name": "Mac",
        "timestamp": 1634717743
    },
    {
        "content": "<p>One widget in this same vein I would love to see in Lean 4 is the ability to add a play button for certain commands and only elaborate them when the button is pressed (or when some 'elab  all' editor command is run).</p>",
        "id": 258329302,
        "sender_full_name": "Mac",
        "timestamp": 1634717841
    },
    {
        "content": "<p>(In fact such a feature would be so useful that I would be willing to implement myself. I just don't currently have the Lean know how to figure out how one would go about doing so.)</p>",
        "id": 258329423,
        "sender_full_name": "Mac",
        "timestamp": 1634717905
    },
    {
        "content": "<p>The play button is a good idea (intellij has something similar for scala and its really useful).  We could also put it on <code>def main</code>.</p>",
        "id": 258329853,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634718135
    },
    {
        "content": "<blockquote>\n<p>editing lag</p>\n</blockquote>\n<p>This is strange.  Can you explain what you mean by that?</p>",
        "id": 258329911,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634718175
    },
    {
        "content": "<p>Now if only <code>#eval</code> were guaranteed to be side-effect free... :)</p>",
        "id": 258330088,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634718270
    },
    {
        "content": "<p>Do we actually make use of that feature?</p>",
        "id": 258330229,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634718357
    },
    {
        "content": "<p>I saw someone doing metaprogramming with it I believe... but I don't remember where</p>",
        "id": 258330665,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634718578
    },
    {
        "content": "<p>I've used it some ;)</p>",
        "id": 258330863,
        "sender_full_name": "Mac",
        "timestamp": 1634718673
    },
    {
        "content": "<p>but I that could easily be solved by just having two separate commands</p>",
        "id": 258330903,
        "sender_full_name": "Mac",
        "timestamp": 1634718696
    },
    {
        "content": "<p>one <code>#eval</code> for play button and one (e.g., <code>#meta</code>) for meta stuff.</p>",
        "id": 258331016,
        "sender_full_name": "Mac",
        "timestamp": 1634718751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258329911\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>editing lag</p>\n</blockquote>\n<p>This is strange.  Can you explain what you mean by that?</p>\n</blockquote>\n<p>Typing becomes laggy if the file is still doing heavy processing?</p>",
        "id": 258331106,
        "sender_full_name": "Mac",
        "timestamp": 1634718815
    },
    {
        "content": "<p>Hmm, <code>#eval</code> should still be run by default though.</p>",
        "id": 258331110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634718817
    },
    {
        "content": "<blockquote>\n<p>Typing becomes laggy if the file is still do heavy processing?</p>\n</blockquote>\n<p>That's what I mean: I've never experienced that.  Are you using vscode?</p>",
        "id": 258331219,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634718873
    },
    {
        "content": "<p>yes</p>",
        "id": 258331230,
        "sender_full_name": "Mac",
        "timestamp": 1634718879
    },
    {
        "content": "<p>/me scratches head</p>",
        "id": 258331242,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634718888
    },
    {
        "content": "<p>me neither</p>",
        "id": 258331263,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634718897
    },
    {
        "content": "<p>admittedly, it has been a while since I had this problem as I haven't been fiddling with that kind of code recently -- but that is what I remember happing</p>",
        "id": 258331438,
        "sender_full_name": "Mac",
        "timestamp": 1634718984
    },
    {
        "content": "<p>OTOH I can regularly get Emacs to freak out from the torrent of diagnostics that can be sent while building imports. But that's a different issue.</p>",
        "id": 258331482,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634719015
    },
    {
        "content": "<p>I had assumed it was to be expected -- I will make sure to note it here next time it (or something similar) happens to me</p>",
        "id": 258331550,
        "sender_full_name": "Mac",
        "timestamp": 1634719054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258331110\">said</a>:</p>\n<blockquote>\n<p>Hmm, <code>#eval</code> should still be run by default though.</p>\n</blockquote>\n<p>Why? Do you mean for backwards compatibility? A possible happy medium would be to run it on the first elab of the file and then only rerun it when the play button is pressed (or on a 'elab all' command)</p>",
        "id": 258331811,
        "sender_full_name": "Mac",
        "timestamp": 1634719174
    },
    {
        "content": "<p>Or make the play button idea a separate command itself</p>",
        "id": 258331885,
        "sender_full_name": "Mac",
        "timestamp": 1634719205
    },
    {
        "content": "<p>Because 100% of all evals are quick and used as a kind of auto-updating REPL.</p>",
        "id": 258331944,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634719242
    },
    {
        "content": "<p>I think it would be better to make the play button a separate command.</p>",
        "id": 258331964,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634719253
    },
    {
        "content": "<p>works for me</p>",
        "id": 258332021,
        "sender_full_name": "Mac",
        "timestamp": 1634719292
    },
    {
        "content": "<p>Though I must say, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , 100% <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> ? I know at least the <code>#eval</code>s I use to test <a href=\"https://github.com/tydeu/lean4-papyrus\">Papyrus</a> are most certainly not that quick. That is, you could visibly see them process and repeated short elabs were noticeable (and that was just for relatively trivial examples).</p>",
        "id": 258332423,
        "sender_full_name": "Mac",
        "timestamp": 1634719483
    },
    {
        "content": "<p>What I sometimes miss from Lean 3 is parallel execution.  If you had a file full of <code>example</code>s then they executed in parallel, which was a really nice performance boost for test cases.  (EDIT: apparently #eval was synchronous for some resaon)</p>",
        "id": 258332744,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634719642
    },
    {
        "content": "<p>Yeah, simultaneous elaboration was quite nice. I wonder if such a thing may still be possible in the future with tighter editor-server integration (where the editor can tell the server to elaborate certain commands in batch).</p>",
        "id": 258333088,
        "sender_full_name": "Mac",
        "timestamp": 1634719803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <code>#eval</code> in lean 3 is side effecting</p>",
        "id": 258333254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634719883
    },
    {
        "content": "<p>although admittedly that's a bit silly since we also have <code>run_cmd</code></p>",
        "id": 258333296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634719909
    },
    {
        "content": "<p>For comparison, in scala <em>intellij</em> (at least by default) recompiles all the time, while <em>metals</em> recompiles on save but continues to give most info anyway. I prefer the metals style as I believe many do (of course the scala compiler is notoriously slow) since intellij causes hanging. If the tool starts misbehaving then one simply saves to trigger compilation.</p>\n<p>The reason I started this thread was laggy behaviour while commenting some of my (meta heavy) files. But at times I have also wanted to copy-paste to duplicate and edit, and would like to tell lean to wait till I am done before compiling.</p>",
        "id": 258333416,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634719963
    },
    {
        "content": "<p>Ah, so, <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> , you have also observed editor lag in metaprogamming heavy files.</p>",
        "id": 258333902,
        "sender_full_name": "Mac",
        "timestamp": 1634720202
    },
    {
        "content": "<p>So I guess it is now 2-2 (observed/not observed) on that front. XD</p>",
        "id": 258333963,
        "sender_full_name": "Mac",
        "timestamp": 1634720234
    },
    {
        "content": "<p>I'm curious, <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> what OS are you using?</p>",
        "id": 258334000,
        "sender_full_name": "Mac",
        "timestamp": 1634720254
    },
    {
        "content": "<p>If you can no longer edit the file because Lean is busy, then that's a bug and please report it (if you can reproduce it).  The only reason you should want a \"disable compilation\" option is because you're on battery power and want to increase the time you can hack on Lean.</p>",
        "id": 258334161,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720317
    },
    {
        "content": "<p>I may have said it before, but given that we are currently very bad at interrupting elaboration tasks, I'm surprised we didn't get such complaints sooner</p>",
        "id": 258334367,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634720413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> from my experience, it is not that you can't edit -- it is that editing becomes slow/laggy</p>",
        "id": 258334438,
        "sender_full_name": "Mac",
        "timestamp": 1634720439
    },
    {
        "content": "<p>I am curious if this my be an issue specific to an OS</p>",
        "id": 258334475,
        "sender_full_name": "Mac",
        "timestamp": 1634720461
    },
    {
        "content": "<p>Can you explain what exactly becomes laggy?</p>",
        "id": 258334486,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720467
    },
    {
        "content": "<p>typing characters?</p>",
        "id": 258334503,
        "sender_full_name": "Mac",
        "timestamp": 1634720478
    },
    {
        "content": "<p>Let me get this straight: when Lean is busy, the time from \"Mac hits a key on his keyboard\" to \"vscode displays the character on the screen\" increases?</p>",
        "id": 258334599,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720517
    },
    {
        "content": "<p>yes</p>",
        "id": 258334671,
        "sender_full_name": "Mac",
        "timestamp": 1634720536
    },
    {
        "content": "<blockquote>\n<p>I am curious if this my be an issue specific to an OS</p>\n</blockquote>\n<p>Which OS are you on?</p>",
        "id": 258334706,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720557
    },
    {
        "content": "<p>or more accurately, time from \"hit key\" to \"accepts key\"</p>",
        "id": 258334732,
        "sender_full_name": "Mac",
        "timestamp": 1634720574
    },
    {
        "content": "<p>What is \"accepts key\"?</p>",
        "id": 258334747,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720582
    },
    {
        "content": "<p>Windows</p>",
        "id": 258334752,
        "sender_full_name": "Mac",
        "timestamp": 1634720584
    },
    {
        "content": "<p>I have experienced lag on vscode before, although it is usually when vscode itself is busy. It's especially bad because some events get reordered, for example clicks to move the cursor will jump the queue over keyboard events to insert characters, resulting in characters being inserted in the wrong place</p>",
        "id": 258334929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634720653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258334747\">said</a>:</p>\n<blockquote>\n<p>What is \"accepts key\"?</p>\n</blockquote>\n<p>This I am less sure of, <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span>  could probably give more up-to-date information. But I seem to remember it being like the keys I pressed where queued but rather that I had to wait a while before I could press another key and it accept it. But that may merely be an artifact of memory (as I tend to stop typing if I don't see the text I wrote pop up).</p>",
        "id": 258334993,
        "sender_full_name": "Mac",
        "timestamp": 1634720688
    },
    {
        "content": "<p>Wow, so you press \"abcdef\", and vscode inserts \"af\"????  That is crazy!</p>",
        "id": 258335066,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720731
    },
    {
        "content": "<p>And it sounds like a vscode bug.</p>",
        "id": 258335090,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634720743
    },
    {
        "content": "<p>I don't think keys get dropped, but in my scenario they might get redirected</p>",
        "id": 258335200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634720792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258335066\">said</a>:</p>\n<blockquote>\n<p>Wow, so you press \"abcdef\", and vscode inserts \"af\"????  That is crazy!</p>\n</blockquote>\n<p>I don't remember that happening! <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span>  So yeah, I may be remembering what exactly went on wrong. Though <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s comment certainly suggests similar errors are possible.</p>",
        "id": 258335242,
        "sender_full_name": "Mac",
        "timestamp": 1634720817
    },
    {
        "content": "<p>My problem was more like the battery one. I have files that took seconds to interpret, and with each keystroke triggering reinterpreting the fan began running and if I remember correctly VS code hung. This is triggered by experimental and probably suboptimal code, so may not be normal experience. </p>\n<p>I was just reminded of the Intellij/Metals distinction in scala I mentioned - with my older laptop intellij causing the system to hang was common due to processing incomplete code.</p>\n<p>I am using Ubuntu and have 16 GB RAM.</p>",
        "id": 258335949,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634721190
    },
    {
        "content": "<p>When maths undergraduates write lousy 200-line proofs with a bunch of non-terminal simps then they often get into this hell -- every time they want to add a new line to their tactic proof they have to wait 10 seconds for the orange bars to disappear. But this isn't a bug anywhere, this is just lousy coding style on their part. I'm not saying this is your problem, but it's an example of how such a situation can occur.</p>",
        "id": 258336244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634721353
    },
    {
        "content": "<p>Fair enough, but in my case I was suggesting a solution - allow a setting to <em>recompile on save</em> instead of <em>recompile on change</em> being the only option. This is not an option for extremely interactive proving, but experience with other languages (especially scala with long compilation times) suggest that while programming <em>compile on save</em> can work better at times.</p>",
        "id": 258336585,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634721540
    },
    {
        "content": "<p>But perhaps these times are too rare to make the change worthwhile.</p>",
        "id": 258336659,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634721591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258336244\">said</a>:</p>\n<blockquote>\n<p>every time they want to add a new line to their tactic proof they have to wait 10 seconds for the orange bars to disappear.</p>\n</blockquote>\n<p>Are they waiting to type or waiting for an updated infoview?</p>",
        "id": 258336868,
        "sender_full_name": "Mac",
        "timestamp": 1634721707
    },
    {
        "content": "<p>Those are very different problems.</p>",
        "id": 258336948,
        "sender_full_name": "Mac",
        "timestamp": 1634721729
    },
    {
        "content": "<p>I see. They're waiting for an updated infoview</p>",
        "id": 258336982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634721752
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> In those cases, I think it would be fair to say that the \"interactive theorem prover\" is you: lean is calling you to find out what to do next</p>",
        "id": 258337005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634721774
    },
    {
        "content": "<p>Then nothing can help with that. As the elaboration <em>is</em> the thing they are waiting on.</p>",
        "id": 258337056,
        "sender_full_name": "Mac",
        "timestamp": 1634721808
    },
    {
        "content": "<p>The discussion here is about cases where are waiting to type (i.e., perform some other interactive feature) and elaboration (which you don't really care about at the moment) is blocking you.</p>",
        "id": 258337179,
        "sender_full_name": "Mac",
        "timestamp": 1634721855
    },
    {
        "content": "<p>That can be improved though, if lean had more fine grained caching. Coq's iron curtain model handles those kind of proofs well</p>",
        "id": 258337239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634721895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> true, but that is an entirely separate issue to the one being discussed here</p>",
        "id": 258337305,
        "sender_full_name": "Mac",
        "timestamp": 1634721935
    },
    {
        "content": "<p>but I agree with Gabriel that any interruption to typing is a vscode bug</p>",
        "id": 258337324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634721945
    },
    {
        "content": "<p>that's the whole reason why LSP servers exist in a separate process</p>",
        "id": 258337392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634721973
    },
    {
        "content": "<p>However, from VSCode issues such as <a href=\"https://github.com/Microsoft/vscode/issues/27378\">https://github.com/Microsoft/vscode/issues/27378</a>, it seems like that is the de facto expected behavior (despite user desires to the contrary).</p>",
        "id": 258337416,
        "sender_full_name": "Mac",
        "timestamp": 1634721991
    },
    {
        "content": "<p>typing is just another process in VSCode that can be blocked by more resource hungry ones (and it seems likely to stay that way).</p>",
        "id": 258337451,
        "sender_full_name": "Mac",
        "timestamp": 1634722014
    },
    {
        "content": "<p>i.e., VSCode does not prioritize typing -- and based on the lack of movement on that issue, it doesn't seem like that is likely to change</p>",
        "id": 258337615,
        "sender_full_name": "Mac",
        "timestamp": 1634722105
    },
    {
        "content": "<p>thus, I suspect such a problem will need to be addressed on the Lean side for now</p>",
        "id": 258337644,
        "sender_full_name": "Mac",
        "timestamp": 1634722126
    },
    {
        "content": "<p>Or on the Lean vscode extension side.  We can put in hacks to work around vscode performance issues there.  A good way to help here is to provide reproducible test cases that exhibit this typing lag.</p>",
        "id": 258337772,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634722194
    },
    {
        "content": "<p>fyi, when I said the \"Lean side\" I was including the vscode extension in that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 258337934,
        "sender_full_name": "Mac",
        "timestamp": 1634722263
    },
    {
        "content": "<p>Honestly that vscode issue is not very good quality. It's just a bunch of people moaning about an extremely aggregate metric</p>",
        "id": 258337938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634722264
    },
    {
        "content": "<p>many many things could be involved in typing lag</p>",
        "id": 258337984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634722285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> true, but the it is the one at the top of the search results for VSCode typing lag issues (which is why I linked it <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> ) and it does seem from the discussion there that extension process can have a significant effect on typing lag.</p>",
        "id": 258338186,
        "sender_full_name": "Mac",
        "timestamp": 1634722391
    },
    {
        "content": "<p>If you have an editor extension then you can definitely affect typing lag (e.g. vim mode)</p>",
        "id": 258338243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634722431
    },
    {
        "content": "<p>also true, but my cursory examination of the typing lag related issues for VSCode suggests to me (as admittedly a non-expert) that VSCode likely does not prioritize typing over many other activities (e.g., potentially the LSP) thus allowing lag to seep in.</p>",
        "id": 258338562,
        "sender_full_name": "Mac",
        "timestamp": 1634722581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.22rerun.20on.20save.22.20option.20for.20interpreter.3F/near/258335949\">said</a>:</p>\n<blockquote>\n<p>with each keystroke triggering reinterpreting</p>\n</blockquote>\n<p>This is not true btw, we wait for 200ms by default before committing a change</p>",
        "id": 258345869,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634726392
    },
    {
        "content": "<p>I see, thanks for the clarification.</p>",
        "id": 258355233,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634731617
    },
    {
        "content": "<p>If each reinterpretation takes a couple of seconds though, then reinterpretation is happening all the time even when I am commenting. That was my point. Whether it is worth avoiding is a different matter based on effort and priorities.</p>",
        "id": 258355452,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634731731
    },
    {
        "content": "<p>In the lean4 vscode extension, I sometimes turn the \"checking\" to nothing if I want to turn the recompilation off.</p>\n<p>Regarding the input issues, when editing very base files in mathlib3, like set.basic, and compilation on the fly is on, the lean server tries to recompile on every keystroke, leading to a stream of errors in the infoview about missing definitions etc, which disappear in 200 ms as the new state is shown, and so on. This particular behavior then causes my vscode to no longer recognize backslash character expansion/transformation.</p>",
        "id": 258358662,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634733367
    },
    {
        "content": "<blockquote>\n<p>when editing very base files in mathlib3</p>\n</blockquote>\n<p>This is an unfortunate but completely unrelated issue in lean 3: if you have set.basic <em>and</em> another file open that depends on set.basic, then the server takes a long time to process changes to set.basic.  So long that it can build up a backlog and you need to wait a few seconds.</p>\n<p>But this has zero effect on the editor, it's just the diagnostics (and goal state etc.) that's being delayed.  The editor stays as responsive as always.  I'm not sure what problem you encountered with the backslash abbreviations, but it is almost certainly unrelated.</p>",
        "id": 258361326,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634734468
    },
    {
        "content": "<p>Good to know. The backslash issue might be because the input is laundered through the vim extension on my machine, which I know that some fraction of this zulip's user base use.</p>",
        "id": 258361605,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634734564
    },
    {
        "content": "<p>I've noticed on my mac laptop that when something <em>very</em> CPU intensive happens, VS Code and sometimes even Google Chrome start dropping keys, breaking the cardinal rule of keyboard input (never drop keyboard input).  \"abcdef\" really can become \"af\" for me...  As far as I remember, this has never happened on my linux desktop (which, granted, has a more powerful CPU and more RAM).</p>\n<p>I'm not sure if the Lean 4 extension has changed in the meantime, but with my 16 cores, it can be rather confusing modifying code that has a slow <code>#eval</code> statement that you're optimizing, since it seems happy to run 16 parallel copies with different intermediate versions, and if one of the older versions takes longer to execute than the most recent one, you can end up seeing the older version's output rather than the most-recent version's output.</p>",
        "id": 258386826,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634743247
    },
    {
        "content": "<p>(I've never experienced keys being dropped, but I routinely run into failure of backslash abbreviations when Lean3 is working hard. Haven't experienced this so far with Lean4, however. :-)</p>",
        "id": 258455027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634769225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I definitely want a repro to debug the vscode extension since I'm also on Windows.  I wonder if you are running Lean Server in WSL or remote SSH, perhaps the LSP protocol being a lot slower over remote connection has some negative effects on the vscode editor.  It should not, everything should be completely async, but if we have an \"await\" in the wrong place somewhere that is holding up the vscode editor then we might be \"exposing\" some of the LSP lag to typing and that would be a bug in our extension.  Not sure that's even possible, but it is worth investigating.  Does anyone have a big nasty lean file I can edit to get the worst possible performance from the lean server ?  I want to look a the server logs and understand how much queuing the vscode editor is doing in these cases.  In general I totally agree with various statements above that the cardinal rule of all editors is never slow down the user's typing, and dropping keystrokes, well that's just evil.    So hopefully that can all be explained by bugs somewhere in our extension and not bug in vscode itself.  For example, I've done a lot of python programming in vscode and have never seen a keystroke go missing, or be in any way delayed.  But I have seen that if I do a giant 24 core C++ build of LLVM in the background and windows is having a hard time keeping up, that will give lag, but I still don't get any lost keystrokes.  I'm thinking lost keystrokes could happen if something else in the OS is \"stealing the keyboard focus\" temporarily, then giving it back (this is something windows does annoyingly often with popups, notifications, etc).  Or perhaps we are accidentally giving the InfoView keyboard focus while editing, and that would be bad and a bug in our extension (IMHO).  So anyway, that's my random thoughts on the topic :-)</p>",
        "id": 258638673,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1634862272
    },
    {
        "content": "<p>Another possibility with lost keystrokes might be if a laggy completion is interfering, for example you quickly type \"Array.app{TAB}\" hoping the TAG will complete to \"Array.append\" but the completion callback was too slow and you end up with \"<a href=\"http://Array.app\">Array.app</a>     \".  But I have not been able to repro anything like this, the vscode implementation of completion dropdown handling seems pretty robust...</p>",
        "id": 258639093,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1634862573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> no, full local Windows use here (no WSL or remote SSH) and no autocompletion either. I may getting around to testing this out to get a repro later, but I don't really have energy/desire to do so now.</p>",
        "id": 258639260,
        "sender_full_name": "Mac",
        "timestamp": 1634862693
    }
]