[
    {
        "content": "<p>In Lean 3, we have a meta function to create a customized <code>simp</code> attribute. Does that exist in Lean 4 already?</p>",
        "id": 266189490,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640625965
    },
    {
        "content": "<p><code>registerSimpAttr</code></p>",
        "id": 266189519,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640625990
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 266189597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640626080
    },
    {
        "content": "<p>Follow-up: I noticed something called preprocess and postprocess with <code>simp</code>. Does that mean that we can create our own pre / postprocessing functions, a bit like <code>reassoc</code> in mathlib / category theory?</p>",
        "id": 266189733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640626190
    },
    {
        "content": "<p><code>rg -i postprocess src</code> doesn't return anything, can you be more specific?</p>",
        "id": 266190031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640626368
    },
    {
        "content": "<p>Big-picture wise nothing has changed.  We still don't have simpprocs.</p>",
        "id": 266190051,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640626384
    },
    {
        "content": "<p>You can still write your own simplifiers, with blackjack and simpprocs.</p>",
        "id": 266190074,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640626410
    },
    {
        "content": "<p>What are blackjack and simpprocs?</p>",
        "id": 266190177,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640626487
    },
    {
        "content": "<p>Blackjack is a form of gambling.  Simpprocs are a feature in the Isabelle simplifier, which allows you to register -- in the same way as simp lemmas -- functions that are executed during simplification.</p>",
        "id": 266190333,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640626576
    },
    {
        "content": "<p>The combination just means \"with whatever features you want\".</p>",
        "id": 266190350,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640626594
    },
    {
        "content": "<p>Standard link: <a href=\"https://github.com/leanprover/lean/wiki/Simplifier-Features\">https://github.com/leanprover/lean/wiki/Simplifier-Features</a></p>",
        "id": 266190390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640626645
    },
    {
        "content": "<p>Standard link: <a href=\"https://en.wikipedia.org/wiki/Blackjack\">https://en.wikipedia.org/wiki/Blackjack</a></p>",
        "id": 266190546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640626784
    },
    {
        "content": "<p>Specifically, what I was referring to are <code>↑ ↓</code> in the syntax of <code>simp</code> attributes</p>",
        "id": 266191224,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640627325
    },
    {
        "content": "<p>Ah those.  To be honest, today is the first time I've seen them.  They allow you to specify if a simp lemma is applied before recursing into the arguments, or afterwards.  (Default is post, for pre-lemmas you need to be super super careful not to run into confluence issues.)  The pre/post-flag can't be used for anything like <code>reassoc</code>.</p>",
        "id": 266194391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640629835
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 266194792,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640630183
    },
    {
        "content": "<p>I'm thinking about how <code>reassoc</code> could be redesigned so that we don't have to mark lemmas as <code>reassoc</code>. What I'm thinking of is that I'd create an additional <code>simp</code> attribute to use with a customized <code>simp</code> tactic. In that cache, I'd put all the <code>simp</code> lemmas but also their <code>reassoc</code> version as well. The reassoc versions would be created when the cache is updated and for the lemmas that you list as arguments to <code>simp</code>. Does that seem like a reasonable design to you?</p>",
        "id": 266195150,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640630563
    },
    {
        "content": "<p>I don't think a custom <code>simp</code> tactic is a good idea.  The whole point of <code>reassoc</code> is to automate writing simp lemmas for the default <code>simp</code> tactic, not to add yet another tactic.</p>",
        "id": 266195930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640631316
    },
    {
        "content": "<p>BTW, if you add <code>@[simp]</code> to a lemma like <code>foo : a ↔ b</code>, then Lean 4 will declare a helper lemma <code>foo_aux : a = b</code> and add that to the simp extension instead.  So I think it's perfectly fine to have reassoc add helper lemmas as well.</p>",
        "id": 266196056,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640631419
    },
    {
        "content": "<p>The idea is that <code>reassoc</code> is not the only feature that needs to create buddy lemmas. In mathlib, there's also <code>higher_order</code> which creates point-free formulations which are very useful when working with <code>Functor</code>, <code>Foldable</code> and <code>Traversable</code>. I'd like to be able to declare once that <code>reassoc</code> lemmas are useful, point-free lemmas are useful and so on if necessary rather than going around tagging every possible lemma with both attributes. I think with a custom version of <code>simp</code>, you can create a <code>scoped</code> macro and have the same syntax as <code>simp</code> (down to the name) and the whole device can be made invisible</p>",
        "id": 266196704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640631928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/mkSimpAttr/near/266196056\">said</a>:</p>\n<blockquote>\n<p>BTW, if you add <code>@[simp]</code> to a lemma like <code>foo : a ↔ b</code>, then Lean 4 will declare a helper lemma <code>foo_aux : a = b</code> and add that to the simp extension instead.  So I think it's perfectly fine to have reassoc add helper lemmas as well.</p>\n</blockquote>\n<p>Do you think the same machinery could be highjacked to create our own companion lemmas?</p>",
        "id": 266196778,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640631977
    }
]