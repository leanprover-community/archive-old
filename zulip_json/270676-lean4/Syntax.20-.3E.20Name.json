[
    {
        "content": "<p>I'd like to build a macro that looks somewhat like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">name</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but <code>x</code> should be turned into a <code>Name</code> instead of being an identifier, I did find the function. I did find <code> getNameOfIdent'</code> which looks like what I need but its only used in more involved elaborators so I'm not quite sure how to use it in a macro case, can i even? If not how can I achieve what i want?</p>",
        "id": 275929853,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647724227
    },
    {
        "content": "<p>use <code>x.getId</code></p>",
        "id": 275930448,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647725069
    },
    {
        "content": "<p>How exactly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x.getId</span> <span class=\"bp\">==</span> <span class=\"n\">name</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>didnt work</p>",
        "id": 275930811,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647725660
    },
    {
        "content": "<p>Also since this syntax will probably bite me sooner or later I did try other delimiters (namely <code>&lt;</code>) but those ended up  colliding with other syntax as well :/ Would someone happen to have better suggestion for syntax like this?</p>",
        "id": 275931028,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647725970
    },
    {
        "content": "<p>Can you show the error message that you get?</p>",
        "id": 275931140,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647726131
    },
    {
        "content": "<p>Also, sorry for the lack of details: this should work better (modulo the right choice of concrete syntax):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Syntax.mkNameLit</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">name</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275931224,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647726256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20-.3E.20Name/near/275931140\">said</a>:</p>\n<blockquote>\n<p>Can you show the error message that you get?</p>\n</blockquote>\n<p>The error is that it tells me on the next line its expecting a term, I susepect this is because it might be expecting a greater than notation at the end? not sure.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20-.3E.20Name/near/275931224\">said</a>:</p>\n<blockquote>\n<p>Also, sorry for the lack of details: this should work better (modulo the right choice of concrete syntax):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Syntax.mkNameLit</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">name</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes it diiid work better but mkNameLit takes a String so I did a .toString on the getIdent which resulted in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Syntax.mkNameLit</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">name</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but this in turn still gives me a:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">overloaded</span><span class=\"o\">,</span> <span class=\"n\">errors</span>\n  <span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">nameLit'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n    <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">pretty</span> <span class=\"n\">print</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">raw</span> <span class=\"n\">representation</span><span class=\"o\">)</span>\n\n  <span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">8</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'x'</span>\n</code></pre></div>\n<p>:/</p>",
        "id": 275931680,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647726769
    },
    {
        "content": "<p>It's not clear to me what your macro is supposed to do. Do you really want <code>(x = 12) : Name -&gt; Nat</code>?</p>",
        "id": 275932592,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647727893
    },
    {
        "content": "<p>In any case, you'll want <code>quote x.getId</code></p>",
        "id": 275932741,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647728095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20-.3E.20Name/near/275932592\">said</a>:</p>\n<blockquote>\n<p>It's not clear to me what your macro is supposed to do. Do you really want <code>(x = 12) : Name -&gt; Nat</code>?</p>\n</blockquote>\n<p>Yes, the original syntax I was aiming for was &lt;x = 12&gt; : Name -&gt; Nat but the parser doesnt seem to like that</p>",
        "id": 275933852,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647729477
    },
    {
        "content": "<p>But the quote part did work out thank you!</p>",
        "id": 275933900,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647729513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20-.3E.20Name/near/275933852\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20-.3E.20Name/near/275932592\">said</a>:</p>\n<blockquote>\n<p>It's not clear to me what your macro is supposed to do. Do you really want <code>(x = 12) : Name -&gt; Nat</code>?</p>\n</blockquote>\n<p>Yes, the original syntax I was aiming for was &lt;x = 12&gt; : Name -&gt; Nat but the parser doesnt seem to like that</p>\n</blockquote>\n<p>Umm, <code>(x = 12)</code> isn't really better. That syntax already means something, are you going to break all uses of <code>=</code> in parentheses?</p>",
        "id": 275941046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647740836
    },
    {
        "content": "<p>I'm very much aware of that, I just don't know of another alternative /o\\ feel free to give me one</p>",
        "id": 275963485,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647777787
    },
    {
        "content": "<p>what is the context? This looks like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 275964990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647780007
    },
    {
        "content": "<p>I'm mirroring <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-IMP/AExp.html\">https://isabelle.in.tum.de/library/HOL/HOL-IMP/AExp.html</a> and they defined the syntax <code>&lt;''y'' := 7&gt;</code> so I tried to mirror that (without the <code>''</code> around names, i also attempted <code>:=</code> instead of<code>=</code> but that came down to the same) and this is what came out of it</p>",
        "id": 275965083,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647780179
    },
    {
        "content": "<p>I recommend using a dedicated syntax category for your expressions, with a macro introducer syntax like <code>imp { x := 7 }</code></p>",
        "id": 275965501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647780730
    },
    {
        "content": "<p>Ah that does sound reasonable yes, thank you!</p>",
        "id": 275965512,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647780756
    },
    {
        "content": "<p>also it should not expand to that if statement, it should be a definition like <code>assign \"x\" (const 7)</code></p>",
        "id": 275965540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647780819
    },
    {
        "content": "<p>Why's that?</p>",
        "id": 275965593,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647780862
    },
    {
        "content": "<p>because that way you can have appropriate simp lemmas and theorems about the definition</p>",
        "id": 275965600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647780883
    },
    {
        "content": "<p>if you write a big program then using notations will lead to an unnecessarily large term</p>",
        "id": 275965620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647780920
    },
    {
        "content": "<p>also delab doesn't work as well on such expressions</p>",
        "id": 275965631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647780939
    },
    {
        "content": "<p>I see</p>",
        "id": 275965637,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647780959
    },
    {
        "content": "<p>Oh also, I did notice that they use this <code>blast</code> tactic quite a lot (it's a generic tableau prover) do we have such a thing as well (maybe in Lean 3?) would it be useful for us if not?</p>",
        "id": 275965748,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647781092
    },
    {
        "content": "<p>there is <code>eblast</code> in lean 3, but it is not used much because it has bugs and no maintainer. It would certainly be good to have a FOL prover in lean, it is not something that we handle well</p>",
        "id": 275966229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647781702
    },
    {
        "content": "<p><em>puts that on the list of things to have a look at at some point</em></p>",
        "id": 275966237,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647781724
    },
    {
        "content": "<p>I believe <code>aesop</code> will address some of the needs in this domain, although that is closer to <code>auto</code> than <code>blast</code></p>",
        "id": 275966345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647781774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20-.3E.20Name/near/275966237\">said</a>:</p>\n<blockquote>\n<p><em>puts that on the list of things to have a look at at some point</em></p>\n</blockquote>\n<p>scratch that I'm just writing endless stacks of cases and apply here, I'll look into it right away</p>",
        "id": 275966601,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647782147
    },
    {
        "content": "<p>did you try <code>simp</code>? It is probably selection bias but I don't really find a strong need for a <code>blast</code> like tactic most of the time</p>",
        "id": 275967608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647783528
    },
    {
        "content": "<p>I did <code>@[simp]</code> my declarations yeah, the thing is that my proofs right now basically look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Seq</span> <span class=\"n\">h3</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Seq</span> <span class=\"n\">h4</span>\n        <span class=\"n\">assumption</span>\n  <span class=\"n\">case</span> <span class=\"n\">mpr</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Seq</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Seq</span> <span class=\"n\">h1</span>\n        <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and simp doesnt seem to be able to apply <code>cases</code> on its own. But this proof would definitely be <code>blast</code>-able if blast was told about the cases as eleminiation rule and the <code>Seq</code> as intro rule since its just a tableau like this.</p>",
        "id": 275967959,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647783935
    },
    {
        "content": "<p>that looks like <code>And.assoc</code></p>",
        "id": 275968027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647784011
    },
    {
        "content": "<p>and you can probably write the proof as <code>⟨fun ⟨⟨a, b⟩, c⟩ =&gt; ⟨a, ⟨b, c⟩⟩, fun ⟨a, ⟨b, c⟩⟩ =&gt; ⟨⟨a, b⟩, c⟩⟩</code></p>",
        "id": 275968095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647784087
    },
    {
        "content": "<p>lets see</p>",
        "id": 275968101,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647784100
    },
    {
        "content": "<p>Ah, no I cannot (but that's just because I didn't show the big picture here) I'm now in this theory <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-IMP/Big_Step.html\">https://isabelle.in.tum.de/library/HOL/HOL-IMP/Big_Step.html</a> at <code>Seq_assoc</code> so whenever I apply <code>Seq</code> I can't just use the anonymous constructor.</p>",
        "id": 275968195,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647784233
    },
    {
        "content": "<p>If you move further down the file you'll also see that they are just able to <code>blast</code> most of the semantic equivalence goals</p>",
        "id": 275968297,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647784382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do we have automation for such things with simp as well? Or does this require something new then?</p>",
        "id": 275976632,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647795268
    },
    {
        "content": "<p>I'm guessing the 2nd?</p>",
        "id": 275976636,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647795273
    },
    {
        "content": "<p>You haven't shown a MWE so I don't know whether it can be done better. I'm just making guesses based on your code snippet</p>",
        "id": 275976674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647795345
    },
    {
        "content": "<p>That would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Everything until BigStep is just setup</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">AExp</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">AExp</span>\n<span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">AExp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">:</span> <span class=\"n\">AExp</span> <span class=\"bp\">→</span> <span class=\"n\">AExp</span> <span class=\"bp\">→</span> <span class=\"n\">AExp</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">State</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AExp</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">aexp</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span>\n<span class=\"n\">syntax</span> <span class=\"n\">aexp</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">aexp</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">aexp</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">aexp</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[AExp|\"</span> <span class=\"n\">aexp</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">AExp.N</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">AExp.N</span> <span class=\"o\">(</span><span class=\"bp\">-$</span><span class=\"n\">num</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">AExp.V</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">AExp.Plus</span> <span class=\"o\">[</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aval</span> <span class=\"o\">:</span> <span class=\"n\">AExp</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">aval</span> <span class=\"n\">l</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">aval</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">updateState</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">AExp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BExp</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">BConstant</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">BExp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">BExp</span> <span class=\"bp\">→</span> <span class=\"n\">BExp</span>\n<span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">BExp</span> <span class=\"bp\">→</span> <span class=\"n\">BExp</span> <span class=\"bp\">→</span> <span class=\"n\">BExp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Less</span> <span class=\"o\">:</span> <span class=\"n\">AExp</span> <span class=\"bp\">→</span> <span class=\"n\">AExp</span> <span class=\"bp\">→</span> <span class=\"n\">BExp</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BExp</span>\n<span class=\"kn\">open</span> <span class=\"n\">AExp</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">bexp</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⊤\"</span> <span class=\"o\">:</span> <span class=\"n\">bexp</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⊥\"</span> <span class=\"o\">:</span> <span class=\"n\">bexp</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"¬\"</span> <span class=\"n\">bexp</span> <span class=\"o\">:</span> <span class=\"n\">bexp</span>\n<span class=\"n\">syntax</span> <span class=\"n\">aexp</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"n\">aexp</span> <span class=\"o\">:</span> <span class=\"n\">bexp</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">bexp</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">bexp</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">bexp</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[BExp|\"</span> <span class=\"n\">bexp</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">BExp.BConstant</span> <span class=\"n\">Bool.true</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">BExp.BConstant</span> <span class=\"n\">Bool.false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">BExp.Not</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">aexp</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">aexp</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">BExp.Less</span> <span class=\"o\">[</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bval</span> <span class=\"o\">:</span> <span class=\"n\">BExp</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">BConstant</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bval</span> <span class=\"n\">l</span> <span class=\"n\">s</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bval</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">Less</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aval</span> <span class=\"n\">l</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">aval</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Com</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">Assign</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">AExp</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">If</span> <span class=\"o\">:</span> <span class=\"n\">BExp</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">While</span> <span class=\"o\">:</span> <span class=\"n\">BExpr</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">com</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"SKIP\"</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">aexp</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">aexp</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">com</span> <span class=\"s2\">\";\"</span> <span class=\"n\">com</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"if\"</span> <span class=\"n\">bexp</span> <span class=\"s2\">\"exec\"</span> <span class=\"n\">com</span> <span class=\"s2\">\"else\"</span> <span class=\"n\">com</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"while\"</span> <span class=\"n\">bexp</span> <span class=\"s2\">\"exec\"</span> <span class=\"n\">com</span><span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">com</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[Com|\"</span> <span class=\"n\">com</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">SKIP</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Skip</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Assign</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Assign</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">AExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Seq</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.If</span> <span class=\"o\">[</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.While</span> <span class=\"o\">[</span><span class=\"n\">BExp</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">com</span> <span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">Skip</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">Assign</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">updateState</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c1</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c2</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s3</span>\n<span class=\"bp\">|</span> <span class=\"n\">IfTrue</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c1</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c1</span> <span class=\"k\">else</span> <span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n<span class=\"bp\">|</span> <span class=\"n\">IfFalse</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c2</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c1</span> <span class=\"k\">else</span> <span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n<span class=\"bp\">|</span> <span class=\"n\">WhileFalse</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">WhileTrue</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s3</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">c</span> <span class=\"s2\">\",\"</span> <span class=\"n\">s</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\"→\"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BigStep</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seq_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">],</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">],</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>...one can probably ignore the syntax stuff for the most part, its really about the BigStep inductive and the theorem</p>",
        "id": 275977054,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647795770
    },
    {
        "content": "<p>It basically comes down to \"Do we have good support for automatic reasoning on inductive predicates\"</p>",
        "id": 275977104,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647795843
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Com</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">com</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"SKIP\"</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">com</span> <span class=\"s2\">\";\"</span> <span class=\"n\">com</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">com</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[Com|\"</span> <span class=\"n\">com</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">SKIP</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Skip</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Seq</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">com</span> <span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">Skip</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c1</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c2</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s3</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">c</span> <span class=\"s2\">\",\"</span> <span class=\"n\">s</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\"→\"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BigStep</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seq_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">],</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">],</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I guess this one would be more minimal xd</p>",
        "id": 275977262,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647796073
    },
    {
        "content": "<p>Hmm...actually removing things did change apparently change stuff so the original proof doesnt work anymore :/</p>",
        "id": 275977429,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647796310
    },
    {
        "content": "<p>The <code>Skip</code> case looks wrong; it appears red in the definition of <code>BigStep</code> because it's actually a variable</p>",
        "id": 275977512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647796437
    },
    {
        "content": "<p>Now it works, it shouldve bee <code>Com.Skip</code> yeah..</p>",
        "id": 275977577,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647796486
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">Com.Skip</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">assign</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">updateState</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">aval</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c1</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c2</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s3</span>\n<span class=\"bp\">|</span> <span class=\"n\">if_true</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c1</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c1</span> <span class=\"k\">else</span> <span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n<span class=\"bp\">|</span> <span class=\"n\">if_false</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c2</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c1</span> <span class=\"k\">else</span> <span class=\"n\">c2</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n<span class=\"bp\">|</span> <span class=\"n\">while_false</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">while_true</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">bval</span> <span class=\"n\">b</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">exec</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">s1</span> <span class=\"n\">s3</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">c</span> <span class=\"s2\">\", \"</span> <span class=\"n\">s</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\" → \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BigStep</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">BigStep.seq_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">],</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">],</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">h3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n   <span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">h3</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 275977669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647796601
    },
    {
        "content": "<p>That does indeed look much better yes...but judging from this the answer to my question seems that we don't really have good automation for constructing these derivation trees automatically, just nice syntax to denote them right?</p>",
        "id": 275978204,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647797305
    },
    {
        "content": "<p>Well, it would be different if you used and / or / eq instead of a custom inductive type</p>",
        "id": 275979037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647798524
    },
    {
        "content": "<p>Yeah I get that...but getting that to work is exactly the point of Isabelle's blast since it's not just a FOL prover but a generic tableau prover.</p>",
        "id": 275979427,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647798953
    },
    {
        "content": "<p>Anyways, thanks for all the help and patience!</p>",
        "id": 275979432,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647798959
    },
    {
        "content": "<p>FYI <a href=\"https://github.com/JLimperg/aesop\">Aesop</a> now solves this (with some appropriately tagged lemmas):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">State</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Com</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">com</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"SKIP\"</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">com</span> <span class=\"s2\">\";\"</span> <span class=\"n\">com</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">com</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">com</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[Com|\"</span> <span class=\"n\">com</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">SKIP</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Skip</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Com.Seq</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">com</span> <span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[aesop safe]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">BigStep</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">Com.Skip</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c₁</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"n\">c₂</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c₁</span><span class=\"bp\">;</span><span class=\"n\">c₂</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BigStep</span>\n\n<span class=\"kd\">@[aesop norm elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Seq_inv</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c₁</span><span class=\"bp\">;</span><span class=\"n\">c₂</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">BigStep</span> <span class=\"n\">c₁</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">BigStep</span> <span class=\"n\">c₂</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">BigStep</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">seq_assoc</span> <span class=\"o\">:</span>\n    <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"bp\">↔</span> <span class=\"n\">BigStep</span> <span class=\"o\">[</span><span class=\"n\">Com</span><span class=\"bp\">|</span> <span class=\"n\">c1</span><span class=\"bp\">;</span><span class=\"n\">c2</span><span class=\"bp\">;</span><span class=\"n\">c3</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 277155706,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1648651517
    },
    {
        "content": "<p>Yay more concrete semantics for me!</p>",
        "id": 277175515,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648659596
    }
]