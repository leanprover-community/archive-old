[
    {
        "content": "<p>I see two versions of Nat.any: one that is tail recursive and one that isn't.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">any</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">||</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">anyTR</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"kd\">@[specialize]</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">loop</span> <span class=\"n\">m</span>\n  <span class=\"n\">loop</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Curious: what is the reason to keep the non-tail recursive version?</p>",
        "id": 306761142,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1666996506
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">9</span>\n    <span class=\"kd\">def</span> <span class=\"n\">Nat.any</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n      <span class=\"n\">cases</span> <span class=\"n\">x.1</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.2</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n.3</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.any</span> <span class=\"n\">f</span> <span class=\"n\">n.3</span><span class=\"bp\">;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">_x.4</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n.3</span><span class=\"bp\">;</span>\n          <span class=\"n\">return</span> <span class=\"n\">_x.5</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">return</span> <span class=\"n\">_x.4</span>\n</code></pre></div>\n<p>I guess we should also share the <code>f n</code> computation.</p>",
        "id": 306761356,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1666996630
    },
    {
        "content": "<p>Just for a bit of context, I am querying LCNF to find recursive declarations that are not tail recursive.</p>",
        "id": 306761725,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1666996869
    },
    {
        "content": "<p>We could just mark the non-TR version as <code>noncomputable</code> here to prevent the compiler from generating the code, but there is nothing on the definition of <code>any</code> itself that makes it clear that it is being replaced, like <code>implemented_by</code>, so this might cause problems for the noncomputable checker</p>",
        "id": 306770613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667003103
    },
    {
        "content": "<p>To the original question \"what is the reason to keep the non-tail recursive version\", I am assuming, as in other cases such as <code>map</code> and <code>mapTR</code>, it is that the straightforward version is easier to reason about as a mathematical model (maybe not soo much in this particular case but in general it's definitely true).</p>",
        "id": 306780687,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1667012905
    }
]