[
    {
        "content": "<p>I find this behavior surprising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">try</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span>\n   <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- does not work</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">try</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span>\n   <span class=\"c1\">-- goal not closed yet</span>\n   <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- works with parentheses</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">])</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/914\">https://github.com/leanprover-community/mathlib4/pull/914</a>, and earlier in <a href=\"https://github.com/leanprover-community/mathlib4/pull/370#discussion_r949498757\">https://github.com/leanprover-community/mathlib4/pull/370#discussion_r949498757</a>.</p>\n<p>Have other people hit trouble with this? Should I open an issue on the lean4 repo?</p>",
        "id": 314691801,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670510790
    },
    {
        "content": "<p>While I agree with the sentiment, I'm not sure what the better alternative is, because <code>try</code> takes a tactic block, which can be indented and have internal semicolons, and it's not clear where to make it stop</p>",
        "id": 314692264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670510920
    },
    {
        "content": "<p>It's especially confusing, because the current relative precedences are different from how they are in Lean 3, so we're bound to keep running into it during the port</p>",
        "id": 314692314,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670510936
    },
    {
        "content": "<p>(though I suppose we can ask <code>mathport</code> to insert parens)</p>",
        "id": 314692378,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670510954
    },
    {
        "content": "<p>note that in lean 3 there was explicit bracketing</p>",
        "id": 314692439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670510972
    },
    {
        "content": "<p>what do you mean by that?</p>",
        "id": 314692477,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670510985
    },
    {
        "content": "<p>which we could also do, <code>try { tac }</code> is legal syntax and does what you want</p>",
        "id": 314692513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670510997
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]}</span><span class=\"bp\">;</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 314692832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670511076
    },
    {
        "content": "<p>mathport should currently be adding parentheses iff they are necessary. Are you saying that it is producing incorrect code?</p>",
        "id": 314693069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670511146
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/700\">https://github.com/leanprover-community/mathlib4/pull/700</a> added a comment with syntax that did not include the parens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c1\">-- This used to be almost automatic with `split_ifs` and `cc`</span>\n    <span class=\"c1\">-- The split_ifs regression is noted in https://github.com/leanprover-community/mathlib4/issues/760</span>\n    <span class=\"c1\">-- split_ifs  at h &lt;;&gt; try subst b &lt;;&gt; try simp only [f.injective.eq_iff] at * &lt;;&gt; cc⟩</span>\n</code></pre></div>\n<p>I was assuming that this came from the mathport output.</p>",
        "id": 314693769,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670511342
    },
    {
        "content": "<p>It's possible that it was just manually copied / imperfectly ported.</p>",
        "id": 314694159,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670511438
    },
    {
        "content": "<p>This has come up before and I think the best compromise we could come up with is that <code>try</code> etc on a single line should accept only a single tactic (with high precedence), while <code>try</code> followed by a linebreak should continue to work as right now</p>",
        "id": 314694160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670511439
    },
    {
        "content": "<p>The current parenthesizer is indeed broken:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"bp\">;</span> <span class=\"n\">skip</span><span class=\"o\">))</span>\n  <span class=\"n\">formatTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">parenthesizeTactic</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n<span class=\"c1\">-- (try skip; skip)</span>\n</code></pre></div>",
        "id": 314695966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670511916
    },
    {
        "content": "<p>(the correct answer there is <code>((try skip); skip)</code>)</p>",
        "id": 314696280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670511981
    },
    {
        "content": "<p>The fix is the same: <code>;</code> should have a lower precedence than <code>try</code>. Currently it doesn't have any precedence at all in any sense, so the parenthesizer is powerless to do anything.</p>",
        "id": 314696995,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670512164
    },
    {
        "content": "<p>the parenthesizer shouldn't be powerless here, even though it doesn't have a precedence in the usual sense</p>",
        "id": 314697173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512211
    },
    {
        "content": "<p>Any issues of <code>try</code> parsing too much (under the current semantics) can be fixed with appropriately located parentheses, so it does seem like a job for the parenthesizer</p>",
        "id": 314697627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512318
    },
    {
        "content": "<p>Precedence in the usual sense is all the current parenthesizer knows about</p>",
        "id": 314697633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670512319
    },
    {
        "content": "<p>okay, but this does seem to be part of the job description of the parenthesizer even if it isn't represented nicely for it</p>",
        "id": 314697888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512384
    },
    {
        "content": "<p>I recall there being some text in the module doc about how the general problem is impossible to solve</p>",
        "id": 314697948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512402
    },
    {
        "content": "<blockquote>\n<p>This has come up before and I think the best compromise we could come up with is that try etc on a single line should accept only a single tactic (with high precedence), while try followed by a linebreak should continue to work as right now</p>\n</blockquote>\n<p>I'm worried that it would be confusing for these to have different meaning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">try</span> <span class=\"n\">A</span>\n     <span class=\"n\">B</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">try</span>\n   <span class=\"n\">A</span>\n   <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 314698046,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670512431
    },
    {
        "content": "<p>those would both mean <code>try (A; B)</code></p>",
        "id": 314698223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512477
    },
    {
        "content": "<p>Yes, I think my description was more restrictive than a sensible implementation would be</p>",
        "id": 314698331,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670512510
    },
    {
        "content": "<p>the counterintuitive behavior in sebastian's proposal is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>means <code>(try A); B</code> but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"n\">B</span>\n    <span class=\"n\">C</span>\n</code></pre></div>\n<p>means <code>try (A; B; C)</code></p>",
        "id": 314698601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512571
    },
    {
        "content": "<p>Here's a much simpler option: <code>try</code> takes a tactic, <code>try =&gt; </code> takes a tactic block</p>",
        "id": 314698988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512694
    },
    {
        "content": "<p>A precedence ordering implementation should lead to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">try</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n     <span class=\"n\">C</span>\n</code></pre></div>\n<p>I believe, which would be a parse error, but I think I like your proposal more!</p>",
        "id": 314699337,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670512798
    },
    {
        "content": "<p>what's the input? <code>((try A); B)\\n C</code>?</p>",
        "id": 314699634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512871
    },
    {
        "content": "<p>I'm not sure why the <code>C</code> is hanging there</p>",
        "id": 314699961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670512959
    },
    {
        "content": "<p>The first line should be the partial syntax tree to your input, then the indented <code>C</code> is a parse error because of the <code>checkColEq</code> in <code>sepBy1Indent</code></p>",
        "id": 314700320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670513063
    },
    {
        "content": "<p>with the precedence ordering <code>;</code> &lt; <code>try</code> &lt; <code>\\n</code></p>",
        "id": 314700549,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670513123
    },
    {
        "content": "<p>Ah, but we also want <code>\\n</code>&lt;<code>;</code>... yeah, that doesn't work</p>",
        "id": 314700796,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670513182
    },
    {
        "content": "<p>Where's that paper about non-transitive precedence relations... :)</p>",
        "id": 314701937,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670513510
    }
]