[
    {
        "content": "<p>This might be a basic question, but let's say I want to define a term elaboration meant to be used within a tactic (in such a way that it depends on the current goals). Is that possible?</p>\n<p>I get a type mismatch error when I try to use <code>Tactic.getMainDecl</code>within a term elaboration, and a different one if I try to return an <code>Expr</code> within a <code>tactic</code> elab. (Can monad lifting can help out here somehow? Or do I need a different type of elaboration?)</p>",
        "id": 309250304,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668194950
    },
    {
        "content": "<p><code>MetaM</code> lifts into <code>TermElabM</code> lifts into <code>TacticM</code>. To use a <code>TermElabM</code> computation which depends on the current goals, you'll have to use <code>getGoals</code> first and pass this to the <code>TermElabM</code> computation (which gets auto-lifted into <code>TacticM</code>). To lift a <code>MetaM</code> tactic into <code>TacticM</code>, use <code>liftMetaTactic</code>. Does that help?</p>",
        "id": 309252317,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1668195980
    },
    {
        "content": "<p>Just to make sure we're on the same page, <code>getGoals</code> has type <code>TacticM (List MVarId)</code>, right? If I try to use this within the <code>TermElabM</code> computation, e.g. <code>let goals ← Tactic.getGoals</code>, I get hit with a type mismatch, saying that it should have type <code>TermElabM ...</code>. To pass the result to the <code>TermElabM</code> computation, we'd have to be in a <code>TacticM</code> computation \"on the outside\", right? My problem then is being able to return an expression from the <code>TacticM</code> computation, since it seems like that's fundamentally not what <code>TacticM Unit</code> can do. Unless...is there a way to define a <code>TacticM Expr</code> elaboration somehow?</p>",
        "id": 309253295,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668196579
    },
    {
        "content": "<p>Terms and tactics are distinct. A term elaborator cannot depend on the current goal.</p>",
        "id": 309254585,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668197285
    },
    {
        "content": "<p>This cannot be done, and moreover it is a really weird thing to do. The closest approximation would be a tactic with a <code>term</code> argument, which uses a side channel to pass its list of goals to a subterm of the input argument. (<code>squeeze_scope</code> has to do something like this because it passes information about the scope to all nested <code>simp</code> calls.)</p>",
        "id": 309256172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668198195
    },
    {
        "content": "<p>I think it might help to explain what you want to do (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>)</p>",
        "id": 309256202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668198218
    },
    {
        "content": "<p>So, the actual application was just to see if I could \"improve on\" <code>have_field</code> and, instead of having it <code>have</code> things into the context, be able to simply use something like <code>currentFieldProj</code> in syntax to represent the projection itself. Currently, this would have to read off some metadata from the current goal. (I do wonder if there's a better way to do this, though—something in the environment, maybe?)</p>\n<p>I was mostly just trying to see if I could do it for fun/learning/experience—as far as I can tell, <code>have_field</code> isn't used <em>once</em> in mathlib3 <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> (in contrast to <code>refine_struct</code>, which is used occasionally.) Not spending too much time on it, though, since there are other, more useful things to be done... :)</p>",
        "id": 309257401,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668198868
    }
]