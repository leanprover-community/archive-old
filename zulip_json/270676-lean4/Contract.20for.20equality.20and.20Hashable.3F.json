[
    {
        "content": "<p>In Java, there's an expectation that every implementation of <code>hashCode</code> will generate identical codes for values that are <code>equal</code>.</p>\n<p>What is the contract that relates <code>BEq α</code>, <code>{x y : α} : Decidable (x = y)</code>, and <code>Hashable α</code>? My guess, based on reading various Lean code, is that all of the following should hold:</p>\n<ul>\n<li><code>beq</code> should always return <code>true</code> when two values are propositionally equal (that is, for an inhabited type, it shouldn't be <code>fun x y =&gt; false</code>)</li>\n<li><code>beq</code> should always return <code>false</code> when two values are propositionally inequal (that is, it shouldn't do more quotienting than the type's notion of propositional equality)</li>\n<li><code>x == y = true → hashCode x = hashCode y</code> should be true</li>\n</ul>\n<p>Is this a correct understanding? I'm not saying that users should have to prove all of these, merely that it's a bug if they don't all hold. The last point is a consequence of <code>beq</code> reflecting propositional equality in the sense of the first two points, but it seems useful to state in case that is a misunderstanding.</p>\n<p>Thanks!</p>",
        "id": 303159817,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1665339357
    },
    {
        "content": "<p>We have LawfulBEq already but I'm not aware of a LawfulHashable, although that might be a nice addition for std4? CC <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 303160306,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1665339686
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/blob/a7237a4a4a7dd520ba1425295306bc1b4f754577/Std/Data/HashMap/Basic.lean#L13\">https://github.com/leanprover/std4/blob/a7237a4a4a7dd520ba1425295306bc1b4f754577/Std/Data/HashMap/Basic.lean#L13</a></p>",
        "id": 303160541,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1665339857
    },
    {
        "content": "<p>Hurray</p>",
        "id": 303160641,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1665339949
    },
    {
        "content": "<p><del>Hmm, <code>LawfulBEq</code> seems to admit <code>fun x y =&gt; true</code> as lawful...</del></p>\n<p>Sorry, it's late here :-)</p>",
        "id": 303160715,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1665339999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/Contract.20for.20equality.20and.20Hashable.3F/near/303159817\">said</a>:</p>\n<blockquote>\n<p><code>beq</code> should always return <code>false</code> when two values are propositionally inequal (that is, it shouldn't do more quotienting than the type's notion of propositional equality)</p>\n</blockquote>\n<p>Violating this one is not considered a bug (or else we would just use <code>Decidable (x = y)</code> instead of <code>BEq</code>, like we did in Lean 3). <code>BEq Expr</code> for example works modulo binder annotations. <code>BEq Float</code> arguably violates it as well, even though here we can't prove propositional inequality.</p>",
        "id": 303166552,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665344358
    },
    {
        "content": "<blockquote>\n<p>or else we would just use <code>Decidable (x = y)</code> instead of <code>BEq</code></p>\n</blockquote>\n<p>Interesting, I thought the point of <code>BEq</code> was more that you don't actually have to prove <code>x = y</code> rather than allowing for quotients.</p>",
        "id": 303170347,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665347739
    },
    {
        "content": "<p>Also, that does mean <code>BEq Expr</code> is not a <code>LawfulBEq</code> right?</p>",
        "id": 303171132,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1665348521
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 303171146,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1665348540
    },
    {
        "content": "<p>Now that the core invariant proofs of <code>HashMap</code> are done, I am fairly confident in the necessity of each of the properties used in the definition of <code>HashMap</code>:</p>\n<ul>\n<li><code>a == b -&gt; hash a = hash b</code></li>\n<li><code>a == b -&gt; b == a</code> (I tried getting around this by permuting the equality checks but it really does need both directions)</li>\n<li><code>a == b -&gt; b == c -&gt; a == c</code></li>\n</ul>\n<p>The first one is <code>LawfulHashable</code> and the last two are <code>PartialEquivBEq</code>. Perhaps surprisingly, we don't need to require <code>a == a</code> (which would make it a total equivalence relation instead of a partial equivalence relation) for the core invariants, although you will need this to prove that <code>(m.insert k v).find? k = some v</code>.</p>",
        "id": 303176424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665354398
    },
    {
        "content": "<p>I don't want to derail this topic too much but it has now been several times that I've seen this recently.  I asked not that long ago about some guidance for <code>BEq</code> and <code>DecidableEq</code>; specifically about when one should prefer one over the other in the context of e.g. <code>deriving</code> for structures etc.</p>\n<p>From some of the recent discussions (including the above), I am inferring that the consensus is moving toward always using <code>BEq</code> (<code>==</code>) (instead of <code>=</code>, at least for programming) for equalities; and the difference will be that if <code>LawfulBEq</code> class exists, it will also be useful for doing proofs? (such as e.g. matching/ifs for things like \"List is not empty\" when using <code>List.head</code>)</p>\n<p>If the answer is too long/complicated, I can start a separate topic, please just LMK.</p>",
        "id": 303180145,
        "sender_full_name": "Tom",
        "timestamp": 1665359037
    },
    {
        "content": "<p>Thanks!</p>\n<p>I think requiring <code>BEq</code> to give an equivalence relation makes a lot of sense, and I also get the practical reasons for coarsening it WRT decidable equality. Does this imply that <code>LawfulBEq</code> is improperly named?</p>",
        "id": 303624079,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1665580342
    }
]