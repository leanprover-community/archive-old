[
    {
        "content": "<p>I have defined <code>NFloatArray n</code> which is just a <code>FloatArray</code> with size in the type but it has a specialization for small numbers of <code>n</code>.  I'm curious what is the best way to work with such structure.</p>\n<p>I have defined different versions of <code>addOne</code>, a function adding one to every component. </p>\n<p>As a test, I run this function 10milion times for <code>n=2</code>. The times are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">addOne_v1</span> <span class=\"mi\">457</span><span class=\"n\">ms</span>\n<span class=\"n\">addOne_v2</span> <span class=\"mi\">138</span><span class=\"n\">ms</span>\n<span class=\"n\">addOne_v3</span> <span class=\"mi\">84</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n<span class=\"n\">addOne_v4</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n<span class=\"n\">addOne_v5</span> <span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>Can anyone get it even faster? Why inlining <code>addOne_v3</code> makes it roughly twice as slow? Every other version of <code>addOne</code> benefits from inlining.</p>\n<p>File: <code>NFloatArray.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Float2</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NFloatArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Float</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Float2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n'</span><span class=\"bp\">+</span><span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"bp\">//</span> <span class=\"n\">xs.size</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"[]\"</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"[{x}]\"</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"[{x}, {y}]\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">xs</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Array.toFloatArray</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NFloatArray</span>\n\n  <span class=\"kd\">@[inline]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">iget</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs'.get</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs'.get</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">@[inline]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">addOne_v1</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">xs'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'.get</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">xs'.get</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- TODO: implement me</span>\n\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">@[inline]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">addOne_v2</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">xs'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">xs'.2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- TODO: implement me</span>\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">def</span> <span class=\"n\">addOne_v3</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">xs'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'.iget</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">xs'.iget</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- TODO: implement me</span>\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">@[inline]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">addOne_v4</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">xs'</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- TODO: implement me</span>\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">@[inline]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">addOne_v5</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">NFloatArray</span>\n</code></pre></div>\n<p>File: <code>Main.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">NFloatArray</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NFloatArray</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"addOne_v1\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">addOne_v1</span> <span class=\"n\">v</span>\n\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"addOne_v2\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">addOne_v2</span> <span class=\"n\">v</span>\n\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"addOne_v3\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">addOne_v3</span> <span class=\"n\">v</span>\n\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"addOne_v4\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">addOne_v4</span> <span class=\"n\">v</span>\n\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"addOne_v5\"</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">NFloatArray</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">addOne_v5</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 289121748,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657484106
    },
    {
        "content": "<p>Adding <code>-O2</code> flag via <code>moreLeancArgs := #[\"-O2\"]</code>, makes <code>v4</code> as fast as <code>v5</code>.</p>",
        "id": 289122135,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657484658
    },
    {
        "content": "<p>Did you compare against a straight <code>FloatArray</code>?</p>",
        "id": 289123119,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657486034
    },
    {
        "content": "<p>Good point, I didn't.</p>",
        "id": 289123613,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657486700
    },
    {
        "content": "<p>This implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">addOne_v0</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">xs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">xi</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span>\n      <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.set</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">xs</span>\n</code></pre></div>\n<p>takes rounghly 140ms.</p>",
        "id": 289123772,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657486950
    },
    {
        "content": "<p>What happens if you replace <code>xs.size</code> by <code>2</code>?</p>",
        "id": 289123802,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657487017
    },
    {
        "content": "<p>Nothing, more or less the same time.</p>",
        "id": 289123862,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657487076
    },
    {
        "content": "<p>Unrolling the loop gives  41ms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">addOne_v0</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.uset</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xs.uget</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.uset</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">xs.uget</span> <span class=\"mi\">1</span> <span class=\"gr\">sorry</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 289124206,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657487641
    },
    {
        "content": "<p>Looks like that using a specialized structure for small <code>n</code> might not be necessary.</p>",
        "id": 289124258,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657487695
    },
    {
        "content": "<p>Running equivalent program in C++ takes 9ms. Also in Lean, running just and empty loop with 10mil iterations takes 26ms.</p>",
        "id": 289125231,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657489119
    },
    {
        "content": "<p>It looks like that <code>addOne_v5</code> is hitting Lean limit, it takes 34ms that is roughly 35ms = 9ms(c++) + 26ms(empty Lean for loop).</p>",
        "id": 289125442,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657489418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> what if you use <code>BaseIO</code> instead of <code>IO</code>?</p>",
        "id": 289125477,
        "sender_full_name": "Mac",
        "timestamp": 1657489442
    },
    {
        "content": "<p>Not use what are you suggesting? Here and how should I use <code>BaseIO</code>?</p>",
        "id": 289125537,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657489505
    },
    {
        "content": "<p>I mean use <code>BaseIO</code> as the monad to run these experiments rather than <code>IO</code>.</p>",
        "id": 289125569,
        "sender_full_name": "Mac",
        "timestamp": 1657489561
    },
    {
        "content": "<p>Still not clear to me. Are you suggesting <code>def main : BaseIO Unit</code> ? Then I do not have <code>timeit</code> function.</p>",
        "id": 289125645,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657489651
    },
    {
        "content": "<p>Ah, oops, yeah. I forgot <code>timeit</code> is in <code>IO</code> -- that may be a problem. This means that Lean has to check if the loop errored every iteration.</p>",
        "id": 289125704,
        "sender_full_name": "Mac",
        "timestamp": 1657489713
    },
    {
        "content": "<p>Ahh, I see now! That makes perfect sense.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">timeit</span> <span class=\"s2\">\"nothing\"</span> <span class=\"bp\">$</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">toFloatArray</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>now takes 0.000254ms instead of 26ms</p>",
        "id": 289125843,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657489946
    },
    {
        "content": "<p>:)</p>",
        "id": 289125848,
        "sender_full_name": "Mac",
        "timestamp": 1657489968
    },
    {
        "content": "<p>Ahh, not correct. I think the loop gets eliminated, instead of <code>pure  $ Id.run</code> it should be for example <code>IO.println $ Id.run</code> and the loop should return <code>v</code></p>",
        "id": 289125947,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657490113
    },
    {
        "content": "<p>Still significantly faster,  0.018ms.</p>",
        "id": 289125962,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657490146
    },
    {
        "content": "<p>I think it still may be precomputing the loop though.</p>",
        "id": 289126031,
        "sender_full_name": "Mac",
        "timestamp": 1657490260
    },
    {
        "content": "<p>Yeah, the numbers are susspicious.</p>",
        "id": 289126154,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657490418
    },
    {
        "content": "<p>It is definitely precomputing the loop. The numbers are nonsensical now.</p>",
        "id": 289126268,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657490619
    },
    {
        "content": "<p>(deleted -- I am an idiot -- was not returning <code>v</code>)</p>",
        "id": 289126340,
        "sender_full_name": "Mac",
        "timestamp": 1657490727
    },
    {
        "content": "<p>This test works (and is producing the expected code), but the time it reports does not seem like the time it actually takes in the editor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">opaqueId</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_pure</span> <span class=\"o\">:=</span>\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"pure\"</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]⟩</span>\n      <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">opaqueId</span> <span class=\"n\">v</span>\n      <span class=\"n\">return</span> <span class=\"n\">v</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test_pure</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[1.000000, 2.000000]</span>\n<span class=\"cm\">pure 0.102ms</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 289126569,
        "sender_full_name": "Mac",
        "timestamp": 1657491058
    },
    {
        "content": "<p>That is really odd, the time does not match but the loop is not precomputed.</p>",
        "id": 289126792,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657491445
    },
    {
        "content": "<p>It seems to me like some post-IR optimization is eliminating the loop.</p>",
        "id": 289127101,
        "sender_full_name": "Mac",
        "timestamp": 1657491948
    },
    {
        "content": "<p>However, I was not aware such an optimization stage existed, which confuses me greatly.</p>",
        "id": 289127166,
        "sender_full_name": "Mac",
        "timestamp": 1657492026
    },
    {
        "content": "<p>Actually, wait, the problem is that it is lifting the loop out of the <code>timeit</code>.</p>",
        "id": 289127188,
        "sender_full_name": "Mac",
        "timestamp": 1657492080
    },
    {
        "content": "<p>The variable <code>x_6</code> already holds the computed value, right? So the <code>timeit ◾ x_8 x_7 x_1</code> just unpacks the value from <code>x_7</code>.</p>",
        "id": 289127347,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657492280
    },
    {
        "content": "<p>Fixed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">opaqueId</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compute_pure</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">opaqueId</span> <span class=\"n\">v</span>\n  <span class=\"n\">return</span> <span class=\"n\">v</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[result]</span>\n<span class=\"cm\">def Std.Range.forIn.loop._at.compute_pure._spec_1 (x_1 : obj) (x_2 : obj) (x_3 : @&amp; obj) (x_4 : @&amp; obj) (x_5 : @&amp; obj) : obj :=</span>\n<span class=\"cm\">  let x_6 : u8 := Nat.decLe x_3 x_2;</span>\n<span class=\"cm\">  case x_6 : u8 of</span>\n<span class=\"cm\">  Bool.false →</span>\n<span class=\"cm\">    let x_7 : obj := 0;</span>\n<span class=\"cm\">    let x_8 : u8 := Nat.decEq x_1 x_7;</span>\n<span class=\"cm\">    case x_8 : u8 of</span>\n<span class=\"cm\">    Bool.false →</span>\n<span class=\"cm\">      let x_9 : obj := 1;</span>\n<span class=\"cm\">      let x_10 : obj := Nat.sub x_1 x_9;</span>\n<span class=\"cm\">      dec x_1;</span>\n<span class=\"cm\">      let x_11 : obj := Nat.add x_2 x_4;</span>\n<span class=\"cm\">      dec x_2;</span>\n<span class=\"cm\">      let x_12 : obj := Std.Range.forIn.loop._at.compute_pure._spec_1 x_10 x_11 x_3 x_4 x_5;</span>\n<span class=\"cm\">      ret x_12</span>\n<span class=\"cm\">    Bool.true →</span>\n<span class=\"cm\">      dec x_2;</span>\n<span class=\"cm\">      dec x_1;</span>\n<span class=\"cm\">      inc x_5;</span>\n<span class=\"cm\">      ret x_5</span>\n<span class=\"cm\">  Bool.true →</span>\n<span class=\"cm\">    dec x_2;</span>\n<span class=\"cm\">    dec x_1;</span>\n<span class=\"cm\">    inc x_5;</span>\n<span class=\"cm\">    ret x_5</span>\n<span class=\"cm\">def compute_pure._closed_1 : float :=</span>\n<span class=\"cm\">  let x_1 : obj := 0;</span>\n<span class=\"cm\">  let x_2 : u8 := 0;</span>\n<span class=\"cm\">  let x_3 : float := Float.ofScientific x_1 x_2 x_1;</span>\n<span class=\"cm\">  ret x_3</span>\n<span class=\"cm\">def compute_pure._closed_2 : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := 1;</span>\n<span class=\"cm\">  let x_2 : obj := Array.mkEmpty ◾ x_1;</span>\n<span class=\"cm\">  ret x_2</span>\n<span class=\"cm\">def compute_pure._closed_3._boxed_const_1 : obj :=</span>\n<span class=\"cm\">  let x_1 : float := compute_pure._closed_1;</span>\n<span class=\"cm\">  let x_2 : obj := box x_1;</span>\n<span class=\"cm\">  ret x_2</span>\n<span class=\"cm\">def compute_pure._closed_3 : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := compute_pure._closed_2;</span>\n<span class=\"cm\">  let x_2 : obj := compute_pure._closed_3._boxed_const_1;</span>\n<span class=\"cm\">  let x_3 : obj := Array.push ◾ x_1 x_2;</span>\n<span class=\"cm\">  ret x_3</span>\n<span class=\"cm\">def compute_pure._closed_4 : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := compute_pure._closed_3;</span>\n<span class=\"cm\">  let x_2 : obj := FloatArray.mk x_1;</span>\n<span class=\"cm\">  ret x_2</span>\n<span class=\"cm\">def compute_pure (x_1 : obj) : obj :=</span>\n<span class=\"cm\">  let x_2 : obj := 10000000;</span>\n<span class=\"cm\">  let x_3 : obj := 0;</span>\n<span class=\"cm\">  let x_4 : obj := 1;</span>\n<span class=\"cm\">  let x_5 : obj := compute_pure._closed_4;</span>\n<span class=\"cm\">  let x_6 : obj := Std.Range.forIn.loop._at.compute_pure._spec_1 x_2 x_3 x_2 x_4 x_5;</span>\n<span class=\"cm\">  dec x_5;</span>\n<span class=\"cm\">  let x_7 : obj := ctor_0[EStateM.Result.ok] x_6 x_1;</span>\n<span class=\"cm\">  ret x_7</span>\n<span class=\"cm\">def Std.Range.forIn.loop._at.compute_pure._spec_1._boxed (x_1 : obj) (x_2 : obj) (x_3 : obj) (x_4 : obj) (x_5 : obj) : obj :=</span>\n<span class=\"cm\">  let x_6 : obj := Std.Range.forIn.loop._at.compute_pure._spec_1 x_1 x_2 x_3 x_4 x_5;</span>\n<span class=\"cm\">  dec x_5;</span>\n<span class=\"cm\">  dec x_4;</span>\n<span class=\"cm\">  dec x_3;</span>\n<span class=\"cm\">  ret x_6</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_pure</span> <span class=\"o\">:=</span>\n  <span class=\"n\">timeit</span> <span class=\"s2\">\"pure\"</span> <span class=\"n\">compute_pure</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[result]</span>\n<span class=\"cm\">def test_pure._closed_1 : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := \"pure\";</span>\n<span class=\"cm\">  ret x_1</span>\n<span class=\"cm\">def test_pure._closed_2 : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := pap compute_pure;</span>\n<span class=\"cm\">  ret x_1</span>\n<span class=\"cm\">def test_pure (x_1 : obj) : obj :=</span>\n<span class=\"cm\">  let x_2 : obj := test_pure._closed_1;</span>\n<span class=\"cm\">  let x_3 : obj := test_pure._closed_2;</span>\n<span class=\"cm\">  let x_4 : obj := timeit ◾ x_2 x_3 x_1;</span>\n<span class=\"cm\">  dec x_2;</span>\n<span class=\"cm\">  ret x_4</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test_pure</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">pure 4.56s</span>\n<span class=\"cm\">[0.000000]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 289127352,
        "sender_full_name": "Mac",
        "timestamp": 1657492297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> if you run the above test from an executable you should get a more accurate result.</p>",
        "id": 289127420,
        "sender_full_name": "Mac",
        "timestamp": 1657492398
    },
    {
        "content": "<p>It looks like that the <code>opaqueId</code> is no longer necessary.</p>",
        "id": 289127478,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657492482
    },
    {
        "content": "<p>Hmm interesting, <code>compute_pure</code> has to really be a definition, otherwise it will get precomputed. </p>\n<p>Also, the <code>pure $ Id.run</code> seems to make it a little bit slower, 193ms vs 171ms.</p>",
        "id": 289128206,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1657493324
    }
]