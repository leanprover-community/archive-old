[
    {
        "content": "<p>how would i be able to use the fact that <code>for _ in [:n]</code> runs for exactly <code>n</code> iterations?<br>\nfor example, say i have a struct <code>(i: Nat, h: (P i))</code>, and in each iteration, i derive the next instance of the struct (with <code>i.succ</code> and <code>(P i.succ)</code>).<br>\nat the end of the loop, i have <code>(n, (P n))</code>, but how can i get a proof of <code>i = n</code>?<br>\ni guess another way of asking that question is, how can i do induction with <code>for</code> loops?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"c1\">-- how to derive `Eq i n`?</span>\n</code></pre></div>",
        "id": 296546724,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662023792
    },
    {
        "content": "<p>you can't, at least not inside the do block itself</p>",
        "id": 296616391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662046269
    },
    {
        "content": "<p>you can prove after the fact that <code>i = n</code> at that point however</p>",
        "id": 296616445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662046288
    },
    {
        "content": "<p>If you want this kind of reasoning inside the program itself you will have to write it in a different way</p>",
        "id": 296616613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662046330
    },
    {
        "content": "<p>hmm, i suspected that it might not be possible. <code>break</code> &amp; <code>continue</code> could mess things up.<br>\nby \"proving after the fact\" i assume you mean outside of the system?</p>",
        "id": 296680054,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662058417
    },
    {
        "content": "<p>no, I mean in a <code>theorem</code> after the def</p>",
        "id": 296680791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662058672
    },
    {
        "content": "<p>You can reason about do blocks, you just can't make use of that reasoning inside the definition of the do block itself because do blocks are simply typed</p>",
        "id": 296680970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662058721
    },
    {
        "content": "<p>oh, that sounds really interesting!<br>\nwould that work for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>or would i have to return <code>i</code>?<br>\ni don't even know how i'd formulate the theorem's type if <code>i</code> isn't returned. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 296766985,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662104908
    },
    {
        "content": "<p>You can only state theorems about the pure <em>value</em> of a term, which <code>i</code> in your code above does not participate in</p>",
        "id": 296767548,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662105172
    },
    {
        "content": "<p>your definition is equivalent to <code>def foo (n : Nat) := 4</code> (and you can prove this). Maybe give a slightly less trivial example where you want a loop invariant?</p>",
        "id": 296767863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662105344
    },
    {
        "content": "<p>if you returned <code>i</code> then the definition would be provably equivalent to <code>def foo (n : Nat) := n</code> so that's one way to express that the loop did in fact run <code>n</code> times</p>",
        "id": 296768011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662105412
    },
    {
        "content": "<blockquote>\n<p>provably equivalent to def foo (n : Nat) := n</p>\n</blockquote>\n<p>ok, that makes sense.<br>\ni was messing with an iterative fibonacci function. but i guess that's not possible because \"do blocks are simply typed\".</p>",
        "id": 296769270,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662105997
    },
    {
        "content": "<p>could you write some pseudocode of what you want?</p>",
        "id": 296769548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662106129
    },
    {
        "content": "<p>something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 296769717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662106214
    },
    {
        "content": "<p>something like this.<br>\nwhere termination is proved using <code>acc</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">⋅</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">}</span>         <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">⋅</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">i</span><span class=\"o\">}</span>      <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">i</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">⋅</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">i.succ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">i.succ</span>\n    <span class=\"n\">while</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n        <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n            <span class=\"bp\">&lt;</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_of_lt</span> <span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n            <span class=\"n\">b</span><span class=\"o\">,</span>\n            <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.eq_of_le_not_lt</span> <span class=\"n\">i.prop</span> <span class=\"n\">h</span>\n    <span class=\"n\">return</span> <span class=\"n\">h.rewrite</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>(this would define <code>fib_iter: Pi (n: Nat) -&gt; {Nat // ⋅ = fib n}</code>)</p>",
        "id": 296769745,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662106244
    },
    {
        "content": "<p>though i guess your example with an external proof could be cool too.</p>",
        "id": 296770330,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662106531
    },
    {
        "content": "<p>when I want to write a dependently typed program (i.e. the actual execution relies on proofs), I use local tail recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">i</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">//</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)})</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">go</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">b.2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"n\">i.2</span> <span class=\"o\">(</span><span class=\"n\">Nat.ge_of_not_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n  <span class=\"n\">go</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 296771013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662106839
    },
    {
        "content": "<p>but it is generally preferable to keep the proof separate from the program if it's not necessary for the type correctness of the program (as it is in this case)</p>",
        "id": 296771139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662106901
    },
    {
        "content": "<p>i see, that's really cool!<br>\nand i definitely see why you'd want the proof separate :D</p>",
        "id": 296771700,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662107127
    },
    {
        "content": "<p>if i wanted to do an external proof, i'd probably use <code>brec</code>, right? (to get <code>fib i = fib' i</code> for the previous two <code>i</code>)<br>\ni'm not too familiar with using lean \"practically\".</p>",
        "id": 296771830,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662107169
    },
    {
        "content": "<p>you usually don't need to use <code>brec</code> directly, since you can write recursive theorems the same way as recursive functions</p>",
        "id": 296772831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662107583
    },
    {
        "content": "<p>oh, that makes sense!</p>",
        "id": 296773774,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662108002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">fib3_eq_fib</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">fib3</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fib3</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">fib3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">fib3_eq_fib</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fib3_eq_fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>so far i have this, but i don't know how to reason about the <code>fib3</code> terms.</p>",
        "id": 296773871,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662108033
    },
    {
        "content": "<p>The for loop is not optimized for reasoning. You can do it but the terms are pretty bad</p>",
        "id": 296775768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662108849
    },
    {
        "content": "<p>i see, so it's theoretically possible but not practical?</p>",
        "id": 296776512,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1662109170
    },
    {
        "content": "<p>the requisite lemmas don't exist yet</p>",
        "id": 296776544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662109187
    },
    {
        "content": "<p>not that that's ever stopped me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fib3_eq_fib</span> <span class=\"o\">:</span> <span class=\"n\">fib3</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">fuel</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fuel</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Std.Range.forIn.loop</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Id</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ForInStep.yield</span> <span class=\"o\">⟨</span><span class=\"n\">r.2</span><span class=\"o\">,</span> <span class=\"n\">r.1</span> <span class=\"bp\">+</span> <span class=\"n\">r.2</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">fuel</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">MProd.mk</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">eq</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_antisymm</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eq</span><span class=\"o\">])</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fib3</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">,</span> <span class=\"n\">forIn</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.forIn</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 296778058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662109753
    }
]