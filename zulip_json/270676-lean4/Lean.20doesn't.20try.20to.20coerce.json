[
    {
        "content": "<p>Why doesn't Lean try to coerce the new type below to <code>Nat</code>? Is there a way to make it do this? I'm on the latest stable release.</p>\n<p>#XY: In my actual code I'm doing this for the membership relation, not addition, but I think the issue is very similar, since it's the heterogeneity which causes the issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Example</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">exam</span> <span class=\"o\">:</span> <span class=\"n\">Example</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Example</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Example.exam</span>\n</code></pre></div>",
        "id": 313886298,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1670215406
    },
    {
        "content": "<p>how should Lean know which coercion you want to have? Imagine you have coercions to <code>Nat</code> and <code>Foo</code> and <code>Foo</code> has also a <code>HAdd</code> instance with <code>Nat</code>.</p>",
        "id": 313886550,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670215676
    },
    {
        "content": "<p>the check is fine if you use <code>2 + (Example.exam : Nat)</code></p>",
        "id": 313886605,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670215710
    },
    {
        "content": "<p>Or <code>#check ((2 + Example.exam) : Nat)</code>. IIRC the rule is that anything not marked as an <code>outParam</code> needs to be known before Lean will try to find stuff.</p>",
        "id": 313886648,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670215763
    },
    {
        "content": "<p>In this case I think it works with <code>Nat _ Nat</code> because there's a default instance <code>instance [Add α] : HAdd α α α where</code></p>",
        "id": 313887449,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670216504
    },
    {
        "content": "<p>this is interesting, in Chris' version Lean really wants to have a <code>Coe Example Nat</code> instance, even though it is not really stated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Example</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">exam</span> <span class=\"o\">:</span> <span class=\"n\">Example</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Example</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAdd</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Example</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAdd</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Example</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.foo</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Example.exam</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- always 2</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Example.exam</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"c1\">-- always 3</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Example.exam</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- 2 if the Coe Example Nat instance exists, 3 otherwise</span>\n</code></pre></div>",
        "id": 313887544,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670216578
    },
    {
        "content": "<p>and even with high priority on <code>HAdd Nat Example Nat</code>, it really wants to go through the homogeneous addition</p>",
        "id": 313887868,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670216846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20doesn't.20try.20to.20coerce/near/313886550\">said</a>:</p>\n<blockquote>\n<p>how should Lean know which coercion you want to have? Imagine you have coercions to <code>Nat</code> and <code>Foo</code> and <code>Foo</code> has also a <code>HAdd</code> instance with <code>Nat</code>.</p>\n</blockquote>\n<p>My question is how do I tell lean that that's the coercion to expect, without adding type information every time?</p>",
        "id": 314091537,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1670263126
    },
    {
        "content": "<p>Going back to what you said at the beginning about your use case, you might try adding a <a href=\"https://leanprover.github.io/lean4/doc/typeclass.html?highlight=default#default-instances\">default instance</a> for your membership instance.</p>\n<p>The specific example of <code>HAdd</code> in that isolated context without the expected type is sort of an edge case, but as soon as the expected type is known (as it usually would be in context) the default instance kicks in.</p>",
        "id": 314104957,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670267131
    }
]