[
    {
        "content": "<p>When I run <code>lean --stdin</code> and press Ctrl+D (i.e. close stdin), the program does terminate or  acknowledge it in any way and just continues accepting input. Is this the expected behavior / is there something I am missing (or is this a bug I should report)? Fyi, I am running <code>lean --stdin</code> from within MSYS2 on Windows.</p>",
        "id": 242018112,
        "sender_full_name": "Mac",
        "timestamp": 1623214616
    },
    {
        "content": "<p>If it continues to receive input, then the pipe isn't actually closed and it's probably an MSYS2 bug</p>",
        "id": 242018497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623215160
    },
    {
        "content": "<p>lean doesn't have any view into that mechanism, that's entirely your execution environment</p>",
        "id": 242018558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623215216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/242018497\">said</a>:</p>\n<blockquote>\n<p>If it continues to receive input, then the pipe isn't actually closed and it's probably an MSYS2 bug</p>\n</blockquote>\n<p><strong>Ctrl+D works fine for other programs. </strong></p>\n<p>Also I have similar trouble when trying to pipe input to <code>lean</code> from Lean itself. For example, the following program just hangs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">lean</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">,</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"--stdin\"</span><span class=\"o\">]</span>\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"n\">IO.Process.Stdio.piped</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">lean.stdin.putStr</span> <span class=\"s2\">\"#exit</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">lean.stdin.flush</span>\n  <span class=\"n\">lean.wait</span>\n</code></pre></div>",
        "id": 242025979,
        "sender_full_name": "Mac",
        "timestamp": 1623223609
    },
    {
        "content": "<p>My question is, does the read block, or does it continue to read characters after EOF? Because I don't see how those characters can be anything but hallucinations if the pipe is closed</p>",
        "id": 242026539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623224028
    },
    {
        "content": "<p>like does <code>hello&lt;ctrl-d&gt;world</code> read <code>world</code>?</p>",
        "id": 242026591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623224051
    },
    {
        "content": "<p>I don't know. I don't get any output, so I can't tell. In my experience, though, when a program hangs, you can generally continue typing characters on the terminal -- they just don't do anything. So I suspect it isn't actually reading anything after the Ctrl+D.</p>",
        "id": 242026732,
        "sender_full_name": "Mac",
        "timestamp": 1623224165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/242025979\">said</a>:</p>\n<blockquote>\n<p>Also I have similar trouble when trying to pipe input to <code>lean</code> from Lean itself. For example, the following program just hangs:</p>\n</blockquote>\n<p>Flushing is not sufficient, we'll need an explicit <code>Handle.close</code> for that</p>",
        "id": 242027304,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623224598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/242027304\">said</a>:</p>\n<blockquote>\n<p>Flushing is not sufficient, we'll need an explicit <code>Handle.close</code> for that</p>\n</blockquote>\n<p>Oh, so Lean doesn't execute any code until the entire stream is finished? So, Lean has no partial steam REPL functionality? Interesting, I hadn't really considered that. </p>\n<p>Also, there is no <code>Handle.close</code> yet, right? So there is no way to write this program in Lean's current state then? I guess the shell hack I used in Lake to make this work was necessary then. And here I thought I was just doing something wrong. XD</p>",
        "id": 242031310,
        "sender_full_name": "Mac",
        "timestamp": 1623227118
    },
    {
        "content": "<p>Ah, any further operations after <code>fclose</code> are undefined behavior. The Rust way, then <a href=\"https://github.com/leanprover/lean4/pull/519/commits/da33f6fd6d9d315fbf81d7c41fdcd9332e8b71e0\">https://github.com/leanprover/lean4/pull/519/commits/da33f6fd6d9d315fbf81d7c41fdcd9332e8b71e0</a>.</p>",
        "id": 242041462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623232918
    },
    {
        "content": "<p>I also had this behavior when reading from stdin with <code>getLine</code> (no file handles there). This simple example, which I guess is a very simple kind of repl, goes into an infinite loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"input a number ≥ 0\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">while</span> <span class=\"n\">n.isNone</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">&lt;-</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getLine</span>\n    <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">input.trim.toNat</span><span class=\"bp\">?</span>\n    <span class=\"k\">if</span> <span class=\"n\">n.isNone</span> <span class=\"k\">then</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"invalid input: {input}. Must be a number ≥ 0\"</span>\n</code></pre></div>\n<p>Is this also expected behavior?</p>",
        "id": 292550058,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660039248
    },
    {
        "content": "<p>I'm confused, how would you expect Ctrl+D to exit this loop?</p>",
        "id": 292557484,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660042821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I imagine he is expecting <code>getLine</code> to error if it used when the stream is already at the end-of-input?</p>",
        "id": 292601718,
        "sender_full_name": "Mac",
        "timestamp": 1660059322
    },
    {
        "content": "<p>Alright, I suppose it's not unreasonable to expect that. But the current implementation is consistent with Rust's, which returns the newline if any and thus can return the empty string on an immediate EOF. On the other hand, Haskell does not return the newline but does throw an exception if EOF is encountered when reading the first character.</p>",
        "id": 292605780,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660060599
    },
    {
        "content": "<p>Note that Haskell's API is strictly less precise as you cannot distinguish non-empty lines terminated by newline or by EOF</p>",
        "id": 292605904,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660060643
    },
    {
        "content": "<p>A finite file is also very much not an exceptional case</p>",
        "id": 292606090,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660060692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Yeah, I don't think Lean's implementation is unreasonable (a docstring probably wouldn't hurt though).</p>",
        "id": 292608651,
        "sender_full_name": "Mac",
        "timestamp": 1660061472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/292605780\">said</a>:</p>\n<blockquote>\n<p>Alright, I suppose it's not unreasonable to expect that. But the current implementation is consistent with Rust's, which returns the newline if any and thus can return the empty string on an immediate EOF. On the other hand, Haskell does not return the newline but does throw an exception if EOF is encountered when reading the first character.</p>\n</blockquote>\n<p>FYI, there was a recent issue and big discussion about this in rust, so it might not be the best place to look for a settled answer to this question</p>",
        "id": 292614379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660063324
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/97889\">https://github.com/rust-lang/rust/issues/97889</a></p>",
        "id": 292614588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660063396
    },
    {
        "content": "<p>Some specific part of that? SIGPIPE itself is for writing, not reading.</p>",
        "id": 292615434,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660063666
    },
    {
        "content": "<p>oh that's true. The issue there is that if you do <code>rust_app | head -1</code> then a simple rust app which uses <code>println!</code> will fail when writing, contrary to the comparable C app that just naively calls <code>printf</code></p>",
        "id": 292621798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660065654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/292605780\">said</a>:</p>\n<blockquote>\n<p>Alright, I suppose it's not unreasonable to expect that. But the current implementation is consistent with Rust's, which returns the newline if any and thus can return the empty string on an immediate EOF. On the other hand, Haskell does not return the newline but does throw an exception if EOF is encountered when reading the first character.</p>\n</blockquote>\n<p>I was curious about the rust implementation so I tried to translate the example above into Rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">io</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"input a number ≥ 0\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">io</span>::<span class=\"n\">stdin</span><span class=\"p\">().</span><span class=\"n\">read_line</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">trim</span><span class=\"p\">().</span><span class=\"n\">parse</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">ok</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"invalid input: {}. Must be a number ≥ 0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This does not exhibit the same behavior, they both return the empty string, but Rust will just return an empty string once from that <code>read_line</code>. This is different from lean's implementation that keeps returning the empty string in an infinite loop after it sees this once.</p>",
        "id": 292876564,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660201273
    },
    {
        "content": "<p>I should have clarified that I was talking primarily about the infinite loop. I suspect the EOF is not being consumed somewhere. Is that expected behavior too? I agree that not exiting the loop but just returning an empty string is a perfectly reasonable behavior (although indeed not what I expected originally), but going into that infinite loop, I would argue, not as much.</p>",
        "id": 292877393,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660201776
    },
    {
        "content": "<p>More specifically, I imagine the handle <a href=\"https://github.com/leanprover/lean4/blob/dda1fd27c48746e83daa3fdd52f1dee410f7c99d/src/runtime/io.cpp#L324\">here</a> might be missing a call to <code>fgets</code>, consuming the EOF token, which seems to differ from <a href=\"https://doc.rust-lang.org/src/std/io/mod.rs.html#1900\">Rust's behavior</a></p>",
        "id": 292878027,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660202193
    },
    {
        "content": "<p>or is that branch even needed? couldn't the loop below handle that special case too by making an empty string out of a 0-length <code>out</code>? I don't want to be nitpicky about the runtime code I barely know and understand, just trying to be more concrete <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 292878516,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660202474
    },
    {
        "content": "<p>So what <em>does</em> Rust do? Does it throw an exception?</p>",
        "id": 292880934,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660203887
    },
    {
        "content": "<p>no, it returns an empty string <em>and consumes the EOF token</em></p>",
        "id": 292881630,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204219
    },
    {
        "content": "<p>...and then what? What happens in the next iteration?</p>",
        "id": 292881893,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660204349
    },
    {
        "content": "<p>it waits for input again, it does not go into an infinite loop. For the concrete code examples I posted here, Rust just does it once:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>input a number ≥ 0\ninvalid input: . Must be a number ≥ 0\n</code></pre></div>\n<p>whereas Lean loops infinitely as it continues to see the EOF token in the stream:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>input a number ≥ 0\ninvalid input: . Must be a number ≥ 0\ninvalid input: . Must be a number ≥ 0\ninvalid input: . Must be a number ≥ 0\ninvalid input: . Must be a number ≥ 0\n...\n</code></pre></div>",
        "id": 292882139,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204453
    },
    {
        "content": "<p>It waits for input from a closed file...? That doesn't exactly sound ideal either.</p>",
        "id": 292882283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660204512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/292882283\">said</a>:</p>\n<blockquote>\n<p>It waits for input from a closed file...? That doesn't exactly sound ideal either.</p>\n</blockquote>\n<p>sure, that's fair, but the point is that it's not the same behavior</p>",
        "id": 292882454,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204571
    },
    {
        "content": "<p>in the end it's your call what the behavior should be, but it's not consistent with Rust's</p>",
        "id": 292882560,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204626
    },
    {
        "content": "<p>Yeah, I can say at least that we weren't aware of this divergence</p>",
        "id": 292882572,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660204635
    },
    {
        "content": "<p>If I was designing it (which I'm not), I would consume the token the first time and close the file (stream), and if you then try to consume another token from the closed stream, then panic</p>",
        "id": 292882703,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204686
    },
    {
        "content": "<p>that sounds like the reasonable solution to both issues</p>",
        "id": 292882750,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lean.20--stdin.60.20does.20not.20respect.20Ctrl.2BD/near/292882283\">said</a>:</p>\n<blockquote>\n<p>It waits for input from a closed file...? That doesn't exactly sound ideal either.</p>\n</blockquote>\n<p>that even sounds like a potential security issue, now that I think of it :/ but Rust seems to indeed return an <code>Ok</code> there (as technically it doesn't return the read line, it returns a <code>Result</code> and writes the read line to the mutable buffer passed as input)</p>",
        "id": 292883286,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660204983
    },
    {
        "content": "<p>I'm not a POSIX guru, but I suppose there is nothing in there that says that a file is closed <em>and will never be opened again for further writes</em>, so blocking indeed seems like the correct behavior here</p>",
        "id": 292886100,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660206195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> If you could implement the change you had in mind and check that it indeed blocks, that would be great! I suppose there's no nice automated test we could do here.</p>",
        "id": 292922839,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660221990
    },
    {
        "content": "<p>I think there might be a test. Happy to give it a shot later!</p>",
        "id": 292923688,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1660222294
    },
    {
        "content": "<p>Relevant add-on PR: <a href=\"https://github.com/leanprover/lean4/pull/1503\">https://github.com/leanprover/lean4/pull/1503</a>. If you disagree with <code>isEof</code> being useless, now is the time to speak up :) .</p>",
        "id": 295263165,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661443941
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> </p>\n<p>I suppose this change/removal of <code>isEof</code> will affect chapter 2 of your book on this page: <a href=\"https://leanprover.github.io/functional_programming_in_lean/hello-world/cat.html\">https://leanprover.github.io/functional_programming_in_lean/hello-world/cat.html</a>.</p>",
        "id": 296036857,
        "sender_full_name": "Tom",
        "timestamp": 1661836720
    },
    {
        "content": "<p>Yes, I imagine so. I'll update it the next time I bump the Lean version. Thanks for the heads up!</p>",
        "id": 296036968,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1661836844
    }
]