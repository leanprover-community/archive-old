[
    {
        "content": "<p>Baby steps here ... </p>\n<p>Why the following type checks <code>def A : Type := Nat</code>, but this does not: <code>def A.{u} : Type u := Nat</code>?<br>\nThis is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Nat</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The type of <code>Nat</code> is <code>Type</code>, which means <code>Type 0</code> i.e. u = 0.</p>\n<p>Note to self: It interesting that I am also realizing that <code>autoImplicit true</code> gives me a false sense of /security/ when learning more complex type definitions.</p>",
        "id": 286803925,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655735760
    },
    {
        "content": "<p>Explicitly named universes are assumed to be fixed parameters, not unification variables</p>",
        "id": 286804322,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655735946
    },
    {
        "content": "<p>Thanks. I now see how silly my example is and the fact that I was expecting Lean to infer that u is equal to 0 at all times.</p>\n<p>And in <code>def id1.{u} (α : Type u) (x : α) : α := x</code>, <code>u</code> is a (fixed) parameter filled in by the caller as in <code>#check id1 Nat</code>.</p>\n<p>It also seems that the error msg is a round about way of saying this in this specific case.</p>",
        "id": 286806400,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655736860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 286806410,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655736866
    },
    {
        "content": "<p>If you ignore the stuff after the <code>:</code>s, then the error message is quite straightforward.</p>",
        "id": 286811818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655739544
    }
]