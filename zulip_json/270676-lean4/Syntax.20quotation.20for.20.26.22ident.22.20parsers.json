[
    {
        "content": "<p>What is the syntax quotation incantation that'll make this example work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">debug</span>\n\n<span class=\"n\">syntax</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">debug</span>\n<span class=\"n\">syntax</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">debug</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseDebug</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">debug</span><span class=\"bp\">|</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">debug</span><span class=\"bp\">|</span><span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>The issue is with the <code>syntax &amp;\"foo\"</code>. If you replace <code>&amp;\"foo\"</code> with <code>\"foo\"</code> (and the same for <code>bar</code>), the example works.</p>",
        "id": 245711558,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626107289
    },
    {
        "content": "<p>Why do you want to use <code>&amp;</code>? It's used to specify <a href=\"https://github.com/leanprover/lean4/blob/7dc3e72bcb079f552fdce5aa5657ace9857283e2/tests/lean/nonReserved.lean\">non-reserved</a> tokens, but a non-reserved token must generally follow a reserved one. Otherwise it's ambiguous whether you're referring to <code>foo</code>-the-syntax or <code>foo</code>-the-symbol.</p>",
        "id": 245717560,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626110173
    },
    {
        "content": "<p>I have a grammar with a lot of keywords and I don't want to reserve them all. I didn't know about this restriction on non-reserved tokens, but my grammar works fine with them when I write parsers without syntax quotations. I just wanted to refactor a bit so the code is less horrible.</p>",
        "id": 245719650,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626111142
    },
    {
        "content": "<p>(I don't know if this restriction is intended, I just found it empirically and it seems to make sense because of the ambiguity.) Can you write something like this, which does work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"far\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">debug</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"far\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">debug</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseDebug</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">debug</span><span class=\"bp\">|</span><span class=\"n\">far</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">debug</span><span class=\"bp\">|</span><span class=\"n\">far</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 245720600,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626111622
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/blob/22c2f146c96ecaeb8ed44825292b2a2d56407051/src/Lean/Parser/Basic.lean#L1565-L1597\">https://github.com/leanprover/lean4/blob/22c2f146c96ecaeb8ed44825292b2a2d56407051/src/Lean/Parser/Basic.lean#L1565-L1597</a> - this is exposed as an optional parameter to <code>registerParserCategory</code>, but not <code>declare_syntax_cat</code> (yet).</p>",
        "id": 245720907,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626111768
    },
    {
        "content": "<p>Ah so whether this works or not is a property of the syntax category (and indeed the example works with <code>tactic</code> instead of <code>debug</code>). Interesting. That means I can hack the system so the <code>debug</code> category does this too. Thanks for the demystification! Though I might still follow Wojciech's suggestion to limit the hacking.</p>",
        "id": 245724119,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626113142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20quotation.20for.20.26.22ident.22.20parsers/near/245720907\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://github.com/leanprover/lean4/blob/22c2f146c96ecaeb8ed44825292b2a2d56407051/src/Lean/Parser/Basic.lean#L1565-L1597\">https://github.com/leanprover/lean4/blob/22c2f146c96ecaeb8ed44825292b2a2d56407051/src/Lean/Parser/Basic.lean#L1565-L1597</a> - this is exposed as an optional parameter to <code>registerParserCategory</code>, but not <code>declare_syntax_cat</code> (yet).</p>\n</blockquote>\n<p>This reminds me of a question I had. I know that tactics use the non-default behavior and terms use default (because otherwise there would be ambiguity between identifiers and keywords). But I am curious as to why commands also use the default behavior. It seems like they could safely use the non-default (i.e., <code>symbol</code>) behavior (as afaik there is no <code>ident</code> parser for commands to disambiguate with). This would have the nice advantage of making this like <code>section</code> , <code>constant</code> ,<code>private</code>, <code>protected</code>, etc. no longer be keywords, which can be quite useful (especially, for example, <code>section</code> as it is quite a common word to use for other reasons).</p>",
        "id": 245735772,
        "sender_full_name": "Mac",
        "timestamp": 1626118024
    },
    {
        "content": "<p>In lean 3 at least, command keywords being keywords is really important, because they are used by the parser to reset after exprs with ambiguous ending (less of a problem given whitespace-sensitivity, but it still shows up if you end a definition with <code>def foo := x +</code> for example), or other malformed syntax. Since there aren't any top level separators in lean files besides possibly newlines, the only reliable marker that the previous command is done is the command keyword for the next command.</p>",
        "id": 245741196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626120610
    },
    {
        "content": "<p>lean 3 had the <code>.</code> marker to end a definition with an ambiguous ending, but lean 4 doesn't. I use <code>.</code> in lean 3 a lot when writing unfinished definitions to ensure that garbage below the cursor doesn't interact with the definition I'm writing, and I've been using <code>def</code> for this purpose in lean 4, which is much noisier but works in a pinch</p>",
        "id": 245741540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626120796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20quotation.20for.20.26.22ident.22.20parsers/near/245741196\">said</a>:</p>\n<blockquote>\n<p>In lean 3 at least, command keywords being keywords is really important, because they are used by the parser to reset after exprs with ambiguous ending (less of a problem given whitespace-sensitivity, but it still shows up if you end a definition with <code>def foo := x +</code> for example), or other malformed syntax.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Syntax.20quotation.20for.20.26.22ident.22.20parsers/near/245741540\">said</a>:</p>\n<blockquote>\n<p>lean 3 had the <code>.</code> marker to end a definition with an ambiguous ending, but lean 4 doesn't. </p>\n</blockquote>\n<p>Ah, well that at least explains it. However, I personally would prefer having one keyword to terminate ambiguous syntax (like the <code>.</code>) than having whole suite of keywords for commands (it would also make defining custom commands more convenient as they would no longer need to eat up identifiers for keywords). Especially considering, as you mentioned, whitespace sensitivity resolves the ambiguity in many a case and thus this issue appears much less often in Lean 4.</p>",
        "id": 245748569,
        "sender_full_name": "Mac",
        "timestamp": 1626123725
    }
]