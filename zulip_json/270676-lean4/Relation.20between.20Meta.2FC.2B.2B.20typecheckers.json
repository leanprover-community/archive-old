[
    {
        "content": "<p>What is the relation between the <code>Lean.Meta</code> typechecking functionality, and the corresponding code in the kernel? For example, there is <a href=\"https://github.com/leanprover/lean4/blob/13a49da4967e24376e10c4400bdfe637a6360016/src/Lean/Meta/ExprDefEq.lean#L1655\"><code>isExprDefEq</code></a> and <a href=\"https://github.com/leanprover/lean4/blob/13a49da4967e24376e10c4400bdfe637a6360016/src/kernel/type_checker.cpp#L694\"><code>is_def_eq</code></a> which seem to be totally separate. Can we expect them to do exactly the same thing?</p>",
        "id": 288596513,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657058014
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"436006\">@Gabriel Barreto</span></p>",
        "id": 288596608,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657058075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Relation.20between.20Meta.2FC.2B.2B.20typecheckers/near/288596513\">said</a>:</p>\n<blockquote>\n<p>What is the relation between the <code>Lean.Meta</code> typechecking functionality, and the corresponding code in the kernel? For example, there is <a href=\"https://github.com/leanprover/lean4/blob/13a49da4967e24376e10c4400bdfe637a6360016/src/Lean/Meta/ExprDefEq.lean#L1655\"><code>isExprDefEq</code></a> and <a href=\"https://github.com/leanprover/lean4/blob/13a49da4967e24376e10c4400bdfe637a6360016/src/kernel/type_checker.cpp#L694\"><code>is_def_eq</code></a> which seem to be totally separate. Can we expect them to do exactly the same thing?</p>\n</blockquote>\n<p>There is one big difference: the kernel has no support for metavariables. It expects that all of them have been eliminated by the frontend.</p>",
        "id": 288597918,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657058935
    },
    {
        "content": "<p>The <code>Lean.Meta</code> version also supports features that are not relevant in the kernel. Example: smart unfolding.</p>",
        "id": 288598033,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657059006
    },
    {
        "content": "<p>The heuristics are also slightly different, and the kernel does not take attributes such as <code>[reducible]</code> into account.</p>",
        "id": 288598546,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657059374
    },
    {
        "content": "<p>Which are the contexts of use for each of them?</p>",
        "id": 288598917,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657059642
    },
    {
        "content": "<p>The kernel is used to type-check fully elaborated declarations. We say it is part of the \"trusted code base\". Suppose one implements a buggy tactic that produces an invalid proof. The kernel will catch the mistake during type checking.<br>\n<code>Lean.Meta</code> is used in to implement the frontend: tactics, type inference, type class resolution, etc. The whole elaborator is based on <code>Lean.Meta</code>.</p>",
        "id": 288599869,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657060407
    },
    {
        "content": "<p>Thank you! Then the one worry I would have about discrepancies is if there were terms (that can go into the kernel, so metavariable-less, etc) which the <code>Meta</code> version accepts but the kernel rejects, or alternatively ones which <code>Meta</code> complains about but the kernel would be happy with.</p>",
        "id": 288602212,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1657062234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>  if I may, I have a  follow up question: what is the type checking algorithm used by the kernel? is it normalization-by-evaluation flavoured? If it is not NbE, what is the algorithm?</p>",
        "id": 288602451,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1657062410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Relation.20between.20Meta.2FC.2B.2B.20typecheckers/near/288602212\">said</a>:</p>\n<blockquote>\n<p>Thank you! Then the one worry I would have about discrepancies is if there were terms (that can go into the kernel, so metavariable-less, etc) which the <code>Meta</code> version accepts but the kernel rejects, or alternatively ones which <code>Meta</code> complains about but the kernel would be happy with.</p>\n</blockquote>\n<p>This is a valid concern. If the kernel does not accept something created by <code>Meta</code>, we treat it as a bug. The other direction is harder to observe, at least, as a regular user.</p>",
        "id": 288605359,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657064733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Relation.20between.20Meta.2FC.2B.2B.20typecheckers/near/288602451\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span>  if I may, I have a  follow up question: what is the type checking algorithm used by the kernel? is it normalization-by-evaluation flavoured? If it is not NbE, what is the algorithm?</p>\n</blockquote>\n<p>The kernel type checker is very simple. There isn't any fancy algorithm there. It unfolds things lazily and uses a cache.  That being said, we want to implement an efficient term normalizer in the future. The goal is to provide better support for proofs by reflection.</p>",
        "id": 288605505,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657064874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Relation.20between.20Meta.2FC.2B.2B.20typecheckers/near/288602212\">said</a>:</p>\n<blockquote>\n<p>terms (that can go into the kernel, so metavariable-less, etc) which the <code>Meta</code> version accepts but the kernel rejects</p>\n</blockquote>\n<p>If you ever see an error message that begins with <code>(kernel)</code>, this is what has happened. And, as Leo mentioned, it should ideally be reported as a bug.</p>",
        "id": 288612746,
        "sender_full_name": "Mac",
        "timestamp": 1657071888
    }
]