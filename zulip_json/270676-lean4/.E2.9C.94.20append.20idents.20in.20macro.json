[
    {
        "content": "<p>Is there a way to append idents/names in a macro (especially in a quotation)? I couldn't find any instances of this being done in the lean4 source.</p>\n<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"genDeclars\"</span> <span class=\"n\">pfx</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">pfx.sfx1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n     <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">pfx.sfx2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261151204,
        "sender_full_name": "Chris B",
        "timestamp": 1636646358
    },
    {
        "content": "<p>Something like <code>$(mkIdent (pfx.getId ++ `sfx1))</code> should work</p>",
        "id": 261151757,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636646568
    },
    {
        "content": "<p>It sure does, thank you. I'll put that in the docs.</p>",
        "id": 261153431,
        "sender_full_name": "Chris B",
        "timestamp": 1636647391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> has marked this topic as resolved.</p>",
        "id": 261153446,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636647398
    },
    {
        "content": "<p>Any reason not to move these docs upstream into the Lean 4 repo? We now have a tutorial category... it just hasn't quite been formalized and linked to yet.</p>",
        "id": 261155329,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636648257
    },
    {
        "content": "<p>There's just <a href=\"https://github.com/ammkrn/mathlib4/blob/macro_guide/docs/macro_guide.md\">this one</a> so far. I forgot to mention the <code>(%$pos)</code> thing in there, but if you want it upstream I'll add that and make a PR. The other one I'm trying to put together is a cookbook/\"how do I do X\" kind of doc. I'm still putting examples together, but I'll run it by you when I get enough.</p>",
        "id": 261165221,
        "sender_full_name": "Chris B",
        "timestamp": 1636653041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> a quick comment on that doc:</p>\n<blockquote>\n<p>In the above example, we're still using the sugar Lean provides for creating quotations, as it saves us a lot of work. It is possible to forego the sugar altogether.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myExfalsoParser</span><span class=\"o\">)</span> <span class=\"s2\">\"myExfalso\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[macro myExfalsoParser]</span> <span class=\"kd\">def</span> <span class=\"n\">implMyExfalso</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadRef.mkInfoFromRefPos</span>\n    <span class=\"k\">let</span> <span class=\"n\">scp</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.getCurrMacroScope</span>\n    <span class=\"k\">let</span> <span class=\"n\">mainModule</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.getMainModule</span>\n    <span class=\"n\">pure</span>\n        <span class=\"o\">(</span><span class=\"n\">Lean.Syntax.node</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.apply</span>\n          <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Syntax.atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"apply\"</span><span class=\"o\">,</span>\n            <span class=\"n\">Lean.Syntax.ident</span> <span class=\"n\">info</span> <span class=\"o\">(</span><span class=\"n\">String.toSubstring</span> <span class=\"s2\">\"False.elim\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lean.addMacroScope</span> <span class=\"n\">mainModule</span> <span class=\"bp\">`</span><span class=\"n\">False.elim</span> <span class=\"n\">scp</span><span class=\"o\">)</span>\n              <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">False.elim</span><span class=\"o\">,</span> <span class=\"o\">[])]])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">myExfalso</span>\n<span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Makes writing the syntax directly look much more horrible than it  actually is (and it is also out of date due to the change in <code>Syntax.node</code>'s signature). An equivalent simpler example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Syntax</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[macro myExfalsoParser]</span> <span class=\"kd\">def</span> <span class=\"n\">implMyExfalso</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkNode</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.apply</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAtomFrom</span> <span class=\"n\">stx</span> <span class=\"s2\">\"apply\"</span><span class=\"o\">,</span> <span class=\"n\">mkCIdentFrom</span> <span class=\"n\">stx</span> <span class=\"bp\">``</span><span class=\"n\">False.elim</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 261171626,
        "sender_full_name": "Mac",
        "timestamp": 1636656814
    },
    {
        "content": "<p>Thanks, I'll update it with a note.</p>",
        "id": 261187116,
        "sender_full_name": "Chris B",
        "timestamp": 1636666601
    }
]