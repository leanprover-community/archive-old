[
    {
        "content": "<p>Is there any way to generate inductive definitions (and matches on those definitions) in a macro?<br>\nI'd like to do something like write a macro that creates an \"enumerable\" type with a list of identifiers, and the implements ToJson/FromJson using the string version of those identifiers</p>",
        "id": 230906439,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616088741
    },
    {
        "content": "<p>You can create arbitrary syntax with a macro, including commands</p>",
        "id": 230907246,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616088998
    },
    {
        "content": "<p>So here was my first try to do just that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">identArr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"gen_enum_defs%\"</span> <span class=\"n\">ident</span> <span class=\"n\">identArr</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"c1\">-- TODO</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"gen_enum_json%\"</span> <span class=\"n\">ident</span> <span class=\"n\">identArr</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_enum_json</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"c1\">--set_option trace.Meta.debug true in</span>\n      <span class=\"k\">let</span> <span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">ids</span>\n      <span class=\"k\">if</span> <span class=\"n\">ids.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">mkNullNode</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"s2\">\"$(quote ids[0])\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">ids</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"bp\">%</span><span class=\"n\">gen_enum_json</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">ids</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]),</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"c1\">--syntax \"gen_enum\" identArr : command</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"gen_enum\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">identArr</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"n\">gen_enum_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">ids</span>\n    <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span>\n      <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">j.getStr</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">gen_enum_json</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I'm getting some errors on the <code>|</code> which I think means it was invalid syntax</p>",
        "id": 230907513,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616089089
    },
    {
        "content": "<p>You cannot use macros in that position, you have to insert the syntax directly using quotations. There is no documentation on complex quotations yet (oops), but you can find examples in Lean such as <a href=\"https://github.com/leanprover/lean4/blob/1af02dcaca3ca0665a37254aaa30ea196ec77c90/src/Lean/Elab/Quotation.lean#L457\">https://github.com/leanprover/lean4/blob/1af02dcaca3ca0665a37254aaa30ea196ec77c90/src/Lean/Elab/Quotation.lean#L457</a></p>",
        "id": 230908497,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616089487
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/lt2021/slides/sebastian-lean4-parsers-macros.pdf#page=23\">https://leanprover-community.github.io/lt2021/slides/sebastian-lean4-parsers-macros.pdf#page=23</a></p>",
        "id": 230908997,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616089664
    },
    {
        "content": "<p>I see, so if I had something like <code>$[| $strs =&gt; $idents]*</code> it would expand correctly into multiple patterns?</p>",
        "id": 230909403,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616089804
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 230909508,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616089833
    },
    {
        "content": "<p>Ok, then starting from square 1, if I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">identArr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"gen_enum\"</span> <span class=\"n\">ident</span> <span class=\"n\">identArr</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_enum</span> <span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get <code>expected )</code> on the  second <code>$</code></p>",
        "id": 230911209,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616090457
    },
    {
        "content": "<p>Here is something that is mimicking the inductive definition more somewhat (and your example)  but it's having trouble on the first <code>$[| $ids]*</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" where \"</span> <span class=\"o\">(</span><span class=\"s2\">\"|\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">ids</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230913896,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616091405
    },
    {
        "content": "<p>Ah, that looks like an issue with <code>(stx)</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">myMatchAlt</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" where \"</span> <span class=\"n\">myMatchAlt</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230930202,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616098421
    },
    {
        "content": "<p>Ok, so I've tried to add it the <code>FromJson</code> and I'm getting a weird <code> parenthesize: uncaught backtrack exception.</code><br>\nThe code thus far is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">myMatchAlt</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" where \"</span> <span class=\"n\">myMatchAlt</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n      <span class=\"c1\">-- remove `</span>\n      <span class=\"k\">let</span> <span class=\"n\">matchPatterns</span> <span class=\"o\">:=</span> <span class=\"n\">ids.mapSepElems</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">quote</span> <span class=\"o\">((</span><span class=\"n\">toString</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">fromJson</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId.appendAfter</span> <span class=\"s2\">\"FromJson\"</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n        <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"n\">fromJson</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span>\n          <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">j.getStr</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n            <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">matchPatterns</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span><span class=\"n\">ids</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n            <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n        <span class=\"o\">)</span>\n</code></pre></div>\n<p>e.g. <code>enum E where</code> fails with the backtrace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">parenthesize</span><span class=\"o\">:</span> <span class=\"n\">uncaught</span> <span class=\"n\">backtrack</span> <span class=\"n\">exception.</span> <span class=\"n\">Falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">raw</span> <span class=\"n\">printer.</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">Command.declaration</span>\n   <span class=\"o\">(</span><span class=\"n\">Command.declModifiers</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[])</span>\n   <span class=\"o\">(</span><span class=\"n\">Command.instance</span>\n    <span class=\"o\">(</span><span class=\"n\">Term.attrKind</span> <span class=\"o\">[])</span>\n    <span class=\"s2\">\"instance\"</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">EFromJson</span><span class=\"o\">]</span>\n    <span class=\"o\">[]</span>\n    <span class=\"o\">(</span><span class=\"n\">Command.declSig</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Term.typeSpec</span> <span class=\"s2\">\":\"</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">FromJson._</span><span class=\"bp\">@.</span><span class=\"n\">Santorini.RPC._hyg.2104</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">E</span><span class=\"o\">])))</span>\n    <span class=\"o\">(</span><span class=\"n\">Term.whereDecls</span>\n     <span class=\"s2\">\"where\"</span>\n     <span class=\"o\">[[(</span><span class=\"n\">Term.letRecDecl</span>\n        <span class=\"o\">[]</span>\n        <span class=\"o\">[]</span>\n        <span class=\"o\">(</span><span class=\"n\">Term.letDecl</span>\n         <span class=\"o\">(</span><span class=\"n\">Term.letIdDecl</span>\n          <span class=\"bp\">`</span><span class=\"n\">fromJson</span><span class=\"bp\">?.</span><span class=\"n\">_</span><span class=\"bp\">@.</span><span class=\"n\">Santorini.RPC._hyg.2104</span>\n          <span class=\"o\">[(</span><span class=\"n\">Term.simpleBinder</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">j._</span><span class=\"bp\">@.</span><span class=\"n\">Santorini.RPC._hyg.2104</span><span class=\"o\">]</span> <span class=\"o\">[])]</span>\n          <span class=\"o\">[]</span>\n          <span class=\"s2\">\":=\"</span>\n          <span class=\"o\">(</span><span class=\"n\">Term.do</span>\n           <span class=\"s2\">\"do\"</span>\n           <span class=\"o\">(</span><span class=\"n\">Term.doSeqIndent</span>\n            <span class=\"o\">[(</span><span class=\"n\">Term.doSeqItem</span>\n              <span class=\"o\">(</span><span class=\"n\">Term.doMatch</span>\n               <span class=\"s2\">\"match\"</span>\n               <span class=\"o\">[(</span><span class=\"n\">Term.matchDiscr</span>\n                 <span class=\"o\">[]</span>\n                 <span class=\"o\">(</span><span class=\"n\">Term.paren</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">[(</span><span class=\"n\">Term.liftMethod</span> <span class=\"s2\">\"&lt;-\"</span> <span class=\"bp\">`</span><span class=\"n\">j.getStr</span><span class=\"bp\">?.</span><span class=\"n\">_</span><span class=\"bp\">@.</span><span class=\"n\">Santorini.RPC._hyg.2104</span><span class=\"o\">)</span> <span class=\"o\">[]]</span> <span class=\"s2\">\")\"</span><span class=\"o\">))]</span>\n               <span class=\"o\">[]</span>\n               <span class=\"s2\">\"with\"</span>\n               <span class=\"o\">(</span><span class=\"n\">Term.matchAlts</span>\n                <span class=\"o\">[(</span><span class=\"n\">Term.matchAlt</span>\n                  <span class=\"s2\">\"|\"</span>\n                  <span class=\"o\">[(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)]</span>\n                  <span class=\"s2\">\"=&gt;\"</span>\n                  <span class=\"o\">(</span><span class=\"n\">Term.doSeqIndent</span> <span class=\"o\">[(</span><span class=\"n\">Term.doSeqItem</span> <span class=\"o\">(</span><span class=\"n\">Term.doExpr</span> <span class=\"bp\">`</span><span class=\"n\">failure._</span><span class=\"bp\">@.</span><span class=\"n\">Santorini.RPC._hyg.2104</span><span class=\"o\">)</span> <span class=\"o\">[])]))]))</span>\n              <span class=\"o\">[])])))))</span>\n       <span class=\"o\">[]]])))</span>\n</code></pre></div>",
        "id": 230941132,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616103186
    },
    {
        "content": "<p>Yes, the pretty printer often gives up when given invalid syntax. But that can't be the actual error message.</p>",
        "id": 230942228,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616103772
    },
    {
        "content": "<p>Ah, then the actual error message is <code>unexpected syntax</code></p>",
        "id": 230942939,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616104171
    },
    {
        "content": "<p>Try <code>$matchPatterns:term</code>. A general <code>matchAlt</code> has a comma-separated list of terms (patterns).</p>",
        "id": 230943093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616104244
    },
    {
        "content": "<p>well I don't think that is causing this particular error beacuse in <code>enum E where</code> there should only be the <code>_</code> pattern (I think this is shown in the raw printer)</p>",
        "id": 230943325,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616104384
    },
    {
        "content": "<p>Ah, right. Then I'm not sure. Debugging syntax trees can be tough, unfortunately.</p>",
        "id": 230943768,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616104627
    },
    {
        "content": "<p>It can help writing out the expected output and looking at its structure with <code>set_option trace.Elab.command true in ...</code></p>",
        "id": 230944010,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616104753
    },
    {
        "content": "<p>How should I write <code>.</code> eliminated terms? i.e. if I have two names $a and $b$ is there a function that gives $a.$b or can i just write it like that?</p>",
        "id": 230961619,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616116628
    },
    {
        "content": "<p>That only works for projections. Otherwise you need to concatenate them on the <code>Name</code> level</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"bp\">`</span><span class=\"n\">b</span>\n</code></pre></div>",
        "id": 230989761,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616142661
    },
    {
        "content": "<p>Ahh ok that makes sense. Is there any way to get the <code>Name</code>s themselves from <code>Syntax</code> variables?</p>",
        "id": 231058070,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616174147
    },
    {
        "content": "<p>If it's an <code>ident</code>, <code>Syntax.getId</code>. <code>Syntax.mkIdent</code> is the reverse.</p>",
        "id": 231058391,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616174266
    },
    {
        "content": "<p>Thank you for working with me so much!<br>\nIs there some way to print trace messages myself?</p>",
        "id": 231060971,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616175213
    },
    {
        "content": "<p>OK this is somewhat working now! Here's my code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">myMatchAlt</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" where \"</span> <span class=\"n\">myMatchAlt</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">matchPatterns</span> <span class=\"o\">:=</span> <span class=\"n\">ids.map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">quote</span> <span class=\"o\">((</span><span class=\"n\">toString</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">retPatterns</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;-</span><span class=\"o\">(</span><span class=\"n\">ids.mapM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">MacroM</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">$</span> <span class=\"n\">id.getId</span> <span class=\"bp\">++</span> <span class=\"n\">i.getId</span><span class=\"o\">)))</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n        <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span>\n          <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">j.getStr</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n            <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">matchPatterns</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">retPatterns</span><span class=\"o\">)</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n            <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n        <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToJson</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span>\n          <span class=\"n\">toJson</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n            <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">retPatterns</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">matchPatterns</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n      <span class=\"o\">)</span>\n</code></pre></div>\n<p>there were two interesting things... First, If I try creating an identifier to name the <code>instance</code> declarations it fails and I can't quite figure out why. Second, this was failing if I had more than one injection (e.g. <code>enum E where | E1|E2</code>) because for some reason <code>mapSepElems</code> and <code>mapSepElemsM</code> only mapped the first element and none of the others.... I had to change to <code>map</code> and <code>mapM</code></p>",
        "id": 231102026,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616195357
    },
    {
        "content": "<p>Nice!<br>\n<span class=\"user-mention silent\" data-user-id=\"382349\">Calvin Lee</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20definition.20in.20macros/near/231102026\">said</a>:</p>\n<blockquote>\n<p>First, If I try creating an identifier to name the <code>instance</code> declarations it fails and I can't quite figure out why.</p>\n</blockquote>\n<p>Did you use <code>:ident</code>?</p>\n<blockquote>\n<p>Second, this was failing if I had more than one injection (e.g. <code>enum E where | E1|E2</code>) because for some reason <code>mapSepElems</code> and <code>mapSepElemsM</code> only mapped the first element and none of the others.... I had to change to <code>map</code> and <code>mapM</code></p>\n</blockquote>\n<p><code>mapSepElems</code> is for syntax created by <code>sepBy</code> (i.e. <code>,*</code> etc), not <code>many</code> (i.e. <code>*</code>)</p>",
        "id": 231133874,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616231332
    },
    {
        "content": "<p>Btw, it looks like you could have avoided the name concatenation with a <code>open $id</code></p>",
        "id": 231133892,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616231363
    },
    {
        "content": "<blockquote>\n<p>did you try using <code>:ident</code></p>\n</blockquote>\n<p>oh I think that actually did it!<br>\nAlso I did try <code>open $id in...</code> but it didn't seem to work, oh well</p>",
        "id": 231155750,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616257493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Inductive.20definition.20in.20macros/near/230930202\">said</a>:</p>\n<blockquote>\n<p>Ah, that looks like an issue with <code>(stx)</code>...</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">myMatchAlt</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" where \"</span> <span class=\"n\">myMatchAlt</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is fixed now btw</p>",
        "id": 231159067,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616261090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> Nice! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> This is an awesome macro!  I have thought several times about implementing something similar but have felt too busy or come up with other excuses, haha --- there's some embarrassing boilerplate in our code right now that basically manually creates an \"enum\" from an inductive type with all nullary constructors by mapping each constructor to a Nat to I can pretend they're an ordered/enumerable/etc type xD</p>",
        "id": 231173429,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1616276534
    }
]