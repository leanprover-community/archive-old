[
    {
        "content": "<p>Is it possible to get Lean to fill in implicit arguments using matching-type terms in the current context? In Coq I would often do this:</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Record</span> <span class=\"n\">PointedType</span> <span class=\"o\">:=</span> <span class=\"n\">mkPointedType</span> <span class=\"o\">{</span>\n  <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">;</span>\n  <span class=\"n\">mkT</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"o\">}.</span>\n\n<span class=\"kn\">Inductive</span> <span class=\"n\">PointedTypeVal</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">.(</span><span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">PointedTypeVal</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Definition</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PointedTypeVal</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">P</span><span class=\"o\">.(</span><span class=\"n\">mkT</span><span class=\"o\">).</span>\n\n<span class=\"c\">(* or *)</span>\n\n<span class=\"kn\">Variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">).</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">PointedTypeVal</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"n\">P</span><span class=\"o\">.(</span><span class=\"n\">mkT</span><span class=\"o\">).</span>\n</code></pre></div>\n<p>In Lean it doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PointedType</span> <span class=\"n\">where</span>\n  <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">mkT</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">PointedTypeVal</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">P.T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">PointedTypeVal</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PointedTypeVal</span> <span class=\"o\">:=</span>  <span class=\"n\">PointedTypeVal.mk</span> <span class=\"n\">A.mkT</span>\n<span class=\"c1\">-- error (in the return type specification):</span>\n<span class=\"c1\">-- @PointedTypeVal : {P : PointedType} → Type</span>\n<span class=\"c1\">-- don't know how to synthesize implicit argument</span>\n<span class=\"c1\">--  @PointedTypeVal (@?m.649 A)</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- A : PointedType</span>\n<span class=\"c1\">-- ⊢ PointedType</span>\n<span class=\"c1\">-- when the resulting type of a declaration is explicitly provided, all holes (e.g., `_`) in the header are resolved before the declaration body is processed</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">PointedTypeVal</span> <span class=\"o\">:=</span>  <span class=\"n\">PointedTypeVal.mk</span> <span class=\"n\">A.mkT</span>\n<span class=\"c1\">-- same error</span>\n</code></pre></div>",
        "id": 273726273,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1646176418
    },
    {
        "content": "<p>It looks like the behavior has changed from lean 3 here. In general, lean definitely will use unification to fill implicit arguments, and in lean 3, it will do what you are hoping. In lean 4, the type of the declaration is elaborated separately from the body when it is provided, meaning that it will only infer the type if it could also infer the type when the body is <code>sorry</code>. However you can leave the type off completely, in which case it will use the body to infer the type, so you can write this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this works</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">PointedTypeVal.mk</span> <span class=\"n\">A.mkT</span>\n\n<span class=\"c1\">-- also this</span>\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PointedTypeVal.mk</span> <span class=\"n\">A.mkT</span> <span class=\"o\">:</span> <span class=\"n\">PointedTypeVal</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">PointedTypeVal</span> <span class=\"k\">from</span> <span class=\"n\">PointedTypeVal.mk</span> <span class=\"n\">A.mkT</span>\n</code></pre></div>",
        "id": 273729527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646178233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130439\">@Zygimantas Straznickas</span></p>",
        "id": 273729650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646178304
    },
    {
        "content": "<p>Thanks, that works!</p>",
        "id": 273729770,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1646178378
    },
    {
        "content": "<p>Actually, is there a similar workaround I can use when providing argument types? E.g. making <code>def test (v : PointedTypeVal) := v</code> work?</p>",
        "id": 273731140,
        "sender_full_name": "Zygimantas Straznickas",
        "timestamp": 1646179177
    },
    {
        "content": "<p><code>def test := fun (v : PointedTypeVal) =&gt; v</code></p>",
        "id": 273731445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646179277
    },
    {
        "content": "<p>not that this will work, because that body won't help to infer the argument anyway</p>",
        "id": 273731545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646179336
    }
]