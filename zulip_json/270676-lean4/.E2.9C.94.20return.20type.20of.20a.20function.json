[
    {
        "content": "<p>Suppose I have this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">qq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>And then I pass the <code>Float.sqrt</code> <code>Expr</code> to <code>qq</code>, how can I make <code>qq</code> print <code>\"Float\"</code>?</p>",
        "id": 265759091,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640139889
    },
    {
        "content": "<p><code>z</code> there is a <code>Name</code>, right? so <code>Float</code> would be <code>z.getPrefix</code></p>",
        "id": 265759175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640139969
    },
    {
        "content": "<p>or are you interested in looking up the type of <code>Float.sqrt</code> and finding the return type</p>",
        "id": 265759208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640140019
    },
    {
        "content": "<p>Yeah,  second option. Thanks. I didn't explain myself properly</p>",
        "id": 265759228,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640140044
    },
    {
        "content": "<p><code>e</code> can be an <code>Expr.const</code> of type <code>t1 -&gt; t2 -&gt; t3 -&gt; Int</code>. I'd like to print <code>\"Int\"</code> in this case</p>",
        "id": 265759290,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640140103
    },
    {
        "content": "<p>To get the type, you can use <code>getConstInfo</code></p>",
        "id": 265759298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640140123
    },
    {
        "content": "<p>and <code>forallTelescope</code> will strip off the arguments from the type</p>",
        "id": 265759311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640140163
    },
    {
        "content": "<p>I got an expression that, when printed, looks like this:<br>\n<code>arbitrary.{1} (Float -&gt; Float) (instInhabitedDepArrow.{1 1} Float (fun (a._@.Init.Data.Float._hyg.666 : Float) =&gt; Float) (fun (a : Float) =&gt; instInhabitedFloat))</code></p>",
        "id": 265759968,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640140952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">qq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">z</span>\n    <span class=\"k\">match</span> <span class=\"n\">info</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">i.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">i.value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 265759991,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640140992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">qq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ci</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">z</span>\n    <span class=\"n\">Meta.forallTelescope</span> <span class=\"n\">ci.type</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">qq</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Float.sqrt</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Float</span>\n</code></pre></div>",
        "id": 265760000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640141010
    },
    {
        "content": "<p>You are printing the value of the constant instead of the type</p>",
        "id": 265760009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640141036
    },
    {
        "content": "<p>I see, thank you very much!!</p>",
        "id": 265760082,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640141096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 265760087,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640141101
    }
]