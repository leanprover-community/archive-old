[
    {
        "content": "<p>I reported <a href=\"https://github.com/leanprover/lake/issues/26\">an issue</a> with lake not rebuilding after modifying <code>lean-toolchain</code>, but unfortunately it doesn't reproduce for <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>. I'm wondering if it could be an OS issue. Is there someone with a macos system who could test it out for us?</p>",
        "id": 261096361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636609855
    },
    {
        "content": "<p>On any machine with <code>elan</code> you should be able to:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git clone https://github.com/leanprover-community/mathlib4.git\n<span class=\"nb\">cd</span> mathlib4\ngit checkout 64f9c43eb9a75fb4c5989ac711623d06e9696e60\nlake --version <span class=\"c1\"># says: Lake version 3.0.0-pre (Lean version 4.0.0-nightly-2021-11-07)</span>\nlake build\n<span class=\"nb\">echo</span> <span class=\"s2\">\"leanprover/lean4:nightly-2021-11-10\"</span> &gt; lean-toolchain\nlake --version <span class=\"c1\"># says: Lake version 3.0.0-pre (Lean version 4.0.0-nightly-2021-11-10)</span>\nlake build  <span class=\"c1\"># returns immediately</span>\n</code></pre></div>\n<p>The problem I'm seeing is that the final <code>lake build</code> returns immediately, whereas Mac is seeing the correct behaviour, that <code>lake</code> rebuilds the library.</p>",
        "id": 261096397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636609918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> your question of whether it was OS specific made me curious and I tried it on WSL and now I can reproduce the issue!</p>",
        "id": 261097362,
        "sender_full_name": "Mac",
        "timestamp": 1636611020
    },
    {
        "content": "<p>Currently, I rebuild between versions by rebuilding whenever the hash of <code>lean</code> changes. I think the problem here is that the hash isn't changing on non-Windows systems</p>",
        "id": 261097467,
        "sender_full_name": "Mac",
        "timestamp": 1636611191
    },
    {
        "content": "<p>Yep, just verified -- that is  it.</p>",
        "id": 261097885,
        "sender_full_name": "Mac",
        "timestamp": 1636611752
    },
    {
        "content": "<p>how is it possible for <code>lean --version</code> to change without the hash of the executable changing?</p>",
        "id": 261098018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636611925
    },
    {
        "content": "<p>Presumably the hash calculation is not actually reading the executable.</p>",
        "id": 261098290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636612239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> nope, the hash calculation does hash the entire executable's binary contents.</p>",
        "id": 261098485,
        "sender_full_name": "Mac",
        "timestamp": 1636612521
    },
    {
        "content": "<p>oooh.. maybe this is some weirdness about how <code>elan</code> delegates.</p>",
        "id": 261098566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636612635
    },
    {
        "content": "<p>yeah, that is what I am thinking</p>",
        "id": 261098576,
        "sender_full_name": "Mac",
        "timestamp": 1636612659
    },
    {
        "content": "<p>or, more accurately <em>was</em> thinking, the problem is that I am hashing the actually executable within the t<code>toolchain</code>'s bin dir, not the delegator in <code>elan</code>'s bin dir.</p>",
        "id": 261098636,
        "sender_full_name": "Mac",
        "timestamp": 1636612733
    },
    {
        "content": "<p>so I am actually a little stumped</p>",
        "id": 261098649,
        "sender_full_name": "Mac",
        "timestamp": 1636612752
    },
    {
        "content": "<p>I though maybe I was just really unlucky and my short 64-bit hash was encountering clashes, but no. For me, the binaries for nightlies 2021-11-05, 2021-11-07,  and 2021-11-10  (i.e., those at <code>&lt;home&gt;/.elan/toolchains/&lt;toolchain&gt;/bin/lean</code>) all have the same SHA256 hash.</p>",
        "id": 261099069,
        "sender_full_name": "Mac",
        "timestamp": 1636613187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> any idea what is going on here?</p>",
        "id": 261099088,
        "sender_full_name": "Mac",
        "timestamp": 1636613195
    },
    {
        "content": "<p>Ah, I thought you were using the git hash? Hashing <code>lean</code> is not really meaningful without also hashing <code>libleanshared</code>.</p>",
        "id": 261099596,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636613342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> using the githash was and idea of mine, but for now I had just been hashing the binary. Once reason I did this is because it changes to docs and the like  would not invoke unnecessary rebuilds. Would hashing  <code>lean</code> + <code>libleanshared</code> be sufficient? Or do I need to / should I use the githash?</p>",
        "id": 261099964,
        "sender_full_name": "Mac",
        "timestamp": 1636613616
    },
    {
        "content": "<p>It <em>should</em> be sufficient. Until we further mix it up, but that shouldn't happen anytime soon.</p>",
        "id": 261100052,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636613742
    },
    {
        "content": "<p>Just remember that the lib is in bin/ on Windows but lib/lean/ otherwise</p>",
        "id": 261100098,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636613773
    },
    {
        "content": "<p>Not sure how often we have pure-docs nightlies though, and how often people update between them. It might not be worth it.</p>",
        "id": 261100138,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636613851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> quick question, because I don't remember, does <code>libleanshared</code> have a <code>dll</code> extension on Windows, <code>dynlib</code> on Mac, and <code>so</code> otherwise?</p>",
        "id": 261100316,
        "sender_full_name": "Mac",
        "timestamp": 1636614017
    },
    {
        "content": "<p><code>dylib</code>, but yes</p>",
        "id": 261100340,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636614042
    },
    {
        "content": "<p>oops I had been misspelling it in Lake then. XD -- otherwise, good to know!</p>",
        "id": 261100371,
        "sender_full_name": "Mac",
        "timestamp": 1636614103
    }
]