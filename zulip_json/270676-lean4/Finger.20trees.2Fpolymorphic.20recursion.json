[
    {
        "content": "<p>Hey, I want to implement finger trees in lean4. I'm told this kind of recursive structure is called polymorphic recursion. Here is a smaller reproduction of my problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- container which only admits 2^n elements for any n</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">PowTree</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Unit</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Double</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">PowTree</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It says <code>(kernel) arg #2 of 'PowTree.Double' contains a non valid occurrence of the datatypes being declared</code>. I saw a similar error in this <a href=\"#narrow/stream/270676-lean4/topic/inductive.20type.20with.20dependent.20recursive.20substructure\">this topic</a> but I'm hoping because I'm not parameterized on <code>m : Type u → Type u</code> like his example that this is actually possible - can you implement finger trees in lean4?</p>",
        "id": 287474694,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1656222843
    },
    {
        "content": "<p>Untested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Double</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">d'</span> <span class=\"o\">:</span> <span class=\"n\">PowerTree</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not on my PC, but I think your <code>Double</code> constructor doesn't work because of an universe bump</p>",
        "id": 287476860,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656226401
    },
    {
        "content": "<p>Maybe the error message could be clearer on <em>why</em> the datatype is non valid</p>",
        "id": 287476923,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656226537
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PowTree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">Unit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">PowTree</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Double</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PowTree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PowTree</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 287478058,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1656228236
    },
    {
        "content": "<p>there's also some discussion in <a href=\"#narrow/stream/270676-lean4/topic/Issue.20using.20a.20Type.201.20in.20forIn\">this thread</a>, it seems like the Lean kernel requires a universe bump here even though Coq does not</p>",
        "id": 287493642,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656250404
    },
    {
        "content": "<p>but indeed you can make finger trees in lean4: <a href=\"https://github.com/JamesGallicchio/LeanColls/blob/main/LeanColls/FingerTree/FingerTree.lean\">https://github.com/JamesGallicchio/LeanColls/blob/main/LeanColls/FingerTree/FingerTree.lean</a></p>",
        "id": 287493724,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1656250505
    },
    {
        "content": "<p>Note that, besides the universe bump discussion, you're also defining  an inductive <em>family</em> here, using the syntax Lean uses for inductive <em>types</em>. That is, when you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PowTree</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Then your constructors may only depend on <code>PowTree a</code>, not <code>PowTree (a x a)</code>, <code>PowTree Nat</code> or any other value for the parameter.</p>\n<p>Inductive families are defined by moving the argument to the type, like Patrick showed, so </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PowTree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>\n<p>If you write it like this, the index <em>is</em> allowed to change. The underscore in <code>Type _</code> tells the compiler to figure out the resulting universe for you, so you don't have to think about when you do or don't need a universe bump.</p>",
        "id": 287498149,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656256017
    },
    {
        "content": "<p>Thank you everyone! I learned a lot about lean today.</p>",
        "id": 287503612,
        "sender_full_name": "Stuart Geipel",
        "timestamp": 1656263753
    }
]