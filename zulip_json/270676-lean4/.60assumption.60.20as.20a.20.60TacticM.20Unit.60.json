[
    {
        "content": "<p>If I am in <code>TacticM</code> and want to run <code>assumption</code>, what am I meant to say? So far I have <code>(evalTactic $ ‚Üê `(tactic|assumption))</code>, which seems  cumbersome.</p>",
        "id": 298897435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663213409
    },
    {
        "content": "<p>Yes, that's how you're supposed to do it, at least in general if you have some tactic expression you want to run. For most specific tactics there is also a plumbing version available, many of which are functions on <code>MVarId</code></p>",
        "id": 298897788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663213749
    },
    {
        "content": "<p>indeed <code>mvarId.assumption : MetaM Unit</code> should work</p>",
        "id": 298897820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663213799
    },
    {
        "content": "<p><code>liftMetaTactic fun g =&gt; do g.assumption; pure []</code> would be a version in <code>TacticM</code></p>",
        "id": 298898042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663214008
    },
    {
        "content": "<p>Thanks. I remain confused as to why we're avoiding defining <code>TacticM</code> versions of more or less everything, e.g. including your suggestion above.</p>",
        "id": 298898840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663214891
    },
    {
        "content": "<p>Most workhorse tactics are defined over <code>MetaM</code>, not <code>TacticM</code>. You should only use <code>TacticM</code> for implementing the frontend stuff like managing the goal list or parsing tactic syntax</p>",
        "id": 298898951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663215008
    },
    {
        "content": "<p>Adding termInfo for variables bound by a tactic needs to be done in <code>TermElabM</code> (which is intermediate between TacticM and MetaM)</p>",
        "id": 298898996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663215070
    },
    {
        "content": "<p><code>MetaM</code> uses explicit parameter passing for goal management, which means that you get a more descriptive type signature and you don't have to worry about goals getting misplaced</p>",
        "id": 298899091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663215167
    }
]