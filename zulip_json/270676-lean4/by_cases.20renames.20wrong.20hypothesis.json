[
    {
        "content": "<p>In the example below I used the mathlib <code>by_cases</code> tactic to go by cases on <code>q</code> and <code>Not </code>q<code>. \nThe names </code>h2<code> I gave in the two cases rename the hypothesis </code>¬q → ¬p<code> from its initial name </code>h` to h2, instead of be used for the newly introduced hypotheses.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">contraposition'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hp</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">q</span>\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  p q : Prop</span>\n<span class=\"cm\">  h2 : ¬q → ¬p</span>\n<span class=\"cm\">  hp : p</span>\n<span class=\"cm\">  h : q</span>\n<span class=\"cm\">  ⊢ q</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is it a bug in <code>by_cases</code> or am I misunderstanding how to use it?</p>",
        "id": 313478377,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1669980584
    },
    {
        "content": "<p>the mathlib <code>by_cases</code> tactic is \"unhygienic\" in the sense that it introduces a variable named <code>h</code> which you are allowed to directly refer to</p>",
        "id": 313478607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669980651
    },
    {
        "content": "<p>which means that the <code>case</code> tactic will not rename it because it only renames newly introduced inaccessible variables</p>",
        "id": 313478675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669980677
    },
    {
        "content": "<p>So if I need to give it another name do I just rename the newly introduced <code>h</code>?</p>",
        "id": 313478927,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1669980775
    },
    {
        "content": "<p>the syntax for naming the variable in <code>by_cases</code> is <code>by_cases h2 : q</code></p>",
        "id": 313478996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669980797
    },
    {
        "content": "<p>I see, thanks! I was confused by the difference between this and the builtin <code>by_cases</code></p>",
        "id": 313479121,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1669980838
    },
    {
        "content": "<p>std also introduces another syntax for <code>by_cases</code> that IMO looks better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">contraposition'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hp</span>\n  <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"k\">then</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 313479266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669980888
    },
    {
        "content": "<p>Are we just allowing the unhygienic <code>by_cases</code> in mathlib4 in order to ease porting? In my mind it would be nice to remove these kinds of \"features\".</p>",
        "id": 313524131,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669994956
    },
    {
        "content": "<p>yes</p>",
        "id": 313525588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995322
    },
    {
        "content": "<p>the std version of <code>by_cases</code> doesn't have this \"feature\"</p>",
        "id": 313525628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995333
    },
    {
        "content": "<p>once mathlib4 is mostly ported, it will be much easier to do semi-automated linter-powered refactors like replacing <code>induction'</code> with <code>induction</code> and fixing the case name references</p>",
        "id": 313525985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995425
    },
    {
        "content": "<p>these are things that mathport can't do because it needs the lean4-side syntax to typecheck, so it is easier to apply post-port, either as a refactoring step encouraged by a linter like the <code>unnecessarySeqFocus</code> linter, or a full pass over the library when we are done</p>",
        "id": 313526388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669995537
    }
]