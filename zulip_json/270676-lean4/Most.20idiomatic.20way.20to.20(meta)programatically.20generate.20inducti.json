[
    {
        "content": "<p>As part of a macro I'm implementing I want to generate an inductive type and add it to the environment.<br>\nI've found <code>MonadEnv.addDecl</code> that does the \"adding to the environment\" part, but it requires a fully elaborated <code>Declaration</code> object, so using it is quite painful.</p>\n<p>So, I figured I could reuse the command elaborator if only I could produce a <code>Syntax</code> tree. However, the number of constructors, and the indices/parameters of my inductive type depend on the input to my macro, so generating this <code>Syntax</code> tree is not quite straightforward, either.</p>\n<p>A third route seems to just generate a string with the inductive definition, using all the ease of string formatting/concatenation, and then feed that string to the lean parser somehow? In fact, I'm porting code from lean3 which does exactly this, using <code>parser.with_input</code>. Is there a lean4 equivalent to this method? I've tried to look for it, and <code>Parser.runParserCategory</code> seems to do it, but it's documented as \"convenience function for testing\", so I'm a bit hesitant to use it.</p>\n<p>Is there a generally agreed upon clean/idiomatic way to generate new declarations in a macro's elaborator?<br>\nThe last one seems easiest to use, but it feels quite hackish</p>",
        "id": 278833068,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649858750
    },
    {
        "content": "<p>If you have the code as a <code>String</code>, you can call Lean's frontend like <a href=\"https://github.com/lecopivo/lean4-karray/blob/fd3b0e7c5329d6eccdd9fe978e4df1fdaba00cad/KArray/KArrayCompile.lean#L118\">this</a>. But I'm also interested in knowing the most appropriate way to do this.</p>\n<p>But this is not clear to me: what type of data do you have that carries information about your inductive type in the first place? Do you have a \"meta\" inductive type that carries the data about your inductive type? A structure? A raw string?</p>",
        "id": 278834093,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649859277
    },
    {
        "content": "<p>Expliciting the final use case with the code that you'd like to see working might help</p>",
        "id": 278834511,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649859478
    },
    {
        "content": "<p>I'm trying to implement a <code>data</code> macro as drop-in replacement for <code>inductive</code>, but then using QPFs as their foundation.<br>\nSo I have an <code>InductiveType</code> struct that has the specification given by the user, and from that I want to derive the required QPF-constructions.</p>",
        "id": 278834598,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649859513
    },
    {
        "content": "<p>So, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>Should turn into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree.HeadT</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">HeadT</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">HeadT</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 278834710,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649859571
    },
    {
        "content": "<p>I think <code>addDecl</code> is the approach you need if you're creating an inductive type use terms that are already elaborated. There are helper functions like <code>mkAppM</code> that can help make it less painful by inferring some of the arguments for you. Going from <code>Expr</code> to <code>Syntax</code> and back to <code>Expr</code> gives you new ways for your compilation to fail, and you should be careful about going that way</p>",
        "id": 278834826,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649859612
    },
    {
        "content": "<p>Only the parameters that occur negatively are preserved, I want the same number of constructors, with the same name, but the type should just be a simple enumeration</p>",
        "id": 278834837,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649859616
    },
    {
        "content": "<p>The main difficulty is that I only have a fully elaborated <code>InductiveType</code> for the original <code>data Tree</code> declaration.<br>\nFrom that we can certainly make an <code>InductiveType</code> for <code>Tree.HeadT</code>, but it involves a few steps that feel redundant.</p>\n<p>Nevertheless, you are right about the extra conversions being a bit brittle, so I'll try going that route a bit more</p>",
        "id": 278837810,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649860901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Most.20idiomatic.20way.20to.20.28meta.29programatically.20generate.20inducti/near/278834093\">said</a>:</p>\n<blockquote>\n<p>If you have the code as a <code>String</code>, you can call Lean's frontend like <a href=\"https://github.com/lecopivo/lean4-karray/blob/fd3b0e7c5329d6eccdd9fe978e4df1fdaba00cad/KArray/KArrayCompile.lean#L118\">this</a>. But I'm also interested in knowing the most appropriate way to do this.</p>\n</blockquote>\n<p>Thanks for the pointer, I'd somehow written <code>runFrontend</code> off because it takes a filename, and I didn't want to put my generated code in a file,  I reckon the filename is only used for error reporting and I could provide a bogus name? <br>\nOtoh, it does run in <code>IO</code>, which makes me a bit suspicious again.</p>",
        "id": 278838333,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649861108
    },
    {
        "content": "<p>Have you seen <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Inductive.lean#L739\"><code>elabInductiveViews</code></a>? It takes a data structure as parameter, I think you could generate <code>Tree.HeadT</code> just from a list of strings.</p>",
        "id": 278838352,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649861116
    },
    {
        "content": "<p>Yeah, <code>InductiveView</code> takes a <code>ref : Syntax</code>, though. Do you reckon I could use a  bogus value for <code>ref</code>?</p>",
        "id": 278839432,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1649861573
    },
    {
        "content": "<p>Yes you can set <code>Syntax.missing</code>. Some other bits take <code>Syntax</code> as well, but you can just craft it. For instance, you could set</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>Assuming you are in a suitable monad such as <code>CommandElabM</code>.</p>\n<p>Also I'm not sure this is <em>idiomatic</em> but I believe this is what the <code>inductive</code> command elaborates to.</p>",
        "id": 278839970,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649861810
    },
    {
        "content": "<p>I figure I could show you the code I'm using directly: <a href=\"https://github.com/opencompl/lean-mlir-semantics/blob/master/MLIRSemantics/Util/Metagen.lean#L110-L157\">https://github.com/opencompl/lean-mlir-semantics/blob/master/MLIRSemantics/Util/Metagen.lean#L110-L157</a><br>\nIt's very much experimental and currently (1) sets dummy constructor arguments, and (2) hacks to use <code>evalExpr</code>, which is unsafe and thus normally not allowed in command elaborators. But it might help as far as generating an inductive is concerned.</p>\n<p>The file itself is self-contained, you can run it without cloning the repo.</p>",
        "id": 278843531,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1649863396
    }
]