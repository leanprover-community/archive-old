[
    {
        "content": "<p>I haven't had the chance to investigate this issue but there must be a bug somewhere...</p>\n<p>In this snippet, the rewrite succeeds but does not change the goal at all.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>In this snppet, the rewrite succeeds and does change the goal to <code>Nat.ble (n+1) n</code> as I would expect.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span> <span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 252953285,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1631415444
    },
    {
        "content": "<p>One possibility is that it is deciding to rewrite with <code>Nat.add_zero (n+0)</code>, and <code>n+0+0</code> matches with <code>n+0</code> in the goal (which is why the rewrite succeeds)</p>",
        "id": 252953543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631415645
    },
    {
        "content": "<p>I'm thinking it's something like that but why would it do that?</p>",
        "id": 252953694,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1631415802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> The unifier in Lean 4 uses the \"offset\" module: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Offset.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Offset.lean</a><br>\nThis module handles offset constraints such as <code>?x + 100 =?= a + 300</code>  (solution: <code>?x := a + 200</code>), and the different ways natural numbers can be represented in Lean. <br>\nThis module is always active. So, the constraint <code>?x + 0 =?= n</code> is solved as <code>?x := n</code>. Note that Lean 3 also has a more primitive version of the \"offset\" module.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_zero</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- m n : ℕ ⊢ ¬n + 1 &lt; n + 0</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have considered disabling <code>Offset.lean</code> when the reducibility setting is low, but it would negatively impact use-cases we care about. For example, a <code>simp</code> theorem of the form <code>f (x + 2) = ..</code> currently \"fires\" in goals containing <code>f (a + 5)</code>. The feature is also important for programs manipulating types such as bit-vectors and vectors. </p>\n<p>I acknowledge that the behavior in your example is counterintuitive, but I expect very few users will have to apply <code>rw [Nat.add_zero]</code> in the future. For educational material, I can see the value of using <code>rw [Nat.add_zero]</code>. We could add a flag for disabling the <code>Offset.lean</code> module, but I am not sure it would be easy to explain why the option is being used in the material. For educational material, one could avoid this issue by defining their own natural number type and <code>add</code>.</p>",
        "id": 252990054,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631456594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> In this case the constraint is <code>?x + 0 =?= n + 0</code>, right? The two ways of solving this that I see are: (1) use the usual \"congruence\" heuristic when it applies in preference to the offset module, or (2) have the offset module take into account coefficients on both sides when cancelling, so that this goal reduces to <code>?x =?= n</code></p>",
        "id": 252997554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631464574
    }
]