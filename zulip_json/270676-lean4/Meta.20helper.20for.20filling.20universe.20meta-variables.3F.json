[
    {
        "content": "<p>These are experiments and probably not the intended way for lean to be used, but I was trying to cache expressions and define using them. My question is does lean have something like <code>isDefEq</code>(in the sense of solving for meta-variables)  but which assigns  (level) meta-variables to make a well-formed expression.</p>\n<p>To clarify, here is the code for saving and loading:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">exprCache</span> <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"n\">Name</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"o\">(</span><span class=\"n\">HashMap.empty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getCached</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cache</span> <span class=\"bp\">←</span> <span class=\"n\">exprCache.get</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cache.find</span><span class=\"bp\">?</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cache</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cache</span> <span class=\"bp\">←</span> <span class=\"n\">exprCache.get</span>\n  <span class=\"n\">exprCache.set</span> <span class=\"o\">(</span><span class=\"n\">cache.insert</span> <span class=\"n\">name</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">saveexpr</span><span class=\"o\">)</span> <span class=\"s2\">\"cache!\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kd\">@[termElab saveexpr]</span> <span class=\"kd\">def</span> <span class=\"n\">cacheImp</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cache</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">name.getId</span>\n      <span class=\"n\">cache</span> <span class=\"n\">name</span> <span class=\"n\">t</span>\n      <span class=\"n\">return</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwIllFormedSyntax</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">loadexpr</span><span class=\"o\">)</span> <span class=\"s2\">\"load!\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span><span class=\"n\">term</span>\n<span class=\"kd\">@[termElab loadexpr]</span> <span class=\"kd\">def</span> <span class=\"n\">loadImp</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">load</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">name.getId</span>\n      <span class=\"k\">let</span> <span class=\"n\">cache</span> <span class=\"bp\">←</span> <span class=\"n\">exprCache.get</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">cache.find</span><span class=\"bp\">?</span> <span class=\"n\">name</span>\n      <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span>  <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no such expression\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwIllFormedSyntax</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">cache</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">func</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">load</span><span class=\"bp\">!</span> <span class=\"n\">func</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- gives fun (x : Nat) =&gt; @HMul.hMul.{u_1, u_2, u_3} Nat Nat Nat (@instHMul.{0} Nat instMulNat) x (@OfNat.ofNat.{0} Nat 2 (instOfNatNat 2)) : Nat → Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fff</span> <span class=\"o\">:=</span> <span class=\"n\">load</span><span class=\"bp\">!</span> <span class=\"n\">func</span> <span class=\"c1\">-- gives rror:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> application type mismatch</span>\n<span class=\"cm\">  @HMul.hMul.{u_1, u_2, u_3} Nat</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  Type</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  {α : Type u_1} → {β : Type u_2} → {γ : Type u_3} → [self : HMul.{u_1, u_2, u_3} α β γ] → α → β → γ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>For the expression to be valid assignments <code>u_i =levelOne</code> need to be made. When I had similar issues with <code>mkAppM</code>, the solution I was told (which worked very well, thanks) was to use <code>elabAppArgs</code>. I was wondering if there is an elaborator method for this case of the same nature.</p>\n<p>Thanks for any help,<br>\nSiddhartha</p>",
        "id": 259831281,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1635748461
    }
]