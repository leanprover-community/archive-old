[
    {
        "content": "<p>Related to the discussion in the other Lean4 topic \"Alternative Int Hierarchy,\" I took the following custom <code>int</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos_succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n</code></pre></div>\n<p>And \"embedded\" it into the natural numbers type, or rather, I made a bijective map between this integer type and the natural number type, and defined an addition function over these integers-as-naturals such that the integers become well-ordered as <code>0,-1,1,-2,2,-3,3 ...</code><br>\nThis way I do not have to deal with the 3 constructors causing case-explosion and can write functions using the two constructor natural number type and map back into my <code>int</code> type representation. (This is totally not for anything practical and just for intellectual curiosity and learning lean.)</p>\n<p>So my question is, my add function involves a conditional and I realize I don't know how to deal with these when proving theorems about a function with a conditional. The <code>blah1</code> theorem should be true by definition if the number <code>is_even</code>. Here's a MWE with the theorem I'd like to prove at the bottom.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos_succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg_succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">halve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span>\n  <span class=\"n\">return</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int_to_Nat'</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pos_succ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg_succ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- 0  1 2  3 4  5 6  7 8</span>\n<span class=\"c1\">-- 0,-1,1,-2,2,-3,3,-4,4 ...</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">the even numbers are positive integers</span>\n<span class=\"cm\">the odd numbers are negative integers</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat_to_int'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int.zero</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">halve</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"n\">neg_succ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">halve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n      <span class=\"n\">return</span> <span class=\"n\">pos_succ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">Nat_to_int'</span> <span class=\"mi\">6</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int_as_Nat_incr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"c1\">-- if negative</span>\n      <span class=\"n\">return</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"c1\">-- if positive</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">int_as_Nat_incr</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int_as_Nat_decr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"c1\">-- if negative</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"c1\">-- if positive</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">int_as_Nat_decr</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_ian</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">int_as_Nat_decr</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"c1\">-- `n` is positive</span>\n      <span class=\"n\">int_as_Nat_incr</span> <span class=\"o\">(</span><span class=\"n\">add_ian</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"c1\">-- `n` is negative</span>\n      <span class=\"n\">int_as_Nat_decr</span> <span class=\"o\">(</span><span class=\"n\">add_ian</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- 0,-1,1,-2,2,-3,3</span>\n<span class=\"c1\">-- (1 : Nat) = (-1 : int)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">add_ian</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add''</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat_to_int'</span> <span class=\"o\">(</span><span class=\"n\">add_ian</span> <span class=\"o\">(</span><span class=\"n\">int_to_Nat'</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int_to_Nat'</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">int</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add''</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">neg_succ</span> <span class=\"mi\">2</span> <span class=\"c1\">-- -3</span>\n<span class=\"kd\">def</span> <span class=\"n\">i2</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">pos_succ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- +4</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">i1</span> <span class=\"bp\">+</span> <span class=\"n\">i2</span> <span class=\"c1\">-- pos_succ 0</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" +₁ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add_ian</span>\n\n<span class=\"c1\">-- How do I match the `is_even n` case?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">blah1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+₁</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int_as_Nat_incr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+₁</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 244478864,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1625082967
    },
    {
        "content": "<p>It looks like that syntax of passing a bool elaborates to <code>(b = true)</code> by default.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">blah1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+₁</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int_as_Nat_incr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+₁</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">h_even</span>\n<span class=\"n\">cases</span> <span class=\"n\">m</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_even</span><span class=\"o\">,</span> <span class=\"n\">Nat.add</span><span class=\"o\">,</span> <span class=\"n\">add_ian</span><span class=\"o\">]</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_even</span><span class=\"o\">,</span> <span class=\"n\">Nat.add</span><span class=\"o\">,</span> <span class=\"n\">add_ian</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 244484778,
        "sender_full_name": "Chris B",
        "timestamp": 1625085723
    },
    {
        "content": "<p>Oh thanks! - I definitely tried starting out with intros and cases not sure where I went wrong; I did a lot of refactoring so might've just messed up something along the way</p>",
        "id": 244486112,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1625086328
    },
    {
        "content": "<p>Actually that was the wrong question, I was actually having issues proving this because I don't know how to do cases on <code>is_even</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+₁</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"c1\">-- is positive</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"k\">else</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't know how to get access to the proof <code>is_even n</code> in each branch</p>",
        "id": 244487791,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1625087140
    },
    {
        "content": "<p>There might be a cool new lean4 way of doing it, but the lean3 way still works, you have to name the hypothesis in the if case, and the negated one is then available under the same name in the else case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+₁</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">h_even</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">_</span>\n      <span class=\"k\">else</span>\n      <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 244490943,
        "sender_full_name": "Chris B",
        "timestamp": 1625088655
    },
    {
        "content": "<p>Hmm I swear I tried that, but thanks again. Why doesn't this seem to work in tactic mode?</p>",
        "id": 244509923,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1625103925
    },
    {
        "content": "<p>I know very little about Lean 4's tactic mode, but I would assume just because it's not directly a tactic; you would have to preface it with <code>exact</code> or something. In tactic mode it looks like <code>byCases h_ev: is_even n</code> and <code>cases h_ev: is_even n</code> will both get you into a similar position. Lean 4 is also whitespace sensitive in some places, so you may have run afoul of that somewhere.</p>",
        "id": 244511498,
        "sender_full_name": "Chris B",
        "timestamp": 1625105875
    }
]