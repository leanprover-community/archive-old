[
    {
        "content": "<p>I have a typeclass depending on <code>Nat</code> and I'm having some troubles when using constants like <code>0</code> or <code>1</code>. Somehow there is a difference when I write <code>0</code> vs <code>Nat.zero</code> or <code>1</code> vs <code>Nat.zero.succ</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Uncurry</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Xs</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">Xs</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"n\">uncurry_zero</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"mi\">0</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">uncurry_succ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"n\">n</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Xs</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">inst.Xs</span>\n  <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">inst.Y</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Uncurry.uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"c1\">-- Error:  failed to synthesize instance Uncurry Nat.zero X</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- error</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">uncurry_zero</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"n\">Nat.zero.succ.succ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Uncurry</span> <span class=\"n\">Nat.zero.succ.succ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">uncurry_succ</span>\n</code></pre></div>\n<p>What is going on here?</p>",
        "id": 314571018,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670452293
    },
    {
        "content": "<p>Here is a short version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>The short answer is that <code>Nat.zero</code> and <code>0</code> are different functions.</p>",
        "id": 314576304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670454674
    },
    {
        "content": "<p>You can tell the discrimination tree index to ignore the function symbol here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 314576336,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670454698
    },
    {
        "content": "<p>BTW, I would avoid type fields in classes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Uncurry</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Xs</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">Xs</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>And the <code>(priority := low)</code> has no effect in your snippet.</p>",
        "id": 314576529,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670454795
    },
    {
        "content": "<p>I see, makes sense.</p>\n<p>However, I do not understand what <code>no_index</code> is doing. I see that in core it is <a href=\"https://github.com/leanprover/lean4/blob/5a8ee410b150ea02da6a7ff07519051756816541/src/Init/Data/Fin/Basic.lean#L103\">used</a> exactly when mixing Nat and and instances. Also somewhere in the code there is a comment that instances are not indexed. But I still do not understand what it is doing.</p>\n<p>Thanks for the suggestions, using outParam is a good idea. That way I don't have to mark everything reducible as I had to when I started using this class.</p>",
        "id": 314696347,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670511996
    },
    {
        "content": "<p><code>no_index X</code> tells the indexing machinery to ignore <code>X</code>. So the instance will be tried on any typeclass problem of the form <code>Foo ?</code>, rather than just on problems of the form <code>Foo 0</code>. At that point, unification can kick in and confirm that <code>0 = Nat.zero</code>.</p>",
        "id": 314699253,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670512772
    },
    {
        "content": "<p>Makes perfect sense! Thanks for the explanation.</p>",
        "id": 314716001,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670517437
    }
]