[
    {
        "content": "<p>Two newbie questions about how to get this definition to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">ρ</span> <span class=\"n\">τ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">//</span> <span class=\"n\">isFinite</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">res</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_next</span> <span class=\"o\">:</span> <span class=\"n\">hasNext</span> <span class=\"n\">l</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">mwe</span> <span class=\"n\">res</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>I know there's a lot going on here, but I've essentially defined a subtype for streams which are finite, and now am trying to recurse through the stream.</p>\n<p>1) I have an instance of <code>WellFoundedRelation {l // isFinite l}</code> but I'm not really sure how to use it to prove termination here</p>\n<p>2) I'm not sure how to maintain information from the match; in particular, I need that <code>next? l = some (_,xs)</code> to prove the first sorry. I've tried the <code>generalizing := true</code> flag that I saw elsewhere, but that did not seem to do anything here</p>",
        "id": 271715740,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1644708953
    },
    {
        "content": "<p>The syntax for 2 is <code>match h:next? l with</code>, with no whitespace after the <code>h:</code>.</p>",
        "id": 271721951,
        "sender_full_name": "Chris B",
        "timestamp": 1644718651
    },
    {
        "content": "<p>I'll see about adding it to the docs, it looks like that's still not in there.</p>",
        "id": 271722004,
        "sender_full_name": "Chris B",
        "timestamp": 1644718718
    },
    {
        "content": "<p>For 1, you can try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n  <span class=\"n\">decreasing_by</span>\n    <span class=\"n\">trace_state</span>\n</code></pre></div>\n<p>and observing the proof goal.</p>",
        "id": 271722084,
        "sender_full_name": "Chris B",
        "timestamp": 1644718849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/Termination.20via.20well.20founded.20relation.20on.20subtype.3F/near/271721951\">said</a>:</p>\n<blockquote>\n<p>The syntax for 2 is <code>match h:next? l with</code>, with no whitespace after the <code>h:</code>.</p>\n</blockquote>\n<p>Ahh, I was trying h : with whitespace, that is a bit unfortunate whitespace sensitivity</p>",
        "id": 271722698,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1644719900
    },
    {
        "content": "<p>You're not alone. I'll mention the whitespace thing in the documentation.</p>",
        "id": 271722784,
        "sender_full_name": "Chris B",
        "timestamp": 1644720046
    },
    {
        "content": "<p>As for the termination, it comes up as a type error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">l</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"bp\">//</span> <span class=\"n\">isFinite</span> <span class=\"n\">l</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.12065</span>\n</code></pre></div>",
        "id": 271724666,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1644723279
    },
    {
        "content": "<p>Is the whole thing posted anywhere?</p>",
        "id": 271724922,
        "sender_full_name": "Chris B",
        "timestamp": 1644723755
    },
    {
        "content": "<p>hm, lemme try to cut this file down</p>",
        "id": 271724931,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1644723807
    },
    {
        "content": "<p><a href=\"https://gist.github.com/JamesGallicchio/9e5d08bce7ce4f9f563d1a9edc765d5b\">https://gist.github.com/JamesGallicchio/9e5d08bce7ce4f9f563d1a9edc765d5b</a> this should compile on most recent nightly (it does need a bug fix from a few days ago)</p>",
        "id": 271725132,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1644724144
    },
    {
        "content": "<p>There seems to be some issue with type parameter visibility in termination blocks; this makes this issue more clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">[</span><span class=\"n\">Stream</span> <span class=\"n\">ρ</span> <span class=\"n\">τ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"bp\">//</span> <span class=\"n\">isFinite</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_next</span> <span class=\"o\">:</span> <span class=\"n\">hasNext</span> <span class=\"n\">l</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exists</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hasNext</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">mwe</span> <span class=\"n\">acc</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">termination_by'</span>\n    <span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subty</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hasNextWF</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">subty : @Subtype.{u_1 + 1} ρ fun (l : ρ) =&gt; @Stream.isFinite.{u_1, u_2} ρ τ x✝¹ l</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  subty</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @Subtype.{u_1 + 1} ρ fun (l : ρ) =&gt; @Stream.isFinite.{u_1, u_2} ρ τ x✝ l : Type (max 0 u_1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @Subtype.{?u.8671 + 1} ?m.8672 fun (s : ?m.8672) =&gt;</span>\n<span class=\"cm\">    @Stream.isFinite.{?u.8671, ?u.8670} ?m.8672 ?m.8673 ?m.8674 s : Type ?u.8671</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>And I can't give <code>hasNextWF</code> the type arguments explicitly.</p>",
        "id": 271752225,
        "sender_full_name": "Chris B",
        "timestamp": 1644767797
    },
    {
        "content": "<p>Oh boy. I do see what you mean, since it feels like those should unify fine</p>",
        "id": 271752680,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1644768140
    },
    {
        "content": "<p>Created an issue on GitHub for this. We will try to fix it this week. <a href=\"https://github.com/leanprover/lean4/issues/1017\">https://github.com/leanprover/lean4/issues/1017</a></p>",
        "id": 271873701,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644865851
    },
    {
        "content": "<p>This issue has been fixed.</p>",
        "id": 272440759,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645209796
    }
]