[
    {
        "content": "<p>I tried to write a tail recursive implementation of the plain <code>depth</code> function below using continuation passing style. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.depth</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">e₁.depth</span> <span class=\"n\">e₂.depth</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.depthCPS</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">depthCore</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depthCore</span> <span class=\"n\">e₁</span>\n      <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">d₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depthCore</span> <span class=\"n\">e₂</span>\n      <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">d₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Nat.max</span> <span class=\"n\">d₁</span> <span class=\"n\">d₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">depthCore</span> <span class=\"n\">e</span> <span class=\"n\">id</span>\n\n<span class=\"c1\">-- 0 + (1 + (2 + ( + ... + 1000000)...)</span>\n<span class=\"kd\">def</span> <span class=\"n\">largeTest</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"mi\">1000000</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapTR</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"n\">Exp.plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">largeTest.depthCPS</span>\n</code></pre></div>\n<p>However, testing it on a large input still produces a stack overflow. Is it not possible in Lean to use continuation passing style in order to prevent stack overflows? I should mention that I only learnt a few days ago about this, so I'm not sure that this is the right way to do it, but to convince myself I wrote an analogous implementation in OCaml and it succesfully computed <code>depthCPS largeTest</code>.</p>",
        "id": 318127744,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672159648
    },
    {
        "content": "<p>I don't think using CPS alone will prevent stack overflows. lean still has to call the function stack you have built and that will result in a call stack as large as the nesting depth of the closure</p>",
        "id": 318128293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672159890
    },
    {
        "content": "<p>especially this continuation here -&gt; <code>fun d₂ =&gt; k (Nat.max d₁ d₂) + 1</code> - that's not even tail recursive so it defintely has to push a stack frame to call <code>k</code></p>",
        "id": 318128500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672159975
    },
    {
        "content": "<p>in fact, looking at it some more I think that was just a typo</p>",
        "id": 318128890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672160148
    },
    {
        "content": "<p>What do you mean for the continuation to be tail recursive? I thought the question of tail recursivity was about <code>depthCore</code> here, which is tail recursive, right?</p>",
        "id": 318128892,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672160148
    },
    {
        "content": "<p>and you meant <code>fun d₂ =&gt; k (Nat.max d₁ d₂ + 1)</code></p>",
        "id": 318128956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672160164
    },
    {
        "content": "<p>Yes, that's what I meant</p>",
        "id": 318129054,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672160219
    },
    {
        "content": "<p>Though I stil get a stack overflow</p>",
        "id": 318129094,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672160245
    },
    {
        "content": "<p>That lambda gets called at some point, once you have decomposed the whole expression, and you are relying on it to tail-call <code>k</code>, replacing its stack frame with <code>k</code>'s, and that's not what happens because lean doesn't do this kind of TCO</p>",
        "id": 318130038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672160649
    },
    {
        "content": "<p>in the example you end up building a closure which has a reference to another closure and so on a million deep, and since each closure calls the next one before it exits, you end up with a million stack frames</p>",
        "id": 318130183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672160718
    },
    {
        "content": "<p>currently lean can only do TCO to a recursive invocation of the same function or another function in the same mutual block, not to variables like <code>k</code></p>",
        "id": 318130361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672160782
    },
    {
        "content": "<p>I see now, thanks!</p>",
        "id": 318130692,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672160905
    },
    {
        "content": "<p>Here's a version that works. This is the same CPS style translation I use to do programming language semantics</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Cont</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus₁</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.depth</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">max</span> <span class=\"n\">e₁.depth</span> <span class=\"n\">e₂.depth</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Exp.depthCPS</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span>\n    <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ret</span> <span class=\"n\">k</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">start</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">e₂</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ret</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">e₂</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">d₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">start</span> <span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">d₁</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">d₁</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">d₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ret</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">d₁</span> <span class=\"n\">d₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">start</span> <span class=\"n\">e</span> <span class=\"bp\">.</span><span class=\"n\">ret</span>\n\n<span class=\"c1\">-- 0 + (1 + (2 + ( + ... + 1000000)...)</span>\n<span class=\"kd\">def</span> <span class=\"n\">largeTest</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"mi\">1000000</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapTR</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"n\">Exp.plus</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">largeTest.depthCPS</span>\n</code></pre></div>",
        "id": 318131628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672161377
    },
    {
        "content": "<p>I think it might be possible to do this with closures too but I'm not sure</p>",
        "id": 318131656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672161399
    },
    {
        "content": "<p>(The <code>partial def</code> is only because I'm lazy, it is possible to prove this terminates)</p>",
        "id": 318131717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672161454
    },
    {
        "content": "<p>The <code>Cont</code> type corresponds very closely to the closures that are used in your example:</p>\n<ul>\n<li><code>.ret</code> is <code>id</code>,</li>\n<li><code>.plus₁ e₂ k</code> is <code>fun d₁ =&gt; depthCore e₂ fun d₂ =&gt; k (Nat.max d₁ d₂ + 1)</code>, and</li>\n<li><code>.plus₂ d₁ k</code> is <code>fun d₂ =&gt; k (Nat.max d₁ d₂ + 1)</code></li>\n</ul>",
        "id": 318132567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672161893
    },
    {
        "content": "<p>Thank you Mario, this is a very nice solution! I'll try to adapt it to my non-minimzed function</p>",
        "id": 318135978,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1672163425
    },
    {
        "content": "<p>TCO through dynamic calls is dependent on <a href=\"https://github.com/leanprover/lean4/pull/1805\">https://github.com/leanprover/lean4/pull/1805</a>, plus probably some special code generation on the caller's side</p>",
        "id": 318146277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672168318
    }
]