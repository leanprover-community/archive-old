[
    {
        "content": "<p>FYI I (temporarily) added support for irreducible, and tried re-synthesizing every class in every term+value auto-ported by <code>mathport</code>. The results are pretty encouraging:</p>\n<p>Total: (499227 / 548358) = 0.91</p>\n<div class=\"codehilite\"><pre><span></span><code>       - success: 499227 (0.91)\n        - failed:  18509 (0.03)\n       - timeout:  26098 (0.05)\n  - instExpected:   4524 (0.01)\n</code></pre></div>\n\n<p>Other details:</p>\n<ul>\n<li>50,000 synthInstance.maxHeartbeat</li>\n<li>skipping any terms that took too long to infer the type of (with 1,000 maxHeartbeat)</li>\n<li><code>instExpected</code> means a subgoal encountered during search is not known to be a class (since currently lean4 only unfolds reducibles in this context)</li>\n</ul>\n<p>I have much more detailed data about this experiment, which will hopefully help us track down the issues efficiently. In general, I think this kind of batch experiment is a pretty good way to proceed. We can do similar for all <code>simp</code> calls, or for trying to delaborate types and (non-proof) values.</p>",
        "id": 231117451,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210313
    },
    {
        "content": "<p>If the lean 3 term contains something like <code>@foo _ _ (non_canonical_instance) ...</code> will this count as a failure?</p>",
        "id": 231117543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210432
    },
    {
        "content": "<p>no, it will succeed with the canonical instance, since the experiment script does not check definitional equality of the instances found</p>",
        "id": 231117549,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210439
    },
    {
        "content": "<p>Was I wrong to assume that this happened rarely enough not to have a big effect on the numbers?</p>",
        "id": 231117644,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210527
    },
    {
        "content": "<p>Well there might not be a canonical instance, for example if a local instance is being used</p>",
        "id": 231117659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210563
    },
    {
        "content": "<p>or <code>haveI</code></p>",
        "id": 231117675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210582
    },
    {
        "content": "<p>I think it happens enough that the 0.03% figure is not unreasonable</p>",
        "id": 231117686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210601
    },
    {
        "content": "<p>I would start from the assumption that all failures are due to something like this</p>",
        "id": 231117698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210622
    },
    {
        "content": "<p>3%, not 0.03%</p>",
        "id": 231117699,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210627
    },
    {
        "content": "<p>I am confused though -- as long as the binder type is <code>instImplicit</code>, lean4 should add it to the local synth context</p>",
        "id": 231117756,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210671
    },
    {
        "content": "<p><code>haveI</code> is a tactic for when that's not enough</p>",
        "id": 231117764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210696
    },
    {
        "content": "<p>Because lean3 froze the instances at the colon, right? Lean4 doesn't do that.</p>",
        "id": 231117796,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210738
    },
    {
        "content": "<p>Actually I'm not sure what binder is used by <code>haveI</code>. Maybe it doesn't use a binder at all, and directly inserts the instance into the term</p>",
        "id": 231117801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210762
    },
    {
        "content": "<p>you might use <code>haveI</code> to introduce an instance coming from a <code>def</code>, which is not an instance because it makes the general instance search go crazy for one reason or another</p>",
        "id": 231117879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210822
    },
    {
        "content": "<p>Actually, lean4 doesn't even look at the binder-infos, it just checks if the type is a class: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Basic.lean#L838-L841\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Basic.lean#L838-L841</a></p>",
        "id": 231117909,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210881
    },
    {
        "content": "<p>lean 3 does the same</p>",
        "id": 231117963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210906
    },
    {
        "content": "<p>binder info only tells it when to trigger a typeclass search when using the theorem</p>",
        "id": 231117975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616210951
    },
    {
        "content": "<p>hold on, I will read the <code>haveI</code> documentation</p>",
        "id": 231117984,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616210986
    },
    {
        "content": "<p>A very crude search found 5500 uses of <code>@foo</code></p>",
        "id": 231118033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211011
    },
    {
        "content": "<p>plus 637 <code>haveI</code> and 755 <code>letI</code></p>",
        "id": 231118066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211047
    },
    {
        "content": "<p>also 253 <code>classical,</code></p>",
        "id": 231118093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211091
    },
    {
        "content": "<p>Are you sure <code>haveI</code> isn't only necessary because the local-instances weren't getting updated whenever you went inside a binder? in Lean4, whenever you descend into a pi/lambda, if the binding-domain is a class, you add to the local-instances</p>",
        "id": 231118135,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616211125
    },
    {
        "content": "<p>You would actually use <code>resetI</code> or <code>exactI</code> if that's the only reason typeclass search is failing</p>",
        "id": 231118163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211182
    },
    {
        "content": "<p><code>haveI</code> is for adding typeclass instances to the context, it's equivalent to <code>have := not_an_instance, resetI</code></p>",
        "id": 231118205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211235
    },
    {
        "content": "<p>but since <code>have</code> doesn't add a binder it's likely that when replaying terms mathport will only see <code>not_an_instance</code> being used in places where instance search will either fail or find something else</p>",
        "id": 231118286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211301
    },
    {
        "content": "<p>So we are on the same page, this works in Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.foo</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noHaveI</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨()⟩</span>\n  <span class=\"n\">foo</span> <span class=\"n\">Unit</span>\n</code></pre></div>",
        "id": 231118379,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616211386
    },
    {
        "content": "<p>Right, but I think that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">noHaveI</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨()⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"o\">()</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>will produce the term <code>@foo unit ⟨()⟩</code> which would count as a failure in mathport because the typeclass search <code>⟨()⟩ : Foo unit</code> will fail since there are no Foo instances</p>",
        "id": 231118468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211508
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">noHaveI</span>\n<span class=\"c1\">-- theorem noHaveI : Unit := (fun (h : Foo Unit) =&gt; foo Unit) { foo := Unit.unit }</span>\n</code></pre></div>",
        "id": 231118545,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616211610
    },
    {
        "content": "<p>If <code>haveI</code> produced the term <code>(\\lam [h : Foo unit], @foo () h) ⟨()⟩</code> then lean 4 would probably pick it up and it would be counted as a success, but I'm pretty sure that's not how it gets compiled</p>",
        "id": 231118551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211620
    },
    {
        "content": "<p>I will test this, by creating a simple lean3 file, porting it, and running the experiment on it.</p>",
        "id": 231118587,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616211677
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.foo</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noHaveI</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨()⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">unit</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">noHaveI</span>\n<span class=\"c1\">-- @foo unit (@Foo.mk unit unit.star)</span>\n</code></pre></div>",
        "id": 231118590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211693
    },
    {
        "content": "<p>wow...ok now I understand your concern</p>",
        "id": 231118632,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616211725
    },
    {
        "content": "<p><code>have</code> in term mode uses the lam-app trick, but <code>have</code> in tactic mode just creates a delayed substitution</p>",
        "id": 231118660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211783
    },
    {
        "content": "<p>It's interesting to ask which strategy is better - if terms are internally deduplicated then the delayed substitution approach is probably better, but it's liable to create very large tree terms so the system better be prepared to handle it</p>",
        "id": 231118733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616211889
    },
    {
        "content": "<p>Incidentally, I would have filtered that one anyway. An experimental detail I hadn't thought to post: since <code>inferType</code> was taking a crazy-long time on some terms, I was only calling it after checking that the app-function was a global instance. But there could still be a non-instance-instance inside the term that would case a failure.</p>",
        "id": 231118766,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616211947
    },
    {
        "content": "<p>Also, this one decl was taking an extremely long time to <code>inferType</code> on one of its subterms, so I blacklisted it: <code>equiv.equiv_congr_refl_left</code>. I will investigate later but if there is something funky about this term I should be aware of, please let me know</p>",
        "id": 231118861,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616212060
    },
    {
        "content": "<p>As in, you can't handle the proof of this theorem, or you can't handle when this theorem appears in other proofs?</p>",
        "id": 231118912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616212121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Asynth/near/231118660\">said</a>:</p>\n<blockquote>\n<p><code>have</code> in term mode uses the lam-app trick, but <code>have</code> in tactic mode just creates a delayed substitution</p>\n</blockquote>\n<p>FYI in Lean4, we get the same term in the <code>noHaveI</code> example above when using tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.foo</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noHaveI</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨()⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">Unit</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">noHaveI</span>\n<span class=\"c1\">-- theorem noHaveI : Unit := (fun (h : Foo Unit) =&gt; foo Unit) { foo := Unit.unit }</span>\n</code></pre></div>",
        "id": 231118933,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616212168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Asynth/near/231118912\">said</a>:</p>\n<blockquote>\n<p>As in, you can't handle the proof of this theorem, or you can't handle when this theorem appears in other proofs?</p>\n</blockquote>\n<p>I can't handle a subterm that appears either in the type or the proof of this theorem. Normally it would just heartbeat-timeout, but it must be triggering some rare, expensive computation that isn't checking heartbeats.</p>",
        "id": 231119002,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616212232
    },
    {
        "content": "<p>Another good milestone will be for <code>MetaM</code> to be able to type-check all of mathlib. It is much slower than the kernel, and much less performance-battle-tested.</p>",
        "id": 231119180,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616212501
    },
    {
        "content": "<p>Can you delaborate all of mathlib into lean 4 source files?</p>",
        "id": 231119213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616212550
    },
    {
        "content": "<p>Naive delaboration of proofs is a non-starter. I think an ambitious goal for now would be to delaborate (and re-elaborate) definitions and theorem statements.</p>",
        "id": 231119359,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616212763
    },
    {
        "content": "<p>I don't see anything suspicious in <code>equiv.equiv_congr_refl_left</code> except perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span> <span class=\"n\">u_3</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bg</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">equiv.has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">equiv.equiv_congr</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">bg</span><span class=\"o\">)</span>\n  <span class=\"n\">e</span>\n</code></pre></div>\n<p>which involves applying <code>coe_fn</code>, which is not obviously a function, to one too many arguments, so that typechecking it requires unfolding <code>equiv.has_coe_to_fun</code> to ensure that the first component is a function.</p>",
        "id": 231119365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616212789
    },
    {
        "content": "<p>But this should come up whenever you use <code>coe_fn</code> at all</p>",
        "id": 231119407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616212804
    },
    {
        "content": "<p>I haven't looked at the delaborator though, and Sebastian has (medium-term) plans to improve it. This is why I was thinking of instead experimenting with a heuristic proof-delaborator (trying to recover lets, rewrites, simps, ring, etc)</p>",
        "id": 231119507,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616212896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Asynth/near/231119359\">said</a>:</p>\n<blockquote>\n<p>Naive delaboration of proofs is a non-starter.</p>\n</blockquote>\n<p>Why is this? If the term is valid according to the lean 4 kernel, then it should be possible to delaborate, otherwise we will have the same issue as incompleteness of pp.all in lean 3</p>",
        "id": 231119508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616212905
    },
    {
        "content": "<p>Heuristic delaboration should be built on a foundation of 100% reliable but ugly delaboration</p>",
        "id": 231119572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616212975
    },
    {
        "content": "<p>Yes, we can do the experiment in-process, we just can't write them to files because the tree sizes will be too big.</p>",
        "id": 231119609,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616213029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Asynth/near/231119572\">said</a>:</p>\n<blockquote>\n<p>Heuristic delaboration should be built on a foundation of 100% reliable but ugly delaboration</p>\n</blockquote>\n<p>There are a few modular sub-problems though -- if lean3 annotates with e.g. <code>idSimp</code> and <code>idRing</code>, then we can make sure we can delaborate these, ideally into a tiny bit of syntax that the eventually-reliable delaborator can make use of</p>",
        "id": 231119699,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616213134
    },
    {
        "content": "<p>Thanks for your help tonight. I am going to sleep now.</p>",
        "id": 231119814,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616213268
    },
    {
        "content": "<p>Maybe a good next step would be to backport <code>Expr.mdata</code> to lean 3, so that we can have general annotations on things without affecting tactics (for the most part). Right now all the annotation support is wrapped up in <code>MacroDef</code>, which is opaque to lean</p>",
        "id": 231120024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213481
    },
    {
        "content": "<p>What are you doing with macros anyway? If you are unfolding them then perhaps we can do better by aligning the macros and not unfolding unless necessary.</p>",
        "id": 231120171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213643
    },
    {
        "content": "<p>I found the source of the infinite loop in <code>equiv.equiv_congr_refl_left</code> -- the term has wild levels which exposed the following typo/bug: <a href=\"https://github.com/leanprover/lean4/pull/359\">https://github.com/leanprover/lean4/pull/359</a></p>",
        "id": 231151910,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616253059
    },
    {
        "content": "<p>I am unfolding all macros during the <code>tlean</code> export. I would prefer adding custom <code>id&lt;x&gt;</code> annotations, that may if necessary include additional arguments with special meta-data that I decode during mathport. Note: I already decode lean3 names during mathport for the <code>autoParam</code> translation.</p>",
        "id": 231152088,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616253299
    },
    {
        "content": "<p>I think that before I even analyze the typeclass experiment, I will try to typecheck all of mathlib in MetaM, because any issues there could manifest in the synth experiment in more subtle ways.</p>",
        "id": 231152202,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616253431
    },
    {
        "content": "<p>Interesting. Is that a soundness bug?</p>",
        "id": 231153531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616254954
    },
    {
        "content": "<p>No this is only in MetaM, nothing to do with the kernel</p>",
        "id": 231153621,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616255086
    },
    {
        "content": "<p>Regarding <code>mdata</code>: using <code>id</code> only works if your metadata is an <code>expr</code>. Lean 4's <code>mdata</code> lets you attach strings and numbers and things like that as well</p>",
        "id": 231153644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616255117
    },
    {
        "content": "<p>Yes but we can decode structured data from expressions when we know the type, as I do to decode names for auto-param: <a href=\"https://github.com/dselsam/mathport/blob/master/MathPort/Util.lean#L165-L173\">https://github.com/dselsam/mathport/blob/master/MathPort/Util.lean#L165-L173</a></p>",
        "id": 231153719,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616255183
    },
    {
        "content": "<p>I mean you can use <code>evalExpr</code> but that seems inefficient. I know typed user attributes have had issues along these lines</p>",
        "id": 231153782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616255251
    }
]