[
    {
        "content": "<p>I've been translating my lean3 TPIL code to lean4, and have run into a weird issue. </p>\n<p>I have the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.intro</span> <span class=\"n\">h.left.left</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">h.left.right</span> <span class=\"n\">h.right</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">h.left</span> <span class=\"n\">h.right.left</span><span class=\"o\">)</span> <span class=\"n\">h.right.right</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which typechecks just fine. If I write the word <code>thoerem</code> under it,  I immediately get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"o\">{</span> <span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">h.left.left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">h.left.right</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">h.right</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">mpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">h.right.left</span> <span class=\"o\">},</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">h.right.right</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span>\n</code></pre></div>\n<p>if, instead, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>everything typechecks just fine.</p>\n<p>If, under <em>that</em> <code>example</code>, I write <code>theorem</code>, I get the error at the <code>sorry</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">sorryAx</span> <span class=\"bp\">?</span><span class=\"n\">m.375</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.375</span>\n</code></pre></div>",
        "id": 301284962,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664385220
    },
    {
        "content": "<p>This looks like a syntax error. You claim something typechecks just fine. What happens if you put <code>#exit</code> directly after it?</p>",
        "id": 301285594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664385396
    },
    {
        "content": "<p>I have it now -- I misspelled <code>theorem</code> as <code>thoerem</code>, which triggers the odd behavior.</p>\n<p><code>#exit</code> has everything typechecking fine btw. The word <code>thoerem</code> sends lean4 into an odd place.</p>",
        "id": 301286015,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664385511
    },
    {
        "content": "<p>inserting the word <code>thoerem</code> anywhere seems to send the typechecker mad.</p>",
        "id": 301286195,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664385580
    },
    {
        "content": "<p>That's a red herring -- any invalid word creates a strange type error -- is there an issue tracker or bug reporting system where I can post this?</p>",
        "id": 301286561,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664385686
    },
    {
        "content": "<p>What's happening is that <code>thoerem</code> is an identifier, so Lean parses <code>Iff.intro blah blah thoerem</code> as a function application.</p>\n<p>I haven't thought about whether there are any problems doing so, but it would be nice to report unknown identifiers when there is another error like this.</p>",
        "id": 301289442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664386547
    },
    {
        "content": "<p>With the <code>sorry</code> example, again it's <code>sorry thoerem</code> so it's trying to use <code>sorry</code> as a function, which Lean doesn't allow in a direct way like this.</p>",
        "id": 301289633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664386612
    }
]