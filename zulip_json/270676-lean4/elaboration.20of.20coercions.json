[
    {
        "content": "<p>I'm still wrestling with the new normal for coercions. In Lean 3 I was familiar with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.with_one.defs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">coe_inv</span> <span class=\"c1\">-- ↑a⁻¹ = (↑a)⁻¹</span>\n</code></pre></div>\n<p>What happens here is that the LHS has type <code>with_one \\alpha</code> (a type synonym for <code>option \\alpha</code>) so <code>inv</code> is elaborated as <code>with_one.inv</code> and then <code>a</code> is coerced from <code>\\alpha</code>to <code>with_one \\alpha</code>. In Lean 4 this common mathlib idiom behaves differently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Invert an element of α. -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Option.none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option.none</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Option.some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option.some</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_inv</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">coe_inv</span> <span class=\"c1\">-- some a⁻¹ = some a⁻¹</span>\n</code></pre></div>\n<p>For some reason elaboration is behaving differently; the same code is giving us a syntactic tautology. This looks like something which we'll have to be careful about when porting. Why is it happening, out of interest? Of course it's easily fixed with <code>(a : Option α)⁻¹</code> but this is everywhere in mathlib.</p>",
        "id": 313727754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670096751
    },
    {
        "content": "<p><code> ((a⁻¹ : α) : Option α) = (↑a)⁻¹</code> works, by the way (and is what I'm using on the ground)</p>",
        "id": 313729574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670098206
    },
    {
        "content": "<p>this looks like something that should be reported as an issue</p>",
        "id": 313757183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670122287
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1915\">https://github.com/leanprover/lean4/issues/1915</a></p>",
        "id": 313822756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670167315
    },
    {
        "content": "<p>Presumably <code>↑(a⁻¹) = ((↑a)⁻¹ : Option α)</code> also works?</p>",
        "id": 313827289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670169760
    }
]