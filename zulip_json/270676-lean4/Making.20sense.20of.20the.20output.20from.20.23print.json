[
    {
        "content": "<p>If I define a function or theorem and then #print it, it gives the elaborated lambda expression, but when I copy and paste it as the definition of the function it doesn't type check. Is this a whitespace issue or am I just misunderstanding something basic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.add</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">nat.add</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">protected def nat.add : nat → nat → nat :=</span>\n<span class=\"cm\">fun (a b : nat) =&gt;</span>\n<span class=\"cm\">  nat.brecOn b</span>\n<span class=\"cm\">    (fun (b : nat) (f : nat.below b) (a : nat) =&gt;</span>\n<span class=\"cm\">      (match a, b with</span>\n<span class=\"cm\">        | a, zero =&gt; fun (x : nat.below zero) =&gt; a</span>\n<span class=\"cm\">        | a, succ b =&gt; fun (x : nat.below (succ b)) =&gt; succ (PProd.fst x.fst a))</span>\n<span class=\"cm\">        f)</span>\n<span class=\"cm\">    a</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- this gives an error:</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.add'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">nat.brecOn</span> <span class=\"n\">b</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat.below</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat.below</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n        <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat.below</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">PProd.fst</span> <span class=\"n\">x.fst</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 238568080,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620868999
    },
    {
        "content": "<p>Known issue: <a href=\"https://github.com/leanprover/lean4/issues/368\">https://github.com/leanprover/lean4/issues/368</a></p>",
        "id": 238568146,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1620869048
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 238568296,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620869188
    }
]