[
    {
        "content": "<p>Hey, I am new to Lean/Lean4. I have a lot of software experience and am a math/comp sci student, but I am really struggling to comprehend the process of solving a proof.</p>\n<p>I have been reading the docs in-and-out and attempting to solve something of my own.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">notation</span> <span class=\"n\">m</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">divides</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">evens_are_2n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Mathematically, I know this is a simple proof, having that, in general, you do a case by case proof, showing that only evens are in the form <code>n=2*m</code>. In this proof, I understand that there is the implication of being provided that <code>n | 2</code>, so all you'd need to do is show that there is an m that satisfies.</p>\n<p>I am having trouble getting this into lean notation, and would very much appreciate it if someone can show me an example solution(s) and the process behind the reasoning for the code. </p>\n<p>Thank you very much for your time!</p>",
        "id": 252966571,
        "sender_full_name": "Phillip",
        "timestamp": 1631431329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439506\">@Phillip</span> Usually we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>∣</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">k \\mid n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> for \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>\" (aka, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>c</mi><mo separator=\"true\">,</mo><mi>n</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">\\exists c, n = k * c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, aka <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\% k = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>",
        "id": 252966717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431506
    },
    {
        "content": "<p>Also, currently there is a lot more tutorials and learning material out there for Lean 3. We are currently preparing the transition to Lean 4, but this will take another X months before it is finished.</p>",
        "id": 252966793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431579
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 252966803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431597
    },
    {
        "content": "<p>Ahh! Thanks for that, silly typo</p>",
        "id": 252966813,
        "sender_full_name": "Phillip",
        "timestamp": 1631431613
    },
    {
        "content": "<p>(Note that you can edit messages on Zulip, in case you want to fix the typo <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 252966829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431646
    },
    {
        "content": "<p>Concerning your particular proof. You'll want to provide a witness <code>m</code>. The obvious choice would be <code>n / 2</code>. And then you need to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>under the assumption <code>n % 2 = 0</code>.</p>",
        "id": 252966898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431700
    },
    {
        "content": "<p>That looks like something that you can prove by induction.</p>",
        "id": 252966908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20understanding.20the.20theorem.20process/near/252966793\">said</a>:</p>\n<blockquote>\n<p>Also, currently there is a lot more tutorials and learning material out there for Lean 3. We are currently preparing the transition to Lean 4, but this will take another X months before it is finished.</p>\n</blockquote>\n<p>And yeah, I may end up doing that. I very much enjoy the lean4 syntax and thought that since I am only doing bare basics, by the time I am anywhere near proficient, it would release haha. But like you said, I may be better off doing lean 3 and those tutorials</p>",
        "id": 252966925,
        "sender_full_name": "Phillip",
        "timestamp": 1631431747
    },
    {
        "content": "<p>I think that when you are starting out, the Lean 3 syntax and Lean 4 syntax are similar enough that it shouldn't matter for your first experiments.</p>",
        "id": 252966998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631431821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20understanding.20the.20theorem.20process/near/252966908\">said</a>:</p>\n<blockquote>\n<p>That looks like something that you can prove by induction.</p>\n</blockquote>\n<p>I see, thanks! I will get looking into that (and lean 3 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 252967006,
        "sender_full_name": "Phillip",
        "timestamp": 1631431835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20understanding.20the.20theorem.20process/near/252966998\">said</a>:</p>\n<blockquote>\n<p>I think that when you are starting out, the Lean 3 syntax and Lean 4 syntax are similar enough that it shouldn't matter for your first experiments.</p>\n</blockquote>\n<p>I will def go back and give it a good look. Thank you :)</p>",
        "id": 252967024,
        "sender_full_name": "Phillip",
        "timestamp": 1631431872
    },
    {
        "content": "<p>Is it me or is this theorem false? It seems to me that the original question is asking to prove that if n=1 or n=2 then n is even, which is false</p>",
        "id": 252967027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631431878
    },
    {
        "content": "<p>Note that <code>divides x y</code> would be pronounced \"y divides x\" by a mathematician</p>",
        "id": 252967104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631431960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Trouble.20understanding.20the.20theorem.20process/near/252967027\">said</a>:</p>\n<blockquote>\n<p>Is it me or is this theorem false? It seems to me that the original question is asking to prove that if n=1 or n=2 then n is even, which is false</p>\n</blockquote>\n<p>Yeah, I messed up the definition. Probably another reason I have had issues with getting it proven haha</p>",
        "id": 252967140,
        "sender_full_name": "Phillip",
        "timestamp": 1631432022
    },
    {
        "content": "<p>I don't think you did mess up the definition, this is my point</p>",
        "id": 252967196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631432069
    },
    {
        "content": "<p>I think you messed up the theorem</p>",
        "id": 252967202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631432082
    },
    {
        "content": "<p>Oh ok you changed it</p>",
        "id": 252967216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631432111
    }
]