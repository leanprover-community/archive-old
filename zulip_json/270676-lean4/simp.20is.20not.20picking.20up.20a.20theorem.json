[
    {
        "content": "<p>In this particular case, the <code>simp</code> tactic does not simplify the target with theorem  <code>foo</code> even though <code>rw [foo]</code> solves it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span>  <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span>  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span>  <span class=\"n\">id</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>    <span class=\"c1\">--- Why is foo not used here?</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>What is going on here?</p>",
        "id": 254789487,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632527765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Could it be that <code>simp</code> does not work on partial application equalities?</p>",
        "id": 254790655,
        "sender_full_name": "Mac",
        "timestamp": 1632528558
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 254790766,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632528621
    },
    {
        "content": "<p>I mean does <code>simp</code> try to look for theorems of partial subsets of an application? It may just look for theorems about the individual component terms (i.e., <code>f</code>, <code>add u</code>, <code>v</code>) and the full term (e.g., <code>f (add u) v</code>), but not for the partial term (e.g., <code>f (add u)</code>).</p>",
        "id": 254791101,
        "sender_full_name": "Mac",
        "timestamp": 1632528911
    },
    {
        "content": "<p>Yes it does look for subexpressions. If you add this extra theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo2</span>  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Then the first <code>simp</code> rewrites the goal to <code>f (add (id u)) v = v</code></p>",
        "id": 254791850,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632529494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> That is a very different kind of subexpression. That falls under the category of 'individual component terms' I mentioned. Polyadic applications in Lean 4 are a single <code>Syntax</code>-- thus <code>f (add u)</code> is not a sub--<code>Syntax</code> of <code>f (add u) v</code>, it is merely a slice of the full application <code>Syntax</code>. Thus, <code>simp</code> may not be considering such slices.</p>",
        "id": 254792231,
        "sender_full_name": "Mac",
        "timestamp": 1632529807
    },
    {
        "content": "<p>However, this is just a hypothesis of mine as to what the problem may be. <code>simp</code> very well may look for theorems of said partial applications and this could just be a bug. I am sadly not an expert on how <code>simp</code> works, but such a thing <em>could</em> be the reason one why your example does not work.</p>",
        "id": 254792480,
        "sender_full_name": "Mac",
        "timestamp": 1632530040
    },
    {
        "content": "<p>Makes sense now. I will investigate if that is really the problem or not.</p>",
        "id": 254793646,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632530943
    },
    {
        "content": "<p>I fixed this issue. The example above should now work with <code>master</code>.</p>",
        "id": 254850376,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1632585768
    },
    {
        "content": "<p>Huge huge thanks! Works perfectly. I'm trying to build an automatic differentiation tool and this started looking as a bigger and bigger problem.</p>",
        "id": 255033080,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632742755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20is.20not.20picking.20up.20a.20theorem/near/254792231\">said</a>:</p>\n<blockquote>\n<p>Polyadic applications in Lean 4 are a single <code>Syntax</code></p>\n</blockquote>\n<p>Note that tactics work on the elaborated <code>Expr</code> level, which uses binary applications</p>",
        "id": 255041951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632747087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Yeah, that may me a bit unsure of my statement, but looking at <a href=\"https://github.com/leanprover/lean4/commit/1282fb2d97bc45873c050aa62f95a263c528f68d\">the fix</a> Leo made, it seems there are many places even at the <code>Expr</code> level where said binary applications are convert back into an <code>Array</code>.</p>",
        "id": 255077894,
        "sender_full_name": "Mac",
        "timestamp": 1632760138
    },
    {
        "content": "<p>sure</p>",
        "id": 255078091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632760204
    }
]