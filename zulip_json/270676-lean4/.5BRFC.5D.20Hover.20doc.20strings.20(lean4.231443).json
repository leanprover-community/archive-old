[
    {
        "content": "<p>Cross-posting <a href=\"https://github.com/leanprover/lean4/pull/1443\">lean4#1443</a> for visibility.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- doc string on the syntax -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">fooSyntax</span><span class=\"o\">)</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"sd\">/-- doc string on the elab -/</span>\n<span class=\"kd\">@[termElab fooSyntax]</span> <span class=\"kd\">def</span> <span class=\"n\">fooElab</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"stuff\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n    <span class=\"c1\">-- ^^^ hover here</span>\n</code></pre></div>\n<p>Should the hover say \"doc string on the syntax\" or \"doc string on the elab\"?</p>",
        "id": 292328950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659891501
    },
    {
        "content": "<p>Why not both?</p>",
        "id": 292328986,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1659891575
    },
    {
        "content": "<p>Currently, the syntax doc string will be something like a description of <code>foo</code> and what it's supposed to do, while the elab doc string will be a more code-reader facing description of what that particular elab does (there might be more than one macro / elab to a single syntax). I don't think showing them both will be helpful for users</p>",
        "id": 292329076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659891689
    },
    {
        "content": "<p>Of course, the contents of the doc strings will be influenced by the answer to this question, but if it's \"both\" then I don't really know what you should be writing in each place</p>",
        "id": 292329140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659891738
    },
    {
        "content": "<p>No, currently the most common case is that we have an elab doc string documenting the notation and no syntax doc string, I believe</p>",
        "id": 292329344,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659892051
    },
    {
        "content": "<p>not since I went through and documented every tactic</p>",
        "id": 292329562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659892431
    },
    {
        "content": "<p>before that there were no syntax docs and extremely few elab docs (and the elab docs were not particularly user-facing)</p>",
        "id": 292329619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659892481
    },
    {
        "content": "<p>Okay, I was thinking about built-in syntax <a href=\"https://github.com/leanprover/lean4/commit/4063729b6cbb20b558662e6f2d81915eab98329c\">https://github.com/leanprover/lean4/commit/4063729b6cbb20b558662e6f2d81915eab98329c</a></p>",
        "id": 292329885,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659892904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Hover.20doc.20strings.20.28lean4.231443.29/near/292329885\">said</a>:</p>\n<blockquote>\n<p>Okay, I was thinking about built-in syntax</p>\n</blockquote>\n<p>Why do it this way? It seems like it would make much more sense to explain what syntax is suppose to do on the syntax, not a some elaborator found elsewhere deep in core. There is also now a consistency concern as all the tactics are documented on their syntax whereas builtin syntax is documented on their elaborator.</p>",
        "id": 292346571,
        "sender_full_name": "Mac",
        "timestamp": 1659913611
    },
    {
        "content": "<p>Originally it was for consistency with go-to-definition (<span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> mentioned that this is not a problem because we have go-to-declaration for jumping to the syntax, though I still think it matters that goto-def is the <em>default</em> action in most editors). But for the syntax/macro mix in <code>Init.Notation/Tactics</code> it does make more sense on the syntax, so I'm okay with relocating the built-in doc strings as well.</p>",
        "id": 292377318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659949863
    },
    {
        "content": "<p>Another concern was blowing up the quite dense <code>Lean.Parser</code> modules with long docstrings, though it would be great to solve that with tooling via code folding</p>",
        "id": 292377413,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659949924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Hover.20doc.20strings.20.28lean4.231443.29/near/292377413\">said</a>:</p>\n<blockquote>\n<p>Another concern was blowing up the quite dense <code>Lean.Parser</code> modules with long docstrings, though it would be great to solve that with tooling via code folding</p>\n</blockquote>\n<p>IMHO, those files should be split up in one file per item containing contains both the syntax definition and the elaborator.  (Ideally written using a future <code>builtin elab ...</code>.)</p>",
        "id": 292377521,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1659950016
    },
    {
        "content": "<p>That would be nice for code organization, but it might be less nice for build times. Specifically, the <code>parseQuotWithCurrentStage</code> bootstrapping trick depends importing all parsers used in a quotation. If that imports the elaborators as well (say, <code>Elab.App</code>), we could lose a good deal of concurrency.</p>",
        "id": 292377928,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659950328
    },
    {
        "content": "<p>On the other hand, we would avoid massive rebuilds when changing parsers like <code>default_or_ofNonempty%</code> that are only used in a single place.  I'm not sure if the net effect is positive or negative.</p>",
        "id": 292378650,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1659950808
    },
    {
        "content": "<p>Yeah, hard to say. Though that kind of change often comes with an update-stage0 total rebuild anyway :) .</p>",
        "id": 292379093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659951130
    }
]