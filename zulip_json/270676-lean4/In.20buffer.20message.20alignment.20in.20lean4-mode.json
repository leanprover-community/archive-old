[
    {
        "content": "<p>The message with #check or #print shows the message aligned to the right and quite often the message does not show fully, see attached picture.</p>\n<p><a href=\"/user_uploads/3121/8jv8de6-7itQaWov0ovWM51S/Screenshot-from-2022-05-11-10-52-36.png\">Screenshot-from-2022-05-11-10-52-36.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8jv8de6-7itQaWov0ovWM51S/Screenshot-from-2022-05-11-10-52-36.png\" title=\"Screenshot-from-2022-05-11-10-52-36.png\"><img src=\"/user_uploads/3121/8jv8de6-7itQaWov0ovWM51S/Screenshot-from-2022-05-11-10-52-36.png\"></a></div><p>I'm not entirely sure if it is problem in <code>lean4-mode</code>, some other part of emacs or my config. Anyway, I was unable to figure out where the problem is. Does this happen to someone else? How can it be fixed?</p>",
        "id": 281935720,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652259470
    },
    {
        "content": "<p>I also have this (also with the Haskell LSP plugin). Don't know what to do about it so I always use the goal buffer.</p>",
        "id": 281936396,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652259810
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/emacs-lsp/lsp-ui#lsp-ui-sideline\">https://github.com/emacs-lsp/lsp-ui#lsp-ui-sideline</a></p>",
        "id": 281936680,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652259971
    },
    {
        "content": "<p>Not exactly much to customize there</p>",
        "id": 281936794,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652260068
    },
    {
        "content": "<p>Interesting, I increased <code>lsp-ui-sideline-diagnostic-max-</code> <code>line-length</code>/<code>lines</code> and the local context now shows up, neat. But still does not solve the problem with cutting off the end of the line:<br>\n<a href=\"/user_uploads/3121/E1PlLC8Z7AS_RJBXbvchVFSp/Screenshot-from-2022-05-11-11-14-25.png\">Screenshot-from-2022-05-11-11-14-25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/E1PlLC8Z7AS_RJBXbvchVFSp/Screenshot-from-2022-05-11-11-14-25.png\" title=\"Screenshot-from-2022-05-11-11-14-25.png\"><img src=\"/user_uploads/3121/E1PlLC8Z7AS_RJBXbvchVFSp/Screenshot-from-2022-05-11-11-14-25.png\"></a></div>",
        "id": 281937731,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652260617
    },
    {
        "content": "<p>Ah, I think this is a problem with Unicode characters, which probably screw up some internal size measurements</p>",
        "id": 281938018,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652260788
    },
    {
        "content": "<p>Even in C++ it just either cuts off the line or does not show the line at all.</p>",
        "id": 281938513,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652261058
    },
    {
        "content": "<p>Note that it is not cut off in your last example, the <code>Y</code> is wrapped to the beginning of the next line</p>",
        "id": 281939070,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652261386
    },
    {
        "content": "<p>True, but in the first example it is cut off.</p>",
        "id": 281939156,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652261431
    },
    {
        "content": "<p>Some experimentation in C++:</p>\n<p>High <code>line-length</code><br>\n<a href=\"/user_uploads/3121/93gatghJn9xUOFIRyAjHGSCk/Screenshot-from-2022-05-11-11-25-39.png\">Screenshot-from-2022-05-11-11-25-39.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/93gatghJn9xUOFIRyAjHGSCk/Screenshot-from-2022-05-11-11-25-39.png\" title=\"Screenshot-from-2022-05-11-11-25-39.png\"><img src=\"/user_uploads/3121/93gatghJn9xUOFIRyAjHGSCk/Screenshot-from-2022-05-11-11-25-39.png\"></a></div><p>Normal <code>line-length</code>, you can see the cut off at  <code>... of type 'const</code> <br>\n<a href=\"/user_uploads/3121/7sH5SvE-3q_966jhsvHCcnWK/Screenshot-from-2022-05-11-11-26-05.png\">Screenshot-from-2022-05-11-11-26-05.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7sH5SvE-3q_966jhsvHCcnWK/Screenshot-from-2022-05-11-11-26-05.png\" title=\"Screenshot-from-2022-05-11-11-26-05.png\"><img src=\"/user_uploads/3121/7sH5SvE-3q_966jhsvHCcnWK/Screenshot-from-2022-05-11-11-26-05.png\"></a></div>",
        "id": 281939175,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652261456
    },
    {
        "content": "<p>It tries to do some really smart stuff, like find a line where the message fits and display it there.  I kind of liked the lean3 behavior where it just add extra lines under #check</p>",
        "id": 281939379,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652261592
    },
    {
        "content": "<p>I think that was <a href=\"https://github.com/leanprover/lean-mode/blob/master/lean-message-boxes.el\">https://github.com/leanprover/lean-mode/blob/master/lean-message-boxes.el</a> by <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> . It shouldn't be too hard to port.</p>",
        "id": 281943741,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652264357
    },
    {
        "content": "<p>I'd be happy to explain that code to anyone who needs it, but I don't have time to port it myself right now.</p>\n<p>Perhaps it should be generalized into a library that can work with lsp-mode, eglot, or other sources of metadata about a program, and then give it a Lean/LSP backend for this case? It seems like it would be useful for non-LSP data sources as well, like racket-xp-mode, flymake/flycheck, or even M-x compile output.</p>\n<p>I can walk you through the design of something like that in my head, and explain the UI code, and generally mentor the elisp development.</p>",
        "id": 281944167,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1652264604
    },
    {
        "content": "<p>FWIW I don't use lsp-ui at all, and the Lean info buffer is also a reasonable way to see these things for my uses, and it doesn't suffer from the constraints of having to put the messages inline in the buffer text.</p>",
        "id": 281944298,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1652264673
    }
]