[
    {
        "content": "<p>I am probably doing something stupid, but I am trying to import modules dynamically (including one generated by binport) and hitting the following segfault:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Program</span> <span class=\"n\">received</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSEGV</span><span class=\"o\">,</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault.</span>\n<span class=\"mi\">0x00005555569783b5</span> <span class=\"k\">in</span> <span class=\"n\">l_IO_ofExcept___at_Lean_Parser_mkParserOfConstantUnsafe___spec__2</span> <span class=\"o\">()</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x00005555569783b5</span> <span class=\"k\">in</span> <span class=\"n\">l_IO_ofExcept___at_Lean_Parser_mkParserOfConstantUnsafe___spec__2</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x0000555556979458</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_Parser_mkParserOfConstantUnsafe___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x000055555697f247</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Parser_Extension_0__Lean_Parser_ParserExtension_OLeanEntry_toEntry</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0x000055555846bc4b</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0x0000555557699bed</span> <span class=\"k\">in</span> <span class=\"n\">l_Array_forInUnsafe_loop___at_Lean_ScopedEnvExtension_addImportedFn___spec__2___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0x000055555769acc8</span> <span class=\"k\">in</span> <span class=\"n\">l_Array_forInUnsafe_loop___at_Lean_ScopedEnvExtension_addImportedFn___spec__3___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0x000055555769b777</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_ScopedEnvExtension_addImportedFn___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">7</span>  <span class=\"mi\">0x000055555769bc51</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_ScopedEnvExtension_addImportedFn___rarg___boxed</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">8</span>  <span class=\"mi\">0x000055555846a236</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_3</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">9</span>  <span class=\"mi\">0x000055555768933d</span> <span class=\"k\">in</span> <span class=\"n\">l___private_Lean_Environment_0__Lean_finalizePersistentExtensions_loop</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">10</span> <span class=\"mi\">0x000055555768dc41</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_importModules___lambda__3</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">11</span> <span class=\"mi\">0x0000555558468e30</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_2</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">12</span> <span class=\"mi\">0x0000555558466cd7</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">13</span> <span class=\"mi\">0x00005555576a862e</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_withImporting___rarg</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>A self-contained repro would take some work, so if anyone has any immediate hypotheses about what the issue might be, that would be helpful. Thanks.</p>",
        "id": 252930124,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1631388611
    },
    {
        "content": "<p>Clarification: it is easy to provide a recipe to reproduce that involves running mathport to generate an <code>.olean</code>.</p>",
        "id": 252931735,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1631390550
    },
    {
        "content": "<p>Update: I think I isolated the problem, working on a repro...</p>",
        "id": 252932594,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1631391568
    },
    {
        "content": "<p>It is sensitive to almost every weird detail in that directory. Also, the repro suggests a workaround for the issue, so I am not blocked on this anymore.</p>",
        "id": 252939775,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1631399211
    }
]