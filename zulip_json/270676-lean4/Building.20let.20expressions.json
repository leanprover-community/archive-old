[
    {
        "content": "<p>I have been experimenting with building expressions and most are working very nicely with the helpers. However I am struggling with <code>let</code> expressions. The following is wrong code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">minlet</span><span class=\"o\">)</span> <span class=\"s2\">\"minlet!\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[termElab minlet]</span> <span class=\"kd\">def</span> <span class=\"n\">minletImpl</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Name.mkSimple</span> <span class=\"s2\">\"n\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat.zero</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span>\n  <span class=\"n\">withLetDecl</span> <span class=\"n\">n</span> <span class=\"n\">ty</span> <span class=\"n\">z</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mkLet</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">mkFVar</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">minlet</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>The command <code>#check minlet!</code> gives \"unknown free variable n\". I tried a few variants like using <code>mkConst n</code> and using <code>x</code> but clearly I am making a more basic mistake (I also tried skipping the <code>withLetDecl</code> part). </p>\n<p>Can someone help me by saying what is the correct way to refer to the name in the body of the let declaration?<br>\nThanks.</p>",
        "id": 252143717,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630917249
    },
    {
        "content": "<p>Note that (this) <code>mkLet</code> is not monadic, so that's a good hint that it is not supposed to be used together with <code>withLetDecl</code>. The correct function, from the same <code>Lean.Meta</code> namespace as <code>withLetDecl</code>, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mkLetFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 252145664,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630918274
    },
    {
        "content": "<p>Thanks a lot. That fixed the minimal case. I will try to fix the real case too (needs nested do's).</p>",
        "id": 252147192,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630918991
    }
]