[
    {
        "content": "<p>My meta-programming experience was thinking “hey, wouldn’t it be nice to have <em>open</em> inductive predicates and types”, finding a master student to play around with that, and now <em>he’s</em> a fan of SML, but I haven't learned much more :-)</p>",
        "id": 273658131,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646148651
    },
    {
        "content": "<p>But <code>auto</code> is pretty good indeed, with the automatic application of intro and elim rules in addition to <code>simp</code>, which is <em>itself</em> already pretty good compared to Lean’s <code>simp</code> (as far as I can tell), with the ability to do rewriting with congruences. I am not sure whether my comments can be <em>actually</em> useful though :-)</p>",
        "id": 273658360,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646148732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> So I gave Aesop a try on a non-trivial proof from our lab course today and it got further than I expected! <a href=\"https://gist.github.com/Kha/5babc9f0ac38d4f8f6094fb5cf3a69d9#file-exercise5-lean-L55\">https://gist.github.com/Kha/5babc9f0ac38d4f8f6094fb5cf3a69d9#file-exercise5-lean-L55</a><br>\nI had to help it out a bit with the <code>filter</code> case analysis, without the extra <code>simp_all</code> the conditional <code>filter_cons_true/false</code> simp theorems didn't seem to get applied. I also tried to apply a custom elim/split theorem <code>elem_filterE</code>, but I don't think that's quite the shape Aesop expects right now (see commented invocation). If it did, it would seem feasible to contract the entire proof to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 282613089,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652779700
    },
    {
        "content": "<blockquote>\n<p>but I don't think that's quite the shape Aesop expects right now</p>\n</blockquote>\n<p>Ah, I suppose I confused your <code>elim</code> rules (transformation of a hypothesis, called <code>destruct</code> in Isabelle) with what Isabelle calls <code>elim</code> (transformation of the goal triggered by a hypothesis)</p>",
        "id": 282619949,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652783824
    },
    {
        "content": "<p>Indeed that's what it is. Maybe I should rename the builder for consistency with Isabelle.</p>\n<p>I have a collaborator visiting this week, so might not have time to look into this, but I'll get to it next week at the latest. I recently weakened the builtin <code>simp</code> to the equivalent of <code>simp at *</code>, which allows me to cache across goals. But this doesn't seem to do very much (surprisingly), so maybe I'll go back to <code>simp_all</code>. In any case, I'm very happy to hear that you found the tactic (close to) useful.</p>",
        "id": 282696865,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652816788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20update/near/273529264\">said</a>:</p>\n<blockquote>\n<p>This might already be the case for Aesop, but I should mention that perhaps <code>auto</code>'s best feature is that despite its heuristics, it reports sensible intermediate goals on failure that usually give you a pretty good idea on what lemma to prove &amp; include next</p>\n</blockquote>\n<p>I've continued experimenting with Aesop by throwing it at the same lab course final project that was previously golfed to death in Isabelle, and I'm really excited about how close we can already get to the <code>auto</code> proofs in some cases. However, I realized that in the quote above I only told half the story: in reality, <code>auto</code> does not error on an unclosed proof at all but returns the unrpoved goal(s), much like <code>simp</code>. Both of them should only be used in terminal position in a clean proof of course, but for experimentation it is in fact crucial that you can continue after half-solving a proof with <code>auto</code>, then try a few manual steps, and finally reintegrate them back into the <code>auto</code> call. Afaict this is the only reliable way of composing a proof from multiple \"unsafe\" steps, as neither <code>auto</code> nor <code>aesop</code> will (or should) show you the remaining goals after heuristically applying unsafe steps without delving into their enormous traces.</p>",
        "id": 285695249,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654876327
    },
    {
        "content": "<p>Okay, I can add this as well. Should (tm) be a relatively small modification to the proof extraction procedure.</p>",
        "id": 285714424,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1654885336
    },
    {
        "content": "<p>I should say that one of the features I like a lot with <code>auto</code> in Isabelle is that you can tell it to perform some unsafe steps. For instance, <code>auto intro: foo</code> will try to apply <code>foo</code> if it leads to completion, but <code>auto intro!: foo</code> will apply <code>foo</code> even if it does not lead to a complete proof. This may make the goal unsolvable, but when you know it's the way to go then it is very efficient. For instance, it is possible that a function <code>f + g</code> is continuous without <code>f</code> and <code>g</code> being continuous, but in most cases it is the way to go to try to prove the continuity of both <code>f</code> and <code>g</code>. Then <code>auto intro!: continuous_add</code> would leave you with the two goals that <code>f</code> and <code>g</code> are continuous.</p>",
        "id": 285716423,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1654886319
    },
    {
        "content": "<p>Aesop can already do this: if you call it with <code>aesop (add safe foo)</code>, it'll use <code>foo</code> as a 'safe' rule that is applied without backtracking. The unsolved goals which Aesop reports to the user are exactly those which are left after all safe rules have been applied (as often as possible).</p>\n<p>Aesop does not currently remove an unsafe <code>foo</code> rule if one is already registered, but that hopefully doesn't make much of a difference.</p>",
        "id": 285717790,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1654887028
    },
    {
        "content": "<p>Demo of Aesop already doing a job as least as good/slightly better than CoqHammer's internal solver (i.e. the non-hammer part): <a href=\"https://gist.github.com/Kha/96d67c8b947b48f8786aea90857fbb5c\">https://gist.github.com/Kha/96d67c8b947b48f8786aea90857fbb5c</a></p>",
        "id": 286638372,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655540145
    },
    {
        "content": "<p>That's incredible. How fast is aesop on that example?</p>",
        "id": 286663594,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655575840
    },
    {
        "content": "<p>also, is it possible yet for aesop to emit the tactic steps it finds, sorta like <code>simp?</code> behavior?</p>",
        "id": 286663653,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655575949
    },
    {
        "content": "<p>I'll have to do a more thorough benchmark when I'm back at that machine, but there was no noticeable delay in the editor at all</p>",
        "id": 286665370,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655578491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20update/near/286663653\">said</a>:</p>\n<blockquote>\n<p>also, is it possible yet for aesop to emit the tactic steps it finds, sorta like <code>simp?</code> behavior?</p>\n</blockquote>\n<p>Not yet and this requires a fair bit of engineering. (Basically, successful rules will have to construct a <code>Syntax</code> representing the corresponding tactic.) But I want to add this at some point.</p>\n<p>For benchmarking, you can use <code>set_option trace.aesop.profile true</code>. This also gives some details about which rules were slow etc.</p>",
        "id": 286769333,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655716868
    },
    {
        "content": "<p>Quick performance comparison before/after changing most of the proofs in our theorem lab's final project to Aesop one-liners:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"n\">compilation</span> <span class=\"mi\">61</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">789</span><span class=\"n\">ms</span>\n    <span class=\"kn\">import</span> <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n    <span class=\"n\">initialization</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n    <span class=\"n\">interpretation</span> <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">ms</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">61</span><span class=\"n\">ms</span>\n    <span class=\"n\">simp</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"n\">s</span>\n    <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">78</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">ms</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"n\">system</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">02</span><span class=\"bp\">.</span><span class=\"mi\">20</span><span class=\"n\">elapsed</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"n\">CPU</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span> <span class=\"mi\">226124</span><span class=\"n\">maxresident</span><span class=\"o\">)</span><span class=\"n\">k</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"n\">compilation</span> <span class=\"mi\">65</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">581</span><span class=\"n\">ms</span>\n    <span class=\"kn\">import</span> <span class=\"mi\">116</span><span class=\"n\">ms</span>\n    <span class=\"n\">initialization</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n    <span class=\"n\">interpretation</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">s</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">ms</span>\n    <span class=\"n\">simp</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">81</span><span class=\"n\">s</span>\n    <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">92</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">91</span><span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"n\">system</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"mi\">98</span><span class=\"n\">elapsed</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"n\">CPU</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span> <span class=\"mi\">445548</span><span class=\"n\">maxresident</span><span class=\"o\">)</span><span class=\"n\">k</span>\n</code></pre></div>",
        "id": 287038651,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655896985
    },
    {
        "content": "<p>Mind you, this is using my simplistic <a href=\"https://github.com/IPDSnelting/tba-2022/blob/d8c2761a1d6fc942cdc015514da2c43bb876bf86/TBA/Util/AesopExts.lean#L32-L38\"><code>simpAll</code></a> rule. I'm sure <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> can come up with a much more performant implementation.</p>",
        "id": 287039262,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655897310
    },
    {
        "content": "<p>I presented Aesop to the students of our Lean 4 lab course yesterday. We'll see if they find it helpful for the final project (which has already started), but here are my slides if anyone else is interested: <a href=\"https://github.com/IPDSnelting/tba-2022/blob/master/slides/lecture9.pdf\">https://github.com/IPDSnelting/tba-2022/blob/master/slides/lecture9.pdf</a></p>",
        "id": 287054898,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655905178
    },
    {
        "content": "<p>Once more, with <del>feeling</del> <code>--load-dynlib</code> to eliminate the interpretation overhead in Aesop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"n\">compilation</span> <span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">897</span><span class=\"n\">ms</span>\n    <span class=\"kn\">import</span> <span class=\"mi\">119</span><span class=\"n\">ms</span>\n    <span class=\"n\">initialization</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">ms</span>\n    <span class=\"n\">interpretation</span> <span class=\"mi\">184</span><span class=\"n\">ms</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n    <span class=\"n\">simp</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">81</span><span class=\"n\">s</span>\n    <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">93</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n<span class=\"n\">Command</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">zero</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">36</span><span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">08</span><span class=\"n\">system</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"mi\">44</span><span class=\"n\">elapsed</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"n\">CPU</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span> <span class=\"mi\">444632</span><span class=\"n\">maxresident</span><span class=\"o\">)</span><span class=\"n\">k</span>\n</code></pre></div>\n<p>That's not bad.</p>",
        "id": 287159561,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655973350
    },
    {
        "content": "<p><code>Command exited with non-zero status 1</code> is usually bad, right?</p>",
        "id": 287164951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655976876
    },
    {
        "content": "<p>Yes, UNIX systems have a thing called an exit code, 0 means fine, everything \\neq 0 means, something bad happened. If the program is sticking to established standards it will return one of the so called <code>errno</code> (<a href=\"https://www.man7.org/linux/man-pages/man3/errno.3.html\">https://www.man7.org/linux/man-pages/man3/errno.3.html</a>) constants. You can translate a number back to a name from this manpage with <code>errno &lt;number&gt;</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">errno</span> <span class=\"mi\">1</span>\n<span class=\"n\">EPERM</span> <span class=\"mi\">1</span> <span class=\"n\">Operation</span> <span class=\"n\">not</span> <span class=\"n\">permitted</span>\n</code></pre></div>",
        "id": 287165303,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655977096
    },
    {
        "content": "<p>Hah, forgot to edit that out... it's from a proof that <em>should</em> be finished with <code>simpAll</code>, but my current implementation of it fails if the goal did not change (to prevent looping), only the local context did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">unprovable</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span><span class=\"bp\">¹</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">τ</span>\n<span class=\"n\">fwd</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span><span class=\"bp\">¹</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Val.ty</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">const</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">τ</span>\n</code></pre></div>\n<p>Since I'm convinced I have \"morally\" completed the proof, I'm simply waiting for Aesop to get better instead of finding a different proof <span aria-label=\"halo\" class=\"emoji emoji-1f607\" role=\"img\" title=\"halo\">:halo:</span> .</p>",
        "id": 287165614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655977336
    },
    {
        "content": "<p>\"Proof by morality\"</p>",
        "id": 287165653,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655977372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I've now added most of your extensions as builtin rules: <code>simp_all</code> during normalisation, automatic splitting of the target and of hypotheses, automatic substitution of equations whose LHS or RHS is a variable. (My test suite actually got faster, presumably because more goals now get solved by <code>simp</code>.)</p>\n<blockquote>\n<p>Once more, with --load-dynlib to eliminate the interpretation overhead in Aesop:</p>\n</blockquote>\n<p>Which incantation did you use to test this?</p>\n<p>Regarding performance in general: while I've been careful not to introduce unnecessary overhead, I haven't looked into any bigger optimisations yet. Aesop tends to call rules many times on similar goals, so there are certainly caching opportunities.</p>",
        "id": 287186170,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655989457
    },
    {
        "content": "<p>Awesome, I'll give it a try!</p>\n<blockquote>\n<p>Which incantation did you use to test this?</p>\n</blockquote>\n<p>It was something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"o\">:</span><span class=\"n\">sharedLib</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Foo.lean</span> <span class=\"c1\">--profile --load-dynlib=./lean_packages/aesop/build/lib/Aesop.so</span>\n</code></pre></div>",
        "id": 287193994,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655992681
    },
    {
        "content": "<p>Thanks! I'll add this to the testsuite.</p>",
        "id": 287194499,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655992847
    },
    {
        "content": "<p>Hmm, when I run these commands (with a <code>lake clean</code> thrown in for good measure), I get <code>Error: index out of bounds</code> for every file. But the unused variable linter still complains, so the files seem to get typechecked.</p>",
        "id": 287198941,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655994751
    },
    {
        "content": "<p>Yes, I didn't investigate that yet</p>",
        "id": 287199382,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655994931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20update/near/287193994\">said</a>:</p>\n<blockquote>\n<p>It was something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"o\">:</span><span class=\"n\">sharedLib</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Fyi,  <code>lake build Aesop:sharedLib</code> should work as well. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> (If it doesn't, that's a bug).</p>",
        "id": 287391734,
        "sender_full_name": "Mac",
        "timestamp": 1656109178
    },
    {
        "content": "<p>I also tested accelerating Aesop using <code>precompileModules := true</code> in its lakefile.lean with Lake master, and performance seems to be equal to the manually loaded single shared lib above. <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> This might be worth a Lake bump in lean4 if you're not already planning one?</p>",
        "id": 287722002,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656425776
    },
    {
        "content": "<p>For what it's worth, we are already at 2905 bytes of <code>--load-dynlib</code> flags <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 287722089,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656425826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20update/near/287722002\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> This might be worth a Lake bump in lean4 if you're not already planning one?</p>\n</blockquote>\n<p>My plan is to have a bump by the end of the week. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 287747014,
        "sender_full_name": "Mac",
        "timestamp": 1656436133
    }
]