[
    {
        "content": "<p>I'm curious, has anyone come up with a simple, cute unit testing technique?</p>\n<p>I've done a little tinkering, and using something like this <code>checkBEq</code> function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Test.lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkBEq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">actual</span> <span class=\"n\">expected</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">actual</span> <span class=\"bp\">==</span> <span class=\"n\">expected</span>\n  <span class=\"k\">then</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"pass\"</span>\n  <span class=\"k\">else</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">actualStr</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">Format.indentD</span> <span class=\"o\">(</span><span class=\"n\">Format.append</span> <span class=\"o\">(</span><span class=\"n\">Format.text</span> <span class=\"s2\">\"  actual \"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Repr.addAppParen</span> <span class=\"o\">(</span><span class=\"n\">reprArg</span> <span class=\"n\">actual</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n    <span class=\"k\">let</span> <span class=\"n\">expectedStr</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">Format.indentD</span> <span class=\"o\">(</span><span class=\"n\">Format.append</span> <span class=\"o\">(</span><span class=\"n\">Format.text</span> <span class=\"s2\">\"expected \"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Repr.addAppParen</span> <span class=\"o\">(</span><span class=\"n\">reprArg</span> <span class=\"n\">expected</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"fail{actualStr}{expectedStr}\"</span>\n</code></pre></div>\n<p>with <code>#eval</code> isn't the worst. E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">checkBEq</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">checkBEq</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>will print the following when the file is run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pass</span>\n\n<span class=\"n\">Test.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span>\n    <span class=\"n\">actual</span> <span class=\"mi\">1</span>\n  <span class=\"n\">expected</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>which is most of what I want. In particular, I'm going for</p>\n<ol>\n<li>it to be trivial to calculate pass/fail counts by examining the output, and</li>\n<li>failures that give enough information for quick debugging (i.e., line number and expected vs actual value comparison)</li>\n</ol>\n<p>The one thing I'm really wishing it did though was trigger the interactive \"red error squiggles\" in IDEs using Lean4's language server. There's not a simple way to add such interactive feedback anyone can think of... is there?</p>",
        "id": 225340900,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1612551434
    },
    {
        "content": "<p>You can probably get the squiggles by using a macro for <code>checkBEq</code> and running the test in the macro's elaboration</p>",
        "id": 225347770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612554685
    },
    {
        "content": "<p>Interesting idea... perhaps the <code>#eval</code> <del>macro</del> commands's impl has just the sort of macrology I need...</p>",
        "id": 225351082,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1612556305
    },
    {
        "content": "<p>For inspiration see e.g. <a href=\"https://docs.rs/assert2/0.3.4/assert2/\">https://docs.rs/assert2/0.3.4/assert2/</a></p>",
        "id": 225365061,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612563183
    },
    {
        "content": "<p>It could use some improvements and additional features, but here's a first draft I'm pretty happy with =)<br>\n<a href=\"https://github.com/pnwamk/lean4-assert-command\">https://github.com/pnwamk/lean4-assert-command</a></p>",
        "id": 225441061,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1612664737
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/VtWoJd5dviHXG9OkJ6GwPiUK/ex_assert_via.png\">ex_assert_via.png</a> <a href=\"/user_uploads/3121/Xt2xokaUm7HlZKemjASUbtpf/ex_assert.png\">ex_assert.png</a> <a href=\"/user_uploads/3121/GgLgDzn-VfksiCocopofUAHi/ex_failed_assert.png\">ex_failed_assert.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VtWoJd5dviHXG9OkJ6GwPiUK/ex_assert_via.png\" title=\"ex_assert_via.png\"><img src=\"/user_uploads/3121/VtWoJd5dviHXG9OkJ6GwPiUK/ex_assert_via.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xt2xokaUm7HlZKemjASUbtpf/ex_assert.png\" title=\"ex_assert.png\"><img src=\"/user_uploads/3121/Xt2xokaUm7HlZKemjASUbtpf/ex_assert.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GgLgDzn-VfksiCocopofUAHi/ex_failed_assert.png\" title=\"ex_failed_assert.png\"><img src=\"/user_uploads/3121/GgLgDzn-VfksiCocopofUAHi/ex_failed_assert.png\"></a></div>",
        "id": 225441118,
        "sender_full_name": "Andrew Kent",
        "timestamp": 1612664814
    },
    {
        "content": "<p>This is great! Though, it is not quite there yet with what unit tests provide. I envision a future where all it takes to write a test is some annotation on a function, and then running <code>lake test</code> will <em>just work</em>. Has anyone been working on something like that? I don't know what people prefer, but I really like the Rust approach of writing tests in the same file, since that has a very low mental threshold to do (no need to set up a tests directory, etc).</p>",
        "id": 283991666,
        "sender_full_name": "Max Nowak",
        "timestamp": 1653561469
    },
    {
        "content": "<p>I'm kind of more a fan of having tests not in the same directory, at least for anything beyond simple sanity checks... It can junk up source files, and can make it more awkward to build generic tests (e.g. you have some tests you want to run on two implementations of the same interface; what file do you put them in?).</p>\n<p>What about doc-esque links from source code to tests? That way you could keep tests somewhere separate but still easily navigate to relevant tests when you want to. Never heard of that kind of approach but I feel like I'd like it?</p>",
        "id": 284092363,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653628182
    },
    {
        "content": "<p>It would be super cool if you could link from a comment explaining some patch in your code to a test that makes sure the patch is doing what it's supposed to do :D</p>",
        "id": 284092422,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653628243
    },
    {
        "content": "<p>(Although, these can definitely co-exist in Lean; interactive unit tests in the relevant source files for basic sanity checks, + more heavyweight unit testing with tests located outside the main project?)</p>",
        "id": 284093053,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653629182
    }
]