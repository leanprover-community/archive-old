[
    {
        "content": "<p>I'm asking this kind of naively, but looking at some Lean 3 code, I'm thinking I should be able to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">myStruct</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">var1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">var2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CoolM</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">StateT</span> <span class=\"n\">myStruct</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">Nat</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then I'm hoping to use it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getVar1</span> <span class=\"o\">:</span> <span class=\"n\">CoolM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">CoolM.var1</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or something like that. I get an error on the <code>do</code> saying it can't tell that CoolM is a monad. What would a custom state monad like this look like?</p>",
        "id": 280417844,
        "sender_full_name": "Ian Benway",
        "timestamp": 1651097299
    },
    {
        "content": "<p>The issue here is that you are using <code>def</code>, <code>def</code>s are not transparent to type class synthesis, meaning that when searching for an instance <code>Moand CoolM</code> Lean will not attempt to unfold <code>CoolM</code> but instead only check whether this instance exists right away which is not the case, what you want to do is use <code>abbrev</code> instead of <code>def</code> which does allow this behaviour (it essentially boils down to tagging the <code>def</code> with <code>@[reducible]</code>)</p>",
        "id": 280418836,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651097872
    },
    {
        "content": "<p>And just style wise, the usual way we write types right now is <code>CamelCase</code>, variables and functions <code>lowerCamelCase</code> and proofs <code>snek_case</code>. The style for declaring structures also changed to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">var1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">var2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 280418977,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651097946
    },
    {
        "content": "<p>Ah I see what you're saying about <code>def</code>s. I'm still getting this error on the <code>do</code>, though. Do I have to specify that <code>CoolM</code> is a monad, maybe using <code>derives</code>?<br>\n<a href=\"/user_uploads/3121/ZyqIx1kRuFnayy_T5vK8So7x/Screen-Shot-2022-04-27-at-7.11.30-PM.png\">Screen-Shot-2022-04-27-at-7.11.30-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZyqIx1kRuFnayy_T5vK8So7x/Screen-Shot-2022-04-27-at-7.11.30-PM.png\" title=\"Screen-Shot-2022-04-27-at-7.11.30-PM.png\"><img src=\"/user_uploads/3121/ZyqIx1kRuFnayy_T5vK8So7x/Screen-Shot-2022-04-27-at-7.11.30-PM.png\"></a></div>",
        "id": 280424262,
        "sender_full_name": "Ian Benway",
        "timestamp": 1651101322
    },
    {
        "content": "<p>No, there is one more thing, you are using <code>id</code> here which is the identity function but what you actually want is the <code>Id</code> identity monad, this is what's blocking Lean from finding the instance.</p>",
        "id": 280424449,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651101461
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">CoolM</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">MyStruct</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">Nat</span> <span class=\"n\">Id</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Monad</span> <span class=\"n\">CoolM</span>\n</code></pre></div>",
        "id": 280424512,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651101485
    },
    {
        "content": "<p>Oh that's funny, but I see why it makes sense. Thank you!</p>",
        "id": 280424604,
        "sender_full_name": "Ian Benway",
        "timestamp": 1651101566
    }
]