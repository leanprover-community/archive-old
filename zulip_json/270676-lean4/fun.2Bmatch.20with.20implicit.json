[
    {
        "content": "<p>The <code>fun</code>+<code>match</code> syntax doesn't seem to work with implicit lambdas. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inst2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">func</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inst3</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">func</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> type mismatch</span>\n<span class=\"cm\">    a</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    Type : Type 1</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    x✝ → x✝ : Type -/</span>\n</code></pre></div>\n<p>Is this expected or a bug?</p>",
        "id": 247155528,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1627263396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inst3</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">func</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>It appears that when using fun+match implicit arguments become part of the match.</p>",
        "id": 247264204,
        "sender_full_name": "Mac",
        "timestamp": 1627333997
    },
    {
        "content": "<p>I think this may be purposeful to make the result of the match affect the implicit arguments.</p>",
        "id": 247264483,
        "sender_full_name": "Mac",
        "timestamp": 1627334130
    }
]