[
    {
        "content": "<p>The following is accepted by Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"mi\">4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>I assume in the <code>some</code> clause of the <code>match</code> the <code>x</code> of type <code>Nat</code> is being coerced to <code>Option Nat</code>.</p>\n<p>However, the following throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>The <code>4</code> is not coerced to <code>Option Nat</code> though the documentation states in the absence of other information, a numeric literal is considered to be <code>Nat</code>. I can get it to pass type checking by changing it to <code>(4:Nat)</code>.</p>",
        "id": 256497362,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1633561032
    },
    {
        "content": "<blockquote>\n<p>The 4 is not coerced to Option Nat though the documentation states in the absence of other information, a numeric literal is considered to be Nat</p>\n</blockquote>\n<p>The documentation is correct. The expected type is available, it is <code>Option Nat</code>.</p>\n<blockquote>\n<p>I can get it to pass type checking by changing it to (4:Nat).</p>\n</blockquote>\n<p>You can also write <code>some 4</code> and avoid the need for a coercion.</p>",
        "id": 256498461,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633561628
    },
    {
        "content": "<p>Yes, personally I always include the <code>some</code> for clarity, but why is <code>x</code> coerced to <code>Option Nat</code> by <code>4</code> throw an error?</p>",
        "id": 256498834,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1633561883
    },
    {
        "content": "<p>It is because Lean knows that <code>x</code> is a <code>Nat</code>, but doesn't know what <code>4</code> is. The numeric literals are polymorphic in Lean. Given a context where the expected type is <code>A</code>, Lean will accept the numeric literal <code>4</code>, if it can synthesize the instance <code>OfNat A  4</code>. Polymorphism and coercions often create the problem you described above.</p>",
        "id": 256499210,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633562136
    },
    {
        "content": "<p>Ok, got it thanks.</p>",
        "id": 256499305,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1633562188
    }
]