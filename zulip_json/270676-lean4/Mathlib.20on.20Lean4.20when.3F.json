[
    {
        "content": "<p>My understanding is that there's a sort of 2-step approach:<br>\nStep 1: Get mathlib ready in the form of mathport PRs: <a href=\"https://github.com/leanprover-community/mathlib/pulls?q=is%3Apr+label%3Amathport\">https://github.com/leanprover-community/mathlib/pulls?q=is%3Apr+label%3Amathport</a><br>\nStep 2: A tool along the lines of <a href=\"https://github.com/dselsam/mathport/\">https://github.com/dselsam/mathport/</a><br>\nSee also: <a href=\"#narrow/stream/270676-lean4/topic/mathport\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathport</a><br>\nBut I'm not familiar with this stuff, so someone more qualified should chime in</p>",
        "id": 230594057,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1615930072
    },
    {
        "content": "<p>Note that <code>mathport</code> builds Lean4 <strong>oleans</strong> from Lean3 files, not Lean4 source files. As far as I understand, once <code>mathlib</code> is <code>mathport</code>-ready we can try to start mixing Lean3 and Lean4 code. But we'll need to port the source files in some order. As a person who knows how to write proofs but knows almost nothing about meta programming in lean (OK, I fixed some bugs in <code>to_additive</code> but that did not involve any deep understanding of what's going on) I think that the most challenging part is to port the <code>tactic</code> folder and reimplement features like <code>old_structure_cmd</code>.</p>",
        "id": 230603902,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615933639
    },
    {
        "content": "<p>Ohhh. Very nice approach. Thanks.</p>",
        "id": 230605859,
        "sender_full_name": "SnowFox",
        "timestamp": 1615934752
    },
    {
        "content": "<p>Disclaimer: I may be wrong.</p>",
        "id": 230626868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615946057
    },
    {
        "content": "<p>Yes, mathport automatically creates Lean4 <code>.olean</code> files for each Lean3 file. It does not port <code>meta</code> Lean though, and so most mathlib tactics will need to be manually ported to Lean4. Mathport is a simple program and most of the work right now is:</p>\n<ul>\n<li>mathlib community backporting a few Lean4 features</li>\n<li>Leo finalizing a few Lean4 design decisions (some backports may or may not be necessary depending)</li>\n</ul>\n<p>The issues are being tracked here: <a href=\"https://github.com/dselsam/mathport\">https://github.com/dselsam/mathport</a></p>\n<p>After resolving these known issues, I will re-run the tool and do another round of experiments to look for additional issues. Once we are confident that the auto-ported <code>.olean</code>s are stable and usable (except for missing tactics), we enter Phase 2.</p>\n<p>Phase 2 is porting the basic tactics, including some that may depend on parts of the auto-ported mathlib. Some tactics will no longer be necessary thanks to more flexible Lean4 built-in tactics, some others will be obviated by decision procedures Leo is planning to implement, and some others are rarely used and can be delayed to Phase 3. But this phase may still require a significant amount of work.</p>\n<p>There is no official consensus yet for what happens in Phase 3. There are two main proposals that I know about:</p>\n<p>Proposal 1 (Incremental):</p>\n<p>- encourage most people to do most new things in Lean4 on top of the auto-ported <code>.olean</code>s<br>\n  - incrementally replace the Lean4 <code>.olean</code>s with <code>.lean</code> files starting at the leaves<br>\n  - as necessary, refactor in Lean3, re-run the auto-porter and propagate the changes<br>\n  - possibly even have tooling support for multi-lean projects</p>\n<p>Proposal 2 (Abrupt):</p>\n<p>- once the tools are ready to recreate Lean4 <code>.lean</code> files efficiently, freeze mathlib3<br>\n  - mobilize community-wide effort to port as much as possible before allowing new math<br>\n  - require that every <code>.lean</code> file expose the exact same API as the <code>.olean</code> so that porting becomes embarrassingly parallel<br>\n  - possibly schedule this for 1 month over the summer, when people are less likely to have other deadlines</p>\n<p>I advocate Proposal 2 due to the strong network effects of concentrating tooling on a single system and the significant costs (both hidden and visible) of multi-language projects. However, which proposal makes the most sense depends a lot on how much work it takes to reconstruct a <code>.lean</code> file. This process may turn out to be not-so-bad thanks to the delaborator. It might also be possible to implement a special-purpose heuristic delaborator just for this use-case that recovers most rewrite/simp/cases/induction/obtain tactics from the low-level proof terms. If the reconstructed <code>.lean</code> files really have the exact same API as the <code>.olean</code> files, it may also make sense to allow difficult proofs to persist temporarily  as binary proof terms in separate files.</p>",
        "id": 230632426,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615951747
    },
    {
        "content": "<p>Proposal 2 so far feels unrealistic to me. I'm having trouble imagining a delaborator that could produce human-plausible tactic blocks (or make reasonable judgements e.g. about which arguments to omit in favour of <code>_</code> in term mode proofs). Every single line in mathlib is going to need human review, surely. And most nontrivial tactic blocks will require human editing.</p>",
        "id": 230633258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615952415
    },
    {
        "content": "<p>In any case, if there is useful work that can be done by people who know mathlib well, but are not yet regular Lean4 users (e.g. me), it would be great to have this farmed out. I'm very keen to make the transition, but as I understand there's not so much to be done yet.</p>",
        "id": 230633398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615952534
    },
    {
        "content": "<p>At <a href=\"https://github.com/dselsam/mathport#contributing\">https://github.com/dselsam/mathport#contributing</a> you say:</p>\n<blockquote>\n<p>The best way to help is to find and isolate issues. Pick your favorite mathlib file, start reimplementing it in Lean4, and file (small, isolated) GitHub issues for any specific pain points you encounter.</p>\n</blockquote>\n<p>Could you explain in more detail what you mean here? Which files are most plausible to try?</p>",
        "id": 230633789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615952893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Mathlib.20on.20Lean4.20when.3F/near/230633789\">said</a>:</p>\n<blockquote>\n<p>At <a href=\"https://github.com/dselsam/mathport#contributing\">https://github.com/dselsam/mathport#contributing</a> you say:</p>\n<blockquote>\n<p>The best way to help is to find and isolate issues. Pick your favorite mathlib file, start reimplementing it in Lean4, and file (small, isolated) GitHub issues for any specific pain points you encounter.</p>\n</blockquote>\n<p>Could you explain in more detail what you mean here? Which files are most plausible to try?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I have not run mathport since a few of the backports got merged into mathlib. I will re-run the pipeline tomorrow, articulate exactly what is still not expected to work yet, and clarify the contributor suggestions.</p>",
        "id": 230634769,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615953711
    }
]