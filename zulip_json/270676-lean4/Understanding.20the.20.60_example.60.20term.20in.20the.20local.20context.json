[
    {
        "content": "<p>Aside from the usual variables in the local context, there always seems to be an extra variable that has the type of the main goal (this is called <code>_example</code> when the context is inspected in an <code>example</code> environment, and <code>&lt;def_name&gt;</code> when in a definition/theorem environment with name <code>&lt;def_name&gt;</code>). This is the code I used to list all the variables in a local declaration, along with their types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ctxtac</span><span class=\"o\">)</span> <span class=\"s2\">\"ctxtac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic ctxtac]</span> <span class=\"kd\">def</span> <span class=\"n\">ctxtacT</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{(c.userName, c.type)}\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Unit.unit</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ctxtac</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ctxtest</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ctxtac</span>\n</code></pre></div>\n<p>Could anyone explain what this additional variable is and why it needs to be present? Is there an easy way to erase it from the local context? Thank you in advance.</p>",
        "id": 279167838,
        "sender_full_name": "Anand Rao",
        "timestamp": 1650114672
    },
    {
        "content": "<p>1- <code>example &lt;decls&gt; := &lt;val&gt;</code> is elaborated as <code>def _example &lt;decls&gt; := &lt;val&gt;</code>, but we discard the definition after we type check it in the kernel.  <br>\n2- Definitions and theorems can be recursive, but the Lean kernel does not accept recursive definitions. Example:  <code>#print List.append</code> shows how <code>List.append</code> was compiled before being sent to the kernel. Nobody wants to use <code>List.brecOn</code> directly. Thus, we temporarily add a local declaration for each declaration being defined. Before sending it to the kernel, we eliminate them using <code>brecOn</code> or <code>WellFounded.fix</code>.  We \"hide\" these auxiliary declarations when printing goals.</p>\n<p>Note that this encoding allows us to write recursive examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">_example</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">as.length</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">_example</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>We can remove <code>_example</code> before elaborating <code>&lt;val&gt;</code> at step 1, but the recursive examples would be gone.</p>",
        "id": 279168715,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650116031
    }
]