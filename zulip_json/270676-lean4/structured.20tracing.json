[
    {
        "content": "<p>Where can I find information about the structured tracing that lean4 has? Are there any suggestive examples? I am especially interested in how one could capture the tree-like structure of a simp trace.</p>",
        "id": 225077840,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612384771
    },
    {
        "content": "<p>The <code>TraceState</code> is in <code>CoreM</code> <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/CoreM.lean#L31\">https://github.com/leanprover/lean4/blob/master/src/Lean/CoreM.lean#L31</a> and consists of the following data: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Util/Trace.lean#L14-L22\">https://github.com/leanprover/lean4/blob/master/src/Lean/Util/Trace.lean#L14-L22</a></p>",
        "id": 225079202,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612385351
    },
    {
        "content": "<p>where's the tree structure?</p>",
        "id": 225079328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612385410
    },
    {
        "content": "<p>which tree structure are you referring to?</p>",
        "id": 225079414,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612385454
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Util/Trace.lean#L89-L95\">https://github.com/leanprover/lean4/blob/master/src/Lean/Util/Trace.lean#L89-L95</a></p>",
        "id": 225079719,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612385558
    },
    {
        "content": "<p>Perhaps this is a better place to point to then: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Message.lean#L38-L57\">https://github.com/leanprover/lean4/blob/master/src/Lean/Message.lean#L38-L57</a></p>",
        "id": 225079998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612385665
    },
    {
        "content": "<p>that last constructor looks especially tree-like</p>",
        "id": 225080040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612385683
    },
    {
        "content": "<p>There is also a separate, static, implicit tree structure given by the hierarchical trace names, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">no</span> <span class=\"n\">lemmas</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">rewriting</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">&lt;</span><span class=\"n\">unknown</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">True</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">no</span> <span class=\"n\">lemmas</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">pre</span><span class=\"bp\">-</span><span class=\"n\">rewriting</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 225080948,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1612386042
    },
    {
        "content": "<p>And there is also a tree of elaboration information: <a href=\"https://github.com/leanprover/lean4/blob/545ed50f83c570f772ade4edbe7d38a078cbd761/src/Lean/Elab/InfoTree.lean#L67\">link</a> . It is constructed similarly to the trace tree, but serves a somewhat different purpose</p>",
        "id": 225099019,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612395091
    },
    {
        "content": "<p>Thanks a lot! Are there any examples on how to use that datatype?</p>",
        "id": 225142881,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612435146
    },
    {
        "content": "<p>I suppose the main consumer of structured traces is the <a href=\"https://github.com/leanprover/lean4/blob/bdf7b15a412501241bfe5fe8f7ae6d415ebdff0d/src/Lean/Message.lean#L78\"><code>format</code></a> function. A <code>MessageData</code> is converted to a <a href=\"https://github.com/leanprover/lean4/blob/bdf7b15a412501241bfe5fe8f7ae6d415ebdff0d/src/Init/Data/Format/Basic.lean#L20\"><code>Format</code></a> expressing how it should be displayed as a <code>String</code> at some later point. Note that <code>MessageData</code> has constructors lifted from <code>Format</code> but that it includes semantic information as well.</p>",
        "id": 225215203,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612469276
    }
]