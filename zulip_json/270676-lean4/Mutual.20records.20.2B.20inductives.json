[
    {
        "content": "<p>I would like to be able to write definitions where we have mutual dependences between records and inductives, which lean does not allow today/ An example is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"c1\">-- | allow structures in mutual inductive blocks.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">int</span><span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">bar</span><span class=\"o\">:</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Bar</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bar</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"k\">#print</span> <span class=\"n\">Foo</span>\n<span class=\"k\">#print</span> <span class=\"n\">Bar</span>\n<span class=\"kd\">def</span> <span class=\"n\">fooBar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Bar.mk</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">fooBar</span>\n</code></pre></div>\n<p>I <a href=\"https://github.com/bollu/lean4/pull/6\">have a patch here</a> that extends Lean4's logic of elaborating mutual definitions to produce the output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">parameters</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">Foo.mk</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">parameters</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">Bar.mk</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span>\n<span class=\"n\">Bar.foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n\n<span class=\"n\">fooBar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>However, the implementation seems to fail on some tests (as noted in the comment: <a href=\"https://github.com/bollu/lean4/pull/6#issuecomment-1136566982\">https://github.com/bollu/lean4/pull/6#issuecomment-1136566982</a>).  I would love to have some help to getting this bug-fixed. Unfortunately, I'm not sure what the source of the problem is. I'm hoping those with more familiarity of the compiler internals could help, so I can make this a real PR against <code>lean4</code>!</p>",
        "id": 283823942,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653439512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> this is related: <a href=\"#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20structure\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mutual.20inductive.20and.20structure</a></p>",
        "id": 283824839,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653440513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> I think you are severely underestimating the complexity of this issue. Simply elaborating all inductives of the mutual block followed by each structure (separately), as you are doing right now, will not work. You would need to put everything together into a single declaration of mutual inductives, which would presumably require significant changes in the structure elaboration code.</p>",
        "id": 283843713,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653461423
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Bar.foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n</code></pre></div>\n<p>Note that <code>Foo</code> was auto-quantified here, the types are not actually mutually dependent</p>",
        "id": 283843726,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653461448
    },
    {
        "content": "<p>Ah, thanks! :)</p>",
        "id": 283844310,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653461983
    }
]