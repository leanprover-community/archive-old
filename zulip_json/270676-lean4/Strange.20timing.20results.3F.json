[
    {
        "content": "<p>I've been trying to time different operations with <code>IO.monoMsNow</code> which seemed to be working great, until I wrote up this test case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">iters</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Queue</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">t_no_deq</span><span class=\"o\">,())</span> <span class=\"bp\">←</span> <span class=\"n\">time</span> <span class=\"o\">(</span>\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">iters</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Q.empty</span>\n      <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">len</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Q.enq</span> <span class=\"n\">q</span> <span class=\"n\">i</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">t_deq</span><span class=\"o\">,())</span> <span class=\"bp\">←</span> <span class=\"n\">time</span> <span class=\"o\">(</span>\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">iters</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Q.empty</span>\n      <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">len</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Q.enq</span> <span class=\"n\">q</span> <span class=\"n\">i</span>\n      <span class=\"k\">match</span> <span class=\"n\">Q.deq</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"early empty??\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"s2\">\"wrong entry??\"</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"n\">pure</span> <span class=\"o\">((</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">t_deq</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">t_no_deq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In both loops, this code pushes <code>len</code> elements onto a queue. In the second loop it <em>also</em> removes the first element of the queue.</p>\n<p>Weirdly, in one of my implementations, the second loop consistently runs faster than the first. Even if I switch the order of the two blocks, it still runs faster when doing a <code>deq</code> than without. Any idea why?</p>\n<p>The full code is here:<br>\n<a href=\"https://github.com/JamesGallicchio/LeanColls/blob/master/LeanColls/Queue/Main.lean\">https://github.com/JamesGallicchio/LeanColls/blob/master/LeanColls/Queue/Main.lean</a></p>",
        "id": 272178537,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645045610
    },
    {
        "content": "<p><code>time</code> is just doing the obvious thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pre</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">←</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">post</span> <span class=\"bp\">←</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">pre</span><span class=\"o\">,</span> <span class=\"n\">ret</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272178608,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645045670
    },
    {
        "content": "<p>Can't reproduce; I'm getting +200ms difference for the <code>test3</code> in your repo with 1000 iterations, 100000 elements and <code>BQueue Nat</code>. Could you make a branch of your repo where <code>testAll</code> is the exact test case you're referring to?</p>\n<p>In general, you shouldn't be able to measure any difference here since the dequeue operation hopefully takes less than 1ms.</p>",
        "id": 272236440,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645091788
    },
    {
        "content": "<p>Hm, today I can't reproduce it. It must have been a fluke; it only occurred with RTQueue on relatively small element counts.</p>\n<p>I was repeating the test for that many iterations in order to be able to measure the difference of a single dequeue (1000 dequeues should be measurable, even if 1 isn't). But evidently the timing is too noisy. I'm gonna see if I can reduce the noise and get better results.</p>",
        "id": 272430103,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645204961
    }
]