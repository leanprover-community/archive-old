[
    {
        "content": "<p>What's the nicest way to prove <code>∀ {x : α}, p x</code> when I don't want to start the proof by introducing <code>x</code>. In my particular use case (<a href=\"https://github.com/leanprover-community/mathlib4/blob/8cbca362c8334d37cdcfac6d4e5273fd2eaae3f6/Mathlib/Algebra/EuclideanDomain/Basic.lean#L209\">here</a>) the elaborator doesn't like the method <code>@fun x =&gt; old_proof x</code> so I resorted to the following which is very ugly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">old_proof</span>\n<span class=\"n\">this</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 314888572,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670590509
    },
    {
        "content": "<p>Does <code>@old_proof</code> work?</p>",
        "id": 314888896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670590635
    },
    {
        "content": "<p><code>fun {x} =&gt; ...</code>?</p>",
        "id": 314888965,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670590665
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">h</span>\n</code></pre></div>",
        "id": 314889170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670590734
    },
    {
        "content": "<p>Can <code>GCD.induction</code> not be used with <code>induction using</code>? Then I would just move the variables to the left of the colon (or use auto-implicits) and have <code>induction</code> handle the reverts.</p>",
        "id": 314889859,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670590953
    },
    {
        "content": "<p>I can't figure out how to give the induction hypothesis a name when I use <code>induction using</code></p>",
        "id": 314951840,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670609298
    },
    {
        "content": "<p>It should just be an additional parameter in the \"pattern\". It behaves basically like <code>case</code>.</p>",
        "id": 314952098,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670609384
    }
]