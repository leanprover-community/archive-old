[
    {
        "content": "<p>Consider the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DepProof</span> <span class=\"n\">where</span>\n   <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n   <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MonadicDepProof</span> <span class=\"o\">[</span><span class=\"n\">Mon</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">M</span> <span class=\"n\">DepProof</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n   <span class=\"n\">return</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n      <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n         <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">         M: Type → Type ?u.380</span>\n<span class=\"cm\">         Mon: Monad M</span>\n<span class=\"cm\">         v: ℕ</span>\n<span class=\"cm\">         ⊢ v = 0</span>\n<span class=\"cm\">         -/</span>\n         <span class=\"gr\">sorry</span>\n      <span class=\"o\">}</span>\n   <span class=\"o\">}</span>\n</code></pre></div>\n<p>How to see in the proof mode that <code>v</code> originated from <code>pure 0</code>, to create a <code>M DepProof</code>?</p>",
        "id": 302853090,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665149736
    },
    {
        "content": "<p>Recall that <code>let v &lt;- ..; return ...</code> is the <code>bind</code> application <code>bind (pure 0) (fun v : Nat =&gt; ...)</code>. You can use a <code>let v := ...</code> or use subtypes to communicate the fact that <code>v</code> is zero.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MonadicDepProof</span> <span class=\"o\">[</span><span class=\"n\">Mon</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">M</span> <span class=\"n\">DepProof</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n   <span class=\"n\">return</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n      <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">v.property</span><span class=\"o\">]</span>\n   <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MonadicDepProof'</span> <span class=\"o\">[</span><span class=\"n\">Mon</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">M</span> <span class=\"n\">DepProof</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n   <span class=\"n\">return</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n      <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n   <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 302858369,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665151235
    },
    {
        "content": "<p>Thanks, the former example helps. The latter doesn't work for me; I was using <code>pure</code> to demonstrate an example monadic value that in the larger example I have no control over.</p>",
        "id": 302859256,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665151477
    },
    {
        "content": "<p>The idea that <code>pure 0</code> could be something opaque instead reminds me that the layered monadic interpretation paper from ICFP'22 generalizes the notion of <em>image</em> from ITrees to arbitrary monads. This characterizes what the return values of a monadic action can be. This seems to be what you're manipulating there...</p>",
        "id": 302971930,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1665210599
    },
    {
        "content": "<p>this seems to be overanalyzing the situation. When you call a function <code>foo(x)</code> you have some parameter <code>x</code> that is passed in, and even if it happens to be called on the value <code>2</code> you don't have access to that fact inside the body of the function. That's all that is happening here. It's the exact same thing that is the difference between <code>have</code> and <code>let</code> binders in lean: <code>have x := e; e2</code> is just syntax for <code>(fun x =&gt; e2) e</code>, so inside the body of the lambda you cannot make use of any facts about <code>x</code> other than its type because it is a parameter. In a <code>do</code> block, it is just syntax for <code>bind</code> applications, in this case <code>bind (pure 0) (fun v =&gt; ...)</code> so inside that lambda you have no information about <code>v</code> other than its type.</p>",
        "id": 302981624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665217726
    },
    {
        "content": "<p>Right. But isn't the whole point of that proof to show that the bind reduces to <code>(fun v =&gt; ...) 0</code>, and thus you can beta-reduce and expose the 0? And if instead of <code>pure 0</code> you have some arbitrary code, then you don't know whether it's 0, but you might know there are some properties on the value. That's how I understand it at least...</p>",
        "id": 302981841,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1665217892
    },
    {
        "content": "<p>You can of course prove after the fact that the function is only called on 0, but you can't make use of this inside the body of the function itself. Dependent types and monads don't play well together</p>",
        "id": 302982035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665218036
    },
    {
        "content": "<p>the nearest thing you can do is what Leo showed: if the function is modified to return a subtype then you can pattern match on it and get a fact about the return value of the previous operation</p>",
        "id": 302982198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665218111
    },
    {
        "content": "<p>it isn't very compositional though, I have had many issues doing that sort of thing in practice when you have to call monadic functions and preserve invariants on the side</p>",
        "id": 302982323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665218176
    },
    {
        "content": "<p>For example, if you have a <code>f : m A</code>, and (separately) a proof that <code>f</code> always returns values <code>x : A</code> satisfying <code>p x</code>, there is no way to combine these pieces of data together into an element of <code>m {x : A // p x}</code>, or (equivalently) to monadic bind <code>f</code> with a partial function <code>(x : A) -&gt; p x -&gt; m B</code>.</p>",
        "id": 302982615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665218359
    },
    {
        "content": "<p>I see, this makes a lot of sense. It happens that the framework Siddharth and I have been working with has this kind of tool with properties about the <em>image</em> of monadic actions, and the paper I referenced generalized it to a number of monads; that's why it came to mind. But that's definitely a construction on top of the language.</p>",
        "id": 302983379,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1665218775
    },
    {
        "content": "<p>It seems somewhat similar to the <a href=\"https://github.com/leanprover/std4/blob/main/Std/Classes/LawfulMonad.lean#L69-L70\"><code>SatisfiesM</code></a> predicate I developed for proving properties of monadic functions in std?</p>",
        "id": 302983500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665218872
    },
    {
        "content": "<p>Yes that's pretty much it!</p>",
        "id": 302983868,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1665219088
    },
    {
        "content": "<p>I was thinking that one way to improve that to make it useful for dependently typed programs would be to have a function doing what I just said is impossible above: given <code>f : m A</code> and <code>SatisfiesM p f</code>, construct a <code>m {x : A // p x}</code>. In the logic we can do this using the axiom of choice since <code>SatisfiesM p f</code> basically asserts the existence of such an object, and in the compiler we can just unsafeCast <code>f</code> to the desired type</p>",
        "id": 302984121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665219226
    },
    {
        "content": "<p>Right. In the framework I mentioned above, most of the monads are play are not black boxes and so you get the bind-with-postcondition construction. The ICFP'22 paper approach is to provide a typeclass for that postcondition predicate and then you provide an implementation for each monad that you want to support, at which point you have the ability to look into the monadic code and bind-with-postcondition recursively.</p>",
        "id": 302986020,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1665220188
    }
]