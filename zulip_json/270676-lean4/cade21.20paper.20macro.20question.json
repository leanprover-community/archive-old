[
    {
        "content": "<p>Hello, I'm reasonably new to lean (dabbled with lean 2 for a few months when it came out awhile back). I have a question on how to modify the boolean expression language example given in the recent CADE 21' lean 4 paper. Here is a link to the original code from that paper that I've been using as a reference: <a href=\"https://github.com/leanprover/lean4/blob/cade2021/doc/BoolExpr.lean\">https://github.com/leanprover/lean4/blob/cade2021/doc/BoolExpr.lean</a></p>\n<p>Basically, I want a <code>Doc</code> (document) datatype that just holds a List (or array -- if you that's more advisable) of another inductive datatype: <code>Cmnd</code> that can either be a No-op or some kind of constant (right now its restricted to be just a nullary boolean constant).</p>\n<p>Anyways, I'm having trouble getting the <code>Array Cmnd</code> built up in the last <code>macro_rules</code> part. I've been trying to use a .map on <code>mx</code>, but am unclear on whether I want this to be $mx, etc. Further, mapping over the mx like so: <code>mx.map (fun x =&gt; ``[Cmnd| x])</code> doesn't seem to work since <code>x</code> in the passed function has type <code>Syntax</code> (not the custom syntactic category: <code>cmnd</code>). This kind of confuses me since I said <code>mx:cmnd</code> (as opposed to <code>mx:ident</code>, etc.). No doubt I'm missing something here.</p>\n<p>Here's a mwe (including the imports -- so it should just be able to be dropped into a .lean file).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BoolExpr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[BExpr|\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">BExpr</span><span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">])</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">BExpr</span><span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">])</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">BExpr</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Cmnd</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"c1\">--(definiens : BoolExpr)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">noop</span> <span class=\"o\">:</span> <span class=\"n\">Cmnd</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">cmnd</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Doc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">doc</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Cmnd</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- will eventually add to this and replace the ..</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Def.\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"::\"</span> <span class=\"s2\">\"Boolean\"</span> <span class=\"s2\">\"≜\"</span> <span class=\"s2\">\"..\"</span> <span class=\"o\">:</span> <span class=\"n\">cmnd</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Noop.\"</span>                              <span class=\"o\">:</span> <span class=\"n\">cmnd</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[Cmnd|\"</span> <span class=\"n\">cmnd</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"c1\">-- gives back the usual lean term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Cmnd</span><span class=\"bp\">|</span> <span class=\"n\">Def.</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">::</span> <span class=\"n\">Boolean</span> <span class=\"bp\">≜</span> <span class=\"bp\">..</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Cmnd.const</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Cmnd</span><span class=\"bp\">|</span> <span class=\"n\">Noop.</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Cmnd.noop</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[MyScript|\"</span> <span class=\"n\">cmnd</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">MyScript</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">mx</span><span class=\"o\">:</span><span class=\"n\">cmnd</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Doc.doc</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mx.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">BExpr</span><span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">])]))</span> <span class=\"c1\">-- &lt;-- ??</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex1</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">MyScript</span><span class=\"bp\">|</span>\n  <span class=\"n\">Noop.</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex2</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">MyScript</span><span class=\"bp\">|</span>\n  <span class=\"n\">Noop.</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex3</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">MyScript</span><span class=\"bp\">|</span> <span class=\"o\">]</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">ex1</span>\n</code></pre></div>",
        "id": 286666790,
        "sender_full_name": "Dan W.",
        "timestamp": 1655580504
    },
    {
        "content": "<p>If you are getting into macro based meta programming you can check out the WIP documentation we are writing for it right now, specifically the syntax and macro chapters in your case, they should be helpful in understanding the general system: <a href=\"http://github.com/arthurpaulino/lean4-metaprogramming-book/\">github.com/arthurpaulino/lean4-metaprogramming-book/</a></p>\n<p>To answer your questions:</p>\n<ol>\n<li><code>Array</code> is mostly used for performance, as long as you want proofs Lists will suffice</li>\n<li>The $mx vs regular mx is covered in detail in the book, i will not reproduce it here</li>\n<li>regarding your confusion as to <code>Syntax</code>, <em>every</em> syntax including user defined one will have the type <code>Syntax</code> if you match on it this way, what you affect by declaring a concrete syntax category or parser is the <code>SyntaxNodeKind</code> that the syntax you are matching on will have.</li>\n</ol>",
        "id": 286667039,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655580889
    },
    {
        "content": "<p>Also if you find anything confusing or not nicely understandable in those chapters please do tell us, we are eager to improve the explanations.</p>",
        "id": 286667200,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655581099
    },
    {
        "content": "<p>Thanks! This book looks like exactly what I was looking for. I'll post here again if I can't get the example above working or if I need some clarification on a section of the book.</p>",
        "id": 286667286,
        "sender_full_name": "Dan W.",
        "timestamp": 1655581209
    }
]