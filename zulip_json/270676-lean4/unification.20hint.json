[
    {
        "content": "<p>What is unification hint and where can I learn more about it?</p>",
        "id": 221746513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609924146
    },
    {
        "content": "<p>Also this question, but for lean3</p>",
        "id": 221747501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609925025
    },
    {
        "content": "<p>Is there a way to make the following code work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Magma</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M.α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"**\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Magma</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">S.α</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|-</span>\n  <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat.Magma</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">**</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 222112010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610132585
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/unifhint.html\">https://leanprover.github.io/lean4/doc/unifhint.html</a><br>\n<span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 222114651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610133998
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- instance : CoeSort Magma Type where</span>\n<span class=\"c1\">--   coe M := M.α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"**\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span> <span class=\"n\">_</span> <span class=\"c1\">-- added underscore</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Magma</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat.Magma</span>\n  <span class=\"bp\">|-</span>\n  <span class=\"n\">S.α</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span>\n  <span class=\"c1\">--swapped</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">**</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- added type hint</span>\n</code></pre></div>",
        "id": 222116414,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610134975
    },
    {
        "content": "<p>nice!</p>",
        "id": 222116452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610135001
    },
    {
        "content": "<p>The underscore and type hint I completely understand, but what's going on with the swapped syntax in the  unification hint itself?</p>",
        "id": 222116685,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610135128
    },
    {
        "content": "<p>I guess because normally one would try to check a typing judgment by matching it against the conclusions of inference rules</p>",
        "id": 222116901,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610135260
    },
    {
        "content": "<p>In the unification hint paper <a href=\"https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf\">https://www.cs.unibo.it/~sacerdot/PAPERS/tphol09.pdf</a> they also use this order.</p>",
        "id": 222116989,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610135294
    },
    {
        "content": "<p>Well this sure is exciting to see.</p>",
        "id": 222117015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610135308
    },
    {
        "content": "<p>but how well can this scale?</p>",
        "id": 222117040,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610135331
    },
    {
        "content": "<p>Yeah that's something we should experiment with.</p>",
        "id": 222117063,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610135351
    },
    {
        "content": "<p>I mean, what if I want to reason with an arbitrary Magma? Do I need to keep writing <code>S.\\a</code> all the time?</p>",
        "id": 222117221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610135439
    },
    {
        "content": "<p>Yeah good question. Why can't we have the CoeSort as well?</p>",
        "id": 222117253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610135461
    },
    {
        "content": "<p>(Looks like adding the <code>CoeSort</code> instance doesn't break anything.)</p>",
        "id": 222117293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610135489
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Magma</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M.α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"**\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span> <span class=\"n\">_</span> <span class=\"c1\">-- added underscore</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Magma</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">unif_hint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat.Magma</span>\n  <span class=\"bp\">|-</span>\n  <span class=\"n\">S.α</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">**</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- added type hint</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 222117386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610135525
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Magma</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Magma</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M.α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"**\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Magma.mul</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">**</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">**</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">**</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">**</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 222117973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610135867
    },
    {
        "content": "<p>looks like this works as-is</p>",
        "id": 222117988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610135875
    },
    {
        "content": "<p>ok but can we build a bundled algberaic hierarchy without having to write every lemma 37 times?</p>",
        "id": 222118269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610136011
    },
    {
        "content": "<p>The answer is yes and the solution is in the literature: the \"Packaging mathematical structures\", \"Competing inheritance paths in dependent type theory [...]\" and \"Hierarchy builder\" papers are a good start to explain how to do so with Canonical structures which are a strict subset of unification hints. An extensive use case on a large hierarchy can be found in the <a href=\"https://github.com/math-comp/math-comp\">Coq mathematical components library</a>. I also wrote a short demo in lean3, for a lean meeting that someone found in the zulip archives and posted again in the topic of the same name but for lean3. Please have a look.</p>",
        "id": 222204094,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1610250677
    },
    {
        "content": "<p>I think this is the post/demo in question: <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/unification.20hints.html#158613068\">https://leanprover-community.github.io/archive/stream/113488-general/topic/unification.20hints.html#158613068</a></p>",
        "id": 222227882,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1610293692
    }
]