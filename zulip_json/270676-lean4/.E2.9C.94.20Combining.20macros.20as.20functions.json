[
    {
        "content": "<p>Are you looking for <code>expandMacros</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[macro foo1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo1</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"kd\">@[macro foo2]</span>\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo2</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getNat.repr</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n     <span class=\"k\">let</span> <span class=\"n\">xs'</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">xs.mapM</span> <span class=\"n\">Lean.expandMacros</span>\n     <span class=\"k\">let</span> <span class=\"n\">xsl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs'.toList.map</span> <span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span>\n     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">xsl</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 290073922,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658223067
    },
    {
        "content": "<p>that was exactly what I was looking for, thank you!</p>",
        "id": 290074775,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658223565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 290074786,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658223570
    }
]