[
    {
        "content": "<p>This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"kd\">class</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">SpecificA</span>\n<span class=\"kd\">class</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A.Z</span> <span class=\"n\">α</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">VerySpecificA</span>\n<span class=\"kd\">class</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SpecificA.Z</span> <span class=\"n\">α</span>\n<span class=\"kd\">end</span> <span class=\"n\">VerySpecificA</span>\n<span class=\"kd\">end</span> <span class=\"n\">SpecificA</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>The reason is that the first extends creates a field called \"toZ\" to convert to its parent class, and the second extends wants to create a similar field with the exact same name \"toZ\".</p>\n<p>To fix that I can rename the classes with specific names. But that kinds of defeats the idea of using a namespace to recycle names ... </p>\n<p>Another idea would be for lean to generate the \"to\" fields with the full path explicit in their names for example: the first one \"toA_Z\" and the second one \"toA_SpecificA_Z\"<br>\nIs that a good or bad idea?</p>",
        "id": 249505316,
        "sender_full_name": "Michael Jam",
        "timestamp": 1629023642
    },
    {
        "content": "<p>A more compact version: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Specific.Z</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Z</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Specific.EvenMore.Z</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Specific.Z</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 249509796,
        "sender_full_name": "Michael Jam",
        "timestamp": 1629030204
    },
    {
        "content": "<p>This issue has been fixed a few days ago. Could you please try the current nightly build?<br>\n<a href=\"https://github.com/leanprover/lean4/commit/74bd537465b650eb5796beda971619dcba4824e9\">https://github.com/leanprover/lean4/commit/74bd537465b650eb5796beda971619dcba4824e9</a></p>",
        "id": 249512536,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1629034017
    }
]