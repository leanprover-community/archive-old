[
    {
        "content": "<p>I'm trying to figure out how to make a command that creates a structure where the number of fields can vary.<br>\nFor instance, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would give me a command where <code>test foo</code> would make an empty structure called <code>foo</code>.</p>\n<p>Now what I want similar command, but with an additional parameter, say <code>n</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For simplicity, let's just say that this command should create a structure named <code>$s</code>, with <code>n</code> fields, say called <code>a_1</code>, <code>a_2</code>, ..., <code>a_n</code>, all of type <code>Nat</code>.</p>\n<p>I'm not really sure where to even look for examples of such things. Can anyone point me in the right direction?</p>",
        "id": 302140940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664828151
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">idents</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">idx</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n.getNat</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">idents</span> <span class=\"o\">:=</span> <span class=\"n\">idents.push</span> <span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"a_{idx}\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">idents</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 302209997,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1664870759
    },
    {
        "content": "<p>I think the main challenge is the splice, about which I've had a <a href=\"#narrow/stream/270676-lean4/topic/Antiquot.20Splice/near/297723348\">question</a> recently.</p>",
        "id": 302210301,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1664870853
    },
    {
        "content": "<p>Thanks! This is much easier than I expected!</p>",
        "id": 302269022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664892596
    },
    {
        "content": "<p>BTW, is there somewhere where I can read more about <code>$[ ... ]*</code>?</p>",
        "id": 302271690,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664893412
    }
]