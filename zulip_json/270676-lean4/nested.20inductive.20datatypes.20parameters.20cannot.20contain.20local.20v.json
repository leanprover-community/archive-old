[
    {
        "content": "<p>Here is a tiny example of a problem I ran into recently</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ty.type</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E₁</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">cst</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ty.type</span> <span class=\"bp\">→</span> <span class=\"n\">E₁</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">E₁</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">E₁</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">E₁</span> <span class=\"n\">Ty.bool</span>\n<span class=\"c1\">-- no problem</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E₂</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">cst</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ty.type</span> <span class=\"bp\">→</span> <span class=\"n\">E₂</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">E₂</span> <span class=\"n\">ty</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">E₂</span> <span class=\"n\">ty</span>\n<span class=\"c1\">-- no problem</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E₃</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">cst</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ty.type</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">Ty.bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">E₃</span> <span class=\"n\">ty</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span>\n<span class=\"c1\">-- (kernel) invalid nested inductive datatype 'Array',</span>\n<span class=\"c1\">-- nested inductive datatypes parameters cannot contain local variables.</span>\n</code></pre></div>",
        "id": 321166614,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673617996
    },
    {
        "content": "<p>I found a handful of discussions that are somewhat related:</p>\n<ul>\n<li><a href=\"#narrow/stream/270676-lean4/topic/Tree.20with.20fixed.20branching\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Tree.20with.20fixed.20branching</a></li>\n<li><a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20requiring.20proofs.20on.20inductive.20constructors\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20requiring.20proofs.20on.20inductive.20constructors</a></li>\n</ul>\n<p>But even after reading them, I'm not sure what precisely the problem is in my example and how to solve it assuming it's possible.</p>",
        "id": 321166645,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673618008
    },
    {
        "content": "<p>Admittedly it's probably because I'm still too much of a Lean noob to actually understand these discussions fully, so any direct help or pointers to related discussions elsewhere would be greatly appreciated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 321166843,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673618055
    },
    {
        "content": "<p>What is happening is that the presence of the <code>eq</code> constructor is making <code>ty</code> have to be treated as an index of the inductive type instead of a parameter. (In lean 3, the parameters all came before the colon in the inductive type declaration and the indices after, but lean 4 tries to be clever and promote indices to parameters when it can.)</p>",
        "id": 321173693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673619802
    },
    {
        "content": "<p>That's only half of the error though, the other half is that the nested inductive checker does not accept inductives which depend on local variables like <code>ty</code> here. I <em>think</em> this is not an essential constraint, and the checker could accept nested inductive families, but this is a very thorny part of the theory and I would prefer to be conservative without an explicit proof that it's sound to do this</p>",
        "id": 321174355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673619976
    },
    {
        "content": "<p>Is this the MWE, or can it be made smaller?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Const</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Const1</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Const1</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E₃</span> <span class=\"o\">:</span> <span class=\"n\">Const</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Const</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Const1</span> <span class=\"o\">(</span><span class=\"n\">E₃</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">Const.mk</span>\n</code></pre></div>",
        "id": 321174601,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673620037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/nested.20inductive.20datatypes.20parameters.20cannot.20contain.20local.20v/near/321173693\">said</a>:</p>\n<blockquote>\n<p>What is happening is that the presence of the <code>eq</code> constructor is making <code>ty</code> have to be treated as an index of the inductive type instead of a parameter. (In lean 3, the parameters all came before the colon in the inductive type declaration and the indices after, but lean 4 tries to be clever and promote indices to parameters when it can.)</p>\n</blockquote>\n<p>That's quite helpful thanks. I did not know about this distinction between parameters and indices</p>",
        "id": 321174885,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673620096
    },
    {
        "content": "<p>Indeed the following mutual inductive is accepted</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">E₃</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">cst</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ty.type</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">Ty.bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List_E₃</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">List_E₃</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List_E₃</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">E₃</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">List_E₃</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">List_E₃</span> <span class=\"n\">ty</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so I think it is an issue in the checker (which is trying to verify that the reduction to this mutual inductive is legal)</p>",
        "id": 321175028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673620136
    },
    {
        "content": "<p>For readers that want to learn more about indices/parameters, I found the answer for this SO post helpful:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices\">https://stackoverflow.com/questions/24600256/difference-between-type-parameters-and-indices</a></li>\n</ul>",
        "id": 321175053,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673620143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/nested.20inductive.20datatypes.20parameters.20cannot.20contain.20local.20v/near/321175028\">said</a>:</p>\n<blockquote>\n<p>so I think it is an issue in the checker (which is trying to verify that the reduction to this mutual inductive is legal)</p>\n</blockquote>\n<p>Are you saying that the error I get is not expected in the sense that the checker could/should see there's such a reduction, and accept the original code with the standard <code>List</code>/<code>Array</code> types?</p>",
        "id": 321333365,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673693680
    },
    {
        "content": "<p>yes, at least from my cursory reading of it</p>",
        "id": 321350110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673699860
    },
    {
        "content": "<p>My knowledge of the nested inductive checker is only indirect, I haven't read the code and there isn't really any spec for it besides what I've said so far (Sebastian's thesis extends <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> to include lean 4 features but I don't think it covers the nested inductive checker in full detail - things get pretty hairy when you write it all down)</p>",
        "id": 321350619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673700042
    }
]