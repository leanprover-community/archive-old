[
    {
        "content": "<p>I found myself wanting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">fillImplicitArgumentsWithFreshMVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">fillImplicitArgumentsWithFreshMVars</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                    <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>but I feel like it must exist somewhere already, or have a better implementation.</p>\n<p>Any suggestions?</p>",
        "id": 320582181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673404960
    },
    {
        "content": "<p>(See <a href=\"https://github.com/leanprover-community/mathlib4/pull/1476/files#diff-d272d0233c9cb593439825761f1a8bcb5858ebc28d1bba77f6199ffbf9046e30R28\">https://github.com/leanprover-community/mathlib4/pull/1476/files#diff-d272d0233c9cb593439825761f1a8bcb5858ebc28d1bba77f6199ffbf9046e30R28</a> for the application.)</p>",
        "id": 320582424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673405187
    },
    {
        "content": "<p>I'm not aware of an existing function that does this, but it seems useful. I would implement it with <code>forallTelescope</code> (or one of its variants, if  you want to discover implicit arguments up to computation).</p>",
        "id": 320683643,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673438238
    }
]