[
    {
        "content": "<p>I sometimes run into the situation that I have multiple subgoals that can all be solved the same way, except that they require a single different value in an application of a lemma or something.<br>\nAs an example consider the following (non-mwe) real world example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">ports</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">reactions</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">reactors</span><span class=\"o\">⟩</span> <span class=\"c1\">-- Splits an (_ ∧ _ ∧ _ ∧ _) into four subgoals</span>\n\n  <span class=\"c1\">-- Uses Cmp.prt</span>\n  <span class=\"n\">case</span> <span class=\"n\">ports</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">objFor_ext</span> <span class=\"n\">Cmp.prt</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">o</span>\n    <span class=\"n\">byCases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Cmp.prt</span> <span class=\"bp\">=</span> <span class=\"n\">cmp</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span>\n      <span class=\"n\">byCases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span>\n        <span class=\"n\">byCases</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n        <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span><span class=\"o\">]</span>\n        <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Iff.intro</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₁</span><span class=\"o\">⟩)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hi₁</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">),</span> <span class=\"n\">hi₂</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"n\">Cmp.prt</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">hc₂</span> <span class=\"n\">Cmp.prt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">-- Uses Cmp.stv</span>\n  <span class=\"n\">case</span> <span class=\"n\">state</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">objFor_ext</span> <span class=\"n\">Cmp.stv</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">o</span>\n    <span class=\"n\">byCases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Cmp.stv</span> <span class=\"bp\">=</span> <span class=\"n\">cmp</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span>\n      <span class=\"n\">byCases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span>\n        <span class=\"n\">byCases</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n        <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span><span class=\"o\">]</span>\n        <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Iff.intro</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₁</span><span class=\"o\">⟩)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hi₁</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">),</span> <span class=\"n\">hi₂</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"n\">Cmp.stv</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">hc₂</span> <span class=\"n\">Cmp.stv</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">-- Uses Cmp.rcn</span>\n  <span class=\"n\">case</span> <span class=\"n\">reactions</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">objFor_ext</span> <span class=\"n\">Cmp.rcn</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">o</span>\n    <span class=\"n\">byCases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Cmp.rcn</span> <span class=\"bp\">=</span> <span class=\"n\">cmp</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span>\n      <span class=\"n\">byCases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span>\n        <span class=\"n\">byCases</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n        <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span><span class=\"o\">]</span>\n        <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Iff.intro</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₁</span><span class=\"o\">⟩)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hi₁</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">),</span> <span class=\"n\">hi₂</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"n\">Cmp.rcn</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">hc₂</span> <span class=\"n\">Cmp.rcn</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">-- Uses Cmp.rtr</span>\n  <span class=\"n\">case</span> <span class=\"n\">reactors</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">objFor_ext</span> <span class=\"n\">Cmp.rtr</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">o</span>\n    <span class=\"n\">byCases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Cmp.rtr</span> <span class=\"bp\">=</span> <span class=\"n\">cmp</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span>\n      <span class=\"n\">byCases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span>\n        <span class=\"n\">byCases</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n        <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span><span class=\"o\">]</span>\n        <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Iff.intro</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₁</span><span class=\"o\">⟩)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hi₁</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">),</span> <span class=\"n\">hi₂</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"n\">Cmp.rtr</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">hc₂</span> <span class=\"n\">Cmp.rtr</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Each of the four subgoals is identical in how it's solved, the only difference being each goal uses a different type of <code>Cmp</code> (<code>Cmp.prt</code>, <code>Cmp.stv</code>, <code>Cmp.rcn</code> and <code>Cmp.rtr</code>).</p>\n<p>Is there some way to associate such a value with a goal?<br>\nSomething like saying <code>for c in #[Cmp.prt. Cmp.stv, Cmp.rcn, Cmp.rtr] { solve the goal using c }</code>.</p>",
        "id": 262613400,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1637772493
    },
    {
        "content": "<p>It would be pretty easy to do that using <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/RunTac.lean\"><code>runTac</code></a>, or you can make a local macro tactic</p>",
        "id": 262613847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637772687
    },
    {
        "content": "<p>although, you should really consider making a lemma for that, since it looks like most of it doesn't actually depend on the choice of constructor</p>",
        "id": 262614357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637772884
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span>\n  <span class=\"n\">apply</span> <span class=\"n\">objFor_ext</span> <span class=\"bp\">$</span><span class=\"n\">e</span>\n  <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">o</span>\n  <span class=\"n\">byCases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">cmp</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span>\n    <span class=\"n\">byCases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span>\n      <span class=\"n\">byCases</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">ht₁</span> <span class=\"n\">ht₂</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Iff.intro</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₁</span><span class=\"o\">⟩)</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">not_and_self_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">objFor_unique_obj</span> <span class=\"n\">h</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩)</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hi₁</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">),</span> <span class=\"n\">hi₂</span> <span class=\"n\">j</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">hc₁</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">hc₂</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 262614669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637773030
    }
]