[
    {
        "content": "<p>Hi! I'm facing a weird issue with compiled Lean 4 code.</p>\n<p>If you clone <a href=\"https://github.com/yatima-inc/Vero\">https://github.com/yatima-inc/Vero</a> and go to <code>Tests/Reduce.lean</code> and place a <code>#eval main</code> at the end of the file you will see that it runs just fine.</p>\n<p>But if, instead, you do <code>lake build Tests.Reduce</code> and then run <code>./build/bin/Tests-Reduce</code>, this happens:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>~/dev/lean/Vero Î» ./build/bin/Tests-Reduce\nINTERNAL PANIC: executed <span class=\"s1\">'sorry'</span>\n</code></pre></div>\n<p>I've never seen this happen before. Any idea what might be happening here? Thanks in advance!</p>",
        "id": 309453296,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668344856
    },
    {
        "content": "<p>Could you run it under gdb and break on <code>lean_internal_panic</code>?</p>",
        "id": 309453677,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668345092
    },
    {
        "content": "<p>I suppose we could print a backtrace on internal panics as well</p>",
        "id": 309453722,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668345118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Broken.20compilation/near/309453677\">said</a>:</p>\n<blockquote>\n<p>Could you run it under gdb and break on <code>lean_internal_panic</code>?</p>\n</blockquote>\n<p>How do I do that? Is it a <code>lake</code> command?</p>",
        "id": 309454081,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668345308
    },
    {
        "content": "<p><code>gdb ./build/bin/Tests-Reduce</code> then <code>b lean_internal_panic</code>, <code>run</code>, <code>bt</code> (from memory)</p>",
        "id": 309454233,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668345383
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(gdb) b lean_internal_panic\nPonto de parada 1 at 0x2f527c0\n(gdb) run\nStarting program: /home/arthur/dev/lean/Vero/build/bin/Tests-Reduce\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nBreakpoint 1, 0x00005555584a67c0 in lean_internal_panic ()\n(gdb) bt\n#0  0x00005555584a67c0 in lean_internal_panic ()\n#1  0x00005555584a69ad in lean_sorry ()\n#2  0x0000555555a79477 in initialize_Vero_Syntax_Core_Data ()\n#3  0x0000555555a3f688 in initialize_Tests_Reduce ()\n#4  0x0000555555a405bc in main ()\n</code></pre></div>",
        "id": 309454614,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668345589
    },
    {
        "content": "<p>Ah, that is an unfortunate limitation of the current compiler. You should not use <code>sorry</code> in constants (parameterless defs) like in <a href=\"https://github.com/yatima-inc/Vero/blob/main/Vero/Syntax/Core/Data.lean#L18\">https://github.com/yatima-inc/Vero/blob/main/Vero/Syntax/Core/Data.lean#L18</a>.</p>",
        "id": 309454992,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668345790
    },
    {
        "content": "<p>Alright, good to know. Thanks again!</p>",
        "id": 309455115,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1668345846
    },
    {
        "content": "<p>Hi! I hit some strange panic again on this branch: <a href=\"https://github.com/yatima-inc/yatima-lang/tree/ap/transpiler-deepdive-pt2\">https://github.com/yatima-inc/yatima-lang/tree/ap/transpiler-deepdive-pt2</a></p>\n<p>This is the output of <code>gdb</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Breakpoint 1, 0x000055555945f400 in lean_internal_panic ()\n(gdb) bt\n#0  0x000055555945f400 in lean_internal_panic ()\n#1  0x000055555945f47d in lean_internal_panic_unreachable ()\n#2  0x0000555556b25705 in initialize_Yatima_Transpiler2_Transpiler ()\n#3  0x0000555556b41d30 in initialize_Yatima_Cli_TranspileCmd ()\n#4  0x0000555556081860 in initialize_Main ()\n#5  0x0000555556081e08 in main ()\n</code></pre></div>\n<p>The strangeness is that there's no <code>unreachable!</code> in my code. The error happens when I plug this file on my import tree: <a href=\"https://github.com/yatima-inc/yatima-lang/blob/ap/transpiler-deepdive-pt2/Yatima/Transpiler2/Transpiler.lean\">https://github.com/yatima-inc/yatima-lang/blob/ap/transpiler-deepdive-pt2/Yatima/Transpiler2/Transpiler.lean</a></p>",
        "id": 311486623,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669070458
    },
    {
        "content": "<p>Is there something I can do to avoid that unreachable panic on the \"initialize\" routine?</p>",
        "id": 311487801,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669070989
    },
    {
        "content": "<p>Another clue... the code worked just fine with the previous version of that file: <a href=\"https://github.com/yatima-inc/yatima-lang/blob/ap/transpiler-deepdive-pt2/Yatima/Transpiler/Transpiler.lean\">https://github.com/yatima-inc/yatima-lang/blob/ap/transpiler-deepdive-pt2/Yatima/Transpiler/Transpiler.lean</a></p>\n<p>In fact, as soon as I plug that one instead, it works like magic</p>",
        "id": 311488667,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669071353
    },
    {
        "content": "<p>If you compile with debugging options and without C optimizaitons enabld you get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x0000555559c45200</span> <span class=\"k\">in</span> <span class=\"n\">lean_internal_panic</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x0000555559c4527d</span> <span class=\"k\">in</span> <span class=\"n\">lean_internal_panic_unreachable</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x0000555557304bd0</span> <span class=\"k\">in</span> <span class=\"n\">_init_l_Yatima_Transpiler_appendCtor___closed__5</span> <span class=\"o\">()</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Yatima</span><span class=\"bp\">/</span><span class=\"n\">Transpiler2</span><span class=\"bp\">/</span><span class=\"n\">Transpiler.c</span><span class=\"o\">:</span><span class=\"mi\">2371</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0x0000555557303046</span> <span class=\"k\">in</span> <span class=\"n\">initialize_Yatima_Transpiler2_Transpiler</span> <span class=\"o\">(</span><span class=\"n\">builtin</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">'\\</span><span class=\"mi\">001</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Yatima</span><span class=\"bp\">/</span><span class=\"n\">Transpiler2</span><span class=\"bp\">/</span><span class=\"n\">Transpiler.c</span><span class=\"o\">:</span><span class=\"mi\">29695</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0x0000555557321c64</span> <span class=\"k\">in</span> <span class=\"n\">initialize_Yatima_Cli_TranspileCmd</span> <span class=\"o\">(</span><span class=\"n\">builtin</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">'\\</span><span class=\"mi\">001</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Yatima</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">TranspileCmd.c</span><span class=\"o\">:</span><span class=\"mi\">1337</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0x000055555609ae94</span> <span class=\"k\">in</span> <span class=\"n\">initialize_Main</span> <span class=\"o\">(</span><span class=\"n\">builtin</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">'\\</span><span class=\"mi\">001</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">550</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0x000055555609b3f6</span> <span class=\"k\">in</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">argc</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">argv</span><span class=\"bp\">=</span><span class=\"mi\">0x7fffffffd7b8</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">636</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">up</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x0000555559c4527d</span> <span class=\"k\">in</span> <span class=\"n\">lean_internal_panic_unreachable</span> <span class=\"o\">()</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x0000555557304bd0</span> <span class=\"k\">in</span> <span class=\"n\">_init_l_Yatima_Transpiler_appendCtor___closed__5</span> <span class=\"o\">()</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Yatima</span><span class=\"bp\">/</span><span class=\"n\">Transpiler2</span><span class=\"bp\">/</span><span class=\"n\">Transpiler.c</span><span class=\"o\">:</span><span class=\"mi\">2371</span>\n<span class=\"n\">list</span>\n<span class=\"mi\">2371</span>    <span class=\"n\">lean_internal_panic_unreachable</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">list</span>\n<span class=\"mi\">2366</span>    <span class=\"o\">}</span>\n<span class=\"mi\">2367</span>    <span class=\"o\">}</span>\n<span class=\"mi\">2368</span>    <span class=\"n\">static</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">_init_l_Yatima_Transpiler_appendCtor___closed__5</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"mi\">2369</span>    <span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"mi\">2370</span>    <span class=\"o\">{</span>\n<span class=\"mi\">2371</span>    <span class=\"n\">lean_internal_panic_unreachable</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n<span class=\"mi\">2372</span>    <span class=\"o\">}</span>\n<span class=\"mi\">2373</span>    <span class=\"o\">}</span>\n<span class=\"mi\">2374</span>    <span class=\"n\">static</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">_init_l_Yatima_Transpiler_appendCtor___closed__6</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"mi\">2375</span>    <span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so apparently it came to the conclusion, that there in your appendCtor function it is appropriate to have an unreachable somewhere. Looking at the output of the ir with: <code>set_option trace.compiler.ir.result true in</code> on your function (specifically searched for the closed_5 term there) it appears this unreachable pops up when you walk into a case arm \"              Yatima.Split.injáµ£ â\" which I don't see explicitly getting mentioned in this function so its either getting inlined from somewhere or the macro stuff you got going on there is producing it.</p>\n<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span></p>",
        "id": 311489041,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1669071540
    },
    {
        "content": "<p>Hmm, I don't see it <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 311490615,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669072162
    },
    {
        "content": "<p>It could also be that the compiler decided to optimize something you generated there into an unreachable.</p>",
        "id": 311490658,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1669072186
    },
    {
        "content": "<p>Hm no, the new compiler also already seems to believe that there is an unreachable here, right from the beginning.</p>",
        "id": 311491864,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1669072722
    },
    {
        "content": "<p>But it doesn't even reach that code. If you go to Main.lean and print something there, it doesn't show</p>",
        "id": 311491976,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669072782
    },
    {
        "content": "<p>That's not necessarily an issue, as you can see in the backtrace it is already panicking this way during initialization phase so before it ever reaches main during setting up the initial environment. It appears you are setting up something here in the Transpiler2 that calls into this code which in turn calls into appendCtor an panics. Looking at the generate code for appendCtor it does also seem to believe that it should indeed make the injr unreachable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Yatima.Transpiler.appendCtor</span> <span class=\"o\">:</span> <span class=\"n\">Both</span> <span class=\"n\">Constructor</span> <span class=\"bp\">â</span> <span class=\"n\">AST</span> <span class=\"bp\">â</span> <span class=\"n\">Nat</span> <span class=\"bp\">â</span> <span class=\"n\">TranspileM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">ctor</span> <span class=\"n\">indLit</span> <span class=\"n\">indices</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">â</span> <span class=\"n\">derefExpr</span> <span class=\"o\">{</span> <span class=\"n\">anon</span> <span class=\"o\">:=</span> <span class=\"n\">ctor.anon.type</span><span class=\"o\">,</span> <span class=\"kd\">meta</span> <span class=\"o\">:=</span> <span class=\"n\">ctor.meta.type</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">Split.proj</span><span class=\"bp\">áµ£</span> <span class=\"n\">ctor.meta.name</span>\n  <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Split.projâ</span> <span class=\"n\">ctor.anon.idx</span>\n  <span class=\"k\">let</span> <span class=\"n\">__do_lift</span> <span class=\"bp\">â</span> <span class=\"n\">read</span>\n  <span class=\"k\">match</span> <span class=\"n\">Store.telescopeLamPi</span> <span class=\"n\">__do_lift.store</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">type</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">appendBinding</span>\n        <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span>\n          <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"s2\">\"CONS\"</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">toAST</span> <span class=\"n\">indLit</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">cons</span>\n                <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"s2\">\"CONS\"</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">cons</span>\n                    <span class=\"o\">(</span><span class=\"n\">toAST</span>\n                      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">ctor.anon.idx</span> <span class=\"k\">with</span>\n                      <span class=\"bp\">|</span> <span class=\"n\">Split.injâ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"s2\">\"NIL\"</span><span class=\"o\">)</span> <span class=\"n\">nil</span><span class=\"o\">)))</span>\n                <span class=\"n\">nil</span><span class=\"o\">)))</span>\n        <span class=\"n\">true</span>\n</code></pre></div>\n<p>And the specific piece of code that is at fault here is if you look back at the original source this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"s2\">\"CONS\"</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">toAST</span> <span class=\"n\">indLit</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">cons</span>\n                <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"s2\">\"CONS\"</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">cons</span>\n                    <span class=\"o\">(</span><span class=\"n\">toAST</span>\n                      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">ctor.anon.idx</span> <span class=\"k\">with</span>\n                      <span class=\"bp\">|</span> <span class=\"n\">Split.injâ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"s2\">\"NIL\"</span><span class=\"o\">)</span> <span class=\"n\">nil</span><span class=\"o\">)))</span>\n                <span class=\"n\">nil</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>which is the one coming from your macro so I'd claim the macro is at fault for putting an unreachable where there is reachable code.</p>\n<p>Note: the other calls to your macro code are also doing similar stuff with only matching on one variant so I'm not 100% sure it is actually this macro, figuring out which macro call is actually at fault here would take some more time.</p>",
        "id": 311492519,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1669073018
    },
    {
        "content": "<p>We have had issues with antiquotations before. Maybe it's something similar. I'll try to replace those after dinner</p>",
        "id": 311494060,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669073888
    },
    {
        "content": "<p>Thanks for the support!!</p>",
        "id": 311494073,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669073900
    },
    {
        "content": "<p>Wait, that is not the issue. The other arm of the match is indeed unreachable</p>",
        "id": 311500704,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669078109
    },
    {
        "content": "<p>Yeah, I just commented out the code of <code>appendCtor</code> and it hit the same problem. I think I'm just doing something forbidden with the current compiler, like the previous time when I had constants with <code>sorry</code>, which was causing an internal panic even though the <code>sorry</code>s were never actually met during execution</p>",
        "id": 311503008,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1669079649
    }
]