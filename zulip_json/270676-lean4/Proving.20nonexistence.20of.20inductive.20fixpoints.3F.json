[
    {
        "content": "<p>I'm trying to figure out how to prove that a term that I cannot construct a term that would be some sort of (coinductive?) fixpoint of an inductive term. The catch is that the recursion is 'hidden' by a function term. Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Object</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subobjects</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Object</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Object</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Object.subobjects</span> <span class=\"o\">:</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Object</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">sub</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sub</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no_suboject_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Object</span><span class=\"o\">,</span> <span class=\"bp\">¬∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">o.subobjects</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm sure there's some nice type-theoretic background to this that I don't have <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> can someone here maybe help me out, how would I prove something like <code>no_subobject_self</code>? </p>\n<p>(BTW: I posted this here since I'm working with Lean4, but happy to move it if it makes more sense in a different stream)</p>",
        "id": 295810750,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1661766159
    },
    {
        "content": "<p>Unfortunately that's a really bad combination of features for lean right now. <code>induction</code> doesn't support nested inductives, and well founded recursion doesn't support inductives with rank higher than omega (in your case, this is caused by the <code>(Nat -&gt; T) -&gt; T</code> style constructor</p>",
        "id": 295814689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661767859
    },
    {
        "content": "<p>You can do it but you basically have to construct the proof term manually</p>",
        "id": 295814728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661767880
    }
]