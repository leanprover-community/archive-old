[
    {
        "content": "<p>Hello world. Can you increase the stack size?</p>\n<p><code>Stack overflow detected. Aborting.</code></p>\n<p>Alternatively is there a better way to initialize an array/matrix over a function of its coordinates which does not lead to exhausting the stack?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.range</span> <span class=\"n\">height</span>\n<span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.range</span> <span class=\"n\">width</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|&gt;</span> <span class=\"n\">List.join</span>\n<span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"n\">Nat.toUInt8</span>\n<span class=\"bp\">|&gt;</span> <span class=\"n\">List.toArray</span>\n<span class=\"bp\">|&gt;</span> <span class=\"n\">ByteArray.mk</span>\n</code></pre></div>",
        "id": 260501326,
        "sender_full_name": "Sofia",
        "timestamp": 1636188326
    },
    {
        "content": "<p>I'm trying to render images. 144p works, but any higher 16:9 resolution exceeds the limit.</p>",
        "id": 260501387,
        "sender_full_name": "Sofia",
        "timestamp": 1636188407
    },
    {
        "content": "<p>run <code>ulimit -s unlimited</code> before running your program</p>",
        "id": 260501405,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1636188440
    },
    {
        "content": "<p>that is if you're on linux</p>",
        "id": 260501410,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1636188453
    },
    {
        "content": "<p>Allocating a/multiple cons cells per pixel doesn't sound very efficient to begin with. You should create the array using <code>ByteArray.mkEmpty &lt;size&gt;</code> and then manipulate it using <code>ByteArray.set!</code>.</p>",
        "id": 260501462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636188513
    },
    {
        "content": "<p>Aye, thanks.</p>",
        "id": 260501470,
        "sender_full_name": "Sofia",
        "timestamp": 1636188549
    },
    {
        "content": "<p>It's not as nicely functional as your version, but should be vastly more efficient</p>",
        "id": 260501518,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636188603
    },
    {
        "content": "<p>Can make it functional. ;)</p>",
        "id": 260501530,
        "sender_full_name": "Sofia",
        "timestamp": 1636188646
    },
    {
        "content": "<p>Thanks for the suggestion. Either way I'll abstract around it because this really should just be its own function on the (Byte)Array types IMHO. Lean 3 has Steam.approx to construct lists from functions. Not quite sure how the Lean 4 streams work, but did note no approx function.</p>",
        "id": 260501550,
        "sender_full_name": "Sofia",
        "timestamp": 1636188714
    },
    {
        "content": "<p>Doesn't need to be super functional anyway. At least an excuse to use parallel for-in-do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bytearray_from_matrix</span> <span class=\"o\">(</span><span class=\"n\">width</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"bp\">*</span> <span class=\"n\">width</span><span class=\"o\">)</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">height</span> <span class=\"k\">do</span>\n        <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res.set</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">width</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Nat.toUInt8</span><span class=\"o\">)</span>\n    <span class=\"n\">res</span>\n</code></pre></div>",
        "id": 260502407,
        "sender_full_name": "Sofia",
        "timestamp": 1636189985
    },
    {
        "content": "<p>Next question: is either Lean 4 or C smart enough to optimize away that multiplication. I sure hope so. But don't quite know the behavior of the parallel for loop here. Any insight?</p>",
        "id": 260502479,
        "sender_full_name": "Sofia",
        "timestamp": 1636190064
    },
    {
        "content": "<p>Specifically the order of its iteration.</p>",
        "id": 260502494,
        "sender_full_name": "Sofia",
        "timestamp": 1636190117
    },
    {
        "content": "<p>Can confirm it behaves better with the stack.</p>",
        "id": 260502639,
        "sender_full_name": "Sofia",
        "timestamp": 1636190316
    },
    {
        "content": "<p>Uhh... My array is empty. o.o</p>",
        "id": 260502721,
        "sender_full_name": "Sofia",
        "timestamp": 1636190463
    },
    {
        "content": "<p>Seems set fails. Pushing makes more sense anyway.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"bp\">*</span> <span class=\"n\">width</span><span class=\"o\">)</span>\n<span class=\"n\">for</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">height</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">width</span> <span class=\"k\">do</span>\n        <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Nat.toUInt8</span><span class=\"o\">)</span>\n<span class=\"n\">res</span>\n</code></pre></div>",
        "id": 260502846,
        "sender_full_name": "Sofia",
        "timestamp": 1636190617
    },
    {
        "content": "<p>Yeah, my bad</p>",
        "id": 260502854,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636190641
    },
    {
        "content": "<p>Now able to render 1920x1080x24bpp. :)</p>",
        "id": 260502984,
        "sender_full_name": "Sofia",
        "timestamp": 1636190814
    },
    {
        "content": "<p>Only ~6MiB when encoded as PPM or PAM. Heh.</p>",
        "id": 260502996,
        "sender_full_name": "Sofia",
        "timestamp": 1636190854
    },
    {
        "content": "<p>Maybe FFI to <a href=\"https://docs.rs/png\">https://docs.rs/png</a> next. ;-)</p>\n<p>Know of any Rust + Lean 4 FFI examples?</p>",
        "id": 260503103,
        "sender_full_name": "Sofia",
        "timestamp": 1636191013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> has been investigating that route, but there is no practicable solution yet afaik. The C ABI is the only somewhat supported FFI so far.</p>",
        "id": 260503341,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636191399
    },
    {
        "content": "<p>Fortunately at least for now; I only need to call from Lean to Rust via C, so... I hope not too painful.</p>",
        "id": 260503421,
        "sender_full_name": "Sofia",
        "timestamp": 1636191511
    },
    {
        "content": "<p>See <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html\">https://leanprover.github.io/lean4/doc/dev/ffi.html</a> for the current state</p>",
        "id": 260503702,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636192008
    },
    {
        "content": "<p>Aye, I've seen this doc. Thanks though. :)</p>",
        "id": 260503957,
        "sender_full_name": "Sofia",
        "timestamp": 1636192432
    },
    {
        "content": "<p>I've haven't devoted much time to it in the last few months due to changing jobs, but I have a Rust package that I call from Lean <a href=\"https://github.com/joehendrix/lean-benchmark-experiments/tree/master/clocklean\">here</a>.</p>",
        "id": 260519679,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1636212419
    },
    {
        "content": "<p>Neat. Will certainly have to play with this. :)</p>",
        "id": 260521377,
        "sender_full_name": "Sofia",
        "timestamp": 1636214631
    }
]