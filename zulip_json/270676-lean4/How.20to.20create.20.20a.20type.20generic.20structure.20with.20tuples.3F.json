[
    {
        "content": "<p>Trying to create a generic structure which contains a Type u x Type u : Type (u +1) tuple</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">values</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Leads to this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">type</span> <span class=\"n\">expected</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.406</span>\n</code></pre></div>\n<p>But doing this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Pair</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">values</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"n\">T</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>What is special about using tuples ( , ) contra Prod?</p>",
        "id": 264365847,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1639083790
    },
    {
        "content": "<p><code>(T, T)</code> is not the notation for the product type. <code>T \\x T</code> is the correct notation.</p>",
        "id": 264366497,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1639084085
    },
    {
        "content": "<p>The error message complains that it doesn't know how to turn a tuple of type <code>Type u × Type u</code> into a type (<code>?m.406</code>).</p>",
        "id": 264366819,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1639084263
    },
    {
        "content": "<p>Note: You would use <code>\\x</code> to write that product symbol.</p>",
        "id": 264367379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639084538
    },
    {
        "content": "<p>Ok, thanks. Is there a special reason why the (T, T) syntax can't be used for types?</p>",
        "id": 264368410,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1639085027
    },
    {
        "content": "<p>Like Marcus mentioned, we use <code>(a,b)</code> for a term of type <code>A \\x B</code> where <code>a : A</code> and <code>b : B</code>. This is more in line with the usual notation from mathematics.</p>",
        "id": 264368541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639085072
    },
    {
        "content": "<p>It can be used, it defines a pair of types.</p>",
        "id": 264368544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639085074
    },
    {
        "content": "<p>Oh, that is true it is ambiguous with first class types</p>",
        "id": 264369078,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1639085324
    }
]