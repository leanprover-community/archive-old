[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">invl</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"n\">invr</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">invl</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n  <span class=\"n\">invr</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv_to_left_inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Inverse</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g.to_fun</span><span class=\"o\">,</span><span class=\"n\">g.invl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">inv_to_right_inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Inverse</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g.to_fun</span><span class=\"o\">,</span><span class=\"n\">g.invr</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The <code>g.invr</code> is triggering an implicit lambda </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">g.invr</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g.to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"bp\">∘</span> <span class=\"n\">g.to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"kd\">variables</span> <span class=\"k\">have</span> <span class=\"n\">been</span> <span class=\"n\">introduced</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">implicit</span> <span class=\"n\">lambda</span> <span class=\"n\">feature</span>\n  <span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3973</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.3972</span>\n<span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">disable</span> <span class=\"n\">implict</span> <span class=\"n\">lambdas</span> <span class=\"n\">using</span> <span class=\"bp\">`@`</span> <span class=\"n\">or</span> <span class=\"n\">writing</span> <span class=\"n\">a</span> <span class=\"n\">lambda</span> <span class=\"n\">expression</span> <span class=\"k\">with</span> <span class=\"bp\">`</span><span class=\"o\">{}</span><span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"o\">[]</span><span class=\"bp\">`</span> <span class=\"n\">binder</span> <span class=\"n\">annotations.</span>\n</code></pre></div>\n<p>but despite the error message I am not sure what to do to disable it here.</p>",
        "id": 305577202,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666467415
    },
    {
        "content": "<p>you have a typo in RightInverse: <code>g</code> should be <code>f</code></p>",
        "id": 305579587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666468490
    },
    {
        "content": "<p>Doh! Thanks.</p>",
        "id": 305579685,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666468523
    },
    {
        "content": "<p>Not telling Lean what <code>f</code> is would do it.</p>",
        "id": 305579862,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666468587
    },
    {
        "content": "<p>I wish there was some option that would disable some of the new automatic stuff in Lean4 like this. In Lean3, the definition of RightInverse would give an error saying that Lean doesn't know what <code>f</code> is. Similarly if you make a typo in the name of some type, it can lead to issues that are hard to debug.</p>",
        "id": 305579956,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666468632
    },
    {
        "content": "<p>I am getting into the habit of switching off the \"if it's a random string of characters, let's just guess that you mean a new variable\" thing</p>",
        "id": 305579968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666468637
    },
    {
        "content": "<p>How do you switch it off?</p>",
        "id": 305580000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666468650
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/dumb.20questions/near/294944238\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/dumb.20questions/near/294944238</a> Patrick does the same too.</p>",
        "id": 305580259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666468763
    },
    {
        "content": "<p>Oh excellent! <code>set_option autoImplicit false</code>!</p>",
        "id": 305580315,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666468790
    },
    {
        "content": "<p>I am glad something productive came from my typo :)</p>",
        "id": 305580430,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666468816
    },
    {
        "content": "<p>I have also trained myself to spot that light blue is a variable and dark blue isn't, so e.g. if you write <code>nil</code> instead of <code>list.nil</code> then you can see it's a different colour. But that wouldn't have helped Matt.</p>",
        "id": 305580454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666468829
    },
    {
        "content": "<p>IIRC in the earlier days of Lean4, this was only activated for greek letters implicitly inserting types. Am I misremembering? Is there a slightly more relaxed option that only does this <code>autoImplicit</code> for greek letters?</p>",
        "id": 305580524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666468870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Implicit.20lambdas.20in.20inverse.20function/near/305580454\">said</a>:</p>\n<blockquote>\n<p>I have also trained myself to spot that light blue is a variable and dark blue isn't, so e.g. if you write <code>nil</code> instead of <code>list.nil</code> then you can see it's a different colour. But that wouldn't have helped Matt.</p>\n</blockquote>\n<p>For multiple reasons <img alt=\":neovim:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/23103.png\" title=\"neovim\"></p>",
        "id": 305580555,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666468913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Implicit.20lambdas.20in.20inverse.20function/near/305580454\">said</a>:</p>\n<blockquote>\n<p>I have also trained myself to spot that light blue is a variable and dark blue isn't, so e.g. if you write <code>nil</code> instead of <code>list.nil</code> then you can see it's a different colour. But that wouldn't have helped Matt.</p>\n</blockquote>\n<p>Yes, this is a quite interesting case. IIRC, Isabelle uses a different color for <em>implicitly</em> introduced variables, with a quite noticeable background shading in fact. Perhaps we should too.</p>",
        "id": 305580997,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666469080
    },
    {
        "content": "<p>I would say that, if the error message suggested that it was possible that I misnamed a variable, it would (most likely) have been fixed immediately without the puzzlement.</p>",
        "id": 305581417,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666469235
    },
    {
        "content": "<p>That the mistake happened in a different declaration does make it a bit complicated. It sure would be better in general if users noticed the mistake right there.</p>",
        "id": 305582191,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666469549
    }
]