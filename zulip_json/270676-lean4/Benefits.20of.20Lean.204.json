[
    {
        "content": "<p>Hi all, sorry if this is the wrong channel (was a bit split between this, general, and new members). </p>\n<p>I am aware that Lean 4 is quite a big change compared to Lean 3, to the point that Lean 3 code is not compatible with Lean 4 (though there is some hope of an automated translation for at least some areas).</p>\n<p>Given the scale of the work therefore required to move the Math Library, I wonder why the new version is worth this cost in time and effort? What does Lean 4 offer compared to Lean 3 that makes it worth it?</p>\n<p>I have had a look on the main lean website but haven’t been able to find a specific “smoking gun” that jumped out as being a large upgrade, but this may just be due to me not being familiar enough with Lean to see the downsides of Lean 3.</p>",
        "id": 304924914,
        "sender_full_name": "Will Fourie",
        "timestamp": 1666176444
    },
    {
        "content": "<p>For maths one benefit is a better typeclass system. It is true that there is mounting evidence that Lean 3 is \"good enough\" for mathematics, but basically we're greedy.</p>",
        "id": 304926318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666176911
    },
    {
        "content": "<p>Also, compiled tactics will make automation faster.</p>",
        "id": 304926916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666177105
    },
    {
        "content": "<p>Also, from what I've heard, metaprogramming in Lean 3 had to be done by abusing the monad meant for tactics. In Lean 4 there's a coherent hierarchy of monads for different use cases.</p>",
        "id": 304927397,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1666177264
    },
    {
        "content": "<p>Great, thanks, I’ll give typeclasses a look in the new Theorem Proving in Lean 4 text. </p>\n<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span>  I am not sure what metaprogramming is or monads in this context, but I’ll give them a look, thanks</p>",
        "id": 304928719,
        "sender_full_name": "Will Fourie",
        "timestamp": 1666177780
    },
    {
        "content": "<p>Also notation will be far more flexible, and mathematicians take notation seriously (the ideal is to have Lean code which looks as close as possible to mathematics written in unicode).</p>\n<p>Metaprogramming/monads are to do with how tactics are written.</p>",
        "id": 304928823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666177814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Benefits.20of.20Lean.204/near/304928823\">said</a>:</p>\n<blockquote>\n<p>Metaprogramming/monads are to do with how tactics are written.</p>\n</blockquote>\n<p>They are also used to define notations/macros. So a better monad stack makes it easier to define (complex) math notation.</p>",
        "id": 304929773,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1666178166
    },
    {
        "content": "<p>Some more points:</p>\n<ul>\n<li>In Lean 4 it is easier to create custom domain specific languages, which may be useful in mathematical projects.</li>\n<li>Lean 4 is maintained by the original developers currently, so there is more chance of bug reports receiving expert attention compared with the frozen lean 3.</li>\n</ul>",
        "id": 304933183,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666179469
    },
    {
        "content": "<p>Ah, thank you for explaining. I guess that also helps answer the question of why Lean 3 code won’t work in Lean 4. If it did, then you’d presumably have to give up that feature due to having to carry tactics over</p>",
        "id": 304933191,
        "sender_full_name": "Will Fourie",
        "timestamp": 1666179472
    },
    {
        "content": "<p>We (try to) address this question at the ICERM talk <a href=\"http://leanprover.github.io/talks/ICERM-2022.pdf\">http://leanprover.github.io/talks/ICERM-2022.pdf</a> (starting at slide 20).<br>\nThe recording is available online here <a href=\"https://icerm.brown.edu/video_archive/?play=2906\">https://icerm.brown.edu/video_archive/?play=2906</a></p>",
        "id": 304935534,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1666180355
    },
    {
        "content": "<p>A significant difference that hasn't really been mentioned here is that Lean 4 is a general purpose programming language (while Lean 3 wasn't quite). Having a functional programming language with an extremely expressive type system, that nevertheless compiles to efficient binaries is important for many potential use cases beyond just mathematics. (And the development of a \"programming language ecosystem\" around Lean 4 will be of immeasurable value even if you were only interested in the mathematics applications. This is part of the reason the library structure is developing differently already, with <code>Std</code> intermediate between the core language and <code>mathlib4</code>.)</p>",
        "id": 304950360,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666184475
    },
    {
        "content": "<p>Another point: accessible FFI with C</p>",
        "id": 304985125,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1666194565
    }
]