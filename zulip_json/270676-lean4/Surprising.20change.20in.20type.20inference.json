[
    {
        "content": "<p>I'm upgrading to the latest nightly of Lean 4 I'm seeing the following change to some of my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FoldImpl</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n  <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">FoldImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">FoldImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"n\">x₀</span> <span class=\"n\">y₀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">out</span> <span class=\"n\">out'</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"o\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">out</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">γ'</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">out'</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">R.intro</span>\n<span class=\"c1\">-- @R.intro : ∀ {x : {γ γ' : Type u_1} → {x₀ : γ} → {y₀ : γ'} → Type u_1}</span>\n<span class=\"c1\">--   {x_1 : {γ γ' : Type u_1} → {x₀ : γ} → {y₀ : γ'} → {f : γ → x → γ} → {g : γ' → x → γ'} → Type u_1} {γ γ' : Type u_1}</span>\n<span class=\"c1\">--   {x₀ : γ} {y₀ : γ'} {f : γ → x → γ} {g : γ' → x → γ'} {out : γ → x_1} {out' : γ' → x_1},</span>\n<span class=\"c1\">--   R { γ := γ, x₀ := x₀, f := f, out := out } { γ := γ', x₀ := y₀, f := g, out := out' }</span>\n</code></pre></div>\n<p>before the update, here is what that <code>#check</code> would print out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">R.intro</span>\n<span class=\"c1\">-- @R.intro : ∀ {α β γ γ' : Type u_1} {x₀ : γ} {y₀ : γ'} {f : γ → α → γ} {g : γ' → α → γ'} {out : γ → β} {out' : γ' → β},</span>\n<span class=\"c1\">--   R { γ := γ, x₀ := x₀, f := f, out := out } { γ := γ', x₀ := y₀, f := g, out := out' }</span>\n</code></pre></div>\n<p>In order to get the same result, I have to declare <code>R</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">FoldImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">FoldImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">γ'</span> <span class=\"n\">x₀</span> <span class=\"n\">y₀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">out</span> <span class=\"n\">out'</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">out</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">γ'</span><span class=\"o\">,</span> <span class=\"n\">y₀</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">out'</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Is this change expected? If so, why is it desirable?</p>",
        "id": 278376146,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649462760
    },
    {
        "content": "<p>No, the change is not expected. I will create an issue for it.</p>",
        "id": 278377777,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649464762
    },
    {
        "content": "<p>Pushed a fix for this bug <a href=\"https://github.com/leanprover/lean4/commit/87e6581e6bdb3c5db0588b721a1cb10731914358\">https://github.com/leanprover/lean4/commit/87e6581e6bdb3c5db0588b721a1cb10731914358</a></p>",
        "id": 278379682,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649467272
    },
    {
        "content": "<p>That was fast! Thanks a lot!</p>",
        "id": 278385955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1649476567
    }
]