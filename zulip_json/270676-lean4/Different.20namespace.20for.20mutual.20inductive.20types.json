[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Hidden.TreeList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">TreeList</span>        <span class=\"c1\">-- error; desirable</span>\n<span class=\"k\">#check</span> <span class=\"n\">Hidden.TreeList</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">Tree</span>            <span class=\"c1\">-- error; undesirable</span>\n<span class=\"k\">#check</span> <span class=\"n\">Hidden.Tree</span>     <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Is there a way to do this so <code>TreeList</code> is defined in the <code>Hidden</code> namespace, but <code>Tree</code> in the current namespace?</p>",
        "id": 283189208,
        "sender_full_name": "Raghuram",
        "timestamp": 1653161193
    },
    {
        "content": "<p>You can define the mutual in the <code>Hidden</code> namespace, and then re-export only <code>Tree</code> in the current namespace.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n  <span class=\"kd\">mutual</span>\n    <span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n    <span class=\"kd\">inductive</span> <span class=\"n\">TreeList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TreeList</span> <span class=\"n\">α</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Hidden</span> <span class=\"o\">(</span><span class=\"n\">Tree</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">TreeList</span>        <span class=\"c1\">-- error; desirable</span>\n<span class=\"k\">#check</span> <span class=\"n\">Hidden.TreeList</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">Tree</span>            <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">Hidden.Tree</span>     <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 283189385,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1653161520
    },
    {
        "content": "<p>I had tried that, but that exposes the fact that it's in the <code>Hidden</code> namespace for every definition one wants to make and use with dot notation afterwards (after <code>end Hidden</code>).  I guess that's not that much of a problem though.</p>",
        "id": 283211538,
        "sender_full_name": "Raghuram",
        "timestamp": 1653195445
    },
    {
        "content": "<p>Also this appears to be intended behaviour, because giving the inductive types two different namespaces produces an error message about conflicting namespaces.</p>",
        "id": 283211606,
        "sender_full_name": "Raghuram",
        "timestamp": 1653195489
    }
]