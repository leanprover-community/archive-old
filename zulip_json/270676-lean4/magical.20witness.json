[
    {
        "content": "<p>Good morning, if I'm not mistaken, Lean should not be able to compute this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">witness</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">witness</span> <span class=\"c1\">-- displays a mysterious 0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">witness</span> <span class=\"c1\">-- displays 1</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">witness</span> <span class=\"c1\">-- surprisingly doesn't require choice</span>\n</code></pre></div>\n<p>Even if you parameterize the existential statement with a predicate, it compiles by magic. I'm using nightly 2022-02-24</p>",
        "id": 273210855,
        "sender_full_name": "Michael Jam",
        "timestamp": 1645784264
    },
    {
        "content": "<p>For reference, this is what I need in recent Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">witness</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n<span class=\"k\">#eval</span> <span class=\"n\">witness</span> <span class=\"c1\">-- code generation failed, VM does not have code for 'witness'</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">witness</span> <span class=\"c1\">-- (classical.choice _).val</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">witness</span> <span class=\"c1\">-- classical.choice propext</span>\n</code></pre></div>",
        "id": 273211481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645784672
    },
    {
        "content": "<p>This reminds me of: <a href=\"#narrow/stream/113488-general/topic/Getting.20witnesses.20used.20in.20existential.20proofs.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Getting.20witnesses.20used.20in.20existential.20proofs.3F</a> (it's not the same thing though)</p>",
        "id": 273212545,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645785376
    },
    {
        "content": "<p>Oh, that's bad, I think this is unsound</p>",
        "id": 273212549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645785386
    },
    {
        "content": "<p><del>@<strong>Michael Jam</strong> What you're probably seeing here is that the compiler simplifies the code by reducing the terms.  And <code>Exists.rec .. Exists.intro</code> reduces to the witness.</del></p>",
        "id": 273212593,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645785426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure I would call it unsound (since it doesn't compromise consistency), but it is certainly unsafe since it most likely allows you to  break referential transparency.</p>",
        "id": 273212649,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645785466
    },
    {
        "content": "<p>No, it works in <code>rfl</code> proofs too. Proof of false coming up</p>",
        "id": 273212712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645785491
    },
    {
        "content": "<p>Wait what?!?</p>",
        "id": 273212860,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645785610
    },
    {
        "content": "<p>I didn't realize that this reduced in the kernel.  You can write <code>theorem foo : witness = 1 := rfl</code>. <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 273212931,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645785673
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">witness</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">witness2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">witness</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">witness2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">witness</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">witness2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t5</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">witness</span> <span class=\"bp\">=</span> <span class=\"n\">witness2</span> <span class=\"o\">:=</span> <span class=\"n\">t3.symm.trans</span> <span class=\"o\">((</span><span class=\"n\">t5</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">t4</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 273212932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645785673
    },
    {
        "content": "<p>You were faster, than me :) I couldn't figure out how to exploit it</p>",
        "id": 273213093,
        "sender_full_name": "Michael Jam",
        "timestamp": 1645785788
    },
    {
        "content": "<p>minimized</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273213204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645785848
    },
    {
        "content": "<p>The issue is the primitive projections. These should not exist for small eliminating types (i.e. <code>h.1</code> should not typecheck on a thing of type <code>Exists p</code>)</p>",
        "id": 273213395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645786000
    },
    {
        "content": "<p>This bug goes <em>way</em> back, at least until a year ago.</p>",
        "id": 273213421,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645786029
    },
    {
        "content": "<p>But it's not in Lean 3, right?</p>",
        "id": 273213446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645786046
    },
    {
        "content": "<p>(These did not exist in lean 3 BTW, this was one of the kernel changes)</p>",
        "id": 273213448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645786048
    },
    {
        "content": "<p>Is it clear what changed in the kernel and causes this?</p>",
        "id": 273213477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645786071
    },
    {
        "content": "<p>Lean 3 does have partial support for projections as kind-of-magic but they were at least nominally given a definition in terms of <code>rec</code></p>",
        "id": 273213540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645786093
    },
    {
        "content": "<p>Is it a change we needed for something else?</p>",
        "id": 273213543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645786095
    },
    {
        "content": "<p>We did have similar projection (macro)s in Lean 3, but a) I don't think they had that bug, and b) we're running an external type checker on mathlib which would have caught this bug.</p>",
        "id": 273213559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645786104
    },
    {
        "content": "<p>When I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">projection</span><span class=\"o\">,</span> <span class=\"kd\">structure</span> <span class=\"n\">expected</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>so there is some structure check going on, but <code>Exists</code> is being erroneously considered a structure for this purpose</p>",
        "id": 273213645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645786184
    },
    {
        "content": "<p>There needs to be an extra check around <a href=\"https://github.com/leanprover/lean4/blob/622995b2c74c90facaaa8ef178016abf27edbdf0/src/kernel/type_checker.cpp#L244-L245\">here</a> to assert that the inductive is large eliminating. There doesn't seem to be a convenient accessor for this in the <code>inductive_val</code> or <code>recursor_val</code> (there is <code>is_K</code> but this is a slightly different thing), but you can check if the recursor has the same number of universe levels as the inductive type. cc: <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 273216038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645787737
    },
    {
        "content": "<p>Being able to do .1 / .2 on an Exists is useful, but it should be nothing more than a shortcut for Classical.choose / Classical.choose_spec as I see it</p>",
        "id": 273226260,
        "sender_full_name": "Michael Jam",
        "timestamp": 1645794517
    },
    {
        "content": "<p>Thanks for reporting this serious issue. I just pushed a fix for it.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/db38bc404388b6b7ea2fe4589f417265a988eb95\">https://github.com/leanprover/lean4/commit/db38bc404388b6b7ea2fe4589f417265a988eb95</a></p>",
        "id": 273242927,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645802788
    }
]