[
    {
        "content": "<p>It seems that priority can be assigned to theorems marked with <code>simp</code>. Is this documented somewhere? I have an example of a theorems  can easily get into an infinite loop unless used carefully. Setting priority solves the problem and I would like to understand how priority for simp works.</p>\n<p>Consider this example which uses <code>simp</code> to invert a function. There is a general theorem <code>inverse_of_comp_parm</code> how to invert composition of function with an additional parameter and then there is a specific inverse of addition operation <code>inverse_of_add_1</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">inverse</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp 10000]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_of_comp_parm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_of_add_1</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>When the theorem <code>inverse_of_comp_parm</code> is just marked with <code>@[simp]</code> then <code>simp</code> in the example gets into an infinite loop.</p>",
        "id": 261554759,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637008176
    },
    {
        "content": "<p>In ideal world, I do not want to set the priority but I want <code>simp</code> to be smart enough to realize that constantly applying <code>inverse_of_comp_parm</code> is not getting anywhere and stop the infinite loop.</p>",
        "id": 261555304,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637008450
    },
    {
        "content": "<p>I find the behavior of <code>simp</code> bit odd. Consider this example, a slight modification of the above that gets into an infinite loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">inverse</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp 100000]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_of_comp_parm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_of_id</span>\n    <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- rw [inverse_of_comp_parm]</span>\n  <span class=\"c1\">-- rw [inverse_of_comp_parm]</span>\n  <span class=\"c1\">-- rw [inverse_of_id]</span>\n  <span class=\"c1\">-- rw [comp_id]</span>\n  <span class=\"c1\">-- rw [inverse_of_comp_parm]</span>\n  <span class=\"c1\">-- rw [inverse_of_id]</span>\n  <span class=\"c1\">-- rw [comp_id]</span>\n</code></pre></div>\n<p>Looking at the trace log it looks like that <code>simp</code> goes through these rewrites:</p>\n<p>1. inverse_of_comp_parm<br>\n  2. inverse_of_comp_parm<br>\n  3. inverse_of_id<br>\n  4. inverse_of_comp_parm<br>\n  5. inverse_of_comp_parm<br>\n  6. ....</p>\n<p>However I would expect these rewrites to be:</p>\n<p>1. inverse_of_comp_parm<br>\n  2. inverse_of_comp_parm<br>\n  3. inverse_of_id<br>\n  4. comp_id<br>\n  5. inverse_of_comp_parm<br>\n  6. inverse_of_id<br>\n  7. ...</p>\n<p>With the expected order or rewrites the goal after the step 1. and 4. are identical and a loop can be detected.</p>",
        "id": 261558364,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637010075
    },
    {
        "content": "<p>This comes up every once in a while: <a href=\"#narrow/search/simplifier.20priority\">https://leanprover.zulipchat.com/#narrow/search/simplifier.20priority</a></p>",
        "id": 261559386,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637010572
    },
    {
        "content": "<p>Priorities don't work the way you think they do.  The priority of a simp lemma only affects the choice of simp lemmas for the <em>same subterm</em>.  If you have a term <code>f (g a) d</code> and simp lemmas <code>g a = ...</code> and <code>g x = ...</code>, then you can use priorities to specify which one of them to use.</p>",
        "id": 261559670,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637010692
    },
    {
        "content": "<p>But if you have a lemma <code>f (g a) d = ...</code> then this will always be applied after the lemmas for <code>g a</code> because simp first processes the subterms, no matter the priorities.</p>",
        "id": 261559828,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637010755
    },
    {
        "content": "<p>Thanks! Now the behavior makes sense. It looks like that I have to ditch the <code>inverse_of_comp_parm</code> and rewrite <code>inverse_of_add_1</code> to the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inverse_of_add_1</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261560789,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637011204
    }
]