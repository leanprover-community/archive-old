[
    {
        "content": "<p>I have (in a termination clause) in Lean 3 :<code>Prod.lex_wf lt_wf lt_wf</code></p>\n<p>My first thought, since we are reasoning on the length of lists, and based on \"is something like well founded\", is to translate to:</p>\n<p><code>Prod.instWellFoundedRelationProd Nat.lt_wfRel Nat.lt_wfRel</code>, but it doesn't typecheck. I may also be confused about what Lean 4 <code>termination_by'</code> wants...</p>",
        "id": 313168906,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669847144
    },
    {
        "content": "<p><code>Prod.lex_wf</code> should be a previous definition, and you should be referring to it</p>",
        "id": 313212610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669876330
    },
    {
        "content": "<p>The lean 4 way of writing this is somewhat different, but if you are sticking to a straight port then those are just previous declarations that have hopefully been <code>#align</code>ed or ported</p>",
        "id": 313212663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669876388
    },
    {
        "content": "<p>source diving...</p>\n<p>Maybe this does the same work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lex</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 313323596,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669913379
    },
    {
        "content": "<p>I don't think so. I'm source diving through <code>Init.WF</code> and don't see a <code>theorem</code> tagged the same way as <code>prod.lex.wf</code></p>",
        "id": 313324147,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669913512
    },
    {
        "content": "<p>that <code>instWellFoundedRelationProd</code> is the the result of the above <code>instance</code>, right?</p>",
        "id": 313324394,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669913567
    },
    {
        "content": "<p>I'll go read up on Lean 4 termination proofs.</p>",
        "id": 313326437,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669914096
    }
]