[
    {
        "content": "<p>Any tips on profiling lean4 code? I remember reading some work was being done here to make the compiler faster, and I was hoping some of that might be applicable to what I'm doing.</p>",
        "id": 224001314,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611641948
    },
    {
        "content": "<p>In lean 3 it was <code>set_option profiler true</code></p>",
        "id": 224003482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611644864
    },
    {
        "content": "<p>This appears to work for profiling the compilation<br>\nbut I want to profile the runtime performance of my program. Is there any way to do that?</p>",
        "id": 224074323,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611682554
    },
    {
        "content": "<p>It's a regular executable, use your favorite profiling tool. I usually use <code>perf</code> on Linux.</p>",
        "id": 224075764,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611683112
    },
    {
        "content": "<p>I did a bit of poking around in a lean program using perf and the flamegraph tool: <a href=\"http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\">www.brendangregg.com/FlameGraphs/cpuflamegraphs.html</a></p>",
        "id": 224078073,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1611683995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374083\">Scott Kovach</span> <a href=\"#narrow/stream/270676-lean4/topic/Profiling/near/224078073\">said</a>:</p>\n<blockquote>\n<p>I did a bit of poking around in a lean program using perf and the flamegraph tool: <a href=\"http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\">www.brendangregg.com/FlameGraphs/cpuflamegraphs.html</a></p>\n</blockquote>\n<p>Flamegraphs work well!<br>\nHowever for me a majority of my time is spent in a function called <code>[Unknown]</code>... any ideas?</p>",
        "id": 224087493,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611688085
    },
    {
        "content": "<p>I got better stacktraces by passing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cflags</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"s2\">\"-I$bindir/../include\"</span> <span class=\"s2\">\"-fno-omit-frame-pointer\"</span> <span class=\"s2\">\"-g\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I did this by modifying leanc (<code>elan which leanc</code>), which is probably not the right way to do it<br>\nI still had an <code>[unknown]</code> stack, but it's not much of the total time so I ignored it. it's possible we're missing debug symbols for the lean standard library code (is it possible to regenerate those without going through the entire lean bootstrap process? I haven't tried compiling from source yet)</p>",
        "id": 224092362,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1611690417
    },
    {
        "content": "<p>talking about <code>.../.elan/toolchains/leanprover-lean4-nightly/bin/../lib/lean</code> there</p>",
        "id": 224092776,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1611690600
    },
    {
        "content": "<p>You can use <code>leanmake LEANC_OPTS=\"-fno-omit-frame-pointer -g\"</code> or, starting with the next nightly, <code>leanpkg build LEANC_OPTS=\"-fno-omit-frame-pointer -g\"</code> instead</p>",
        "id": 224108055,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611697359
    },
    {
        "content": "<p>I also noticed how leanc is always called with <code>-DNDEBUG</code> when running <code>leanmake bin</code>.  If <code>NDEBUG</code> is not defined, do lean programs have additional debugging symbols/assertions/etc or does this only affect the runtime?</p>",
        "id": 224108073,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611697368
    },
    {
        "content": "<p>NDEBUG could affect the runtime headers, not sure</p>",
        "id": 224108195,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611697432
    },
    {
        "content": "<p>I think setting <code>LEANC_OPTS</code> affects this anyway. Thank you!</p>",
        "id": 224108278,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611697455
    },
    {
        "content": "<p>Good question about debug symbols for the stdlib. Note though that compiling Lean from source is no harder than for any other cmake project. You don't have to worry about bootstrapping unless you want to extend Lean.</p>",
        "id": 224108372,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1611697515
    },
    {
        "content": "<p>How do people recommend one benchmark a Lean script?<br>\nThe following file <code>Foo.lean</code> only prints <code>Hello World!</code> - does this command trigger a recompilation every time or does it run the object file?</p>\n<p><code>time lean --run Foo.lean</code></p>",
        "id": 224676200,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612141761
    },
    {
        "content": "<p>That (<code>lean --run</code>) will indeed recompile the module and execute it in the interpreter. If you want to run your program as native code, probably the easiest way is to set up a package by running <code>leanpkg init Foo</code> in the directory you want your package to reside in, and then running <code>leanpkg build bin</code> there. This will produce a binary in <code>&lt;packagedir&gt;/build/bin</code>.</p>",
        "id": 224677854,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612143976
    },
    {
        "content": "<p>Note that this requires <code>main</code> to be defined. If you wish to benchmark within an <code>#eval</code>, you can also use <code>timeit</code> (needs <code>import Init.System.IO</code>) but that goes through the interpreter, which is slower.</p>",
        "id": 224678105,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612144394
    },
    {
        "content": "<p>Oh wow, thanks a million <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> , that helped a lot!</p>",
        "id": 224678265,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612144657
    }
]