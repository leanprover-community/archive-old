[
    {
        "content": "<p>There is a thread in #maths <a href=\"#narrow/stream/116395-maths/topic/Dimensional.20Analysis.20Community.20Input\">Dimensional Analysis Community Input</a>. It prompted me to give a try at dimensional analysis in Lean 4.</p>\n<p>I have this working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">motion</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻²</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>but I have trouble with addition, this does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">motion'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻²</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>I'm getting an error that instance of <code>HAdd</code> can not be found:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tomass</span><span class=\"bp\">/</span><span class=\"n\">doodle</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">units.lean</span><span class=\"o\">:</span><span class=\"mi\">94</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span>\n    <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">ℝ</span>\n      <span class=\"o\">({</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">*</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">*</span>\n        <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">({</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">*</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}))</span> <span class=\"bp\">?</span><span class=\"n\">m.10569</span>\n</code></pre></div>\n<p>You can clearly see that the arithmetic stayed in the type and it is tripping typeclass synthesis. </p>\n<p>How can I deal with this problem?</p>",
        "id": 297939365,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662717712
    },
    {
        "content": "<p>The code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SIUnit</span> <span class=\"n\">where</span>\n  <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">meter</span> <span class=\"o\">:</span> <span class=\"n\">SIUnit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"n\">SIUnit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">kilogram</span> <span class=\"o\">:</span> <span class=\"n\">SIUnit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">SIUnit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">x.s</span> <span class=\"bp\">+</span> <span class=\"n\">y.s</span><span class=\"o\">,</span>\n              <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">x.m</span> <span class=\"bp\">+</span> <span class=\"n\">y.m</span><span class=\"o\">,</span>\n              <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"n\">x.kg</span> <span class=\"bp\">+</span> <span class=\"n\">y.kg</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">SIUnit</span> <span class=\"n\">Int</span> <span class=\"n\">SIUnit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">x.s</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n              <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">x.m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n              <span class=\"n\">kg</span> <span class=\"o\">:=</span> <span class=\"n\">x.kg</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">SIUnit</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨{}⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Dimensional</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">:</span> <span class=\"n\">SIUnit</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span> <span class=\"bp\">+</span> <span class=\"n\">y.val</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">units</span> <span class=\"n\">units'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">β</span> <span class=\"n\">units'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">units</span><span class=\"bp\">*</span><span class=\"n\">units'</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span> <span class=\"bp\">*</span> <span class=\"n\">y.val</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">units</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">units</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">units'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">β</span> <span class=\"n\">units'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">units'</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y.val</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Dimensional.cast</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">units</span> <span class=\"n\">units'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">=</span> <span class=\"n\">units'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Float</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">siunit</span> <span class=\"o\">(</span><span class=\"n\">behavior</span> <span class=\"o\">:=</span> <span class=\"n\">both</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"m\"</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"s\"</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"kg\"</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">siunit</span> <span class=\"s2\">\"*\"</span> <span class=\"n\">siunit</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">siunit</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"²\"</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">siunit</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">siunit</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"⁻²\"</span> <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span>  <span class=\"o\">:</span> <span class=\"n\">siunit</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"ℝ[\"</span> <span class=\"n\">siunit</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"n\">kg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">unit</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">unit'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">unit'</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg'</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">kg'</span><span class=\"o\">})</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">unit</span><span class=\"bp\">²</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"bp\">*$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*$</span><span class=\"n\">kg</span><span class=\"o\">})</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">unit</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">-$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">-$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">-$</span><span class=\"n\">kg</span><span class=\"o\">})</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">unit</span><span class=\"bp\">⁻²</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">*$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">*$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">*$</span><span class=\"n\">kg</span><span class=\"o\">})</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">units</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">units</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">siunit</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">kg</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">motion</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻²</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">motion'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻²</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n\n<span class=\"c1\">-- this works but is ugly</span>\n<span class=\"kd\">def</span> <span class=\"n\">motion''</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻²</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 297939453,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662717732
    },
    {
        "content": "<p>One thing you can to to ease the pain a bit is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Dimensional.cast</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">units</span> <span class=\"n\">units'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"bp\">=</span> <span class=\"n\">units'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">decide</span> <span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">Dimensional</span> <span class=\"n\">α</span> <span class=\"n\">units'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>since then you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">motion''</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻²</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cast</span>\n</code></pre></div>",
        "id": 297996290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662736624
    },
    {
        "content": "<p>I threw in <code>simp</code> just to try to make it more likely to succeed.</p>",
        "id": 297996446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662736670
    },
    {
        "content": "<p>A solution is to write a custom elaborator.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">ty.isAppOf</span> <span class=\"bp\">``</span><span class=\"n\">Dimensional</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">])</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">instHAdd</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">ty</span>\n    <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 298214046,
        "sender_full_name": "pcpthm",
        "timestamp": 1662880432
    },
    {
        "content": "<p>This is great! </p>\n<p>This can probably be extended to solve:</p>\n<ol>\n<li>for <code>v : ℝ[m*s⁻¹]</code> and <code>t : ℝ[s]</code> have  <code>v*t : ℝ[m]</code> instead of <code>Dimensional ℝ ({ s := 0 + -1, m := 1 + -0, kg := 0 + -0 } * { s := 1, m := 0, kg := 0 })</code></li>\n<li>for <code>t : ℝ[s]</code> and  <code>f : ℝ[s⁻¹]</code> have <code>t*f : ℝ</code> instead of <code>Dimensional ℝ { s := 0, m := 0, kg := 0 }</code></li>\n</ol>",
        "id": 298230855,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662891023
    },
    {
        "content": "<p>Half way there, I have 1. but the resulting type is <code>Dimensional ℝ { s := Int.ofNat 0, m := Int.ofNat 1, kg := Int.ofNat 0 }</code>. How can I get <code>0</code> instead of <code>Int.ofNat 0</code>?</p>",
        "id": 298234386,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662893299
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">t</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">SIUnit.mul_simp</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">kg</span> <span class=\"n\">kg'</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">SIUnit.mk</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">kg</span> <span class=\"bp\">*</span> <span class=\"n\">SIUnit.mk</span> <span class=\"n\">m'</span> <span class=\"n\">s'</span> <span class=\"n\">kg'</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">+</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">kg</span><span class=\"bp\">+</span><span class=\"n\">kg'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HMul.hMul</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">tx</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- type of x</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- type of y</span>\n  <span class=\"k\">if</span> <span class=\"n\">tx.isAppOf</span> <span class=\"bp\">``</span><span class=\"n\">Dimensional</span> <span class=\"bp\">∧</span> <span class=\"n\">ty.isAppOf</span> <span class=\"bp\">``</span><span class=\"n\">Dimensional</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">tz</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">uz</span> <span class=\"o\">:=</span> <span class=\"n\">tz.getArg</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"c1\">-- units of z</span>\n    <span class=\"k\">let</span> <span class=\"n\">uz</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simp</span> <span class=\"n\">uz</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Simp.Context.mkDefault</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">expr</span> <span class=\"c1\">-- simplify units</span>\n    <span class=\"k\">let</span> <span class=\"n\">tz</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">Dimensional</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">tz.getArg</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">uz</span><span class=\"o\">]</span>\n    <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">tx</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">tz</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">t</span>\n</code></pre></div>",
        "id": 298234442,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662893350
    },
    {
        "content": "<p>Another useful elaborator for <code>ℝ[m*s⁻¹]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">]</span> <span class=\"c1\">-- Dimensional ℝ { s := 0 + -1, m := 1 + -0, kg := 0 + -0 }</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"bp\">⁻¹*</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"c1\">-- Dimensional ℝ { s := -1 + 0, m := -0 + 1, kg := -0 + 0 }</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dimensional</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">kg</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">({</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">kg</span><span class=\"o\">:=</span><span class=\"bp\">$</span><span class=\"n\">kg</span><span class=\"o\">}))</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">SIUnit</span><span class=\"o\">))</span>\n  <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Dimensional</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">⁻¹</span><span class=\"o\">]</span> <span class=\"c1\">-- Dimensional ℝ { s := Int.negSucc 0, m := Int.ofNat 1, kg := Int.ofNat 0 }</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"bp\">⁻¹*</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"c1\">-- Dimensional ℝ { s := Int.negSucc 0, m := Int.ofNat 1, kg := Int.ofNat 0 }</span>\n</code></pre></div>",
        "id": 298238301,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662895596
    },
    {
        "content": "<p>These kinds of answers make me realise that I really still don't have a good understanding at all of the new possibilities which Lean 4 will give us.</p>",
        "id": 298240428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662896884
    },
    {
        "content": "<p>And I'm constantly amazed how can I solve problems that I deemed unsolvable in other languages <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 298241271,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662897363
    }
]