[
    {
        "content": "<p>After the discussion <a href=\"https://github.com/leanprover/lean4/issues/705#issuecomment-931568926\">on this LEAN4 issue about mutual constants</a>, I modified the program discussed in the issue, and I now have another crash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">terminal</span><span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n     <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"o\">()</span> <span class=\"o\">)</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"o\">())</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasLayer</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n <span class=\"bp\">|</span> <span class=\"n\">Foo.terminal</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">hasLayer</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"o\">())</span> <span class=\"k\">then</span> <span class=\"s2\">\"LAYER\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"TERMINAL\"</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I expect the program to print \"LAYER\" on being run. The program crashes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">make</span> <span class=\"n\">crash</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">./</span><span class=\"n\">crash</span>\n<span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">contrib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">db5df69db460</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">contrib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">crash.lean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"n\">crash.c</span>\n<span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">contrib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">leanc</span> <span class=\"n\">crash.c</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">crash</span>\n<span class=\"n\">zsh</span><span class=\"o\">:</span> <span class=\"n\">segmentation</span> <span class=\"n\">fault</span> <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"n\">dumped</span><span class=\"o\">)</span>  <span class=\"bp\">./</span><span class=\"n\">crash</span>\n</code></pre></div>\n<p>GDB claims the crash is at <code>lean_mark_persistent</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Reading</span> <span class=\"n\">symbols</span> <span class=\"k\">from</span> <span class=\"bp\">./</span><span class=\"n\">crash...</span>\n<span class=\"o\">(</span><span class=\"n\">No</span> <span class=\"n\">debugging</span> <span class=\"n\">symbols</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"bp\">./</span><span class=\"n\">crash</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">run</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">Program</span> <span class=\"n\">received</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSEGV</span><span class=\"o\">,</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault.</span>\n<span class=\"mi\">0x000055555572b1a2</span> <span class=\"k\">in</span> <span class=\"n\">lean_mark_persistent</span> <span class=\"o\">()</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x000055555572b1a2</span> <span class=\"k\">in</span> <span class=\"n\">lean_mark_persistent</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x000055555555c5f6</span> <span class=\"k\">in</span> <span class=\"n\">initialize_crash</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x000055555555c72f</span> <span class=\"k\">in</span> <span class=\"n\">main</span> <span class=\"o\">()</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>Is this expected behaviour, or a bug?</li>\n<li>Also, is it easier if I ask these types of questions on the issue tracker, or here on zulip?</li>\n</ul>",
        "id": 255627440,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633027731
    },
    {
        "content": "<blockquote>\n<p>Is this expected behaviour, or a bug?</p>\n</blockquote>\n<p>Sorry, the compiler is eliminating the unused argument, and is reducing your code to the mutually recursive constants issue you hit before.<br>\nYou should write.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n     <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Foo.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255630212,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633028818
    }
]