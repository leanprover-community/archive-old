[
    {
        "content": "<p>So I stumbled upon my first stack overflow in a year.  Is there an obvious best practice workaround?  Should we be using arrays instead of lists everywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">8738</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- stack overflow</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">8737</span><span class=\"o\">)</span> <span class=\"c1\">-- stack overflow</span>\n</code></pre></div>\n<p>Related question: are PRs welcome to make library functions O(1) stack size (such as the toString above), or should this be reported as issues?</p>",
        "id": 240336359,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622040560
    },
    {
        "content": "<p>(<code>List.map</code> <em>could</em> be O(1) stack as well, but I fear this would require a lot of work in the compiler.)</p>",
        "id": 240336617,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622040644
    },
    {
        "content": "<p>All I can tell you is that Lean itself does not seem to be mapping lists of that length anywhere :) . We usually default to <code>Array</code> for anything of nontrivial length and when persistency/sharing is not required, yes.</p>",
        "id": 240338024,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622041150
    }
]