[
    {
        "content": "<p>Why can names have numbers? What's the use case for <code>Foo.3.Bar</code>?</p>",
        "id": 281951056,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652268974
    },
    {
        "content": "<p>I don't think they can, I'm not able to create a declaration with that name.</p>",
        "id": 281952166,
        "sender_full_name": "Chris B",
        "timestamp": 1652269613
    },
    {
        "content": "<p>Aren't these structure projections?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">Foo.3.Bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">---  error: expected ':', ':=', 'where' or '|'</span>\n</code></pre></div>",
        "id": 281952218,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1652269648
    },
    {
        "content": "<p><code>Name.num</code> cannot be generated by surface syntax, it is for internal use only</p>",
        "id": 281952928,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652270086
    },
    {
        "content": "<p>Is such internal use too complicated to understand? Where can I find it?</p>",
        "id": 281953163,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652270249
    },
    {
        "content": "<p>Well, using Tomas' idea I was able make this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">QQ</span> <span class=\"n\">where</span>\n  <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Gah</span> <span class=\"n\">where</span>\n  <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">flt</span> <span class=\"o\">:</span> <span class=\"n\">QQ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Gah</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Foo.3.Bar</span> <span class=\"c1\">-- 1.200000</span>\n</code></pre></div>\n<p>Does that count?</p>",
        "id": 281953415,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652270394
    },
    {
        "content": "<p>Probably the simplest use is <a href=\"https://github.com/leanprover/lean4/blob/23fac14b33d1e452020ae5adea85d9ba48a144c8/src/Init/Meta.lean#L201-L212\">https://github.com/leanprover/lean4/blob/23fac14b33d1e452020ae5adea85d9ba48a144c8/src/Init/Meta.lean#L201-L212</a>. It's a generator of fresh names. The numeric part guarantees that the name cannot possibly collide with user names.</p>",
        "id": 281953428,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652270400
    }
]