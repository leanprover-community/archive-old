[
    {
        "content": "<p>In mathlib3 we have <code>notation `|`a`|` := abs a</code> which is absolutely needed, but the naive Lean4 version confuses the parser when defining inductive types <a href=\"https://github.com/leanprover-community/mathlib4/pull/477\">mathlib4#477</a>. What is the correct notation incantation here?</p>",
        "id": 304755969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666106712
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/issues/307\">https://github.com/leanprover-community/mathlib4/issues/307</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/Mathport.20abs.20syntax.20clash\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Mathport.20abs.20syntax.20clash</a></p>",
        "id": 304803514,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666114643
    },
    {
        "content": "<p>Sorry, I forgot we already had that conversation. The answer is still the same: this is a really serious issue if we can't get that notation to work. In particular for me it makes Lean 4 a lot less suitable for teaching . <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 304829971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666122923
    },
    {
        "content": "<p>What about introducing whitespace sensitivity?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"s2\">\"|\"</span> <span class=\"n\">noWs</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"|\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 304831241,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666123402
    },
    {
        "content": "<p>That's certainly better than nothing or a weird notation, at least if the error message when there is an extra whitespace is somewhat understandable (or at least constant).</p>",
        "id": 304831845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666123632
    },
    {
        "content": "<p>\"Not great, not terrible\" I'd say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">|</span>\n     <span class=\"c1\">--^ \"expected no space before\"</span>\n<span class=\"k\">#check</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span>\n            <span class=\"c1\">--^ \"expected no space before\"</span>\n</code></pre></div>",
        "id": 304832202,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666123800
    },
    {
        "content": "<p>The error position in the first case is an unfortunate consequence of the necessary <code>atomic</code></p>",
        "id": 304832308,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666123829
    },
    {
        "content": "<p>It's totally fine!</p>",
        "id": 304832392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666123864
    },
    {
        "content": "<p>I just tested it and was very pleased</p>",
        "id": 304832417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666123877
    },
    {
        "content": "<p>In Lean 3 we use <code>\\|</code> for division; could we not move to this for <code>abs</code>? </p>\n<p>I will remind you Patrick that Mario has always said that bracket-like notation which doesn't have distinct symbols for the left and right side are a parsing disaster. However I'm well aware that this notation is standard and non-negotiable in mathematics :-/</p>",
        "id": 304832486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666123903
    }
]