[
    {
        "content": "<p>I have been working my way through (some of) Theorem Proving in Lean 4 and have noted some things. They are all minor: typos, corrections, small stylistic suggestions. Is there value in passing these comments on?</p>",
        "id": 252973570,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631439312
    },
    {
        "content": "<p>sure. You can make bugs / PRs here: <a href=\"https://github.com/leanprover/theorem_proving_in_lean4\">https://github.com/leanprover/theorem_proving_in_lean4</a></p>",
        "id": 252974609,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1631440541
    },
    {
        "content": "<p>I have only used GitHub in the past to version control my own files. To check I understand I should:</p>\n<ul>\n<li>fork the TPL4 repository</li>\n<li>make and commit the changes in my fork</li>\n<li>submit the PR</li>\n</ul>\n<p>In the case of the PR, is it correct to say I submit the PR from the TPL4 repository, not my own fork?</p>",
        "id": 252974949,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631440872
    },
    {
        "content": "<p>that sounds about right. When you push a branch to your own repository, there appears a button to make a PR for it. But you can make a PR also on the TPL4 repo, IIRC. </p>\n<p>Also for trivial one-character typos you can in fact do it directly in the web browser. It will fork the repo for you, commit a change and make a PR in one go.</p>",
        "id": 252975221,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1631441166
    },
    {
        "content": "<p>Great, thanks.</p>",
        "id": 252975267,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1631441238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"383769\">Paul  Chisholm</span> has marked this topic as resolved.</p>",
        "id": 252975271,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631441242
    },
    {
        "content": "<p>I have been going through the Theorem Proving in Lean 4 document and cannot figure out how we got h3 as the proof in the following code:-</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">byContradiction</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">fun</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>  <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">⟩</span>\n        <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h4</span>\n      <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">h2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 283172179,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1653137450
    },
    {
        "content": "<p><code>¬ p x</code> is defined as <code>p x → false</code></p>",
        "id": 283172756,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1653138253
    }
]