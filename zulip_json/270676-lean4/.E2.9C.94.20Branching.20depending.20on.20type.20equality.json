[
    {
        "content": "<p>Dear all, I have the following model code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">poly</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"n\">xs</span>\n  <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>The error I get is:</p>\n<blockquote>\n<p>failed to synthesize instance<br>\n Decidable (α = List β)</p>\n</blockquote>\n<p>I would like for it to work because it would save a lot of list folding in my actual code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromList</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Iterable</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Bit</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">Bit</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"n\">xs</span>\n  <span class=\"k\">else</span> <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iterable.push</span> <span class=\"n\">acc</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">default</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>I don't know, however, even where to begin to make it work... I feel like it should be possible, but how?..</p>",
        "id": 291578233,
        "sender_full_name": "cognivore",
        "timestamp": 1659361947
    },
    {
        "content": "<p>The problem is that the question wether a type is equal to another is undecidable in general (in dependent types like Lean's).</p>",
        "id": 291578841,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659362236
    },
    {
        "content": "<p>Is there a way to help Lean decide on type equality?</p>",
        "id": 291578961,
        "sender_full_name": "cognivore",
        "timestamp": 1659362284
    },
    {
        "content": "<p>what are you trying to model with that <code>poly</code>? would something like a <code>Sum</code> type work instead? That way you could do pattern matching for the cases</p>",
        "id": 291578962,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659362284
    },
    {
        "content": "<p>I'm modeling <code>fromList</code> function</p>",
        "id": 291579002,
        "sender_full_name": "cognivore",
        "timestamp": 1659362306
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasPoly</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">open</span> <span class=\"n\">HasPoly</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasPoly</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">poly</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasPoly</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">poly</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"c1\">-- 1: using the first instance</span>\n<span class=\"k\">#eval</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- [1, 2, 3]: using the second instance</span>\n</code></pre></div>",
        "id": 291579076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659362343
    },
    {
        "content": "<p>Iterable is a class that has functional dependency of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\"> \\beta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> on type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>. In other words, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\"> \\beta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> is an outParam.</p>",
        "id": 291579090,
        "sender_full_name": "cognivore",
        "timestamp": 1659362349
    },
    {
        "content": "<p>you should use typeclasses for this</p>",
        "id": 291579095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659362352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> <a href=\"#narrow/stream/270676-lean4/topic/Branching.20depending.20on.20type.20equality/near/291579002\">said</a>:</p>\n<blockquote>\n<p>I'm modeling <code>fromList</code> function</p>\n</blockquote>\n<p>ahh, that sounds like a case for typeclasses</p>",
        "id": 291579117,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659362361
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 291579177,
        "sender_full_name": "cognivore",
        "timestamp": 1659362395
    },
    {
        "content": "<p>It's logical to insert this method into <code>Iterable</code> typeclass then.</p>",
        "id": 291579298,
        "sender_full_name": "cognivore",
        "timestamp": 1659362427
    },
    {
        "content": "<p>We just wanted to avoid bloating up the class methods.</p>",
        "id": 291579636,
        "sender_full_name": "cognivore",
        "timestamp": 1659362562
    },
    {
        "content": "<p>if you want different types to have custom implementations then it needs to be a typeclass method</p>",
        "id": 291579721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659362610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> has marked this topic as resolved.</p>",
        "id": 291579753,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659362627
    }
]