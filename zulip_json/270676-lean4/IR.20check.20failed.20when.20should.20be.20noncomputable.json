[
    {
        "content": "<p>I'm hitting the following <code>IR check failed, unknown declaration</code> on a mathematical project.<br>\nHere is a mathlib independent repro:<br>\nIn the example I believe <code>def bug</code> should be marked noncomputable, but the <code>IR</code> generator doesn't pick up on this for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">WellFounded</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">fix'.impl</span> <span class=\"o\">(</span><span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">impl</span> <span class=\"n\">hwf</span> <span class=\"n\">F</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">@[implemented_by fix'.impl]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fix'</span> <span class=\"o\">(</span><span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hwf.fix</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">WellFounded</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">section</span> <span class=\"n\">find</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">lbp</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">wf_lbp</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"o\">(</span><span class=\"n\">lbp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"n\">lbp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"k\">from</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">kn</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">pn</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">kn</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">kn</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">find_x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">wf_lbp</span> <span class=\"n\">p</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fix'</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">IH</span> <span class=\"n\">al</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">pm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">pm</span><span class=\"o\">,</span> <span class=\"n\">al</span><span class=\"o\">⟩</span> <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">al</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">pm</span>\n      <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">this</span> <span class=\"n\">n</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.le_of_succ_le_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"mi\">0</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.find_x</span> <span class=\"n\">p</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">end</span> <span class=\"n\">find</span>\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">char</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bug</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"c1\">-- IR check failed at 'bug._rarg', error: unknown declaration 'char'</span>\n  <span class=\"k\">match</span> <span class=\"n\">char</span> <span class=\"n\">R</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 306025133,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666703512
    },
    {
        "content": "<p>We are currently working on a new code generator for Lean 4.  We will address this issue there.<br>\nCould you please create a GitHub issue?</p>",
        "id": 306357883,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1666832584
    },
    {
        "content": "<p>For what it's worth: in lean 3 it was also possible to confuse lean about whether something was computable or not. You could write inductive types where lean would complain however you tagged them. Gabriel fixed this with <code>noncomputable!</code> (which was very helpful in mathlib because beyond some point in algebra pretty much everything is noncomputable)</p>",
        "id": 306379773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666850503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> My understanding is that the Lean 4 system for noncomputability checking is completely different, where the code generator tries to compile a definition and if it fails the definition is marked noncomputable. In Lean 3, there's a separate system (the \"noncomputability checker\") that tries to predict exactly whether or not the VM compiler will succeed, and our addition of <code>noncomputable!</code> to Lean 3 is to override this check when this system is inaccurate (or when the it's a theoretical definition that we do not care to compile and the VM compiler will happily spend an hour compiling it). While the \"right\" solution is to fix this system in Lean 3, this isn't time well spent at the moment.</p>",
        "id": 306400554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1666859902
    },
    {
        "content": "<p>This is now <a href=\"https://github.com/leanprover-community/mathlib/pull/1785\">#1785</a></p>",
        "id": 306437169,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666873737
    },
    {
        "content": "<p>Is that <a href=\"https://github.com/leanprover/lean4/pull/1785\">lean4#1785</a> ?</p>",
        "id": 306441644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666875069
    }
]