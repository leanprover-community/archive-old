[
    {
        "content": "<p>Is it possible to run the vscode-lean4 extension on the lean 4 repo? This was also somewhat subtle in lean 3 because there is no leanpkg.toml file, but it's really useful to explore the code (I imagine Leo &amp; Sebastian use the emacs mode in this repo all the time).</p>",
        "id": 224894131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612282629
    },
    {
        "content": "<p>\"Works just fine for me?\"</p>",
        "id": 224894831,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612282922
    },
    {
        "content": "<p>Yes, it should just work if you have <code>elan</code> pointed at a recent <code>lean4</code>. The only difference is for go-to-def, you need to set the <code>LEAN_SRC_PATH</code> environment variable to <code>/path/to/lean4/src</code>.</p>",
        "id": 224894872,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612282926
    },
    {
        "content": "<p>Did you run into any issues?</p>",
        "id": 224894874,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612282927
    },
    {
        "content": "<p>on review it looks like it was the lean 3 extension running instead of lean 4. But after enabling vscode-lean4 in the project, now I'm getting no highlighting or anything, although the file extension is recognized</p>",
        "id": 224895029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283004
    },
    {
        "content": "<p>I observed this too, a workaround is to change language mode to <code>lean4</code> instead of <code>lean</code>.</p>",
        "id": 224895195,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612283057
    },
    {
        "content": "<p>You may need to re-open the folder after you set it up so that the extension can launch again</p>",
        "id": 224895356,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612283122
    },
    {
        "content": "<p>aha, now I have colors but still no errors</p>",
        "id": 224895412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283149
    },
    {
        "content": "<p>vscode-lean4 will yield when the major version of <code>lean</code> is not <code>4</code>. Does re-opening the folder not work?</p>",
        "id": 224895663,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612283229
    },
    {
        "content": "<p>how do I control the resolved version of lean without a leanpkg?</p>",
        "id": 224895798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283276
    },
    {
        "content": "<p><code>lean --version</code> from the root gives <code>Lean (version 3.26.0, commit 5a5c139af3e9, Release)</code></p>",
        "id": 224895913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283299
    },
    {
        "content": "<p>E.g. by setting lean 4 as your default in elan</p>",
        "id": 224895951,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612283311
    },
    {
        "content": "<p>...?</p>",
        "id": 224896002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283328
    },
    {
        "content": "<p>You can also run <code>elan override set lean4-toolchain-name</code> in the <code>lean4/</code> root, but I think that may require you to launch <code>code</code> from that root as well</p>",
        "id": 224896127,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612283379
    },
    {
        "content": "<p>the only version that shows up in <code>elan toolchain list</code> is <code>leanprover-lean4-4.0.0-m1</code></p>",
        "id": 224896298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283426
    },
    {
        "content": "<p>That's the initial release? It's quite old, you may want <code>leanprover/lean4:nightly</code></p>",
        "id": 224896412,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612283462
    },
    {
        "content": "<p>yeah I know, but I'm not sure where the magic names like <code>leanprover/lean4:nightly</code> are coming from</p>",
        "id": 224896495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283496
    },
    {
        "content": "<p>okay this is working now, thanks folks</p>",
        "id": 224896641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283550
    },
    {
        "content": "<p>although code like this is not getting highlighted right, the comment doesn't end</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c\">/-</span><span class=\"cm\"> Generate `CodeBlock` for `doIf; doElems`</span>\n<span class=\"cm\">     `doIf` is of the form</span>\n<span class=\"cm\">     ```</span>\n<span class=\"cm\">     \"if \" &gt;&gt; optIdent &gt;&gt; termParser &gt;&gt; \" then \" &gt;&gt; doSeq</span>\n<span class=\"cm\">      &gt;&gt; many (group (try (group (\" else \" &gt;&gt; \" if \")) &gt;&gt; optIdent &gt;&gt; termParser &gt;&gt; \" then \" &gt;&gt; doSeq))</span>\n<span class=\"cm\">      &gt;&gt; optional (\" else \" &gt;&gt; doSeq)</span>\n<span class=\"cm\">     ```  -/</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">doIfToCode</span> <span class=\"o\">(</span><span class=\"n\">doIf</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">doElems</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">CodeBlock</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">view</span> <span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">$</span> <span class=\"n\">mkDoIfView</span> <span class=\"n\">doIf</span>\n    <span class=\"k\">let</span> <span class=\"n\">thenBranch</span> <span class=\"bp\">←</span> <span class=\"n\">doSeqToCode</span> <span class=\"o\">(</span><span class=\"n\">getDoSeqElems</span> <span class=\"n\">view.thenBranch</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">elseBranch</span> <span class=\"bp\">←</span> <span class=\"n\">doSeqToCode</span> <span class=\"o\">(</span><span class=\"n\">getDoSeqElems</span> <span class=\"n\">view.elseBranch</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">ite</span> <span class=\"bp\">←</span> <span class=\"n\">mkIte</span> <span class=\"n\">view.ref</span> <span class=\"n\">view.optIdent</span> <span class=\"n\">view.cond</span> <span class=\"n\">thenBranch</span> <span class=\"n\">elseBranch</span>\n    <span class=\"n\">concatWith</span> <span class=\"n\">ite</span> <span class=\"n\">doElems</span>\n</code></pre></div>",
        "id": 224896730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283590
    },
    {
        "content": "<p>I guess that's an issue with the vscode syntax highlighter in both lean 3 and lean 4</p>",
        "id": 224896964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283666
    },
    {
        "content": "<p>Updated instructions: <a href=\"https://github.com/leanprover/lean4/commit/f80147e264c30f6409be5eb2f3f74f0912917ebc\">https://github.com/leanprover/lean4/commit/f80147e264c30f6409be5eb2f3f74f0912917ebc</a> (though this still assumes local development, not just browsing)</p>",
        "id": 224896986,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612283673
    },
    {
        "content": "<p>oh yeah, that's broken</p>",
        "id": 224896994,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1612283678
    },
    {
        "content": "<p>When you say to open <code>src/</code> as workspace folder, do you mean that the project root should be <code>src</code> or that it should be a two-folder workspace with both <code>lean4/</code> and <code>lean4/src</code> open?</p>",
        "id": 224897324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283814
    },
    {
        "content": "<p>Ooh, go to definition + hovers = <span aria-label=\"rainbow\" class=\"emoji emoji-1f308\" role=\"img\" title=\"rainbow\">:rainbow:</span></p>",
        "id": 224897622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612283954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lean4.20repo.20in.20vscode/near/224897324\">said</a>:</p>\n<blockquote>\n<p>When you say to open <code>src/</code> as workspace folder, do you mean that the project root should be <code>src</code> or that it should be a two-folder workspace with both <code>lean4/</code> and <code>lean4/src</code> open?</p>\n</blockquote>\n<p>I believe the only important part is that you do not open <em>only</em> the root as a workspace since then <code>elan</code> will be called from there and use the wrong stage. Which doesn't matter for browsing of course.</p>",
        "id": 224898155,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612284140
    },
    {
        "content": "<p>I have set an elan override for <code>lean4/</code> and then open <code>code lean4/</code>.  This also works fine.</p>",
        "id": 224898404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612284232
    },
    {
        "content": "<p>that's what I did at first but go to definition didn't work</p>",
        "id": 224898486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284257
    },
    {
        "content": "<p>opening src works but then you can't see the whole project</p>",
        "id": 224898550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284287
    },
    {
        "content": "<p>Go-to-definition works for me as well (after setting LEAN_SRC_PATH).</p>",
        "id": 224898753,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612284367
    },
    {
        "content": "<p>Do I have to invoke <code>LEAN_SRC_PATH=lean4/src code lean4/</code> to make that work?</p>",
        "id": 224898864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284418
    },
    {
        "content": "<p>or did you just stick that in your bashrc or something</p>",
        "id": 224898908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284436
    },
    {
        "content": "<p>I used the absolute path, <code>env LEAN_SRC_PATH=$PWD/src code .</code></p>",
        "id": 224898957,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612284458
    },
    {
        "content": "<p>Do we have to set <code>LEAN_SRC_PATH</code> for all lean4 projects now?</p>",
        "id": 224899079,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1612284491
    },
    {
        "content": "<p><code>leanpkg</code> does it automatically when called to build dependencies from the server</p>",
        "id": 224899218,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612284550
    },
    {
        "content": "<p>It would be nice if there were some vscode setting to override in the lean4 project to make this variable resolve, since I guess a leanpkg.toml isn't an option</p>",
        "id": 224899501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284647
    },
    {
        "content": "<p>(since I guess it is vscode-lean4 that is invoking elan and could set this variable)</p>",
        "id": 224899561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284672
    },
    {
        "content": "<p>The only reason we don't have a <code>src/leanpkg.toml</code> is that there is no <code>leanpkg</code> in stage 0 (except with the Nix setup :&gt; ... where it's just a small bash wrapper)</p>",
        "id": 224899740,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612284736
    },
    {
        "content": "<p>that's not actually a problem though, I think it just means you sometimes have to work without it. For browsing it should be harmless, right?</p>",
        "id": 224899899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284797
    },
    {
        "content": "<p>Yes, you're probably correct</p>",
        "id": 224900239,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612284941
    }
]