[
    {
        "content": "<p>Hello,<br>\nI want both state to be equal, but it doesn't happen.<br>\nI need to do it through MetaM because other goal will be closed too in future code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Rewrite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">apply</span> <span class=\"n\">mvarId</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Or.elim</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkFVar</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"n\">return</span> <span class=\"n\">goals</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n                                            <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n                                            <span class=\"n\">trace_state</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test'</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">myTactic</span>\n                                             <span class=\"n\">trace_state</span>\n</code></pre></div>",
        "id": 271288790,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644418201
    },
    {
        "content": "<p>Note that <code>Or.elim</code> has implicit arguments</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Or.elim</span>\n</code></pre></div>\n<p>So, <code>mkApp (mkConst ``Or.elim) (mkFVar h)</code> is not constructing the term you are expecting.<br>\nWe have some auxiliary functions for setting the value of implicit arguments (e.g., <code>mkAppM</code> and <code>mkAppOptM</code>). Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">cases</span> <span class=\"n\">mvarId</span> <span class=\"n\">h</span>\n    <span class=\"n\">withMVarContext</span> <span class=\"n\">mvarId</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">apply</span> <span class=\"n\">mvarId</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">Or.elim</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarType</span> <span class=\"n\">mvarId</span><span class=\"o\">),</span> <span class=\"n\">mkFVar</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n      <span class=\"n\">return</span> <span class=\"n\">goals</span>\n</code></pre></div>\n<p>You can also use the <code>cases</code> tactic at <code>myTactic</code>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">cases</span> <span class=\"n\">mvarId</span> <span class=\"n\">h</span>\n    <span class=\"n\">return</span> <span class=\"n\">r.toList.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">mvarId</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271335479,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644435550
    },
    {
        "content": "<p>Not sure whether the following example is compatible with your plans, but <code>evalTacticAt</code> may be useful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">evalTacticAt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">mvarId</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarIds</span> <span class=\"bp\">←</span> <span class=\"n\">evalTacticAt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"n\">mvarIds</span>\n</code></pre></div>",
        "id": 271337103,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644436154
    },
    {
        "content": "<p>I tried something like that but I don't understand why <code>h</code> is coming with a cross: <code>h✝</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">left</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"n\">case</span> <span class=\"n\">right</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>It doesn't happen when doing <code>intro h; apply Or.elim h</code></p>",
        "id": 271338044,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644436539
    },
    {
        "content": "<p>For the first one, i get <br>\n<code>tactic apply failed, metavariable has already been assigned</code><br>\nThe second one seem fine<br>\nThe last example doesn't allow me to get the introducted fvars for futur uses,  so it won't do the job.</p>",
        "id": 271339247,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644436963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20writing/near/271338044\">said</a>:</p>\n<blockquote>\n<p>I tried something like that but I don't understand why <code>h</code> is coming with a cross: <code>h✝</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">left</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"n\">case</span> <span class=\"n\">right</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>It doesn't happen when doing <code>intro h; apply Or.elim h</code></p>\n</blockquote>\n<p>Those are the default name, you can change that behevior like that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">cases</span> <span class=\"n\">mvarId</span> <span class=\"n\">h</span> <span class=\"bp\">#</span><span class=\"o\">[{</span> <span class=\"n\">varNames</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">]},</span> <span class=\"o\">{</span> <span class=\"n\">varNames</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">]}]</span>\n    <span class=\"n\">return</span> <span class=\"n\">r.toList.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">mvarId</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271339346,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644437007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364007\">Alice Laroche</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20writing/near/271339247\">said</a>:</p>\n<blockquote>\n<p>For the first one, i get <br>\n<code>tactic apply failed, metavariable has already been assigned</code><br>\nThe second one seem fine<br>\nThe last example doesn't allow me to get the introducted fvars for futur uses,  so it won't do the job.</p>\n</blockquote>\n<p>remove the line <code>let r ← cases mvarId h</code> in the first one. It was probably a typo</p>",
        "id": 271339542,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644437071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20writing/near/271339542\">said</a>:</p>\n<blockquote>\n<p>remove the line <code>let r ← cases mvarId h</code> in the first one. It was probably a typo</p>\n</blockquote>\n<p>Ah yes, it make more sense...</p>",
        "id": 271339648,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644437116
    },
    {
        "content": "<blockquote>\n<p>I tried something like that but I don't understand why h is coming with a cross: h<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>:</p>\n</blockquote>\n<p>It is because of hygiene.</p>",
        "id": 271339724,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644437148
    },
    {
        "content": "<p>If one wants they can workaround the hygienic macro system using tricks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">evalTacticAt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">mvarId</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarIds</span> <span class=\"bp\">←</span> <span class=\"n\">evalTacticAt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"n\">mvarIds</span>\n</code></pre></div>",
        "id": 271340518,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644437522
    }
]