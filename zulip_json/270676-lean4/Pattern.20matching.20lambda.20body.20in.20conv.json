[
    {
        "content": "<p>It seems that pattern matching on lambda body in <code>conv</code> does not seem to be working in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>      <span class=\"c1\">--- error: 'pattern' conv tactic failed, pattern was not found</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Why is the pattern failing here?</p>",
        "id": 256890867,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633805769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I am not very familiar with <code>conv</code> mode  so the term 'pattern matching' may mean something different there. But usually in Lean, you can only pattern match on constructors or functions with the <code>@[matchPattern]</code> attribute. <code>id</code> is neither so I would  not expect the pattern to work.</p>",
        "id": 256891297,
        "sender_full_name": "Mac",
        "timestamp": 1633806148
    },
    {
        "content": "<p>It is described as pattern matching in the doc - <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/conv.html\">https://leanprover.github.io/theorem_proving_in_lean4/conv.html</a></p>\n<p>For example, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>   <span class=\"bp\">.</span>  <span class=\"c1\">-- the goal here is: id fun x =&gt; id (id x)</span>\n</code></pre></div>\n<p>It correctly matches the lhs .</p>",
        "id": 256891548,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633806414
    },
    {
        "content": "<p>Also <code>pattern (f _)</code> seems to have trouble matching <code>f x y</code> i.e. the pattern needs to have all applied arguments in it. I had similar <a href=\"#narrow/stream/270676-lean4/topic/simp.20is.20not.20picking.20up.20a.20theorem\">issue</a> with simp tactic before and that got fixed.</p>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Function.comp</span> <span class=\"n\">id</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Function.comp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>      <span class=\"c1\">--- error: 'pattern' conv tactic failed, pattern was not found</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p>pattern <code>Function.comp _ _</code> works as expected</p>",
        "id": 256939753,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633857106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I pushed fixes for the issues above.</p>",
        "id": 256991460,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633906403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Yeah, \"pattern matching\" is a bit overloaded <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> The \"pattern\" here is not referring to a match-expression pattern.</p>",
        "id": 256991685,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633906646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>  Thank you very much!</p>",
        "id": 257026717,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633939015
    },
    {
        "content": "<p>Works great! However, it does not work with <code>let</code> as I would expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n           <span class=\"bp\">=</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span>\n             <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n             <span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span>\n</code></pre></div>\n<p>After <code>pattern (id _)</code> the goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">foo</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I would expect it to be <code>id (id y)</code>.</p>\n<p>Also focusing on the definition of <code>foo</code> just by spelling out <code>foo</code> would be nice. Something like <code>pattern (let foo := _)</code></p>\n<hr>\n<p>A bit unrelated,  <code>enter</code> and <code>pattern</code> zooms in on a subexpression. Is there a command to jump back? Maybe allowing <code>conv</code> block inside of another <code>conv</code> block?</p>\n<p>Also, I would find useful to <code>pattern</code> on the inner most occurrence of the pattern.</p>",
        "id": 257072398,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633962690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20lambda.20body.20in.20conv/near/257072398\">said</a>:</p>\n<blockquote>\n<p>A bit unrelated,  <code>enter</code> and <code>pattern</code> zooms in on a subexpression. Is there a command to jump back? Maybe allowing <code>conv</code> block inside of another <code>conv</code> block?</p>\n</blockquote>\n<p>You can nest steps in <code>{ ... }</code> to delimit their scope. But allowing <code>conv =&gt;</code> with the same meaning sounds sensible to me.</p>",
        "id": 257074056,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633963382
    },
    {
        "content": "<p>How am I supposed to use <code>{ ... }</code>? I was using it in Lean 3, but in Lean 4 it never does what I would expect. </p>\n<p>Example of unexpected behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">twice</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">twice</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">twice</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">.</span> <span class=\"c1\">--- Goal: id (twice (id x))</span>\n    <span class=\"o\">{</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n    <span class=\"bp\">.</span>  <span class=\"c1\">-- Here I would expect the goal to be `id (twice x)`, but I'm getting `goals accomplished`</span>\n</code></pre></div>",
        "id": 257074969,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633963797
    },
    {
        "content": "<p>Ah, then I was mistaken about their use</p>",
        "id": 257075184,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633963908
    },
    {
        "content": "<p>In order to focus on the inner most pattern I would expect that this would(almost) do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]}</span>\n</code></pre></div>\n<p>but it does not. The problem is probably that <code>repeat</code> tries to apply <code>rfl</code> tactic at the end, but I would expect it to do nothing at the end.</p>",
        "id": 257081639,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1633966739
    },
    {
        "content": "<p>Ok, I do not understand curly braces, but the above repeat kind of works with normal braces(or even without them)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, it creates bunch of goals, one for each repeat. </p>\n<p>Similarly, <code>repeat (ext x)</code> creates goals <code>f x</code>, <code>f x1 x</code>, <code>f x2 x1 x</code>, ... until all arguments of <code>f</code> are exhausted. I want just one goal with fully applied <code>f</code>.</p>",
        "id": 257157874,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634021917
    },
    {
        "content": "<p>Interesting, <code>repeat</code> actually works as expected but it presents goals in an odd way. Placing cursor at the end of <code>repeat rw [thrm]</code> shows the goal after only one transformation of <code>rw [thrm]</code>. However, when you move further it will show the actual goal after many rewrites. Because of this reason, I have no used <code>repeat</code> for couple of weeks now as I though that it is not doing what I want.</p>\n<p>Also, I think <code>repeat</code> in <code>conv</code> should not call <code>tactic =&gt; rfl</code> at the end but it should preform no operation. One way to do it is to call <code>tactic' =&gt; skip</code>, but I'm not sure if it is really \"no operation\" tactic.</p>\n<p>An example of these behaviors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span>\n\n  <span class=\"n\">macro</span> <span class=\"s2\">\"no_op\"</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n\n  <span class=\"n\">syntax</span> <span class=\"s2\">\"repeat' \"</span> <span class=\"n\">convSeq</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n  <span class=\"n\">macro_rules</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"n\">repeat'</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">repeat'</span> <span class=\"bp\">$</span><span class=\"n\">seq</span> <span class=\"bp\">|</span> <span class=\"n\">no_op</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">repeat_ext</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">repeat'</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"c1\">-- Cursor here shows 4 goals</span>\n    <span class=\"n\">no_op</span>            <span class=\"c1\">-- Cursor here shows the one expected goal</span>\n\n  <span class=\"bp\">.</span> <span class=\"c1\">-- Looks like that exiting `conv` invokes `rfl` automatically. So this line fails if the theorem is actually provable by `rfl`, as there will be no more goals.</span>\n\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>Using <code>repeat</code> instead of <code>repeat'</code> will show <code>goals accomplished</code> when the cursor is on <code>no_op</code>. </p>\n<p>When exiting the <code>conv</code> block, the tactic <code>rfl</code>(maybe <code>simp</code>?) is called. So if the right hand side is <code>(λ x y z : Nat =&gt; x + y +z)</code> the line with <code>.</code> fails as all goals have been solved. I understand that this is useful behavior when proving theorems, but I'm experimenting with tactic mode to write/rewrite programs and I need a fine control over when I want to finish the rewriting process.</p>",
        "id": 257162486,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634024890
    },
    {
        "content": "<p>Another thing, with the recent fix to <code>pattern</code> it looks like that if the pattern is not present the tactic does not fail but it does nothing. This might be undesirable when it is used in <code>repeat</code> as that relies on tactic failing. I have not yet run into problems with this though, just surprised that it actually terminates.</p>",
        "id": 257174683,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634031297
    },
    {
        "content": "<p>Concerning the issue from jumping back from <code>enter</code> and <code>pattern</code>. I propose adding <code>enter*</code>, <code>pattern*</code>, <code>arg*</code> that creates two goals, the first goal zooms in on a subexpression and the second one is the original expression with the modified subexpression.</p>",
        "id": 257175364,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634031663
    },
    {
        "content": "<p>Rather than a modifier on all those tactics, that sounds like a sequencing primitive. Do <code>;</code> and blocks not already work?</p>",
        "id": 257186881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634038138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I have tried different combinations of <code>{}</code>, blocks and <code>;</code> but never got the result I expected.</p>",
        "id": 257191700,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634040641
    },
    {
        "content": "<p>what about <code>conv =&gt;</code> as a conv tactic?</p>",
        "id": 257191767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634040687
    },
    {
        "content": "<p>It is not there by default, I do not know how to define it. I have tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"conv =&gt; \"</span> <span class=\"n\">convSeq</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"bp\">|</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it does not even compile and I doubt it would work.</p>",
        "id": 257193068,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634041318
    },
    {
        "content": "<p>Oh, it's <a href=\"https://github.com/leanprover/mathport/blob/master/Mathport/Prelude/Syntax.lean#L600\">defined in mathport</a> but I guess that one was skipped</p>",
        "id": 257193307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634041420
    },
    {
        "content": "<p>Here's a demonstration of the lean 3 equivalent tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- | (λ (x : ℕ), x + y = 0) = λ (x : ℕ), false</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span>\n      <span class=\"c1\">-- | (λ (x : ℕ), x + y = 0) = λ (x : ℕ), false</span>\n      <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- | λ (x : ℕ), x + y = 0</span>\n      <span class=\"n\">funext</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- | x + y = 0</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n      <span class=\"c1\">-- | y + x = 0</span>\n    <span class=\"o\">},</span>\n    <span class=\"c1\">-- | (λ (x : ℕ), y + x = 0) = λ (x : ℕ), false</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- ⊢ (λ (x : ℕ), y + x = 0) = λ (x : ℕ), false</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257194101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634041785
    },
    {
        "content": "<p>And where is <code>convConv</code> defined?  I grepped the repo and and the only occurrence of <code>convConv</code> is in that Syntax.lean file.</p>",
        "id": 257194259,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1634041830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> could you add <code>conv =&gt;</code> as a conv tactic, like the above?</p>",
        "id": 257194265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634041835
    },
    {
        "content": "<p>It's not defined in mathport, only declared as syntax</p>",
        "id": 257194292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634041849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20lambda.20body.20in.20conv/near/257194265\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> could you add <code>conv =&gt;</code> as a conv tactic, like the above?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I will do it later this week. I am currently in \"slide deck\" building mode <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257194462,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634041933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20lambda.20body.20in.20conv/near/257072398\">said</a>:</p>\n<blockquote>\n<p>Works great! However, it does not work with <code>let</code> as I would expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n           <span class=\"bp\">=</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span>\n             <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n             <span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span>\n</code></pre></div>\n<p>After <code>pattern (id _)</code> the goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">foo</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I would expect it to be <code>id (id y)</code>.</p>\n<p>Also focusing on the definition of <code>foo</code> just by spelling out <code>foo</code> would be nice. Something like <code>pattern (let foo := _)</code></p>\n<hr>\n<p>A bit unrelated,  <code>enter</code> and <code>pattern</code> zooms in on a subexpression. Is there a command to jump back? Maybe allowing <code>conv</code> block inside of another <code>conv</code> block?</p>\n<p>Also, I would find useful to <code>pattern</code> on the inner most occurrence of the pattern.</p>\n</blockquote>\n<p>I pushed a fix for this issue.</p>",
        "id": 258789035,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634945608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20lambda.20body.20in.20conv/near/257194462\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20lambda.20body.20in.20conv/near/257194265\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> could you add <code>conv =&gt;</code> as a conv tactic, like the above?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I will do it later this week. I am currently in \"slide deck\" building mode <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I added the <code>conv =&gt;</code> as a conv tactic.</p>",
        "id": 258789060,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1634945633
    }
]