[
    {
        "content": "<p>for example, consider this lean3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>how would we write these in lean4? I heard something about a <code>nomatch</code> keyword, but I can't seem to find much documentation about it</p>",
        "id": 312196748,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669385708
    },
    {
        "content": "<p>I think with <code>fun.</code></p>",
        "id": 312196883,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669385752
    },
    {
        "content": "<p><code>theorem not_false' : ¬false := fun.</code></p>",
        "id": 312197008,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669385770
    },
    {
        "content": "<p>There's documentation right in the editor as soon as you type in <code>nomatch</code> :) . Though I suppose you first need to know that it is a term syntax. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Parser/Term.html#Lean.Parser.Term.nomatch\">https://leanprover-community.github.io/mathlib4_docs/Lean/Parser/Term.html#Lean.Parser.Term.nomatch</a></p>",
        "id": 312197768,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669386008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312197008\">said</a>:</p>\n<blockquote>\n<p><code>theorem not_false' : ¬false := fun.</code></p>\n</blockquote>\n<p>That <code>.</code> is a syntax error.</p>\n<p>Here's one way to do <code>nomatch</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 312198038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669386093
    },
    {
        "content": "<p>If you want to golf: <code>(nomatch ·)</code></p>",
        "id": 312198137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669386124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312198038\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312197008\">said</a>:</p>\n<blockquote>\n<p><code>theorem not_false' : ¬false := fun.</code></p>\n</blockquote>\n<p>That <code>.</code> is a syntax error.</p>\n<p>Here's one way to do <code>nomatch</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Really? I copied it from mathlib4</p>",
        "id": 312199010,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669386386
    },
    {
        "content": "<p>The <code>fun.</code> syntax is a std4/mathlib4 addition.</p>",
        "id": 312199165,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669386424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Has anyone considered <code>nofun</code> to go with <code>nomatch</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"nofun\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">nomatch</span> <span class=\"bp\">·</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"n\">nofun</span>\n</code></pre></div>",
        "id": 312200090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669386679
    },
    {
        "content": "<p>That's not appropriate because these proofs are a <em>lot</em> of fun</p>",
        "id": 312227115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669395549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312200090\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> Has anyone considered <code>nofun</code> to go with <code>nomatch</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"nofun\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">nomatch</span> <span class=\"bp\">·</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"n\">nofun</span>\n</code></pre></div>\n</blockquote>\n<p>That's exactly the <code>fun.</code> syntax mentioned above</p>",
        "id": 312304333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669449615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312198038\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312197008\">said</a>:</p>\n<blockquote>\n<p><code>theorem not_false' : ¬false := fun.</code></p>\n</blockquote>\n<p>That <code>.</code> is a syntax error.</p>\n<p>Here's one way to do <code>nomatch</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>IIRC, the <code>fun .</code> syntax is defined by mathlib4, not Lean itself</p>",
        "id": 312317653,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1669457345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312317653\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312198038\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312197008\">said</a>:</p>\n<blockquote>\n<p><code>theorem not_false' : ¬false := fun.</code></p>\n</blockquote>\n<p>That <code>.</code> is a syntax error.</p>\n<p>Here's one way to do <code>nomatch</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s.A</span> <span class=\"bp\">≠</span> <span class=\"n\">s.B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>IIRC, the <code>fun .</code> syntax is defined by mathlib4, not Lean itself</p>\n</blockquote>\n<p>Yeah, Jannis mentioned this as well</p>",
        "id": 312323424,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669460165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That may be functionally the same, but the serious part of what I was getting at is why not have the syntax parallel <code>nomatch</code>? You can't guess that <code>fun.</code> might be related.</p>",
        "id": 312327414,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669461952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That may be functionally the same, but the serious part of what I was getting at is why not have the syntax parallel <code>nomatch</code>? You can't guess that <code>fun.</code> might be related.</p>",
        "id": 312327524,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669461985
    },
    {
        "content": "<p>I actually prefer <code>fun.</code> for its syntactic consistency. There is also <code>intro.</code> and <code>match x with.</code> in the same file</p>",
        "id": 312327567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669462002
    },
    {
        "content": "<p><code>nomatch</code> is a more special notation IMO</p>",
        "id": 312327619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669462034
    },
    {
        "content": "<p>it doesn't compose as well with other stuff</p>",
        "id": 312327639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669462045
    },
    {
        "content": "<p>(In case it isn't clear, the syntax pattern I want to encourage is that anywhere a <code>| a =&gt; b</code> list is accepted, a <code>.</code> also works and means an empty match)</p>",
        "id": 312328512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669462402
    },
    {
        "content": "<p>I like the consistency idea, but I can't say I like <code>.</code> specifically. It is essentially a Coq remnant that withered down to one specific use case.</p>",
        "id": 312329419,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669462839
    },
    {
        "content": "<p>We can potentially do \"nothing at all\" as the marker, but that would have to be integrated with the original syntax</p>",
        "id": 312339162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669467079
    },
    {
        "content": "<p>this would be following my general plan to replace most uses of 1+ syntax in lean with 0+ syntax</p>",
        "id": 312339406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669467175
    },
    {
        "content": "<p>What about nested matches of constructorless types? Agda has the absurd pattern <code>()</code>, and it can occur in any position that expects a pattern, not just the top level. A pattern that validly contains an absurd pattern is then never associated with an RHS. It's quite convenient for pointing at precisely why a case is impossible.</p>",
        "id": 312340166,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669467537
    },
    {
        "content": "<p>lean automatically does nested pattern matching of impossible cases, you just don't mention the case</p>",
        "id": 312340218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669467575
    },
    {
        "content": "<p><code>()</code> is obviously not available as the absurd pattern in lean since it's the pattern for unit</p>",
        "id": 312340360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669467632
    },
    {
        "content": "<blockquote>\n<p>It's quite convenient for pointing at precisely why a case is impossible.</p>\n</blockquote>\n<p>I think that would be a nice addition! Though perhaps not terribly high-priority.</p>",
        "id": 312340484,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669467694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/equation.20compiler.20magic.20in.20lean4/near/312339162\">said</a>:</p>\n<blockquote>\n<p>We can potentially do \"nothing at all\" as the marker, but that would have to be integrated with the original syntax</p>\n</blockquote>\n<p>I think we've rejected that for Lean 3 before. There should be <em>something</em> indicating an absurd pattern match</p>",
        "id": 312340758,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669467834
    },
    {
        "content": "<p>okay, so... <code>.</code></p>",
        "id": 312340878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669467881
    },
    {
        "content": "<p>it's derived from the lean 3 syntax but not the same, since it goes in arbitrary terms instead of only coming at the end of a definition</p>",
        "id": 312341028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669467934
    },
    {
        "content": "<p>Is this such a common occurrence that every character counts? I would much prefer a more readable notation such as <code>match | absurd</code>, which is forward-compatible with David's suggestion.</p>",
        "id": 312342867,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669468780
    },
    {
        "content": "<p>Tbh the expected use frequency was the whole reason we introduced only <code>nomatch</code> and not <code>nofun</code> etc.</p>",
        "id": 312343143,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669468912
    },
    {
        "content": "<p>yes, this does come up in places where every character counts</p>",
        "id": 312346669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669470427
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/blob/73544f4b96d57bc1174ca2e9c00f65179a29e6dd/Std/Data/RBMap/Alter.lean#L178-L196\">Here</a> is an example where I would really not have liked to need to use <code>fun | absurd</code></p>",
        "id": 312346863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669470528
    },
    {
        "content": "<p>In Std, there are 47 uses of <code>fun.</code>, 44 uses of <code>nomatch</code> and 2 uses of <code>match e with.</code> (these are used in places where <code>match</code> is used as a tactic, since there is no <code>nomatch</code> tactic)</p>",
        "id": 312347248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669470724
    },
    {
        "content": "<p><code>nomatch</code> feels very ad hoc and incomplete compared to the others, since it is only defined for the expected common case</p>",
        "id": 312347341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669470788
    },
    {
        "content": "<p>I wasn't suggesting <code>()</code> as concrete syntax in Lean, just that it's nice to have _some_ syntax for absurd patterns. It's convenient to leave them out most of the time, but sometimes code communicates more when the author can be more explicit.</p>",
        "id": 312348074,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669471117
    },
    {
        "content": "<p>How about a Unicode contradiction symbol as notation for something like <code>nomatch</code></p>",
        "id": 312362098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669476275
    },
    {
        "content": "<p>When I show other CS students ocaml's <code>| _ -&gt; .</code> absurd case syntax they <em>do</em> find the dot very confusing and arbitrary; I would not mind a symbol like \\bot or a full <code>absurd</code> keyword to represent a pattern that matches an empty type with no RHS</p>",
        "id": 312380277,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1669485538
    },
    {
        "content": "<p>What about having <code>.</code> functioning as an optional <code>end</code>? (Or if <code>.</code> is too terse, then just <code>end</code>) That way the syntax works beyond the special case of an empty match and could (though I wouldn't recommend it) be used to delimit nested <code>match</code>es without needing parentheses or indentation, which might be useful for macros:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n'.</span> <span class=\"bp\">|</span> <span class=\"n\">m'</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m'</span>\n</code></pre></div>",
        "id": 312382764,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1669487004
    },
    {
        "content": "<p>(that <code>.</code> is incredibly hard to spot in that snippet, but would love <code>end</code>)</p>",
        "id": 312391772,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1669492991
    },
    {
        "content": "<p>Why would this matter for macros? Macros manipulate syntax trees, not strings.</p>",
        "id": 312402806,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669502352
    },
    {
        "content": "<p>Interesting, I didn't realize that macros support matches with no branches:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"test%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">sorryAx</span> <span class=\"n\">False</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">test</span><span class=\"bp\">%</span> <span class=\"c1\">-- nomatch (_ : False) : ?m.2440</span>\n</code></pre></div>\n<p>So having an explicit terminator is not necessary.</p>",
        "id": 312552016,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1669608741
    },
    {
        "content": "<p>this is technically a malformed syntax object, since the parser is declared to accept one or more match branch... but yes, the rejection of empty matches is only \"skin deep\" - the support is all there in the backend, you just have to bypass the front end or pass an invalid syntax and hope that the syntax quotation code doesn't assert that the array is nonempty in the future</p>",
        "id": 312570825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669621553
    },
    {
        "content": "<p>That's how <code>match e with.</code> is implemented BTW - it just calls the match backend with an empty list of branches</p>",
        "id": 312570924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669621592
    }
]