[
    {
        "content": "<p>I have cloned a fresh lean4 repository and built it based on <a href=\"https://leanprover.github.io/lean4/doc/make/index.html\">doc instructions</a>. Unfortunately, lean does not work properly, I'm getting bunch of errors of type <code>undefined reference to __gmpz_**</code> </p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tomass</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanrt.a</span><span class=\"o\">(</span><span class=\"n\">object.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_int_big_mod'</span><span class=\"o\">:</span>\n<span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x533e</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_init_set_si'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x5360</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_clear'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x5368</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_clear'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x53b4</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_clear'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x53d2</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_init_set_si'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x53f5</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_clear'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">object.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x53fd</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">__gmpz_clear'</span>\n</code></pre></div>\n<p>Also these unit tests fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">892</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_534.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">893</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_StackOverflow.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">894</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_StackOverflowTask.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">895</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_append.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">896</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_array.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">897</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_arrayMk.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">898</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_array_test.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">899</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_array_test2.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">900</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_bigctor.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">901</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_binomial.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">902</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_bytearray_bug.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">903</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug1.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">904</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug2.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">905</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug3.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">906</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug4.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">907</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug5.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">908</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug6.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">909</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug7.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">910</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_closure_bug8.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">911</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_escape.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">912</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_expr.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">913</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_extractClosedMutualBlock.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">914</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_float.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">915</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_float_cases_bug.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">916</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_init.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">917</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_lazylist.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">918</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_map_big.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">919</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_overflow1.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">920</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_overflow2.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">921</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_overflow3.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">922</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_partial.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">923</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_phashmap.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">924</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_phashmap2.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">925</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_phashmap3.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">926</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_print_error.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">927</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_qsortBadLt.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">928</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_rbmap_library.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">929</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_reusebug.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">930</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_str.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">931</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_strictAndOr.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">932</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_strictOrSimp.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">933</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_t1.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">934</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_t2.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">935</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_t4.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">936</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_thunk.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">937</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_uint_fold.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">939</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_doc_example</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">981</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_binarytrees.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">982</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_const_fold.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">983</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_deriv.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">984</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_qsort.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">985</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_rbmap.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">986</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_rbmap_checkpoint.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">987</span> <span class=\"bp\">-</span> <span class=\"n\">leanbenchtest_unionfind.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">1026</span> <span class=\"bp\">-</span> <span class=\"n\">leanpkgtest</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">1032</span> <span class=\"bp\">-</span> <span class=\"n\">leanpkgtest_user_attr_app</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">1034</span> <span class=\"bp\">-</span> <span class=\"n\">laketest</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 262389774,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637622078
    },
    {
        "content": "<p>Wild guess since I barely know anything about the cpp parts of the compiler but do you have the required GMP dependency installed?</p>",
        "id": 262390394,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637622509
    },
    {
        "content": "<p>Yes, running <code>sudo apt-get install libgmp-dev</code> says it is already installed.</p>",
        "id": 262390790,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637622761
    },
    {
        "content": "<p>And I was able to build and run lean successfully previously, something must have changed.</p>",
        "id": 262390850,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637622808
    },
    {
        "content": "<p>I don't understand why this happens only on your machine, but could you try <a href=\"https://github.com/Kha/lean4/tree/gmp-lasto\">https://github.com/Kha/lean4/tree/gmp-lasto</a> ?</p>",
        "id": 262425702,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637656504
    },
    {
        "content": "<p>All <code>gmp</code> related errors are gone but I'm also getting <code>undefined reference to </code>dlsym'` </p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tomass</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">kha</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">ir_interpreter.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">lookup_symbol_in_cur_exe</span><span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">'</span><span class=\"o\">:</span>\n<span class=\"n\">ir_interpreter.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0xe7a</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">dlsym'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tomass</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">kha</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">ir_interpreter.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ir</span><span class=\"o\">::</span><span class=\"n\">interpreter</span><span class=\"o\">::</span><span class=\"n\">lookup_symbol</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span><span class=\"bp\">'</span><span class=\"o\">:</span>\n<span class=\"n\">ir_interpreter.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text._ZN4lean2ir11interpreter13lookup_symbolERKNS_4nameE</span><span class=\"o\">[</span><span class=\"n\">_ZN4lean2ir11interpreter13lookup_symbolERKNS_4nameE</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"mi\">0x3d4</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">dlsym'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">ir_interpreter.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text._ZN4lean2ir11interpreter13lookup_symbolERKNS_4nameE</span><span class=\"o\">[</span><span class=\"n\">_ZN4lean2ir11interpreter13lookup_symbolERKNS_4nameE</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"mi\">0x467</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">dlsym'</span>\n<span class=\"n\">collect2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld</span> <span class=\"n\">returned</span> <span class=\"mi\">1</span> <span class=\"n\">exit</span> <span class=\"n\">status</span>\n</code></pre></div>\n<p>Only few tests are failing now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">912</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_expr.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">923</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_phashmap.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">924</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_phashmap2.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">925</span> <span class=\"bp\">-</span> <span class=\"n\">leancomptest_phashmap3.lean</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n    <span class=\"mi\">1032</span> <span class=\"bp\">-</span> <span class=\"n\">leanpkgtest_user_attr_app</span> <span class=\"o\">(</span><span class=\"n\">Failed</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 262433938,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637661693
    },
    {
        "content": "<p>I added <code>-ldl</code> flag too and recompiling now.</p>",
        "id": 262434255,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637661879
    },
    {
        "content": "<p>Yup changing <code>getLinkerFlags</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getLinkerFlags</span> <span class=\"o\">(</span><span class=\"n\">leanSysroot</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linkStatic</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gmp</span> <span class=\"o\">:=</span> <span class=\"s2\">\"-lgmp\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-L\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">leanSysroot</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lib\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">getBuiltinLinkerFlags</span> <span class=\"n\">linkStatic</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trim.splitOn</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">gmp</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"s2\">\"-ldl\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fixes the issue. </p>\n<p>My wild guess is that this is because I'm using gcc and not clang. Recently, I had some issues with the order of link libraries with gcc and not with clang.</p>",
        "id": 262434736,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637662146
    },
    {
        "content": "<p>It's weird because they should both use <code>ld</code></p>",
        "id": 262434773,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637662178
    },
    {
        "content": "<p>We will see, recompiling without the linker flags change with clang now.</p>",
        "id": 262435124,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637662357
    },
    {
        "content": "<p>No problem with clang. There has to be something odd happening with gcc.</p>",
        "id": 262435615,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637662677
    }
]