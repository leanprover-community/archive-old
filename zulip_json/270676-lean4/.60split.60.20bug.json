[
    {
        "content": "<p>I wrote a <code>List.findIdx?</code> function as a little helper and had to prove two theorems about it in order to use it in my proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_bounds</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">idx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"n\">generalizing</span> <span class=\"n\">idx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons.h_1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">injection</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"n\">simp_all_arith</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons.h_2</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Seq.seq</span><span class=\"o\">,</span> <span class=\"n\">Option.bind</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">Option.map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">injection</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_all_arith</span>\n      <span class=\"n\">case</span> <span class=\"n\">h_2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_prop</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_bounds</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"n\">generalizing</span> <span class=\"n\">idx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n</code></pre></div>\n<p>the <code>split at h</code> gives me a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">splitMatch'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"bp\">'</span><span class=\"n\">applyMatchSplitter'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generalize</span> <span class=\"n\">target</span>\n</code></pre></div>\n<p>though i can finish the proof with a <code>cases</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_prop</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_bounds</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"n\">generalizing</span> <span class=\"n\">idx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">GetElem.getElem</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Seq.seq</span><span class=\"o\">,</span> <span class=\"n\">Option.bind</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">Option.map</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">case</span> <span class=\"n\">cons.false.h_1</span> <span class=\"n\">h3</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">injection</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_all_arith</span><span class=\"o\">[</span><span class=\"n\">GetElem.getElem</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">cons.false.h_2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>I also don't exactly enjoy reading either of the proofs, they are short and all of that but still a little..meh IMO so if someone has feedback regarding how I can improve here I'd be happy to hear as well.</p>",
        "id": 291515333,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659305580
    }
]