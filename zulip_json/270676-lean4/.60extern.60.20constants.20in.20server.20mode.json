[
    {
        "content": "<p>Is there a way to get Lean to link to an external library in server mode so that <code>extern</code> declarations  can be run in server mode? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"foo\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"c1\">-- crashes</span>\n</code></pre></div>\n<p>The last line crashes the Lean server, which is somewhat expected as there is no <code>foo</code> to call. Thus, I would like to be able to link in a library defining <code>foo</code> so that the above declaration can actually be run. </p>\n<p>In the same vein, I would also be curious if there is a way to get the following to work in server mode as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern c inline \"0\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"c1\">-- also crashes, is there a way to get this to print \"0\"?</span>\n</code></pre></div>",
        "id": 245120127,
        "sender_full_name": "Mac",
        "timestamp": 1625624669
    },
    {
        "content": "<p>To execute an <code>extern</code>, the IR interpreter <a href=\"https://github.com/leanprover/lean4/blob/e2210ec4e04beb78289c37cbf9ee1ccee0d032db/src/library/compiler/ir_interpreter.cpp#L832\">looks for</a> a symbol with that name in the current executable. You can provide additional symbols via plugins, however plugins are also produced from Lean code. I assume you want to implement <code>foo</code> in C/C++? I think you might be able to compile a plugin object file and link that together with the artifacts from your C code containing <code>foo</code> into a <code>plugin.so</code>. Then <code>lean --server --plugin=plugin.so</code> will (maybe..) be able to run <code>foo</code> in server mode. I think the only annoyance is right now it doesn't seem possible to pass in command-line flags to the Lean server in <code>vscode-lean4</code>, so you could write a <code>leanWithPlugin.sh</code> script and use that as the \"lean\" binary.</p>",
        "id": 245123671,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625629209
    },
    {
        "content": "<p>As for inline externs, I don't think there's any way to run those without compiling to C which the server does not do.</p>",
        "id": 245123691,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625629231
    },
    {
        "content": "<p>Thanks for the advice! I'll try that.</p>",
        "id": 245124189,
        "sender_full_name": "Mac",
        "timestamp": 1625629581
    },
    {
        "content": "<p>One question, though: is there anything special about lean plugin object files or are they just normal shared libraries?</p>",
        "id": 245124269,
        "sender_full_name": "Mac",
        "timestamp": 1625629642
    },
    {
        "content": "<p>They're just shared libraries, but they <a href=\"https://github.com/leanprover/lean4/blob/e2210ec4e04beb78289c37cbf9ee1ccee0d032db/src/shell/lean.cpp#L298\">must contain</a> an <code>initialize_Pkg</code> symbol .</p>",
        "id": 245129907,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625634661
    }
]