[
    {
        "content": "<p>Me and several other people on the discord are completely bewildered about why <code>rw [ih]</code> fails below. This is as minimal as I can get it. This all came from doing Exercise sheet 5 from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's course. Help!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"n\">bs</span> <span class=\"k\">else</span> <span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"n\">bs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">filter_cons_true</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">{</span><span class=\"n\">as</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">{</span><span class=\"n\">as</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a'</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mem</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">MemConsIff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_filter</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">filter</span> <span class=\"n\">p</span> <span class=\"n\">as</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">byCases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">c</span>\n    <span class=\"n\">focus</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filter_cons_true</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">MemConsIff</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic 'rewrite' failed, equality or iff proof expected</span>\n<span class=\"cm\">  a ∈ filter p cs ↔ a ∈ cs ∧ p a</span>\n<span class=\"cm\">case cons.inl</span>\n<span class=\"cm\">α : Type u_1</span>\n<span class=\"cm\">p : α → Prop</span>\n<span class=\"cm\">inst✝ : DecidablePred p</span>\n<span class=\"cm\">as bs : List α</span>\n<span class=\"cm\">a c : α</span>\n<span class=\"cm\">cs : List α</span>\n<span class=\"cm\">ih : a ∈ filter p cs ↔ a ∈ cs ∧ p a</span>\n<span class=\"cm\">h : p c</span>\n<span class=\"cm\">⊢ a = c ∨ a ∈ filter p cs ↔ a ∈ c :: cs ∧ p a</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 242268785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623358174
    },
    {
        "content": "<p><code>simp only [ih]</code> and <code>rw [propext ih]</code> work. funny.</p>",
        "id": 242269959,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1623358687
    },
    {
        "content": "<p>Ah so <code>rw</code> just doesn't know what to do with <code>↔</code> yet.</p>",
        "id": 242270240,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623358820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/rewrite.20failure/near/242270240\">said</a>:</p>\n<blockquote>\n<p>Ah so <code>rw</code> just doesn't know what to do with <code>↔</code> yet.</p>\n</blockquote>\n<p>sometimes it does.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>works</p>",
        "id": 242270407,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1623358905
    },
    {
        "content": "<p>It's just the usual missing instantiateMVars:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/Lean/Meta/Tactic/Rewrite.lean b/src/Lean/Meta/Tactic/Rewrite.lean</span>\n<span class=\"gh\">index f057ee311d..d605f7634c 100644</span>\n<span class=\"gd\">--- a/src/Lean/Meta/Tactic/Rewrite.lean</span>\n<span class=\"gi\">+++ b/src/Lean/Meta/Tactic/Rewrite.lean</span>\n<span class=\"gu\">@@ -20,7 +20,7 @@ def rewrite (mvarId : MVarId) (e : Expr) (heq : Expr)</span>\n     (symm : Bool := false) (occs : Occurrences := Occurrences.all) (mode := TransparencyMode.reducible) : MetaM RewriteResult :=\n   withMVarContext mvarId do\n     checkNotAssigned mvarId `rewrite\n<span class=\"gd\">-    let heqType ← inferType heq</span>\n<span class=\"gi\">+    let heqType ← instantiateMVars (← inferType heq)</span>\n     let (newMVars, binderInfos, heqType) ← forallMetaTelescopeReducing heqType\n     let heq := mkAppN heq newMVars\n     let cont (heq heqType : Expr) : MetaM RewriteResult := do\n</code></pre></div>",
        "id": 242271984,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623359540
    },
    {
        "content": "<p>on an only vaguely related note, I have really come to love the fact that even when the meta programs are buggy, it doesn't cause soundness bugs. Given how much compiler magic is going on, having to trust the meta programs would make feel quite uneasy by now ;-)</p>",
        "id": 242272566,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623359814
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/524\">https://github.com/leanprover/lean4/pull/524</a></p>",
        "id": 242312897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623398772
    }
]