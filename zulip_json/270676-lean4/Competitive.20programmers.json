[
    {
        "content": "<p>More <a href=\"https://usaco.guide/general/intro-cp?lang=cpp\">competitive programmers</a> are becoming interested in formal verification. Are there any competitive programmers in this community besides me and Reid Barton?</p>\n<p>If 1000000007 and 998244353 look familiar to you, you are a competitive programmer.</p>",
        "id": 287809233,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656480805
    },
    {
        "content": "<p>Surely Leo is the most competitive programmer of them all</p>",
        "id": 287817377,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656488426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"511228\">@Huỳnh Trần Khanh</span> I dabble from time to time, mostly to learn algorithms :) Obligatory link to algorithms collection (in C++): <a href=\"https://github.com/bollu/w/tree/master/algo\">https://github.com/bollu/w/tree/master/algo</a></p>\n<p>Does any online judge support Lean4?</p>",
        "id": 287846806,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1656506694
    },
    {
        "content": "<p><a href=\"https://www.codewars.com\">Codewars</a> supports Lean 3.39.1 at the moment, but it's possible to support Lean 4 given enough support from the community</p>",
        "id": 287847044,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1656506801
    },
    {
        "content": "<p>Welcome back <span class=\"user-mention\" data-user-id=\"511228\">@Huỳnh Trần Khanh</span>! I've taken part in google codejam pretty much every year for the last decade or so, so I guess that makes me a competitive programmer? I'm pretty sure they don't support Lean though, nor would I want to use it  at the current point in time!</p>",
        "id": 287847339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656506975
    },
    {
        "content": "<p>Are you aware of <a href=\"https://do.proof.in.tum.de/competitions/contest/25\">https://do.proof.in.tum.de/competitions/contest/25</a>?</p>",
        "id": 287847709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656507145
    },
    {
        "content": "<p>I used to do ICPC, and IPSC sort of thing once in a while. I'd definitely be curious to see how using lean (4) would be for one of these competitions. It would also be very interesting to collect verified fast Project Euler solutions for Lean 4 at some point, this would simultaneously work out the compiled speed and the mathematics libraries which would be fun.</p>",
        "id": 287860835,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656512456
    },
    {
        "content": "<p>I used to do quite <a href=\"https://cphof.org/profile/icpc:David%20W%C3%A4rn\">a lot</a> of competitive programming. I'm also quite interested by the idea of solving cp problems (or writing a library like KACTL) in Lean 4 -- I would hope that it would allow for better abstractions compared to C++ and that dependent types could help catch some bugs</p>",
        "id": 287927060,
        "sender_full_name": "David Wärn",
        "timestamp": 1656537493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511228\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/Competitive.20programmers/near/287809233\">said</a>:</p>\n<blockquote>\n<p>If 1000000007 and 998244353 look familiar to you, you are a competitive programmer.</p>\n</blockquote>\n<p>Back in my competitive programming days, computers couldn't handle large numbers like these</p>",
        "id": 287964375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656553574
    },
    {
        "content": "<p>Speaking of online judge support, users of uncommon languages usually compile their code to some sort of assembly and then submit the assembly wrapped in a more common language. Is it possible to compile Lean 4 to WASM?</p>",
        "id": 287971646,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656561680
    },
    {
        "content": "<p>If so, you should be able to wrap the WASM code in Node.js</p>",
        "id": 287971664,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656561700
    },
    {
        "content": "<p>I actually think we should market the Lean software to competitive programmers. Competitive programming is mostly about proofs nowadays.</p>\n<p><em>but Lean 4 pretty please</em></p>",
        "id": 287971738,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656561745
    },
    {
        "content": "<p>I once explained to an orange coder how to use Lean. He understood it quickly and he was able to write elegant proofs. I think formal verification is very easy to understand for competitive programmers, as competitive programming uses roughly the same skill set. I might be wrong, but that's my impression</p>",
        "id": 287971884,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656561848
    },
    {
        "content": "<p>A red coder said this:</p>\n<blockquote>\n<p>imagine sau này thi cp mà các bạn code bằng cái đó, và giờ chấm bằng các verify proof</p>\n</blockquote>\n<p>which means</p>\n<blockquote>\n<p>imagine in the future competitive programmers code with proof assistants and submissions are graded by the correctness of the proofs</p>\n</blockquote>\n<p>So there's certainly some interest!</p>",
        "id": 287972066,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656562061
    },
    {
        "content": "<p>I feel like this community places too much emphasis on math research and thus we completely ignore a very big community that also does a lot of proving stuff</p>",
        "id": 287972530,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656562474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511228\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/Competitive.20programmers/near/287972530\">said</a>:</p>\n<blockquote>\n<p>I feel like this community places too much emphasis on math research and thus we completely ignore a very big community that also does a lot of proving stuff</p>\n</blockquote>\n<p>Don't worry, there are many in the community who have non-mathematical interests in Lean! The problem is that, for the moment, mathematics is the most published use case for Lean and thus a lot of the focus (and funding) is found there. If others can find a niche for Lean and exploit it, I am confident the devs would be happy to support it in the future. After all, that is how much of the current strong support for mathematics came about. Mathematicians found Lean when it was in a fledging stage (when it also had experimental features for other formal use cases -- e.g., HoTT -- that did not take off), used it, brought in many new users and much fame, and thus earned the focus of the devs.</p>",
        "id": 287974036,
        "sender_full_name": "Mac",
        "timestamp": 1656564018
    },
    {
        "content": "<p>I'd say that the fact that the Lean community is mostly made of mathematicians as of today due to their own merit. As Mac said, they picked up Lean 3 a few years ago and built this highly professional living ecosystem with responsible maintainers that implement smart processes to allow a healthier growth of mathlib.</p>\n<p>What I am trying to say is that it's not the other way around. If we want to see Lean 4 growing towards programming as well, we, programmers, will need to do our homework too. We need to use, find bugs, help the developers fix them, understand that they have priorities, negotiate design choices, build more libs, accompany the API evolution and understand what changes etc etc. It's a partnership!</p>",
        "id": 288003116,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656583335
    },
    {
        "content": "<p>When you say \"this community focus too much on math research\"... of course! They are the community for the most part. They're doing their job. And they're doing it well as far as I can see.</p>",
        "id": 288003748,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656583679
    },
    {
        "content": "<p>I absolutely agree with what Arthur is saying. Lean has made inroads into the consciousness of mathematicians but this is certainly not because it was intrinsically designed with mathematicians in mind -- far from it! Even in 2019 Leo would freely admit that he did not really know what we were doing or why we were doing it, and he told me very clearly in 2019 or 2020 (I forget exactly when) that he felt it was too early in Lean's lifecycle to start making a gigantic mathematics library. I replied that we were having too much fun to stop. Because we focussed our ideas on stuff which had never been done before in formalisation, when we started having success the community noticed, and when our ideas started appearing in places like Quanta and Nature it became clear that we were doing the right thing. Right now there is a heavy focus by the devs on getting the maths library ported from Lean 3 to Lean 4 but I am absolutely sure that the moment this is done that the math community will take on the job of growing mathematics, leaving the Lean 4 devs to focus on growth in other areas. Lean is definitely not \"a math project\", it just happens to be a project which is playing a role in a minor revolution in the math community. This certainly doesn't stop it playing a role in doing amazing things in other areas :-)</p>",
        "id": 288005939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656584873
    },
    {
        "content": "<p>To add to this I also think that it's absolutely fair Lean 4 is focusing on helping the existing user base move on from the earlier version, it's just what every other good software project should do as well. And in this case the existing user base simply happens to be mathematicians, if it were programmers and mathematicians only got interested in Lean 4 I'm sure the existing large base of programmers that are using lean 3 and want to move on would be the focus.</p>",
        "id": 288006367,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1656585093
    },
    {
        "content": "<p>My philosophy is \"be the change you want to see in the world\" :D</p>",
        "id": 288007638,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656585727
    },
    {
        "content": "<p>I think the easiest thing that we can do is create a verified KACTL equivalent in Lean 4. Hey competitive programmers, who's willing to take the initiative?</p>\n<p>Let's do something small first, and then we can advertise our thing on Codeforces!</p>",
        "id": 288022234,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656593465
    },
    {
        "content": "<p>But first, is Lean 4 a viable imperative language or do I have to write everything in a functional way? Do I have to abuse persistent data structures like in other functional programming languages?</p>",
        "id": 288035215,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656598945
    },
    {
        "content": "<p>What do you mean by \"abuse persistent data structures?\"</p>",
        "id": 288037961,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656599953
    },
    {
        "content": "<p>For example I can't have a real array backed by a contiguous section of memory and I need to use some sort of persistent map</p>",
        "id": 288041381,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656601264
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array#doc\">docs4#Array</a> is a real array backed by a contiguous section of memory</p>",
        "id": 288041546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656601317
    },
    {
        "content": "<p>And if you modify it and there's only one reference to it, it'll be done in-place.</p>",
        "id": 288041636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656601342
    },
    {
        "content": "<p>This is great. So I think we could formalize a Fenwick tree. It's somewhat nontrivial and it's an important data structure in competitive programming.</p>",
        "id": 288042250,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656601606
    },
    {
        "content": "<p>The next thing would be an iterative segment tree. Let's see how we can convince competitive programmers to switch to Lean.</p>",
        "id": 288042329,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656601641
    },
    {
        "content": "<p><a href=\"https://youtu.be/kPaJfAUwViY\">https://youtu.be/kPaJfAUwViY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"kPaJfAUwViY\" href=\"https://youtu.be/kPaJfAUwViY\"><img src=\"https://uploads.zulipusercontent.net/422946ac07c12dc7466b325fc5512db5cd7b0234/68747470733a2f2f692e7974696d672e636f6d2f76692f6b50614a664155775669592f64656661756c742e6a7067\"></a></div>",
        "id": 288042677,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656601782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511228\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/270676-lean4/topic/Competitive.20programmers/near/288042329\">said</a>:</p>\n<blockquote>\n<p>Let's see how we can convince competitive programmers to switch to Lean</p>\n</blockquote>\n<p>They'll need to see advantages <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 288045754,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656603010
    },
    {
        "content": "<p>My impression of competitive programming is that rigorously proving your program is correct is totally at odds with your time constraints, so I doubt the proving capabilities of lean would be of much relevance</p>",
        "id": 288058022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656608472
    },
    {
        "content": "<p>Well if proving helps you spot that you missed an edge case it can definitely be helpful to not fail a submission, especially if you have powerful automation that will only start complaining if something is actually false, but we are a long way from that yet!</p>",
        "id": 288061882,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656610309
    },
    {
        "content": "<p>Something I found to be nice when programming in Lean 4 is that you can prove small invariants here and there to make sure you're not making silly mistakes. Even just stating the invariants of a data structure (even if you end up proving them with <code>sorry</code>) is helpful, since it serves as unambiguous documentation of what needs to be true.</p>\n<p>I think this is similar to how proponents of static typing (like Haskellers) argue that types reduce the incidence of bugs. Even though you're not proving the correctness of the entire program in Haskell, type correctness gives you pervasive small-scale proofs that the program doesn't have basic classes of defects. So, even if you don't prove your entire Lean 4 program is correct with respect to some specification, the additional power in the type system lets you prevent as many types of bugs as you might want. I'd easily believe that some of these in competitive programming would be worth the time cost.</p>",
        "id": 288063495,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656611103
    },
    {
        "content": "<p>To the point of formalized mathematics and the community: I personally only heard about Lean and was drawn to it because of the formalization efforts of math in Lean (and hearing <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>' s talks on that). Only later I've realized that there's a lot of really interesting aspects of it as a programming language on its own. It's a gradual scale between \"mathematicians\" and \"programmers\" (I don't know as which I'd qualify) and proving things about programs vrs mathematical objects is also a shades-of-grey kind of thing, e.g. are graph algorithms math or programming? I think Lean forces mathematicians to think more like programmers, and programmers to think more like mathematicians, and ultimately we all benefit from both!</p>",
        "id": 288072914,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1656615724
    },
    {
        "content": "<p>I have concrete experience that <code>sorry</code> can be used strategically as a TODO item if the type is well specified enough. This is obviously true for theorem proving, but also applies to programming! It opens up a new level of possibilities for less ambiguous collaboration</p>",
        "id": 288077569,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656618055
    },
    {
        "content": "<p>One of the things I've really enjoyed about mathematical collaboration in lean is that you can really precisely say \"this is what we need\".</p>",
        "id": 288079066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656618826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, that is quite interesting! Do you have a few patterns for these small scale proofs that could be worth sharing?</p>",
        "id": 288093550,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1656626497
    },
    {
        "content": "<p>I also find it interesting that both <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mentioned 'collaboration' and that <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> mentioned the gradual scale between \"mathematicians\" and \"programmers\" (btw, I am in the programmers camp, but find the math community around Lean its biggest strength at this point and a huge source of learning for me). Could Lean itself help programmers and mathematicians collaborate better? Maybe that is already part of Lean's vision (one language for proofs and programming)?</p>\n<p>Anyway, after reading a bit about module systems the past week, I can't stop thinking that a better module system could provide additional tools to help this collaboration. One team could create packages with signatures/holes (e.g. declared theorems, just to use the example from earlier messages) and another team that could \"implement\" these holes in other package(s) without recompilation, etc. I am sure the devil is in the details ...</p>",
        "id": 288096367,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1656628097
    },
    {
        "content": "<blockquote>\n<p>My impression of competitive programming is that rigorously proving your program is correct is totally at odds with your time constraints, so I doubt the proving capabilities of lean would be of much relevance</p>\n</blockquote>\n<p>Maybe. But we can't say for sure. Keep in mind that practicing is also very important as well. Even if formal verification is completely infeasible during contests, which I doubt, it's very beneficial to use an interactive theorem prover when practicing. It enforces a mental model where all observations have to be rigorously checked, and you can't just come up with some random solution and hope that it passes the tests. This is literally the reason why a lot of people, including myself in the past, find competitive programming so hard to understand.</p>",
        "id": 288100886,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656631333
    },
    {
        "content": "<p>But anyway, I need a way to compile Lean 4 code to WASM. Can anyone tell me how? I imagine that the code also needs some FFI.</p>",
        "id": 288113635,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1656644183
    }
]