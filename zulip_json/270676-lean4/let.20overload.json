[
    {
        "content": "<p>There's something about this combination of let-shadowing and typeclass resolution that Lean seems to be rejecting, though it's very close (nightly 7-14). Some other testing confirms that this sort of shadowing works with almost any other combination of elements. If the element being returned by if/else doesn't reference p, this works fine. Is this a bridge too far? For clarity, the expectation is that <code>p := Point 1 0</code> in the if-then-else.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p.x</span> <span class=\"bp\">-</span> <span class=\"n\">p.y</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">p.x</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">p</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">(kernel) declaration has metavariables 'Point.compute'</span>\n\n<span class=\"cm\">synthesized type class instance type is not definitionally equal to expected type, synthesized</span>\n<span class=\"cm\">  Nat.decLt p.x (p.x - p.y)</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Decidable (p.x &lt; p.x - p.y)</span>\n<span class=\"cm\">expected</span>\n<span class=\"cm\">  let p : ?m.1960 p✝¹ := ?m.1988 p✝¹;</span>\n<span class=\"cm\">  let p : Point := ?m.1990 p✝¹ p;</span>\n<span class=\"cm\">  Decidable (p.x - p.y &gt; p.x)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 246067128,
        "sender_full_name": "Chris B",
        "timestamp": 1626338719
    },
    {
        "content": "<p>Maybe this variation is more interesting since it's even closer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p.x</span> <span class=\"bp\">-</span> <span class=\"n\">p.y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">p.x</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">p</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">synthesized type class instance type is not definitionally equal to expected type, synthesized</span>\n<span class=\"cm\">  Nat.decLe (p.x - p.y) p.x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Decidable (p.x - p.y ≤ p.x)</span>\n<span class=\"cm\">expected</span>\n<span class=\"cm\">  let p : ?m.1955 p✝¹ := ?m.1983 p✝¹;</span>\n<span class=\"cm\">  let p : Point := ?m.1985 p✝¹ p;</span>\n<span class=\"cm\">  Decidable (p.x - p.y ≤ p.x)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 246067453,
        "sender_full_name": "Chris B",
        "timestamp": 1626338954
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p.x</span> <span class=\"bp\">-</span> <span class=\"n\">p.y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">p.x</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 246086065,
        "sender_full_name": "David Renshaw",
        "timestamp": 1626351879
    },
    {
        "content": "<p>Is all this fixed if you don't over-use p? It's hard to have sympathy with someone who uses p to mean three different things and then something with p in doesn't work</p>",
        "id": 246100929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626358879
    },
    {
        "content": "<p>The shadowing is a red herring, this fails as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">r.x</span> <span class=\"bp\">-</span> <span class=\"n\">r.y</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r.x</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 246101288,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626359024
    },
    {
        "content": "<p>Oh ok!</p>",
        "id": 246101315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626359036
    },
    {
        "content": "<p>Those are both interesting examples, thanks. I guess anything that doesn't make the Point constructor explicit at least once  doesn't given enough information about the metavariables.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q.x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">r.x</span> <span class=\"bp\">-</span> <span class=\"n\">r.y</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r.x</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Point.mk</span> <span class=\"n\">q.x</span> <span class=\"mi\">0</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">r.x</span> <span class=\"bp\">-</span> <span class=\"n\">r.y</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r.x</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Point.mk</span> <span class=\"mi\">1</span> <span class=\"n\">p.y</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">r.x</span> <span class=\"bp\">-</span> <span class=\"n\">r.y</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r.x</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 246110559,
        "sender_full_name": "Chris B",
        "timestamp": 1626362792
    },
    {
        "content": "<p>doesn't <code>{ p with x := 1 }</code> get the type <code>Point</code> because <code>p : Point</code>?</p>",
        "id": 246151019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626381042
    },
    {
        "content": "<p>One would have thought. It's also interesting that the error text suggests that Lean wasn't able to figure out the metavariables, but hovering over each let binding says <code>q</code> and <code>r</code> are unambiguously of type <code>Point</code>.</p>",
        "id": 246153004,
        "sender_full_name": "Chris B",
        "timestamp": 1626382079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Interesting, looks like no:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point2D</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Point3D</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point2D</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Point3D</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246153165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626382145
    },
    {
        "content": "<p>Whoah how does that work</p>",
        "id": 246153319,
        "sender_full_name": "Chris B",
        "timestamp": 1626382209
    },
    {
        "content": "<p>Same as in lean 3 I would guess</p>",
        "id": 246153336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382221
    },
    {
        "content": "<p>still, it should use the original type as a hint if it doesn't have more explicit typing like this</p>",
        "id": 246153391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382250
    },
    {
        "content": "<p>I'm on an old version of Lean 4, but this is what <code>#print q</code> shows for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Point3D</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Point2D</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">src.x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">src.y</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246153467,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626382290
    },
    {
        "content": "<p>it uses the names of the fields to line things up</p>",
        "id": 246153524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382322
    },
    {
        "content": "<p>in mathlib we do this a lot to transfer things between old structures</p>",
        "id": 246153583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382338
    },
    {
        "content": "<p>Does <code>with</code> subsume the <code>...</code> syntax?</p>",
        "id": 246153616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626382361
    },
    {
        "content": "<p>no, it's the other way around</p>",
        "id": 246153630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382370
    },
    {
        "content": "<p><code>..s</code> can have multiple, <code>s with</code> can't</p>",
        "id": 246153662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382385
    },
    {
        "content": "<p>Oh, I meant \"does <code>with</code> replace <code>..</code> in Lean 4\" (even if it doesn't do exactly the same thing)</p>",
        "id": 246153702,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626382417
    },
    {
        "content": "<p>I'm not really sure why the devs didn't go for it but I'm going to have to write it myself in mathlib4 if not</p>",
        "id": 246153705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382419
    },
    {
        "content": "<p>Note that lean 3 structinst has both <code>s with</code> and <code>..s</code></p>",
        "id": 246153821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382463
    },
    {
        "content": "<p>but mathlib style uses only <code>..s</code></p>",
        "id": 246153843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382472
    },
    {
        "content": "<p>the <code>..s</code> was a late lean 3 addition</p>",
        "id": 246153874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382488
    },
    {
        "content": "<p>That's pretty neat, I didn't know you could do that transfer thing. What do you mean by '.. can have multiple'?</p>",
        "id": 246153878,
        "sender_full_name": "Chris B",
        "timestamp": 1626382489
    },
    {
        "content": "<p><code>def foo (a : A) (b : B) (c : C) : D := { a with d := 1, ..b, ..c }</code></p>",
        "id": 246153972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382540
    },
    {
        "content": "<p>Oh I see, thanks.</p>",
        "id": 246154002,
        "sender_full_name": "Chris B",
        "timestamp": 1626382556
    },
    {
        "content": "<p>here <code>D</code> has fields <code>a,b,c,d</code> and <code>A,B,C</code> have one field each</p>",
        "id": 246154057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382565
    },
    {
        "content": "<p>In lean 3 the <code>..s</code> have to go at the end, although I'm not really sure why that syntactic restriction exists</p>",
        "id": 246154165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382629
    },
    {
        "content": "<p>I think it has something to do with the order in which fields are replaced</p>",
        "id": 246154224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382658
    },
    {
        "content": "<p>lean 4 finishes parsing before starting elaboration so I think that wouldn't be an issue</p>",
        "id": 246154330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382697
    },
    {
        "content": "<p>Personally, I think that <code>a with</code> should be restricted to non-type-changing struct update and leave that for the splay args</p>",
        "id": 246154483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382774
    },
    {
        "content": "<p>the restriction to only one <code>with</code> argument makes more sense in that context</p>",
        "id": 246154619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626382810
    },
    {
        "content": "<p>There's other syntax available for specifying the type of a \"structure instance\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Point.compute</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p.x</span> <span class=\"bp\">-</span> <span class=\"n\">p.y</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">p.x</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>Found this by reading through <a href=\"https://github.com/leanprover/lean4/blob/7dc3e72bcb079f552fdce5aa5657ace9857283e2/stage0/src/Lean/Elab/StructInst.lean\">https://github.com/leanprover/lean4/blob/7dc3e72bcb079f552fdce5aa5657ace9857283e2/stage0/src/Lean/Elab/StructInst.lean</a></p>",
        "id": 246158731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626384379
    },
    {
        "content": "<p>I also found that you can put <code>..</code> in a structure instance:<code>{ p with y := 0 .. }</code> or <code>{ p with y := 0 .. : Point }</code>.  I wasn't able to figure out whether <code>..</code> did anything, though.</p>",
        "id": 246158915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626384490
    },
    {
        "content": "<p>Oh, <code>..</code> is supposed to indicate that the remaining fields of the struct are implicit -- the \"invalid structure instance <code>with</code> and <code>..</code> cannot be used together\" error message suggests these shouldn't be allowed.</p>",
        "id": 246159469,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626384820
    },
    {
        "content": "<p>The <code>..</code> argument in structinst means the same in lean 4 as it does in lean 3 (yes, you can do <code>{ a := 1, .. }</code>)</p>",
        "id": 246161575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626386153
    },
    {
        "content": "<p>it puts <code>:= _</code> on all remaining unfilled fields</p>",
        "id": 246161624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626386167
    },
    {
        "content": "<p>which is usually an error, but is especially useful in tactic proofs with <code>refine</code></p>",
        "id": 246161643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626386183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/let.20overload/near/246159469\">said</a>:</p>\n<blockquote>\n<p>the \"invalid structure instance <code>with</code> and <code>..</code> cannot be used together\" error message suggests these shouldn't be allowed.</p>\n</blockquote>\n<p>This error message also makes me think that the devs are only considering the same-type use case for <code>s with</code>, because that error message doesn't make sense if you have <code>{ (s:Point2D) with .. : Point3D }</code></p>",
        "id": 246161912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626386372
    },
    {
        "content": "<p>Yes, the Lean 4 structure notation is simpler than the Lean 3 one, which frankly was too complicated to really make robust and maintainable (guess who wrote it <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> ). And it does use the \"source\" type when the expected type is unavailable, which its simpler, non-nominal semantics allow it to do: <a href=\"https://github.com/leanprover/lean4/blob/7dc3e72bcb079f552fdce5aa5657ace9857283e2/stage0/src/Lean/Elab/StructInst.lean#L169-L170\">https://github.com/leanprover/lean4/blob/7dc3e72bcb079f552fdce5aa5657ace9857283e2/stage0/src/Lean/Elab/StructInst.lean#L169-L170</a></p>",
        "id": 246200770,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626426791
    },
    {
        "content": "<p>Do you know why it isn't working here then?</p>",
        "id": 246200979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626426958
    },
    {
        "content": "<p>I think it is also a better fit for the \"new-style structures\" (the only kind of structures in Lean 4): you <em>can</em> set entire subobjects with <code>{ z := ..., toPoint2D := ... }</code>. Having said that, if someone wrote an extended structure command to simulate diamond inheritance, it might also make sense to write an extended structure instance notation that allows multiple, overlapping sources like in Lean 3.</p>",
        "id": 246201114,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626427061
    },
    {
        "content": "<p>I've opened an issue for this at <a href=\"https://github.com/dselsam/mathport/issues/9\">dselsam/mathport#9</a> . That's going to be a requirement for the port</p>",
        "id": 246201209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626427105
    },
    {
        "content": "<p>That said, it's not clear to me to what extent it's possible to actually override all this structure stuff in userland</p>",
        "id": 246201249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626427160
    },
    {
        "content": "<p>I also opened a bunch of issues at <a href=\"https://github.com/dselsam/mathport/issues\">https://github.com/dselsam/mathport/issues</a> to track features of lean 3 that have no obvious analogues in lean 4, which are starting to become more immediate issues as the porting tool matures. Some of this stuff can be implemented in userland (and I encourage anyone who wants to take a shot at them to do so in mathlib4)</p>",
        "id": 246201422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626427311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/let.20overload/near/246200979\">said</a>:</p>\n<blockquote>\n<p>Do you know why it isn't working here then?</p>\n</blockquote>\n<p>It's a more general elaboration order issue I believe. The structure notations are visited first, but are then postponed because the expected type is not available yet. This is correct even if the source type is available since, as <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> showed, the two do not have to be equal. So in order to be deterministic, we should always inspect the expected type first.<br>\nThis postponing creates synthetic metavariables, which typeclass inference later chokes on as shown in the error message. Now the actual issue, I believe, is that this error is considered fatal instead of postponing typeclass inference as well until those metavariables are solved. Thus elaboration fails.</p>",
        "id": 246201975,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626427666
    },
    {
        "content": "<p>Do you have any opinion on removing the type changing / nominal typing behavior of <code>s with</code>? As you point out, lean 4's structures are trying to stick to compositional inheritance, which means that you should be able to use <code>{ toPoint2D := p, z := ... }</code> when extending a structure and reject Kyle's example (where <code>Point2D</code> is not a parent of <code>Point3D</code>)</p>",
        "id": 246202366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626427947
    },
    {
        "content": "<p>Mmh, I would be open to it at least. What would be the advantage, purely to simplify elaboration ordering?</p>",
        "id": 246202679,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1626428221
    },
    {
        "content": "<p>I don't like that it's currently half-assed nominal typing. It should either allow multiple <code>with</code> args or not do the splay thing</p>",
        "id": 246202727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626428276
    },
    {
        "content": "<p>I think, if you take that part out, structure inheritance shouldn't be anything more than composition, except for the fact that you can use <code>field := ...</code> instead of <code>toParent.field := ...</code> in structure instances (and even this seems a little borderline from a rust perspective)</p>",
        "id": 246203013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626428443
    },
    {
        "content": "<p>maybe I'm just arguing against <code>extends</code> altogether <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246203039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626428468
    },
    {
        "content": "<p>well, I'm no stakeholder here since I fully intend to replace it with a full nominal typing <code>structure</code> extension in mathlib, so limitations of lean 4 core structures aren't likely to be an issue for me</p>",
        "id": 246203216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626428592
    },
    {
        "content": "<p>How complicated would it be to change structure instances so that there are splays? Sorry if this has been discussed before -- I'm just curious about the difficulties.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"{\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">atomic</span> <span class=\"o\">(</span><span class=\"n\">termParser</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\" with \"</span><span class=\"o\">))</span>\n          <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">manyIndent</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"o\">((</span><span class=\"n\">structInstFieldAbbrev</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">structInstField</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">structInstSplay</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"s2\">\", \"</span><span class=\"o\">))</span>\n          <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optEllipsis</span>\n          <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span><span class=\"o\">)</span>\n          <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\" }\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">structInstSplay</span> <span class=\"o\">:=</span> <span class=\"s2\">\"..\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span>\n</code></pre></div>\n<p>Then <code>{s with foo}</code> could mean \"update <code>s</code>, don't change the type\" and <code>{..s}</code> could effectively be the nominally typed version.</p>\n<p>Also <code>optEllipsis</code> could probably be rolled into <code>structInstSplay</code>, and an empty splay would mean \"insert holes for the remaining fields\".</p>",
        "id": 246246586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626453079
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/1fd1cdc64b9a968e302ebd34af228b40cc05eb04/Mathlib/Tactic/Spread.lean\">https://github.com/leanprover-community/mathlib4/blob/1fd1cdc64b9a968e302ebd34af228b40cc05eb04/Mathlib/Tactic/Spread.lean</a></p>",
        "id": 246246938,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626453245
    },
    {
        "content": "<blockquote>\n<p>This adds support for structure instance spread syntax.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">instSomething</span> <span class=\"c1\">-- include fields from `instSomething`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">instSomething</span> <span class=\"c1\">-- include fields from `instSomething`</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246246958,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626453255
    },
    {
        "content": "<p>(deleted -- wrong thread)</p>",
        "id": 246254717,
        "sender_full_name": "Mac",
        "timestamp": 1626456957
    }
]