[
    {
        "content": "<p>I want to map a monadic function over an <code>Array</code>, while mutating some additional state. What's the idiomatic way to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">bs.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span>\n    <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">a'</span>\n    <span class=\"n\">return</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">z</span><span class=\"bp\">`</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">mutated</span><span class=\"o\">,</span> <span class=\"n\">only</span> <span class=\"kd\">variables</span> <span class=\"n\">declared</span> <span class=\"n\">using</span> <span class=\"bp\">`</span><span class=\"k\">let</span> <span class=\"n\">mut</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">mutated.</span> <span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">intent</span> <span class=\"n\">to</span> <span class=\"n\">mutate</span> <span class=\"n\">but</span> <span class=\"n\">define</span> <span class=\"bp\">`</span><span class=\"n\">z</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"bp\">`</span><span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"bp\">`</span> <span class=\"n\">instead.</span>\n</code></pre></div>",
        "id": 303548729,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665540183
    },
    {
        "content": "<p>I know how to do it \"the old way\" with <code>StateT</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">StateT</span> <span class=\"n\">α</span> <span class=\"n\">MetaM</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"n\">set</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">StateT.run</span> <span class=\"o\">(</span><span class=\"n\">bs.mapM</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- prints (#[0, 2, 6, 12], 4)</span>\n</code></pre></div>\n<p>(I changed <code>α × Array γ</code> to <code>Array γ × α</code> for convenience here.)</p>",
        "id": 303549679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665541145
    },
    {
        "content": "<p>Is <code>z \\l g</code> what's intended? (z has type <code>\\a</code>)</p>",
        "id": 303549752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665541204
    },
    {
        "content": "<p>Anyway, I got something to work with a for loop</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">gs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">bs</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a'</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span>\n    <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">a'</span>\n    <span class=\"n\">gs</span> <span class=\"o\">:=</span> <span class=\"n\">gs.push</span> <span class=\"n\">g</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 303549814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665541278
    },
    {
        "content": "<p>I encountered identical problem with a similar high order function like  <code>mapM</code> but which cannot be easily replaced with a for loop. </p>\n<p>Is it possible for <code>let mut</code> to introduce the required state monad?</p>",
        "id": 303561156,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665552404
    },
    {
        "content": "<p><code>let mut</code> <em>does</em> introduce the required state monad. The hard part is that <code>do</code> is basically a closed class, the elaborator has to know all the things that are going on in the block and in particular it can't lift its state over arbitrary monadic combinators. It has specific support for bundling and unbundling its state to do the <code>try .. catch</code>, <code>try .. finally</code> and <code>for .. in .. do</code> combinators, which all have specific syntax in the <code>do</code> block.</p>",
        "id": 303580619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563115
    },
    {
        "content": "<p>the usual way you will see this being done in lean 4 is what Adam wrote, just don't use <code>mapM</code> at all and push into an array in a loop</p>",
        "id": 303580841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563214
    },
    {
        "content": "<p>it's not that much worse than what <code>mapM</code> does already; the main optimization it has over pushing in a loop is that the initial array is not <code>#[]</code> but <code>Array.mkEmpty bs.size</code></p>",
        "id": 303581134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665563365
    }
]