[
    {
        "content": "<p>How do i pattern match on actions, since the manual says that it is <code>TODO</code></p>",
        "id": 270489693,
        "sender_full_name": "J. O.",
        "timestamp": 1643853547
    },
    {
        "content": "<p>You are going to have to give more context. What do you mean by \"actions\"?</p>",
        "id": 270493713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856925
    },
    {
        "content": "<p>do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with an example of what you want to write?</p>",
        "id": 270493751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856959
    },
    {
        "content": "<p>The do notation section of the manual introduces \"action\" as a term of art. They define it as function application when the return type is <code>m a</code> for some monad <code>m</code>.</p>",
        "id": 270495169,
        "sender_full_name": "Chris B",
        "timestamp": 1643858278
    },
    {
        "content": "<p>I suspected that might be the meaning, but it would be weird to pattern match on actions in most cases</p>",
        "id": 270495245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858351
    },
    {
        "content": "<p>is this talking about lean 3's <code>do some x &lt;- m | return false, ...</code>?</p>",
        "id": 270495267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858386
    },
    {
        "content": "<p>I think the meaning is this deal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>when <code>thing</code> is of type <code>m α</code>.</p>",
        "id": 270495269,
        "sender_full_name": "Chris B",
        "timestamp": 1643858388
    },
    {
        "content": "<p>Oh yeah there's that too.</p>",
        "id": 270495275,
        "sender_full_name": "Chris B",
        "timestamp": 1643858401
    },
    {
        "content": "<p>For the version you just wrote I don't see what extra sugar is needed</p>",
        "id": 270495324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858436
    },
    {
        "content": "<p>lean 4 does have <code>if let some x &lt;- m then ... else return false</code> already, so I guess this is just about the let-else pattern</p>",
        "id": 270495422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858528
    },
    {
        "content": "<p>You should put those in the manual <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 270495476,
        "sender_full_name": "Chris B",
        "timestamp": 1643858616
    },
    {
        "content": "<p>I gave it a shot. <a href=\"https://github.com/leanprover/lean4/pull/990\">https://github.com/leanprover/lean4/pull/990</a></p>",
        "id": 270498658,
        "sender_full_name": "Chris B",
        "timestamp": 1643861922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20match.20actions/near/270495267\">said</a>:</p>\n<blockquote>\n<p>is this talking about lean 3's <code>do some x &lt;- m | return false, ...</code>?</p>\n</blockquote>\n<p>This works in Lean 4 too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 270528911,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643884803
    }
]