[
    {
        "content": "<p>I want to solve the following with <code>ac_refl</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsAssociative</span> <span class=\"n\">Nat.add</span> <span class=\"n\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_assoc</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsCommutative</span> <span class=\"n\">Nat.add</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_comm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ac_refl</span>\n</code></pre></div>\n<p>which fails. With tracing enabled I see it tries to find IsAssociative for HAdd.hAdd but not for Nat.add.</p>\n<p>To get around this, how to I explicitly unfold typeclass definitions so that it picks up on the Nat.add instance?</p>",
        "id": 289033769,
        "sender_full_name": "ohhaimark",
        "timestamp": 1657362346
    },
    {
        "content": "<p>You shouldn't. For automation purposes it's important to use <code>hAdd</code> as the canonical representative everywhere.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsAssociative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_assoc</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsCommutative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_comm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ac_refl</span>\n</code></pre></div>",
        "id": 289033916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657362598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244748\">ohhaimark</span> has marked this topic as resolved.</p>",
        "id": 289033981,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657362664
    },
    {
        "content": "<p>This looks very nice, but does not cover negation. Is there an extension to handle this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex''</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">m</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ac_refl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ac_refl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 289044365,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1657376645
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 289044477,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1657376796
    }
]