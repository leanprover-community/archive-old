[
    {
        "content": "<p>Thinking this may not be doable in the way that I hope. In an Agda formalization I was able to make an abbreviation between declaring and defining an inductive defintion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SeqForm</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span>\n\n<span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">⁺</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span>\n<span class=\"n\">Value</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">Exp</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Rfoc</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"n\">data</span> <span class=\"n\">Exp</span> <span class=\"bp\">Γ</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span><span class=\"bp\">⁺</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Susp</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">Γ</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>I can get the abbreviation form to work in Lean4 with macros:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SequentForm</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">idPos</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">In</span> <span class=\"o\">(</span><span class=\"n\">susp</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">SequentForm.rfoc</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" ⊢[\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exp</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">SequentForm.rfoc</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">PROP</span> <span class=\"bp\">⁺</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span><span class=\"o\">[</span> <span class=\"n\">A</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>But there's more hygenic macroness than I actually want happening (never thought I'd say that), so I can't do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" ⊢[\"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exp</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">SequentForm.rfoc</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SequentForm</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">idPos</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">In</span> <span class=\"o\">(</span><span class=\"n\">susp</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">-&gt;</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span><span class=\"o\">[</span> <span class=\"n\">A</span> <span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">PROP</span> <span class=\"bp\">⁺</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span><span class=\"o\">[</span> <span class=\"n\">A</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>Any ideas how I could use the abbreviated form (either <code>Value</code> like in Agda or the fancier <code>_ ⊢[ _ ]</code> notation, not picky) in the definition of <code>Exp</code> itself, in Lean?</p>",
        "id": 242344173,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623417880
    },
    {
        "content": "<p>You can disable hygiene. For example, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" |||| \"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">||||</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 242353052,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623421796
    },
    {
        "content": "<p>See also <a href=\"https://github.com/IPDSnelting/tba-2021/blob/bb48d90fcdcae04fd8ce4332a155e9ae74b92356/TBA/While/Semantics.lean#L42-L64\">https://github.com/IPDSnelting/tba-2021/blob/bb48d90fcdcae04fd8ce4332a155e9ae74b92356/TBA/While/Semantics.lean#L42-L64</a> (i.e. we're aware of the limitation and this is our best current workaround)</p>",
        "id": 242358774,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623424248
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ! That workaround seems pretty acceptable. Follow up: is there a way to have a macro like <code>Value x y =&gt; Exp x (something_or_other y)</code>? The notation... notation... seems to like there to be a syntactic indicator between each term.</p>",
        "id": 242422295,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623465433
    },
    {
        "content": "<p>I seem to have immediately run headlong into the next issue, though. In this snippet, the inductive definition is happy if I just include <code>downR</code>, and is happy if I just include <code>idPos</code>, but gives me a syntax error <code>expected '//'</code> if I include both. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\"⊢[\"</span> <span class=\"n\">A</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Exp</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">SequentForm.rfoc</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">Ω</span> <span class=\"s2\">\"⊢\"</span> <span class=\"n\">U</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Exp</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">SequentForm.left</span> <span class=\"o\">(</span><span class=\"n\">ActiveLeft.inversion</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SequentForm</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">idPos</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PROP</span> <span class=\"bp\">⁺</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">In</span> <span class=\"o\">(</span><span class=\"n\">susp</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">-&gt;</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span><span class=\"o\">[</span> <span class=\"n\">A</span> <span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">downR</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">PROP</span> <span class=\"bp\">⁻</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span><span class=\"o\">[</span> <span class=\"n\">down</span> <span class=\"n\">A</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242422771,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623466317
    },
    {
        "content": "<p>(<a href=\"/user_uploads/3121/vLoIMku1CfJKAVDMDasuirSm/Foo.lean\">Full file</a>)</p>",
        "id": 242422813,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623466339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419650\">@Rob Simmons</span>  Your second notation with the \"|\" is just confusing the inductive parser. It works with other symbols instead of <code>|</code>.</p>",
        "id": 242423589,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623467624
    },
    {
        "content": "<p>ohhhh roger thank you</p>",
        "id": 242445722,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623498048
    }
]