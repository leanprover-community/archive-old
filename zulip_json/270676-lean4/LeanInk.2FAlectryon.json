[
    {
        "content": "<p>That the state on <code>&lt;;&gt;</code> is different from that on the preceding tactic should be considered a bug in Lean 4 itself. If we fix it, LeanInk should automatically remove the bubble in front of the operator.</p>",
        "id": 276613732,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648212718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Metaprogramming.20tutorial/near/276612016\">said</a>:</p>\n<blockquote>\n<p>maybe a green-colour bubble is good to signal that it's not got any state information?</p>\n</blockquote>\n<p>That's a nice idea, though it would need an Alectryon extension</p>",
        "id": 276613808,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648212739
    },
    {
        "content": "<p>Can we move the Alectryon/LeanInk discussion to another thread? I think it deserves it.<br>\nAnother issue that I found is when reading on a smartphone, in which hovering is just impossible (and a big chunk of the screen is taken by a white block that shows nothing)</p>",
        "id": 276614102,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648212900
    },
    {
        "content": "<p>funnily enough, I was just looking to see how easy my idea of green blobs would be, and saw that that is by design, Arthur:<br>\n<a href=\"/user_uploads/3121/rNmcZK-kZ9NS2mjxoF4flAN8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rNmcZK-kZ9NS2mjxoF4flAN8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rNmcZK-kZ9NS2mjxoF4flAN8/image.png\"></a></div>",
        "id": 276614245,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648212967
    },
    {
        "content": "<p>Note that the Alectryon default style is centered, we chose windowed because it makes better use of wide screens. Definitely not the right default for smartphones though, yes.</p>",
        "id": 276614569,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648213183
    },
    {
        "content": "<p>Not sure <span class=\"user-mention\" data-user-id=\"451040\">@Niklas Bülow</span> considered smartphones when implementing the type hover, I definitely didn't :)</p>",
        "id": 276614866,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648213285
    },
    {
        "content": "<p>I think this was Clément's code, unless the styling was changed in LeanInk</p>",
        "id": 276615010,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648213354
    },
    {
        "content": "<p>The hover code is not new, yes, but it's not an issue for goals since you can just click on them instead. Which is not true for the type hover extension.</p>",
        "id": 276615300,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648213505
    },
    {
        "content": "<p>My concern is that some types of content require different focuses. Being able to see tactic states might be useful when the focus is on the Lean code itself, with the help of the text for the reader to understand the code. This is ideal for teaching, for example.</p>\n<p>Reading books like TPIL4 or the Lean 4 Manual is a very different experience though. Alectryon/LeanInk might feel a bit distracting when the focus is on the text itself and the Lean code blocks play a minimal role and don't really have that much to be shown by the hovering feature</p>",
        "id": 276616213,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648213990
    },
    {
        "content": "<blockquote>\n<p>Note that the Alectryon default style is centered, we chose windowed because it makes better use of wide screens. Definitely not the right default for smartphones though, yes.</p>\n</blockquote>\n<p>The first thing I did when trying it out was to switch back to centered mode.  The windowed version is very distracting because it follows the mouse cursor so it flickers a lot.  And you can't even scroll the right pane because the goal state is gone once you move the mouse there (not that the scrolling works with centered mode).  Apparently you can disable the hovering, but then you can't see the goals at all.</p>\n<p>At least on firefox, the hypotheses have a weird row-wrapping layout, where you can have a small single-hypothesis on the right of a large multi-line hypothesis.  (On chromium, the hypotheses are layed out vertically as expected.  Not sure why this is different.)</p>\n<p>There also seem to be some performance issues.  One of the other files (Formal.html) takes more than 10 seconds to load on my machine (it's also three megabytes large).</p>\n<p>The vertical scrollbar looks like a bug.</p>\n<p>Copy/paste doesn't work (the pasted text contains newlines after every token).  On chromium triple-click doesn't work and only selects a few characters (on firefox it selects the whole line).</p>\n<p>It would be great if it also showed term-mode goals.</p>",
        "id": 276620276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648215826
    },
    {
        "content": "<p>All of the hovers could benefit from a short delay before opening automatically (like the hover in vscode).</p>",
        "id": 276621083,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648216154
    },
    {
        "content": "<p>The type hovers should probably show the full name, and not <code>.plus\n: \n∀ {a b : Expr}, HasType a Ty.nat → HasType b Ty.nat → HasType (plus a b) Ty.nat</code>.  (see also: newlines from copy/paste)</p>",
        "id": 276621460,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648216331
    },
    {
        "content": "<p>This is probably in the works already, but go-to-definition would be very welcome.</p>",
        "id": 276621626,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648216441
    },
    {
        "content": "<p>At least a few in there that we can address directly in LeanInk instead of in Alectryon, yay <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . Though the term goals would likely exacerbate the performance issues. We should probably give the experimental minification flag a try. <a href=\"https://github.com/cpitclaudel/alectryon#reducing-page-and-cache-sizes-experimental\">https://github.com/cpitclaudel/alectryon#reducing-page-and-cache-sizes-experimental</a></p>",
        "id": 276622990,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648216988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Yes, the issues you have described above are quite annoying. I don't know how long it will take to fix them, but it would be great if we could decide on a common format for writing new documentation. It would be great if we could make this decision independently of the system we use to convert our docs into web pages. For tutorial-like examples, I found a <code>.lean</code> file with text in comments way more pleasant to write than a <code>.md</code> file with quoted lean code. When we talked with Clement, he mentioned that he uses some Emacs magic that switches between the two modes. I would love to have that working on our VS Code and Emacs modes. I would also love to have tools that convert the file <a href=\"https://github.com/leanprover/lean4/blob/master/doc/examples/tc.lean\">https://github.com/leanprover/lean4/blob/master/doc/examples/tc.lean</a> into an input file for mdbook, sphynx, and whatever we decide to use to render it. <br>\nAnother possible direction for interacting with the documentation while we read it is VS Code. I think this scenario is very attractive because we cannot only visualize the types and tactic state, but also modify the examples.</p>",
        "id": 276623326,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648217158
    },
    {
        "content": "<p><a href=\"https://github.com/gitpod-io/openvscode-server\">Open VS Code-Server</a> seems like it might be useful along those lines</p>",
        "id": 276629085,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648219622
    },
    {
        "content": "<blockquote>\n<p>but it would be great if we could decide on a common format for writing new documentation. It would be great if we could make this decision independently of the system we use to convert our docs into web pages.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I didn't look at the leanink syntax until now.  The first thing I noticed is that it uses both a new comment syntax <code>/-|</code> as well as a new markup language (reStructuredText), duplicating the <code>/-!</code> syntax with the markdown markup.  Is there a chance we could standardize on one syntax and markup language?</p>\n<p>Note that we need markdown support in leanink/alectryon anyhow to render doc strings (which I assume we want).</p>\n<p>I think we should also standardize the markup with the doc-gen extensions.  (Thinking of latex formulas and links to Lean declarations here.)</p>",
        "id": 276629489,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648219773
    },
    {
        "content": "<blockquote>\n<p>Is there a chance we could standardize on one syntax and markup language?</p>\n</blockquote>\n<p>Yes, of course.  </p>\n<blockquote>\n<p>Note that we need markdown support in leanink/alectryon anyhow to render doc strings (which I assume we want).</p>\n</blockquote>\n<p>Yes, we do.</p>\n<blockquote>\n<p>I think we should also standardize the markup with the doc-gen extensions. (Thinking of latex formulas and links to Lean declarations here.)</p>\n</blockquote>\n<p>Yes, that would be great.</p>",
        "id": 276629790,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648219905
    },
    {
        "content": "<blockquote>\n<p>For tutorial-like examples, I found a .lean file with text in comments way more pleasant to write than a .md file with quoted lean code.</p>\n</blockquote>\n<p>You're not the only one.  All the exercises in Jasmin's course are written in this way (with the text in module doc strings).  The latest version of mathematics in lean also follows this approach.  I think both of them use some preprocessing to separate the master file into lecture notes / exercise files / solutions though.</p>",
        "id": 276629983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648219965
    },
    {
        "content": "<blockquote>\n<p>When we talked with Clement, he mentioned that he uses some Emacs magic that switches between the two modes.</p>\n</blockquote>\n<p>I'm not completely sure what the advantages of this switching are.  We already have syntax highlighting for nested markdown blocks in vscode, and converting the file to markdown won't give us much more than that.  We could add a preview command (like the markdown extension).</p>\n<p>Maybe we can do something more fancy once this lands: <a href=\"https://github.com/microsoft/vscode/issues/85682\">https://github.com/microsoft/vscode/issues/85682</a></p>",
        "id": 276630885,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648220320
    },
    {
        "content": "<p>My thoughts for this in the Lean3 extension for VSCode (that I didn't get around to do) was a spit view, a la Markdown writing/preview. Non-trivial to implement in the VSCode extension, though.</p>",
        "id": 276631282,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648220462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Any suggestions for an initial standard for syntax and markup language?</p>",
        "id": 276632189,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648220764
    },
    {
        "content": "<blockquote>\n<p>Another possible direction for interacting with the documentation while we read it is VS Code. I think this scenario is very attractive because we cannot only visualize the types and tactic state, but also modify the examples.</p>\n</blockquote>\n<p>We have already been moving a bit into that direction with <a href=\"https://github.com/leanprover/vscode-lean4/issues/47\">https://github.com/leanprover/vscode-lean4/issues/47</a>  Integrating the docview with the generated documentation is a good idea.  You get the example source code in one tab, and the rendered documentation in the other tab.</p>\n<p>This would also reduce the need for the (slow and limited) javascript version.  Instead of opening each code snippet in the javascript version, we could open the whole documentation in a gitpod/codespaces container.</p>",
        "id": 276632387,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648220844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanInk.2FAlectryon/near/276630885\">said</a>:</p>\n<blockquote>\n<p>I'm not completely sure what the advantages of this switching are.</p>\n</blockquote>\n<p>Clement mentioned further features of the Markdown major mode such as a navigable document outline. And yes, I did mention we could in theory have the Lean language server report the Markdown document structure :) .</p>",
        "id": 276632533,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648220889
    },
    {
        "content": "<blockquote>\n<p>Any suggestions for an initial standard for syntax and markup language?</p>\n</blockquote>\n<p>I think it would be best to take what we already have.  That is, <code>/-!</code> comments and markdown.</p>",
        "id": 276632780,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648220990
    },
    {
        "content": "<p>I didn't actually know we accepted multiple module docstrings in a file when Niklas started working on Lean 4 support for Alectyron, until it came up in the context of doc-gen4. \"Module docstring\" and \"literate comment\" has slightly different connotations for me, but being able to use both meanings separately in a single file does not seem like an important use case.</p>",
        "id": 276633337,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648221195
    },
    {
        "content": "<p>Practically speaking, mathlib already uses module doc strings as a form of literate programming (in the sense that it interleaves code with explanatory text).  <a href=\"https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#complete-lattice-structure-on-codewith_top-with_bot-%CE%B1code\">https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#complete-lattice-structure-on-codewith_top-with_bot-%CE%B1code</a></p>",
        "id": 276633771,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648221352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanInk.2FAlectryon/near/276633771\">said</a>:</p>\n<blockquote>\n<p>Practically speaking, mathlib already uses module doc strings as a form of literate programming (in the sense that it interleaves code with explanatory text).  <a href=\"https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#complete-lattice-structure-on-codewith_top-with_bot-%CE%B1code\">https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html#complete-lattice-structure-on-codewith_top-with_bot-%CE%B1code</a></p>\n</blockquote>\n<p>Are the <code>/-!</code> comments always being rendered at the top of the page?</p>",
        "id": 276633996,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648221457
    },
    {
        "content": "<p>No, as you can see in the link they are interleaved with the declarations (which appear in the source file order).</p>",
        "id": 276634129,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648221514
    },
    {
        "content": "<p>Nice.</p>",
        "id": 276634272,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648221588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanInk.2FAlectryon/near/276632387\">said</a>:</p>\n<blockquote>\n<p>This would also reduce the need for the (slow and limited) javascript version.  Instead of opening each code snippet in the javascript version, we could open the whole documentation in a gitpod/codespaces container.</p>\n</blockquote>\n<p>Would someone need a gitpod/codespaces subscription to access it?</p>",
        "id": 276635209,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648221945
    },
    {
        "content": "<p>I think gitpod has a free tier which should be enough for casual users.  As far as I know, code spaces is still in semi-private beta.</p>",
        "id": 276635370,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648222003
    },
    {
        "content": "<p>Gitpod spun off their browser-based VS Code into an open source project.</p>",
        "id": 276635444,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648222040
    },
    {
        "content": "<p>Would a self-hosted playground-style server with this as the frontend be feasible? It seems like it would be lower friction for curious users.</p>",
        "id": 276636534,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648222446
    },
    {
        "content": "<p>Yes, the purpose of having a hosted vscode version is to lower friction. You can always clone the repo yourself and run it on your local vscode.  The target audience is precisely those users who want to know more about Lean, but don't want to bother with a local installation.</p>",
        "id": 276641076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648224241
    },
    {
        "content": "<p>I'm not sure if we can handle more users with a self hosted version than with the free tier though.</p>",
        "id": 276641271,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1648224315
    }
]