[
    {
        "content": "<p>Along the lines of <a href=\"#narrow/stream/270676-lean4/topic/Hashable.20Subtype\">Hashable Subtype</a>, does anyone see any problems with this?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">BEq.beq</span> <span class=\"n\">a₁.val</span> <span class=\"n\">a₂.val</span>\n</code></pre></div>",
        "id": 296593438,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662041226
    },
    {
        "content": "<p>(wrong topic, sorry)</p>",
        "id": 296603770,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1662044245
    },
    {
        "content": "<p>The only issue I see is the potential diamond with these instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 296621714,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662047087
    },
    {
        "content": "<p>ugh, that seems like something we are going to have to deal with eventually by adding <code>beq</code> as a field in <code>DecidableEq</code></p>",
        "id": 296639814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662047284
    },
    {
        "content": "<p>either that or don't have the <code>[DecidableEq α] : BEq α</code> instance</p>",
        "id": 296639922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662047319
    },
    {
        "content": "<p>Dropping this instance is painful.  Everything uses <code>BEq</code> these days, <code>List.contains</code>, <code>Array.indexOf?</code>, you name it.</p>",
        "id": 296643590,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662047598
    },
    {
        "content": "<p>I guess we want <code>DecidableEq</code> to just be the same as <code>LawfulBEq</code> then</p>",
        "id": 296643821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662047665
    },
    {
        "content": "<p>Bingo!  And we can also drop all of the compiler hacks that identify <code>Decidable</code> and <code>Bool</code> under the hood.</p>",
        "id": 296643907,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662047690
    },
    {
        "content": "<p>Well, we still need that for other decidable things</p>",
        "id": 296646363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662047731
    },
    {
        "content": "<p>Well, obviously <code>Decidable</code> should be defined like this as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">decide</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">decide_iff</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 296646775,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662047869
    },
    {
        "content": "<p>Oh, also with a slight change to the equality instance for bool we could make <code>example (b : Bool) : decide b = b := rfl</code> work</p>",
        "id": 296649164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662048609
    },
    {
        "content": "<p>Or with a change to the <code>Bool</code>-to-<code>Prop</code> coercion (coercing to <code>true = b</code> instead of <code>b = true</code>).  I like the approach that Sebastian brought forward a while back of having a <code>Bool.toProp</code> function (forgot about the details), which would mostly hide this implementation detail (of which way the equation is oriented).</p>",
        "id": 296650626,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662049080
    },
    {
        "content": "<p><code>b = true</code> is good for rewrites though</p>",
        "id": 296650727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662049102
    },
    {
        "content": "<p><code>Bool.toProp</code> would be more in line with the lean 3 way I think</p>",
        "id": 296650841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662049147
    },
    {
        "content": "<p>Although it's really awful for pretty-printing.  We don't want to show all <code>b = true</code> terms as <code>↑ b</code> or even <code>b</code>.  But we could unconditionally hide <code>Bool.toProp b</code>.</p>",
        "id": 296650942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662049185
    },
    {
        "content": "<p>heh, this will break some recent simp lemmas I wrote that use <code>b</code> instead of <code>b = true</code></p>",
        "id": 296651177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662049249
    },
    {
        "content": "<p>well, maybe not if it's reducible</p>",
        "id": 296651250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662049278
    },
    {
        "content": "<p>Either reducible, or with an extra simp lemma <code>b → b = true</code>.</p>",
        "id": 296652768,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662049784
    },
    {
        "content": "<p>the second option wouldn't work if your simp lemma itself is of type <code>@[simp] theorem foo : toProp ... := ...</code></p>",
        "id": 296653034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662049859
    },
    {
        "content": "<p>but I'm also okay with declaring these as illegal simp lemmas and require writing them as <code>b = true</code></p>",
        "id": 296653210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662049916
    },
    {
        "content": "<p><code>simp only [foo, eq_true_of_toProp]</code> would still work.  The extra lemma is conditional.</p>",
        "id": 296653296,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662049928
    },
    {
        "content": "<p>Oh, and looping..</p>",
        "id": 296653366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662049952
    }
]