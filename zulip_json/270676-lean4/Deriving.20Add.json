[
    {
        "content": "<p>I would like to derive <code>Add</code> for any structure that has elements equipped with <code>Add</code>. My ultimate goal is to automatically derive that a structure is a vector space if all its elements form a vectors space. What is the best way to approach this?</p>",
        "id": 303705115,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665602041
    },
    {
        "content": "<p>My attempt at registering new <code>deriving Add</code> but it does not seem to do anything </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Inductive</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Util</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Deriving</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Command</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkAddHandler</span> <span class=\"o\">(</span><span class=\"n\">declNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">declNames.allM</span> <span class=\"n\">isInductive</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">declNames.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Calling Add Handler!\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n<span class=\"n\">builtin_initialize</span>\n  <span class=\"n\">registerDerivingHandler</span> <span class=\"bp\">``</span><span class=\"n\">Add</span> <span class=\"n\">mkAddHandler</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Float2</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Add</span>\n</code></pre></div>",
        "id": 303705383,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665602137
    },
    {
        "content": "<p>you should use <code>initialize</code> instead of <code>builtin_initialize</code>, and you should put <code>Float2</code> in another file</p>",
        "id": 303706193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665602443
    },
    {
        "content": "<p>Ahh it is being registered correctly now! Thanks!</p>",
        "id": 303707187,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665602864
    },
    {
        "content": "<p>If anyone is interested here is the solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Deriving.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mkAddInstanceCmd</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"s2\">\"command\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">match</span> <span class=\"n\">getStructureInfo</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">xName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"x\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">yName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"y\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"s2\">\"term\"</span> <span class=\"bp\">←</span> <span class=\"n\">info.fieldNames.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">xName.append</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">yName.append</span> <span class=\"n\">name</span><span class=\"o\">))))</span>\n    <span class=\"k\">let</span> <span class=\"n\">addFun</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"s2\">\"term\"</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">xName</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">yName</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">declName.append</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">addFun</span><span class=\"o\">⟩)</span>\n    <span class=\"n\">return</span> <span class=\"n\">cmd</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">default</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">mkAddHandler</span> <span class=\"o\">(</span><span class=\"n\">declNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">declNames.allM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">isStructure</span> <span class=\"n\">env</span> <span class=\"n\">name</span><span class=\"o\">)))</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">declNames.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">declNames.forM</span> <span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkAddInstanceCmd</span> <span class=\"n\">name</span>\n      <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n    <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n<span class=\"n\">initialize</span>\n  <span class=\"n\">registerDerivingHandler</span> <span class=\"bp\">``</span><span class=\"n\">Add</span> <span class=\"n\">mkAddHandler</span>\n</code></pre></div>\n<p>It works but I'm really not sure if I got the macro hygiene correct. Creating names and identifiers is still a bit of a mystery to me.</p>",
        "id": 303715739,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665606229
    },
    {
        "content": "<p>macro hygiene is generally as simple as using identifiers directly in the syntax quotation</p>",
        "id": 303715900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665606294
    },
    {
        "content": "<p>what you are doing is manually creating unhygienic identifiers</p>",
        "id": 303715978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665606322
    },
    {
        "content": "<p>That was my suspicion that the arguments <code>x</code> and <code>y</code> in the lambda are not hygienic. But I wasnt sure how can I create the array <code>args</code> e.g. <code>#[(x.x + y.x), (x.y + y.y)]</code></p>",
        "id": 303716362,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665606475
    },
    {
        "content": "<p>This works, but not sure if it is the intended way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"s2\">\"ident\"</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"s2\">\"ident\"</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"s2\">\"term\"</span> <span class=\"bp\">←</span> <span class=\"n\">info.fieldNames.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span> <span class=\"bp\">$</span><span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y.</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">))))</span>\n    <span class=\"k\">let</span> <span class=\"n\">addFun</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"s2\">\"term\"</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">declName.append</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 303716715,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665606604
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mkAddInstanceCmd</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"s2\">\"command\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">match</span> <span class=\"n\">getStructureInfo</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mk</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getStructureCtor</span> <span class=\"n\">env</span> <span class=\"n\">declName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">name</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"n\">info.fieldNames.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y.</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">)))</span>\n    <span class=\"k\">let</span> <span class=\"n\">addFun</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">mk</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">addFun</span><span class=\"o\">⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">default</span>\n</code></pre></div>",
        "id": 303717131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665606753
    },
    {
        "content": "<p>Interesting, I thought that this way the <code>x</code> and <code>y</code> would end up being different identifiers in <code>args</code> and <code>addFun</code>.</p>",
        "id": 303717420,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665606867
    },
    {
        "content": "<p>the identifiers depend on the current \"macro scope\", which is a ReaderT argument so it can't change unless you use a combinator like <code>withFreshMacroScope</code></p>",
        "id": 303717558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665606922
    },
    {
        "content": "<p>it gets incremented when you call back into the macro system or do one step of macro expansion</p>",
        "id": 303717686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665606969
    },
    {
        "content": "<p>and you can also use that function directly if you want lots of variables</p>",
        "id": 303717728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665606996
    },
    {
        "content": "<p>The <code> (mkIdent mk) $args*</code> still isn't quite correct because the constructor could have implicit arguments. It's probably better to use a structure literal</p>",
        "id": 303717992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665607108
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">fields</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">info.fieldNames.map</span> <span class=\"n\">mkIdent</span>\n    <span class=\"k\">let</span> <span class=\"n\">fields1</span> <span class=\"o\">:=</span> <span class=\"n\">fields</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">fields2</span> <span class=\"o\">:=</span> <span class=\"n\">fields</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">fields</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"n\">fields1</span> <span class=\"bp\">+</span> <span class=\"n\">y.</span><span class=\"bp\">$</span><span class=\"n\">fields2</span><span class=\"o\">]</span><span class=\"bp\">*</span>\n    <span class=\"o\">}⟩)</span>\n</code></pre></div>",
        "id": 303718452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665607321
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> any particular reason that you can't reuse variables in a syntax quotation?</p>",
        "id": 303718562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665607366
    },
    {
        "content": "<p>No particular reason, just an edge case in the implementation</p>",
        "id": 303719809,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665607847
    },
    {
        "content": "<p>ooh, if you use <code>$(id fields)</code> you get an even weirder error</p>",
        "id": 303720384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665608076
    },
    {
        "content": "<p>I would like to generalize it to user specified binary operation, but for <code>className := ``Add</code> and <code>opName := ``Add.add</code>, this breaks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">fields</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">info.fieldNames.map</span> <span class=\"n\">mkIdent</span>\n    <span class=\"k\">let</span> <span class=\"n\">fields1</span> <span class=\"o\">:=</span> <span class=\"n\">fields</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">fields2</span> <span class=\"o\">:=</span> <span class=\"n\">fields</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">className</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">fields</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">opName</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"n\">fields1</span> <span class=\"n\">y.</span><span class=\"bp\">$</span><span class=\"n\">fields2</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">}⟩)</span>\n</code></pre></div>",
        "id": 303720575,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665608156
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> I guess the implementation isn't that great at mixing variables with different repetitions. You can still do the original thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">className</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">Add</span>\n    <span class=\"k\">let</span> <span class=\"n\">opName</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">Add.add</span>\n    <span class=\"k\">let</span> <span class=\"n\">fields</span> <span class=\"bp\">←</span> <span class=\"n\">info.fieldNames.map</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">field</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.Parser.Term.structInstField</span><span class=\"bp\">|</span>\n        <span class=\"bp\">$</span><span class=\"n\">field</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">opName</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"n\">field</span> <span class=\"n\">y.</span><span class=\"bp\">$</span><span class=\"n\">field</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">className</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">fields</span><span class=\"bp\">*</span> <span class=\"o\">}⟩)</span>\n</code></pre></div>",
        "id": 303721318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665608502
    },
    {
        "content": "<p>Unfortunately this totally fails for parameterized structures such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pair2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Add</span>\n</code></pre></div>",
        "id": 303725289,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665610471
    },
    {
        "content": "<p>Horray, I can do it even for parameterized structures! I could not figure it out by manipulating <code>Syntax</code> so I had to get my hands dirty and manipulate <code>Expr</code> directly and create <code>Declaration</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mkBinaryOpInstance</span> <span class=\"o\">(</span><span class=\"n\">className</span> <span class=\"n\">opName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">match</span> <span class=\"n\">getStructureInfo</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{info.structName}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">structType</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">info.structName</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">instValue</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.forallTelescope</span> <span class=\"n\">structType</span> <span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">strct</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkAppOptM</span> <span class=\"n\">info.structName</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">some</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">binOp</span> <span class=\"bp\">←</span>\n        <span class=\"n\">Meta.withLocalDecl</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">default</span> <span class=\"n\">strct</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Meta.withLocalDecl</span> <span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"n\">default</span> <span class=\"n\">strct</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">do</span>\n           <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fields</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n           <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">info.fieldNames.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n             <span class=\"n\">fields</span> <span class=\"o\">:=</span> <span class=\"n\">fields.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.mkAppM</span> <span class=\"n\">opName</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x.proj</span> <span class=\"n\">info.structName</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">y.proj</span> <span class=\"n\">info.structName</span> <span class=\"n\">i</span><span class=\"o\">])</span>\n           <span class=\"o\">(</span><span class=\"n\">Meta.mkLambdaFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.mkAppM</span> <span class=\"o\">(</span><span class=\"n\">info.structName.append</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">)</span> <span class=\"n\">fields</span><span class=\"o\">))</span>\n\n      <span class=\"n\">Meta.mkLambdaFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.mkAppM</span> <span class=\"o\">(</span><span class=\"n\">className.append</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">binOp</span><span class=\"o\">])</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">instType</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">instValue</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">instName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"inst{className}{declName}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">instDecl</span> <span class=\"o\">:</span> <span class=\"n\">Declaration</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span>\n      <span class=\"o\">{</span><span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n       <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">abbrev</span><span class=\"o\">,</span>\n       <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span><span class=\"o\">,</span>\n       <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">instType</span><span class=\"o\">,</span>\n       <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">instValue</span><span class=\"o\">,</span>\n       <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">instName</span><span class=\"o\">,</span>\n       <span class=\"o\">}</span>\n    <span class=\"n\">addAndCompile</span> <span class=\"n\">instDecl</span>\n    <span class=\"n\">Attribute.add</span> <span class=\"n\">instName</span> <span class=\"s2\">\"instance\"</span> <span class=\"n\">default</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">default</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">mkBinaryOpHandler</span> <span class=\"o\">(</span><span class=\"n\">className</span> <span class=\"n\">opName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">declNames.allM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">isStructure</span> <span class=\"n\">env</span> <span class=\"n\">name</span><span class=\"o\">)))</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">declNames.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">declNames.forM</span> <span class=\"bp\">λ</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkBinaryOpInstance</span> <span class=\"n\">className</span> <span class=\"n\">opName</span> <span class=\"n\">name</span>\n    <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n<span class=\"n\">initialize</span>\n  <span class=\"n\">registerDerivingHandler</span> <span class=\"bp\">``</span><span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">mkBinaryOpHandler</span> <span class=\"bp\">``</span><span class=\"n\">Add</span> <span class=\"bp\">``</span><span class=\"n\">Add.add</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 303739450,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1665618982
    }
]