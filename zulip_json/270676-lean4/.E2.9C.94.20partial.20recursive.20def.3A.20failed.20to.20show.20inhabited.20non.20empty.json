[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 291436797,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659197118
    },
    {
        "content": "<p>Am I reading it correctly that there's no real way to do the same trick with an ad-hoc polymorphic function that returns a monad?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">takeWhileDo</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">℘</span> <span class=\"n\">⅌</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n                                <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">⅌</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mx</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">℘</span><span class=\"o\">)</span>\n                                <span class=\"o\">[</span><span class=\"n\">Coco</span> <span class=\"n\">℘</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Iterable</span> <span class=\"n\">℘</span> <span class=\"n\">⅌</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Terminable</span> <span class=\"n\">f</span> <span class=\"n\">℘</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Terminable</span> <span class=\"n\">f</span> <span class=\"n\">⅌</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Aka</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">⅌</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n                                <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">℘</span> <span class=\"bp\">×</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n</code></pre></div>",
        "id": 291769086,
        "sender_full_name": "cognivore",
        "timestamp": 1659474558
    },
    {
        "content": "<p>Although, now that I'm thinking about it, perhaps I can write an instance that shows that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">℘</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>s</mi></mrow><annotation encoding=\"application/x-tex\"> f,\\ \\wp,\\ s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">℘</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Inhabited</mtext></mrow><annotation encoding=\"application/x-tex\"> \\text{Inhabited} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Inhabited</span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\"> m \\cdots </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> is also inhabited.</p>",
        "id": 291769398,
        "sender_full_name": "cognivore",
        "timestamp": 1659474744
    },
    {
        "content": "<p>Oh, some kind soul did it for me... So adding <code>[Inhabited (f ℘)] [Inhabited s]</code> sufficed. Thank you very much for an explanation, <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>! You're the MVP :)</p>",
        "id": 291769759,
        "sender_full_name": "cognivore",
        "timestamp": 1659474962
    },
    {
        "content": "<p>Note that a monad might be inhabited despite of its wrapped type not being inhabited, for example <code>Option False</code> is Inhabited by <code>none</code> so you might instead want to request an instance <code>Inhabited (m (f ℘ × s))</code> which can be synthesized by both the instance you mentioned or also alternative instances for the specific monad</p>",
        "id": 291770026,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1659475093
    },
    {
        "content": "<p>That's a cool observation. I'm right now facing a problem that my sources <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\"> s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> actually aren't inhabited.</p>",
        "id": 291770366,
        "sender_full_name": "cognivore",
        "timestamp": 1659475282
    },
    {
        "content": "<p>Wow, this observation has just saved me hours. Thank you so much, Henrik!</p>",
        "id": 291770741,
        "sender_full_name": "cognivore",
        "timestamp": 1659475473
    }
]