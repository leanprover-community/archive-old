[
    {
        "content": "<p>Hi all, I'm new to Lean and currently in my first steps learning about it for about a week now.<br>\nI'm new to theorem provers in general and looking more to see what capabilities Lean has around the verification of programs.<br>\nI'm trying to encode the following F* lang example in Lean 4 but I'm having trouble expressing <code>pre</code> and <code>post</code> conditions in the increment function.</p>\n<div class=\"codehilite\" data-code-language=\"FStar\"><pre><span></span><code><span class=\"k\">module</span> <span class=\"nc\">Example</span>\n\n<span class=\"kd\">let</span> <span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"kt\">int</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}):</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"kt\">int</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">=</span>\n    <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">let</span> <span class=\"n\">incrementTest</span> <span class=\"o\">=</span> <span class=\"ne\">assert</span> <span class=\"o\">(</span><span class=\"n\">increment</span> <span class=\"mi\">47</span> <span class=\"o\">=</span> <span class=\"mi\">48</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried several approaches without success to encode <code>Type -&gt; Prop</code> and even followed some threads here where folks where discussing Hoare state monads for something similar but I have not been able to get any results yet.</p>\n<p>Is this kind of analysis possible with Lean 4? My use case is to provide something similar to what we are doing in <a href=\"https://arrow-kt.io/docs/analysis/\">https://arrow-kt.io/docs/analysis/</a> but that instead of using Z3 as backend it uses Lean 4. I'm currently exploring if this is possible and what kind of messages would Lean4 raise when pre/post/invariants are not satisfied.</p>\n<p>thanks for any help or pointers in the right direction :)</p>",
        "id": 323118931,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1674508305
    },
    {
        "content": "<p>The function can look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>where you replace <code>sorry</code> with a proof of <code>x.1 + 1 &gt; x.1</code> which is some basic lemma about inequality and addition, but I do not remember the name now.</p>\n<p>However, with this approach the pre/post invariants are always satisfied, because you have formal proofs of them. Thus running the assert is kind of meaningless.</p>",
        "id": 323122504,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674509807
    },
    {
        "content": "<p>But I can imagine that something like  the F* example can be cooked up.</p>\n<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TypeWithAssert</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assert</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">T</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">increment</span> <span class=\"mi\">47</span><span class=\"o\">)</span> <span class=\"c1\">-- true</span>\n</code></pre></div>\n<p>(I'm on a phone, none of this is tested so it might require some modifications)</p>",
        "id": 323124676,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674510643
    },
    {
        "content": "<p>I'm pretty sure that some custom notation for binders would allow for notation like <code>(x : Int{ x &gt; 0 })</code>. </p>\n<p>One question is if <code>TypeWithAssert</code> should be <code>def</code> or <code>abbrev</code>.</p>",
        "id": 323125040,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674510802
    },
    {
        "content": "<p>It's important to point out that the approach to verification in F⋆ is totally different than in Lean. In F⋆, the condition <code>x+1 &gt; x</code> is checked by Z3, the underlying SMT solver, so you don't have to prove it manually. In Lean you have to do it by filling in the <code>sorry</code>, as Tomas suggested. In Lean the proof is checked by a small, trusted kernel, whereas in F⋆ the Z3 output is trusted. In practice this means that in F⋆ it can often be easier to prove things (it can also be harder when Z3 misbehaves) but any bug in Z3 compromises soundness of the system (in that case the \"proofs\" are not really proofs), whereas in Lean you have to convince the kernel that your desired properties hold but when you do manage that, they are <em>far</em> less likely to be unsound.</p>",
        "id": 323130596,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674513087
    },
    {
        "content": "<p>The <a href=\"https://github.com/ufmg-smite/lean-smt\"><code>lean-smt</code></a> project is aiming to take some of the proofs produced by SMT solvers such as Z3 and convince the Lean kernel that they are correct. This would give the best of both worlds - SMT proves properties automatically but the kernel certifies soundness.</p>",
        "id": 323130825,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674513191
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I got your example to compile with this code but the #eval results returns <code>true</code> for <code>-99</code> which is not bigger than 0. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">TypeWithAssert</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assert</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">T</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">99</span><span class=\"o\">))</span> <span class=\"c1\">-- true</span>\n</code></pre></div>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I'll check out <code>lean-smt</code> looks like it may help with what I'm trying to achieve.</p>",
        "id": 323219885,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1674557949
    },
    {
        "content": "<p>The <code>true</code> is because <code>-98 &gt; -99</code>.</p>",
        "id": 323220711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674558205
    },
    {
        "content": "<p>Ahh yes the assert checks only post condition not the precondition. Maybe the preconditions can be checked in the function body and panic if they are not satisfied. I don't see a way to check preconditions with the assert function as it is right now.</p>",
        "id": 323220934,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674558263
    },
    {
        "content": "<p>Thanks, any idea on how I may encode the check for the pre condition? I tried but not sure how to pull the lambda out of the argument x to evaluate it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">x.P</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">panic</span> <span class=\"s2\">\"x is not &gt; 0\"</span>\n    <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"sc\">'P'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">TypeWithAssert.P'</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">TypeWithAssert</span> <span class=\"n\">Int</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 323223582,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1674559060
    },
    {
        "content": "<p>I think you would just want <code>if assert x then ...</code></p>",
        "id": 323224248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674559244
    },
    {
        "content": "<p>and remove the last <code>x+1</code></p>",
        "id": 323224319,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674559269
    },
    {
        "content": "<p>Thanks! I got it to work with all your recommendations!. Now I'm going to see if I can build something that given the <code>increment</code> function inspects it runs the pre and post conditions and can work with other functions accumulating the failures it finds. Do I need a Monad for this kind of sequential expression and error accumulation or can I do it with some meta programming? Thanks!</p>",
        "id": 323234896,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1674562342
    },
    {
        "content": "<p>Using panic creates an error you can't really recover from.</p>\n<p>You can use error monad and throw exceptions instead of panic. Then you can recover from errors more gracefully.</p>\n<p>I think the approach depends a lot on what are you trying to achieve.</p>",
        "id": 323250190,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674566729
    },
    {
        "content": "<p>I agree with Tomas. More info about your ultimate goal would be helpful. When I saw your first post, I thought that you wanted to kind of reimplement Lean 4 with some specific DSL. But if that's not the journey you're signing up for, then using Lean's OOTB syntax as Tomas did with subtypes is a way out. If you design your API with required proofs as inputs as well as proofs in the output of your functions, then there's no need for <code>assert</code>, since you can trust your implementations by design (as long as Lean's kernel accepts it and your file compiles)</p>",
        "id": 323287996,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674575523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> here is my goal.<br>\nI have code in kotlin, java and scala with refinement annotations with Pre and Post conditions such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Pre</span><span class=\"o\">(</span><span class=\"s2\">\"n &gt; 0\"</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"n\">Post</span><span class=\"o\">(</span><span class=\"s2\">\"result &gt; n\"</span><span class=\"o\">)</span>\n<span class=\"k\">fun</span> <span class=\"n\">increment</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">foo</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"n\">increment</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">compile</span> <span class=\"n\">time</span> <span class=\"n\">error</span> <span class=\"k\">in</span> <span class=\"n\">foreign</span> <span class=\"n\">lang</span> <span class=\"k\">with</span> <span class=\"n\">proper</span> <span class=\"n\">message</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I plan on transpiling kotlin and other langs to a lean encoding that supports pre, post conditions.<br>\nI'm starting with writing examples of this programs in Lean4 and trying to extract for the example above a structure like with info such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n    <span class=\"n\">lineInfo</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"bp\">//</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">unsafe</span> <span class=\"n\">call</span> <span class=\"n\">happens</span>\n    <span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span> <span class=\"bp\">//</span> <span class=\"n\">true</span> <span class=\"n\">or</span> <span class=\"n\">false</span> <span class=\"n\">for</span> <span class=\"n\">failed</span> <span class=\"n\">pre</span> <span class=\"n\">conditions</span> <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"n\">args</span>\n    <span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">//</span> <span class=\"n\">result</span> <span class=\"n\">of</span> <span class=\"n\">post</span> <span class=\"n\">condition</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">result</span>\n    <span class=\"n\">termAnalyzed</span><span class=\"o\">:</span> <span class=\"n\">ident</span> <span class=\"bp\">//</span> <span class=\"n\">terms</span> <span class=\"n\">being</span> <span class=\"n\">subject</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">call</span> <span class=\"k\">in</span> <span class=\"n\">this</span> <span class=\"n\">case</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span> <span class=\"n\">calls</span> <span class=\"bp\">`</span><span class=\"n\">increment</span><span class=\"bp\">`</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Don't care about types mentioned there, they are just examples.</p>\n<p>Another example is detect unsafe calls such as:</p>\n<div class=\"codehilite\" data-code-language=\"Kotlin\"><pre><span></span><code><span class=\"kd\">val</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">emptyList</span><span class=\"p\">().</span><span class=\"na\">get</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Example.kt</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">18</span><span class=\"o\">):</span> <span class=\"n\">pre</span><span class=\"bp\">-</span><span class=\"n\">condition</span> <span class=\"bp\">`</span><span class=\"n\">index</span> <span class=\"n\">within</span> <span class=\"n\">bounds</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">satisfied</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">`</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">unsatisfiable</span> <span class=\"n\">constraint</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">emptyList</span><span class=\"bp\">&lt;</span><span class=\"n\">Int</span><span class=\"bp\">&gt;</span><span class=\"o\">()</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"o\">))</span><span class=\"bp\">`</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"bp\">`</span><span class=\"mi\">2</span><span class=\"bp\">`</span> <span class=\"n\">bound</span> <span class=\"n\">to</span> <span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">index</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">kotlin.collections.List.get</span><span class=\"bp\">`</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"n\">main</span> <span class=\"n\">function</span> <span class=\"n\">body</span>\n</code></pre></div>\n<p>We are already doings this with SMT in arrow-analysis but I would like to bring this to more languages and use a Lean backend to evaluate the predicates.</p>\n<p>I'm also evaluating F* for this same purpose but the smt2 queries F* generates can not really be reasoned about and the error messages do not show properly where it is failing. also my impression so far is that lean is much faster.</p>",
        "id": 323322160,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1674584389
    },
    {
        "content": "<p>Note that lean is not a replacement for an SMT solver. Lean isn't a \"backend\", it is a frontend and makes you ~manually prove all assertions</p>",
        "id": 323322562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674584492
    },
    {
        "content": "<p>so while you can probably translate the statements of these functions including the pre/post conditions, you can't translate the proofs because there are no proofs to be had unless the SMT solver is proof producing (and approximately 0% of SMT solvers are proof producing)</p>",
        "id": 323323320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674584697
    },
    {
        "content": "<blockquote>\n<p>approximately 0% of SMT solvers are proof producing</p>\n</blockquote>\n<p>Perhaps you can argue about whether these outputs are really \"proofs\" (maybe they are not sound or not possible to check or ..) but the major systems Z3 and CVC can both output proofs</p>",
        "id": 323336044,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674588274
    },
    {
        "content": "<p>yes, they are \"proof\" producing</p>",
        "id": 323339357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674589398
    },
    {
        "content": "<p>I don't believe any checker exists for them though so I don't count them as proofs (I don't think it's really possible to develop a proof format without a checker keeping you honest)</p>",
        "id": 323339440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674589427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Translating.20programs.20with.20.60pre.60.20.60post.60.20conditions.20to.20Lean.204.2E/near/323339440\">said</a>:</p>\n<blockquote>\n<p>I don't believe any checker exists for them though so I don't count them as proofs (I don't think it's really possible to develop a proof format without a checker keeping you honest)</p>\n</blockquote>\n<p><a href=\"https://smtcoq.github.io/\">SMTCoq</a> does work as a checker for CVC (and others, but not Z3)</p>",
        "id": 323343321,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1674590735
    }
]