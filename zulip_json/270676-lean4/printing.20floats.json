[
    {
        "content": "<p>I've been meaning to ask this question for a while, but why are <code>Float</code> numbers printed with extra zeros in the right? I always have to clean it up with a function like this before printing floats</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">removeRightmostZeros</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">buff</span> <span class=\"n\">res</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">res.reverse</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"sc\">'0'</span>\n        <span class=\"k\">then</span> <span class=\"n\">aux</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">buff</span> <span class=\"bp\">++</span> <span class=\"n\">res</span><span class=\"o\">))</span> <span class=\"n\">as</span>\n        <span class=\"k\">else</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">buff</span><span class=\"o\">)</span> <span class=\"n\">res</span> <span class=\"n\">as</span>\n  <span class=\"o\">⟨</span><span class=\"n\">aux</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"n\">s.data</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span>                                 <span class=\"c1\">-- 1.400000</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"o\">)</span>                      <span class=\"c1\">-- \"1.400000\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">removeRightmostZeros</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"c1\">-- \"1.4\"</span>\n</code></pre></div>",
        "id": 280704563,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651277840
    },
    {
        "content": "<p>The <code>Float</code> to <code>String</code> is implemented in the runtime </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern</span> <span class=\"s2\">\"C\"</span> <span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_obj_res</span> <span class=\"n\">lean_float_to_string</span><span class=\"o\">(</span><span class=\"n\">double</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">return</span> <span class=\"n\">mk_string</span><span class=\"o\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The function <code>std::to_string</code> is from the C++ standard library. It would be great to replace it with something better.</p>",
        "id": 280705625,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651278804
    },
    {
        "content": "<p>I see, thanks!<br>\nWhat do you mean by \"better\" in this case? Something else besides cleaning these trailing zeros?</p>",
        "id": 280705842,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651279026
    },
    {
        "content": "<p>\"better\" = \"use the same approach used in languages like Haskell or Rust\" :)</p>",
        "id": 280706623,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651279912
    }
]