[
    {
        "content": "<p>For the past few nightlies, I've been hitting the <code>maxHeartbeat</code> limits in some of my code ported from Lean 3. I've been using <code>set_option synthInstance.maxHeartbeats 0</code> and <code>set_option maxHeartbeats 0</code> to disable these limits. After all, I'm current focused on making things work, I'm not yet working on making them efficient. However, I would perhaps prefer setting a reasonably lax limit to detect highly inefficient code early.</p>\n<p>What's a heartbeat? What does it measure? When and how does the count reset?</p>",
        "id": 224610365,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612047513
    },
    {
        "content": "<p>Lean 3 also has heartbeats, they are the unit of \"time\" in <code>set_option timeout</code> and the associated <code>(deterministic) timeout</code> error you sometimes see</p>",
        "id": 224610965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612048530
    },
    {
        "content": "<p>it's an abstraction of the timeout to measure something a bit more... deterministic; I believe it's something like the number of allocations to create new exprs and other objects</p>",
        "id": 224611018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612048580
    },
    {
        "content": "<p>It is similar for Lean 4: it is the number of small object allocations in thousands.</p>",
        "id": 224611364,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612049185
    },
    {
        "content": "<p>Thanks for the quick responses!</p>\n<p>I still wonder when and how does the count reset? Perhaps a better question is what is actually measured against the limit? For example, would breaking up a long proof in lemmas help avoiding the <code>maxHeartbeat</code> limit?</p>",
        "id": 224611692,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612049730
    },
    {
        "content": "<p>Yes, it will help. The counter is reset before each command.</p>",
        "id": 224611828,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612049973
    },
    {
        "content": "<p>Great. By \"command\" do you mean the command syntax category or something more general?</p>",
        "id": 224612230,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1612050653
    },
    {
        "content": "<p>Yes, commands such as <code>def</code>, <code>inductive</code>, <code>theorem</code>, <code>#check</code>, etc.</p>",
        "id": 224612309,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612050832
    },
    {
        "content": "<p>I am having to balance for an elaboration task (sometimes hard) between too few heartbeats allowed causing failures too often and too many filling up RAM. Is it a reasonable heuristic to need 10 KB of RAM for each heartbeat? So if I have 16 GB I can allow a million heartbeats?</p>",
        "id": 309153227,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1668157810
    },
    {
        "content": "<blockquote>\n<p>Is it a reasonable heuristic to need 10 KB of RAM for each heartbeat? So if I have 16 GB I can allow a million heartbeats?</p>\n</blockquote>\n<p>It depends on the program. The heuristic above fails, for example, in programs that</p>\n<ul>\n<li>Allocate and deallocate memory in a loop. A high number of heartbeats, and low memory consumption</li>\n<li>Allocate a few big chunks of memory (e.g., big arrays). A low number of heartbeats, and high memory consumption.</li>\n</ul>",
        "id": 309201697,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1668176553
    }
]