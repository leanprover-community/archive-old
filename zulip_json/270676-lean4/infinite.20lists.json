[
    {
        "content": "<p>I'm trying to represent infinite lists, define <code>map</code> <code>zip</code> and such, and reason about all of that. In case you want to know why I included an explanation below.</p>\n<p>So basically I started with something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sem.Stream</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and experimented for a while with this and other designs.  After some discussion with <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> (thanks to <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>) I wrote this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sem.Stream</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n</code></pre></div>\n<p>so that I can write functions like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Sem.Stream.forever</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stream</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cons</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forever</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But now I want to prove things about such functions, but I cannot <code>unfold</code> or <code>simp</code> them because they are partial.</p>\n<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> told me that I need to look for a different design, but I'm out of ideas. Apparently <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> and/or <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> discussed something similar on the Discord server, which I'm looking for currently.</p>\n<p>But if anyone has a clean way to do infinite lists I'm very interested <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span> </p>\n<h2>Why?</h2>\n<p>I'm trying to understand Functional Reactive Programming through this paper:</p>\n<ul>\n<li><a href=\"http://conal.net/papers/push-pull-frp/push-pull-frp.pdf\">http://conal.net/papers/push-pull-frp/push-pull-frp.pdf</a></li>\n</ul>\n<p>I like the approach <em>via</em> denotational semantics so I'm trying to as much of it as I can in Lean. The author use Haskell, so they can represent event streams as a list of (potentially infinite) lists of time/event pairs. Then they go on to prove several things about event streams with temporal-list merging, for instance that it defines a <code>Monoid</code>.</p>\n<p>And I want to do that too.</p>",
        "id": 280259065,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651000719
    },
    {
        "content": "<p>Lean 3 has a <code>stream</code> type which is encoded as <code>Nat -&gt; α</code><br>\n<a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/data/stream.lean\">https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/data/stream.lean</a><br>\nNot sure whether someone has already ported this file to Lean 4.</p>",
        "id": 280259565,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651000925
    },
    {
        "content": "<p>Yes, <code>Stream</code> is in Lean 4 and my <code>Sem.Stream</code> implement it</p>",
        "id": 280259809,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651001022
    },
    {
        "content": "<p>I was using <code>Stream</code> at first but I failed to prove the properties I wanted because it carries the type of the stream with it, which makes sense</p>\n<p>I was trying to erase that type so that I can see streams as a more <em>logically-pure</em> structure where conducting proof is easier/possible</p>",
        "id": 280259987,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651001096
    },
    {
        "content": "<p>The <code>Stream</code> type in the Lean 4 repo is a different thing. It is a typeclass.</p>",
        "id": 280260026,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651001115
    },
    {
        "content": "<p>Oh my bad I misunderstood (did not read properly)</p>",
        "id": 280260048,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651001127
    },
    {
        "content": "<p>Oh, this looks pretty interesting, thank you for the link!</p>",
        "id": 280260113,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651001157
    },
    {
        "content": "<p>Would there be interest if I was to port this to Lean 4?</p>",
        "id": 280260181,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651001169
    },
    {
        "content": "<p>We're currently using <a href=\"https://github.com/leanprover-community/mathlib4\">Mathlib4</a> as a repository of useful data structures for now, so you can place it there and eventually it might be extracted to a separate <code>Std</code> package</p>",
        "id": 280260582,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651001346
    },
    {
        "content": "<p>Sounds good I'll do my best then!</p>",
        "id": 280260874,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651001461
    },
    {
        "content": "<p>Also worth mentioning that someone is working on building coinductive types in Lean4 (see <a href=\"#narrow/stream/270676-lean4/topic/Coinduction.3F\">this topic</a>), but not sure how far that work is yet</p>",
        "id": 280261130,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1651001577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> FYI since no one mentioned: your <code>Sem.Stream</code> type consists only of finite lists because it's still an inductive type, so your <code>partial def</code> cannot be made into a proper <code>def</code> because it violates the rules of the logic. For example I can prove that <code>Sem.Stream.forever</code> contains a <code>nil</code> subterm even though I can't unfold it (and even though it plainly doesn't if you look at the definition), because this is true for everything in the <code>Sem.Stream</code> type.</p>",
        "id": 280261640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651001850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I do have some understanding of this problem, but thank you for laying it down for me <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span> I come from SMT-based verification (k-induction, Horn clauses...) and I only started ITPs recently, your feedback helps a lot</p>\n<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> 's pointer looks like a much better approach so I'm definitely dropping my previous, terrible, noob approach</p>",
        "id": 280262139,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651002093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/infinite.20lists/near/280259565\">said</a>:</p>\n<blockquote>\n<p>Lean 3 has a <code>stream</code> type which is encoded as <code>Nat -&gt; α</code><br>\n<a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/data/stream.lean\">https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/data/stream.lean</a><br>\nNot sure whether someone has already ported this file to Lean 4.</p>\n</blockquote>\n<p>This file was moved to mathlib (<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/stream/defs.lean\">data.stream.defs</a>, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/stream/init.lean\">data.stream.init</a>), and although it has not yet been ported properly you can read it, like everything else, in lean 4 syntax using the mathlib3port repo (<a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Stream/Defs.lean\">Data.Stream.Defs</a>, <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Stream/Init.lean\">Data.Stream.Init</a>)</p>",
        "id": 280262347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651002205
    },
    {
        "content": "<p>for something as simple as data.stream.defs which has no dependencies, it might just work out of the box</p>",
        "id": 280262542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651002312
    },
    {
        "content": "<p>Great to know, thanks, but I'm still porting it as an exercise!</p>",
        "id": 280263019,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1651002575
    },
    {
        "content": "<p>there are two files there, and I'm guessing the second one is the more interesting one (and I doubt that one works out of the box since it uses <code>tactic.ext</code>)</p>",
        "id": 280266842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651004503
    },
    {
        "content": "<p>So I ended up porting both files as an exercise, meaning <em>before</em> reading the mathlib contribution guidelines. Now that I have read (enough of) them I don't think I have the time and the energy to actually make the contribution, at least not until there is a formatter.</p>\n<p>But maybe this was not for nothing and someone can pick up what I did. Everything compiles fine, it's just a matter of following the guidelines. So here it is:</p>\n<ul>\n<li><a href=\"https://github.com/AdrienChampion/mathlib4/tree/streams/Mathlib/Data/FStream\">https://github.com/AdrienChampion/mathlib4/tree/streams/Mathlib/Data/FStream</a></li>\n</ul>",
        "id": 282588886,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652758566
    },
    {
        "content": "<p>There is a reformatter script in the lean4 repository, in the <code>scripts</code> directory. AFAIK it's experimental, but you can try</p>",
        "id": 282603019,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652773488
    },
    {
        "content": "<p>Thanks, I wasn't aware of this script. I tried it but it mostly fails, I see a lot of \"backtrack exceptions\" and problems in the output. The bits it does format do not seem to follow mathlib's guidelines at all.</p>",
        "id": 282634449,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652791813
    },
    {
        "content": "<p>But maybe I'm just confused about mathlib's contribution guidelines, as most (if not all) of mathlib 4's code I looked at don't follow the guidelines anyway.</p>",
        "id": 282634569,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652791866
    },
    {
        "content": "<p>In any case, this discussion would be more suited to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> so let me move it there</p>",
        "id": 282634784,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652791958
    },
    {
        "content": "<p>What guidelines are you looking at? mathlib for lean 3 has a lot of strict guidelines, but mathlib4 is mostly a testbed and even says \"We're not planning to have any review standards in the mathlib4 repo higher than your average wiki during this experimentation phase.\" in the README</p>",
        "id": 282634861,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652791994
    },
    {
        "content": "<p>Also, if you run the reformat script with <code>lean --run scripts/reformat.lean YourFile.lean</code>, you probably won't get the backtrack exceptions</p>",
        "id": 282634921,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1652792023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/infinite.20lists/near/282634921\">said</a>:</p>\n<blockquote>\n<p>Also, if you run the reformat script with <code>lean --run scripts/reformat.lean YourFile.lean</code>, you probably won't get the backtrack exceptions</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt; lean --run script/reformat.lean ~/repos/mathlib4/clean/Mathlib/Data/FStream/Defs.lean <span class=\"p\">|</span> rg <span class=\"s2\">\"exception\"</span>\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\ncannot print: parenthesize: uncaught backtrack exception\n</code></pre></div>",
        "id": 282635142,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652792123
    },
    {
        "content": "<p>You need to run it with <code>lake build &amp;&amp; lake env lean --run ~/lean4/script/reformat.lean Mathlib/Data/FStream/Defs.lean</code></p>",
        "id": 282635506,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652792223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/infinite.20lists/near/282634861\">said</a>:</p>\n<blockquote>\n<p>What guidelines are you looking at? mathlib for lean 3 has a lot of strict guidelines, but mathlib4 is mostly a testbed and even says \"We're not planning to have any review standards in the mathlib4 repo higher than your average wiki during this experimentation phase.\" in the README</p>\n</blockquote>\n<p>Okay so that's where my confusion was from. I guess I was stressed out at the idea of contributing and jumped straight to mathlib 3 guidelines when I should have paid more attention to the actual readme.</p>\n<p>That's my bad, thank you!</p>",
        "id": 282635512,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652792225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/infinite.20lists/near/282635506\">said</a>:</p>\n<blockquote>\n<p>You need to run it with <code>lake build &amp;&amp; lake env lean --run ~/lean4/script/reformat.lean Mathlib/Data/FStream/Defs.lean</code></p>\n</blockquote>\n<p>Right this works better thanks!</p>",
        "id": 282635882,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652792397
    },
    {
        "content": "<p>The discussion on porting streams and contributing to mathlib4 continues in <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20.60stream.60s.20.28.60Nat.20.E2.86.92.20.CE.B1.60.29\">**mathlib4&gt;Porting <code>stream</code>s (<code>Nat → α</code>)**</a></p>",
        "id": 282638603,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652793589
    }
]