[
    {
        "content": "<p>Is there a reason monads can't be defined for constructors of type <code>Sort u -&gt; Type v</code> instead of <code>Type u -&gt; Type v</code>?</p>\n<p>I tried redefining them over sort, but ended up with a strange error message about default implementations having metavariables. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PBind</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PPure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PFunctor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span>      <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PApplicative</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">PFunctor</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">PPure</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PMonad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">PApplicative</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">PBind</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">PBind.bind</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PPure.pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286819212,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655744135
    },
    {
        "content": "<p>Making a Monad that operates on <code>Prop</code> doesn't seem too useful to me, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>if <code>α</code> is from <code>Prop</code> this cannot be a regular function that eliminates into meaningful data (i.e. <code>Type u</code>) due to proof irrelevance right?</p>",
        "id": 286819557,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655744377
    },
    {
        "content": "<p>I get a unused variable warning on <code>p q : Sort u</code> in <code>bind</code>, that should be a clue</p>",
        "id": 286819654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655744429
    },
    {
        "content": "<p>if you remove them then it compiles</p>",
        "id": 286819666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655744437
    },
    {
        "content": "<p>oh LOL I renamed them and never changed the uses... thanks</p>",
        "id": 286819692,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655744462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Monad.20over.20prop.3F/near/286819557\">said</a>:</p>\n<blockquote>\n<p>if <code>α</code> is from <code>Prop</code> this cannot be a regular function that eliminates into meaningful data (i.e. <code>Type u</code>) due to proof irrelevance right?</p>\n</blockquote>\n<p>Not computationally useful data, no. In my use case I have some computationally useful data (whether a test passed or not) but I'm also carrying proof terms around to make sure I'm actually testing the property I say I'm testing.</p>",
        "id": 286820066,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655744727
    },
    {
        "content": "<p>Oh that's fun yes, I did some work regarding this over here: <a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Testing/SlimCheck\">https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Testing/SlimCheck</a></p>",
        "id": 286820115,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655744764
    },
    {
        "content": "<p>Yes, exactly that! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 286820321,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655744881
    },
    {
        "content": "<p>After fixing the typo mario pointed out, it seems like everything is working fine. So now I'm wondering why <code>Monad</code> in the prelude isn't defined for type constructors on Prop (<span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>  ?)</p>\n<p>It'd be nice to be able to use <code>do</code> notation on my structure.</p>\n<p>Drop in replacement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Hidden</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span>      <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n  <span class=\"n\">mapConst</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Function.comp</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Function.const</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">seq</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SeqLeft</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">seqLeft</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SeqRight</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">seqRight</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Functor</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">Pure</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">Seq</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">SeqLeft</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">SeqRight</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span>      <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Seq.seq</span> <span class=\"o\">(</span><span class=\"n\">Pure.pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"n\">seqLeft</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Seq.seq</span> <span class=\"o\">(</span><span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"n\">Function.const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"n\">seqRight</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Seq.seq</span> <span class=\"o\">(</span><span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"n\">Function.const</span> <span class=\"n\">_</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Applicative</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Bind</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span>      <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Bind.bind</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pure.pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">seq</span>      <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Bind.bind</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor.map</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n  <span class=\"n\">seqLeft</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Bind.bind</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bind.bind</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">())</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Pure.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">seqRight</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Bind.bind</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 286820633,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655745067
    },
    {
        "content": "<p>I don't see an issue with this generalization on its own, although I have significant doubts about its usefulness</p>",
        "id": 286822598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655746426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> </p>\n<blockquote>\n<p>So now I'm wondering why Monad in the prelude isn't defined for type constructors on Prop (@Leonardo de Moura ?</p>\n</blockquote>\n<p>As Mario pointed out, it didn't look very useful. BTW, I don't have time to investigate the impact of this change right now.</p>",
        "id": 286847494,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655767369
    },
    {
        "content": "<p>To elaborate more on why it isn't very useful: a monad with type <code>Prop -&gt; Type</code> can <em>only</em> be used to bind propositions. You almost certainly want to be able to bind both propositions and regular types in a do block, but this generalization won't give you that</p>",
        "id": 286849856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655769901
    },
    {
        "content": "<p>the usual trick I use to bind propositions in a do block uses pattern matching and <code>PLift</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkPos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">usesProp</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"mi\">37</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">checkPos</span> <span class=\"n\">n</span>\n  <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 286850089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655770197
    },
    {
        "content": "<p>Ahh, I see</p>",
        "id": 286863693,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1655785024
    }
]