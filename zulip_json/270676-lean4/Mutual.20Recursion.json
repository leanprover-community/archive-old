[
    {
        "content": "<p>Hi, i'm trying to run this code with a mutual recursion but I'm getting a strange error about the tactic assumption </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ident</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>  <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fixpoint</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">boundSubs</span> <span class=\"o\">(</span><span class=\"n\">from_</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">app</span><span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">binder</span><span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">binder</span> <span class=\"bp\">==</span> <span class=\"n\">from_</span>\n      <span class=\"k\">then</span> <span class=\"n\">app</span> <span class=\"n\">binder</span> <span class=\"n\">body</span>\n      <span class=\"k\">else</span> <span class=\"n\">app</span> <span class=\"n\">binder</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">(</span><span class=\"n\">from_</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">from_</span> <span class=\"k\">then</span> <span class=\"n\">to</span> <span class=\"k\">else</span> <span class=\"n\">var</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">zero</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">e</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"n\">cond</span> <span class=\"n\">onZ</span> <span class=\"n\">name</span> <span class=\"n\">onS</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">onCase</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">case</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">onZ</span><span class=\"o\">))</span>\n      <span class=\"n\">boundSubs</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">onCase</span> <span class=\"n\">name</span> <span class=\"n\">onS</span>\n    <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"n\">param</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">boundSubs</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">abs</span> <span class=\"n\">param</span> <span class=\"n\">body</span>\n    <span class=\"bp\">|</span> <span class=\"n\">fixpoint</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">boundSubs</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">fixpoint</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">substitute</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">expr</span>\n  <span class=\"n\">boundSubs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">failed</span><span class=\"o\">,</span>\n<span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"n\">binder</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span>\n<span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">body</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">body</span>\n</code></pre></div>",
        "id": 277927811,
        "sender_full_name": "Chiyoku",
        "timestamp": 1649184979
    },
    {
        "content": "<p>You should be using an old Lean 4 binary.  We have improved the error message. Could you please get the latest nightly build and try again?</p>",
        "id": 277928145,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649185144
    },
    {
        "content": "<p>Note that <code>boundSubs</code> has a recursive <code>substitute</code> application and the argument <code>body</code> is the same one taken by <code>boundSubs</code>. In the well-founded relation you selected, this application is not \"smaller\". You can use a slightly different well-founded relation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span>\n  <span class=\"n\">boundSubs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">substitute</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277928994,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649185481
    },
    {
        "content": "<p>BTW, the <code>termination_by</code> notation names arguments from right to left. So, you don't need all the <code>_</code>s.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span>\n  <span class=\"n\">boundSubs</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">substitute</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277929216,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649185563
    }
]