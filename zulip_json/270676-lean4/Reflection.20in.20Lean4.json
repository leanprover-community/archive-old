[
    {
        "content": "<p>I've noticed that reflection is better in Lean4 and not just the natural number improvements. For example the following expression in Lean3 takes much longer to reduce the more <code>x</code>s I add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But the version in Lean4 takes more or less the same time no matter how many <code>x</code>s there are </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Presumably Lean4 is evaluating <code>x</code> before reducing the <code>let</code>, but Lean3 reduces the <code>let</code> first and has to evaluate <code>x</code> seven times. Lean4 is also smart enough to not evaluate <code>x</code> at all in the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span>\n  <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I was thinking of writing the <code>abel</code> tactic in Lean4 using reflection a bit like the <code>ring2</code> tactic in mathlib in Lean 3. Is it sensible to use reflection a lot more in Lean 4? I can think of ways in which reducing things in the wrong order makes reduction take a lot longer. Has there been a deliberate effort to make reduction a lot faster in Lean 4 and is proof by reflection something we could do a lot more in Lean4 without having to worry some huge blow-up in the time it takes to reduce because the kernel is not unfolding things in the best order like the example in Lean3 above?</p>",
        "id": 248992288,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1628608257
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248992741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628608502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/270676-lean4/topic/Reflection.20in.20Lean4/near/248992288\">said</a>:</p>\n<blockquote>\n<p>I've noticed that reflection is better in Lean4 and not just the natural number improvements. For example the following expression in Lean3 takes much longer to reduce the more <code>x</code>s I add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But the version in Lean4 takes more or less the same time no matter how many <code>x</code>s there are </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Presumably Lean4 is evaluating <code>x</code> before reducing the <code>let</code>, but Lean3 reduces the <code>let</code> first and has to evaluate <code>x</code> seven times. Lean4 is also smart enough to not evaluate <code>x</code> at all in the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"mi\">0</span> <span class=\"gr\">sorry</span>\n  <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I was thinking of writing the <code>abel</code> tactic in Lean4 using reflection a bit like the <code>ring2</code> tactic in mathlib in Lean 3. Is it sensible to use reflection a lot more in Lean 4? I can think of ways in which reducing things in the wrong order makes reduction take a lot longer. Has there been a deliberate effort to make reduction a lot faster in Lean 4 and is proof by reflection something we could do a lot more in Lean4 without having to worry some huge blow-up in the time it takes to reduce because the kernel is not unfolding things in the best order like the example in Lean3 above?</p>\n</blockquote>\n<p>Not exactly answering your question, but FYI Lean4 has support for using the interpreter/compiler for (not as trustworthy) proofs by reflection: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Core.lean#L1012-L1031\">https://github.com/leanprover/lean4/blob/master/src/Init/Core.lean#L1012-L1031</a> I was assuming that Mathlib would not want to use this feature though.</p>",
        "id": 248993324,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1628608802
    },
    {
        "content": "<blockquote>\n<p>FYI Lean4 has support for using the interpreter/compiler for (not as trustworthy) proofs by reflection: ... I was assuming that Mathlib would not want to use this feature though.</p>\n</blockquote>\n<p>This is a decision that we will have to consider once mathlib4 is up and running. It's best to deal with this in the context of a particular proof that benefits greatly from it. But I would guess that this is treated the same as axiom usage reduction: it's okay to use and it's also okay to eliminate the use</p>",
        "id": 248995318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628609765
    }
]