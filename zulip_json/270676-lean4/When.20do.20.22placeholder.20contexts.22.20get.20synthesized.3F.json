[
    {
        "content": "<p>If you wind up with an <code>Expr</code> that  contains <code>.natural</code> metavariables, you get hit with a serious <code>(kernel) declaration has metavariables ...</code> error, as metavariables aren't allowed in the kernel. But if you start with the syntax <code>mkHole stx</code> before elaboration, you get a different error: <code>don't know how to synthesize placeholder context: ...</code> presumably(?) during elaboration.</p>\n<p>My question is: is there any way to have something that behaves like <code>mkHole stx</code> in this regard but which is an <code>Expr</code>? (My expectation was that <code>mkHole stx</code> corresponded to a natural metavariable, but I'm not so sure.) Or, is \"synthesizing placeholder contexts\" exclusively an elaboration-stage activity? (I'm betting on the latter, but thought I'd check!)</p>",
        "id": 308878110,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668029720
    },
    {
        "content": "<p>Ok, after I sent this I realized I should look at the elaboration function for the syntax node kind that <code>mkHole</code> creates, and I figured out how to replicate the <code>don't know how to synthesize placeholder context...</code> behavior:</p>\n<p>After creating the <code>mvar</code> expression with e.g. <code>mkFreshExprMVar</code>, run <code>registerMVarErrorHoleInfo mvar.mvarId! stx</code> (where <code>stx</code> is just whatever syntax originated the hole, i suppose), and it'll treat it as a \"placeholder context\". :)</p>\n<p>I'm still not entirely sure what this really does, though...does it really just change how the error is handled?</p>",
        "id": 308879614,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668030292
    },
    {
        "content": "<p>So just to clarify: there is no such thing as \"synthesizing placeholder contexts\". The error message is \"don't know how to synthesize placeholder\", with a \"context\" hint on the next line.</p>",
        "id": 308880515,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668030627
    },
    {
        "content": "<p>ah! I see! That makes a lot more sense. :) (It all appears inline in VScode, and my infoview is small enough that it appeared like word wrapping, so I couldn't tell.)</p>",
        "id": 308880776,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668030731
    }
]