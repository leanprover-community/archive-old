[
    {
        "content": "<p>What is the equivalent of Haskell's <code>import qualified foo</code>in Lean? This controls the import so that any symbol defined in <code>foo</code> must be access as <code>foo.member</code>.  </p>\n<p>I'd like to import <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Random.lean\"><code>Random.lean</code></a> and write a monad transformer for it that supplies randomness. I'd like to reuse the names <code>randNat</code> and <code>randBool</code> for their monadic variants. Therefore, I'd like to import <code>Init.Data.Random</code> qualified.</p>",
        "id": 256997346,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633912583
    },
    {
        "content": "<p>Not sure about Lean 4 but in Lean 3 namespaces and files are completely independent.</p>",
        "id": 257000010,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633915426
    },
    {
        "content": "<p>But you can hide your definitions into a namespace.</p>",
        "id": 257000071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633915454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/qualified.20imports.3F/near/256997346\">said</a>:</p>\n<blockquote>\n<p>What is the equivalent of Haskell's <code>import qualified foo</code>in Lean? This controls the import so that any symbol defined in <code>foo</code> must be access as <code>foo.member</code>.  </p>\n</blockquote>\n<p>No such mechanism exists -- and might even require radical changes to the Lean core to support. You have to stick the object in a namespace at definition time if you want it to be conditionally openable / qualifiable.</p>",
        "id": 257003185,
        "sender_full_name": "Mac",
        "timestamp": 1633918927
    },
    {
        "content": "<p>I do wish such a feature did / could exist though...</p>",
        "id": 257003256,
        "sender_full_name": "Mac",
        "timestamp": 1633919041
    },
    {
        "content": "<p>Thank you for the explanation :)</p>",
        "id": 257038168,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633945270
    }
]