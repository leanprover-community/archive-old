[
    {
        "content": "<p>On local computer I have “version 4.0.0-nightly-2022-06-29, commit 98b8e300e1ab” installed, where it takes around 30 seconds to typecheck <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Algebra/Category.lean#L380-L393\">these lines</a>. On CI (where always used latest build) <a href=\"https://github.com/forked-from-1kasper/ground_zero/runs/7151692208?check_suite_focus=true\">it falls down</a> with an error <code>(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached</code>. And after update on local machine Lean produces timeout too.<br>\nI don’t have some particular MWE, but similar issues also happen <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Algebra/Transformational.lean#L457-L472\">here</a> and <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Algebra/Group/Limited.lean#L119\">here</a>.<br>\nIn first and seconds examples timeout happens while trying to typecheck some structures. Third examples indirectly uses other big structures (<a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Algebra/Ring.lean#L83-L90\">ring</a>, <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Algebra/Ring.lean#L230-L231\">field</a>, <a href=\"https://github.com/forked-from-1kasper/ground_zero/blob/master/GroundZero/Algebra/Orgraph.lean#L358\">dedekind</a>) too, so it’s probably somehow related.<br>\nI have noticed earlier that structures in Lean 4 are typically slower in typechecking than it was in Lean 3, because I had a similar problem <a href=\"https://github.com/forked-from-1kasper/ground_zero/commit/3912535c8f131008d2b019d7577f4ddd20a8c148\">fixed by replacing typeclasses with nested sigma’s</a>.</p>",
        "id": 288180087,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1656687229
    },
    {
        "content": "<p>Could you please create <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>(s) for these issues? It would help us a lot.</p>",
        "id": 288181842,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656688034
    },
    {
        "content": "<p>So I finally <a href=\"https://gist.github.com/forked-from-1kasper/d07db44447bb69a68aeb0ba63edca548\">created MWE</a>.<br>\nI also noticed that problem disappears (but in this case typechecking takes around 30 seconds too; this is probably longer than it was in Lean 3, but I am not sure) if we replace <code>zeroeqv</code> with <code>axiom zeroeqv {A : Type u} (H : hset A) : 0-Type</code> (or somehow avoid using it). Anyway, there were no such problems in Lean 3.</p>",
        "id": 288196582,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1656693847
    },
    {
        "content": "<p>Thanks for creating the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.<br>\nThe performance issue is due to the new \"eta for structures\" feature. <a href=\"https://github.com/leanprover/lean4/issues/777\">https://github.com/leanprover/lean4/issues/777</a><br>\nOn my machine, the <code>def dual</code> declaration takes 11 secs to elaborate. When I disable the \"eta for structures\", it takes around 0.2 secs.<br>\nI will keep investigating.</p>",
        "id": 288352703,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656890526
    },
    {
        "content": "<p>It also explains the discrepancy with respect to Lean 3. Lean 3 does not implement definitional eta for structures.</p>",
        "id": 288352720,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656890590
    },
    {
        "content": "<p>Pushed a fix for this performance issue. Now, <code>def dual</code> in the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> above takes 0.1 sec to be elaborated on my machine.</p>",
        "id": 288415932,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656944981
    }
]