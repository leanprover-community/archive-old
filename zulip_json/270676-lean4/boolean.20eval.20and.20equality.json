[
    {
        "content": "<p>I have a situation where a Boolean expression quickly evaluates to <code>false</code> but proving this is false by <code>rfl</code> has a timeout because of trying to compute the <code>whnf</code> of the expression. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">eg1Soln.isSat</span>                                                              <span class=\"c1\">-- false</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eg1false</span> <span class=\"o\">:</span> <span class=\"n\">eg1Soln.isSat</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>   <span class=\"c1\">-- timeout</span>\n</code></pre></div>\n<p>I know that <code>whnf</code> of <code>eg1Soln</code> is huge and does timeout for good reason. My question is can I use the information used in <code>eval</code> to prove stuff, i.e., avoid computing the <code>whnf</code> fully to use <code>rfl</code>.  </p>\n<p>The type of <code>eg</code>Soln<code> is an inductive type with two constructors, with </code>eg1Soln.isSat<code> depending only on which constructor was used. This is picked up by </code>eval<code> but unfortunately </code>rfl` tries to fully simplify the expression and times out.</p>\n<p>I also tried using <code>by decide</code>, which again did not use the evaluation.</p>\n<p>Thanks for any help and clarifications.</p>",
        "id": 262805390,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1637938350
    },
    {
        "content": "<p>Can you prove a theorem and rewrite it instead of relying on rfl?</p>",
        "id": 262805810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637938590
    },
    {
        "content": "<p>Not in an obvious way (though I can try this idea).</p>",
        "id": 262806231,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1637938815
    },
    {
        "content": "<p>Unless I work around this issue, or there is a way to use <code>eval</code> (I see from the source that the implementation is unsafe), it seems that <em>something</em> will have to be simplified by using <code>rfl</code> and <code>eg1false</code>above seems as simple as it gets.</p>",
        "id": 262806523,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1637938973
    },
    {
        "content": "<p>There is <a href=\"https://github.com/leanprover/lean4/blob/f45bfaffdf938dd7411398c0bb774ad2e39bc236/src/Init/Core.lean#L1039-L1071\">https://github.com/leanprover/lean4/blob/f45bfaffdf938dd7411398c0bb774ad2e39bc236/src/Init/Core.lean#L1039-L1071</a>, which you can use via the <code>nativeDecide</code> tactic. But from your description, it is not clear to me why <code>rfl</code> has to do exorbitantly more work; it should not need to reduce irrelevant constructor arguments.</p>",
        "id": 262806793,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637939151
    }
]