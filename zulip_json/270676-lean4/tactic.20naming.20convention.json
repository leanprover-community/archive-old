[
    {
        "content": "<p>We are moving forward to make the first Lean 4 official release. One issue is the naming convention for user-facing tactics.<br>\nWe currently have tactics in snake_case (e.g., <code>simp_all</code>) and tactics in camelCase (e.g., <code>rotateLeft</code>). <br>\nSebastian and I decided to use snake_case because <code>simp_all</code> and <code>rotateLeft</code> are keywords of the tactic language, and we have used snake_case for keywords in the rest of the language. Sorry for the inconvenience this change will create.</p>",
        "id": 253596937,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631804777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> By the way, there was a previous discussion about this at <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20casing.20convention\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20casing.20convention</a></p>",
        "id": 253602240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631806812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks for posting it. The discussion seems to be inconclusive there. Any takeaways from your point of view?</p>",
        "id": 253603339,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631807287
    },
    {
        "content": "<p>I think mac summarized the keyword convention perspective well in <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20casing.20convention/near/247636274\">this post</a>: If we think of tactics as keywords (which they technically are) then they should be snake cased, and if we think of them as functions then they should be camel cased. If we go snake case then I will have to update mathport since I had provisionally gone for camel case tactics, but I am mostly neutral on the question. (Snake case also helps avoid some uncomfortable questions about how to capitalize <code>casesM</code> or <code>eRw</code> or other tactics like that from lean 3.)</p>",
        "id": 253603916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631807538
    },
    {
        "content": "<p>Gabriel's point about <code>set_option</code> being consistently cased even if it exists as a tactic also seems persuasive</p>",
        "id": 253604131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631807637
    },
    {
        "content": "<p>Yes, tactics should be regarded as keywords. They're even already highlighted as such :) .</p>",
        "id": 253604249,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631807667
    },
    {
        "content": "<p>ah, if they are highlighted then I guess that settles it</p>",
        "id": 253604337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631807703
    },
    {
        "content": "<p>The semantic highlighting simply highlights every identifier-like <code>Syntax.atom</code> as a keyword</p>",
        "id": 253605943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1631808316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20naming.20convention/near/253604249\">said</a>:</p>\n<blockquote>\n<p>Yes, tactics should be regarded as keywords. They're even already highlighted as such :) .</p>\n</blockquote>\n<p>Honestly, I think there is a little to much blue (i.e., keyword color) in Lean. Unlike most languages where there is a very small set of keywords, Lean's <code>nonReservedSymbol</code> parser and <code>symbol</code> leading behavior create a large set of pseudo-keywords. It would be nice if such pseudo-keywords (e.g., tactics) could have different syntax highlighting in some cases.  For instance, if it was possible to highlight the leading token of a symbol leading behavior category differently. I think the discrimination would be quite pleasant to the eyes. In the short term, it might be worthwhile just to special case <code>tactic</code> for optionally different syntax highlighting.</p>\n<p>Also, the distinction between true Lean keywords, user-defined keywords and pseudo-keywords is important for code in places like GitHub (or other such code presentation tools) which don't have semantic highlighting.</p>\n<p>However, I don't have a particular string opinion on tactics names, and while I do think of tactics more like functions than keywords,  I admit that using snake case for tactics does prevent naming clashes where actual keywords may be interweaved in proofs (like, potentially <code>set_option</code>).</p>",
        "id": 253612612,
        "sender_full_name": "Mac",
        "timestamp": 1631810951
    },
    {
        "content": "<p>I don't think lean should try to make a distinction between keywords and pseudo-keywords. User defined commands and tactics should be just as legitimate as the builtins</p>",
        "id": 253619790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631813766
    },
    {
        "content": "<p>But having a different highlighting class for tactics is reasonable. In LSP you could even do it with a class name that is dynamically generated and depends on the category name, like <code>keyword.control.lean.tactic</code></p>",
        "id": 253620219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631813931
    },
    {
        "content": "<p>that way custom themes can pick up on particular categories and highlight them differently</p>",
        "id": 253620285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631813962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20naming.20convention/near/253619790\">said</a>:</p>\n<blockquote>\n<p>I don't think lean should try to make a distinction between keywords and pseudo-keywords. User defined commands and tactics should be just as legitimate as the builtins</p>\n</blockquote>\n<p>I actually agree with this! I think the fact that user-defined syntax is at the same level as builtin syntax is one of the great features of Lean. However, the fact still remains that they <em>are</em> different at some level and one should sometimes keep that in mind (depending on the application).</p>\n<p>However, yeah, I think your suggestions are great and would love to see them in Lean at some point!</p>",
        "id": 253629559,
        "sender_full_name": "Mac",
        "timestamp": 1631817550
    }
]