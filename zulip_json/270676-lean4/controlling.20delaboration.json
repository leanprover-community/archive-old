[
    {
        "content": "<p>I can define custom syntax via <code>infix</code> like this, and it gets printed back nicely when I do <code>#check</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span> <span class=\"s2\">\" ♫ \"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">LE.le</span>\n<span class=\"k\">#check</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">♫</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 1 ♫ 2 : Prop</span>\n</code></pre></div>\n<p>If I instead define the syntax like this, then it does not get printed back nicely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\" ♫♫ \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♫♫</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">LT.lt</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">♫♫</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- 1 &lt; 2 : Prop</span>\n</code></pre></div>\n<p>What could I add to the second example to make it behave like the first?</p>",
        "id": 240124781,
        "sender_full_name": "David Renshaw",
        "timestamp": 1621897870
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\" ♫♫ \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♫♫</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"n\">LT.lt</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">♫♫</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 1 &lt; 2 : Prop</span>\n\n<span class=\"kd\">@[appUnexpander LT.lt]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandMusic</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LT.lt</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♫♫</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>              <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">♫♫</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 1 ♫♫ 2 : Prop</span>\n</code></pre></div>",
        "id": 240127519,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1621900107
    },
    {
        "content": "<p>Is it possible to do something like that for a <code>structure</code>? It's not working for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\" ♬ \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♬</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">♬</span> <span class=\"mi\">2</span> <span class=\"c1\">-- { x := 1, y := 2 }</span>\n\n<span class=\"kd\">@[appUnexpander Foo]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandFoo</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♬</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">3</span> <span class=\"bp\">♬</span> <span class=\"mi\">4</span> <span class=\"c1\">-- { x := 3, y := 4 }</span>\n</code></pre></div>",
        "id": 240543655,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622157321
    },
    {
        "content": "<p>I managed to make it work with a delaborator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter.Delaborator</span>\n<span class=\"kd\">@[delab app.Foo.mk]</span> <span class=\"kd\">def</span> <span class=\"n\">delabFoo</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">e.getAppNumArgs</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">withAppFn</span> <span class=\"bp\">$</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♬</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">3</span> <span class=\"bp\">♬</span> <span class=\"mi\">4</span> <span class=\"c1\">-- 3 ♬ 4 : Foo</span>\n</code></pre></div>",
        "id": 240545803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622159074
    },
    {
        "content": "<p>Currently, appUnexpanding does not work if a more specialized delaborator applies (in this case, the structure delaborator).</p>",
        "id": 240548437,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1622161436
    },
    {
        "content": "<p>I think users may expect custom unexpanders to take priority over builtin delaborators, so it may be worth addressing. It seems like an easy fix: just fail in these two cases (<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L163-L165\">https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L163-L165</a>) and put it at the end of the list.</p>",
        "id": 240548858,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1622161881
    },
    {
        "content": "<p>It might also make sense to use the first unexpander that works rather than giving up after the first.</p>",
        "id": 240549084,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1622162099
    },
    {
        "content": "<p>Actually, this proposal would introduce a major perf problem unless it caches the <code>delabAppImplicit</code> calls. Probably not worth it.</p>",
        "id": 240555380,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1622169128
    },
    {
        "content": "<p>Not so bad actually <a href=\"https://github.com/dselsam/lean4/tree/unexpand\">https://github.com/dselsam/lean4/tree/unexpand</a></p>",
        "id": 240555616,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1622169450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> Can't we just move the <code>delabAppImplicit</code> call into the <code>some expanders</code> branch? Then I would not be worried about overhead.</p>",
        "id": 240568967,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622186102
    },
    {
        "content": "<p>Assuming that most unexpanders succeed, given that most function applications are saturated</p>",
        "id": 240569269,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622186398
    },
    {
        "content": "<p>How do I go from a value <code>(numLit \"3\") : Syntax</code> to a value <code>3 : Nat</code>?</p>",
        "id": 240671033,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622244302
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\" ♬ \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♬</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter.Delaborator</span>\n<span class=\"kd\">@[delab app.Foo.mk]</span> <span class=\"kd\">def</span> <span class=\"n\">delabFoo</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">e.getAppNumArgs</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">withAppFn</span> <span class=\"bp\">$</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"c1\">-- Doesn't work. Probably need to invoke some kind of parser?</span>\n  <span class=\"c1\">-- do something with x ...</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">♬</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240671045,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622244318
    },
    {
        "content": "<p>Is it a guaranteed literal, or can it be a closed expression that requires evaluation?</p>",
        "id": 240671207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622244519
    },
    {
        "content": "<p>For now I think I only care about the guaranteed literal case.</p>",
        "id": 240671220,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622244550
    },
    {
        "content": "<p>easiest way seems to be <code>a.isNatLit?.get!</code></p>",
        "id": 240671327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622244660
    },
    {
        "content": "<p>How did you look that up? Using code completion in VSCode? (I'm using emacs.)</p>",
        "id": 240671503,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622244867
    },
    {
        "content": "<p>No, grepping the source for useful looking things</p>",
        "id": 240671505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622244880
    },
    {
        "content": "<p>specifically I found <code>numLitKind</code> and looked for references to it</p>",
        "id": 240671526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622244917
    },
    {
        "content": "<p>code completion does work but the list of things you can do to a <code>Syntax</code> is pretty large</p>",
        "id": 240671610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622245045
    },
    {
        "content": "<p>Aha -- apparently <code>Lean.Meta.whnf</code>  lets me handle cases where <code>a</code> is not guaranteed to be a literal</p>",
        "id": 240681263,
        "sender_full_name": "David Renshaw",
        "timestamp": 1622260626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/controlling.20delaboration/near/240568967\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> Can't we just move the <code>delabAppImplicit</code> call into the <code>some expanders</code> branch? Then I would not be worried about overhead.</p>\n</blockquote>\n<p>That might be an acceptable trade-off, but the following would take exponential time to delaborate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[appUnexpander foo]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandFooApp</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">k</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">My.foo</span> <span class=\"bp\">$</span><span class=\"n\">k</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"n\">id</span> <span class=\"mi\">0</span> <span class=\"c1\">-- My.foo id</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span> <span class=\"n\">foo</span> <span class=\"n\">id</span> <span class=\"c1\">-- exp-time</span>\n</code></pre></div>",
        "id": 241956141,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1623173225
    }
]