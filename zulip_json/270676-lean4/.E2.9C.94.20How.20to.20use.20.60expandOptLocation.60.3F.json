[
    {
        "content": "<p>I seem to be missing something fundamental about <code>TSyntax</code>. I want to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo \"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expandOptLocation</span> <span class=\"n\">loc</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Location.targets</span> <span class=\"n\">hyps</span> <span class=\"n\">target</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Location.wildcard</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">expandOptLocation</span> <span class=\"n\">loc</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">loc</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Lean.Syntax</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>What is the correct idiom here? Surely I should be happy that <code>loc</code> has this more detailed type information. But lots of helper functions, like <code>expandOptLocation</code>, just expect a pile of <code>Syntax</code>.</p>",
        "id": 299934580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663760125
    },
    {
        "content": "<p>Yes, that would be the ideal signature of <code>expandOptLocation</code>. Unfortunately, not all code has been ported to <code>TSyntax</code> yet.</p>",
        "id": 299935497,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663760506
    },
    {
        "content": "<p>Ah, okay, I hadn't appreciated that this was a work-in-progress sort of problem. Do we have tools to convert stuff (like this) back to <code>Syntax</code>, to be able to use the existing functions?</p>",
        "id": 299936040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663760693
    },
    {
        "content": "<p>There is an implicit coercion from TSyntax to Syntax. In this case, you can use <code>expandOptLocation (Lean.mkOptionalNode loc)</code>.</p>",
        "id": 299936165,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663760745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> has marked this topic as resolved.</p>",
        "id": 299936998,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663761049
    }
]