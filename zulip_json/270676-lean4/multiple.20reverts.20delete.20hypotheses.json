[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Thing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span> <span class=\"bp\">→</span> <span class=\"n\">ca</span> <span class=\"bp\">=</span> <span class=\"n\">cb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hc</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ca</span> <span class=\"bp\">=</span> <span class=\"n\">cb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">revert</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For this example, the hypothesis <code>Hc</code> is in the tactic state before the <code>revert</code>, and gone after</p>",
        "id": 319709092,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672972077
    },
    {
        "content": "<p>I don't know if the <code>Thing</code> shenanigans are strictly necessary.</p>",
        "id": 319709162,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672972115
    },
    {
        "content": "<p>De-<code>Thing</code>ed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hc</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">revert</span> <span class=\"n\">ca</span> <span class=\"n\">cb</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Same behavior.</p>",
        "id": 319709329,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672972287
    },
    {
        "content": "<p>Also <code>revert ca; revert cb; sorry</code> has the same issues.</p>",
        "id": 319709896,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672972724
    },
    {
        "content": "<p>If you look closely <code>Hc</code> has been reverted as well.</p>",
        "id": 319710178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672972983
    },
    {
        "content": "<p>You can't keep <code>Hc</code> after reverting: it's type depends on <code>ca</code> and <code>cb</code>.  So it either needs to be deleted or reverted.</p>",
        "id": 319710237,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672973029
    },
    {
        "content": "<p>ahh... I see it. and since it's dependent, it has to come after the <code>\\forall</code>s. Thanks!</p>",
        "id": 319711087,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672973698
    }
]