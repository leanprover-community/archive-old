[
    {
        "content": "<p>Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">addComm</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inferAddComm</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">addComm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">iAddNatComm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">addComm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"o\">:=</span> <span class=\"n\">Nat.add_comm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This errors</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">addNatCommZero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n  <span class=\"o\">:=</span> <span class=\"n\">inferAddComm</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type class instance expected</span>\n<span class=\"cm\">  addComm a 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Why does Lean allow you to define instances and specify synthesis binders for things other than type classes if they don't work? I would have expected Lean to error out on <code>[i : addComm a b]</code> and <code>instance ... : addComm a b</code> and inform me that they are invalid because <code>addComm</code> is not a type class. Or is there something I am missing?</p>",
        "id": 236100509,
        "sender_full_name": "Mac",
        "timestamp": 1619391746
    },
    {
        "content": "<p>In Lean 3 <code>class</code> and <code>instance</code> are just attributes that you can tag any definition with, and you can remove those tags too, so I guess it would be quite complicated to do what you're suggesting</p>",
        "id": 236101006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619392317
    },
    {
        "content": "<p>I know that was true in Lean 3, but I'm pretty sure that's not true any more in Lean 4. If I remember correctly from the mathlib porting discussion, you can't tag <code>def</code>s with <code>class</code> anymore. A <code>structure</code> and <code>def</code> are entirely different things now I believe.</p>",
        "id": 236101975,
        "sender_full_name": "Mac",
        "timestamp": 1619393375
    },
    {
        "content": "<p>But can you still tag <code>def</code> with <code>instance</code>?</p>",
        "id": 236102450,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619393878
    },
    {
        "content": "<p>like an <code>local attribute [instance] ...</code></p>",
        "id": 236102490,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619393891
    }
]