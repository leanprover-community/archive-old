[
    {
        "content": "<p>I have encountered one of the strange match equality theorem errors while trying to simplify a definition. Here's a MWE, hopefully annotated with useful leads (the computations make no sense now that it's minimized):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">int</span><span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span><span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"c1\">-- required for error</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tensor</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">int</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tensor</span>\n<span class=\"bp\">|</span> <span class=\"n\">nested</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Tensor</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tensor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasBaseType</span><span class=\"o\">:</span> <span class=\"n\">Tensor</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Ty.int</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Ty.other</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span> <span class=\"c1\">-- Merging Ty.int and Ty.other solves error</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nested</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- Not passing h solves error</span>\n<span class=\"kd\">def</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Tensor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">hasBaseType</span> <span class=\"n\">e</span> <span class=\"n\">τ</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Ty.int</span>     <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span>          <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span> <span class=\"c1\">-- Ty.other rather than wildcard solves error</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nested</span> <span class=\"o\">[],</span> <span class=\"n\">_</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nested</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span> <span class=\"c1\">-- Merging [] and (_::_) solves error</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">flatten_list</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Tensor</span><span class=\"o\">)</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">hasBaseType</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nested</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">τ</span><span class=\"o\">):</span>\n    <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nested</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">τ</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">flatten</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to generate equality theorems for `match` expression `flatten.match_1`</span>\n</code></pre></div>\n<p>I tested on the latest nightly <code>leanprover/lean4:nightly-2022-04-24</code>.</p>",
        "id": 280078935,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1650897692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> Thanks for posting the issue. Could you also post the version that produces errors during match equality theorem generation? I merged the <code>Ty.int</code> and <code>Ty.other</code> cases and it did not trigger the problem.</p>",
        "id": 280081232,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650898714
    },
    {
        "content": "<p>Interesting. The version I posted should, in fact, cause the error; all the notes are for changes that make it go away.</p>",
        "id": 280081531,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1650898813
    },
    {
        "content": "<p>For the record, the error also occurs in <code>lake build</code>, so a VSCode problem seems unlikely.</p>",
        "id": 280081861,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1650898944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> My mistake. I managed to reproduce the problem. Thanks.</p>",
        "id": 280083268,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650899545
    },
    {
        "content": "<p>Pushed a fix for this one <a href=\"https://github.com/leanprover/lean4/commit/6bc5433b17ee269265aab3adad83dbdbbb80f198\">https://github.com/leanprover/lean4/commit/6bc5433b17ee269265aab3adad83dbdbbb80f198</a></p>",
        "id": 280146418,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650931714
    },
    {
        "content": "<p>Thank you very much. The rate at which you put out these fixes is impressive, and much appreciated.</p>",
        "id": 280183464,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1650965589
    }
]