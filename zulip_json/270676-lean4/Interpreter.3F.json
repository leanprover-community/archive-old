[
    {
        "content": "<p>Does Lean 4 have an interpreter?</p>",
        "id": 305259588,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1666312080
    },
    {
        "content": "<p>Since you can #eval executable lean code in your editor yes it does have an interpreter. Specifically it has an interpreter for its lowest level IR.</p>",
        "id": 305288537,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666334159
    },
    {
        "content": "<p><a href=\"http://leanprover.github.io/talks/WITS2022.pdf#page=6\">http://leanprover.github.io/talks/WITS2022.pdf#page=6</a> (essentially true for the new compiler as well)</p>",
        "id": 305298893,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666339351
    },
    {
        "content": "<p>Are there by any chance plans to employ LLVM jit in the future instead of the interpreter? Is the LCNF work a preparation for this or it's general intermediate representation used for optimization purposes and there are no plans for native backends other C?</p>",
        "id": 305653185,
        "sender_full_name": "Super Veridical",
        "timestamp": 1666525530
    },
    {
        "content": "<p>LCNF is meant as a general IR for optimization purposes. One of the last bits of the compiler implemented in C++ right now is the optimizer and that is what the LCNF work is supposed to replace (and enhance). We are planning on writing a translator from LCNF to the current IR for garbage collection as a next step to get rid of the C++ part. At some point after that we will also replace the C backend with a LLVM one and at that point we could very much think about using the LLVM JIT for such stuff I assume? Though we haven't talked about that yet.</p>\n<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> do you think that's feasible?</p>",
        "id": 305654646,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666526415
    },
    {
        "content": "<p>I don't see sufficient motivation for adding one more compilation mode between interpretation and AOT compilation</p>",
        "id": 305656075,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666527159
    },
    {
        "content": "<p>it would be great if JIT could replace the interpreter though</p>",
        "id": 305656270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666527272
    },
    {
        "content": "<p>since that would mean you don't have to support a whole separate execution environment, the same stuff that goes to AOT can go to JIT</p>",
        "id": 305656313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666527307
    },
    {
        "content": "<p>Issues around un- and reloading code for interactive use looked tough though, so I'm not sure if the result will be any easier. And compilation overhead is a big unknown.</p>",
        "id": 305656542,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666527454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> conceptually, it's feasible to JIT compile the LLVM we generate. However, note that LLVM's JIT is quite slow (it spends a lot of time generating good assembly, as it was originally written for ahead-of-time compilation use-cases). Further, as <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> points out, I'm unsure how we'll manage the \"state\" of the JIT.</p>",
        "id": 305670613,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666535334
    }
]