[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtype_inj</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pa</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pb</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"bp\">//</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">⟩:</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"bp\">//</span><span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">eq</span>\n  <span class=\"n\">injection</span> <span class=\"n\">eq</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>results in (red line at <code>injection eq</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">introN'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">binders</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span>\n<span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">b</span>\n <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 224577645,
        "sender_full_name": "Nick Chopper",
        "timestamp": 1612001206
    },
    {
        "content": "<p>Pushed a fix <a href=\"https://github.com/leanprover/lean4/commit/b7a0bdb9c9ba6adade3650c560435031b5cdfa99\">https://github.com/leanprover/lean4/commit/b7a0bdb9c9ba6adade3650c560435031b5cdfa99</a></p>",
        "id": 224602335,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612036867
    }
]