[
    {
        "content": "<p>I have a c++ library that I know how to compile only with cmake and would like to create Lean wrappers for it</p>\n<p>How do I set up lake project that compiles static library using cmake?</p>\n<p>My idea is to create two <code>FileTargets</code>, one that would execute cmake and other to run make to compile static library with Lean compatible C API.</p>\n<p>How do I properly set up a <code>FileTarget</code> to run cmake? <br>\nI have tried modifying the ffi example in lake repo i.e. using <code>fileTargetWithDep makeFile cmakelistsTarget runCMake</code> where </p>\n<ul>\n<li><code>makeFile</code> is a path to makefile I'm want to generate</li>\n<li><code>cmakelistsTarget</code> is input file target pointing to CMakeLists.txt</li>\n<li><code>runCMake</code> is a function that spawns a process running cmake</li>\n</ul>\n<p>When I run <code>lake build</code>, cmake gets executed correctly but I get an error from a linker. Lake seems to run a linker on the generated makefile for some reason.</p>\n<p>I will post a mwe later today, but maybe there is an easy fix e.g. another function like <code>fileTargetWithDep</code> that doesn't do as much.</p>\n<p>Also, how do I then set up a <code>FileTarget</code> that executes the resulting makefile?</p>",
        "id": 279971783,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1650791734
    },
    {
        "content": "<p>There is a thread I can't seem to find in which I ask about compiling C++ code and making it available from Lean 4</p>",
        "id": 279976662,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650798959
    },
    {
        "content": "<p>I am successfully compiling C++ code, even using <code>lean_external_object</code> to hold some precomputed objects, like matrix factorisation, that are used later on.</p>\n<p>I'm mainly curious how to fuse cmake and lake workflow.</p>\n<p>I should search those threads though to see if there is some info on cmake.</p>",
        "id": 279976910,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1650799293
    },
    {
        "content": "<p>Right now, I compile the library by manually invoking cmake and make. I want it to be part of <code>lake build</code> command. </p>\n<p>Alternatively, I wrote a lake script to do that <a href=\"https://github.com/lecopivo/HouLean/blob/ade9a0b8224b339f8c023897a85c1b993c972dac/lakefile.lean#L21\">https://github.com/lecopivo/HouLean/blob/ade9a0b8224b339f8c023897a85c1b993c972dac/lakefile.lean#L21</a> but it is a mess and it does not feel right.</p>",
        "id": 279977280,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1650799868
    },
    {
        "content": "<p>This is not on-topic to your question, but I  have been considering integrating Lean with Bazel for a while, because I wanted to easily integrate with larger C++ projects (and CMake isn't easily extensible to new languages).</p>\n<p>I've managed to compile and link the C output of the lean compiler with Bazel and wrote some super minimal meta build system for lean which produces ninja files (<a href=\"https://github.com/cpehle/bn\">https://github.com/cpehle/bn</a>). The next step would be to integrate this or lake with Bazel and use then Bazel as the overall build system.</p>",
        "id": 280013417,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1650853616
    }
]