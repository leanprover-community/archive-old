[
    {
        "content": "<p>I apologize for the lack of an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but I've found it hard to isolate this issue out of context...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_zero</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">,</span> <span class=\"n\">normalize</span><span class=\"o\">,</span> <span class=\"n\">maybeNormalize</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rename_i</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fails at <code>rw</code> with the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n<span class=\"n\">case</span> <span class=\"n\">succ.inl</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but all the types check AFAIK</p>",
        "id": 307348541,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667319486
    },
    {
        "content": "<p>Could you post the definitions of <code>normalize</code> and <code>maybeNormalize</code>?</p>",
        "id": 307353878,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1667320740
    },
    {
        "content": "<p>Ah, it's <code>Rat.normalize</code> and <code>Rat.maybeNormalize</code>.<br>\nUsing <code>subst hn</code> instead of <code>rw [hn]</code> works here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_zero</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mkRat</span><span class=\"o\">,</span> <span class=\"n\">Rat.normalize</span><span class=\"o\">,</span> <span class=\"n\">Rat.maybeNormalize</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subst</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 307354551,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1667320914
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 307362739,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667323217
    },
    {
        "content": "<p>Is there a reason why <code>rw</code> fails here?</p>",
        "id": 307365018,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667323807
    },
    {
        "content": "<p>I think it's because <code>mk</code> secretly has some additional parameters</p>",
        "id": 307365345,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667323877
    },
    {
        "content": "<p>note that <code>simp [hn]</code> also works.</p>",
        "id": 307366308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667324149
    },
    {
        "content": "<p>yes, <code>mk</code> has additional parameters -- this explains the error I got while trying to create an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> -- thanks!</p>",
        "id": 307366946,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667324339
    },
    {
        "content": "<p>There are also many threads on motive not type correct, if you run into further problems maybe give those threads a gander :)</p>",
        "id": 307385127,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667329846
    }
]