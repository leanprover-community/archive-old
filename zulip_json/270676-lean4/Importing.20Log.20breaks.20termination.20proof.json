[
    {
        "content": "<p>I have been having difficulty with a termination proof. I am seeing weird behavior which seems bug-like.  The following MWE works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">examp</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">delim</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">List.getRest</span> <span class=\"n\">l</span> <span class=\"n\">delim</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">examp</span> <span class=\"n\">delim</span> <span class=\"n\">tail</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">rest</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">examp</span> <span class=\"n\">delim</span> <span class=\"n\">rest</span> <span class=\"n\">h</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">decreasing_tactic</span>\n</code></pre></div>\n<p>But if I add the import <code>import Mathlib.Data.Nat.Log</code> at the top of the file, then I get the \"failed to prove termination\" error message. Is this a bug, or is something else going on?</p>",
        "id": 320026140,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673142857
    },
    {
        "content": "<p>If I had to guess, it's because of the (transitively) imported mathlib simp lemmas. Could also be that mathlib extends <code>decreasing_trivial</code>. Investigating!</p>",
        "id": 320033537,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673150883
    },
    {
        "content": "<p>I think simp lemmas are the culprit; looks like it's actually not proving for the first recursive call, not the second</p>",
        "id": 320034809,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673152604
    },
    {
        "content": "<p>New MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">delim</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decreasing_with</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 320035380,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153167
    },
    {
        "content": "<p>what does <code>set_option trace.Meta.simp.rewrite true</code> show in each case?</p>",
        "id": 320035412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673153235
    },
    {
        "content": "<p>Oh, a useful trace option! Let me see...</p>",
        "id": 320035495,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153296
    },
    {
        "content": "<p>The weird thing is that it doesn't even present me with any unsolved goals, just that it failed.  Let me try that option.</p>",
        "id": 320035559,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153348
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yjP6okNntpNiuvNUYLZClWG3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yjP6okNntpNiuvNUYLZClWG3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yjP6okNntpNiuvNUYLZClWG3/image.png\"></a></div>",
        "id": 320035621,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153395
    },
    {
        "content": "<p>Oh, wait a minute</p>",
        "id": 320035674,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153420
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"c1\">--set_option trace.Meta.Tactic.simp.rewrite true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">delim</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"c1\">--simp (config := { arith := true })</span>\n</code></pre></div>",
        "id": 320035687,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153438
    },
    {
        "content": "<p>so <code>simp_wf</code> is changing :)</p>",
        "id": 320035705,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153448
    },
    {
        "content": "<p>Wondering if <code>decreasing_tactic</code> should add an alternative in its <code>first</code> to simply not try the given tactic...<br>\nedit: probably a bad idea</p>",
        "id": 320035767,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153498
    },
    {
        "content": "<p>what does it output? (lean is not in front of me)</p>",
        "id": 320035838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673153545
    },
    {
        "content": "<p>Paste the whole thing here?</p>",
        "id": 320035852,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153575
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span>\n        <span class=\"n\">snd</span> <span class=\"o\">:=</span>\n          <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"n\">sizeOf</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span>\n          <span class=\"n\">snd</span> <span class=\"o\">:=</span>\n            <span class=\"n\">h</span> <span class=\"o\">})</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">WellFoundedRelation.rel</span>\n      <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}))</span>\n      <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}))</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_wfRel</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">{</span> <span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span><span class=\"o\">,</span> <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_wfRel.proof_1</span> <span class=\"o\">}</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">sizeOf_nat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">List.cons.sizeOf_spec</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">head</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">sizeOf_default</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">head</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">add_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">sizeOf_nat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Nat.lt_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">lt_add_iff_pos_left</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 320036000,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153756
    },
    {
        "content": "<p><code>simp_wf</code> is declared as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"simp_wf\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">invImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">Prod.lex</span><span class=\"o\">,</span> <span class=\"n\">sizeOfWFRel</span><span class=\"o\">,</span>\n          <span class=\"n\">measure</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">,</span> <span class=\"n\">WellFoundedRelation.rel</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>It's a bit odd to me that it isn't a <code>simp only</code>; the goal is closed by a simp lemma that can immediately be applied after the wf lemmas</p>",
        "id": 320036046,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673153766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> is that with or without the mathlib simp lemmas?</p>",
        "id": 320036093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673153848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> It is intentional that it is not <code>simp only</code>, you should be able to mark your own functions as simp to improve the termination checker locally</p>",
        "id": 320036192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673153903
    },
    {
        "content": "<p>That is with them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Log</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">delim</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"c1\">-- simp (config := { arith := true })</span>\n</code></pre></div>",
        "id": 320036207,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153925
    },
    {
        "content": "<p>it looks like it's closing the goal, so what's the problem?</p>",
        "id": 320036234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673153961
    },
    {
        "content": "<p>But actually for me James's MWE works fine.</p>",
        "id": 320036242,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153974
    },
    {
        "content": "<p>Yeah ok, let me post from my original MWE</p>",
        "id": 320036249,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673153993
    },
    {
        "content": "<p>Here is the output from the failing original MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">sizeOf</span>\n          <span class=\"n\">x</span> <span class=\"bp\">==&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">)</span>\n        <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₂</span><span class=\"o\">))</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_wfRel</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">{</span> <span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span><span class=\"o\">,</span> <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_wfRel.proof_1</span> <span class=\"o\">}</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">sizeOf_nat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">sizeOf_nat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Nat.lt_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span>\n        <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">List.cons.sizeOf_spec</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">head</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">sizeOf_default</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">head</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">add_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">lt_add_iff_pos_left</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">sizeOf</span>\n          <span class=\"n\">x</span> <span class=\"bp\">==&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">)</span>\n        <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">InvImage</span><span class=\"o\">,</span> <span class=\"n\">InvImage</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">WellFoundedRelation.rel</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a₂</span><span class=\"o\">))</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_wfRel</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">{</span> <span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span><span class=\"o\">,</span> <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_wfRel.proof_1</span> <span class=\"o\">}</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">sizeOf_nat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">sizeOf_nat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Nat.lt_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">delim</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₁.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a₂.fst</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span>\n        <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">List.cons.sizeOf_spec</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">head</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">sizeOf_default</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">head</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">add_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 320036372,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673154074
    },
    {
        "content": "<p>As I mentioned before the orignal MWE did not display any unsolved goal, <em>just</em> the error message that it couldn't prove termination, as I showed in the screenshot.</p>",
        "id": 320036395,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673154106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/Importing.20Log.20breaks.20termination.20proof/near/320036395\">said</a>:</p>\n<blockquote>\n<p>As I mentioned before the orignal MWE did not display any unsolved goal, <em>just</em> the error message that it couldn't prove termination, as I showed in the screenshot.</p>\n</blockquote>\n<p>This is an error reporting issue. I believe it is leaving goals, but they aren't being reported</p>",
        "id": 320036717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673154368
    },
    {
        "content": "<p>one trick you can do is <code>termination_by decreasing_tactic; trace_state</code> (untested)</p>",
        "id": 320036774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673154419
    },
    {
        "content": "<p>Hmm, <code>trace_state</code> seems to only output an empty message :(</p>",
        "id": 320036809,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673154463
    },
    {
        "content": "<p>aside from the error reporting, I think <code>decreasing_tactic</code> should probably be modified include a <code>done</code> alternative. if you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">decreasing_trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">done</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to the original MWE it compiles with/without mathlib :)</p>",
        "id": 320036910,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673154576
    },
    {
        "content": "<p>definitely a bug from user perspective, if <code>simp_wf</code> is actually intended to apply all simp lemmas</p>",
        "id": 320036980,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673154639
    },
    {
        "content": "<p>Here's a workaround by inlining stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Log</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">examp</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">delim</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">List.getRest</span> <span class=\"n\">l</span> <span class=\"n\">delim</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">examp</span> <span class=\"n\">delim</span> <span class=\"n\">tail</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">_x</span><span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">rest</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">examp</span> <span class=\"n\">delim</span> <span class=\"n\">rest</span> <span class=\"n\">h</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.left</span><span class=\"o\">)</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">PSigma.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">PSigma.Lex.left</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which shows an error at <code>examp delim rest h</code> (so it was the second goal after all):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">deliml</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span>\n<span class=\"n\">head</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span>\n<span class=\"n\">rest</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">_x</span><span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">rest</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">l</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">rest</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span>\n</code></pre></div>",
        "id": 320037014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673154702
    },
    {
        "content": "<p>the first goal is closed by <code>simp_wf</code> alone. the second goal is closed by <code>decreasing_tactic</code>.</p>",
        "id": 320037083,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673154766
    },
    {
        "content": "<p>the issue is <code>decreasing_tactic</code> doesn't close something that <code>simp_wf</code> closes by itself :)</p>",
        "id": 320037096,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673154789
    },
    {
        "content": "<p>oh I see, adding <code>try decreasing_tactic</code> at the end makes it pass</p>",
        "id": 320037106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673154815
    },
    {
        "content": "<p>i partly suspect <code>simp_wf</code> should be <code>simp only</code>, since <code>decreasing_tactic</code> has a <code>simp</code> call anyways...</p>\n<p>(is there a reasonable way I can test changes to <code>simp_wf</code>? editing the lean-toolchain's file and reloading doesn't seem to do anything)</p>",
        "id": 320037156,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673154846
    },
    {
        "content": "<p>If I introduce <code>have _: sizeOf rest &lt; 1 + sizeOf tail := by sorry</code> at the second recursion, it still fails for me.</p>",
        "id": 320037166,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673154871
    },
    {
        "content": "<p>not for me, that works (with <code>try decreasing_tactic</code>)</p>",
        "id": 320037196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673154906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Log</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">examp</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">delim</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">delim</span> <span class=\"bp\">≠</span> <span class=\"o\">[]):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span><span class=\"o\">::</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">List.getRest</span> <span class=\"n\">l</span> <span class=\"n\">delim</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">examp</span> <span class=\"n\">delim</span> <span class=\"n\">tail</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">rest</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">rest</span> <span class=\"bp\">&lt;</span>  <span class=\"n\">sizeOf</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">examp</span> <span class=\"n\">delim</span> <span class=\"n\">rest</span> <span class=\"n\">h</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">try</span> <span class=\"n\">decreasing_tactic</span>\n</code></pre></div>\n<p>is what fails for me.</p>",
        "id": 320037271,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673154989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/Importing.20Log.20breaks.20termination.20proof/near/320037166\">said</a>:</p>\n<blockquote>\n<p>If I introduce <code>have _: sizeOf rest &lt; 1 + sizeOf tail := by sorry</code> at the second recursion, it still fails for me.</p>\n</blockquote>\n<p>(I think the first recursive call fails in your MWE, not the second. <code>decreasing_tactic</code> <em>should</em> succeed on both, but there's a bug that causes it to break with poor error messages)</p>",
        "id": 320037286,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673155014
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 320037311,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673155058
    },
    {
        "content": "<p><code>decreasing_by try simp_wf; try decreasing_tactic</code> works</p>",
        "id": 320037318,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673155066
    },
    {
        "content": "<p>in particular, it does a <code>simp_wf</code> which closes the goal for rec call 1, but then does another <code>simp</code> which fails. there's many ways to resolve this bug, I'm not sure what is the right one...</p>",
        "id": 320037369,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673155091
    },
    {
        "content": "<p>Do you know what the bug is?</p>",
        "id": 320037375,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673155097
    },
    {
        "content": "<p>I think <code>decreasing_with</code> should look more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n   <span class=\"o\">(</span><span class=\"n\">simp_wf</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.left</span><span class=\"o\">)</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">PSigma.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">PSigma.Lex.left</span><span class=\"o\">)</span>\n    <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">done</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ts</span>\n    <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"failed to prove termination, possible solutions: ...\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320037722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673155519
    },
    {
        "content": "<p>Yeah, that's definitely an option too. I'm sorta of the mind that <code>decreasing_with</code> should guarantee that it applies the tactic you pass (which would imply that <code>simp_wf</code> shouldn't be closing goals on its own)</p>",
        "id": 320037981,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673155842
    },
    {
        "content": "<p>I think the tactic should try to be monotonic with respect to strengthening tactics</p>",
        "id": 320038009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673155883
    },
    {
        "content": "<p>But then again, even <code>simp only</code> could close a goal <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 320038015,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673155889
    },
    {
        "content": "<p>exactly</p>",
        "id": 320038018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673155893
    },
    {
        "content": "<p>Then yeah, would support adding it there. we could also make <code>decreasing_trivial</code> elaborate to <code>done</code>, but I don't know if trivial implies done...</p>",
        "id": 320038081,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673155933
    },
    {
        "content": "<p>it doesn't</p>",
        "id": 320038097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673155945
    },
    {
        "content": "<p>if it did we wouldn't have this error</p>",
        "id": 320038122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673155954
    },
    {
        "content": "<p>none of the <code>decreasing_trivial</code> tactics succeed on no goals</p>",
        "id": 320038138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673155972
    },
    {
        "content": "<p>Yeah. I assume lean3's <code>trivial</code> also fails on empty context, and we should keep that property...</p>",
        "id": 320038157,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673155993
    },
    {
        "content": "<p>(are you working on a PR for this? or should I?)</p>",
        "id": 320038256,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673156055
    },
    {
        "content": "<p>go for it</p>",
        "id": 320038404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673156175
    },
    {
        "content": "<p>don't forget to add a test</p>",
        "id": 320038429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673156187
    },
    {
        "content": "<p>Thanks for helping with this! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 320039632,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673157345
    },
    {
        "content": "<p>Thank you for finding the bug! I'm quite surprised this edge case hasn't come up before, honestly</p>",
        "id": 320039730,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673157444
    }
]