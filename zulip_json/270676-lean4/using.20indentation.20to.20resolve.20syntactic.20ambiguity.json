[
    {
        "content": "<p>I'm building a DSL for writing context free grammars. I have the following syntactic rule and an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rules</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rule</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">symbol</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">strLit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">symbol</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ::= \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">symbol</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">rule</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rule</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">rules</span>\n<span class=\"n\">syntax</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">grammarCmd</span><span class=\"o\">)</span> <span class=\"s2\">\"grammar \"</span> <span class=\"n\">ident</span> <span class=\"n\">rules</span> <span class=\"s2\">\"end \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">grammar</span> <span class=\"n\">foo</span>\n\n  <span class=\"n\">foo</span> <span class=\"o\">::=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\")\"</span>\n  <span class=\"n\">star</span> <span class=\"o\">::=</span> <span class=\"s2\">\".\"</span> <span class=\"n\">foo</span>\n  <span class=\"c1\">--   ^</span>\n  <span class=\"c1\">-- expected 'end'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- invalid 'end', insufficient scopes</span>\n</code></pre></div>\n<p>Clearly, the fact that I can have an identifier on either side of <code>\" ::= \"</code> makes this grammar ambiguous so I added <code>colGt</code> so that if I have a new line in the middle of a production rule, I have to indent it in order for it to be recognized as the continuation of the same rule. It doesn't seem to work that way. I also tried using <code>notFollowedBy(\" ::= \")</code> after <code>ident</code> on the rhs of the production rule and that also doesn't work. How can I resolve this ambiguity?</p>",
        "id": 275935580,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647732316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  <code>colGt</code> is the way to go, but you need to use <code>withPosition</code> to specify the column <code>colGt</code> is going to compare.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rules</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">rule</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">symbol</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">symbol</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\" ::= \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">symbol</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rule</span>\n<span class=\"n\">syntax</span> <span class=\"n\">rule</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">rules</span>\n<span class=\"n\">syntax</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">grammarCmd</span><span class=\"o\">)</span> <span class=\"s2\">\"grammar \"</span> <span class=\"n\">ident</span> <span class=\"n\">rules</span> <span class=\"s2\">\"end \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">grammar</span> <span class=\"bp\">$</span><span class=\"n\">id1</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rules</span> <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">id2</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#print</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">grammar</span> <span class=\"n\">foo</span>\n  <span class=\"n\">foo</span> <span class=\"o\">::=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">foo</span> <span class=\"s2\">\")\"</span>\n  <span class=\"n\">star</span> <span class=\"o\">::=</span> <span class=\"s2\">\".\"</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 275935943,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647732857
    },
    {
        "content": "<p>Ah! Nice! Thank you</p>",
        "id": 275936169,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647733282
    },
    {
        "content": "<p>What does \"colGt\" mean? I keep reading \"column greater than\" in my mind but I'm not sure that makes sense</p>",
        "id": 275944375,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647746400
    },
    {
        "content": "<p>Leo just gave me the second part of this puzzle. <code>withPosition</code> marks a relative position and <code>colGt</code> is a match only if it appears at a column greater that the latest position recorded by <code>withPosition</code></p>",
        "id": 275944842,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647747240
    }
]