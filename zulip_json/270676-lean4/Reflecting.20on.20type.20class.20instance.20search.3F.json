[
    {
        "content": "<p>Is there a way to write a metaprogram that observes an instance search? I'm working on a written description of how instance search works, and stepping through the intermediate states would be a really nice explanatory tool. But this is only really tenable if I can have a test that keeps it up to date with changes in Lean, like similar ones I use for tracking error messages.</p>\n<p>For instance, it would be cool to have a macro like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">search</span> <span class=\"n\">steps</span> <span class=\"o\">(</span><span class=\"n\">metas</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">m1</span><span class=\"o\">])</span>\n  <span class=\"n\">HMul</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span> <span class=\"n\">m1</span>\n  <span class=\"bp\">.</span> <span class=\"n\">Mul</span> <span class=\"n\">Int</span> <span class=\"n\">as</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>with bullets for the recursive structure of the search, justifications for default instances, etc.</p>\n<p>I suspect that this does not exist or would produce absurdly huge traces, but I figured it's worth asking.</p>",
        "id": 292829421,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1660164065
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover/lean4/pull/1448\">https://github.com/leanprover/lean4/pull/1448</a> relevant?</p>",
        "id": 292829963,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1660164294
    },
    {
        "content": "<p>Yes, thanks!</p>",
        "id": 292830812,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1660164629
    }
]