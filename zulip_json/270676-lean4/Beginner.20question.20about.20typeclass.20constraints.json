[
    {
        "content": "<p>I wanted to try proving something about groups and I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Invertable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">GroupOp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" ⬝ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">GroupOp.op</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Invertable.inv</span> <span class=\"n\">lhs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">GroupOp</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Invertable</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⬝</span> <span class=\"n\">y</span> <span class=\"bp\">⬝</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⬝</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⬝</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">right_inv</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">⬝</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_</span>\n</code></pre></div>\n<p>But the <code>x ⬝ x⁻¹</code> part is highlighted with \"failed to synthesize instance\" for GroupOp and Invertable. Both of those should be entailed by the <code>[Group a]</code> as far as I understand it, but I tried adding them explicitly just in case, yet the same error remains. This led me to ask, how do you even specify typeclass constraints in Lean 4? And ultimately of course, how do I go about solving this issue?</p>",
        "id": 301380276,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664435398
    },
    {
        "content": "<p>(Not that this is relevant to your question, but I think your axioms do not define a group, eg x^-1:=e and x.y:=x are a model, so your theorem is not provable)</p>",
        "id": 301380913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664435711
    },
    {
        "content": "<p>You introduced <code>a</code> after the typeclass <code>[Group a]</code>, meaning you shadowed the auto-bound <code>a</code> with another <code>a</code> which is not a group</p>",
        "id": 301381132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664435820
    },
    {
        "content": "<p>Possibly more relevant to your question: what happens if you switch the order of <code>[Group a]</code> and <code>(a : Type)</code> in the theorem? Right now the order doesn't make sense to me and I'm wondering if you have two <code>a</code>s.</p>",
        "id": 301381226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664435878
    },
    {
        "content": "<p>It should probably be an error to shadow an auto-bound variable since that's almost certainly a typo</p>",
        "id": 301381269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664435887
    },
    {
        "content": "<p>It does work, although there's type mismatch on e, I probably should qualify it somehow.</p>\n<p>As for the axioms, maybe haha, classically at least you can prove it with those afaik, and I was going to prove it in Lean to get a hang of some basic tactics</p>",
        "id": 301381875,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664436157
    },
    {
        "content": "<p>Yeah if you don't set up notation for e I guess you'll have to write <code>a.e</code>. You can take a look at mathlib4 for how they do it there, they use 1 and set up notation for it. I disagree with your claim that classically you can prove it. If I've not made a mistake then my original post explains why. If you make right_inv the axiom instead of left_inv you're ok (you can prove left_inv).</p>",
        "id": 301423380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664452632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<p>to prove e*x = x for all x<br>\nassume e*x =/= x<br>\nthen<br>\ne*x = y, x =/= y<br>\ny^-1 * (e * x) = y^-1 * y<br>\ny^-1 * (e * x) = e (left inverse)<br>\n(y^-1 * e) * x = e (assoc)<br>\ny^-1 * x = e (right identity)<br>\ny^-1 * y = e (def of inverse)<br>\ny^-1 * y = y^-1 * x<br>\nx = y (contradiction to original assumption)</p>\n<p>to prove x * x^-1 = e for all x<br>\nx^-1 * (x * x^-1) = x^-1 * e<br>\nx^-1 * (x * x^-1) = x^-1 (right identity)<br>\n(x^-1 * x) * x^-1 = x^-1 (assoc)<br>\ne * x^-1 = x^-1 (left inverse)<br>\nthis is true based on that lemma above</p>\n<p>Does this not prove it? I wrote the steps I took in the parens just to make sure I am not using any axioms I haven't defined, and it seems to work out. Or if I made a mistake somewhere along the way please correct me <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 301439595,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664457948
    },
    {
        "content": "<p>I don't follow your proof of <code>x * x^-1 = e</code>.</p>\n<p>(It is known that associativity + left inverse + left identity or associativity + right inverse + right identity are sufficient to be a group, but I do think the sides need to match)</p>",
        "id": 301441433,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664458502
    },
    {
        "content": "<p>And Kevin's counterexample does seem to work</p>",
        "id": 301441829,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664458639
    },
    {
        "content": "<p>Confirmed in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.abelianization</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">counter</span>\n<span class=\"bp\">|</span> <span class=\"n\">One</span>\n<span class=\"bp\">|</span> <span class=\"n\">Two</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">counter</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">counter</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">One</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">One</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">no_right_inv</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">counter</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">One</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Two</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301443408,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664459116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20question.20about.20typeclass.20constraints/near/301423380\">said</a>:</p>\n<blockquote>\n<p>Yeah if you don't set up notation for e</p>\n</blockquote>\n<p>The quick way to use an unqualified <code>e</code> for the identity is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">export</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">right_inv</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">⬝</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 301454829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664462148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <br>\nCorrect me if I'm wrong, but I think we have<br>\n<code>x = y &lt;-&gt; z*x = z*y, for all z</code></p>\n<p>Then I'll just rewrite the proof as:<br>\nAssume <code>x * x^-1 =/= e</code><br>\nThen:</p>\n<ol>\n<li><code>x^-1 * (x * x^-1) =/= x^-1 * e</code> (rewrite based on that assumption above)</li>\n<li><code>x^-1 * (x * x^-1) =/= x^-1</code> (rewrite rhs based on right identity)</li>\n<li><code>(x^-1 * x) * x^-1 =/= x^-1</code> (rewrite based on associativity)</li>\n<li><code>e * x^-1 =/= x^1</code> (simplify based on left inverse)</li>\n</ol>\n<p>This contradicts that mini lemma from before, and as far as I see I used only my own axioms (specific steps written between parens)</p>",
        "id": 301457690,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664462878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508137\">Andrija D.</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20question.20about.20typeclass.20constraints/near/301457690\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <br>\nCorrect me if I'm wrong, but I think we have<br>\n<code>x = y &lt;-&gt; z*x = z*y, for all z</code></p>\n</blockquote>\n<p>I'm afraid I do have to correct you :)<br>\nWith the same setup as above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">no_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">counter</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Two</span><span class=\"o\">,</span> <span class=\"n\">One</span><span class=\"o\">,</span> <span class=\"n\">One</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301458487,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664463095
    },
    {
        "content": "<p>But don't we have</p>\n<ol>\n<li><code>z*x = z*y</code></li>\n<li><code>z^-1 * (z * x) = z^-1 * (z * y)</code> (apply the one sided implication <code>x = y -&gt; z*x = z*y</code>)</li>\n<li><code>(z^-1 * z) * x = (z^1 * z) * y</code> (assoc)</li>\n<li><code>e * x = e * y</code> (left inverse)</li>\n<li><code>e * x = x = e * y</code> (lemma)</li>\n<li><code>e*y = x</code> (drop leftmost, eq reflex)</li>\n<li><code>e*y = y = x</code> (lemma)</li>\n<li><code>x = y</code> (drop leftmost, eq reflex)</li>\n</ol>\n<p>Since you've proven this wrong in Lean I'm confused, but I can't find the mistake in my own steps <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 301460810,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664463714
    },
    {
        "content": "<p>Remember that you have assumed that <code>x*e = x</code>, not that <code>e*x = x</code>, so step 5 goes wrong</p>",
        "id": 301462111,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464044
    },
    {
        "content": "<p>(It turns out that assuming left-cancellativity is indeed sufficient, so the rest of your argument does work. Not sure if that's surprising.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Group'</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group'</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cancel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"n\">this.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">Group'</span>\n</code></pre></div>",
        "id": 301462485,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464137
    },
    {
        "content": "<p>But e*x = x was my first lemma thingy, the first part in the message you originally replied to</p>",
        "id": 301462562,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664464161
    },
    {
        "content": "<p><code>z * x = z * y → x = y</code> and <code>e * x =  x</code> appear to be equivalent given your other axioms - you can prove each by using the other</p>",
        "id": 301463135,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508137\">Andrija D.</span> <a href=\"#narrow/stream/270676-lean4/topic/Beginner.20question.20about.20typeclass.20constraints/near/301439595\">said</a>:</p>\n<blockquote>\n<p><code>y^-1 * y = y^-1 * x</code> (true up to here)<br>\n<code>x = y</code> (does not follow without assuming cancellativity)</p>\n</blockquote>",
        "id": 301463423,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464373
    },
    {
        "content": "<p>I forgot to write it, but doesn't it follow from uniqueness of the inverse?</p>\n<p>Let <code>a = y^-1</code>, then we have</p>\n<ol>\n<li><code>a * a^-1 = a * x</code></li>\n<li><code>e = a*x</code></li>\n<li><code>x = a^-1 = y</code></li>\n</ol>\n<p>Steps 1 and 3 use <code>(y^-1)^-1 = y</code> which also uses the uniqueness of the inverse</p>",
        "id": 301464459,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664464645
    },
    {
        "content": "<p>It's really easy to lose track of what you have and haven't proved at this early point :)</p>",
        "id": 301464460,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464645
    },
    {
        "content": "<p><code>(y^-1)^-1 = y</code> is not true given your axioms</p>",
        "id": 301464632,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464698
    },
    {
        "content": "<p>(better: \"does not follow from your axioms\")</p>",
        "id": 301464710,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664464722
    },
    {
        "content": "<p>Anyway, it really is a nice exercise to write this proof, but you will need to change your <code>mul_one</code> axiom to <code>one_mul</code></p>",
        "id": 301466702,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664465254
    },
    {
        "content": "<p>(I have a proof in lean3 I can link to once you've tried yourself)</p>",
        "id": 301466871,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664465293
    },
    {
        "content": "<p>Ah you're right, that was the problem, I'll write the proof when I get some time. I guess the whole purpose of proof assistants is to avoid mistakes like these</p>",
        "id": 301468067,
        "sender_full_name": "Andrija D.",
        "timestamp": 1664465597
    },
    {
        "content": "<p>It's definitely not the <em>whole</em> purpose, but it's part of it.</p>",
        "id": 301469069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664465874
    }
]