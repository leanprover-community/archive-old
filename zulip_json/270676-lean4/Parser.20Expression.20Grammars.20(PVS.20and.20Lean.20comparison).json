[
    {
        "content": "<p>As an exercise to learn Parsing expression grammars (PEGs), I formalized them along with a notion of \"proofs of parse\" in both Lean and PVS (repo <a href=\"https://github.com/joehendrix/parsing-verification\">here</a>).  PEGs are rough context-free grammars with deterministic choice and a lookahead primitives.</p>\n<p>I prove parsing is deterministic.  The proofs were pretty similar, but the PVS was shorter due to some of the tactics in PVS.  <code>assert</code>, <code>flatten</code> and <code>grind</code> were all useful.  The Lean 4 VSCode interface got a little slow at times too while the PVS VScode integration has a modal proof interface and seemed to perform more consistently.</p>\n<p>It's been a while since I've done proving in Lean, so I thought I'd share a link to the <a href=\"https://github.com/joehendrix/parsing-verification/blob/main/peg.lean\">Lean file</a> and see if others have suggestions for better tactics.  The PVS is <a href=\"https://github.com/joehendrix/parsing-verification/blob/main/peg.pvs\">here</a> and better documented, but you need either PVS or the VSCode plugin to view the proof.</p>",
        "id": 279131192,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1650062617
    },
    {
        "content": "<p>I find it difficult to compare PVS proofs to lean (or anything else, really) since the proof scripts are huge and presumably not human-written</p>",
        "id": 279131415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650062822
    },
    {
        "content": "<p>Yes, you need PVS installed to effectively read them (which I find a bit annoying).  The VSCode plugin works pretty well.</p>",
        "id": 279131538,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1650062920
    },
    {
        "content": "<p>I've attached a screen shot of the info panel showing part of the structure  <a href=\"/user_uploads/3121/Ddw4ZatjXJbU76B0DE31goSq/PVS_is_deterministic_proof.png\">PVS_is_deterministic_proof.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ddw4ZatjXJbU76B0DE31goSq/PVS_is_deterministic_proof.png\" title=\"PVS_is_deterministic_proof.png\"><img src=\"/user_uploads/3121/Ddw4ZatjXJbU76B0DE31goSq/PVS_is_deterministic_proof.png\"></a></div>",
        "id": 279131795,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1650063179
    },
    {
        "content": "<p>(I've nothing helpful to contribute, but this looks really cool!)</p>",
        "id": 279138481,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1650070635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> Thanks for sharing the example. I took a quick look, and here are some possible simplifications.</p>\n<ul>\n<li><code>have</code> with patterns</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">p_sub1_bound</span> <span class=\"o\">:=</span> <span class=\"n\">p_def.left</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_sub1_nt</span>    <span class=\"o\">:=</span> <span class=\"n\">p_def.right.left.left</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_sub1_pos</span>   <span class=\"o\">:=</span> <span class=\"n\">p_def.right.left.right</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_def</span>  <span class=\"o\">:=</span> <span class=\"n\">p_def.right.right</span>\n</code></pre></div>\n<p>==&gt; </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">p_sub1_bound</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">p_sub1_nt</span><span class=\"o\">,</span> <span class=\"n\">p_sub1_pos</span><span class=\"o\">⟩,</span> <span class=\"n\">p_def</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p_def</span>\n</code></pre></div>\n<ul>\n<li><code>induction ... using</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Fin.strong_induction_on</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">q.size</span><span class=\"o\">),</span>\n          <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leftnonterminal</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leftnonterminal</span>\n        <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">position</span>        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">position</span>\n        <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">record_result</span>   <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">record_result</span><span class=\"o\">)</span> <span class=\"n\">i0</span>\n <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">ind</span>\n</code></pre></div>\n<p>==&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">i0</span> <span class=\"n\">using</span> <span class=\"n\">Fin.strong_induction_on</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">i</span> <span class=\"n\">ind</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<ul>\n<li><code>by_cases</code> + <code>&lt;;&gt;</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">cases</span> <span class=\"n\">Decidable.em</span> <span class=\"o\">((</span><span class=\"n\">p.val.getD</span> <span class=\"n\">p_sub1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">p_sub1_success</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Decidable.em</span> <span class=\"o\">((</span><span class=\"n\">q.val.getD</span> <span class=\"n\">q_sub1</span> <span class=\"n\">q_j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">q_sub1_fail</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_sub1_success</span><span class=\"o\">,</span> <span class=\"n\">q_sub1_fail</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ind1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">q_sub1_success</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_sub1_success</span><span class=\"o\">,</span> <span class=\"n\">q_sub1_success</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ind1</span> <span class=\"n\">p_def</span> <span class=\"n\">q_def</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_def</span><span class=\"o\">,</span> <span class=\"n\">q_def</span><span class=\"o\">,</span> <span class=\"n\">ind1</span><span class=\"o\">]</span>\n\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">p_sub1_fail</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">Decidable.em</span> <span class=\"o\">((</span><span class=\"n\">q.val.getD</span> <span class=\"n\">q_sub1</span> <span class=\"n\">q_j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">q_sub1_success</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_sub1_fail</span><span class=\"o\">,</span> <span class=\"n\">q_sub1_success</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ind1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">q_sub1_fail</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_sub1_fail</span><span class=\"o\">,</span> <span class=\"n\">q_sub1_fail</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ind1</span> <span class=\"n\">p_def</span> <span class=\"n\">q_def</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p_def</span><span class=\"o\">,</span> <span class=\"n\">q_def</span><span class=\"o\">,</span> <span class=\"n\">ind1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>==&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">p.val.getD</span> <span class=\"n\">p_sub1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">q.val.getD</span> <span class=\"n\">q_sub1</span> <span class=\"n\">q_j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ind1</span> <span class=\"n\">p_def</span> <span class=\"n\">q_def</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279167519,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650114214
    },
    {
        "content": "<p>The <code>split</code> tactic for breaking <code>if-then-else</code> (and <code>match</code>) expressions in cases also seems useful in your example.<br>\nFor example, we can further simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">p.val.getD</span> <span class=\"n\">p_sub1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">q.val.getD</span> <span class=\"n\">q_sub1</span> <span class=\"n\">q_j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ind1</span> <span class=\"n\">p_def</span> <span class=\"n\">q_def</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>==&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">p_def</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">q_def</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p_def</span> <span class=\"n\">q_def</span> <span class=\"n\">ind1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>==&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">p_def</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">split</span> <span class=\"n\">at</span> <span class=\"n\">q_def</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 279168998,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650116459
    },
    {
        "content": "<p>We also have the <code>checkpoint</code> and <code>stop</code> tactics for reducing the elaboration time for big proofs. <br>\nSee discussion at <a href=\"#narrow/stream/270676-lean4/topic/Partial.20evaluation.20of.20a.20file\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Partial.20evaluation.20of.20a.20file</a><br>\nHowever, you would have to re-structure your proof to take maximum advantage of them. The idiom is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">checkpoint</span>\n   <span class=\"bp\">&lt;</span><span class=\"n\">expensive</span> <span class=\"n\">tactic</span> <span class=\"kd\">prefix</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">part</span> <span class=\"n\">we</span> <span class=\"n\">are</span> <span class=\"n\">working</span> <span class=\"n\">on</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">stop</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">rest</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 279170477,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650118652
    },
    {
        "content": "<p>In the future, it would be great to have UI support to mark the part we are working on.</p>",
        "id": 279170568,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650118761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Thanks for taking a look.  The split tactic in particular makes the choice of predicate splits really clear.  It turns out I can replace all the use of <code>cases</code> with <code>split</code>.  I think that makes the proof more maintainable and clear.</p>",
        "id": 279193170,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1650154230
    }
]