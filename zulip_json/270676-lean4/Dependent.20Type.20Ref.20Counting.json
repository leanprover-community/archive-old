[
    {
        "content": "<p>How do dependent types work with reference counting? Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">ContextPtr</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span>\n<span class=\"kd\">def</span> <span class=\"n\">ContextRef</span> <span class=\"o\">:=</span> <span class=\"n\">ContextPtr.type</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">ContextRef</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ContextPtr.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[extern \"new_context\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ContextRef.new</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ContextRef</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">TypePtr</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">ContextRef</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PointedType</span>\n<span class=\"kd\">def</span> <span class=\"n\">TypeRef</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">ContextRef</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">TypePtr</span> <span class=\"n\">ctx</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">type</span>\n<span class=\"kd\">instance</span>  <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">ContextRef</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">TypeRef</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">TypePtr</span> <span class=\"n\">ctx</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[extern \"get_float_type\"]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">getFloatType</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ContextRef</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TypeRef</span> <span class=\"n\">ctx</span>\n</code></pre></div>\n<p>Does <code>get_float_type</code> need to increment <code>ctx</code> reference counter? Does <code>ctx</code> reference counter get decremented during the collection of each of object of <code>TypeRef ctx</code>?  How does that work? Does <code>get_float_type</code> need to do anything special to make that happen?</p>",
        "id": 257744124,
        "sender_full_name": "Mac",
        "timestamp": 1634322789
    },
    {
        "content": "<p>Dependent types shouldn't matter at all. The types are all erased in compilation</p>",
        "id": 257744285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634322862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so how does Lean determine when to garbage collect <code>ctx</code> so that it does not get collected pre-maturely before objects of types depending on it do?</p>",
        "id": 257744407,
        "sender_full_name": "Mac",
        "timestamp": 1634322927
    },
    {
        "content": "<p><code>get_float_type</code> does not need to increment <code>ctx</code>, because it takes it as borrowed data. If it was owned it would have to decrement <code>ctx</code></p>",
        "id": 257744521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634322967
    },
    {
        "content": "<p>That is, it's just as if the type was <code>constant getFloatType (ctx : @&amp; ContextRef) : Unit</code></p>",
        "id": 257744556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634322986
    },
    {
        "content": "<p>The only effect of the dependent type is that a <code>ContextRef</code> is going to be forced as an argument to many functions, with all the normal consequences of passing it as an argument</p>",
        "id": 257744667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634323037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Type.20Ref.20Counting/near/257744407\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> so how does Lean determine when to garbage collect <code>ctx</code> so that it does not get collected pre-maturely before objects of types depending on it do?</p>\n</blockquote>\n<p>There is no such relation. It can garbage collect <code>ctx</code> once it has finished actually using the data, it doesn't matter if an object of type <code>TypeRef ctx</code> still exists</p>",
        "id": 257744897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634323144
    },
    {
        "content": "<p>However, if you pass that <code>TypeRef ctx</code> to another function you will have to pass <code>ctx</code> along with it, which will keep it alive</p>",
        "id": 257744977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634323182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Dependent.20Type.20Ref.20Counting/near/257744977\">said</a>:</p>\n<blockquote>\n<p>However, if you pass that <code>TypeRef ctx</code> to another function you will have to pass <code>ctx</code> along with it, which will keep it alive</p>\n</blockquote>\n<p>But, in many cases, it infers that <code>ctx</code> from the <code>TypeRef ctx</code> object itself?</p>",
        "id": 257745320,
        "sender_full_name": "Mac",
        "timestamp": 1634323329
    },
    {
        "content": "<p>Type inference is orthogonal to all this. The compiler doesn't care if the argument is explicit or implicit</p>",
        "id": 257751633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634326183
    }
]