[
    {
        "content": "<p>So I think I understand what's going on here but just want to run it past the experts to check I'm understanding correctly.</p>\n<p>I think I just learnt a change between Lean 3 and Lean 4, and I think I know the fix. Here's the change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">applicative_transformation</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_pure'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_seq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--- #print applicative_transformation</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">structure applicative_transformation : Π (F : Type u → Type v) [_inst_1 : applicative F]</span>\n<span class=\"cm\">  [_inst_2 : is_lawful_applicative F] (G : Type u → Type w) [_inst_3 : applicative G]</span>\n<span class=\"cm\">  [_inst_4 : is_lawful_applicative G], Type (max (u+1) v w)</span>\n<span class=\"cm\">fields: ...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 4</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">applicative_transformation</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_pure'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_seq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">applicative_transformation</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive applicative_transformation.{u, v, w} : (F : Type u → Type v) →</span>\n<span class=\"cm\">  [inst : Applicative F] → (G : Type u → Type w) → [inst : Applicative G] → Type (max (u + 1) v w)</span>\n<span class=\"cm\">number of parameters: 4</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Forgive all the functor nonsense. The point I'm trying to make is that when defining the structure in Lean 3, I <em>think</em> what's going on is that Lean 3 says \"OK so F's are mentioned so let's throw in the variable F and oh look it has some typeclasses associated to it so let's throw them in too\". As a result, the definition of <code>applicative_transformation F G</code> demands both <code>[applicative F]</code> and <code>[is_lawful_applicative F]</code>. However in the Lean 4 version, Lean is smart enough to observe that in the actual definition of the declaration we do need <code>F</code> and we also need <code>Applicative F</code> but we don't actually need <code>LawfulApplicative F</code> (which is just a bunch of Props), so the declaration only asks that <code>F</code> be <code>Applicative</code>.</p>\n<p>As a result, the unused arguments linter is complaining to me that I am occasionally asking for <code>LawfulApplicative</code> when I don't need to. If my understanding of the above is correct, then as far as I can see the correct fix is to observe that it's absolutely right and I should just delete the unused arguments (the Lean 3 unused arguments linter is not highlighting these because they <em>are</em> needed in Lean 3 because the structure declaraction has dragged them in).</p>\n<p>Does this sound right or have I misunderstood what's going on?</p>",
        "id": 313034481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669806639
    },
    {
        "content": "<p>Sounds right to me.</p>",
        "id": 313034760,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669806741
    }
]