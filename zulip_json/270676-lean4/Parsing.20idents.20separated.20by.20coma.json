[
    {
        "content": "<p>Hi, I'm trying to tell lean4 to parse parameters separated by coma to be valid syntax. <br>\nI tried different things to get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>I'd like the above notation to work and expand to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>where each \",\" is expanded as \")(\"  but I seem unable to properly escape <code>(</code>, so it's not used as precedence for ops in my argument declaration.<br>\nAny help or direction on how I might accomplish this?, thanks!</p>",
        "id": 321906748,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1673982905
    },
    {
        "content": "<p>Could you show what you've tried so far?</p>",
        "id": 321910623,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1673984039
    },
    {
        "content": "<p>I tried variations of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"func\"</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n\n<span class=\"n\">func</span> <span class=\"n\">fx</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">func</span> <span class=\"n\">fy</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">func</span> <span class=\"n\">fz</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">fx</span> <span class=\"bp\">+</span> <span class=\"n\">fy</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fz</span><span class=\"o\">()</span> <span class=\"c1\">-- work, 2</span>\n\n<span class=\"n\">func</span> <span class=\"n\">fxi</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"c1\">-- fails, expected `(`</span>\n<span class=\"n\">func</span> <span class=\"n\">fyi</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n<span class=\"n\">func</span> <span class=\"n\">fzi</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">fxi</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fyi</span><span class=\"o\">()</span> <span class=\"c1\">-- fails fxi is not properly defined</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fzi</span><span class=\"o\">()</span>  <span class=\"c1\">-- 2</span>\n</code></pre></div>",
        "id": 321920952,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1673987663
    },
    {
        "content": "<p>I started with a more naive approach with <code>notation</code> trying to make it as simple as possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\")(\"</span>\n\n<span class=\"c1\">--fails expected \")\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>But I realize I'm not capturing the idents and expanding them properly in the def parameter position. But it's the first that I came up with. I just started learning Lean.</p>\n<p>Eventually, I ended up following the sources to a lower level place in the macro system where <code>leadingParsers</code> are used to parse and structure precedence with \"(\" and \")\" but I'd like to avoid using that low-level infra if possible.</p>",
        "id": 321924362,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1673988955
    },
    {
        "content": "<p>while it is for sure possible to make this work, I would preface this by saying that you should probably just learn to love the lambda instead of reinventing binder syntax</p>",
        "id": 321986283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674026320
    },
    {
        "content": "<p>the approach that is the closest here is the one starting with <code>func</code>. The others hit the issue that binders aren't <code>term</code>s so <code>notation</code> and <code>syntax ... : term</code> aren't going to work</p>",
        "id": 321986503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674026426
    },
    {
        "content": "<p>The reason yours didn't work here is because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"func\"</span> <span class=\"n\">ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>says that you only accept a list of identifiers in parentheses, meaning that <code>func bla(x,y,z): w = x + y</code> works but not <code>func bla(x: Int,y,z): w = x + y</code> or <code>func bla(x,y,z): List Nat = sorry</code></p>",
        "id": 321986732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674026532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span>\n<span class=\"kd\">def</span> <span class=\"n\">explicitBinder'</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"n\">withoutPosition</span> <span class=\"o\">(</span><span class=\"n\">many1</span> <span class=\"n\">binderIdent</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">binderType</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">Parser.optional</span> <span class=\"o\">(</span><span class=\"n\">binderTactic</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">binderDefault</span><span class=\"o\">))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"func\"</span> <span class=\"n\">Parser.ident</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">explicitBinder'</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">trExplicitBinder'</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">explicitBinder'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">bracketedBinder</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"(\"</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">stx.raw.getArgs</span> <span class=\"bp\">++</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\")\"</span><span class=\"o\">]</span>\n  <span class=\"o\">⟨</span><span class=\"n\">stx.raw.setKind</span> <span class=\"bp\">``</span><span class=\"n\">explicitBinder</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setArgs</span> <span class=\"n\">args</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.getElems.map</span> <span class=\"n\">trExplicitBinder'</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">func</span> <span class=\"n\">fx</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">func</span> <span class=\"n\">fy</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">func</span> <span class=\"n\">fz</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">fx</span> <span class=\"bp\">+</span> <span class=\"n\">fy</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fz</span><span class=\"o\">()</span> <span class=\"c1\">-- 2</span>\n\n<span class=\"n\">func</span> <span class=\"n\">fxi</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"n\">func</span> <span class=\"n\">fyi</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">func</span> <span class=\"n\">fzi</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">=</span> <span class=\"n\">fxi</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fyi</span><span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fzi</span><span class=\"o\">()</span>  <span class=\"c1\">-- 2</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"579538\">@Raúl Raja Martínez</span></p>",
        "id": 321988573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674027332
    },
    {
        "content": "<p>unfortunately translating binders is a bit annoying because of the way the parsers are defined, so I had to use the raw interface here and put the syntax together manually</p>",
        "id": 321988763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674027393
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! this helps a lot. I already like lean's syntax, the reasons I was doing this is because I'm porting a subset of pure <code>kotlin</code> to be embedded in lean and I'm attempting to map existing kotlin programs to be verified in lean similar to how we do in <a href=\"https://arrow-kt.io/docs/meta/analysis/\">https://arrow-kt.io/docs/meta/analysis/</a> . Arrow analysis depends on a SMT solver backend to implement pre,post conditions on functions. </p>\n<p>I'm hoping to use lean as backend for a tool that verifies certain properties of other langs such as termination and type refinements, etc. When I got started I realized lean's power to embed other syntax and thought it would be a good start. </p>\n<p>I've also played with the idea of attempting to support the antlr g4 style syntax directly in Lean so foreign grammars in Antlr can import syntax in lean but that seems a bigger effort until I get more experience with Lean</p>",
        "id": 322072037,
        "sender_full_name": "Raúl Raja Martínez",
        "timestamp": 1674053679
    },
    {
        "content": "<p>You might want to look at <a href=\"https://github.com/tydeu/lean4-alloy/blob/master/Alloy/C/Grammar.lean\">lean4-alloy</a>, which contains a more or less complete C grammar encoded as a lean4 DSL. You could do something similar for kotlin</p>",
        "id": 322073090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674053957
    }
]