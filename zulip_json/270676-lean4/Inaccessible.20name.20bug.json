[
    {
        "content": "<p>I think there's a bug when displaying inaccessible names (at least in VS Code on nightly 2022-04-28).<br>\nIn the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">t</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>... the goal state after the <code>intro</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">w</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"bp\">✝¹</span>\n<span class=\"n\">w</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>That is, we have inaccessible names <code>w✝</code> and <code>w✝¹</code>.<br>\nWhen trying to (incorrectly) use theorem <code>t</code> in the next line, Lean complains with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">t</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h₂</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">w</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>... which is very confusing. If we give <code>w✝</code> and <code>w✝¹</code> actual names, we can see that the <code>¹</code> in <code>w✝¹</code> simply didn't carry over into the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">t</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"c1\">-- Shows:</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   t h₁ h₂</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   h₂</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   f m₂ = some y : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   f m₂ = some x : Prop</span>\n</code></pre></div>",
        "id": 280894307,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1651507511
    },
    {
        "content": "<p>This bug has been fixed<br>\n<a href=\"https://github.com/leanprover/lean4/commit/fe00dd8f292ed280684403b4cf6444a83f1b81bd\">https://github.com/leanprover/lean4/commit/fe00dd8f292ed280684403b4cf6444a83f1b81bd</a></p>",
        "id": 281170045,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651677187
    },
    {
        "content": "<p>Relevant thread for more details: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20with.20the.20Dependent.20cartesian.20product.20example/near/280857320\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20with.20the.20Dependent.20cartesian.20product.20example/near/280857320</a></p>",
        "id": 281170275,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651677285
    }
]