[
    {
        "content": "<p>How can I create a syntax that uses newlines to differentiate between syntax objects?<br>\nFor example, if I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_field</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_row</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"•\"</span> <span class=\"o\">:</span> <span class=\"n\">map_field</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"▦\"</span> <span class=\"o\">:</span> <span class=\"n\">map_field</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">map_field</span><span class=\"bp\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">map_row</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>... Lean complains with <code>invalid parser 'map_row_', invalid empty symbol</code>.<br>\nIf I add an explicit terminating symbol (<code>syntax map_field+ \"|\\n\" : map_row </code>), it works.<br>\nBut is there a way to avoid the terminating symbol?</p>",
        "id": 287364654,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656093867
    },
    {
        "content": "<p>Try <code>linebreak</code> instead of <code>\"\\n\"</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_field</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_row</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"•\"</span> <span class=\"o\">:</span> <span class=\"n\">map_field</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"▦\"</span> <span class=\"o\">:</span> <span class=\"n\">map_field</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">map_field</span><span class=\"bp\">+</span> <span class=\"n\">linebreak</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">map_row</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 287382409,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656103250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/Newline-sensitive.20syntax/near/287382409\">said</a>:</p>\n<blockquote>\n<p>Try <code>linebreak</code> instead of <code>\"\\n\"</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">map_field</span><span class=\"bp\">+</span> <span class=\"n\">linebreak</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">map_row</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Cool, that fixes the error - thanks! <br>\nNow I'm having problems defining the associated macro rule though. For example, in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">••••</span>\n  <span class=\"bp\">▦▦▦▦</span>\n  <span class=\"bp\">••▦▦</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">rows</span><span class=\"o\">:</span><span class=\"n\">map_row</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">row</span> <span class=\"k\">in</span> <span class=\"n\">rows</span> <span class=\"k\">do</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{row}\"</span> <span class=\"c1\">-- this is only called once</span>\n</code></pre></div>\n<p>... the <code>rows</code> list only has a single element instead of three. How can I distinguish between the lines here?</p>",
        "id": 287384808,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656104540
    },
    {
        "content": "<p>Right, <code>map_field+</code> use whitespace as a delimiter, and newlines count as whitespace, so it goes by the longest match<br>\nI guess you want a <code>many1</code> syntax which doesn't accept newlines as delimiters. Not sure how to do that, though</p>",
        "id": 287385604,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656105002
    },
    {
        "content": "<p>Untested: <code>map_field (noWs map_field)* linebreak</code></p>",
        "id": 287385799,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656105102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Newline-sensitive.20syntax/near/287385799\">said</a>:</p>\n<blockquote>\n<p>Untested: <code>map_field (noWs map_field)* linebreak</code></p>\n</blockquote>\n<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">map_field</span> <span class=\"o\">(</span><span class=\"n\">noWs</span> <span class=\"n\">map_field</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">linebreak</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">map_row</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>Because that still produces just a single row in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">rows</span><span class=\"o\">:</span><span class=\"n\">map_row</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>",
        "id": 287425317,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656149716
    },
    {
        "content": "<p>Really? For me the following code parses <code>x</code> into three separate rows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_field</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">map_row</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"•\"</span> <span class=\"o\">:</span> <span class=\"n\">map_field</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"▦\"</span> <span class=\"o\">:</span> <span class=\"n\">map_field</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">map_field</span> <span class=\"o\">(</span><span class=\"n\">noWs</span> <span class=\"n\">map_field</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">linebreak</span> <span class=\"o\">:</span> <span class=\"n\">map_row</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">map_row</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">rows</span><span class=\"o\">:</span><span class=\"n\">map_row</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"rows: {rows.size}\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">row</span> <span class=\"k\">in</span> <span class=\"n\">rows</span> <span class=\"k\">do</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{row}\"</span> <span class=\"c1\">--</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">••••</span>\n  <span class=\"bp\">▦▦▦▦</span>\n  <span class=\"bp\">••▦▦</span>\n</code></pre></div>",
        "id": 287429390,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1656155450
    }
]