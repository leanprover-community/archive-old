[
    {
        "content": "<p>In my <a href=\"https://github.com/bollu/lean4/tree/2021-dec-refactor\">personal fork (<code>bollu/lean4</code>)</a> of the Lean4 compiler, I'd like to add a dependency to another lean library of mine that's in development: <a href=\"https://github.com/opencompl/lean-mlir\"><code>opencompl/lean-mlir</code></a>. I don't know what the correct way to do such a thing is, since <a href=\"https://github.com/leanprover/lean4\"><code>leanprover/lean4</code></a> does not have a <code>leanpkg.toml</code> to include external libraries. </p>\n<ul>\n<li>Is there some way to add a <code>leanpkg.toml</code> to <code>bollu/lean4</code> so I can then include <code>opencompl/lean-mlir</code> as a dependency?</li>\n<li>Do I do play submodule shenanigans to include <code>opencompl/lean-mlir</code> within <code>bollu/lean4</code>? </li>\n<li>Some other solution I am unaware of?</li>\n</ul>",
        "id": 266073571,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1640462717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/adding.20library.20dependencies.20to.20compiler/near/266073571\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Do I do play submodule shenanigans to include <code>opencompl/lean-mlir</code> within <code>bollu/lean4</code>? </li>\n</ul>\n</blockquote>\n<p>This is probably the best and most straightforward approach. It is also what Lean 4 does with Lake so it has been tested and show to be a viable solution.</p>",
        "id": 266076004,
        "sender_full_name": "Mac",
        "timestamp": 1640467002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I might well be missing something, but I was under the impression that the lean compiler itself does not use <code>Lake</code> modules. (I got this impression from <a href=\"https://github.com/leanprover/lean4/search?q=lake\">grepping uses of <code>lake</code></a>). </p>\n<p>In my use-case, I want to be able to use <a href=\"https://github.com/opencompl/lean-mlir/blob/master/MLIR/EDSL.lean\"><code>opencompl/lean-mlir/MLIR/EDSL.lean</code></a> within <a href=\"https://github.com/bollu/lean4/blob/2021-dec-refactor/src/Lean/Compiler/IR/EmitMLIR.lean\"><code>bollu/lean4/src/Lean/Compiler/IR/EmitMLIR.lean</code></a>.</p>\n<p>I don't know how to set up paths such that <a href=\"https://github.com/bollu/lean4/blob/2021-dec-refactor/src/Lean/Compiler/IR/EmitMLIR.lean\"><code>EmitMLIR.lean</code></a> can  use the EDSL defined in <a href=\"https://github.com/opencompl/lean-mlir/blob/master/MLIR/EDSL.lean\"><code>opencompl/lean-mlir/../EDSL.lean</code></a><br>\nHow do you suggest I set this up? I don't understand LEAN's module system very well :) </p>\n<hr>\n<p>I suspect there will be a similar need in the hypothetical LLVM backend (<code>leanprover/lean4/.../EmitLLVM.lean</code>) to access (<a href=\"https://github.com/tydeu/lean4-papyrus\"><code>tydeu/lean4-papyrus</code></a>). Will that also use a submodule?</p>",
        "id": 266108916,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1640523949
    },
    {
        "content": "<p>I don't think how exactly other compiler backends will be integrated has been decided yet. As Leo keeps saying, the focus for now is on the mathlib port.</p>",
        "id": 266109485,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640524876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> I guess a better question would be: is there a particular reason you need to stick your compiler backend into the Lean core itself? My plan for Papyrus was to just have the <code>EmitLLVM.lean</code> be in Papyrus itself rather than Lean. You can easily write an custom executable in Lean that elaborates a file itself (or import a precompiled olean) and then emits the relevant code for the module. That was my plan for Papyrus and is what I currently do in <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a>.</p>",
        "id": 266110021,
        "sender_full_name": "Mac",
        "timestamp": 1640525792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> thank you, I'll take a look at what Alloy does. </p>\n<p>I am quite unsure whether I want the backend to be in Lean core. It's convenient to be able to ship a backend within the compiler itself, as it simplifies things like testing. I don't know if it's a hard requirement. I have questions that will help me decide:</p>\n<ol>\n<li>Does the strategy you have in mind for <code>EmitLLVM.lean</code> allow you to compile entire Lean modules/packages to LLVM?  I don't know what's in an <code>olean</code> file. I imagine an elaborated Lean4 AST? </li>\n<li>Can one test <code>EmitLLVM.lean</code> for correctness against the Lean4 test suite? I currently reuse the Lean4 test suite by flipping a compiler flag to emit MLIR. I don't clearly see what changes are necessary to Lean's test harness to be able to test an out of tree backend.</li>\n</ol>",
        "id": 266110354,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1640526417
    },
    {
        "content": "<p>The <code>.olean</code> files basically give you an Environment which contains all the elaborated modules with their declarations and states of environment extensions (.e.g typeclasses are implemented as an environment extension), you can basically run any <code>CoreM/MetaM</code> program you want once you got an Environment.</p>",
        "id": 266110431,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640526560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/adding.20library.20dependencies.20to.20compiler/near/266110354\">said</a>:</p>\n<blockquote>\n<p>Can one test <code>EmitLLVM.lean</code> for correctness against the Lean4 test suite?</p>\n</blockquote>\n<p>I am not quite sure what you mean by this. Do you mean testing a Lean executable built with MLIR against the test suite? Then yes. The test suite just uses the currently available Lean executable (e.g., in PATH) to run tests. If that is the MLIR-built one, it will use that. One caveat is that you will not be able to use the CMake test driver, but will rather have to run <code>test_single.sh</code> directly on each test yourself.</p>",
        "id": 266110712,
        "sender_full_name": "Mac",
        "timestamp": 1640527028
    }
]