[
    {
        "content": "<p>The asterisk <code>*</code> to symbolize <code>Array Syntax</code> seems to be conflicting with the one from a previously defined syntax. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">foo</span> <span class=\"s2\">\" * \"</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"c1\">-- comment this line</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">foo</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- comment this line too and it will work</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ys</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- expected foo</span>\n</code></pre></div>\n<p>If you comment out those indicated lines the code works. Has anyone seen this before?</p>",
        "id": 277317457,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648749207
    },
    {
        "content": "<p>I'm not terribly sure what's going on, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ys</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- expected foo</span>\n</code></pre></div>\n<p>works</p>",
        "id": 277329327,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648755176
    },
    {
        "content": "<p>But then <code>ys</code> is no longer of <code>Array Syntax</code>, but rather of <code>Syntax</code></p>",
        "id": 277330061,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648755574
    },
    {
        "content": "<p>Don't trust the type hover</p>",
        "id": 277330194,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648755641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/conflicting.20asterisk.20for.20syntax.20matching/near/277329327\">said</a>:</p>\n<blockquote>\n<p>I'm not terribly sure what's going on</p>\n</blockquote>\n<p>Ah. <code>$ys:foo*</code> is not actually a single notation. The parser <code>foo*</code> will try to parse a single <code>foo</code>, then check if it was an antiquotation and whether there is a trailing <code>*</code>. But parsing that single <code>foo</code> will already consume the <code>*</code> because of the first syntax declaration, and error out.</p>",
        "id": 277330449,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648755782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/conflicting.20asterisk.20for.20syntax.20matching/near/277330194\">said</a>:</p>\n<blockquote>\n<p>Don't trust the type hover</p>\n</blockquote>\n<p>But I can't even call <code>getElems</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ys</span><span class=\"o\">:</span><span class=\"n\">expression</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">qq</span> <span class=\"o\">:=</span> <span class=\"n\">ys.getElems</span>\n    <span class=\"c1\">-- invalid field 'getElems', the environment does not contain 'Array.getElems'</span>\n    <span class=\"c1\">--   ys</span>\n    <span class=\"c1\">-- has type</span>\n    <span class=\"c1\">--   Array Syntax</span>\n</code></pre></div>",
        "id": 277330514,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648755830
    },
    {
        "content": "<p>Wait, it's already of type <code>Array Syntax</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277330623,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648755892
    }
]