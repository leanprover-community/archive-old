[
    {
        "content": "<p>Why does the <code>manyIndent</code> parser not work in <code>syntax</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">manyIndent</span> <span class=\"c1\">-- manyIndent : Parser â†’ Parser</span>\n<span class=\"n\">syntax</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">manyIndent</span><span class=\"o\">(</span><span class=\"n\">group</span><span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"s2\">\",\"</span><span class=\"bp\">?</span><span class=\"o\">))</span> <span class=\"c1\">-- Error: parser 'manyIndent' was not found</span>\n</code></pre></div>",
        "id": 253984825,
        "sender_full_name": "Mac",
        "timestamp": 1632099584
    },
    {
        "content": "<p>short answer: <code>Parser</code> <em>combinators</em> cannot be used directly, they must be registered via <code>register_parser_alias</code>. But I suppose all ingredients to reimplement it are exposed.</p>",
        "id": 254014540,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632126786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Could we get parser aliases for <code>manyIndent</code>/<code>many1Indent</code> in core? They seem quite useful for DSLs that want custom <code>do</code> or structure like syntax.</p>",
        "id": 254014920,
        "sender_full_name": "Mac",
        "timestamp": 1632127046
    },
    {
        "content": "<p>While,, as you mentioned, they can be replicated in downstream code already, that seems like somewhat unnecessary code duplication.</p>",
        "id": 254015173,
        "sender_full_name": "Mac",
        "timestamp": 1632127190
    },
    {
        "content": "<p>done</p>",
        "id": 254033523,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632136850
    }
]