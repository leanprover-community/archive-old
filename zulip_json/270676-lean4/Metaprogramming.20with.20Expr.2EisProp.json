[
    {
        "content": "<p>Hi! I'm pretty new to metaprogramming and recently realized that the way I was attempting to identify proofs of elements of <code>Prop</code> wasn't fully correct. But although I think that I now understand the issue, I'm still not sure how to actually fix it.</p>\n<p>My current code takes a local declaration, looks at the type of its type, and passes it into <code>Expr.isProp</code>. The issue is that <code>Expr.isProp</code> just does a naive check to see whether the argument it was passed is a sort with the level <code>Level.zero</code>. This usually works, but doesn't seem to play nicely with terms that are built from other terms. </p>\n<p>For example, in this sample code, <code>hp</code> and <code>hpq</code> are correctly identified by <code>Expr.isProp</code> as being proofs of elements of <code>Prop</code>. But although <code>hq</code>'s type's type is printed as <code>Prop</code>, <code>hq</code>'s type's type doesn't pass the <code>Expr.isProp</code> test because <code>hq</code>'s type's type is listed as a sort with an mvar level.</p>\n<p>IsPropExample.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerTraceClass</span> <span class=\"bp\">`</span><span class=\"n\">myTactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_level_from_sort</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Level</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.sort</span> <span class=\"n\">lvl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">lvl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"print_type_info\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">fVarId</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getFVarIds</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"n\">getLocalDecl</span> <span class=\"n\">fVarId</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">myTactic</span><span class=\"o\">]</span> <span class=\"s2\">\"{ldecl.userName} type's type: {(← inferType ldecl.type)}\"</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">myTactic</span><span class=\"o\">]</span> <span class=\"s2\">\"{ldecl.userName} type's type is Prop: {(← inferType ldecl.type).isProp}\"</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">myTactic</span><span class=\"o\">]</span> <span class=\"s2\">\"{ldecl.userName} type's type level: {get_level_from_sort (← inferType ldecl.type)}\"</span>\n</code></pre></div>\n<p>Main.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">IsPropExample</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.myTactic</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"n\">hpq</span> <span class=\"n\">hp</span>\n  <span class=\"n\">print_type_info</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I'm assuming that somewhere in this approach, I'm missing a step that would instantiate the metavariable in <code>hq</code>'s type's type's level, but I don't know what that step should be. What would be the correct way to approach this problem?</p>",
        "id": 286541634,
        "sender_full_name": "Josh Clune",
        "timestamp": 1655499167
    },
    {
        "content": "<blockquote>\n<p>I'm missing a step that would instantiate the metavariable in hq's type's type's level</p>\n</blockquote>\n<p>That step is called <code>Lean.Meta.instantiateMVars</code> :)</p>",
        "id": 286542033,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655499375
    }
]