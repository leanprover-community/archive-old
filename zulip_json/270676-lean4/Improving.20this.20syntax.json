[
    {
        "content": "<p>After another mostly unrelated discussion, I remembered that I had been using a custom <code>by_cases</code> tactic. Here is my current code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">by_cases_true</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"isTrue\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">syntheticHole</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"n\">by_cases_false</span> <span class=\"o\">:=</span> <span class=\"s2\">\"|\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"isFalse\"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"o\">(</span><span class=\"n\">hole</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">syntheticHole</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"by_cases\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">colGe</span> <span class=\"n\">by_cases_true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">colGe</span> <span class=\"n\">by_cases_false</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">by_cases</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"bp\">$</span><span class=\"n\">ht</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tt</span> <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"bp\">$</span><span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tf</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">match</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"bp\">$</span><span class=\"n\">ht</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tt</span> <span class=\"bp\">|</span> <span class=\"n\">Decidable.isFalse</span> <span class=\"bp\">$</span><span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My main idea was to use a match-style syntax to allow me to use different identifiers in the true/false cases, whereas the built-in <code>by_cases</code> forces the same identifier in both cases. (As an unintended bonus, this version of <code>by_cases</code> actually checks whether the proposition is decidable and the built-in version does not.)</p>\n<p>There is an obvious defect to this code where I'm forced to write the cases in the true then false order. I think I know how to fix that. But what I really want and couldn't find a way to make it work is to allow <code>by_cases</code> to apply to several propositions. For example, I would want to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifTrue</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifTrue</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ifTrue</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnq</span><span class=\"o\">,</span> <span class=\"n\">ifFalse</span> <span class=\"n\">hnr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I gave up after a couple of headaches. Maybe someone with more expertise knows how to do this? (Bonus points if the cases can be in any order.)</p>",
        "id": 276307722,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1648028603
    },
    {
        "content": "<p>I would try to do this one syntactically: transform</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">...</span> <span class=\"k\">with</span>\n\n<span class=\"bp\">=&gt;</span>\n\n<span class=\"k\">match</span> <span class=\"n\">decide</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decide</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">...</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>and use the regular syntax for <code>match</code> alternatives for the cases.</p>",
        "id": 276311684,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1648030714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">byCases</span><span class=\"o\">)</span> <span class=\"s2\">\"by_cases\"</span> <span class=\"n\">ps</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"with\"</span> <span class=\"n\">alts</span><span class=\"o\">:</span><span class=\"n\">Lean.Parser.Tactic.matchAlts</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"bp\">$</span><span class=\"n\">ps</span><span class=\"o\">)],</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">alts</span><span class=\"o\">:</span><span class=\"n\">matchAlts</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">isTrue</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">isFalse</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">isTrue</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">isFalse</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 276313034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648031509
    },
    {
        "content": "<p>You rock Mario!</p>\n<p>It looks simpler but I don't think your idea works Jannis; how do I get case-by-case identifiers that way?</p>",
        "id": 276325834,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1648038739
    },
    {
        "content": "<p>I guess <code>$[...]</code> is way more powerful than I thought. Does it do some kind of automatic folding? I don't really get how <code>$[inferInstanceAs (Decidable $ps)],*</code> actually works. I'll have to mull it over for a bit...</p>",
        "id": 276326176,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1648038934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20this.20syntax/near/276325834\">said</a>:</p>\n<blockquote>\n<p>It looks simpler but I don't think your idea works Jannis; how do I get case-by-case identifiers that way?</p>\n</blockquote>\n<p>I meant exactly what Mario did, only with more fuzziness. ;)</p>",
        "id": 276327116,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1648039443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20this.20syntax/near/276326176\">said</a>:</p>\n<blockquote>\n<p>I guess <code>$[...]</code> is way more powerful than I thought. Does it do some kind of automatic folding? I don't really get how <code>$[inferInstanceAs (Decidable $ps)],*</code> actually works. I'll have to mull it over for a bit...</p>\n</blockquote>\n<p>You can look at the generated code for syntax quotations by doing stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Syntax</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"n\">alts</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"bp\">$</span><span class=\"n\">ps</span><span class=\"o\">)],</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">alts</span><span class=\"o\">:</span><span class=\"n\">matchAlts</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"n\">alts</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">MonadRef.mkInfoFromRefPos</span>\n  <span class=\"k\">let</span> <span class=\"n\">scp</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getCurrMacroScope</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainModule</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getMainModule</span>\n  <span class=\"n\">pure</span>\n      <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.match</span>\n        <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"match\"</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">#</span><span class=\"o\">[],</span>\n          <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span>\n            <span class=\"o\">(</span><span class=\"n\">Array.append</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n              <span class=\"o\">(</span><span class=\"n\">mkSepArray</span>\n                <span class=\"o\">(</span><span class=\"n\">Array.map</span> <span class=\"c1\">-- map here</span>\n                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.matchDiscr</span>\n                      <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">#</span><span class=\"o\">[],</span>\n                        <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.app</span>\n                          <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ident</span> <span class=\"n\">info</span> <span class=\"o\">(</span><span class=\"n\">String.toSubstring</span> <span class=\"s2\">\"inferInstanceAs\"</span><span class=\"o\">)</span>\n                              <span class=\"o\">(</span><span class=\"n\">addMacroScope</span> <span class=\"n\">mainModule</span> <span class=\"bp\">`</span><span class=\"n\">inferInstanceAs</span> <span class=\"n\">scp</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">inferInstanceAs</span><span class=\"o\">,</span> <span class=\"o\">[])],</span>\n                            <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span>\n                              <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.paren</span>\n                                  <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"(\"</span><span class=\"o\">,</span>\n                                    <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span>\n                                      <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.app</span>\n                                          <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ident</span> <span class=\"n\">info</span> <span class=\"o\">(</span><span class=\"n\">String.toSubstring</span> <span class=\"s2\">\"Decidable\"</span><span class=\"o\">)</span>\n                                              <span class=\"o\">(</span><span class=\"n\">addMacroScope</span> <span class=\"n\">mainModule</span> <span class=\"bp\">`</span><span class=\"n\">Decidable</span> <span class=\"n\">scp</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">Decidable</span><span class=\"o\">,</span> <span class=\"o\">[])],</span>\n                                            <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ps</span><span class=\"o\">]],</span> <span class=\"c1\">--insert ps into the tree</span>\n                                        <span class=\"n\">node</span> <span class=\"n\">SourceInfo.none</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">#</span><span class=\"o\">[]],</span>\n                                    <span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"s2\">\")\"</span><span class=\"o\">]]]])</span>\n                  <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"c1\">-- the actual `Array Syntax` input</span>\n                <span class=\"o\">(</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\",\"</span><span class=\"o\">))),</span>\n          <span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"with\"</span><span class=\"o\">,</span> <span class=\"n\">alts</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">alts</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">?</span><span class=\"n\">m.1001</span> <span class=\"n\">ps</span> <span class=\"n\">alts</span> <span class=\"n\">Syntax</span>\n</code></pre></div>\n<p>You have to squint a bit to see what it's doing, but you can see the <code>Array.map</code> in there</p>",
        "id": 276328219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648040079
    },
    {
        "content": "<p>TIL:  <code>#check</code> ...</p>",
        "id": 276339027,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1648044878
    }
]