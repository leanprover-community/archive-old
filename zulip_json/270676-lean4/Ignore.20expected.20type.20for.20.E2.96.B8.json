[
    {
        "content": "<p>Is there a nice way to prevent <code>a ▸ b</code> from searching the expected type to determine the substitution and instead only search b? Here's my current workaround in a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>Relying on <code>by exact</code> not influencing the expected type of <code>this</code>feels brittle, but removing it results in an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">`▸`</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">cast</span> <span class=\"n\">is</span>\n  <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">however</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">equality</span>\n  <span class=\"n\">h₁</span>\n<span class=\"n\">of</span> <span class=\"n\">type</span>\n  <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">on</span> <span class=\"n\">either</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">hand</span> <span class=\"n\">side</span>\n</code></pre></div>",
        "id": 307645370,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1667440123
    },
    {
        "content": "<p>Does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 307666545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667458675
    },
    {
        "content": "<p>No, that doesn't work any more in lean 4. I made a <code>(e :)</code> elaborator for this use case in a post somewhere, but I don't think it's been added to mathlib yet</p>",
        "id": 307668724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667459941
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1797\">lean4#1797</a></p>",
        "id": 307715313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667478009
    },
    {
        "content": "<p>/poll What should the syntax for \"elaborate <code>e</code> without expected type\" be?<br>\n<code>(e :)</code> (implemented in <a href=\"https://github.com/leanprover/lean4/pull/1797\">lean4#1797</a>)<br>\n<code>(e : _)</code> (used in lean 3, doesn't work without a special case in lean 4)</p>",
        "id": 307730570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667482848
    },
    {
        "content": "<p>Leo wants to know how people feel about the new syntax for elaborating without an expected type. The <code>(e :)</code> syntax is a little unusual, but you can think of it as a \"type ascription with no type\" since that's the intended effect.</p>",
        "id": 307731001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667482967
    },
    {
        "content": "<p>Writing nothing after \":\" looks a bit out of place within the world of Lean 4 syntax</p>",
        "id": 307731695,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1667483134
    },
    {
        "content": "<p>it helps signal that this is different from other type ascriptions. In the original version the <code>:)</code> part was actually a token</p>",
        "id": 307731936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667483191
    },
    {
        "content": "<p>What I don't like about <code>(e : _)</code> is that we can't just make it work, the elaborator is too smart and sees around it. This has to be a special case which means that <code>(e : _)</code> and <code>(e : ?_)</code> won't act the same</p>",
        "id": 307732322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667483307
    },
    {
        "content": "<p>There is also the unstated \"something else\" alternative if you have a better idea for a type-ascription-ish syntax that signposts this behavior</p>",
        "id": 307732488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667483359
    },
    {
        "content": "<p>I actually like the <code>( ... :)</code> syntax... if I saw it without knowing about it, I'd almost certainly look it up / ask on Zulip, which seems like a good thing IMO</p>\n<ul>\n<li>it's fun to have little smilies in our codebases :)</li>\n</ul>",
        "id": 307738006,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667484769
    },
    {
        "content": "<p>It is mentioned in the docstring when you hover on it BTW</p>",
        "id": 307738388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667484868
    },
    {
        "content": "<p>although the docstring for parentheses is unfortunately very overloaded, having to describe all the syntaxes:</p>\n<ul>\n<li><code>()</code></li>\n<li><code>(e)</code></li>\n<li><code>(e :)</code></li>\n<li><code>(e : ty)</code></li>\n<li><code>(e1, e2)</code></li>\n<li><code>(· + ·)</code></li>\n</ul>",
        "id": 307738706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667484960
    },
    {
        "content": "<p>I would make it a keyword, i.e. <code>elab_without_expected_type e</code> or something. This situation is hopefully not common enough to warrant short (and very mysterious) notation.</p>",
        "id": 307767840,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1667492363
    },
    {
        "content": "<p>If it's longer than <code>have' := e; exact this</code> then it's not really worth it</p>",
        "id": 307793620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667494818
    },
    {
        "content": "<p>It doesn't come up that often but in the places I have wanted it I also wanted a syntax that felt \"built-in\" for it</p>",
        "id": 307794054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667494921
    },
    {
        "content": "<p>not sure it's about length but rather clarity of intent, right? if anything <code>(e :)</code> is more clearly \"we're doing something weird\" than using <code>exact e</code> in this weird way</p>",
        "id": 307794202,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667494955
    },
    {
        "content": "<p>and some keyword like <code>elab_without_expected_type</code> is very clear in intent</p>",
        "id": 307794267,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667494976
    },
    {
        "content": "<p>yes, but it's also so obnoxiously long that I would never want to use it outside a macro</p>",
        "id": 307796096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667495507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Ignore.20expected.20type.20for.20.E2.96.B8/near/307767840\">said</a>:</p>\n<blockquote>\n<p>This situation is hopefully not common enough to warrant short (and very mysterious) notation.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ <span class=\"nb\">cd</span> mathlib\n$ rg <span class=\"s1\">' : _\\)'</span> <span class=\"p\">|</span> wc -l\n<span class=\"m\">391</span>\n</code></pre></div>",
        "id": 307800704,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667496900
    },
    {
        "content": "<p>Why does additional information make the elaborator fail so often? Does Lean 4 also have this sort of issue?</p>",
        "id": 307810069,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1667499671
    },
    {
        "content": "<p>Elaborator decisions are not always \"confluent\". For example it might make the difference between putting the coercions in one place or another</p>",
        "id": 307810232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667499725
    },
    {
        "content": "<p>combine this with the fact that lean tries not to backtrack during elaboration and you get occasional failures in edge cases</p>",
        "id": 307810422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667499794
    },
    {
        "content": "<p>The issues here are usually not that the elaborator has made an unambiguously wrong decision, it is just making a different decision</p>",
        "id": 307810523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667499834
    },
    {
        "content": "<p>We want the elaborator to have reasonably predictable behavior so that limits how smart we can make the heuristics, and we also don't want it to timeout or re-elaborate things many times so that limits the ability to recover. This is one way among many to nudge the elaborator in the right direction in specific situations</p>",
        "id": 307810961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667499964
    },
    {
        "content": "<p>All right, interesting.</p>",
        "id": 307817046,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1667502051
    }
]