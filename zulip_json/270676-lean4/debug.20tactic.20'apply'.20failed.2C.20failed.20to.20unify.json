[
    {
        "content": "<p>I'm stuck on a difference in <code>apply</code> tactic between lean3 and lean4.  Notice <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level4.lean\">this lean3 proof</a> uses <code>apply hd,</code> to apply the hypothesis <code>hd: ∀ (b : MyNat), a * b = a * d → b = d</code> to the goal <code>⊢ succ c = succ d</code> but my <a href=\"https://github.com/leanprover/lean4-samples/blob/main/NaturalNumbers/AdvancedMultiplicationWorld/Level4.lean\">lean4 version of this proof</a> says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>Any ideas how to debug this? I wasn't sure if the <code>have h := c = d</code> was the correct port of <code>have h : c = d,</code> and weather that has anything to do with it, but how do you debug this type of error in general?</p>",
        "id": 303941725,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665704954
    },
    {
        "content": "<blockquote>\n<p>Any ideas how to debug this? I wasn't sure if the have <code>h := c = d</code> was the correct port of have <code>h : c = d</code>, and weather that has anything to do with it, but how do you debug this type of error in general?</p>\n</blockquote>\n<p>The problem lies here, not with the <code>apply</code> tactic. You can see that after the <code>have</code> the proof states are completely different.</p>",
        "id": 303981768,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665735022
    },
    {
        "content": "<p>You want to have the same <code>have</code> and then indent the next line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hd</span>\n</code></pre></div>",
        "id": 303982360,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665735256
    },
    {
        "content": "<p><code>have h := c = d</code> means that <code>h</code> is defined to be the proposition <code>c = d</code> itself, whereas almost certainly you wanted <code>h</code> to be a proof of this proposition.</p>",
        "id": 303983713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1665735939
    },
    {
        "content": "<p>Thanks, yeah, <a href=\"#narrow/stream/270676-lean4/topic/indent.20after.20have\">this long thread</a> I went through all the issues with <code>have</code> and ended up with using <code>:=</code> in lean4, e.g<code>have h : c = d := apply hd</code>.  In the porting of NNG I ran into lots of issues with confusing intellisense, non-useful errors like this one, and needing help debugging things.</p>",
        "id": 303983857,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665735993
    },
    {
        "content": "<p>I'm not sure how to improve this particular error tbh (without re-explaining what \"unify\" means). The two right-hand sides are clearly unequal.</p>",
        "id": 303984026,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665736071
    },
    {
        "content": "<p>My recommendation is to have the Lean 3 proof and the Lean 4 proof side-by-side, and see what the first position is where the tactic states differ significantly. Then you at least know what tactic is the problematic one.</p>",
        "id": 303984161,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665736135
    },
    {
        "content": "<p>Yes, I did have to resort to loading the lean3 extension and look at the tactic states side by side a few times in the porting process.</p>",
        "id": 303984337,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665736207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/debug.20tactic.20'apply'.20failed.2C.20failed.20to.20unify/near/303984026\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how to improve this particular error tbh (without re-explaining what \"unify\" means). The two right-hand sides are clearly unequal.</p>\n</blockquote>\n<p>Highlighting the non-matching parts as in the new goal diff would be cool, but that seems to boil down to basically re-implementing unification once again</p>",
        "id": 303984441,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665736249
    },
    {
        "content": "<p>I saw a vscode-lean4 PR titled <code>feat: goal-diffs</code> but I don't know what it does yet, sounds intriguing, is there a demo video I can see?</p>",
        "id": 303985779,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665736767
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1610\">https://github.com/leanprover/lean4/pull/1610</a></p>",
        "id": 303986108,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665736880
    },
    {
        "content": "<p>Amazing, can't wait to use it.</p>",
        "id": 303995450,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1665740377
    }
]