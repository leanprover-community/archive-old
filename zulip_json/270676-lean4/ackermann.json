[
    {
        "content": "<p>Hi,</p>\n<p>Is it possible to write the termination proof for ackermann in lean4. I think we should be able to use the lexicographic order, but I cannot find any documentation on how that might work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ackm</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ackm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Prod.lex</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>cheers,<br>\nciprian</p>",
        "id": 267653148,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1641939006
    },
    {
        "content": "<p>You can fulfill the base obligation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ackm</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ackm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Prod.lex</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_wfRel</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Prod.lex</span><span class=\"o\">,</span> <span class=\"n\">Prod.Lex</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Prod.Lex.left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt.base</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But it doesn't seem to like the presence of the outer call. If you change it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ackm</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ackm</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">inner</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then it shows two goals, but it complains if you give either one saying it wants the other one. I'm not sure how you're supposed to discharge these.</p>",
        "id": 267670685,
        "sender_full_name": "Chris B",
        "timestamp": 1641949918
    },
    {
        "content": "<p>Here's another way to define it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>          <span class=\"n\">a</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iterate</span> <span class=\"n\">op</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ackermann</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span>\n <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iterate</span> <span class=\"o\">(</span><span class=\"n\">ackermann</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ackermann</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267678528,
        "sender_full_name": "David Renshaw",
        "timestamp": 1641958161
    },
    {
        "content": "<p>(from Bob Harper's _Practical Foundations for Programming Languages_ <a href=\"http://www.cs.cmu.edu/~rwh/pfpl/\">http://www.cs.cmu.edu/~rwh/pfpl/</a> )</p>",
        "id": 267678548,
        "sender_full_name": "David Renshaw",
        "timestamp": 1641958189
    },
    {
        "content": "<p>no extra termination proof needed with this formulation</p>",
        "id": 267678602,
        "sender_full_name": "David Renshaw",
        "timestamp": 1641958216
    },
    {
        "content": "<p>I believe this proof works, but I get <code>unknown constant 'ackm'</code> on the definition and I'm not sure what to make of that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ackm</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ackm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Prod.lex</span> <span class=\"n\">Nat.lt_wfRel</span> <span class=\"n\">Nat.lt_wfRel</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt.base</span>\n</code></pre></div>",
        "id": 267814948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642039703
    },
    {
        "content": "<p>Did y'all see this: <a href=\"https://github.com/leanprover/lean4/commit/068cc700d8540728558556bf6f86ff6988478d91\">https://github.com/leanprover/lean4/commit/068cc700d8540728558556bf6f86ff6988478d91</a> ?</p>",
        "id": 267815151,
        "sender_full_name": "David Renshaw",
        "timestamp": 1642039930
    },
    {
        "content": "<p>the syntax for <code>termination_by</code> recently changed, this is for the old version</p>",
        "id": 267815194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642039996
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/ack.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/ack.lean</a></p>",
        "id": 267909821,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1642098174
    }
]