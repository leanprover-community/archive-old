[
    {
        "content": "<p>In the following example, the notation for <code>Formula.knows</code> gets unfolded in the infoview when doing <code>#check 𝕂 φ</code>. <br>\nCan I make it so that the notation is preserved in the infoview, just like the prefix below for <code>Formula.negation</code>? <br>\nOr more generally, is there some customizability regarding what happens with notations when they are printed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">negation</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">knows</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"s2\">\"∼\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.negation</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝕂\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.knows</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∼</span><span class=\"n\">φ</span>\n<span class=\"c1\">-- ∼φ : Formula</span>\n<span class=\"k\">#check</span> <span class=\"bp\">𝕂</span> <span class=\"n\">φ</span>\n<span class=\"c1\">-- Formula.knows φ : Formula</span>\n</code></pre></div>",
        "id": 260639725,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1636367766
    },
    {
        "content": "<p>You can use an Unexpander:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[appUnexpander Formula.knows]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandKnows</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Formula.knows</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">𝕂</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 260769543,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1636448290
    }
]