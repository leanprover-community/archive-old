[
    {
        "content": "<p>Do questions about Std4 (or about linters) go in this stream?</p>\n<p>I don't know much about linters but both of these surprised me. Are these bugs or is there something wrong with my structure?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ᵐᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unop_op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unop_inj</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">unop</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpComm` linter reports:</span>\n<span class=\"cm\">COMMUTATIVITY LEMMA IS SIMP.</span>\n<span class=\"cm\">Some commutativity lemmas are simp lemmas: -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">unop_inj</span> <span class=\"c\">/-</span><span class=\"cm\"> should not be marked simp -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpVarHead` linter reports:</span>\n<span class=\"cm\">LEFT-HAND SIDE HAS VARIABLE AS HEAD SYMBOL.</span>\n<span class=\"cm\">Some simp lemmas have a variable as head symbol of the left-hand side (after whnfR): -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">unop_op</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side has variable as head symbol: x -/</span>\n</code></pre></div>",
        "id": 316074640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671119511
    },
    {
        "content": "<p>wooah</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">unop_op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>What black magic is this? That would never work in Lean 3.</p>",
        "id": 316075033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671119604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/possible.20linter.20bugs/near/316074640\">said</a>:</p>\n<blockquote>\n<p>Do questions about Std4 (or about linters) go in this stream?</p>\n</blockquote>\n<p>There is a <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> stream</p>",
        "id": 316086039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671122334
    },
    {
        "content": "<p>These could be bugs in the linters. Simp recently changed its discrimination tree index to unfold less stuff like this, although if the <code>simp only</code> example is any indication then this is still happening in this case</p>",
        "id": 316087215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671122637
    },
    {
        "content": "<p>Isn't this just iota reduction? I thought <code>simp only</code> does this by default?</p>",
        "id": 316087440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671122690
    },
    {
        "content": "<p>no, that was what was disabled</p>",
        "id": 316089077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671123148
    },
    {
        "content": "<p>well, <code>simp only</code> does iota reduction, it just doesn't pattern match modulo iota reduction any more</p>",
        "id": 316089230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671123202
    },
    {
        "content": "<p>so actually yes that explains why <code>simp only</code> closes the goal, and the linter is still possibly faulty</p>",
        "id": 316089446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671123258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/possible.20linter.20bugs/near/316075033\">said</a>:</p>\n<blockquote>\n<p>wooah</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">unop_op</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>What black magic is this? That would never work in Lean 3.</p>\n</blockquote>\n<p>This only happens in Lean3 on days ending in y</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean3 code but I'm too lazy to use lean3 names</span>\n<span class=\"kd\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unop_op</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MulOpposite</span>\n</code></pre></div>",
        "id": 316160201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671145940
    },
    {
        "content": "<p>So why doesn't the simp linter complain in lean 3 when this gets tagged <code>simp</code>?</p>",
        "id": 316165793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671149074
    },
    {
        "content": "<p>It only does that on days with an <code>a</code> in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint</span>\n\n<span class=\"kd\">@[nolint doc_blame nolint has_nonempty_instance]</span>\n<span class=\"kd\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulOpposite</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">unop_op</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n<span class=\"kd\">end</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 316168052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671150320
    },
    {
        "content": "<p>I think your real question is \"why does this not happen on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a> in Lean 3?\", to which the answer is \"because <code>mul_opposite</code> is not a structure\".</p>",
        "id": 316168390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671150508
    },
    {
        "content": "<p>Thanks! So the conclusion is simply that <code>unop_op</code> should not be tagged with <code>simp</code> in mathlib4 if <code>MulOpposite</code> is a structure, which resolves the <code>simpVarHead</code> question (in some sense at least). The <code>unop_inj</code> / <code>simpComm</code> question remains open. Shall I open an issue on <code>Std</code> for that one?</p>",
        "id": 316228449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671185897
    },
    {
        "content": "<p>Yes, the <code>unop_inj</code> remains mysterious to me; but I'd make sure to really check it is accepted by Lean 3 before reporting it!</p>",
        "id": 316228626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671185960
    },
    {
        "content": "<p>Do we have that linter in Lean 3?? I'd never heard of it before I saw that error in the file I was porting.</p>",
        "id": 316228687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671185980
    },
    {
        "content": "<p>I thought we had something similar in the <code>simp</code> attribute itself</p>",
        "id": 316228853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671186023
    },
    {
        "content": "<p>More Lean 4 declarations rejected by <code>simpComm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">semiconj_by_unop</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">SemiconjBy</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">SemiconjBy</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">commute_unop</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">semiconj_by_unop</span>\n</code></pre></div>",
        "id": 316364179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671226353
    },
    {
        "content": "<p>And indeed in Lean 3 there is no objection to <code>unop_inj</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint.default</span>\n\n<span class=\"c1\">-- lean3 code but I'm too lazy to use lean3 names</span>\n<span class=\"kd\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unop_inj</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MulOpposite</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">unop</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- no objection</span>\n</code></pre></div>\n<p>This is holding up <a href=\"https://github.com/leanprover-community/mathlib4/pull/1036\">mathlib4#1036</a> which is needed to make some opposite-related files less painful to port. How should I proceed? At the minute we're just working around this, but given that these opposite types should be structures (because we can't use the trick of making them irreducible later on in Lean 4), probably the sooner they're turned into structures the better.</p>",
        "id": 316365033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671226710
    }
]