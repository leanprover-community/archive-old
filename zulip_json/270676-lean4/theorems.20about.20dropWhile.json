[
    {
        "content": "<p>Dear All,</p>\n<p>for my own benefit, I proved some trivialities about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.dropWhile#doc\">docs4#List.dropWhile</a>  -- you can find them below.</p>\n<p>If anyone thinks that they may be useful, let me know and I can PR them somewhere!</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.dropWhile_of_true</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ca</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dropWhile</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">L.dropWhile</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ca</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.dropWhile_of_false</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ca</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dropWhile</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ca</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.length_dropWhile</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L.dropWhile</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">L.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">L</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n      <span class=\"k\">then</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.dropWhile_of_true</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">List.length_dropWhile</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.dropWhile_of_false</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 320409646,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673343610
    },
    {
        "content": "<p>Do we want to be making non-meta feature PRs to mathlib4 yet?</p>",
        "id": 320431164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673351017
    },
    {
        "content": "<p>It was not my intention to push for these lemmas to be PRed: I simply \"needed\" these lemmas, saw that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_drop#doc\">docs4#List.length_drop</a> exists and wondered whether then also some <code>dropWhile</code> lemmas were to be expected!</p>\n<p>It is certainly of no priority for me!</p>",
        "id": 320432366,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673351466
    },
    {
        "content": "<p>I guess we'd have to reverse-synchronise them, which seems irritating. We could put them in non-synced files for the time being.</p>",
        "id": 320432379,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673351472
    },
    {
        "content": "<p>e.g. these could be in <code>Data/List/DropWhile4.lean</code> where the <code>4</code> symbolises that these are mathlib4-only files. we could, after the port is done, then merge everything into the correct files</p>",
        "id": 320432582,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673351531
    },
    {
        "content": "<p>The reason for me \"needing\" these lemmas was to remove a <code>partial</code> in a definition that I had.  Now that I have convinced Lean that <code>partial</code> is superfluous, I can live with having a partial!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 320432598,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673351535
    },
    {
        "content": "<p>Or in this case, PR them to std4 directly? :)</p>",
        "id": 320435354,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673352524
    },
    {
        "content": "<p>I am happy to make a PR to std4, but also to wait and possibly not PR these lemmas at all!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 320436935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673353050
    },
    {
        "content": "<p>I also just noticed that with mathlib, the proof is easier, although I had to fight a decidable typeclass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.length_dropWhile</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L.dropWhile</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">L.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">List.isSuffix.length_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.dropWhile_suffix</span> <span class=\"n\">α</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bool.decide_coe</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 320455029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673358679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/theorems.20about.20dropWhile/near/320431164\">said</a>:</p>\n<blockquote>\n<p>Do we want to be making non-meta feature PRs to mathlib4 yet?</p>\n</blockquote>\n<p>Yes, certainly. There are no restrictions on new material in mathlib4 besides compatibility with mathlib, and I absolutely do not want to send a message that mathlib4 is \"frozen\" at all!</p>",
        "id": 320502561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673371214
    },
    {
        "content": "<p>Should we have a compromise like \"all mathlib4-new material in existing files should go at the bottom of the file\", so as not to interfere with forward-ports?</p>",
        "id": 320511095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673373688
    },
    {
        "content": "<p>would it also be fine to make changes to anything where the lean3 mathlib file is frozen?</p>",
        "id": 320513469,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673374387
    },
    {
        "content": "<p>Are there any such files?</p>",
        "id": 320515036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673374865
    },
    {
        "content": "<p>While I agree with the spirit, now that I am at a computer that actually has Lean4, instead of using the online editor, I can see that the lemma that I had was completely trivial, given what is in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">List.length_dropWhile</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L.dropWhile</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"n\">L.length</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.isSuffix.length_le</span> <span class=\"o\">(</span><span class=\"n\">List.dropWhile_suffix</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">·</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>If you think that it is worth to PR it, I can do it, but maybe it is too trivial, even from the point of view of formalization!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 320516286,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673375201
    }
]