[
    {
        "content": "<p>There is nothing to be hijacked here.  All of the API is public.  Here is the relevant snippet from the <code>mkSimpLemmasFromConst</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">inv</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">shouldPreprocess</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">preprocess</span> <span class=\"n\">val</span> <span class=\"n\">type</span> <span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">auxName</span> <span class=\"bp\">←</span> <span class=\"n\">mkAuxLemma</span> <span class=\"n\">cinfo.levelParams</span> <span class=\"n\">type</span> <span class=\"n\">val</span>\n        <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkSimpLemmaCore</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">auxName</span> <span class=\"o\">(</span><span class=\"n\">cinfo.levelParams.map</span> <span class=\"n\">mkLevelParam</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">auxName</span><span class=\"o\">)</span> <span class=\"n\">post</span> <span class=\"n\">prio</span> <span class=\"n\">declName</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 266197074,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640632261
    },
    {
        "content": "<blockquote>\n<p>I think with a custom version of simp</p>\n</blockquote>\n<p>What I think would be useful would be a custom version of the simp <em>attribute</em>.</p>",
        "id": 266197172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640632348
    },
    {
        "content": "<blockquote>\n<p>There is nothing to be hijacked here</p>\n</blockquote>\n<p>I think I misunderstood you.  No, we can't hook into the addSimpLemma function.  But we can do the same thing the addSimpLemma function does.</p>",
        "id": 266197226,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640632416
    },
    {
        "content": "<p>Cool, thanks! If I understand you correctly, the best would be to create an attribute <code>simp_with_buddies</code> with a tweaked version of <code>registerSimpAttr</code> to use, say, another attribute <code>simp_buddy</code> to populate the <code>simp</code> index with different kinds of auxiliary lemmas. Then, we can use the whole thing with <code>simp [my rules] with simp_with_buddies</code>. I think that would take us most of the way there. The only bit missing would be to pre-process the argument list of <code>simp</code>. I don't suppose that anything short of a wrapper around <code>simp</code> itself could accomplish that. </p>\n<p>A wrapper around <code>simp</code> doesn't sound too bad though. In general, that means that <code>simp [foo, bar] with simp_with_buddies</code> gets you most of the functionality, you just miss out on <code>foo</code> and <code>bar</code> getting preprocessed. Then the wrapper can be made available through <code>open simp.buddies</code>, which would make a scoped <code>simp</code> macro available, would use <code>simp_with_buddies</code> by default and also preprocess the argument list.</p>",
        "id": 266197890,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640633045
    },
    {
        "content": "<p>I see, what you want to make work is <code>simp [foo]</code> where <code>foo</code> should get a reassoc-version.</p>",
        "id": 266198732,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640633542
    },
    {
        "content": "<p>There the easiest option at the moment is to write your own simp tactic frontend.  (Note that you cannot scope macro expansion, you can only scope a higher priority parser.)</p>",
        "id": 266198828,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640633649
    },
    {
        "content": "<p>Another option that doesn't require modifying simp is <code>local attribute [reassoc] foo in theorem bar : xyz := by simp</code>.</p>",
        "id": 266198857,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640633687
    },
    {
        "content": "<p>Medium-long term there is also AC-simplification in development.  reassoc becomes redundant with AC-simplification.</p>",
        "id": 266198892,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640633723
    },
    {
        "content": "<p>Yet another option is to add a custom elaborator and write <code>by simp [reassociating foo]</code> or <code>by simp [pointfree foo]</code>.</p>",
        "id": 266198922,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640633753
    },
    {
        "content": "<p>Ah! Yes you're right. I wasn't aware it was already in development. Do you know if we can expect it to support associativity of heterogenous operations like arrow composition in category theory?</p>",
        "id": 266199027,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640633824
    },
    {
        "content": "<p>\"Already in development\" might raise expectations too much.  IIRC <span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> was looking into it, but I have zero ideas on the timeline.  I wouldn't count on it supporting heterogeneous operations, but this might just be a question of engineering effort and user demand.</p>",
        "id": 266199379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640634114
    },
    {
        "content": "<p>Cool, thank you! I'll adjust my expectations in consequence</p>",
        "id": 266199487,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640634210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> has marked this topic as resolved.</p>",
        "id": 266199810,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640634451
    },
    {
        "content": "<p>Correct me if I'm wrong, but although <code>registerSimpAttr</code> can be used to declare simp sets, it isn't possible to <em>use</em> simp sets currently, because <code>simp</code> does not support the syntax <code>simp [] with my_simp_set</code></p>",
        "id": 266230920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640666898
    },
    {
        "content": "<p>Indeed that's what I noticed as soon as I tried it. You can support it only by extending the tactic.</p>",
        "id": 266232349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640668976
    },
    {
        "content": "<p>What do people think about a notation <code>syntax \"..\" simpSet : simpLemma</code> which can go in the bracket list of a <code>simp</code>? Here <code>simpSet</code> is a new syntax category which elaborates to an object of type <code>SimpLemmas</code></p>",
        "id": 266233120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670153
    },
    {
        "content": "<p>so to declare a new simp set you would do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">fooExt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">registerSimpAttr</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"s2\">\"foo simplification lemma\"</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">simpSet</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp_ext</span> <span class=\"n\">fooExt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>simp_ext t</code> is a <code>simpSet</code> elaborator that returns the <code>SimpLemmas</code> object for a <code>SimpExtension</code></p>",
        "id": 266233284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670415
    },
    {
        "content": "<p>and then use would be <code>simp [..foo]</code> to simp with all definitions marked as <code>@[foo]</code></p>",
        "id": 266233351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670495
    },
    {
        "content": "<p>That would be purely a replacement for Lean 3's <code>simp using</code> notation, right? I think that could work. Why do you like it better than the keyword <code>using</code>?</p>",
        "id": 266233360,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640670531
    },
    {
        "content": "<p>It makes more sense to put simp sets in the bracket list IMO</p>",
        "id": 266233371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670564
    },
    {
        "content": "<p>since it's basically the same as putting a big list of theorems in that list</p>",
        "id": 266233376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670582
    },
    {
        "content": "<p>Plus, since it's in brackets you have a bit more freedom to have fancy <code>simpSet</code> parsers than lean 3 <code>using</code> list</p>",
        "id": 266233427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670639
    },
    {
        "content": "<p>To play devil's advocate, i think you could also argue that it would make sense to separate visually the individual lemmas from the list of lemmas so that, when you read the stuff between <code>[...]</code> you think about each one as terms and, after <code>using</code> you see them as identifiers / set of lemmas and think about what those lists are optimized for</p>",
        "id": 266233501,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640670771
    },
    {
        "content": "<p>(also, s/<code>using</code>/<code>with</code>/ in the above)</p>",
        "id": 266233515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670802
    },
    {
        "content": "<p>Do you have something in mind for fancier <code>simpSet</code> parsers?</p>",
        "id": 266233517,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640670804
    },
    {
        "content": "<p>The stuff in the <code>[...]</code> already is not simply terms, there are <code>-</code> and <code>&lt;-</code> and <code>\\u</code> and stuff</p>",
        "id": 266233524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670830
    },
    {
        "content": "<p>Here we're just adding one more leading sigil <code>..</code></p>",
        "id": 266233534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266233517\">said</a>:</p>\n<blockquote>\n<p>Do you have something in mind for fancier <code>simpSet</code> parsers?</p>\n</blockquote>\n<p>Not really, but it seems more in keeping with the way the corresponding attribute will be handled</p>",
        "id": 266233584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670905
    },
    {
        "content": "<p>and I've already mentioned one nontrivial <code>simpSet</code> parser, <code>simp_ext</code></p>",
        "id": 266233599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670934
    },
    {
        "content": "<p>although that's mostly an implementation detail, I doubt people will use it directly</p>",
        "id": 266233604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640670951
    },
    {
        "content": "<p>having a syntax category seems like the easiest way for lean 4 core to punt on what exactly can fit in there without requiring a downstream library like mathlib to have to redefine <code>simp</code></p>",
        "id": 266233673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671027
    },
    {
        "content": "<p>I can see the sense in that</p>",
        "id": 266233682,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640671052
    },
    {
        "content": "<p>(Note that mathport already has a <code>simp'</code> tactic stub because lean 4 <code>simp</code> lacks some options from lean 3 <code>simp</code>)</p>",
        "id": 266233694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671076
    },
    {
        "content": "<p>actually, looking at the code, it seems that the only remaining missing feature is the <code>with</code> list, so I will be happy to switch over to <code>simp</code> for all use cases</p>",
        "id": 266233840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671213
    },
    {
        "content": "<p>Great!</p>",
        "id": 266233943,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640671303
    },
    {
        "content": "<p>Is there a way to redefine the parser for an attribute? If we want to change its features for example, can we define a new parser and have it overshadow the old one?</p>",
        "id": 266234014,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640671373
    },
    {
        "content": "<p>In theory yes, but I think that syntax overloading causes problems bad enough that we've tried to make sure that there is no overlap between mathlib syntax and core syntax</p>",
        "id": 266234108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671495
    },
    {
        "content": "<p>but I haven't experimented with it too much</p>",
        "id": 266234128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671541
    },
    {
        "content": "<p>That's good to know</p>",
        "id": 266234200,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640671642
    },
    {
        "content": "<p>The issues I'm aware of don't seem to appear if you set <code>priority := high</code> on the new notation</p>",
        "id": 266234259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671725
    },
    {
        "content": "<p>so perhaps that is sufficient</p>",
        "id": 266234260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640671733
    },
    {
        "content": "<p>That makes sense. It does limit the ability of a user of the library to play the same trick again unfortunately</p>",
        "id": 266234478,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640672004
    },
    {
        "content": "<p>You can use numbers too, it looks like <code>low := 100, default := 1000, high := 10000</code></p>",
        "id": 266234644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640672183
    },
    {
        "content": "<p>nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 266234652,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1640672196
    },
    {
        "content": "<p>Or even <code>high+1</code></p>",
        "id": 266240555,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640679551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266198828\">said</a>:</p>\n<blockquote>\n<p>Note that you cannot scope macro expansion, you can only scope a higher priority parser.</p>\n</blockquote>\n<p>What do you mean by this? You most certainly can have a <code>@[scoped macro]</code> attribute and <code>scoped macro_rules</code> (and, of course, <code>local</code> versions as well) which limit the scope of a macro expansion?</p>",
        "id": 266243703,
        "sender_full_name": "Mac",
        "timestamp": 1640682911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266234644\">said</a>:</p>\n<blockquote>\n<p>You can use numbers too, it looks like <code>low := 100, default := 1000, high := 10000</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266240555\">said</a>:</p>\n<blockquote>\n<p>Or even <code>high+1</code></p>\n</blockquote>\n<p>Or <code>default+default</code> if you want to define a new default (that is above <code>default</code> and below <code>high</code> and still gives you the natural lows and highs of <code>default+low</code> and <code>default+high</code>).</p>",
        "id": 266243826,
        "sender_full_name": "Mac",
        "timestamp": 1640683036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266243703\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266198828\">said</a>:</p>\n<blockquote>\n<p>Note that you cannot scope macro expansion, you can only scope a higher priority parser.</p>\n</blockquote>\n<p>What do you mean by this? You most certainly can have a <code>@[scoped macro]</code> attribute and <code>scoped macro_rules</code> (and, of course, <code>local</code> versions as well) which limit the scope of a macro expansion?</p>\n</blockquote>\n<p>Oh, this works!  I didn't expect this to work because <code>scoped macro</code> always registers the macro expansion globally (which makes sense).</p>",
        "id": 266258053,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640696971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266199379\">said</a>:</p>\n<blockquote>\n<p>\"Already in development\" might raise expectations too much.  IIRC <span class=\"user-mention silent\" data-user-id=\"235513\">Daniel Fabian</span> was looking into it, but I have zero ideas on the timeline.  I wouldn't count on it supporting heterogeneous operations, but this might just be a question of engineering effort and user demand.</p>\n</blockquote>\n<p>I have very limited time as of late, unfortunately. My private circumstances have changed quite a lot since I last did a larger contribution. It is still on my radar but my coding time on Lean was essentially 0 for the last few months. I'm happy to share what I was working on if anyone cares, but it's definitely not in any useful state yet.</p>",
        "id": 268206655,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1642366934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20mkSimpAttr/near/266199027\">said</a>:</p>\n<blockquote>\n<p>Ah! Yes you're right. I wasn't aware it was already in development. Do you know if we can expect it to support associativity of heterogenous operations like arrow composition in category theory?</p>\n</blockquote>\n<p>what I was looking into was transferring results from an AC rewrite paper to lean. There there were three kinds of operators. Comm, AssocComm and neither. It would not exploit general associativity, I don't think. At least the paper I looked at wouldn't.</p>",
        "id": 268206969,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1642367297
    },
    {
        "content": "<p>That's interesting! Can you share the paper and what you have so far?</p>",
        "id": 268207227,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1642367648
    },
    {
        "content": "<p><a href=\"https://link.springer.com/chapter/10.1007/978-3-540-25979-4_5\">https://link.springer.com/chapter/10.1007/978-3-540-25979-4_5</a> it's based on this paper.</p>",
        "id": 268207523,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1642368109
    },
    {
        "content": "<p>So far, I've been mostly working on coding up the paper to understand the details. Mapping it to lean is not trivial so understanding the algo in detail first was what Leo suggested</p>",
        "id": 268207611,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1642368208
    }
]