[
    {
        "content": "<p>What does this error mean, I copied this code straight from Lean json parser, but it doesn't compile in my own little sample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">Json</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">formatMarkdown</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">null</span>       <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"null\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"true\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"false\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"n\">s</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">s.toString</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>          <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"error\"</span>\n</code></pre></div>\n<p>saying <code>invalid pattern, constructor or constant marked with '[matchPattern]' expected</code> on the <code>bool true</code>, if I remove those it says the same thing on <code>num s</code>? What am I doing wrong?</p>",
        "id": 298499033,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663029230
    },
    {
        "content": "<p>Seems like a namespace issue? If you add <code>.</code> in front of the patterns (<code>.bool true</code>) does it work?</p>",
        "id": 298499305,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663029465
    },
    {
        "content": "<p>I'm not sure what the <code>open Lean (Json)</code> syntax actually does, but if the constructors aren't in top-level scope then you need to qualify them with a <code>.</code>, either specifying the namespace they come from (<code>Json.null</code> etc) or letting Lean fill in the namespace based on <code>j</code>'s type (<code>.null</code> etc)</p>",
        "id": 298499431,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663029587
    },
    {
        "content": "<p>I'm guessing here that Lean is interpreting the first line as a variable pattern, not a constructor, which is why it doesn't complain about the first case?</p>",
        "id": 298499524,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663029662
    },
    {
        "content": "<p>The <code>open Lean (Json)</code> syntax means to make <em>only</em>  <code>Lean.Json</code> available by the short name <code>Json</code>, not any of the <code>Lean.Json.foo</code> constructors</p>",
        "id": 298499546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663029694
    },
    {
        "content": "<p><code>open Lean Json</code> is closer to what you want</p>",
        "id": 298499558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663029707
    },
    {
        "content": "<p>Oh, you are right, if I fully qualify the cases then it works fine.  Super confusing error message...  so this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Json.null</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected null type\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Json.bool</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected boolean type\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Json.num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected number type\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Json.str</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected string type\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Json.arr</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected array type\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Json.obj</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Yay\"</span>\n</code></pre></div>",
        "id": 298499629,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663029749
    },
    {
        "content": "<p>Even if I just add dots it works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">null</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected null type\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected boolean type\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected number type\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected string type\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Error: unexpected array type\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Yay\"</span>\n</code></pre></div>",
        "id": 298499648,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1663029781
    },
    {
        "content": "<p>but if you are not in <code>namespace Lean.Json</code>, you still won't be able to write <code>bool</code> because there is an ambiguity with the <code>_root_.bool</code> definition</p>",
        "id": 298499656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663029783
    },
    {
        "content": "<p>Certainly using prefix dots is the easiest way to avoid messing about with namespaces / open</p>",
        "id": 298499691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663029818
    },
    {
        "content": "<p>And it's also just good style to always have the <code>.</code>, to avoid Lean re-interpreting a constructor pattern as a variable pattern. Seems very worth it for one extra character</p>",
        "id": 298499771,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663029867
    }
]