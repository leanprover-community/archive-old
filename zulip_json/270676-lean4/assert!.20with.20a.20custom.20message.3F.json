[
    {
        "content": "<p>anyone know off hand if I can custom ize the message reported by assert! in my lean unit tests?  I want to do something like this: <code>  assert! ok; s!\"the results are not as expected: {results}\"</code>.  I assume this is the <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/BuiltinNotation.lean#L149\">implementation</a>, but how would I modify this to allow a second argument to customize the message?</p>",
        "id": 293030077,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660264053
    },
    {
        "content": "<p>That syntax is already taken by do notation, but you could do <code>assert! cond | msg</code>, which is what we are using in mathport</p>",
        "id": 293031348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660265312
    },
    {
        "content": "<p>There are two parts to each piece of syntax: the <code>syntax</code> and the <code>elab</code>/<code>macro</code>. For builtin syntax the <code>syntax</code> part is a bit verbose and found mostly in the <code>Lean/Parser/Term.lean</code>, <code>Lean/Parser/Tactic.lean</code>, <code>Lean/Parser/Command.lean</code> files</p>",
        "id": 293031479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660265456
    },
    {
        "content": "<p>what you found is the <code>macro</code> for assert</p>",
        "id": 293031494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660265470
    },
    {
        "content": "<p>You can get from the macro to the syntax by clicking on the name in the attribute, in this case <code>@[builtinMacro Lean.Parser.Term.assert]</code></p>",
        "id": 293031599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660265540
    }
]