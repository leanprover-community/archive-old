[
    {
        "content": "<p>btw, the syntax in the Metaprogramming book's chapter on <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/pretty-printing.md\">Pretty Printing</a> seems to be exactly what I was looking for.</p>",
        "id": 296998888,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662215055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 296998905,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662215063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> See <a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html#tracing\">https://leanprover.github.io/lean4/doc/dev/debugging.html#tracing</a>. It would probably be good to incorporate this information into the metaprogramming book as well</p>",
        "id": 296999050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1662215144
    },
    {
        "content": "<p>FWIW, there is already a general issue created for this <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/issues/67\">here</a> and a page on the <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/options.md\">options</a> mechanism in general.</p>",
        "id": 297013173,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662222642
    },
    {
        "content": "<p>It turns out the following would have enabled me to see the macro expansion and possibly a specific addition to the docs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.raw</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.step</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span><span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- error: unknown identifier 'n'</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'n'</span>\n<span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"n\">code</span> <span class=\"n\">because</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">contains</span> <span class=\"n\">errors</span>\n\n<span class=\"o\">[</span><span class=\"n\">Elab.step</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"o\">(</span><span class=\"n\">rw_term</span> <span class=\"s2\">\"`[rw|\"</span> <span class=\"o\">(</span><span class=\"n\">rw_term__1</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">HTerm.var._</span><span class=\"bp\">@.</span><span class=\"n\">INet._hyg.2877</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n        <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">result</span><span class=\"o\">]</span> <span class=\"n\">sorryAx</span> <span class=\"n\">String</span> <span class=\"n\">true</span>\n    <span class=\"o\">[</span><span class=\"n\">result</span><span class=\"o\">]</span> <span class=\"n\">HTerm.var</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"n\">String</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">result</span><span class=\"o\">]</span> <span class=\"n\">HTerm.var</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"n\">String</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 297025409,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1662231067
    }
]