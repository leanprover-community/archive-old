[
    {
        "content": "<p>Do we have an absolute value function for float right now? I grepped around in the Lean4 repo for <code>abs</code> <code>absolute</code> and <code>fabs</code> a bit but couldn't find anything.</p>",
        "id": 262585765,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637759337
    },
    {
        "content": "<p>Shall we create a new repo to hold some common utility functions for Lean types (as standard library may not be Lean 4's current focus)? It's very distractive to think about their implementation each time when we need them.</p>",
        "id": 262600004,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1637766305
    },
    {
        "content": "<p>I am more than happy to contribute an arbitrary assortment of... stuff that I write.</p>",
        "id": 262601137,
        "sender_full_name": "František Silváši",
        "timestamp": 1637766883
    },
    {
        "content": "<p>Yeah having some external (collection) of libraries of things one might expect in Std seems reasonable while the focus is on mathlib4.</p>",
        "id": 262601494,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637767067
    },
    {
        "content": "<p>Creating a stop gap <code>lean4-stdlib</code>  repository seems like a great idea to me! (I have some stuff that may be worth tossing in there as well.)</p>",
        "id": 262604148,
        "sender_full_name": "Mac",
        "timestamp": 1637768292
    },
    {
        "content": "<p>Sooo I guess the question that remains is who makes the repo and where?</p>",
        "id": 262619609,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637775580
    },
    {
        "content": "<p>I would suggest that folks put such things in <code>mathlib4</code> for the present. It will get split up into more packages when it reaches critical mass - I think there is plenty of space for such a thing in lean 4 - but for now it simplifies maintenance to keep things together, and at least for now the concerns about mathlib being too big don't apply since the vast majority of mathlib is still not ported</p>",
        "id": 262620091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637775825
    },
    {
        "content": "<p>Do these utility functions meet the purpose of <code>mathlib4</code>? </p>\n<p>I think most of the stuff is about general programming (e.g. <code>Float.abs</code>, <code>String.isInfixOf</code>), so a \"stdgap\" and <code>mathlib4</code> will be independent of each other. </p>\n<p>There is also a difference in the pace of development: a stop gap means a lot of issues for discussion and we may \"port\" a large number of functions from other languages. </p>\n<p>We may also need a simple doc (which may go against the previous discussed <code>doc-gen4</code>, which <code>mathlib4</code> may use in the future), which can show users what it provides and how these functions are similar to those in other languages (e.g. <code>Float.abs</code> to <code>fabs</code>, <code>String.isInfixOf</code> to Haskell's <code>isInfixOf</code> and other languages' <code>String.contains</code>), so programmers can quickly find what they need. A simple lake script would suffice.</p>",
        "id": 262660992,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1637807290
    },
    {
        "content": "<blockquote>\n<p>I think most of the stuff is about general programming (e.g. Float.abs, String.isInfixOf), so a \"stdgap\" and mathlib4 will be independent of each other. </p>\n</blockquote>\n<p>I've said this on many occasions, but mathlib was always intended to be an std-like library. The math stuff came later, and came to dominate due to our particular clientele, but mathlib already contains lots of programmy stuff like lists, hashmaps and other data structures. For various reasons, I believe that mathlib4 will be able to deliver on the CS goals much more effectively than mathlib could, so expect to see much more of this programmy stuff in mathlib4.</p>",
        "id": 262662186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637809118
    },
    {
        "content": "<blockquote>\n<p>There is also a difference in the pace of development: a stop gap means a lot of issues for discussion and we may \"port\" a large number of functions from other languages. </p>\n</blockquote>\n<p>I don't see how this conflicts with mathlib4's model at all.</p>\n<blockquote>\n<p>We may also need a simple doc (which may go against the previous discussed doc-gen4, which mathlib4 may use in the future), which can show users what it provides and how these functions are similar to those in other languages (e.g. Float.abs to fabs, String.isInfixOf to Haskell's isInfixOf and other languages' String.contains), so programmers can quickly find what they need. A simple lake script would suffice.</p>\n</blockquote>\n<p>No, that sounds very much in scope for what we would want doc-gen4 to support. Doc-gen is not all that different from the documentation generators in other programming languages, and all the things you mention sound fairly standard as far as documentation goes, but don't really even need any support from the tool - you write what you want in the doc comment and it renders that.</p>",
        "id": 262662507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637809459
    },
    {
        "content": "<p>I loved contributing proofs of the validity of the natural number parser to mathlib, which is extremely CS and practical operational semantics, no deep mathematical content. It taught me a lot about how mathlib is set up to make any proving easier.</p>",
        "id": 262663322,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637810702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262620091\">said</a>:</p>\n<blockquote>\n<p>I would suggest that folks put such things in <code>mathlib4</code> for the present.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262662186\">said</a>:</p>\n<blockquote>\n<p>I've said this on many occasions, but mathlib was always intended to be an std-like library. The math stuff came later, and came to dominate due to our particular clientele, but mathlib already contains lots of programmy stuff like lists, hashmaps and other data structures.</p>\n</blockquote>\n<p>As I have stated elsewhere I am very much opposed to this proposal. I think the situation should be the other way around. The stdlib should be focused on the CS stuff with some maths sprinkled in when necessary / useful. Mathlib can then expand on this library in its own way.</p>\n<p>Some problems with sticking this stuff in mathlib:</p>\n<ul>\n<li>It does not abide by CS style in a lot of its code and it has linters to enforce this (e.g., braces).</li>\n<li>It  puts a lot of things into the root namespace that many user packages may not want (and would be forced to acquire if they wanted the stdlib and it was merged with mathlib) whereas the stdlib would have (most) everything under <code>Std</code> (fitting much better with standard CS packaging style)</li>\n<li>There would be a large clash in scope (with a hefty mix of expert mathematicians and computer scientists) that would be very confusing to  new users (a CS person would likely be put off by the mathematical branding and large amount of mathematics related PRs to such a joint repo). A split between mathlib and stdlib would keep the balance clearer (with mostly mathematicians and some CS people maintaining mathlib and mostly CS people and  maybe some mathematicians maintaining the stdlib).</li>\n</ul>\n<p>While I will grant that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is just suggesting to do this \"at present\" (and not all these criticism currently apply to mathlib4), I personally think it is starting off on the wrong foot and thought it worthwhile to mention why.</p>",
        "id": 262664303,
        "sender_full_name": "Mac",
        "timestamp": 1637812189
    },
    {
        "content": "<p>I didn't say mathlib, I said mathlib4, which is for the present a very different library</p>",
        "id": 262665201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637813373
    },
    {
        "content": "<p>Once we start moving material from mathlib to mathlib4 in bulk, we will need to split this material off. But importantly, the stuff to split off will not all be added stuff, at least half of it will be material currently in mathlib. So that's why I'm suggesting to mix it together and find a natural split point later, because the two don't coincide</p>",
        "id": 262665281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637813507
    },
    {
        "content": "<p>Even if a std++ library is developed as a separate package from lean's POV, I would still want it to be developmentally integrated with mathlib. For example, one would expect data structures in std++ being proven correct in mathlib, which puts some design constraints on the std++ stuff (e.g. no private, no <code>partial</code> except as a stopgap solution), plus any changes in one would have to be reflected in the other in order to preserve overall cohesiveness</p>",
        "id": 262665638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637814121
    },
    {
        "content": "<blockquote>\n<p>It does not abide by CS style in a lot of its code and it has linters to enforce this (e.g., braces).</p>\n</blockquote>\n<p>What is \"CS style\"? I want mathlib and std++ to follow the same style guide, determined based on how lean 4 syntax works and with consensus among <em>all</em> lean 4 users. Diverging styles helps no one and splits the ecosystem</p>",
        "id": 262665742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637814262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262665742\">said</a>:</p>\n<blockquote>\n<p>with consensus among <em>all</em> lean 4 users</p>\n</blockquote>\n<p>This is infeasible. I do not believe there is any way that we are going to get all users to agree on a single style to lint. Even Sebastian and Leo disagree on style in some areas (e.g., parentheses around the argument to <code>match</code>).</p>",
        "id": 262673287,
        "sender_full_name": "Mac",
        "timestamp": 1637824813
    },
    {
        "content": "<p>Furthermore, a lot of developers have very strong opinions on style. So while it may be feasible to get a consistent style for a single project with a clear lead team which can enforce the style on others (e.g., mathlib, the Lean core, etc.), once there are multiple packages with different lead maintainer, they are inevitably going to require different styles.</p>",
        "id": 262673386,
        "sender_full_name": "Mac",
        "timestamp": 1637824962
    },
    {
        "content": "<p>It's certainly possible to have a language style guide, even when there are many users. Just consider the style guide of any major language (rustfmt comes to mind). Plenty of people will disagree on the fine points, but not enough to make the proposition worthless</p>",
        "id": 262673511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825147
    },
    {
        "content": "<p>Given that we will have a round-tripping pretty printer, and at least early on the entirety of the mathlib port will be run through that pretty printer, in some sense the style guide should basically be documentation of the pretty printer.</p>",
        "id": 262673567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637825203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  true, however, most language style guides tend to be rather flexible and general and linters based around them are customizable whereas most project style guides are much more specific and fixed.</p>",
        "id": 262673581,
        "sender_full_name": "Mac",
        "timestamp": 1637825244
    },
    {
        "content": "<p>Frankly I couldn't care less about where the braces go. On the other hand, the uniformity in mathlib is just wonderful for easy reading of others' code.</p>",
        "id": 262673592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637825276
    },
    {
        "content": "<p>I, on the other hand, care immensely about where braces go (to a certain extent).</p>",
        "id": 262673633,
        "sender_full_name": "Mac",
        "timestamp": 1637825297
    },
    {
        "content": "<p>that's <em>entirely</em> language dependent. Style guides vary hugely in the extent to which they allow flexibility</p>",
        "id": 262673638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825306
    },
    {
        "content": "<p>some are just AST pretty printers</p>",
        "id": 262673643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825316
    },
    {
        "content": "<p>and I think lean will be one of these</p>",
        "id": 262673645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825323
    },
    {
        "content": "<p>Obviously an inflexible pretty printer has to be very good, or else you will get riots in the streets</p>",
        "id": 262673670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262673638\">said</a>:</p>\n<blockquote>\n<p>that's <em>entirely</em> language dependent. Style guides vary hugely in the extent to which they allow flexibility</p>\n</blockquote>\n<p>true, but they are also varying hugely as to whether programs within the language follow the style guide (e.g., Python).</p>",
        "id": 262673726,
        "sender_full_name": "Mac",
        "timestamp": 1637825430
    },
    {
        "content": "<p>People who are 'opinionated' about style will generally want to opt out of the whole endeavor, but they still have to play by the rules when it comes to contributing to \"that one big project\"</p>",
        "id": 262673741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825452
    },
    {
        "content": "<p>Yes, hence why I don't contribute to mathlib. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> (That is half a joke and half not.)</p>",
        "id": 262673768,
        "sender_full_name": "Mac",
        "timestamp": 1637825522
    },
    {
        "content": "<p>I would, however, very much like to contribute to the standard library.</p>",
        "id": 262673827,
        "sender_full_name": "Mac",
        "timestamp": 1637825581
    },
    {
        "content": "<p>While it is possible I am alone on this matter, I suspect that is unlikely the case.</p>",
        "id": 262673860,
        "sender_full_name": "Mac",
        "timestamp": 1637825617
    },
    {
        "content": "<p>My guess is that you <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> are not going to be satisfied with any style guide we come up with, even if you are taking part in the discussion, so I think you should approach this with the understanding that you won't be using the style guide and don't try to filibuster things too much</p>",
        "id": 262673865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> And I would do so, <em>if</em> we were just talking about mathlib. However, the current trend of this discussion seems to imply that you are suggesting enforcing this style guide on all core Lean projects (of which, I should note, Lake is currently one), which is a very different matter.</p>",
        "id": 262673962,
        "sender_full_name": "Mac",
        "timestamp": 1637825719
    },
    {
        "content": "<p>but the big projects absolutely have to be using the style guide, I don't see how that's even an option</p>",
        "id": 262674037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825775
    },
    {
        "content": "<p>Hence my argument about what the style guide should be...</p>",
        "id": 262674057,
        "sender_full_name": "Mac",
        "timestamp": 1637825800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262662186\">said</a>:</p>\n<blockquote>\n<p>I've said this on many occasions, but mathlib was always intended to be an std-like library.</p>\n</blockquote>\n<p>I have another question, do you think these functions will eventually go to <code>mathlib4</code> rather than <code>Std</code>(I think it's the latter one)? A separate repo may be easier to cope with when lean is moving towards a better <code>Std</code>, without changing the <code>mathlib4</code></p>",
        "id": 262674063,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1637825813
    },
    {
        "content": "<p>Not necessarily all lean projects, just the big ones that need community support</p>",
        "id": 262674076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> <code>Std</code> is in a bit of an awkward position because it is part of the lean bootstrap. I don't know whether what I'm calling std++ will be able to merge with <code>Std</code>, but it would be nice if we could do something like that</p>",
        "id": 262674172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that  was previously the plan as discussed in the original proposal for the standard library (<a href=\"https://github.com/leanprover/lean4/issues/528\">#528</a>)</p>",
        "id": 262674237,
        "sender_full_name": "Mac",
        "timestamp": 1637825994
    },
    {
        "content": "<p>So as I see it now, in the far future there will probably be three packages, for <code>Std</code>, <code>StdExtra</code> and <code>Mathlib</code> (<code>Mathlib</code> might also break into more packages, we'll see), unless we find a way to merge <code>StdExtra</code> into <code>Std</code></p>",
        "id": 262674240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637825995
    },
    {
        "content": "<p><code>StdExtra</code> might also be split into more packages if needed</p>",
        "id": 262674299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what is the problem with the <code>stdlib</code> just adding more stuff to <code>Std</code>?</p>",
        "id": 262674306,
        "sender_full_name": "Mac",
        "timestamp": 1637826027
    },
    {
        "content": "<p>Well, last time we talked about this you were pretty adamantly against that kind of namespace pollution</p>",
        "id": 262674345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826089
    },
    {
        "content": "<p>I do think that it would make more sense for the current <code>Std</code> to be renamed to <code>StdCore</code> and <code>StdExtra</code> -&gt; <code>Std</code> though</p>",
        "id": 262674434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826155
    },
    {
        "content": "<p>but none of this changes my views on integration between <code>Std</code> and <code>Mathlib</code></p>",
        "id": 262674460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826191
    },
    {
        "content": "<p>this is not a license to have it run off and be completely disconnected from mathlib</p>",
        "id": 262674476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826214
    },
    {
        "content": "<p>Yes, but the idea here is that <code>stdlib</code> will (be the canonical owner of <code>Std</code>, so I don't have a problem with it in this case. Also as a core Lean library, I am willingly to give it more leeway than I would a user library.</p>",
        "id": 262674489,
        "sender_full_name": "Mac",
        "timestamp": 1637826224
    },
    {
        "content": "<p>Are you saying that <code>StdExtra</code> should also be shipped with lean?</p>",
        "id": 262674573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826283
    },
    {
        "content": "<p>Ideally, Lake would also eventually depend on the <code>stdlib</code> (or at the very least make it available in the lakefile).</p>",
        "id": 262674588,
        "sender_full_name": "Mac",
        "timestamp": 1637826296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  that was the original plan, yes (again see <a href=\"https://github.com/leanprover/lean4/issues/528\">#528</a>).</p>",
        "id": 262674611,
        "sender_full_name": "Mac",
        "timestamp": 1637826322
    },
    {
        "content": "<p>I suppose that can work, but it's going to be pretty hefty</p>",
        "id": 262674629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826350
    },
    {
        "content": "<p>Most languages ship with a standard library, I don't think Lean doing would be all too weird.</p>",
        "id": 262674682,
        "sender_full_name": "Mac",
        "timestamp": 1637826385
    },
    {
        "content": "<p>well, languages differ on how full featured they want the standard library to be. Are we following the java/python model or the rust model?</p>",
        "id": 262674701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826419
    },
    {
        "content": "<p>The advantage of the <code>StdExtra</code> package is that you can basically choose either one</p>",
        "id": 262674746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826479
    },
    {
        "content": "<p>I would assume closer to the Java model. Especially given the current less than pure modularity of Lean.</p>",
        "id": 262674789,
        "sender_full_name": "Mac",
        "timestamp": 1637826495
    },
    {
        "content": "<p>but it's true that lakefiles have some unique constraints that would encourage putting more stuff in the base package</p>",
        "id": 262674825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637826549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262674588\">said</a>:</p>\n<blockquote>\n<p>Ideally, Lake would also eventually depend on the <code>stdlib</code> (or at the very least make it available in the lakefile).</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262674825\">said</a>:</p>\n<blockquote>\n<p>but it's true that lakefiles have some unique constraints that would encourage putting more stuff in the base package</p>\n</blockquote>\n<p>It's important to make all packages(build dependencies) available  in the lakefile (although the current import mechanism does not support this). So if there is a <code>StdExtra</code>, it doesn't matter whether it's shipped with lean (if build dependency is available).</p>",
        "id": 262677128,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1637828529
    },
    {
        "content": "<p>All packages? That's a big chicken and egg problem</p>",
        "id": 262677217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637828615
    },
    {
        "content": "<p>I would like to keep lakefiles to a bootstrap-like collection of packages only. You shouldn't need that much infrastructure to describe what you want to build. Worst case scenario you describe how to download some package to power a second-tier lakefile that can do fancier stuff</p>",
        "id": 262677384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637828722
    },
    {
        "content": "<p>But what if when e.g. we want to parse markdown, run cargo, or call emscripten as build process or lake script? It's ridiculous to rewrite everything in a single lakefile, which should be a package otherwise.</p>",
        "id": 262677622,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1637828888
    },
    {
        "content": "<p>isn't the lakefile for that just a bunch of \"call process X, call process Y\" etc?</p>",
        "id": 262677837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637829067
    },
    {
        "content": "<p>probably you won't be able to parse markdown with the default set of packages but like I said you can have a lakefile to build another lakefile</p>",
        "id": 262677947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637829129
    },
    {
        "content": "<p>the point is that we don't want to have to resolve dependencies in order to resolve dependencies</p>",
        "id": 262678043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637829233
    },
    {
        "content": "<p>the lakefile should be as \"declarative\" as possible, and not do too much fancy stuff</p>",
        "id": 262678109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637829261
    },
    {
        "content": "<p>Let's please not have the monstrosities that <code>build.sbt</code> seems to inevitably turn into.</p>",
        "id": 262682514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637831887
    },
    {
        "content": "<p>What's build.sbt?</p>",
        "id": 262682667,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637831990
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Sbt_(software)\">https://en.wikipedia.org/wiki/Sbt_(software)</a></p>",
        "id": 262683956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637832852
    },
    {
        "content": "<p>oh, here's a fun fact:</p>\n<blockquote>\n<p>The sbt project uses sbt to build itself, and considers that dogfooding is a positive feature. To the Debian project, however, that is considered a circular dependency, that they try to minimize. As a result, sbt is not yet in Debian.</p>\n</blockquote>\n<p>That's definitely what you don't want in a build tool</p>",
        "id": 262684017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637832917
    },
    {
        "content": "<p>I wonder if sbt supports building projects that require themselves</p>",
        "id": 262684129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637832989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Absolute.20value.20for.20Float/near/262684017\">said</a>:</p>\n<blockquote>\n<p>oh, here's a fun fact:</p>\n<blockquote>\n<p>The sbt project uses sbt to build itself, and considers that dogfooding is a positive feature. To the Debian project, however, that is considered a circular dependency, that they try to minimize. As a result, sbt is not yet in Debian.</p>\n</blockquote>\n<p>That's definitely what you don't want in a build tool</p>\n</blockquote>\n<p>Are you sure? I use Lake to build Lake these days. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 262687371,
        "sender_full_name": "Mac",
        "timestamp": 1637835093
    },
    {
        "content": "<p>It appears even good old GNU make builds itself: <a href=\"https://git.savannah.gnu.org/cgit/make.git/tree/README.git\">https://git.savannah.gnu.org/cgit/make.git/tree/README.git</a> so I don't think that should be tooo much of an issue?</p>",
        "id": 262688269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637835648
    },
    {
        "content": "<blockquote>\n<p>Let's please not have the monstrosities that build.sbt seems to inevitably turn into.</p>\n</blockquote>\n<p>I've maintained a largeish scala project for a couple of years, and in my experience the main problem with sbt is not that people write large build scripts but the fact that the sbt dsl sucks.  Virtually nothing works like you'd expect from vanilla scala.  There's dynamically scoped variables which have several namespaces (project, target, etc.).  Go-to-definition is broken because it takes you to the variable declaration instead of anything useful.  Dependencies are implicit (iirc?).  Pretty much everything (writing files, resolving paths, etc.) uses sbt-specific functions and not Scala ones.  Did I mention that there are two+ different dsls? See here for a longer discussion on the many ways that sbt sucks: <a href=\"https://www.lihaoyi.com/post/SowhatswrongwithSBT.html\">https://www.lihaoyi.com/post/SowhatswrongwithSBT.html</a></p>\n<p>In other words, as long as lakefiles remain reasonably close to vanilla lean and all the standard tooling works then I'm confident that even large lakefiles can stay maintainable.</p>",
        "id": 262691503,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637837703
    }
]