[
    {
        "content": "<p>Not completely sure if this is doing the right thing though from inspection of source code.</p>",
        "id": 275816020,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647616416
    },
    {
        "content": "<p>If there are no dependent arrows, you can just fold over <code>mkArrow</code></p>",
        "id": 275816051,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647616427
    },
    {
        "content": "<p>Choice between foldl and foldr left as an exercise to the reader :)</p>",
        "id": 275816188,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647616467
    },
    {
        "content": "<p>what does mkForallFVars do?</p>",
        "id": 275816221,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647616481
    },
    {
        "content": "<p>In this context there can be dependency</p>",
        "id": 275816620,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647616666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> It takes an array of <code>Expr.fvar</code>s and a term that may contain those fvars, and binds them as universal quantifiers</p>",
        "id": 275816664,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647616681
    },
    {
        "content": "<p>(and the fvars' types may themselves reference previous fvars, as usual)</p>",
        "id": 275816830,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647616746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Then it's not clear what your <code>es</code> contains</p>",
        "id": 275816907,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647616776
    },
    {
        "content": "<p>Actually, the array passed to <code>mk{Forall,Lambda,Let}FVars</code> may now also contain unassigned metavariables with a recent change. The name is not perfectly accurate.</p>",
        "id": 275817301,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647616927
    },
    {
        "content": "<p>Ooooh will it do a delayed abstraction in that case? (sorry for derailing your q <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> )</p>",
        "id": 275818042,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647617222
    },
    {
        "content": "<p>No problem at all.</p>\n<p>Folding with <code>mkArrow</code> seems to be working (kinda). But I'm still doing something wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Term.haveIdLhs'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">checkColGt</span> <span class=\"s2\">\"expected to be indented\"</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">simpleBinderWithoutType</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">)))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">Parser.Term.haveIdLhs'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">addToContext</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">getName</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"n\">this</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.getId</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">elabType</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">addToContext</span> <span class=\"o\">(</span><span class=\"n\">getName</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">es</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabBinders</span> <span class=\"n\">bs</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">es</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">es.foldrM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">eₗ</span> <span class=\"n\">e</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkArrow</span> <span class=\"n\">eₗ</span> <span class=\"n\">e</span><span class=\"bp\">ᵣ</span>\n  <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"c1\">-- case k</span>\n  <span class=\"c1\">-- ⊢ _uniq.4416 → _uniq.4418 → Nat</span>\n  <span class=\"c1\">-- k : _uniq.4416 → _uniq.4418 → Nat</span>\n  <span class=\"c1\">-- ⊢ True</span>\n</code></pre></div>",
        "id": 275818862,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647617521
    },
    {
        "content": "<p>If a function like <code>elabBinders</code> takes a closure instead of returning the value, you can assume there is usually a very good reason for that. In this case, because it returns an array of fvars (...bing!) that are only valid in the local context in which the closure is executed</p>",
        "id": 275819230,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647617661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> They are simply bound as if they were fvars. This behavior is mainly for the pattern matching compiler that needs to convert unsolved metavariables into pattern variables. Usually you'll want to solve all metavariables :) .</p>",
        "id": 275819571,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647617800
    },
    {
        "content": "<p>See also <code>elabForall</code> for a very simple example of <code>elabBinders</code>+<code>mkForallFVars</code></p>",
        "id": 275819752,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647617892
    },
    {
        "content": "<p>Now I'm running into some monadic trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Term.haveIdLhs'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">checkColGt</span> <span class=\"s2\">\"expected to be indented\"</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">simpleBinderWithoutType</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">)))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">Parser.Term.haveIdLhs'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">addToContext</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">getName</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"n\">this</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.getId</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">elabType</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">addToContext</span> <span class=\"o\">(</span><span class=\"n\">getName</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">Elab.Term.elabBinders</span> <span class=\"n\">bs</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">es.foldrM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">eₗ</span> <span class=\"n\">e</span><span class=\"bp\">ᵣ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkArrow</span> <span class=\"n\">eₗ</span> <span class=\"n\">e</span><span class=\"bp\">ᵣ</span>\n    <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"n\">e</span>\n    <span class=\"c1\">-- type mismatch</span>\n    <span class=\"c1\">--   Mathlib.Tactic.addToContext (Syntax.getId n) e</span>\n    <span class=\"c1\">-- has type</span>\n    <span class=\"c1\">--   TacticM Unit : Type</span>\n    <span class=\"c1\">-- but is expected to have type</span>\n    <span class=\"c1\">--   Elab.TermElabM Unit : Type</span>\n</code></pre></div>",
        "id": 275820545,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647618281
    },
    {
        "content": "<p><code>addToContext</code> needs to run in <code>TacticM</code> :(</p>",
        "id": 275820590,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647618303
    },
    {
        "content": "<p>So an example of the syntax you are matching is something like <code>have f (a : α) (b : β(a)) : γ a b</code>.<br>\n<code>elabBinders bs</code> will add <code>a</code> and <code>b</code> to the TermElabM's context. <code>es</code> is going to be the fvars <code>[a,b]</code>so I don't think mkArrow is the right answer here. I think you want <code>mkForallFVar es (← elabType t)</code>.</p>",
        "id": 275822102,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647618979
    },
    {
        "content": "<p>Once you have made <code>e</code> to be  <code>(a : α) → (b : β(a)) → γ a b</code>, you are done with the context with <code>a,b</code> so you can return <code>e</code> in the innermost <code>do</code> block. Then add e to the context in the outer do block.</p>",
        "id": 275822357,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647619094
    },
    {
        "content": "<p>something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabBinders</span> <span class=\"n\">bs</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkForallFvars</span> <span class=\"n\">es</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 275822615,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647619179
    },
    {
        "content": "<p>That worked like a charm:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabBinders</span> <span class=\"n\">bs</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">es</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>(just fixed some typos)</p>",
        "id": 275823065,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647619299
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"c1\">-- case k</span>\n  <span class=\"c1\">-- ⊢ Nat → Nat → Nat</span>\n  <span class=\"c1\">-- k : Nat → Nat → Nat</span>\n  <span class=\"c1\">-- ⊢ True</span>\n</code></pre></div>\n<p>Thanks! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 275823304,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647619368
    },
    {
        "content": "<p>Yeah the tricky part is making sure that everything is running in the right context.</p>",
        "id": 275823327,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647619375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 275823682,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647619501
    },
    {
        "content": "<p>Can you check this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 275823768,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647619532
    },
    {
        "content": "<p>ah no nevermind because it is putting the goals the other way round so it won't work</p>",
        "id": 275824057,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647619631
    },
    {
        "content": "<p>it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"c1\">-- case f</span>\n  <span class=\"c1\">-- ⊢ (a : α) → (b : β a) → γ a b</span>\n  <span class=\"c1\">-- f : (a : α) → (b : β a) → γ a b</span>\n  <span class=\"c1\">-- ⊢ True</span>\n</code></pre></div>",
        "id": 275824638,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647619810
    },
    {
        "content": "<p>FYI that's not what it's supposed to do exactly; the metavariable for the first goal should be created inside the <code>elabBinders</code> context</p>",
        "id": 275838879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647625573
    },
    {
        "content": "<p>Alright, to keep the scopes clean, we can continue the discussion specific to the tactic in the <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275569867\">mathlib4 stream's thread</a></p>",
        "id": 275846501,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647629259
    }
]