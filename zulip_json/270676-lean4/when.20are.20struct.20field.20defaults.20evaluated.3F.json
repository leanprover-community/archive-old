[
    {
        "content": "<p>I'm trying to understand default values for struct fields.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- a default field starting with `by` is apparently evaluated lazily:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- no error</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- as expected, an error:</span>\n<span class=\"c1\">-- tactic 'rfl' failed, equality lhs</span>\n<span class=\"c1\">--  1</span>\n<span class=\"c1\">-- is not definitionally equal to rhs</span>\n<span class=\"c1\">--  2</span>\n\n<span class=\"c1\">-- so far, so good</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- error:</span>\n<span class=\"c1\">-- tactic 'rfl' failed, equality lhs</span>\n<span class=\"c1\">--  x</span>\n<span class=\"c1\">-- is not definitionally equal to rhs</span>\n<span class=\"c1\">--  y</span>\n\n\n<span class=\"c1\">-- why is the `by rfl` eagerly evaluated for `Bar` but not `Foo`?</span>\n<span class=\"c1\">-- Is there some special casing around top-level `by`?</span>\n</code></pre></div>",
        "id": 290407486,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658424418
    },
    {
        "content": "<p>I'm trying to read the code in <a href=\"https://github.com/leanprover/lean4/blob/b36b50adb2336cae9c7d9687eb9ebc679e82e427/src/Lean/Elab/Structure.lean\">https://github.com/leanprover/lean4/blob/b36b50adb2336cae9c7d9687eb9ebc679e82e427/src/Lean/Elab/Structure.lean</a> to understand why the top-level <code>by</code> is treated differently, but it's slow going.</p>",
        "id": 290407731,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658424565
    },
    {
        "content": "<blockquote>\n<p>Is there some special casing around top-level <code>by</code>?</p>\n</blockquote>\n<p>Yes, exactly that. You can blame me for that, Lean 3 had an... also questionable separate syntax <code>h : x = y . rfl</code> for it.</p>",
        "id": 290416032,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658428674
    },
    {
        "content": "<p>aha. And here is the parser for the special case: <a href=\"https://github.com/leanprover/lean4/blob/1f081ee6cb776b0dcf0de8aba0da04712d2867aa/src/Lean/Parser/Term.lean#L106\">https://github.com/leanprover/lean4/blob/1f081ee6cb776b0dcf0de8aba0da04712d2867aa/src/Lean/Parser/Term.lean#L106</a></p>",
        "id": 290504553,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658495860
    }
]