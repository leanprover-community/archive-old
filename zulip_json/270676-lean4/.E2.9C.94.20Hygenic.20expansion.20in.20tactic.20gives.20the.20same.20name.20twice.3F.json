[
    {
        "content": "<p>Hi! I'm not sure what we're doing wrong, but trying to use the hygenic macro system to generate fresh names for hypotheses we generate in a tactic, the expansion seems to give the same name twice. </p>\n<p>I tried to trim this down to an MWE, and I'm not sure how truly minimal this is, but it is the shortest I could get it to, I hope it is somewhat reasonable. In the code I try to instantiate for a given arrow term different applications with stuff in the environment and give the new applications fresh names, which ends up giving repeated names. I suspect it's user error and not a bug in the hygenic macro expansion, but I have no idea what it could be, maybe someone here has an idea? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">findMatchingExprs</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getLCtx</span>\n  <span class=\"n\">lctx.foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ldecl</span><span class=\"o\">:</span> <span class=\"n\">LocalDecl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ldecl_expr</span> <span class=\"o\">:=</span> <span class=\"n\">ldecl.toExpr</span>\n    <span class=\"k\">let</span> <span class=\"n\">ldecl_type</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inferType</span> <span class=\"n\">ldecl_expr</span>\n    <span class=\"n\">return</span> <span class=\"k\">if</span> <span class=\"n\">ldecl_type</span> <span class=\"bp\">==</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">ldecl.userName</span> <span class=\"o\">::</span> <span class=\"n\">accum</span> <span class=\"k\">else</span> <span class=\"n\">accum</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">addToCtxAndReturnName</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx_ident</span> <span class=\"o\">:=</span> <span class=\"n\">stx.getId</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">stx_ident.isAnonymous</span>\n    <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"n\">stx_ident</span>\n    <span class=\"k\">else</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;-</span>  <span class=\"o\">(</span><span class=\"n\">Lean.Elab.Tactic.elabTerm</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"n\">Option.none</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">s_type</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inferType</span> <span class=\"n\">s</span>\n      <span class=\"k\">let</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">someName</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId.toString</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\" name : {name}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getLCtx</span>\n      <span class=\"k\">match</span> <span class=\"n\">lctx.findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">name</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.define</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">s_type</span> <span class=\"n\">s</span>\n            <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.intro1P</span> <span class=\"n\">mvarIdNew</span>\n            <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n          <span class=\"n\">return</span> <span class=\"n\">name</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error: repeated name!\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"n\">arrow</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getLCtx</span>\n <span class=\"k\">let</span> <span class=\"n\">ar</span> <span class=\"bp\">&lt;-</span>  <span class=\"o\">(</span><span class=\"n\">Lean.Elab.Tactic.elabTerm</span> <span class=\"n\">arrow</span> <span class=\"o\">(</span><span class=\"n\">Option.none</span><span class=\"o\">))</span>\n <span class=\"k\">let</span> <span class=\"n\">ar_type</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">inferType</span> <span class=\"n\">ar</span>\n <span class=\"k\">match</span> <span class=\"n\">ar_type</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Expr.forallE</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">possibleInsts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">findMatchingExprs</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">applications</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Syntax</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">possibleInsts.mapM</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Name</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">i_stx</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[</span><span class=\"n\">mkIdent</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n        <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkApp</span> <span class=\"n\">arrow</span> <span class=\"n\">i_stx</span>\n        <span class=\"n\">return</span> <span class=\"n\">res</span>\n      <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">applications.foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"bp\">λ</span> <span class=\"n\">accum</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">addToCtxAndReturnName</span> <span class=\"n\">a</span>\n          <span class=\"n\">return</span> <span class=\"n\">name</span><span class=\"o\">::</span><span class=\"n\">accum</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">names</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"mwe needs ∀ as input\"</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">testArrows</span>\n  <span class=\"o\">(</span><span class=\"n\">arrow</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">g</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mwe</span> <span class=\"n\">arrow</span>\n  <span class=\"c1\">-- name : someName._@.mwe._hyg.662</span>\n  <span class=\"c1\">-- name : someName._@.mwe._hyg.662</span>\n  <span class=\"c1\">-- repeated name</span>\n</code></pre></div>\n<p>CC <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span></p>",
        "id": 284895168,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1654270711
    },
    {
        "content": "<p>Have you tried <a href=\"https://github.com/leanprover/lean4/blob/90baf14e82112f244ec8fe83f86853cad3c4d335/src/Lean/LocalContext.lean#L234\">getUnusedName</a>?</p>",
        "id": 284897259,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654271666
    },
    {
        "content": "<p>Yes, this is by design. The unit of hygiene is a macro call. Within a single macro, you are in a single logical scope, so you can combine multiple syntax quotations sharing variables. You can introduce new scopes using <code>withFreshMacroScope</code>. <a href=\"/user_uploads/3121/bA1Amqwq2myQ07LI2KZreA3C/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bA1Amqwq2myQ07LI2KZreA3C/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bA1Amqwq2myQ07LI2KZreA3C/image.png\"></a></div>",
        "id": 284898097,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654272063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Hygenic.20expansion.20in.20tactic.20gives.20the.20same.20name.20twice.3F/near/284897259\">said</a>:</p>\n<blockquote>\n<p>Have you tried <a href=\"https://github.com/leanprover/lean4/blob/90baf14e82112f244ec8fe83f86853cad3c4d335/src/Lean/LocalContext.lean#L234\">getUnusedName</a>?</p>\n</blockquote>\n<p>ahh, that sounds exactly like what I was looking for, thanks!</p>",
        "id": 284899023,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1654272450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 284899036,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654272457
    }
]