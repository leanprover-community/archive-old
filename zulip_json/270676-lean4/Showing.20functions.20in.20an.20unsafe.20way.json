[
    {
        "content": "<p>I wonder if there is a way to hack lean to convert functions into strings.<br>\nIn duck type systems this can be done fairly easily, e.g. Python</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">fresh</span><span class=\"p\">():</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">fresh</span> <span class=\"o\">=</span> <span class=\"n\">fresh</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LC</span><span class=\"p\">:</span>\n    <span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"s2\">\"LC\"</span>\n    <span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"s2\">\"LC\"</span>\n    <span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"s2\">\"LC\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Internal use.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__rrshift__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n        <span class=\"n\">tm</span> <span class=\"o\">=</span> <span class=\"n\">LC</span><span class=\"p\">(</span><span class=\"s2\">\"Lam\"</span><span class=\"p\">)</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">var</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">tm</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">:</span><span class=\"s2\">\"LC\"</span><span class=\"p\">):</span>\n        <span class=\"n\">tm</span> <span class=\"o\">=</span> <span class=\"n\">LC</span><span class=\"p\">(</span><span class=\"s2\">\"App\"</span><span class=\"p\">)</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">fun</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">untangle</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">tm</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">tm</span> <span class=\"o\">=</span> <span class=\"n\">LC</span><span class=\"p\">(</span><span class=\"s2\">\"Var\"</span><span class=\"p\">)</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"n\">tm</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">match</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"k\">case</span> <span class=\"s2\">\"Var\"</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span>\n            <span class=\"k\">case</span> <span class=\"s2\">\"Lam\"</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"si\">}</span><span class=\"s2\">. </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"k\">case</span> <span class=\"s2\">\"App\"</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fun</span><span class=\"si\">}</span><span class=\"s2\">) </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"k\">case</span> <span class=\"k\">_</span><span class=\"p\">:</span>\n                <span class=\"k\">assert</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">untangle</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">,</span> <span class=\"n\">LC</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">term</span>\n    <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">fresh</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">var</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">untangle</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">(</span><span class=\"n\">LC</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)))</span>\n\n<span class=\"n\">term</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">untangle</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Of course one cannot distinguish judgementally equal terms without meta stuff, but restricting to simply-typed normal forms, can we do that?</p>",
        "id": 313450801,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669970877
    },
    {
        "content": "<p>I'm trying to hack into Haskell using stuff like <code>unsafeCoerce</code></p>",
        "id": 313451007,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669970949
    },
    {
        "content": "<p>It's not really even hacking, the APIs are designed to support this already and you don't need unsafe code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"decl_to_string\"</span> <span class=\"n\">decl</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">decl.getId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">val</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">decl_to_string</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">bar</span>\n<span class=\"c1\">-- def bar : String :=</span>\n<span class=\"c1\">-- \"fun x =&gt; x + x\"</span>\n</code></pre></div>",
        "id": 313454654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669972241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is there a shortcut for the format/paren/delab combo here? I was surprised not to find it</p>",
        "id": 313454749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669972277
    },
    {
        "content": "<p>Well yes but shouldn't that count as \"meta stuff\"?</p>",
        "id": 313454845,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669972306
    },
    {
        "content": "<p>yes? this is meta stuff after all</p>",
        "id": 313454959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669972336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Showing.20functions.20in.20an.20unsafe.20way/near/313454749\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> is there a shortcut for the format/paren/delab combo here? I was surprised not to find it</p>\n</blockquote>\n<p>It's <code>ppExpr</code></p>",
        "id": 313455014,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669972357
    },
    {
        "content": "<p>For instance, the Python code can correctly run even if given a statically unknown function. If I understood correctly then the Lean version can't right?</p>",
        "id": 313456035,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669972715
    },
    {
        "content": "<p>I can break that python code with so many functions</p>",
        "id": 313456136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669972762
    },
    {
        "content": "<p>if you are restricting the inputs why not just pass an inductive and pattern match on it?</p>",
        "id": 313456221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669972791
    },
    {
        "content": "<p>For mental exercise? And to figure out exactly what is allowing Python to do that, is it because of duck typing?</p>",
        "id": 313456400,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669972844
    },
    {
        "content": "<p>Nothing to do with typing, everything to do with the mode of runtime execution</p>",
        "id": 313456485,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669972875
    },
    {
        "content": "<p>You can do the equivalent of the python program in lean but it won't act on all types, only a very specific class of types</p>",
        "id": 313456510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669972881
    },
    {
        "content": "<p>I guess the hacky Lean equivalent would be to check if a function pointer points to an interpreter landing pad, in which case the environment and decl name can be derived and passed to meta code like above</p>",
        "id": 313456668,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669972927
    },
    {
        "content": "<p>If you have only native code and no environment at all, you are certainly out of luck</p>",
        "id": 313456999,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669973059
    },
    {
        "content": "<p>Oh, I guess I was thinking in a bit of a different direction than the Python code</p>",
        "id": 313457352,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669973185
    },
    {
        "content": "<p>Here's the equivalent of the python code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">LC</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">LC</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">LC</span> <span class=\"bp\">→</span> <span class=\"n\">LC</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">LC</span> <span class=\"bp\">→</span> <span class=\"n\">LC</span> <span class=\"bp\">→</span> <span class=\"n\">LC</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">LC</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LC</span> <span class=\"bp\">→</span> <span class=\"n\">LC</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">app</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Untangle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">untangle</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">StateM</span> <span class=\"n\">Nat</span> <span class=\"n\">LC</span>\n<span class=\"kn\">open</span> <span class=\"n\">Untangle</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Untangle</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Untangle</span> <span class=\"o\">(</span><span class=\"n\">LC</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">untangle</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">modifyGet</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">fn</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">untangle</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Untangle.run</span> <span class=\"o\">[</span><span class=\"n\">Untangle</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LC</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">untangle</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run'</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Untangle</span> <span class=\"n\">LC</span> <span class=\"n\">where</span>\n  <span class=\"n\">untangle</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">run</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">LC</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- LC.fn 0 (LC.fn 1 (LC.app (LC.var 1) (LC.var 0)))</span>\n</code></pre></div>",
        "id": 313459521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669973925
    },
    {
        "content": "<p>the only unfortunate part is that we have to use <code>LC</code> explicitly in the type of the input function, but this is necessary for the term to typecheck in the first place since otherwise you can't apply <code>y</code> to <code>x</code></p>",
        "id": 313459855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669974036
    },
    {
        "content": "<p>in particular, the python trick does <em>not</em> work if you passed it a typed function like <code>fun {α β} (x : α) (y : α → β) =&gt; y x</code>, because then you can't pass an <code>LC</code> in for <code>y</code> because it's not a function type</p>",
        "id": 313460023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669974119
    },
    {
        "content": "<p>that's what I mean by saying this only works on a specific class of types</p>",
        "id": 313460131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669974143
    },
    {
        "content": "<p>I think the thing is python allows this unconditional and dynamic overloading of function application. So this inverts a little bit of the control flow..</p>",
        "id": 313467173,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669976637
    },
    {
        "content": "<p>If the issue is to find some types that act like the python type, then sure, we can make a <code>PythonVal</code> type and do all the same stuff. But if you want it to work on arbitrary <em>lean</em> types then you have to face the fact that lean is a strongly typed language and some types just aren't <code>LC</code> or convertible to/from it</p>",
        "id": 313467519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976747
    },
    {
        "content": "<p>So it is also doable in untyped languages with Call/cc</p>",
        "id": 313467658,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1669976786
    },
    {
        "content": "<p>if I have a function that adds two <code>UInt8</code>s, there is just no way you can safely call that function with <code>LC</code> arguments</p>",
        "id": 313467735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976807
    },
    {
        "content": "<p>so if the scheme involves literally executing the function then you are out of luck</p>",
        "id": 313467774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976824
    },
    {
        "content": "<p>the point is that python is a uni-typed language, there is one big sum-type over all the stuff you want to store and so you can pattern match on that using <code>instanceof</code>. From the lean perspective, that's a narrow view of types and there are lots of other types that aren't that</p>",
        "id": 313468090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976906
    }
]