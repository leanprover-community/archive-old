[
    {
        "content": "<p>can someone give me a simple example of implementing Seq.seq on an Option?  I'm a bit surprised the while Option is a Monad (<code>instance : Monad Option where...</code>), seq does not seem to be defined:</p>\n<p><a href=\"/user_uploads/3121/mv3fxBUDxGdM1jyqCk-msUT7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mv3fxBUDxGdM1jyqCk-msUT7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mv3fxBUDxGdM1jyqCk-msUT7/image.png\"></a></div>",
        "id": 294973790,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661310319
    },
    {
        "content": "<p><code>seq</code> is not an exported name, you have to use <code>Seq.seq</code></p>",
        "id": 294973806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310351
    },
    {
        "content": "<p>or <code>&lt;*&gt;</code></p>",
        "id": 294973807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310354
    },
    {
        "content": "<p>Ha, but pure is ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fred</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pure</span> <span class=\"mi\">5</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fred</span> <span class=\"c1\">-- some 5</span>\n</code></pre></div>",
        "id": 294973856,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661310373
    },
    {
        "content": "<p>yes</p>",
        "id": 294973858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310377
    },
    {
        "content": "<p>if you look in the prelude file you will find <code>export Pure (pure)</code></p>",
        "id": 294973872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310396
    },
    {
        "content": "<p>which basically means it's <code>open</code> for everyone</p>",
        "id": 294973907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310433
    },
    {
        "content": "<p>This has nothing to do with <code>Option</code> or the way the monad is defined BTW</p>",
        "id": 294973930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310468
    },
    {
        "content": "<p>if you are wondering why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instMonadOption#src\">src4#instMonadOption</a> does not declare a <code>seq</code> field, it's because there is a default implementation of <code>seq</code> in terms of <code>bind</code> and <code>map</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monad#src\">src4#Monad</a></p>",
        "id": 294974036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661310562
    },
    {
        "content": "<p>So where is the seq defined for Option?  I see the type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>But when the Option Monad instance is defined there is no <code>seq := ...</code> filling in the Option specific implementation so what happens?</p>",
        "id": 294974117,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661310624
    },
    {
        "content": "<p>Ah thanks you just answered my question...</p>",
        "id": 294974123,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661310632
    },
    {
        "content": "<p>So how would I port something like this from Haskell using Option instead of Maybe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">Just</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">Just</span> <span class=\"mi\">5</span>        <span class=\"c1\">-- Just 20</span>\n</code></pre></div>",
        "id": 294974571,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661311107
    },
    {
        "content": "<p>Never mind, I got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">pure</span> <span class=\"n\">Mul.mul</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 294974941,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661311538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">·*·</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">5</span> <span class=\"c1\">-- some 20</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.*.</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">5</span> <span class=\"c1\">-- some 20</span>\n</code></pre></div>",
        "id": 294974949,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661311552
    },
    {
        "content": "<p>For more information about the <code>(·*·)</code>. <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/conveniences.html#anonymous-functions\">https://leanprover.github.io/functional_programming_in_lean/getting-to-know/conveniences.html#anonymous-functions</a></p>",
        "id": 294975120,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661311713
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/functions.html#syntax-sugar-for-simple-lambda-expressions\">https://leanprover.github.io/lean4/doc/functions.html#syntax-sugar-for-simple-lambda-expressions</a></p>",
        "id": 294975139,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1661311747
    },
    {
        "content": "<p>Yep thanks, I remember (. * .) from that chapter.</p>",
        "id": 294975334,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661311938
    },
    {
        "content": "<p>Usually, we would use <code>&lt;$&gt;</code> for the first application there to avoid the <code>pure</code></p>",
        "id": 294976612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661313404
    },
    {
        "content": "<p><code>#eval (.*.) &lt;$&gt; some 4 &lt;*&gt; some 5 -- some 20</code></p>",
        "id": 294976617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661313414
    },
    {
        "content": "<p>Oh, much nicer, thanks!  I was pretty confused about using <code>pure</code> on a function <code>(.*.)</code> ...</p>",
        "id": 294976651,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661313481
    },
    {
        "content": "<p>Looking at <code> seq  f x := bind f fun y =&gt; Functor.map y (x ())</code> why does <code>x</code> take () as input, making my example more combersome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Seq.seq</span> <span class=\"o\">((</span><span class=\"bp\">.*.</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"c1\">-- some 20</span>\n</code></pre></div>\n<p>only to have the infix notation invent that required function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inheritDoc]</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\" &lt;*&gt; \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">61</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Seq.seq</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>so I can write the lovely clean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">·*·</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>?</p>",
        "id": 294978158,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661315117
    },
    {
        "content": "<p>Because lean is an eagerly evaluated language (call-by-value), you have to use <code>Unit -&gt; </code> functions whenever you want to explicitly delay evaluation</p>",
        "id": 294978224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661315175
    },
    {
        "content": "<p>So the idea here is that we want <code>f &lt;*&gt; long_running x</code> to not evaluate <code>long_running x</code> unless the evaluation of <code>seq</code> determines that it is necessary</p>",
        "id": 294978260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661315230
    },
    {
        "content": "<p>For example, if we are working over <code>Option</code>, we want <code>none &lt;*&gt; some (long_running x)</code> to not evaluate <code>long_running x</code> at all</p>",
        "id": 294978276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661315279
    },
    {
        "content": "<p>Interesting thanks.</p>",
        "id": 294978465,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661315425
    },
    {
        "content": "<p>Stuck on the next sample following the same pattern, this time on List:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">.*.</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>   <span class=\"c1\">-- failed to synthesize instance Seq List</span>\n</code></pre></div>",
        "id": 294979019,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661316064
    },
    {
        "content": "<p>There is (currently) no <code>Monad List</code> instance. You will have to provide one yourself if you want to use it in examples</p>",
        "id": 294979097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661316140
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/270676-lean4/topic/List.20Functor\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/List.20Functor</a></p>",
        "id": 294979158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661316208
    },
    {
        "content": "<p>Hey this stuff is very slowly starting to make sense...  I got the sample from mmhaskell working using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"n\">List</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">List.pure</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor.map</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"o\">)]</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"c1\">-- [6, 8, 12, 18]</span>\n</code></pre></div>",
        "id": 295110057,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661368539
    },
    {
        "content": "<p>It's presumably easier to just make an instance of <code>Monad List</code> using <code>List.bind</code>  and <code>List.pure</code> and then the <code>seq</code> will get automatically filled in</p>",
        "id": 295111575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661369102
    },
    {
        "content": "<p>True but then the chapter is jumping ahead to monads... it is supposed to be building up to Monads :-)  But it's tempting - especially since it avoids the awkward delayed function execution trick with <code>x ()</code>.</p>",
        "id": 295131717,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661377484
    },
    {
        "content": "<p>Does Lean Applicative obey the Interchange law:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Interchange</span>\n<span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">$</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>if so now do I write an example of this using my applicative list or Option ?   I'm not sure what the Haskell syntax <code>$ y</code> means... and I'm not sure our <code>&lt;*&gt;</code> can put the function <code>u</code> on the right hand side like this can it?</p>",
        "id": 295132017,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661377584
    },
    {
        "content": "<p>Perhaps this is an example of interchange?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">·+·</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- [4, 5, 5, 6]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">·+·</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- [4, 5, 5, 6]</span>\n</code></pre></div>",
        "id": 295134383,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661378953
    },
    {
        "content": "<blockquote>\n<p>Does Lean Applicative obey the Interchange law</p>\n</blockquote>\n<p>No. Lean's <code>Applicative</code> doesn't obey any laws, really (that's what <code>LawfulApplicative</code> et al are for), but even then we do not generally assume this property for lawful applicatives. Applicatives that do have this property are called commutative IIRC</p>",
        "id": 295140495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661383013
    },
    {
        "content": "<p>and <code>List</code> is not commutative</p>",
        "id": 295140510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661383025
    },
    {
        "content": "<p>The haskell syntax <code>($ y)</code> is equivalent to <code>(. y)</code> in lean, i.e. <code>fun f =&gt; f y</code></p>",
        "id": 295140551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661383078
    },
    {
        "content": "<p><code>Option</code> is commutative, as is <code>Multiset</code> ( = <code>List</code> quotient by permutation)</p>",
        "id": 295140664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661383144
    },
    {
        "content": "<p>Actually I take it back. The interchange law takes one side or the other to be a <code>pure</code>, in which case it is true for any lawful applicative because both sides are equivalent to the <code>map</code> expression <code>(· y) &lt;$&gt; u</code></p>",
        "id": 295141602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661383856
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">u</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pure_seq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 295141605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661383859
    },
    {
        "content": "<p>Commutativity for applicatives says you can reorder effects, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CommApplicative</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">flip</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 295142024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661384190
    },
    {
        "content": "<p>Should we add this to LawfulApplicative ?</p>",
        "id": 295143174,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661385170
    },
    {
        "content": "<p>No, this is an additional property which usually does not hold</p>",
        "id": 295143624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661385518
    }
]