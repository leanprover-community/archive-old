[
    {
        "content": "<p>I've recently been putting in some effort trying to learn how to write tactics in Lean 4, and realized that it would be extremely helpful to have a tutorial. I'd be happy to try my hand at writing one up and posting it, but was wondering what I could do to try to make it less likely to become obsolete; in particular, what features can I expect to be (mostly) stable? What should I include to make it as useful as possible?</p>",
        "id": 273265423,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645813170
    },
    {
        "content": "<p>There has been some discussion on a general meta programming tutorial in another recent thread here named \"metaprogramming tutorial\" so it definitely seems to be a popular subject, you can check that out if you want to look for some inspiration</p>",
        "id": 273265653,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645813302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> have you seen the current tactics writing tutorial for Lean 3?<br>\n<a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 273276457,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645818584
    },
    {
        "content": "<p>I would not cover monadic programming nor <code>do</code> notation though. I think those would deserve a dedicated topic of their own in Lean 4. I would go straight to practical/minimal examples, building small blocks for more complex tactics</p>",
        "id": 273277051,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645818936
    },
    {
        "content": "<p>I'm btw still of the opinion that we might want to look into a general programming tutorial before before looking into the more complex topics like meta programming.</p>",
        "id": 273277907,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645819349
    },
    {
        "content": "<p>I see a didactic order, but not necessarily an order of making because ppl's motivations can fade away</p>",
        "id": 273278912,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645819928
    },
    {
        "content": "<p>I think 'general programming' is something that most Lean 4 users are already quite apt at. OTOH Lean metaprogramming is fairly Lean-specific and I assume a 'tutorial' would benefit the current CS/programmer community more. That said, one could make the argument that Lean 4 is primarily used by mathematicians right now, but I have no idea about stats. In such case, introduction to 'functional programming' would likely be of more benefit, for you can't really do any of the Lean meta stuff without the basics first.</p>",
        "id": 273293452,
        "sender_full_name": "František Silváši",
        "timestamp": 1645828190
    },
    {
        "content": "<p>(Also worth noting that a general programming manual can be written by those of us who have no understanding of Lean meta-programming <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>)</p>",
        "id": 273294875,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1645829062
    },
    {
        "content": "<p>I think it's a sociological coincidence that lean 3 (not 4) is primarily used by mathematicians; I see far fewer mathematicians in the lean 4 stream (although of course they will come when the maths library is ported). I think that the lean 4 devs have a vision of lean 4 being adopted by a far wider community than the mathematics crowd.</p>",
        "id": 273300290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645832433
    },
    {
        "content": "<p>Why not put them together first? Like what we do for Mathlib and Std. And they can be separated when the tutorial get too large.</p>",
        "id": 273308936,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645840493
    },
    {
        "content": "<p>Oh I thought this was a question of prioritization, as per Henrik's comment along the lines of 'let's do general <em>before</em> looking into more complex topics'. I simply wanted to point out that having a 'metaprogramming' tutorial without a general, more basic one, would not be useless at all.</p>",
        "id": 273310485,
        "sender_full_name": "František Silváši",
        "timestamp": 1645842032
    },
    {
        "content": "<p>And I managed to accidentally also drag the CS/math discussion into it, because I assumed that, e.g., Kevin's undergraduates, might not have experience in functional programming and for those, a metaprogramming thing without a general thing would indeed be useless.</p>",
        "id": 273310525,
        "sender_full_name": "František Silváši",
        "timestamp": 1645842110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">František Silváši</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20tutorial/near/273310525\">said</a>:</p>\n<blockquote>\n<p>a metaprogramming thing without a general thing would indeed be useless.</p>\n</blockquote>\n<p>I agree with that.</p>",
        "id": 273313691,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645845450
    },
    {
        "content": "<p>But just as a suggestion, I think it's better to view tutorial as a community process: we do need an (evolving) to-do list for what to write, but not an exact plan of at what time for whom to write which. People can freely fork and contribute, without any predetermined prioritization, what they know and want to write.</p>",
        "id": 273313693,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645845453
    },
    {
        "content": "<p>I myself had tried writing one, but soon failed, both because I didn't know that to write then, and finding my actually not knowing a lot about what I want to write.</p>",
        "id": 273313766,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645845529
    },
    {
        "content": "<p>lean-samples may be a good place to start  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <br>\n<a href=\"#narrow/stream/270676-lean4/topic/new.20lean4-samples.20repo\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/new.20lean4-samples.20repo</a><br>\nAlthough it's code sample based, we can use doc-gen and leanink to make it more like a tutorial</p>",
        "id": 273313958,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1645845785
    },
    {
        "content": "<p>Many of my students are undergraduate mathematicians who have no need to learn either programming or metaprogramming; they spend their entire life within a begin/end block running tactics which other people have written. But (hence?) this is not about them. I think it's absolutely clear that there are people out there who don't know where to start and right now the answer they're given here is typically of the form \"read the source code\". I think that beginners with some programming background (eg undergraduates, who turned out to be important members of our community) be given a better place to start.</p>",
        "id": 273325515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645861981
    },
    {
        "content": "<p>In many ways <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/introduction.html\">https://leanprover.github.io/theorem_proving_in_lean4/introduction.html</a> is a very good starting point. Perhaps it will help the discussion if one thinks in what way it should be complemented.</p>\n<p>In my personal experience, teaching courses with Agda and Idris (as Lean was not a programming language when I did this), this can be preceded by </p>\n<ul>\n<li>an introduction to <strong>functional programming in the weak sense</strong>, by which I mean <br>\n    - using recursion as the only form of looping, with no mutability.<br>\n    - higher-order functions, say for composition or dynamics, and the corresponding type theory (which is at the HOL level) <br>\n    - real-world is via <code>#eval</code>, so there is no need of Monads at this stage.</li>\n<li>refining this by clarifying total and partial function definitions.</li>\n</ul>\n<p>After this one moves on to Dependent Type theory and Propositions as types, for which \"Theorem Proving in Lean 4\" is excellent.</p>",
        "id": 273334020,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645873454
    },
    {
        "content": "<p>I would be grateful for the tactic writing tutorial. I've managed with examples to write programs in Lean4. Tactics are another beast.</p>",
        "id": 273339550,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1645880548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20tutorial/near/273334020\">said</a>:</p>\n<blockquote>\n<ul>\n<li>an introduction to <em>functional programming in the weak sense</em>, by which I mean <br>\n    * using recursion as the only form of looping, with no mutability.</li>\n</ul>\n</blockquote>\n<p>One thing that I think is significantly different about Lean from other functional programming languages is its superpowered <code>do</code> notation which allows one to write code in a manner very close to procedural/imperative languages lake Rust. As such, I think an easier on-ramp for non-functional programmers in Lean is to introduce them to purely imperative examples using <code>IO</code> and <code>do</code> so they can naturally transition their imperative programing skills to Lean. Only once they have gotten a handle on the  API and syntax of Lean would I then suggest peeling back the sugar and teaching them the difficult pure functional concepts.</p>",
        "id": 273364578,
        "sender_full_name": "Mac",
        "timestamp": 1645911826
    },
    {
        "content": "<p>This is interesting because I teach mathematicians how to use lean purely within tactic mode for as long as possible, using mathlib's definitions of mathematical objects and asking them to fill in proofs, so they also don't really ever see any hint that it's a functional language (and indeed many of them have no idea what a functional language is)</p>",
        "id": 273368177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645916425
    },
    {
        "content": "<p>I might add that the moment mathlib is ported to lean 4 I will be writing tutorials for mathematicians (emphasizing tactic mode)</p>",
        "id": 273368236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645916500
    },
    {
        "content": "<p>I've just started using Lean4, am getting comfortable writing tactic mode proofs, and looking for a tutorial to write my own tactics. So far, did not find much useful content. Either the lean3 examples are not working, or the videos are too high level.</p>\n<p>Can anyone help me get started?</p>",
        "id": 310506951,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668635012
    },
    {
        "content": "<p>First steps for me would be to program some recurring proof patterns as a tactic. Any examples to learn from perhaps?</p>",
        "id": 310507279,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668635131
    },
    {
        "content": "<p>There is <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/\">https://github.com/arthurpaulino/lean4-metaprogramming-book/</a> Some of the API descriptions might be out of date but the general concepts remain the same</p>",
        "id": 310507908,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1668635406
    },
    {
        "content": "<p>Great! Let's see how far I get with that. Thnx</p>",
        "id": 310508948,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668635849
    }
]