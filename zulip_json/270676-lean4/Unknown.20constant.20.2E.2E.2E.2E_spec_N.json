[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> has reduced a fail case I discovered:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">φ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mut1</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">$</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">mut2</span> <span class=\"n\">p</span> <span class=\"n\">sep</span><span class=\"o\">)</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mut2</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">$</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mut1</span> <span class=\"n\">p</span> <span class=\"n\">sep</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">problem</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"c1\">-- (kernel) unknown constant 'mut2._at.problem._spec_1'</span>\n  <span class=\"k\">let</span> <span class=\"n\">asdf</span> <span class=\"bp\">←</span> <span class=\"n\">mut2</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>It seems like a Lean 4 bug, but I don't understand what does it mean.</p>\n<p>Please suggest a way to proceed.</p>",
        "id": 297819013,
        "sender_full_name": "cognivore",
        "timestamp": 1662654449
    },
    {
        "content": "<p>This is a bug in the code generator.  Could you please create an issue on GitHub?</p>",
        "id": 297835765,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1662659731
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1573\">https://github.com/leanprover/lean4/issues/1573</a> I hope this will work.</p>",
        "id": 297843902,
        "sender_full_name": "cognivore",
        "timestamp": 1662662421
    }
]