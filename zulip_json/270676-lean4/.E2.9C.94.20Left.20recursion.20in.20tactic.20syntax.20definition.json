[
    {
        "content": "<p>I'm trying to implement a tactical from ssreflect which allows you to add <code> =&gt; </code> at the end of any tactic and follow it with certain instructions. To do that, I need a left-recursive production rule which I thought would be go ok because rules for the term parser clearly involve some left-recursion.</p>\n<p>However, the following snippet shows us that it creates some trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">revert_pats</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">move_intro_pat</span>\n\n<span class=\"c1\">-- not a problem</span>\n<span class=\"c1\">-- syntax withPosition(\"(\" tactic \")\" \" =&gt; \" (colGt move_intro_pat)+) : tactic</span>\n\n<span class=\"c1\">-- problem</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">move_intro_pat</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"c1\">-- also a problem</span>\n<span class=\"c1\">-- syntax withPosition(tacticSeq \" =&gt; \" (colGt move_intro_pat)+) : tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span> <span class=\"s2\">\"move\"</span> <span class=\"o\">(</span><span class=\"n\">revert_pats</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">move</span><span class=\"bp\">%$</span><span class=\"n\">token</span> <span class=\"bp\">$</span><span class=\"n\">xs</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"c1\">-- Stack overflow detected. Aborting.</span>\n</code></pre></div>\n<p>Is there something I can do to make it work?</p>",
        "id": 281614199,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1652037928
    },
    {
        "content": "<p>You shouldn't need the <code>withPosition</code></p>",
        "id": 281614338,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652038174
    },
    {
        "content": "<p>wooot? Why is that the problem and why does <code>colGt</code> work without it?</p>",
        "id": 281614431,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1652038316
    },
    {
        "content": "<blockquote>\n<p>Why is that the problem</p>\n</blockquote>\n<p>Because otherwise it's not strictly left recursion</p>\n<blockquote>\n<p>why does <code>colGt</code> work without it</p>\n</blockquote>\n<p>There is an implicit <code>withPosition</code>, I believe from <code>tacticSeq1Indented</code>'s <code>many1Indent</code> call. See <code>Init.Notation</code> for many tactic syntax examples.</p>",
        "id": 281614575,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1652038543
    },
    {
        "content": "<blockquote>\n<p>See Init.Notation for many tactic syntax examples.</p>\n</blockquote>\n<p>That's partly what I use as a reference but I didn't realize that <code>withPosition</code> would hide the fact that it's left recursive. </p>\n<p>Thanks for your help!</p>",
        "id": 281614727,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1652038765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> has marked this topic as resolved.</p>",
        "id": 281614729,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652038771
    }
]