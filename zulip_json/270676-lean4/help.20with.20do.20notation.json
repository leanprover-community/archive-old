[
    {
        "content": "<p>How do I switch this function to use do notation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divideWithArgs</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">read</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n            <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried this but I get a compile error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divideWithArgsDo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">get</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">read</span> <span class=\"k\">fun</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n          <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n        <span class=\"k\">else</span>  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">get</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.5037</span> <span class=\"bp\">?</span><span class=\"n\">m.5036</span>\n</code></pre></div>\n<p>This simpler version works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divideDo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>problem seems to be with <code>get</code>, so how do I use <code>get</code> and <code>do</code> notation?</p>",
        "id": 293781194,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660676415
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divideWithArgs</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">get</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">read</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n            <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">divideWithArgsDo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">divideWithArgs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">divideWithArgsDo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">divideWithArgs</span><span class=\"o\">,</span> <span class=\"n\">divideWithArgsDo</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with an extra equivalence proof on top^^</p>",
        "id": 293785095,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660677946
    },
    {
        "content": "<p>I'm a little surprised you are trying to work this way around (this way being, from written out binds to do notation) especially due to the very ergonomic way that the Lean do notation is implemented it is usually much easier to go do notation -&gt; written out binds understanding wise.</p>\n<p>Because what is <code>get</code> really, just a function that has type <code>get : m σ</code> where <code>m</code> is some state monad and <code>σ</code> is the state. and what do we want to do in do notatino if we want to access a value that is wrapped within a monad? We <code>&lt;-</code> it, hence we end up with <code>let s &lt;- get</code></p>",
        "id": 293785410,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660678078
    },
    {
        "content": "<p>Oh, I'm just trying to learn monads, and understanding bind and all the heavy lifting do notation does for me... so thanks again for the quick unblock, and I love that you threw in the proof to boot, you rock!</p>",
        "id": 293785897,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660678257
    },
    {
        "content": "<p>Monad lifting is cool.  But why can't I do this simple test in <code>main</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divide</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">):</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divideRefactored</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">divide</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"hello\"</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">Float</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"bp\">?</span><span class=\"n\">m.246</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Looks like it's complaining that <code>IO</code> is missing? Does this mean 'IO' cannot be lifted?<br>\nLooks like I can't even <code>discard (divideRefactored 5 0 [] 0)</code>.<br>\nI can do the following instead, but I was trying to be lazy and avoid the big match statement...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 293806884,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660686865
    },
    {
        "content": "<p>If we have an instance <code>MonadLiftT m n</code> that means there is a way on how to turn a computation that happens inside of <code>m</code> into one that happens inside of <code>n</code> and (this is the key part) usually <em>without</em> the instance itself creating any additional data that feeds into the computation. To answer your first question, this means you can in principle declare lifting instances from any monad to any other monad, it does not however mean that you should do this as we will see.</p>\n<p>Also as a little side note, the question \"Does this mean 'IO' cannot be lifted\" is not the question you want to ask here, the monad you want to be lifted is <code>ExceptT String Id</code> into <code>IO</code>. Not the other way around. After all you have a computation in that <code>ExceptT String Id</code> monad and want to execute it (i.e. lift it into) into a computation that is happening within <code>IO</code>.</p>\n<p><code>IO</code> is an <code>EIO IO.Error</code> where <code>EIO</code> is basically a mix of a state + an except monad but without monad transfomers instead done inside of a single monad. Now if we look at your type the <code>ExceptT</code> transformer has <code>String</code> as its error type but it is not obvious how we can go from <code>String</code> to <code>IO.Error</code>, yes there is <code>IO.Error.userError</code> which operates on <code>String</code> but maybe the user intended something different (there are more than a dozen <code>IO.Error</code> variants after all) hence it is not obvious how to go from <code>ExceptT String m a</code> to <code>IO (m a)</code> or even <code>IO a</code> in this case since <code>m</code> is <code>Id</code>. Yes the <code>MonadLift</code> instance could make a guess here and say \"well surely they want <code>IO.Error.userError</code> but maybe they also wanted to use another variant that takes a string and suddenly you end up with a certain error variant where you didnt know where it came from.</p>\n<p><code>MonadLift</code> instances that we do want to have on the other side are the ones where it is more or less \"obvious\" what to do, for example if you have a monad stack <code>ReaderT Context (StateT State IO)</code> it is obvious how one might lift a computation from <code>IO</code> into this monad, we simply let the computation ignore the <code>ReaderT</code> <code>Context</code> and the <code>StateT</code> <code>State</code> and just use the <code>IO</code> part of this stack. What is not obvious on the other side is how we can go the other way, if i want to execute a <code>ReaderT Context (StateT State IO)</code> inside of <code>IO</code> what should the <code>Context</code> and the <code>State</code> I am giving to this computation be? Hence lifting this way around does not work.</p>\n<p>Finally a little style thing. While it is a nice thing that many monads can be represented as just regular functions you usually do not want to give the arguments to these hidden functions directly like you are doing here. This has two reasons mostly</p>\n<ol>\n<li>It looks confusing because if you look at the documentation of the function this monad might be hidden behind an abbrev, for example in Lean compiler code we often observe:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span>  <span class=\"n\">divideRefactored</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>If you now go to the definition of <code>divideRefactored</code> based on the call site here: <code>divideRefactored 5 0 [] 0</code> you would expect there to be 4 parameters but there are only 2, this is confusing at first if you do not know about what <code>M</code> is</p>\n<ol start=\"2\">\n<li>It might make your code brittle to changes in case you add a new parameter after the case</li>\n</ol>\n<p>What we do instead is use the <code>run</code> functions that are provided on most monads and monad transformers: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StateT.run#doc\">docs4#StateT.run</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ReaderT.run#doc\">docs4#ReaderT.run</a> etc. so your call site would usually look more like this: <code>divideRefactored 5 0 |&gt;.run [] |&gt;.run 0</code> This way the type checker will always ensure for you that the result of <code>divideRefactored 5 0</code> is a type that has some <code>run</code> method and so on, if this is not the case it will highlight the right section of your code instead of giving a confusing big error on your entire application that contains some weird monad stack mess.</p>\n<p>Furthermore we would usually also split your match statement up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">[]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">final</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">ret</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{final}\"</span>\n</code></pre></div>\n<p>Also as you will already have observed both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StateT.run#doc\">docs4#StateT.run</a> and the regular application as a function will give you both the result of your computation as fell as the final state at the time of return as a tuple, a way to avoid this is  is to use the <code>StateT.run'</code> function which will only give you the result and drop the state</p>",
        "id": 293810766,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660688723
    },
    {
        "content": "<p>Now I'm off to bed though so more monad support tomorrow :P</p>",
        "id": 293810974,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660688829
    },
    {
        "content": "<p>Can I steal all this great stuff and include it in my new sample: <a href=\"https://github.com/leanprover/lean4-samples/tree/clovett/monads/SimpleMonads\">https://github.com/leanprover/lean4-samples/tree/clovett/monads/SimpleMonads</a> ?</p>",
        "id": 293815186,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660691357
    },
    {
        "content": "<p>I'm also curious why this let statement requires any conversion? Doesn't the <code>IO.println (toString ret)</code> make everything a nice IO return type or does every statement of the try block have to match the return type <code>IO Unit</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"n\">args</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">ret</span><span class=\"o\">)</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I was able to make this compile by adding the following conversion writing <code>let ret ← liftIO (divideRefactored 5 0 args 10)</code> where:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">liftIO</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.Result.ok</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.Result.error</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>but I'm not sure I can explain how this works, seems like some automatic lifting is happening here also, and I couldn't figure out how to package this as a proper <code>MonadLift</code> transform so that it could be automatically inserted...</p>",
        "id": 293823244,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660697895
    },
    {
        "content": "<p>Sure you can take whatever of my examples and put it thetr ^^</p>\n<p>In this case its not a lifting going on its a coercion from String to IO.userError in the Except.error case most likely. There are options to disable automatic lifts (I have seen that in the supplement for the do unchained paper though I do not recall the name sadly) and most likely also coercions though I don't know the name for that either from the top of my head</p>\n<p>The way to go to make it a proper Monad lift should be something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">IO</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"o\">:=</span> <span class=\"n\">liftIO</span>\n</code></pre></div>\n<p>though I'm writing this code on mobile and am sadly not yet able to type check Lean code in my head so there might be slight mistakes here</p>",
        "id": 293841719,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660717650
    },
    {
        "content": "<p>thanks, unfortunately that MonadLift didn't work, the instance compiles, but doesn't get applied.  How does one debug why a monadLift is not getting picked up?</p>",
        "id": 293951711,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660760670
    },
    {
        "content": "<p>To add to my note from earlier today the correct option is <code>set_option autoLift false</code>.</p>\n<p>Since automatic lifting is exclusively focused on synthesizing an instance <code>MonadLiftT m n</code> (notice the <code>T</code> here which is for \"Transitive closure of <code>MonadLift</code> instances\" i.e. it can take multiple steps of lifting) you can in fact use the tracing of type class synthesis here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mainLift</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">[]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">final</span> <span class=\"bp\">←</span> <span class=\"n\">ret</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{final}\"</span>\n</code></pre></div>\n<p>This will print out a whole lot more than we actually want because there is much more TC stuff going on here so we can reduce to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MonadLiftT</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"n\">IO</span>\n</code></pre></div>\n<p>The trace is quite huge and the details are definitely quite confusing if we dont know what TC synthesis is doing internally, however in this case the solution is quite easy, we can apply a trick and name our instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">myFunkyName</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">IO</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"o\">:=</span> <span class=\"n\">liftIO</span>\n</code></pre></div>\n<p>and search for this name in the trace. As we will see the name does indeed appear in the trace so the type class synthesis is very much aware of it, it just cannot solve the problem with it. However it can solve a sub problem with it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.generate</span><span class=\"o\">]</span> <span class=\"kd\">instance</span> <span class=\"n\">myFunkyName</span>\n\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"n\">MonadLift</span> <span class=\"bp\">?</span><span class=\"n\">m.1649</span> <span class=\"bp\">?</span><span class=\"n\">m.1650</span> <span class=\"bp\">=?=</span> <span class=\"n\">MonadLift</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">IO</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"n\">success</span>\n</code></pre></div>\n<p>and then ends up at the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">MonadLiftT</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which it will fail to resolve. Now while we know that <code>ExceptT String Id</code> is equivalent to <code>Except String</code> TC synthesis is not aware of this fact (otherwise it wouldn't have ended up at this goal anyways because it should have noticed it is done already). This is the case because <code>ExceptT</code> is not an <code>abbrev</code> or marked as <code>@[reducible]</code> so TC synthesis will not attempt to look through the definition and thus hang on this goal.</p>\n<p>So what we want to do instead is declare the proper <code>ExceptT</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">liftIO</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.Result.ok</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EStateM.Result.error</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">myFunkyName</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"n\">IO</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"o\">:=</span> <span class=\"n\">liftIO</span>\n</code></pre></div>\n<p>and tada:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mainLift</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"n\">divideRefactored</span> <span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">[]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">final</span> <span class=\"bp\">←</span> <span class=\"n\">ret</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{final}\"</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 293959487,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660763668
    },
    {
        "content": "<p>Hey, you got it working, very awesome.  I think I originally played with using ExceptT but couldn't get it to work.  Quick question about your recommendation of always using &lt;|.run to execute a monad.  Is that the right language, or is it executing the action the monad is producing?  and why isn't <code>run</code> defines in the <code>Monad</code> base class?  I notice most monads provide this run method, so why isn't it promoted to the interface kind of thing? or am I thinking about this the wrong way?</p>",
        "id": 293982086,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660773362
    },
    {
        "content": "<ol>\n<li>Its |&gt;.run (the arrow is the other way)</li>\n</ol>\n<p>2.The majority of monads are not runnable and the signature is not at all uniform.</p>\n<p>For ReaderT run takes a context, an m a and produces an a</p>\n<p>For StateT run takes a state, an m a and produces an (a x state)</p>\n<p>These types and signatures are already not compatible but it gets worse. We do not want to \"run\" IO in the sense that we desire to unwrap values from it fully since this defeats the point of IO. There is also no way to unwrap values from the Option or List monad since they might be empty etc. (Without providing a default that is)</p>\n<p>So while a few monads do have some notion of \"running\" them this notion is</p>\n<ol>\n<li>\n<p>Not uniform across monads</p>\n</li>\n<li>\n<p>Non existing in many of them</p>\n</li>\n</ol>\n<p>The reason it appears to you as if many monads support this idea is because the majority of monads that we have in Lean right now (speaking of the ones in the compiler and meta stack) are ones that are based on reader and state stacks so naturally a run operation arises for them because the respective parts of the stack have one.</p>",
        "id": 293991256,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660776603
    },
    {
        "content": "<p>And regarding the run terminology I'd say that it executes the monadic action by giving some additional input such as initial state, context etc. In general I don't really say that monads produce an action if I have something of type m a I'd say its a monadic action or value that you can operate on. But opinions on precise terminology might differ.</p>",
        "id": 293991462,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660776777
    },
    {
        "content": "<p>I would say that almost all monads have a \"run\" operation, because this basically means \"unfold the definition of the monad and deliver the results in terms of more primitive notions\". For <code>ReaderT</code>, that means unfolding the fact that <code>ReaderT R m A</code> is defined to be <code>R -&gt; m A</code> so you can apply it to <code>R</code> to get an element of <code>m A</code>. For <code>Option</code> there isn't anything to unfold because it's not wrapping anything, but back when we had <code>OptionM</code>, <code>OptionM.run</code> would have the type <code>OptionM A -&gt; Option A</code>. So <code>Option.run</code> doesn't exist only because it's the identity function (but morally we think of it as translating from <code>Option</code>-the-monad to <code>Option</code>-the-inductive-type).</p>\n<p>Even <code>IO</code> has a \"run\" operation, that would give you the exceptions in terms of <code>BaseIO</code>. And <code>BaseIO.run</code> would allow you to apply the monad value to a RealWorld token.</p>",
        "id": 293992996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660777828
    },
    {
        "content": "<p>Here's a fun one, playing with your proof :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">divideWithArgs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">divideWithArgsDo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">divideWithArgs</span><span class=\"o\">,</span> <span class=\"n\">divideWithArgsDo</span><span class=\"o\">]</span>    <span class=\"c1\">-- Goals accomplished 🎉</span>\n</code></pre></div>\n<p>I modified to this <code>divideWithArgsDo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divideWithArgsDo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then refactored it into this smaller function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divide</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">):</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so I could write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divideRefactored</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">Id</span><span class=\"o\">))</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.contains</span> <span class=\"s2\">\"--limit\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">divide</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>But now these are no longer equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">divideWithArgs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">divideRefactored</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">divideWithArgs</span><span class=\"o\">,</span> <span class=\"n\">divideRefactored</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fails, looks like the prover refuses to look inside my divide function?  It stops with <code>liftM (divide x y)</code> ? Is there a way to get it to try?</p>",
        "id": 294000798,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660784886
    },
    {
        "content": "<p>The two aren't equivalent. Here's a partial proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">divideWithArgs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">divideRefactored</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">divideWithArgs</span><span class=\"o\">,</span> <span class=\"n\">divideRefactored</span><span class=\"o\">,</span> <span class=\"n\">divide</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 294001113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785320
    },
    {
        "content": "<p>the state at the <code>sorry</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span> <span class=\"bp\">=</span> <span class=\"k\">do</span>\n  <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"bp\">∧</span> <span class=\"n\">List.contains</span> <span class=\"n\">args</span> <span class=\"s2\">\"--limit\"</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">throw</span> <span class=\"s2\">\"too many divides\"</span>\n    <span class=\"k\">else</span> <span class=\"n\">liftM</span> <span class=\"o\">(</span><span class=\"n\">throw</span> <span class=\"s2\">\"can't divide by zero\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So we would have to show that the thing on the right always evaluates to <code>throw \"can't divide by zero\"</code>. But this is false, since if <code>s &gt; 10</code> and you have a limit arg then you get <code>throw \"too many divides\"</code> instead</p>",
        "id": 294001269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785438
    },
    {
        "content": "<p>I've incorporated most of these comments and awesome additional information into my new sample, CR comments are welcome:<br>\n<a href=\"https://github.com/leanprover/lean4-samples/pull/6\">https://github.com/leanprover/lean4-samples/pull/6</a><br>\nSee the <a href=\"https://github.com/leanprover/lean4-samples/blob/12e75ea99dd18b52cf77ec652b9d51ae5fd508af/SimpleMonads/readme.md\">readme</a></p>",
        "id": 294001580,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1660785561
    },
    {
        "content": "<p>Ironically, I also can't prove that they are not equal, because <code>y == 0</code> is an opaque Float equality test and for all lean knows it's always false</p>",
        "id": 294001595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785591
    },
    {
        "content": "<p>these equality proofs are not really something you can do in haskell, or at least, not beyond handwavy arguments about referential transparency</p>",
        "id": 294001788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785763
    },
    {
        "content": "<p>I wouldn't say that lean is really optimized for doing proofs about do notation functions. It's possible, but it's not a major focus</p>",
        "id": 294001822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785834
    },
    {
        "content": "<p>actually here's a proof anyway, modulo a little cheat to prove <code>y == 0</code> is not always false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">divideWithArgs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">divideRefactored</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"mi\">0</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"--limit\"</span><span class=\"o\">])</span> <span class=\"mi\">10</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">divideWithArgs</span><span class=\"o\">,</span> <span class=\"n\">divideRefactored</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">injection</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 294005853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660789878
    }
]