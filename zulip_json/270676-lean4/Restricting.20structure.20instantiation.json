[
    {
        "content": "<p>I am refining my definition of <code>DataFrame</code> and I've realized that one can instantiate a <code>DataFrame</code> with rows of arbitrary size, not necessarily consistent with the header size:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DataFrame</span> <span class=\"n\">where</span> <span class=\"c1\">-- will just use strings for the sake of MWE simplification</span>\n  <span class=\"n\">header</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can I attach some piece of code to my structure that runs on instantiation and makes Lean panic if there's an inconsistency between the dimensions?</p>",
        "id": 263218496,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638311520
    },
    {
        "content": "<p>I'm not sure what exact restriction you're looking for, but you can add fields to the structure that enforce properties:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DataFrame</span> <span class=\"n\">where</span>\n  <span class=\"n\">header</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n  <span class=\"n\">eqDim</span> <span class=\"o\">:</span> <span class=\"n\">header.length</span> <span class=\"bp\">=</span> <span class=\"n\">rows.length</span>\n</code></pre></div>",
        "id": 263220094,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638312442
    },
    {
        "content": "<p>It's definitely something like that, but I want every item of <code>rows</code> to have the same length as <code>header</code></p>",
        "id": 263220258,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638312534
    },
    {
        "content": "<p>(That is, the data is in fact as wide as the header says)</p>",
        "id": 263220316,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638312586
    },
    {
        "content": "<p>I will try to apply your idea with a <code>reduce</code></p>",
        "id": 263220509,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638312695
    },
    {
        "content": "<p>Hm, we don't seem to have a native <code>reduce</code> for lists yet. I will try to make one</p>",
        "id": 263220632,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638312766
    },
    {
        "content": "<p>I'm not familiar with database stuff, so I'm not sure what \"same length as <code>header</code>\" means.<br>\nDo you mean that the length of every string in <code>rows</code> should be equal to the length of the <code>header</code> list?</p>",
        "id": 263220644,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638312775
    },
    {
        "content": "<p>Oops, there's a mistake in my definition. let me fix it</p>",
        "id": 263220699,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638312814
    },
    {
        "content": "<p>There, now I think it will make more sense</p>",
        "id": 263220793,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638312857
    },
    {
        "content": "<p>Then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"n\">eqDim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">rows</span><span class=\"o\">,</span> <span class=\"n\">r.length</span> <span class=\"bp\">=</span> <span class=\"n\">header.length</span>\n</code></pre></div>\n<p>should do it.</p>",
        "id": 263221026,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638313014
    },
    {
        "content": "<p>Oh, I thought <code>\\forall</code> was a mathlib (Lean 3) thing <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 263221129,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638313094
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 263221145,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638313107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 263221180,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638313137
    },
    {
        "content": "<p>No, <code>∀</code> is very much a part of Lean.</p>",
        "id": 263221209,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638313157
    },
    {
        "content": "<p>I guess I should have tried first <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263221225,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638313169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as unresolved.</p>",
        "id": 263222113,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638313676
    },
    {
        "content": "<p>Hm, actually this is not exactly what I need. This solution forces the user to provide a proof that the constraint is true everytime they want to instantiate a <code>DataFrame</code>. I was thinking more of a code that runs pre (or post) instantiation and throws an exception when the restriction is not satisfied</p>",
        "id": 263222968,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638314231
    },
    {
        "content": "<p>(Also Lean didn't recognize <code>∈</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 263223552,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638314664
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263224042,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638315094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Restricting.20structure.20instantiation/near/263222968\">said</a>:</p>\n<blockquote>\n<p>Hm, actually this is not exactly what I need. This solution forces the user to provide a proof that the constraint is true everytime they want to instantiate a <code>DataFrame</code>. I was thinking more of a code that runs pre (or post) instantiation and throws an exception when the restriction is not satisfied</p>\n</blockquote>\n<p>you could try to use default values and apply a tactic like simp per default I guess? I'm not sure how good that would work in the general case though.</p>",
        "id": 263224748,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1638315595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Restricting.20structure.20instantiation/near/263224748\">said</a>:</p>\n<blockquote>\n<p>you could try to use default values and apply a tactic like simp per default I guess? I'm not sure how good that would work in the general case though.</p>\n</blockquote>\n<p>I tried it (but using <code>rfl</code> instead). It works for manual instantiations but is a bit of a pain when inside other functions (using generic variables)</p>",
        "id": 263224893,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638315691
    },
    {
        "content": "<p>Well you have to prove that those functions retain your invariant</p>",
        "id": 263228383,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638317765
    },
    {
        "content": "<p>Otherwise they can make dataframes exactly breaking your invariant</p>",
        "id": 263228428,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638317783
    },
    {
        "content": "<p>In mathlib3, you can use something like <code>. tactic.exact_dec_trivial</code> to do default computation:<br>\n<a href=\"https://github.com/Julian/lean-across-the-board/blob/main/src/chess/board.lean#L67-L77\">https://github.com/Julian/lean-across-the-board/blob/main/src/chess/board.lean#L67-L77</a></p>",
        "id": 263228683,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638317983
    },
    {
        "content": "<p>Yeah I am starting to understand the beauty of Lean to build correct software</p>",
        "id": 263229828,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638318860
    },
    {
        "content": "<p>It's sinking in slowly</p>",
        "id": 263229847,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638318883
    }
]