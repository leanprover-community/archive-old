[
    {
        "content": "<p>I have been working on a Lean 4 interface to LLVM  called <a href=\"https://github.com/tydeu/lean4-papyrus\">Papyrus</a> in my spare time  (which I sadly will have less of now that the fall semester has started). In addition to Lean/C bindings to the LLVM C++ API, it includes a DSL for writing and manipulating LLVM IR. While this all still very much a work-in-progress, I wanted to share this little sample of what I have been able to get Lean to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Papyrus</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Papyrus</span> <span class=\"n\">Script</span>\n\n<span class=\"n\">llvm</span> <span class=\"n\">module</span> <span class=\"n\">lean_hello</span> <span class=\"k\">do</span>\n  <span class=\"n\">declare</span> <span class=\"bp\">%</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"bp\">@</span><span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"n\">i8</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"n\">declare</span> <span class=\"bp\">%</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"bp\">@</span><span class=\"n\">l_IO_println___at_Lean_instEval___spec__1</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">%</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"n\">define</span> <span class=\"n\">i32</span> <span class=\"bp\">@</span><span class=\"n\">main</span><span class=\"o\">()</span> <span class=\"k\">do</span>\n   <span class=\"bp\">%</span><span class=\"n\">hello</span> <span class=\"bp\">=</span> <span class=\"n\">call</span> <span class=\"bp\">@</span><span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"Hello World!\"</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n   <span class=\"n\">call</span> <span class=\"bp\">@</span><span class=\"n\">l_IO_println___at_Lean_instEval___spec__1</span><span class=\"o\">(</span><span class=\"bp\">%</span><span class=\"n\">hello</span><span class=\"o\">,</span> <span class=\"bp\">%</span><span class=\"n\">hello</span><span class=\"o\">)</span>\n   <span class=\"n\">ret</span> <span class=\"n\">i32</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"n\">dump</span> <span class=\"n\">lean_hello</span> <span class=\"c1\">-- Prints the module's IR</span>\n<span class=\"bp\">#</span><span class=\"n\">verify</span> <span class=\"n\">lean_hello</span> <span class=\"c1\">-- Checks that the IR is valid</span>\n<span class=\"bp\">#</span><span class=\"n\">jit</span> <span class=\"n\">lean_hello</span> <span class=\"c1\">-- JITs the `main` function</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> #jit:</span>\n<span class=\"cm\">Hello World</span>\n<span class=\"cm\">Exited with code 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Running this code requires the library to be passed as plugin, but I think the resulting ability to write, inspect, and run IR immediately without a need for rebuilding is really cool.</p>",
        "id": 251094126,
        "sender_full_name": "Mac",
        "timestamp": 1630198357
    },
    {
        "content": "<p>Oh, now I'm wishing for a way for the lean -&gt; C compiler to emit code as some structured data type back into lean so that it can be retargeted to LLVM and jitted using Papyrus</p>",
        "id": 251095286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630199770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Surprisingly, the code emitter for Lean is actually quite small (it is largely one file <a href=\"https://github.com/leanprover/lean4/blob/acfa2d7e78f1daf0740941311ba83bd5a8961cd2/src/Lean/Compiler/IR/EmitC.lean\">EmitC.lean</a>. One of future goals is to rewrite it to emit LLVM using Papyrus.</p>",
        "id": 251096882,
        "sender_full_name": "Mac",
        "timestamp": 1630201890
    },
    {
        "content": "<p>oh, it's written in lean! I wasn't expecting that</p>",
        "id": 251096938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630201941
    },
    {
        "content": "<p>so yeah, you could just replace that</p>",
        "id": 251096950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630201960
    },
    {
        "content": "<p>I still need to add support for the more of LLVM's IR before that I can do that though. The <code>call</code> and <code>ret</code> instructions are the only two currently supported. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 251096956,
        "sender_full_name": "Mac",
        "timestamp": 1630201970
    },
    {
        "content": "<p>When I say it's a work-in-progress, I <em>really</em> mean it. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 251096977,
        "sender_full_name": "Mac",
        "timestamp": 1630202012
    },
    {
        "content": "<p>pshh, it's not called functional programming for nothing</p>",
        "id": 251097035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630202064
    },
    {
        "content": "<p>call and ret are really all you need :D</p>",
        "id": 251097037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630202069
    }
]