[
    {
        "content": "<p>What is actually used to pretty print List in lean? I have a list literal notation for Vec, implemented Repr, ToFormat and looked at the Delaborator for reference, but I can't figure it out.</p>",
        "id": 289670230,
        "sender_full_name": "ohhaimark",
        "timestamp": 1657846859
    },
    {
        "content": "<p>These <code>@[appUnexpander]</code> definitions from <code>Init.NotationExtra</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[appUnexpander List.nil]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandListNil</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[appUnexpander List.cons]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandListCons</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">[])</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                  <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>See the source code <a href=\"https://github.com/leanprover/lean4/blob/fb9b093cf966dcd107d2b7f4323acbe376d1d349/src/Init/NotationExtra.lean#L97-L104\">here</a>.</p>",
        "id": 289679902,
        "sender_full_name": "Mac",
        "timestamp": 1657851838
    }
]