[
    {
        "content": "<p>So I have been toying around with <code>Nat.add</code> that is not left or right recursive and while trying to prove <code>add_succ</code> I ran into the following problem, which I think may be an bug in Lean, but I am not sure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"n\">succ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span> <span class=\"c1\">-- removing this fixes the theorem error</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">succ_zero</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zero_add_zero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_add_succ</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">one_add</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add_succ</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- error: theorem fails despite goals accomplished</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_succ</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">m</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m</span>\n    <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_add_succ</span><span class=\"o\">]</span> <span class=\"c1\">-- produces an `n + 1` for some reason</span>\n      <span class=\"k\">show</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ih</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The error on <code>add_succ</code> is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  @Eq.ndrec Nat (succ m + succ (n + 1))\n    (fun _a =&gt; (succ m + succ (succ n) = succ (succ m + succ n)) = (_a = succ (succ m + succ n)))\n    (Eq.refl (succ m + succ (succ n) = succ (succ m + succ n)))\nargument has type\n  (succ m + succ (succ n) = succ (succ m + succ n)) = (succ m + succ (succ n) = succ (succ m + succ n))\nbut function has type\n  (fun _a =&gt; (succ m + succ (succ n) = succ (succ m + succ n)) = (_a = succ (succ m + succ n)))\n      (succ m + succ (n + 1)) →\n    ∀ {b : Nat},\n      succ m + succ (n + 1) = b →\n        (fun _a =&gt; (succ m + succ (succ n) = succ (succ m + succ n)) = (_a = succ (succ m + succ n))) b\n</code></pre></div>\n<p>I am very confused as to why the <code>n + 1</code> is introduced during rewriting. I am also curious as to why removing the <code>Add</code> instance fixes the error (and why the <code>n + 1</code> still appears even then). Is this some weird bug in <code>rw</code> (or  <code>show</code>) or are there details I am missing?</p>",
        "id": 273018667,
        "sender_full_name": "Mac",
        "timestamp": 1645654285
    },
    {
        "content": "<p>Here's a minimized version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span> <span class=\"c1\">-- removing this fixes the theorem error</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_add_succ</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_succ</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add_succ</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is certainly a bug, and my guess is that it is caused by something that has a hardcoded match on <code>Add.add Nat</code> thinking that it's surely <code>Nat.add</code> and your alternate definition is confusing it. (Lean 3 simp has the same problem with numerals encoded using nonstandard instances of standard typeclasses)</p>",
        "id": 273022706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645656420
    },
    {
        "content": "<p>So the problem should go away if you try this on a custom <code>nat'</code>?</p>",
        "id": 273049087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645680248
    }
]