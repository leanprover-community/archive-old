[
    {
        "content": "<p>Is there a way to alias a complex term with a shorthand<br>\ne.g. Rather than the pretty printer outputting \"(func a b c d e f g)\" it outputs \"x\", and whenever x appears in the proof it's replaced by the long version<br>\nIt would be an exact replacement, not parameterised by anything.<br>\nThe reason for this is that the proof I'm working on has loads of really long terms in that make reading and comprehending the output really hard</p>",
        "id": 286067877,
        "sender_full_name": "Rosie Baish",
        "timestamp": 1655211807
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 286070028,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1655212764
    },
    {
        "content": "<p>If you are in a tactic proof, you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>There might be a tactic for this, but I couldn't immediately find it.</p>",
        "id": 286075859,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1655215206
    },
    {
        "content": "<p>There's <code>set</code> in mathlib3</p>",
        "id": 286078152,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655216100
    },
    {
        "content": "<p>There's generalize, borrowing Wojciech example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">;</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, it \"forgets\" the concrete value of <code>z</code> and only replaces things in the goal.<br>\nWe can use the <code>generalize hz : f x y = z</code> notation to add an hypothesis <code>hz : f x y = z</code> to the context, allowing us to unfold <code>z</code> again at a later point in the proof. </p>\n<p>Eventually we should be able to write <code>generalize hz : f x y = z at h |-</code> to do the substitution at hypotheses as well, but until that is implemented we can work around it by <code>revert</code>ing the hypotheses that mention <code>f x y</code>.</p>\n<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Result in the proof state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.7</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>Before the <code>sorry</code></p>",
        "id": 286084232,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1655218452
    }
]