[
    {
        "content": "<p>Suppose I've come across a list of <code>TSyntax `tactic</code>s (e.g. that my decision procedure has suggested will solve a goal), and I would like to re-assemble these into a <code>TSyntax `tacticSeq</code>. How do I do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">howDoI</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 305936461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666657263
    },
    {
        "content": "<p>To <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> my problem, I'd like to make the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PermuteGoals</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Syntax.TSepArray.ofElems</span> <span class=\"o\">{</span><span class=\"n\">ks</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">sep</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"n\">ks</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TSepArray</span> <span class=\"n\">ks</span> <span class=\"n\">sep</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">mkSepArray</span> <span class=\"n\">elems</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">sep.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">mkNullNode</span> <span class=\"k\">else</span> <span class=\"n\">mkAtom</span> <span class=\"n\">sep</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:=</span> <span class=\"n\">TSepArray.ofElems</span> <span class=\"n\">L</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">on_goal</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>This fails with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"s2\">\";\"</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>and I'd like to bridge the gap. (Using indenting rather than semicolons is also a fine solution!)</p>",
        "id": 305936469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666657269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, could I ping you on this one?</p>",
        "id": 305954638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666673678
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax.Tactic</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"bp\">;*</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">;*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305954659,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666673702
    },
    {
        "content": "<p>I was just about to collect all the options you have for antiquoting tacticSeqs! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 305954673,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666673724
    },
    {
        "content": "<p>Ah, too easy. :-) Is there a description somewhere of the antiquoting mechanism? I failed to discover these by reading the source code, even after thinking to look at antiquotations.</p>",
        "id": 305955007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666674016
    },
    {
        "content": "<p>I guess it's just a matter of knowing examples to look at.</p>",
        "id": 305955022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666674033
    },
    {
        "content": "<p>Gah, and how do I flatten a <code>Array (TSyntax `tactic.seq)</code> to a <code>TSyntax `tactic.seq</code>?</p>",
        "id": 305957745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676042
    },
    {
        "content": "<p>Or promote a <code>TSyntax `tactic</code> to a singleton <code>TSyntax `tactic.seq</code>?</p>",
        "id": 305958019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676244
    },
    {
        "content": "<p>This seems like the wrong question. I pretty much never use <code>tacticSeq</code> except insofar as it appears going in or out of syntax quotations. The main trick is that if <code>$tac</code> is a tacticSeq then <code>($tac)</code> is a tactic, and <code>$[$tac]*</code> will interpolate an array of tactics as a tacticSeq.</p>",
        "id": 305958315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666676428
    },
    {
        "content": "<p>Perfect. <code>($tac)</code> was what I was missing.</p>",
        "id": 305958405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676512
    },
    {
        "content": "<p>Is there a multi-line version of <code>($tac)</code>? i.e. no parentheses and semicolons.</p>",
        "id": 305958483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676547
    },
    {
        "content": "<p>yes, you can do <code>(tac \\n tac)</code> too</p>",
        "id": 305958525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666676591
    },
    {
        "content": "<p>the parentheses are required though</p>",
        "id": 305958546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666676624
    },
    {
        "content": "<p>But I'm starting from a tacticSeq...?</p>",
        "id": 305958636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676684
    },
    {
        "content": "<p>I think you need to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 305958664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666676708
    },
    {
        "content": "<p>The example I'm fighting with is meant to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span>\n<span class=\"n\">on_goal</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">37</span>\n<span class=\"n\">exact</span> <span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 305958672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676715
    },
    {
        "content": "<p>But it's coming out as <code>(constructor; on_goal 1 =&gt; (exact 37); exact 37) </code>, where the second <code>exact 37</code> applies also to goal 1</p>",
        "id": 305958695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676747
    },
    {
        "content": "<p>don't use semicolons?</p>",
        "id": 305958757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666676771
    },
    {
        "content": "<p>that seems like a parenthesizer error though</p>",
        "id": 305958777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666676787
    },
    {
        "content": "<p>Let me <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> for a moment. I'm not writing this by hand.</p>",
        "id": 305958783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666676791
    },
    {
        "content": "<p>I think it's worth pointing out that <code>simp; assumption</code> is <em>not</em> a tactic.  (Although some parts of the system pretend it is by wrapping the two tactics in a <code>mkNullNode</code>, but that's a story for another day..)</p>",
        "id": 305961689,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666678007
    },
    {
        "content": "<p>You should probably use <code>Array Syntax.Tactic</code> everywhere, and only convert to a tactic on the top-level.  (With parens for now.)  Then you can store <code>simp; assumption</code> as <em>two</em> tactics.  We'll figure something out for the code actions eventually so that we can replace a tactic by a sequence of tactics.</p>",
        "id": 305961906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666678090
    },
    {
        "content": "<p>Okay, sorry for the delay, here's an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PermuteGoals</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Syntax</span>\n\n<span class=\"sd\">/-- A representation of a semi-structured</span>\n<span class=\"sd\">(i.e. only uses `on_goal` for structuring) tactic script. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Script</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n<span class=\"bp\">|</span> <span class=\"n\">on_goal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Script.compile</span> <span class=\"o\">:</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Syntax.Tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">s</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"bp\">←</span> <span class=\"n\">S.compile</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">S</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">on_goal</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">a.compile</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">b.compile</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">on_goal</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- fails, a is not a TSyntax `tactic.seq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Script</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">constructor</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"mi\">42</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"mi\">37</span><span class=\"o\">)))))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">script</span> <span class=\"bp\">←</span> <span class=\"n\">test</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"n\">script.compile</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 305962705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666678586
    },
    {
        "content": "<p>But I will in any case go and rethink this having seen <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s suggestion.</p>",
        "id": 305962719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666678607
    },
    {
        "content": "<p>One approach might be to take a page from the infoTree implementation and have a monad which stores a <code>Array Syntax.Tactic</code> in the state, and then you have the following operations:</p>\n<ul>\n<li><code>pushTactic : Syntax.Tactic -&gt; M Unit</code>: insert a new tactic node in the state</li>\n<li><code>withOnGoal : Nat -&gt; M Unit -&gt; M Unit</code>: First stash the state in <code>tacs</code> and clear it, then run the continuation. Retrieve the new state <code>tacs'</code>, and construct <code>(on_goal $n =&gt; $tacs')</code> and push it to <code>tacs</code> and restore the state.</li>\n</ul>",
        "id": 305963073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666678823
    },
    {
        "content": "<p>I guess I'm not sure what problem a monad is solving here. It sounds like you want to do something intertwined with the tactic discovery process? That seems like unnecessary complication. I'm happy with some intermediate representation describing the structure of the proof, and am just looking for a way to synthesize the <code>Array Syntax.Tactic</code> from it.</p>",
        "id": 305963694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666679239
    },
    {
        "content": "<p>Well, all of your tactics need to do some proof recording as well, right? The manual version of what I just said would be to pass an <code>Array Syntax.Tactic</code> in and out of all the augmented tactics (or just out and append everything together). It will be a lot of common bookkeeping compared to having the monad handle it</p>",
        "id": 305964325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666679600
    },
    {
        "content": "<p>anyway, I agree with Gabriel that the \"intermediate representation describing the structure of the proof\" can be <code>Array Syntax.Tactic</code>; the monad is just a way to put stuff together transparently.</p>",
        "id": 305964488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666679677
    },
    {
        "content": "<p>Okay. I appreciate the point about the monad, and I'll try that later, but it's orthogonal to my immediate problem. However I think I've got it now.</p>",
        "id": 305964856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666679873
    },
    {
        "content": "<p>Here's a working version of your example BTW:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"on_goal \"</span> <span class=\"n\">num</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- A representation of a semi-structured</span>\n<span class=\"sd\">(i.e. only uses `on_goal` for structuring) tactic script. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Script</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n<span class=\"bp\">|</span> <span class=\"n\">on_goal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Script.compile</span> <span class=\"o\">:</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Syntax.Tactic</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">acc.push</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">s</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S.compile</span> <span class=\"o\">(</span><span class=\"n\">acc.push</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">on_goal</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">a.compile</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">b.compile</span> <span class=\"o\">(</span><span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">on_goal</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 305964964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666679936
    },
    {
        "content": "<p>I had come up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A representation of a semi-structured</span>\n<span class=\"sd\">(i.e. only uses `on_goal` for structuring) tactic script. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Script</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n<span class=\"bp\">|</span> <span class=\"n\">array</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n<span class=\"bp\">|</span> <span class=\"n\">on_goal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">Script</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Script.compile</span> <span class=\"o\">:</span> <span class=\"n\">Script</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Syntax.Tactic</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">array</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">a.mapM</span> <span class=\"n\">compile</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flatten</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">on_goal</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">a.compile</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">on_goal</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>(so with a different definition of <code>Script</code>, but whatever). Thanks for this, I will be able to use some combination of these.</p>",
        "id": 305965515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666680272
    }
]