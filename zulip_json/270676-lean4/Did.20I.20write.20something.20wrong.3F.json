[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">shortest_aux</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ps</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">ps'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n    <span class=\"k\">if</span> <span class=\"n\">o'</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">+</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">o'</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">ctx.notElem</span> <span class=\"n\">g'</span> <span class=\"k\">then</span>\n      <span class=\"k\">match</span> <span class=\"n\">shortest_aux</span> <span class=\"n\">ps</span> <span class=\"n\">g'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">+</span><span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">es'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">+</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">es'</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">shortest_aux</span> <span class=\"n\">ps'</span> <span class=\"n\">o</span> <span class=\"n\">g</span> <span class=\"n\">ctx</span> <span class=\"n\">l</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">shortest_aux</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">shortest_aux</span> <span class=\"n\">ps</span> <span class=\"n\">g'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">shortest_aux</span> <span class=\"n\">ps</span> <span class=\"n\">g'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">shortest_aux</span> <span class=\"n\">ps</span> <span class=\"n\">g'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">4</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">shortest_aux</span> <span class=\"n\">ps</span> <span class=\"n\">g'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">5</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">shortest_aux</span> <span class=\"n\">ps</span> <span class=\"n\">g'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relationLean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 312999143,
        "sender_full_name": "ðŸ‘€ï¼Ÿ",
        "timestamp": 1669792493
    },
    {
        "content": "<p>Its not necessarily wrong, lean just cannot do the termination proof automatically so you have to. There is documentation in theorem proving in Lean on how to do that</p>",
        "id": 313013191,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1669798960
    },
    {
        "content": "<p>How do I write a termination proof?</p>",
        "id": 313013718,
        "sender_full_name": "ðŸ‘€ï¼Ÿ",
        "timestamp": 1669799163
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction</a> explains some examples of this</p>",
        "id": 313063780,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669816221
    }
]