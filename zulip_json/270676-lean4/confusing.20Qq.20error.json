[
    {
        "content": "<p>This does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq.Match</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n  <span class=\"k\">match</span> <span class=\"n\">e'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>It gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Expected</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n<span class=\"n\">Messages</span> <span class=\"n\">here</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">unquoteExpr</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"n\">Messages</span> <span class=\"n\">above</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n<span class=\"n\">LocalDecl</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">optParam</span> <span class=\"n\">Bool</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>It does work if I add a monadic bind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e</span>\n  <span class=\"k\">match</span> <span class=\"n\">e'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I'm confused about what's going wrong in <code>foo</code>, the first example. I guess maybe the <code>Q()</code> macro is trying to parse more input that I've given it, so it's pulling from the next line too, somehow?</p>",
        "id": 315469878,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670881896
    },
    {
        "content": "<p>Yes, the <code>q()</code> macro tries to reduce the types, which means that <code>e'</code> gets unfolded to <code>e</code> if it's a let-binding.  And then it no longer knows what type the expression <code>e</code> has.  (Because it has type <code>Expr</code> and not <code>Q(Prop)</code>.)</p>",
        "id": 315470489,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670882133
    },
    {
        "content": "<p>We've been talking about making <code>let</code> non-dependent for a long time (i.e., so it would be like <code>have</code>), which would address this issue.</p>",
        "id": 315470749,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670882238
    },
    {
        "content": "<p>hm... so the problem is that the matcher macro <code>~q</code> has <em>too much</em> information?</p>",
        "id": 315471028,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670882352
    },
    {
        "content": "<p>Yes!</p>",
        "id": 315471314,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670882448
    },
    {
        "content": "<p>I'm putting my cursor over that part of the code, and the difference I see is that in the <code>foo</code> case we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">QQ</span> <span class=\"o\">(</span><span class=\"n\">Expr.sort</span> <span class=\"n\">Level.zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>and in the <code>foo'</code> case we have just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>i.e. the <code>e'</code> is gone.</p>",
        "id": 315471442,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670882499
    },
    {
        "content": "<p>I think you just have the cursor on the wrong position.  This is what I get for foo':</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">)</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 315471644,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670882570
    },
    {
        "content": "<p>Is the bind that I've added (<code>← pure e</code>) the best way to work around this problem for now?</p>",
        "id": 315473457,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670883233
    },
    {
        "content": "<p>Probably.</p>",
        "id": 315473764,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670883349
    },
    {
        "content": "<p>I suppose I can finesse my function declarations so that all of the casting happens at function calls to sidestep the problem.</p>",
        "id": 315473969,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670883426
    },
    {
        "content": "<p>I've been using carefully positioned <code>have</code> statements instead of <code>let</code> in QQ programs to make sure it doesn't unfold stuff it shouldn't</p>",
        "id": 315525147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670915772
    },
    {
        "content": "<p>unfortunately <code>have</code> isn't a <code>doElem</code> though so you have to reorganize things sometimes</p>",
        "id": 315525177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670915803
    }
]