[
    {
        "content": "<p>The following snippet triggers a C++ exception which looks like a bug on Lean's side. The core of the problem seems to be splitting <code>EQ</code> with a tactic (in <code>makePair?</code>) then trying to use the resulting value in a computation (in <code>usePair</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">FinInt</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">FinInt</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">next</span><span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">FinInt</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">FinInt</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">sz</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">FinInt</span> <span class=\"n\">sz</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">sz</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sz</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">next</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"n\">sz</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">sz</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">:</span> <span class=\"n\">FinInt</span> <span class=\"n\">sz</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">makePair</span><span class=\"bp\">?</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sz</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">FinInt</span> <span class=\"n\">sz</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Pair</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">sz</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">sz'</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">EQ</span><span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">/\\</span> <span class=\"n\">sz</span> <span class=\"bp\">=</span> <span class=\"n\">sz'</span> <span class=\"k\">then</span>\n            <span class=\"k\">have</span> <span class=\"n\">rhs'</span> <span class=\"o\">:</span> <span class=\"n\">FinInt</span> <span class=\"n\">sz</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n                <span class=\"n\">cases</span> <span class=\"n\">EQ</span><span class=\"bp\">;</span>\n                <span class=\"n\">case</span> <span class=\"n\">intro</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n                <span class=\"n\">exact</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span>\n            <span class=\"o\">}</span><span class=\"bp\">;</span>\n            <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Pair.mk</span> <span class=\"n\">sz</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs'</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">usePair</span><span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">sz</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"n\">rhs</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">makePair</span><span class=\"bp\">?</span> <span class=\"o\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"mi\">8</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"mi\">8</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">usePair</span>\n<span class=\"c1\">-- libc++abi: terminating with uncaught exception of type lean::exception: incomplete case</span>\n</code></pre></div>\n<p>The bug was found by <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> on <code>leanprover/lean4:nightly-2022-05-17</code>. I tested this minimized version on today's nightly <code>leanprover/lean4:nightly-2022-06-29</code>. Cc <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I suppose.</p>",
        "id": 287839995,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1656502979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484617\">@Sébastien Michelland</span> Thanks for creating the mwe. I pushed a fix for this issue:<br>\n<a href=\"https://github.com/leanprover/lean4/commit/a888b21bce4000322f1de4b975edf43840240896\">https://github.com/leanprover/lean4/commit/a888b21bce4000322f1de4b975edf43840240896</a></p>",
        "id": 287857512,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656511122
    }
]