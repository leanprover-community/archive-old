[
    {
        "content": "<p>Is there a syntax for interpolating an <code>Expr</code> into a <code>Syntax</code> for use in <code>elabTerm</code>? In lean 3 you could do this using the <code>%%</code> notation, and it would generate an <code>as_is</code> macro in the pre-expression. Is there an analogue in lean 4? Some random grepping didn't show anything relevant, but I can't imagine this is not done somewhere in lean already.</p>",
        "id": 274797592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646895967
    },
    {
        "content": "<p>No, this is in fact not done in Lean already. We anticipated we might need it, but then it just didn't come up even once. Can you use an mvar/fvar to represent the term in your use case?</p>",
        "id": 274803162,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646900519
    },
    {
        "content": "<p>This is indeed more complicated.  A common trick is to assign the expression to a metavariable, and then put the metavariable into the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n<span class=\"n\">assignExprMVar</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span> <span class=\"n\">myExpr</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">...</span> <span class=\"bp\">?</span><span class=\"n\">m</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274803233,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646900552
    },
    {
        "content": "<p>This trick only works if you share the same metavar context though.  It won't work if you generate command syntax for example.</p>",
        "id": 274803266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1646900596
    },
    {
        "content": "<p>Oh, that's a useful trick. I guess it could even be wrapped up into a <code>antiquoteExpr : Expr -&gt; TermElabM Syntax</code> function</p>",
        "id": 274806578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646902762
    },
    {
        "content": "<p>I'm trying to use the trick above but I'm getting a bit confused. If I wanted to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">coolFunc</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">coolFunc</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\":)\"</span>\n</code></pre></div>\n<p>what would that look like?</p>",
        "id": 278429805,
        "sender_full_name": "Ian Benway",
        "timestamp": 1649537387
    },
    {
        "content": "<p>I think Gabriel's lib (<a href=\"https://github.com/gebner/quote4\">quote4</a>) might be helpful</p>",
        "id": 278430000,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649537577
    },
    {
        "content": "<p>This looks like a very useful trick, but I don't quite understand it.  In <code>let mvar ← elabTerm `(?m) none</code>, what is <code>`(?m)</code>?  It looks like it's supposed to be Syntax for a metavariable, but when I try using this command in a tactic I get an error message about the argument to elabTerm being the wrong type--it has type <code>?m.3004 Syntax</code> but is expected to have type <code>Syntax</code>.  What am I doing wrong?</p>",
        "id": 286277744,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655329149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/Expr.20antiquotations/near/286277744\">said</a>:</p>\n<blockquote>\n<p>This looks like a very useful trick, but I don't quite understand it.  In <code>let mvar ← elabTerm `(?m) none</code>, what is <code>`(?m)</code>?  It looks like it's supposed to be Syntax for a metavariable, but when I try using this command in a tactic I get an error message about the argument to elabTerm being the wrong type--it has type <code>?m.3004 Syntax</code> but is expected to have type <code>Syntax</code>.  What am I doing wrong?</p>\n</blockquote>\n<p>the `(?m) quotation syntax is in fact a monadic function due to hygiene, if you want to obtain the syntax from it you have to bind on the variable so e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>will, if you are working in a monad that implements <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MonadQuotation#doc\">docs4#Lean.MonadQuotation</a>, let <code>foo</code> have type <code>Syntax</code>, in this specific use case you might also consider to bind inline or w/e.</p>",
        "id": 286283031,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655331987
    },
    {
        "content": "<p>Thanks Henrik.  That seems to work.</p>",
        "id": 286285705,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655333653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Expr.20antiquotations/near/286283031\">said</a>:</p>\n<blockquote>\n<p>the `(?m) quotation syntax is in fact a monadic function due to hygiene, if you want to obtain the syntax from it you have to bind on the variable so e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that if you don't need hygiene, there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Unhygienic#doc\">docs4#Lean.Unhygienic</a> to get pure synax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Unhygienic.run</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286315635,
        "sender_full_name": "Mac",
        "timestamp": 1655364284
    },
    {
        "content": "<p>It looks like this trick won't help with the application I have in mind.  In Lean 3, it was possible to write a tactic like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.dm</span>\n        <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"n\">lean.parser.ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">H</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">‵</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.have</span> <span class=\"n\">none</span> <span class=\"bp\">‵‵</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">‵‵</span><span class=\"o\">(</span><span class=\"n\">not_and_distrib.mp</span> <span class=\"bp\">%%</span><span class=\"n\">H</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">‵</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.have</span> <span class=\"n\">none</span> <span class=\"bp\">‵‵</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">%%</span><span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">‵‵</span><span class=\"o\">(</span><span class=\"n\">not_or_distrib.mp</span> <span class=\"bp\">%%</span><span class=\"n\">H</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"De Morgan′s laws don′t apply\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Notice that this tactic uses antiquotation to insert expressions into the preexpressions that are passed to the <code>have</code> tactic.  To do something similar in Lean 4, it seems like I need to insert expressions into the Syntax that is passed to <code>Lean.Elab.Tactic.evalTactic</code>, but I don't think inserting a metavariable in that Syntax works.  So is there another way to get the result I'm after?  Is there a way, in a tactic, to call another tactic, passing it arguments, other than <code>Lean.Elab.Tactic.evalTactic</code>?</p>",
        "id": 286371910,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655394142
    },
    {
        "content": "<p>Rather than calling the tactic via <code>evalTactic</code>, you could look at the the corresponding <code>MetaM</code> tactic in <code>Lean/Meta/Tactic/</code>. Often (but unfortunately not always) the interactive version of the tactic just amounts to some elaboration plus a call to the <code>MetaM</code> version. This is similar to the difference, in Lean 3, between <code>tactic.interactive.apply</code> and <code>tactic.apply</code>.</p>\n<p>This way certainly is more cumbersome, so maybe someone else has a clever suggestion.</p>",
        "id": 286373086,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1655394624
    },
    {
        "content": "<p>After further experimentation, I think the metavariable trick will work with evalTactic!  I think I just wasn't doing it carefully enough before.</p>",
        "id": 286417689,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1655415781
    }
]