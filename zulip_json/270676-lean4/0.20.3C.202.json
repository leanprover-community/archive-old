[
    {
        "content": "<p>Is it possible to prove <code>(0 : ℝ) &lt; 2</code> in Lean 4 with the mathlib3 binport? In full, the goal is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Real.hasLt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Real.hasZero</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoidₓ.instOfNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"mi\">2</span> <span class=\"n\">Real.addMonoid</span> <span class=\"n\">Real.hasOne</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 298598365,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1663079550
    },
    {
        "content": "<p>I would try to prove that <code>0</code> and <code>2</code> are equal to <code>nat.cast 0</code> and <code>nat.cast 2</code> and then use <code>nat.cast_lt</code> to reduce it to something norm_num / dec_trivial can do</p>",
        "id": 298598762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663079658
    },
    {
        "content": "<p>Oh wait, it's already in that form</p>",
        "id": 298598926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663079722
    },
    {
        "content": "<p>I'm not quite sure how you got <code>ofNat</code> in your terms given that this is from mathlib, maybe binport is doing it? But see if you can apply <code>Nat.cast_lt</code> or whatever it's called</p>",
        "id": 298599523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663079894
    },
    {
        "content": "<p><code>rw [Nat.cast_lt]</code> and <code>apply Nat.cast_lt.mpr</code> don't seem to work. E.g. the first gives:</p>\n<p>tactic 'rewrite' failed, did not find instance of the pattern in the target expression<br>\n  (fun a b [self : HasLiftT a b] =&gt; self.1) ℕ ?m.310 ?m.313 &lt; (fun a b [self : HasLiftT a b] =&gt; self.1) ℕ ?m.310 ?m.314<br>\n⊢ 0 &lt; 2</p>",
        "id": 298600509,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1663080171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/0.20.3C.202/near/298599523\">said</a>:</p>\n<blockquote>\n<p>I'm not quite sure how you got <code>ofNat</code> in your terms given that this is from mathlib, maybe binport is doing it?</p>\n</blockquote>\n<p>It's probably because we have this instance in our code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoidWithOneₓ.natCast</span>\n</code></pre></div>\n<p>Is there a better way to get real numerals?</p>",
        "id": 298608325,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1663082148
    },
    {
        "content": "<p>Oh, maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.cast</span>\n</code></pre></div>\n<p>? I'll try that tomorrow.</p>",
        "id": 298629823,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1663089057
    },
    {
        "content": "<p>I proved it. But it's not pretty...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.cast_lt.mpr</span>\n  <span class=\"n\">norm_cast</span>\n</code></pre></div>",
        "id": 298642370,
        "sender_full_name": "Ramon Fernández Mir",
        "timestamp": 1663093419
    },
    {
        "content": "<p>It looks beautiful to me!</p>",
        "id": 298643235,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1663093754
    },
    {
        "content": "<p>Interestingly, these give error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n     <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 298644492,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1663094168
    },
    {
        "content": "<p>I would assume that the <code>&lt;</code> is being interpreted differently in those examples?</p>",
        "id": 298645195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663094415
    },
    {
        "content": "<p>I think it's a matter of type inference having a hard time finding the instance when it is buried under a lambda. I tried helping it out with more information:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Real</span> <span class=\"n\">Real.hasLt</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HasLiftT</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.1</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.cast_lt.mpr</span>\n    <span class=\"n\">norm_cast</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>But still: </p>\n<p>type mismatch<br>\n  this<br>\nhas type<br>\n  @LT.lt.{0} Real Real.hasLt<br>\n    ((@fun (a b : Type) [self : HasLiftT.{?u.1608, ?u.1607} a b] =&gt; @HasLiftT.lift.{?u.1611, ?u.1610} a b self) Nat Real<br>\n      ?m.1620 (@OfNat.ofNat.{0} ?m.1622 0 ?m.1623))<br>\n    ((@fun (a b : Type) [self : HasLiftT.{?u.1804, ?u.1803} a b] =&gt; @HasLiftT.lift.{?u.1807, ?u.1806} a b self) Nat Real<br>\n      ?m.1814 (@OfNat.ofNat.{0} ?m.1816 2 ?m.1817)) : Prop<br>\nbut is expected to have type<br>\n  @LT.lt.{0} Real Real.hasLt (@OfNat.ofNat.{0} Real 0 (@Zero.toOfNat0.{0} Real Real.hasZero))<br>\n    (@OfNat.ofNat.{0} Real 2 (@AddMonoidₓ.instOfNat.{0} Real 2 Real.addMonoid Real.hasOne)) : Prop</p>",
        "id": 298654758,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1663097892
    }
]