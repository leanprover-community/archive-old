[
    {
        "content": "<p>Is there an equivalent to <a href=\"https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Exception.html#v:assert\">Haskell's <code>assert</code></a> in lean4? I could only find <code>Lean.Meta.assert </code> which does not do what I want. I want something along the lines of <code>assert: Bool -&gt; a -&gt; a</code></p>\n<p>[I know lean is meant to be total, does not have exceptions, and thus asking for such a feature is unsound. Regardless, it seems useful to have when debugging...]</p>",
        "id": 272159973,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645037067
    },
    {
        "content": "<p>If you just want to assert something  python style<code>assert!</code> does exist as a macro and is used a few times in the  compiler.</p>",
        "id": 272160190,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645037173
    },
    {
        "content": "<p>Does work both in monadic and non monadic code.</p>",
        "id": 272160238,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645037212
    },
    {
        "content": "<p>Do you happen to know where it is elaborated? I can see that it is <a href=\"https://github.com/leanprover/lean4/blob/f33cb27d1c7cb61ba2c00cdb2299f42bf3d4f40b/stage0/src/Lean/Parser/Do.lean#L110\">declared as a builtin for <code>do</code> notation</a>, and <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/Lean/Parser/Term.lean#L233\">as a term</a></p>",
        "id": 272162169,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645038119
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Lean.Elab.Term.expandAssert\">docs4#Lean.Elab.Term.expandAssert</a> seems to be the spot</p>",
        "id": 272162329,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Wow, everytime I look at the docs4 generated files they look nicer.</p>",
        "id": 272162661,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645038332
    },
    {
        "content": "<p>Nice, yes, thanks!</p>",
        "id": 272162692,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645038339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> maybe I'm missing something, but it seems the source location for <code>expandAssert</code> is linked to <code>elabPanic</code>? (<a href=\"https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Lean/Elab/BuiltinNotation.lean#L137-L143\">This is the location I get</a>)</p>",
        "id": 272162836,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645038387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/assert.20in.20lean.3F/near/272162661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> Wow, everytime I look at the docs4 generated files they look nicer.</p>\n</blockquote>\n<p>Thanks!</p>\n<p>There is actually one rather major thing I'm getting wrong at the moment. E.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#ReaderT\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#ReaderT</a> is marked as noncomputable (and so are a lot of others) because of the way I check for computability (<a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process.lean#L206-L211\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process.lean#L206-L211</a>) as metnioned above this is partially taken from ll_infer_type.cpp, specifically the part that generates errors about noncompuatbility <a href=\"https://github.com/leanprover/lean4/blob/master/src/library/compiler/ll_infer_type.cpp#L182-L205\">https://github.com/leanprover/lean4/blob/master/src/library/compiler/ll_infer_type.cpp#L182-L205</a> but its only does the check for the existence of a <code>cstage2</code> name and not this little if statement adn the foor loop because I didnt exactly get what this is doing so all stuff that does not have a cstage representation such as definitions that are just types are marked as noncomputable, could you enlighten me on what's happening there? Or how to do a computability check from within Lean in general.</p>",
        "id": 272163284,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/assert.20in.20lean.3F/near/272162836\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> maybe I'm missing something, but it seems the source location for <code>expandAssert</code> is linked to <code>elabPanic</code>? (<a href=\"https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Lean/Elab/BuiltinNotation.lean#L137-L143\">This is the location I get</a>)</p>\n</blockquote>\n<p>The actual declaration is right below , the generated location does seem to be wrong for some reason indeed...</p>",
        "id": 272163830,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I am assuming you want to reflect back in the documentation the <code>noncomputable</code> annotations provided by users in the .lean files, correct?</p>",
        "id": 272163969,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645038855
    },
    {
        "content": "<p>Yes.</p>",
        "id": 272163988,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038866
    },
    {
        "content": "<p>Cool. I will add an API for this.</p>",
        "id": 272164041,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645038889
    },
    {
        "content": "<p>\\o/</p>",
        "id": 272164060,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038897
    },
    {
        "content": "<p>I did look around for such an API and eventually just figured I'd try translating the cpp code that seems to be responsible for checking the error <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272164105,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645038922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/assert.20in.20lean.3F/near/272163830\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/assert.20in.20lean.3F/near/272162836\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> maybe I'm missing something, but it seems the source location for <code>expandAssert</code> is linked to <code>elabPanic</code>? (<a href=\"https://github.com/leanprover/lean4/blob/31969765d278416470dcecf118c31aa714bd38ce/src/Lean/Elab/BuiltinNotation.lean#L137-L143\">This is the location I get</a>)</p>\n</blockquote>\n<p>The actual declaration is right below , the generated location does seem to be wrong for some reason indeed...</p>\n</blockquote>\n<p>The length of the slice certainly does match its just offset for some reason...</p>",
        "id": 272164529,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645039128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">findDeclarationRanges</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Elab.Term.expandAssert</span>\n</code></pre></div>\n<p>Lean is also very much convinced that this declaration is at line 137 to 143 so this is probably a bug in the declaration range implementation,  I opened an issue here <a href=\"https://github.com/leanprover/lean4/issues/1021\">https://github.com/leanprover/lean4/issues/1021</a></p>",
        "id": 272166058,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645039734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/assert.20in.20lean.3F/near/272164060\">said</a>:</p>\n<blockquote>\n<p>\\o/</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/373a64ee09678d03db5eb27457ec4c2ae909abea/tests/lean/isNoncomputable.lean\">https://github.com/leanprover/lean4/blob/373a64ee09678d03db5eb27457ec4c2ae909abea/tests/lean/isNoncomputable.lean</a></p>",
        "id": 272182949,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645047615
    },
    {
        "content": "<p>I'll add it after the nightly is out tomorrow!</p>",
        "id": 272183613,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645048010
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/ReaderT\">docs4#ReaderT</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Classical.choose\">docs4#Classical.choose</a> done!</p>",
        "id": 272299638,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645121180
    }
]