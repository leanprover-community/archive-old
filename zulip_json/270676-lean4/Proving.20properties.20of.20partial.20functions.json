[
    {
        "content": "<p>In the <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">lean4 documentation</a>, it discusses how you cannot prove properties of partial functions, but then says</p>\n<blockquote>\n<p>We are aware that proof assistants such as Isabelle provide a framework for defining partial functions that does not prevent users from proving properties about them. This kind of framework can be implemented in Lean 4. Actually, it can be implemented by users since Lean 4 is an extensible system. The developers current have no plans to implement this kind of support for Lean 4. However, we remark that users can implement it using a function that traverses the auxiliary unsafe definition generated by Lean, and produces a safe one using an approach similar to the one used in Isabelle.</p>\n</blockquote>\n<p>I imagine I am not the first person interested in proving properties of partial functions in lean4. Has anyone attempted this approach in lean4?  Is there a previous discussion of what would be involved?</p>",
        "id": 314947377,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670607969
    },
    {
        "content": "<p>If this is related to <a href=\"https://proofassistants.stackexchange.com/questions/1883/simple-proof-about-string-split\">https://proofassistants.stackexchange.com/questions/1883/simple-proof-about-string-split</a> note I don’t think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.split#doc\">docs4#String.split</a> is partial.  It just uses the <code>partial</code> keyword (in its helper function) for expediency.</p>",
        "id": 314949731,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670608666
    },
    {
        "content": "<p>Yes, this is related, but i assume it is impossible to prove anything about <code>String.split</code> without proving something about it's auxiliary implementation function (which is a partial function)?</p>",
        "id": 314950780,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670608959
    },
    {
        "content": "<p>The string functions in Lean 4 are optimized for programming, not proving, which is most apparent in the choice of UTF-8 encoding. Definitely not recommended for learning proving in Lean!</p>",
        "id": 314951294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670609122
    },
    {
        "content": "<p>If you do want to prove something about strings, I would suggest defining your own <code>split</code> based on the <code>List Char</code> representation (which is the \"formal\" definition of <code>String</code>, but not the one desired for programming)</p>",
        "id": 314951510,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670609189
    },
    {
        "content": "<p>I guess we could refactor the String stuff to use @implementedBy in the future maybe?</p>",
        "id": 314952328,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670609441
    },
    {
        "content": "<p>yeah, I think I will eliminate the <code>partial</code> from those string functions at some point</p>",
        "id": 314952431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670609481
    },
    {
        "content": "<p>hopefully it should be possible to write it without <code>partial</code> and also without regressing the implementation, so that <code>@[implemented_by]</code> isn't needed</p>",
        "id": 314952609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670609530
    },
    {
        "content": "<p>For some context, I was attempting to solve some Advent of Code problems in Lean, and then prove their correctness.  But it seems like Lean is not designed for this type of verified programming?  As in ~nobody is interested in proving properties of programs written in the typical style (using partial functions, etc)?</p>",
        "id": 314954355,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670610056
    },
    {
        "content": "<p>It is impossible to prove properties about programs written with partial functions right now as a simple matter of fact, this is not a question of interest. What people would have to be interested in is improving the heuristics for lean to automatically determine that programs terminate + refactoring where possible to non partial style programs. There are in principle a lot of people that care about proving things about Lean programs in Lean it's just that right now you have to put some effort in yourself to allow the system to do that.</p>",
        "id": 314957930,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670611160
    },
    {
        "content": "<p>I (as Std maintainer) am interested in supporting that use case</p>",
        "id": 314957932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611161
    },
    {
        "content": "<p>Lean 4 core repo basically doesn't care at all but tolerates patches to fix issues in <code>Init</code></p>",
        "id": 314958024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611193
    },
    {
        "content": "<p>Std is still under construction but I will say the same thing as I do to anyone trying out AOC: <em>take notes</em> about missing functionality and report them as issues</p>",
        "id": 314958517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611332
    },
    {
        "content": "<p>For example: what string functions did you need? Were they missing, or opaque/partial? What properties did you need about them?</p>",
        "id": 314958829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611439
    },
    {
        "content": "<p>I am happy to help in any way possible.  I certainly will report any missing functionality in Std.  However, for opaque/partial functions, is it really helpful for me to report?  You already know there are tons of partial functions in Std.  Ideally you wouldn't have to rewrite every single one of those functions to be total, and instead have a generic mechanism for proving things about their behavior?</p>",
        "id": 314963812,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670613058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> I think you are conflating two things.  The  implementation of String.split uses partial when it doesn’t necessarily have to.  The reason from this discussion is just that it was both written to be optimized and it wasn’t a priority at the time to prove stuff about it.  (Also it maybe there is a third reason about needing it for bootstrapping.). I totally expect that such sting operations will be cleaned up to be able to prove things about them, especially if people like you find these cases and bring them to the attention of the Lean maintainers.  Second, truly partial functions or functions one can’t prove are total present a special challenge.  The reason Lean can prove things about recursive functions is that you prove they are total.  This is foundational to Lean’s logic.  Without this check on totality, you could loop forever and you have to prove you don’t.  (Now, if you have a specific partial function you want to implement and prove something about, users here could give you advice on how to do it in the easiest way.)</p>",
        "id": 314964804,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670613394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/Proving.20properties.20of.20partial.20functions/near/314963812\">said</a>:</p>\n<blockquote>\n<p>I am happy to help in any way possible.  I certainly will report any missing functionality in Std.  However, for opaque/partial functions, is it really helpful for me to report?  You already know there are tons of partial functions in Std. </p>\n</blockquote>\n<p>s/Std/core/. There are zero <code>partial</code> functions in Std outside of meta code, and if/when Std adopts the neglected string functions it will remove <code>partial</code> from them in the process</p>",
        "id": 314966817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670614026
    },
    {
        "content": "<p>And yes, it is helpful to report. There are plenty of partial functions in lean core but a grep doesn't tell me which ones have actually come up in the course of verification activity and which are implementation details that are only ever used for \"regular\" programming</p>",
        "id": 314967047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670614115
    },
    {
        "content": "<p>Also, the terminology is inherited from PL theory but <code>partial</code> really isn't the best word for these functions. It is meant here in the sense of a function that does not necessarily terminate, but it is somewhat at odds with the mathematical notion of a partial function meaning a function which is not defined on its whole domain. There are lots of ways to represent mathematical partial functions in lean and none of them use the <code>partial</code> keyword.</p>",
        "id": 314967747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670614346
    },
    {
        "content": "<p>For example, you can have a function which has a precondition as a hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.get'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>or you can have a function which returns an option type so that it can tell you whether it was defined or not at that point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.get</span><span class=\"bp\">?'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>There is even a more complicated variant on the option type which can be used to handle the case where it is not decidable whether the function was in fact defined or not (this is the <code>part α</code> type from mathlib3 but it hasn't been ported yet), and this can be used to represent nonterminating functions as mathematical partial functions (this is how the theory of Turing machines is set up).</p>\n<p>The quote from Leo at the top of the thread is an acknowledgement that the reduction of arbitrary nonterminating computations to mathematical functions is both possible and done in practice in the Isabelle theorem prover, and the <code>partial</code> keyword is an MVP version of that concept which doesn't do all of that but still allows for general recursion without breaking the logic, which is what the devs needed to implement practical programs in lean 4.</p>",
        "id": 314969411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670614917
    },
    {
        "content": "<blockquote>\n<p>which ones have actually come up in the course of verification activity and which are implementation details that are only ever used for \"regular\" programming</p>\n</blockquote>\n<p>I think the reason I was confused is because my approach was:</p>\n<ol>\n<li>Write a bunch of programs in lean the \"regular\" way.</li>\n<li>Go back and prove some facts about their behavior.</li>\n</ol>\n<p>For what I've gathered, it seems like the response is \"nobody does that in Lean\".  That there are basically two use cases: The people who are proving things about programs, who are careful to avoid <code>partial</code> functions, and only call functions whose transitive dependencies avoid <code>partial</code>, and the people who are writing practical programs just to <em>do</em> something, who are happy to use <code>partial</code> for simplicity or speed.</p>",
        "id": 314972546,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670616078
    },
    {
        "content": "<p>I think for a lot of use cases it is easy to avoid <code>partial</code>, but there are certainly times I have found it the easiest thing to do.  I would add a third category of people:</p>\n<ul>\n<li>People who start by writing code that works and later go back through proving stuff about it, cleaning up the code as they do, replacing any <code>partial</code> or <code>unsafe</code> or tricky monadic code with code which is easier to prove stuff about.</li>\n</ul>",
        "id": 314973523,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670616452
    },
    {
        "content": "<p>But it seems like nobody is actively working on improving this workflow of proving things about practical Lean programs?  The focus is mostly on reducing the amount of <code>partial</code> or <code>unsafe</code> functions in libraries so it takes less effort to port to a \"provable\" form?</p>",
        "id": 314975049,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670617054
    },
    {
        "content": "<p>You keep saying that nobody is working on this or that and this is false</p>",
        "id": 314985629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621298
    },
    {
        "content": "<p>I'm trying to tell you that we <em>do</em> want to support this use case but there isn't a whole lot of manpower around and our priorities are very divided</p>",
        "id": 314985742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621350
    },
    {
        "content": "<p>But one of the biggest motivators to get things done is having someone who is actually using the stuff and reporting issues as they run into problems using it</p>",
        "id": 314986074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621434
    },
    {
        "content": "<p>Just to be clear re: <code>partial</code>: this is an <em>incomplete feature</em>. It is good enough to write programs but not good enough for verification. We know this, and would like to do it better, but there are a bunch of other things that have to get done first, some of which are dependencies and some of which are higher priority</p>",
        "id": 314986568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621648
    },
    {
        "content": "<p>In an ideal world, you would be able to use <code>partial</code> and get a definition which can be proved correct after the fact (on the inputs for which the definition terminates)</p>",
        "id": 314986765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621754
    },
    {
        "content": "<p>the mechanism for doing this is known, it's just a lot of work</p>",
        "id": 314986832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670621770
    },
    {
        "content": "<p>Sorry, I don't mean to imply some sort of criticism, I am only trying to understand the current status.  If there is WIP branch for proving with <code>partial</code> functions, or a hacky workaround that is used by other users then I would want to know about it.</p>\n<p>I meant my comment in a specific sense \"nobody is <em>actively</em> working on improving <em>this</em> workflow\".  By <em>this workflow</em> I was referring to the process of rewriting<code>partial</code> and <code>unsafe</code> functions to a form amenable to proving.</p>\n<p>I am happy to report all the issues I encounter with verifying practical AdventOfCode solutions, should I post them as Github issues?</p>",
        "id": 314992692,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670624441
    },
    {
        "content": "<p>Do you have a specific issue you are trying to solve? The discussion has been about generalities so for so there isn't much to point at</p>",
        "id": 315001718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670628637
    },
    {
        "content": "<p>There is WIP work for proving various things in Std, some of which is in open PRs and some of which is on master, but it's not clear to me if that's what you are looking for</p>",
        "id": 315001882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670628741
    },
    {
        "content": "<p>If you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I'm sure we can work out how you would rewrite it to make it amenable to proving</p>",
        "id": 315002071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670628885
    }
]