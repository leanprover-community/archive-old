[
    {
        "content": "<p>Users will be able to extend <code>deriving</code> for their own classes. However, <code>deriving</code> is a relatively new feature, and the API is not stable and there are missing features. That being said, users should be able to invoke <code>registerBuiltinDerivingHandler</code> from their plugins. You can build a plugin containing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkMyClassInstanceHandler</span> <span class=\"o\">(</span><span class=\"n\">declNames</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"bp\">...</span>\n\n<span class=\"n\">initialize</span>\n  <span class=\"n\">registerBuiltinDerivingHandler</span> <span class=\"bp\">`</span><span class=\"n\">MyClass</span> <span class=\"n\">mkMyClassInstanceHandler</span>\n</code></pre></div>\n<p>Disclaimer: we do not have many tests for Lean 4 plugins yet, and we never extended <code>deriving</code> using plugins :(<br>\nWe have a very simple plugin at <code>lean4/tests/plugin</code>.</p>",
        "id": 223853935,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1611548422
    }
]