[
    {
        "content": "<p>Hi all.  I think I found a nontermination bug when inductive types have floats as indices.  Code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">Test</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">Test.c</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>The reduce gives the following output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"n\">recursion</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Version:<br>\n<code>Lean (version 4.0.0, commit 96de208a6b1a, Release)</code></p>\n<p>I get the same behavior with structures too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Test</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282258523,
        "sender_full_name": "Logan Weber",
        "timestamp": 1652453699
    },
    {
        "content": "<p>Is <code>#reduce (1 : Float)</code> ok?</p>",
        "id": 282258712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652453777
    },
    {
        "content": "<p>Oh.  That doesn't terminate either.  Looks like this has nothing to do with inductive types.</p>",
        "id": 282259079,
        "sender_full_name": "Logan Weber",
        "timestamp": 1652453924
    },
    {
        "content": "<p>(Changing topic name)</p>",
        "id": 282259119,
        "sender_full_name": "Logan Weber",
        "timestamp": 1652453952
    },
    {
        "content": "<p>Eval seems to be fine though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282259223,
        "sender_full_name": "Logan Weber",
        "timestamp": 1652454001
    }
]