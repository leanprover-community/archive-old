[
    {
        "content": "<p>I'm trying to break down an existential in a hypothesis.<br>\n<a href=\"/user_uploads/3121/Sly0Q2zS9JRgpPuSH8RdVHdS/Screen-Shot-2022-06-09-at-12.30.52-AM.png\">Screen-Shot-2022-06-09-at-12.30.52-AM.png</a> <br>\nHow would I go about it?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Sly0Q2zS9JRgpPuSH8RdVHdS/Screen-Shot-2022-06-09-at-12.30.52-AM.png\" title=\"Screen-Shot-2022-06-09-at-12.30.52-AM.png\"><img src=\"/user_uploads/3121/Sly0Q2zS9JRgpPuSH8RdVHdS/Screen-Shot-2022-06-09-at-12.30.52-AM.png\"></a></div>",
        "id": 285484845,
        "sender_full_name": "Aron",
        "timestamp": 1654749065
    },
    {
        "content": "<p>h : ∃ x, (inc a x ∧ inc b x) ∧ ∀ (y : line), inc a y ∧ inc b y → x = y</p>",
        "id": 285484869,
        "sender_full_name": "Aron",
        "timestamp": 1654749101
    },
    {
        "content": "<p>In general, if I have h: exists x, p x, how do i get to two hypotheses x: domain(p) and hx: p x?</p>",
        "id": 285484925,
        "sender_full_name": "Aron",
        "timestamp": 1654749153
    },
    {
        "content": "<p>accidentally muted the topic. Trying to find it.</p>",
        "id": 285485015,
        "sender_full_name": "Aron",
        "timestamp": 1654749249
    },
    {
        "content": "<p><code>cases h</code></p>",
        "id": 285486204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654750568
    },
    {
        "content": "<p>In that case I would probably do something like <code>let \\&lt;x, \\&lt;ha, hb\\&gt;, H\\&gt; := h</code></p>",
        "id": 285486223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654750620
    },
    {
        "content": "<p>I didn't even know let could be used like that, or that let is a keyword. How would I specify that an already specified element should be witness to the existential?</p>",
        "id": 285486855,
        "sender_full_name": "Aron",
        "timestamp": 1654751368
    },
    {
        "content": "<p>The documentation is so jank</p>",
        "id": 285486858,
        "sender_full_name": "Aron",
        "timestamp": 1654751377
    },
    {
        "content": "<p>In situ, I'm trying to take the following<br>\nh : ∃ x, (inc a x ∧ inc b x) ∧ ∀ (y : line), inc a y ∧ inc b y → x = y<br>\nl m: line<br>\nhl : inc a l ∧ inc b l<br>\nhm : inc a m ∧ inc b m</p>\n<p>and produce:<br>\nhhhh : l=m</p>",
        "id": 285486944,
        "sender_full_name": "Aron",
        "timestamp": 1654751502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343532\">@Aron</span>: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n<p>A proof of <code>l = m</code> (without using tactics) could look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"c1\">-- `hy` is `∀ (y : line), inc a y ∧ inc b y → x = y`</span>\n<span class=\"k\">let</span> <span class=\"n\">hl'</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"n\">l</span> <span class=\"n\">hl</span>  <span class=\"c1\">-- `x = l`</span>\n<span class=\"k\">let</span> <span class=\"n\">hm'</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"n\">m</span> <span class=\"n\">hm</span>  <span class=\"c1\">-- `x = m`</span>\n<span class=\"n\">hl'.symm.trans</span> <span class=\"n\">hm'</span>  <span class=\"c1\">-- `l = m` by combining `hl'` and `hm'`</span>\n</code></pre></div>\n<p>In tactic mode it's basically the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"n\">hl'</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"n\">l</span> <span class=\"n\">hl</span>\n<span class=\"k\">have</span> <span class=\"n\">hm'</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"n\">m</span> <span class=\"n\">hm</span>\n<span class=\"n\">exact</span> <span class=\"n\">hl'.symm.trans</span> <span class=\"n\">hm'</span>\n</code></pre></div>",
        "id": 285488666,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1654753291
    },
    {
        "content": "<p>Trying it in tactic mode. Why does line 1 produce an extra copy of h as <code>x\\cross</code>?</p>",
        "id": 285489830,
        "sender_full_name": "Aron",
        "timestamp": 1654754515
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> &lt;-- this is a link. click on it</p>",
        "id": 285489931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654754610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343532\">Aron</span> <a href=\"#narrow/stream/270676-lean4/topic/exists.20in.20hypothesis/near/285486855\">said</a>:</p>\n<blockquote>\n<p>I didn't even know let could be used like that, or that let is a keyword. How would I specify that an already specified element should be witness to the existential?</p>\n<p>The documentation is so jank</p>\n</blockquote>\n<p>Have you seen <a href=\"https://leanprover.github.io/lean4/doc/\">https://leanprover.github.io/lean4/doc/</a> ? There is an example of <code>let</code> as a keyword on the first page</p>",
        "id": 285490019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654754697
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"∃!\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n<span class=\"n\">cases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exunique</span><span class=\"o\">]</span>\n<span class=\"n\">exists</span> <span class=\"n\">a</span>\n<span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n<span class=\"n\">exact</span> <span class=\"n\">ha</span>\n<span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n<span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"n\">intro</span> <span class=\"n\">hanb</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:=</span> <span class=\"n\">i.one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hanb</span>\n<span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hal</span> <span class=\"n\">ham</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hbl</span> <span class=\"n\">hbm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">have</span> <span class=\"n\">hl</span><span class=\"o\">:=</span><span class=\"n\">And.intro</span> <span class=\"n\">hal</span> <span class=\"n\">hbl</span>\n<span class=\"k\">have</span> <span class=\"n\">hm</span><span class=\"o\">:=</span><span class=\"n\">And.intro</span> <span class=\"n\">ham</span> <span class=\"n\">hbm</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exunique</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">⟩:=</span> <span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"n\">hl'</span> <span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">l</span> <span class=\"n\">hl</span>\n</code></pre></div>\n<p>Yes, but I haven't seen it in the context of a proof.</p>",
        "id": 285490386,
        "sender_full_name": "Aron",
        "timestamp": 1654755054
    },
    {
        "content": "<p>Here are some minor cleanups of your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t1</span>\n  <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hex</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">hanb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">i.one</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hanb</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hal</span><span class=\"o\">,</span> <span class=\"n\">ham</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hbl</span><span class=\"o\">,</span> <span class=\"n\">hbm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl'</span> <span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">l</span> <span class=\"o\">⟨</span><span class=\"n\">hal</span><span class=\"o\">,</span> <span class=\"n\">hbl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 285490715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654755384
    },
    {
        "content": "<p>by the way I'm not seeing any <code>x\\cross</code> in this code. Did you change the example?</p>",
        "id": 285491232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654755934
    },
    {
        "content": "<p>Searching the lean4 documentation and Theorem Proving in Lean 4 doesn't show me anything about <code>refine</code> or <code>?_</code>. Is the search button a work in progress?</p>",
        "id": 285494028,
        "sender_full_name": "Aron",
        "timestamp": 1654758208
    },
    {
        "content": "<p>no but the documentation is</p>",
        "id": 285494151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758294
    },
    {
        "content": "<p>things have improved a lot in the past 6 months but the documentation still lags a lot relative to lean 3</p>",
        "id": 285494199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758347
    },
    {
        "content": "<p>It might help to check out the mathlib docs: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 285494296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758425
    },
    {
        "content": "<p>(keeping in mind that those docs are for lean 3 and so there may be some differences or missing things in lean 4)</p>",
        "id": 285494384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758486
    },
    {
        "content": "<p>Is there a mathlib doc for lean4 available?</p>",
        "id": 285494420,
        "sender_full_name": "Aron",
        "timestamp": 1654758526
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs4#Nat</a></p>",
        "id": 285494441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758549
    },
    {
        "content": "<p>it's also a work in progress though</p>",
        "id": 285494456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758567
    },
    {
        "content": "<p>there isn't really anything analogous to the mathlib tactics page there</p>",
        "id": 285494545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758616
    },
    {
        "content": "<p>One way to learn the tactics is to browse library code like <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Basic.lean</a></p>",
        "id": 285494701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758768
    },
    {
        "content": "<p>if you want something closer to a complete listing you can look at <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Tactics.lean\">https://github.com/leanprover/lean4/blob/master/src/Init/Tactics.lean</a></p>",
        "id": 285494850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758886
    },
    {
        "content": "<p>But to answer the original question: <code>refine</code> is like <code>exact</code> except you can leave holes in the term using <code>?_</code> and they become subgoals</p>",
        "id": 285494956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654758962
    },
    {
        "content": "<p>it's very versatile, since you can use it to express <code>apply</code>, <code>intro</code>, <code>cases</code> or any combination of these</p>",
        "id": 285495033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654759010
    },
    {
        "content": "<p><code>refine</code> has a docstring that should be displayed on hover</p>",
        "id": 285496851,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654760217
    }
]