[
    {
        "content": "<p>I know Leo explained this to me before but I'm still confused why Repr doesn't work on Option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">expression</span>\n<span class=\"cm\">  Option.none</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Option ?m.704</span>\n<span class=\"cm\">but instance</span>\n<span class=\"cm\">  Lean.Eval (Option ?m.704)</span>\n<span class=\"cm\">failed to be synthesized, this instance instructs Lean on how to display</span>\n<span class=\"cm\">the resulting value, recall that any type implementing the `Repr` class</span>\n<span class=\"cm\">also implements the `Lean.Eval` class</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Option.none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Option</span> <span class=\"mi\">10</span>  <span class=\"c1\">-- this works fine and prints \"some 10\" so why can't Option.none print \"none\" ?</span>\n</code></pre></div>\n<p>So when can I expect Repr to fail like this? Any time there is an unresolved metavariable?  Could Repr be specialized in this case so that it prints \"none\" since the metavariable does not need to be resolved in that case?</p>",
        "id": 286849252,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1655769283
    },
    {
        "content": "<p>You would need that unresolved metavariable to have a <code>Repr</code> instance to be able to print \"none\"</p>",
        "id": 286850285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655770401
    },
    {
        "content": "<p>I don't think we should try to evaluate terms containing free variables in <code>#eval</code></p>",
        "id": 286850388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655770509
    },
    {
        "content": "<p>I would suggest just writing <code>(none : Option Nat)</code> or whatever</p>",
        "id": 286850421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655770562
    },
    {
        "content": "<p>or <code>@none Nat</code> if you prefer</p>",
        "id": 286850458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655770573
    },
    {
        "content": "<p>Even if the type did have a repr instance unconditionally you will get a different error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"Foo\"</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Foo.foo</span>\n<span class=\"c1\">-- don't know how to synthesize implicit argument</span>\n<span class=\"c1\">--   @Foo.foo ?m.168</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- ⊢ Type</span>\n</code></pre></div>",
        "id": 286850576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655770720
    },
    {
        "content": "<p>A more Rust-like way for this to work, would be to instead export <code>none</code> from a singleton <code>None</code> type that is coercible to <code>Option</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Alt</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">None</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">None</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">None</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option.none</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">none</span> <span class=\"c1\">--- Alt.None.none</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- none</span>\n</code></pre></div>",
        "id": 286852350,
        "sender_full_name": "Mac",
        "timestamp": 1655772921
    },
    {
        "content": "<p>Such a flexible <code>None</code> type could also coerce to other types with null constructors (e.g. <code>List</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">None</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Alternatively,  <code>Unit</code>/<code>PUnit</code> could be use for this purpose instead rather than creating a new type.</p>",
        "id": 286852490,
        "sender_full_name": "Mac",
        "timestamp": 1655773107
    }
]