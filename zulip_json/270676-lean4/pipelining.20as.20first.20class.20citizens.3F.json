[
    {
        "content": "<p>Hello,<br>\n<code>|&gt;</code>, <code>&lt;|</code> and <code>$</code> are just syntactic sugar (<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L157\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L157</a>).<br>\nIn Haskell they are functions. This is helpful to learn what they do (you can just look at their types).<br>\nIs there a good reason for defining pipelining with syntactic sugar in lean4?</p>",
        "id": 262268890,
        "sender_full_name": "Gabriel DORIATH DÃ–HLER",
        "timestamp": 1637540081
    },
    {
        "content": "<p>The impression I've had, which might have no bearing on reality, is that it's out of a combination of performance (there aren't additional functions that have to run, though these could be inlined) and making it so they're completely indistinguishable from a function application, which has consequences for typeclass inference and writing proofs.  I've been curious about this, too, though, especially the <code>args.push</code> optimization (is this to show off fbip?)</p>",
        "id": 262269437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637540996
    },
    {
        "content": "<p>There are a couple of important pieces here:</p>\n<ol>\n<li>\n<p>In Haskell, operators (i.e., symbols like <code>+</code>,<code>-</code>,<code>$</code> are just a specific class of identifiers which default to being written infix (e.g., <code>a + b</code>) with prefix use (e.g., <code>(+) a b</code>)  requiring parentheses whereas normal alphanumeric identifiers (<code>foo</code>, <code>bar</code>) default to being written prefix <code>foo a b</code> and requiring backticks for infix use (e.g.,<code> a `mod` b </code>.  In Lean, all operators are not identifiers but rather custom notation / macros / elaborators, that may, in some cases, expand to identifiers (i.e., <code>a + b</code> expands to <code>HAdd.hAdd a b</code>), but that is not a requirement.</p>\n</li>\n<li>\n<p>Functions are costly for both the compiler and proofs. If <code>|&gt;</code>, <code>&lt;|</code>, and <code>$</code> were functions, the compiler would need to determine whether to inline them and  proofs would need to unfold them and show their equivalence. Making them syntactic sugar avoids all this unnecessary complexity.</p>\n</li>\n<li>\n<p>In Lean, syntactic sugar -- that is syntax, macros, and elaborators --  are first class concepts. Lean supports go-to-def and docstrings on hover for syntactic sugar. Thus is possible to document sugar just as well as a function.</p>\n</li>\n</ol>",
        "id": 262277901,
        "sender_full_name": "Mac",
        "timestamp": 1637554236
    }
]