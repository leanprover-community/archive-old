[
    {
        "content": "<p>It seems that <code>add_decl_doc</code> is creating this chaos.</p>",
        "id": 316079284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671120605
    },
    {
        "content": "<p>yeah I can reproduce</p>",
        "id": 316079838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671120767
    },
    {
        "content": "<p>Could you post a single stack trace (top dozen frames are usually sufficient) here?</p>",
        "id": 316080049,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671120832
    },
    {
        "content": "<p>I starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x33adbae)[0x7f5eff893bae]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x420)[0x7f5eff880ac0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x33992a8)[0x7f5eff87f2a8]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x339a351)[0x7f5eff880351]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x338e9a5)[0x7f5eff8749a5]</span>\n<span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x94b43</span><span class=\"o\">)[</span><span class=\"mi\">0x7f5efc325b43</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x126a00</span><span class=\"o\">)[</span><span class=\"mi\">0x7f5efc3b7a00</span><span class=\"o\">]</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Parser.withCacheFn</span> <span class=\"n\">Lean.Parser.Types</span><span class=\"o\">:</span><span class=\"mi\">397</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">withCacheFn</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">stack</span> <span class=\"n\">growth</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_panic_fn+0x9e)[0x7f5eff87672e]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Parser_withCacheFn___lambda__2+0x259)[0x7f5efe62c949]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5aa)[0x7f5eff88187a]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5aa)[0x7f5eff88187a]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x136)[0x7f5eff881406]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5aa)[0x7f5eff88187a]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1___lambda__4+0x171)[0x7f5efe5c59d1]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1+0x46f)[0x7f5efe5c620f]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Parser_parseCommand+0x25e)[0x7f5efe5c73ae]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Server_Snapshots_compileNextCmd+0x2a4)[0x7f5efe7bee84]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l___private_Lean_Server_FileWorker_0__Lean_Server_FileWorker_nextCmdSnap___lambda__1+0x200)[0x7f5efe8abca0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l___private_Lean_Server_FileWorker_0__Lean_Server_FileWorker_nextCmdSnap+0x572)[0x7f5efe8acdd2]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5f0)[0x7f5eff8818c0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_IO_AsyncList_unfoldAsync_step___rarg+0x38)[0x7f5efe77f208]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x455)[0x7f5eff880af5]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_EIO_toBaseIO___rarg+0xd)[0x7f5efd056e5d]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x420)[0x7f5eff880ac0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x33adbae)[0x7f5eff893bae]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x420)[0x7f5eff880ac0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x33992a8)[0x7f5eff87f2a8]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x339a351)[0x7f5eff880351]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x338e9a5)[0x7f5eff8749a5]</span>\n<span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x94b43</span><span class=\"o\">)[</span><span class=\"mi\">0x7f5efc325b43</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x126a00</span><span class=\"o\">)[</span><span class=\"mi\">0x7f5efc3b7a00</span><span class=\"o\">]</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Parser.SyntaxStack.back</span> <span class=\"n\">Lean.Parser.Types</span><span class=\"o\">:</span><span class=\"mi\">168</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">SyntaxStack.back</span><span class=\"o\">:</span> <span class=\"n\">element</span> <span class=\"n\">is</span> <span class=\"n\">inaccessible</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_panic_fn+0x9e)[0x7f5eff87672e]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Parser_withCacheFn___lambda__1+0x66)[0x7f5efe62c0b6]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Parser_withCacheFn___lambda__2+0x269)[0x7f5efe62c959]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5aa)[0x7f5eff88187a]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5aa)[0x7f5eff88187a]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x136)[0x7f5eff881406]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5aa)[0x7f5eff88187a]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1___lambda__4+0x171)[0x7f5efe5c59d1]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1+0x46f)[0x7f5efe5c620f]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Parser_parseCommand+0x25e)[0x7f5efe5c73ae]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Server_Snapshots_compileNextCmd+0x2a4)[0x7f5efe7bee84]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l___private_Lean_Server_FileWorker_0__Lean_Server_FileWorker_nextCmdSnap___lambda__1+0x200)[0x7f5efe8abca0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l___private_Lean_Server_FileWorker_0__Lean_Server_FileWorker_nextCmdSnap+0x572)[0x7f5efe8acdd2]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_2+0x5f0)[0x7f5eff8818c0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_IO_AsyncList_unfoldAsync_step___rarg+0x38)[0x7f5efe77f208]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x455)[0x7f5eff880af5]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_EIO_toBaseIO___rarg+0xd)[0x7f5efd056e5d]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x420)[0x7f5eff880ac0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x33adbae)[0x7f5eff893bae]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_apply_1+0x420)[0x7f5eff880ac0]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x33992a8)[0x7f5eff87f2a8]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x339a351)[0x7f5eff880351]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(+0x338e9a5)[0x7f5eff8749a5]</span>\n<span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x94b43</span><span class=\"o\">)[</span><span class=\"mi\">0x7f5efc325b43</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x126a00</span><span class=\"o\">)[</span><span class=\"mi\">0x7f5efc3b7a00</span><span class=\"o\">]</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Parser.SyntaxStack.back</span> <span class=\"n\">Lean.Parser.Types</span><span class=\"o\">:</span><span class=\"mi\">168</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">SyntaxStack.back</span><span class=\"o\">:</span> <span class=\"n\">element</span> <span class=\"n\">is</span> <span class=\"n\">inaccessible</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(lean_panic_fn+0x9e)[0x7f5eff87672e]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1___lambda__3+0x1d5)[0x7f5efe5c54e5]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1___lambda__4+0x25b)[0x7f5efe5c5abb]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Loop_forIn_loop___at_Lean_Parser_parseCommand___spec__1+0x46f)[0x7f5efe5c620f]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Parser_parseCommand+0x25e)[0x7f5efe5c73ae]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean/libleanshared.so(l_Lean_Server_Snapshots_compileNextCmd+0x2a4)[0x7f5efe7bee84]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-13/bin/../lib/lean</span>\n</code></pre></div>",
        "id": 316080677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671120998
    },
    {
        "content": "<p>Here it says twice <code>PANIC at Lean.Parser.SyntaxStack.back Lean.Parser.Types:168:4: SyntaxStack.back: element is inaccessible</code> but later there is a great diversity of PANIC</p>",
        "id": 316080785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121036
    },
    {
        "content": "<p>In the gif there is something about <code>Lean.Environment</code> first though?</p>",
        "id": 316081791,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671121287
    },
    {
        "content": "<p>I have a much better repro. In a file with no mathlib import:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Test -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">Nat</span>\n\n<span class=\"sd\">/-- Test -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 316082365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121430
    },
    {
        "content": "<p>This is on <code>leanprover/lean4:nightly-2022-12-13</code></p>",
        "id": 316082512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> should I open a Lean 4 issue or this enough?</p>",
        "id": 316083036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121601
    },
    {
        "content": "<p>An issue would be great!</p>",
        "id": 316083957,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671121812
    },
    {
        "content": "<p>But the short answer is that you may not define docstrings for external declarations</p>",
        "id": 316084199,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671121884
    },
    {
        "content": "<p>What do you mean by external? Defined in another file?</p>",
        "id": 316084426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121936
    },
    {
        "content": "<p>The first <code>add_decl_doc</code> works fine, only the second one brings the end of the world.</p>",
        "id": 316084504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121958
    },
    {
        "content": "<p>But indeed this doesn't happen in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/-- Test -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- Test -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 316084823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671122045
    },
    {
        "content": "<p>One <code>add_decl_doc Nat</code> is sufficient on my machine</p>",
        "id": 316084863,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671122059
    },
    {
        "content": "<p>And then we return <code>default : Environment</code> from the panic and then everything goes sideways</p>",
        "id": 316085038,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671122102
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1957\">https://github.com/leanprover/lean4/issues/1957</a></p>",
        "id": 316086029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671122332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/add_decl_doc.20.20panic.20loop/near/316077158\">said</a>:</p>\n<blockquote>\n<p>Not aborting on panics for general Lean programs was a conscious decision, but I'm starting to wonder whether it's the right decision for <code>lean</code> itself</p>\n</blockquote>\n<p>Do you by any chance have a link to the discussion where this decision was made? I find this very strange (both for Lean programs and for Lean itself), but maybe there are good reasons I haven't considered.</p>",
        "id": 316255523,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1671194372
    },
    {
        "content": "<p>I agree with jannis, continuing after a panic breaks a lot of intuitions and makes it hard to use it to enforce invariants. I assume that the sense Sebastian means is that you don't want a panic somewhere to crash the server, but I think that can be handled by having a way to catch panics and recover in an IO context, specifically for use cases like a long running server that shouldn't ever crash (or at least, should have the opportunity to present failures nicely). That is also what rust panics do, although the need for unwind safety definitely complicates a lot of things</p>",
        "id": 316432351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671273808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/add_decl_doc.20.20panic.20loop/near/316255523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/add_decl_doc.20.20panic.20loop/near/316077158\">said</a>:</p>\n<blockquote>\n<p>Not aborting on panics for general Lean programs was a conscious decision, but I'm starting to wonder whether it's the right decision for <code>lean</code> itself</p>\n</blockquote>\n<p>Do you by any chance have a link to the discussion where this decision was made? I find this very strange (both for Lean programs and for Lean itself), but maybe there are good reasons I haven't considered.</p>\n</blockquote>\n<p>Unfortunately I don't recall where these discussions were held. But Leo's motivation for the default is that when we prove something about a function's output, which we think of as a <em>total correctness</em> property, it must not be undermined at run time by process termination from a panic.</p>",
        "id": 316698823,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671442295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/add_decl_doc.20.20panic.20loop/near/316432351\">said</a>:</p>\n<blockquote>\n<p>That is also what rust panics do, although the need for unwind safety definitely complicates a lot of things</p>\n</blockquote>\n<p>To panic safety issues add issues about correctly freeing reference counting tokens on the stack without excessive additional code generation</p>",
        "id": 316700319,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671442818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/add_decl_doc.20.20panic.20loop/near/316698823\">said</a>:</p>\n<blockquote>\n<p>Unfortunately I don't recall where these discussions were held. But Leo's motivation for the default is that when we prove something about a function's output, which we think of as a <em>total correctness</em> property, it must not be undermined at run time by process termination from a panic.</p>\n</blockquote>\n<p>I see, thanks! In practice, I would still much prefer that a <code>panic!</code>-ing function actually panics, instead of silently doing the wrong thing just in case I want to prove something about it.</p>\n<p>Btw, would it be possible to translate <code>panic!</code> into an opaque value of the type instead of <code>default</code>? This would make it harder (though not impossible) to write bogus proofs about the branches which contain <code>panic!</code>. I feel like this has been discussed before, but I can't find the topic.</p>",
        "id": 316759207,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1671460919
    },
    {
        "content": "<p>I'm regularly annoyed by this... I want my panics to crash.</p>",
        "id": 316841114,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671488287
    },
    {
        "content": "<p>I probably should have mentioned <code>LEAN_ABORT_ON_PANIC=1</code></p>",
        "id": 316841297,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671488363
    },
    {
        "content": "<p>I think it's a pretty good dogfooding goal for it to be feasible to rewrite the lean server to exist in an exception monad where necessary, to safely continue after an error. Thoughts?</p>",
        "id": 316841928,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671488598
    },
    {
        "content": "<p>(rather than using panic!)</p>",
        "id": 316842113,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671488656
    }
]