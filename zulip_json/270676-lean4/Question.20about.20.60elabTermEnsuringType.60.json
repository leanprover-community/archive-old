[
    {
        "content": "<p>I found this by accident, but I don't understand what it means:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">`</span><span class=\"n\">bar</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">termNat5</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">hmm</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">termNat5</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">termNat5</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">hmm</span><span class=\"bp\">?</span>\n\n<span class=\"bp\">#</span><span class=\"n\">foo</span>\n<span class=\"c1\">-- OfNat.ofNat.{?_uniq.1288} ?_uniq.1287 5 ?_uniq.1289</span>\n<span class=\"c1\">-- Nat</span>\n</code></pre></div>\n<p>How come Lean was able to elaborate <code>(← `(Nat))</code> as a term using <code>termNat5</code> as the expected type?</p>",
        "id": 276510564,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648142470
    },
    {
        "content": "<p>Ah, I guess it's because of metavariables whose elaboration was postponed. It stopped working as soon as I added <code>synthesizeSyntheticMVarsNoPostponing</code></p>",
        "id": 276512068,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648143068
    }
]