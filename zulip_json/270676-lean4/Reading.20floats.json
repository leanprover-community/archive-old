[
    {
        "content": "<p>I need to read the value of floats to convert it to a rational or some structure I can reason about. If I'm not mistaken, the only way to do that right now is to convert it to string and do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">readFloat</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Lean.Json.Parser.num</span> <span class=\"n\">f.toString.mkIterator</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lean.Parsec.ParseResult.success</span> <span class=\"n\">_</span> <span class=\"n\">res</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">res.mantissa</span><span class=\"o\">,</span> <span class=\"n\">res.exponent</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Or I could also multiply by a big number, then convert it to int and get some approximation. But I guess that could lead to problems for big floats.</p>\n<p>Instead, what I've currently done is I've changed Lean to be able to get the bit representation and from there I can extract the values I need. So I've added:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cm\">/* In lean.h */</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kr\">inline</span><span class=\"w\"> </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"nf\">lean_float_to_bits</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">fu</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">fu</span><span class=\"p\">.</span><span class=\"n\">u</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- In Float.lean</span>\n<span class=\"kd\">@[extern \"lean_float_to_bits\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">Float.toBits</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">→</span> <span class=\"n\">UInt64</span>\n</code></pre></div>\n<p>There's no way to do that without changing Lean, right? Would it make sense to have this function or a similar one in Lean? Thanks</p>",
        "id": 283105574,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1653069522
    },
    {
        "content": "<p>Oh of course there is a way, you can add FFI extensions to Lean as a user yourself without touching the compiler, example for how to do this with a lake project: <a href=\"https://github.com/leanprover/lake/tree/master/examples/ffi\">https://github.com/leanprover/lake/tree/master/examples/ffi</a></p>",
        "id": 283106739,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653070057
    },
    {
        "content": "<p>I see. So that would be an option. But last time I tried using the FFI, I couldn't really make it work interactively. Has that been solved now?</p>",
        "id": 283107457,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1653070422
    },
    {
        "content": "<p>I don't know that from the top of my head its been a while since I've touched the FFI since it's not the main focus right now and will get some more love after mathlib4 is ported.</p>",
        "id": 283107837,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653070608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132858\">Ramon Fernandez Mir</span> <a href=\"#narrow/stream/270676-lean4/topic/Reading.20floats/near/283107457\">said</a>:</p>\n<blockquote>\n<p>I see. So that would be an option. But last time I tried using the FFI, I couldn't really make it work interactively. Has that been solved now?</p>\n</blockquote>\n<p>Do you mean with <code>#eval</code> commands? <a href=\"#narrow/stream/270676-lean4/topic/.23eval.20with.20native.20functions\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.23eval.20with.20native.20functions</a></p>",
        "id": 283175965,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1653142798
    },
    {
        "content": "<p>I see, yes, that worked nicely, thank you! All I needed was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"--load-dynlib=extern/build/lib/FloatExt.dylib\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in my Lake file.</p>",
        "id": 283328525,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1653316864
    }
]