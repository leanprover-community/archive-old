[
    {
        "content": "<p>I am experimenting with using the <code>Lean</code> package in order to produce my own <code>.olean</code> files. I am running into an issue when importing modules. One can reproduce the problem in a new nix flake lean package, where the only source file contains the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">searchPathRef.set</span> <span class=\"o\">[</span><span class=\"s2\">\"/nix/store/xn6b2h5izwi786gs5995fn0fcs7yif06-lean-stage1/lib/lean\"</span><span class=\"o\">]</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Init</span><span class=\"o\">}]</span> <span class=\"n\">Options.empty</span>\n\n<span class=\"c1\">-- #eval main []</span>\n</code></pre></div>\n<p>Interestingly, the editor runs <code>#eval main []</code> fine, and it even works if I omit running <code>searchPathRef.set</code>, as the search path seems to be set correctly by default. But if I run the executable component of the package with <code>nix run .#executable</code>, I get the following output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Nat.div'</span>\n</code></pre></div>\n<p>If I omit the <code>seachPathRef.set ...</code> line, it does not fine the <code>Init</code> module at all when running <code>nix run .#executable</code>, the <code>searchPathRef</code> seems to be the empty list and thus we get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Init'</span>\n</code></pre></div>\n<p>Am I missing something? Do I need to manually point to the native implementations of <code>Init</code>? Although it seemed to me that those implementations were already in the <code>.a</code> files in <code>/nix/store/xn6b2h5izwi786gs5995fn0fcs7yif06-lean-stage1/lib/lean</code>.</p>\n<p>I am not even interested in using those native implementations, since I only want to create <code>.olean</code> files.</p>",
        "id": 239572173,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1621509084
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/unknown.20package.20'Init'/near/231097911\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/unknown.20package.20'Init'/near/231097911</a>. You should be able to do this in Nix by passing <code>leancFlags = [\"-rdynamic\"];</code> to <code>buildLeanPackage</code>.</p>",
        "id": 239573272,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621509639
    },
    {
        "content": "<p>Note that setting <code>LEAN_PATH=\"/nix/store/xn6b2h5izwi786gs5995fn0fcs7yif06-lean-stage1/lib/lean\"</code>  and running <code>initSearchPath</code> instead of <code>searchPathRef.set...</code> produces exactly the same result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">Nat.div'</span>\n</code></pre></div>",
        "id": 239573571,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1621509787
    },
    {
        "content": "<p>Now, the reason importing can trigger the interpreter in the first place is that the <code>[init]</code> attribute runs code on import to initialize e.g. some <code>IO.Ref</code> objects. This might not be strictly necessary depending on your use case, but currently it cannot be turned off.</p>",
        "id": 239573637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621509822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Metaprogramming.3A.20Importing.20modules/near/239573272\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"#narrow/stream/270676-lean4/topic/unknown.20package.20'Init'/near/231097911\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/unknown.20package.20'Init'/near/231097911</a>. You should be able to do this in Nix by passing <code>leancFlags = [\"-rdynamic\"];</code> to <code>buildLeanPackage</code>.</p>\n</blockquote>\n<p>Okay, thank you, I will try that</p>",
        "id": 239573641,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1621509823
    },
    {
        "content": "<p>Okay, my code now works if I package it with <code>leanpkg</code>, thanks to the stream you referenced. So that is already big progress and I wouldn't mind changing to using leanpkg instead of nix. But for the record, passing <code>leancFlags = [\"-rdynamic\"];</code> to <code>buildLeanPackage</code> did not make a difference and it still outputs the same <code>uncaught exception: could not find native implementation of external declaration 'Nat.div'\n</code> error.</p>",
        "id": 239578161,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1621512040
    },
    {
        "content": "<p>Oh I see, we don't use them for linking. I added a new parameter <code>linkFlags</code> for that.</p>",
        "id": 239579215,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1621512553
    },
    {
        "content": "<p>Thanks! Everything works now!</p>",
        "id": 239580625,
        "sender_full_name": "Adrian Marti",
        "timestamp": 1621513227
    }
]