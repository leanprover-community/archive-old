[
    {
        "content": "<p>When using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.find#doc\">docs4#Lean.Environment.find</a>? to retrieve a theorem statement, is there way to know what was left of the colon and what was right of the colon?</p>",
        "id": 300402307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663949612
    },
    {
        "content": "<p>I'm pretty sure this information is not preserved.</p>",
        "id": 300402548,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663949665
    },
    {
        "content": "<p>Thanks for this answer. I'm a bit sad but I'll work around this.</p>",
        "id": 300406054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663950618
    },
    {
        "content": "<p>why do you need this? It was erased as a relevant distinction</p>",
        "id": 300406256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663950678
    },
    {
        "content": "<p>Relevant for what?</p>",
        "id": 300406705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663950806
    },
    {
        "content": "<p>I'm returning to working on the game server (aiming in particular for the natural number game in Lean 4).</p>",
        "id": 300406851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663950847
    },
    {
        "content": "<p>Why does the game server need to know what was before or after the colon?</p>",
        "id": 300406966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663950886
    },
    {
        "content": "<p>In some levels you want people to use <code>intro</code> and in other levels you don't</p>",
        "id": 300407088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663950928
    },
    {
        "content": "<p>Is the idea to not have to do the source-replacement trick that I think the lean3 game-maker does?</p>",
        "id": 300414999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663953698
    },
    {
        "content": "<p>I don't know what the source-replacement trick, but there won't be anything in common with what game-maker does.</p>",
        "id": 300417656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663954534
    },
    {
        "content": "<p>could you give an example?</p>",
        "id": 300425602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663957041
    },
    {
        "content": "<p>I would expect the decision of whether to use intro or not to depend on the state of the proof</p>",
        "id": 300425671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663957070
    },
    {
        "content": "<p>But Lean doesn't remember the state of the proof at the beginning of a theorem, that's my problem.</p>",
        "id": 300433746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663960036
    },
    {
        "content": "<p>you could override <code>by</code> or <code>def</code> to record the information you are interested in</p>",
        "id": 300440796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663962935
    },
    {
        "content": "<p>To what extent could something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">before_the_colon</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">start_the_game_already</span>\n</code></pre></div>\n<p>work for the server you're building? Could<code>start_the_game_already</code>start the server itself, or at least add the goal state to the queue of games to play?</p>",
        "id": 300457094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663970156
    }
]