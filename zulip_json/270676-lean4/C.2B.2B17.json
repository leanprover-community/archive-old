[
    {
        "content": "<p>Hi all. Eric F here. I'm on the MSR team, and helping to move the build along into the year 2022. As such, we'd like to move the compilers to all use C++17 so we can use std::thread and some standardized filesystem stuff. This didn't work in the past, but we're pretty sure with the latest OS revisions, this is worth a shot. I've compiled lean on windows, WSL (on windows), and the mac, and run the tests, and so far so good. Any big red flags I should be aware of?</p>",
        "id": 261809355,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637166534
    },
    {
        "content": "<p>hm. spoke too soon. test <a href=\"https://github.com/leanprover-community/mathlib/issues/936\">#936</a> \"leancomptest_foreign\" failed. What do you know! Will have Lovett look into it. heh.</p>",
        "id": 261809620,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637166648
    },
    {
        "content": "<p>that was on the macOS, btw</p>",
        "id": 261809642,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637166660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443382\">@Eric Frazer</span> Thanks for doing it! There are two usual caveats that you may already know, but I'll just repeat them here for the sake of completeness:</p>\n<ul>\n<li>There may be a future where either the Lean runtime or all of Lean is free of C++, so we might not want to move existing filesystem primitives implemented using C APIs to C++ unless there is a specific reason to do so</li>\n<li>We have avoided std::thread so far because it does not let us customize the thread stack size</li>\n</ul>",
        "id": 261814387,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637168475
    },
    {
        "content": "<p>Stack size: since we ultimately hope to get away from even C++, is the thread stack size a super big issue?</p>",
        "id": 261815580,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637169004
    },
    {
        "content": "<p>moving from C to C++: The code as I've seen it, is much simpler in the new form, than the existing stuff, it can only help the transition to something better.</p>",
        "id": 261815638,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637169038
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/RVm-nERi3Hhiu0Z10e3ctKS8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RVm-nERi3Hhiu0Z10e3ctKS8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RVm-nERi3Hhiu0Z10e3ctKS8/image.png\"></a></div>",
        "id": 261816179,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637169289
    },
    {
        "content": "<p>is the stack size concern mostly paranoia, or did we run up against a wall in the past and go \"splat\"?</p>",
        "id": 261816274,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637169340
    },
    {
        "content": "<p>Yes, as a functional language it is very easy to consume loads of stack using non-tail recursion in Lean!</p>",
        "id": 261817650,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637169929
    },
    {
        "content": "<p>Fun line: <a href=\"https://github.com/kha/lean4/blob/25ebc68b875f87f04e7b6ad35e5f239e1a750e8a/src/CMakeLists.txt#L128\">https://github.com/kha/lean4/blob/25ebc68b875f87f04e7b6ad35e5f239e1a750e8a/src/CMakeLists.txt#L128</a></p>",
        "id": 261817765,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637169963
    },
    {
        "content": "<p>Isn't the stack size for new threads the default stack size for the running OS? Is it settable somewhere in the OS settings? I imagine whatever machine is running gigantic Lean proofs is probably somewhat dedicated to that task, and one could set the default stack size?</p>",
        "id": 261828280,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637174166
    },
    {
        "content": "<p>this article is unusually informative, in various places....</p>",
        "id": 261828783,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637174378
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/13871763/how-to-set-the-stacksize-with-c11-stdthread/20502804\">https://stackoverflow.com/questions/13871763/how-to-set-the-stacksize-with-c11-stdthread/20502804</a></p>",
        "id": 261828787,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637174379
    },
    {
        "content": "<p>ha. Leo is one of the commenters in that article.</p>",
        "id": 261831994,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637175709
    },
    {
        "content": "<p>How did we get past the 512K limit on mac OS? was that an old mac OS limitation?</p>",
        "id": 261832086,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637175732
    },
    {
        "content": "<p>Is there a limit? The linked question seems to only talk about defaults</p>",
        "id": 261834811,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637177119
    },
    {
        "content": "<p>We have perfectly working custom thread stack sizes on all platforms right now, so I don't understand why we would want to move away from that</p>",
        "id": 261834985,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637177192
    },
    {
        "content": "<p>the code has a lot of switches in it right now for one OS or another. it's somewhat messy. especially the pthread stuff and the file iterator stuff. In an effort to unify the code and getting it looking the same, and then ultimately getting it to compile \"the right way\" on Windows, it'd be nice to move the C++ code forward into the 21st century and get it reasonably standard. So, why not move it to std::thread, and monkey with the linker thread stack sizes and see what works and what doesn't, and go from there?</p>",
        "id": 261835461,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637177405
    },
    {
        "content": "<p>c++11 is so last-year.  ha ha.</p>",
        "id": 261835528,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637177441
    },
    {
        "content": "<p>if we can set the default thread stack size for the process, even with std::thread, I would imagine this is sufficient. Can't see how a Lean program would want one stack size for one thread, and another for a different thread. Especially since it's simply a reservation, not an actual allocation.</p>",
        "id": 261835731,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637177525
    },
    {
        "content": "<p>Yeah, that would work. But is there really an API for that?</p>",
        "id": 261846941,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1637182242
    },
    {
        "content": "<p>One question Sebastian, can Lean  customers request a stack size for new threads when they are implementing some crazy algorithm that is known to explode recursion?  I'm hoping we have not given customers that power yet...</p>",
        "id": 261847158,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1637182334
    },
    {
        "content": "<p>why not? functional programs are known to have deep recursions, especially if put on the C stack</p>",
        "id": 261847305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637182418
    },
    {
        "content": "<p>(also, \"users\" is a more appropriate appellation than \"customers\", since lean is a programming language not a company)</p>",
        "id": 261847588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637182528
    },
    {
        "content": "<p>users works too, but it is not uncommon terminology even for open source projects <br>\n<a href=\"/user_uploads/3121/9ftkMXWLyY5-qFmdJ0RwwI8E/image.png\">image.png</a> <br>\nit more clearly delineates people not working on the internals of the Lean compiler.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9ftkMXWLyY5-qFmdJ0RwwI8E/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9ftkMXWLyY5-qFmdJ0RwwI8E/image.png\"></a></div>",
        "id": 261847888,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1637182672
    },
    {
        "content": "<p>@Eric, can you do a test using this <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html\">apple doc page</a> and see if setStackSize works with std::thread?  I don't see a max stack size listed there.  I thought I saw that some place else, but looks like that other source was wrong.</p>",
        "id": 261848149,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1637182773
    },
    {
        "content": "<p>(I don't want to bikeshed, but I am anyway: a large fraction of Lean's users are mathematicians, who are typically highly allergic to the word \"customer\".)</p>",
        "id": 261849039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637183116
    },
    {
        "content": "<p>(In that quote I think the word \"customer\" refers to clients of a commercial product which is developed by the author of the testimonial, not Rust users/programmers.)</p>",
        "id": 261849362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637183249
    },
    {
        "content": "<p>I'm going to test setting the global program stack size on the 3 platform types, tonight, and run some whopper recursion tests.</p>",
        "id": 261851530,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637184284
    },
    {
        "content": "<p>I saw some code today that takes a std::thread, and on each of the platforms, runs some dirty-dog tricks to get behind the thread and into OS-specific code and set the stack size, but it made some of my hair fall out.</p>",
        "id": 261851631,
        "sender_full_name": "Eric Frazer",
        "timestamp": 1637184332
    }
]