[
    {
        "content": "<p>I've seen/heard from multiple sources that there's a plan for Lean 4 to be a general-purpose programming language. Is there something like a plan of action or roadmap?</p>",
        "id": 262182583,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637413187
    },
    {
        "content": "<p>I'm curious because there are strong languages out there like clojure/javascript/python/go</p>",
        "id": 262182766,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637413400
    },
    {
        "content": "<p>Leo said in a past topic, I can't remember right now, that at the moment the top priority for the Lean 4 project is to get mathlib4 (the mathlib port from Lean 3 to Lean 4) fully up and running. After this is done they'll clean up the compiler etc. but he expects this to only fully finish somewhere towards the end of 2022.</p>\n<p>That being said Lean4 can be used for regular real world programming right now, I've for example written a university assignment with <a href=\"https://github.com/xubaiw/lean4-socket\">https://github.com/xubaiw/lean4-socket</a> by <span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> who has also done some other general purpose lean things on his github (csv, termios). I have also written a tiny bit of Lean 4 that interacts with C code here <a href=\"https://github.com/hargoniX/lean4-statvfs\">https://github.com/hargoniX/lean4-statvfs</a>, the Lean 4 compiler itself is largely written in Lean 4, the Lake build system (<a href=\"https://github.com/leanprover/lake\">https://github.com/leanprover/lake</a>) is etc.  So it is definitely possible right now to link Lean 4 code against real world C APIs and start building whatever you want with it, it's just that no one has built all the things you would usually expect from general purpose programming languages regarding interaction with the rest of the world yet.</p>\n<p>And performance wise there are actually reasons to use Lean 4 as a real world language over other functional ones, the modified reference counting (you can check up on that in the \"counting immutable beans\" and the \"perceus\" papers) allow Lean to outperform other well established functional languages such as OCaml or Haskell and for example the \"sealing pointer-based optimizations behind pure functions\" paper shows that dependent type theory actually allows us to build things in pure functional languages that weren't possible without it.</p>\n<p>So TLDR, it's already very much possible from a language point of view, it is \"just\" that someone has to actually implement all the things other languages use when interacting with the real world to build real world stuff.</p>",
        "id": 262183211,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637414059
    },
    {
        "content": "<p>I happen to be writing a <a href=\"https://en.wikipedia.org/wiki/WebSocket\">WebSocket</a> server in Lean4 also using the aforementioned <code>lean4-socket</code> library. While it is not available just yet, the protocol necessitates existence of sha1 which <a href=\"https://github.com/Ferinko/LeanSha/\">I already made public</a>. The ecosystem for \"programming\" is currently in its infancy but Lean4 is by a great margin a programming language I find most enjoyable using. Thanks <span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span> for the socket implementation!</p>",
        "id": 262183815,
        "sender_full_name": "František Silváši",
        "timestamp": 1637414884
    },
    {
        "content": "<p>Cryptography code is also a topic I imagine could be very interesting in Lean? Maybe it could be possible to somehow proof that certain functions are constant time operations, providing additional guarantees...then again regular lean code will most likely not be able to outperform handwritten C stuff like openssl or libsodium so at some point someone will have to write an FFI interface to those.</p>",
        "id": 262183977,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1637415237
    },
    {
        "content": "<p>And communication with popular databases like MySQL and PostgreSQL.<br>\nA Spark API would be big I think.</p>",
        "id": 262184089,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637415363
    },
    {
        "content": "<p>I'd rather cryptographic code was safe than fast! :) It's not outside of the realm of possibility to have a formalized representation of (a subset of?) C which you use to state equivalence between a function in Lean and its <code>implementedBy</code> C counterpart. Then you use <a href=\"https://en.wikipedia.org/wiki/CompCert\">CompCert</a> to have confidence in the compilation process of C and then you hope that hardware it's running on works as advertised. Of course, this is far from a trivial undertaking.</p>",
        "id": 262184714,
        "sender_full_name": "František Silváši",
        "timestamp": 1637416277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> wrote a raytracer in Lean, the guys at Galois wrote a program which kept a wheeled robot standing up, and someone wrote a Mandelbrot set program. Do these count? I've tweeted links to all these things in the past but I'm not 100% convinced that this is what the question is about and searching Twitter is hard :-/ (or I don't know the tricks...)</p>",
        "id": 262191410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637425383
    },
    {
        "content": "<p>Hm, I was talking more about common software engineering challenges in the industry, like backend/frontend development or data analysis</p>",
        "id": 262191664,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637425728
    },
    {
        "content": "<p>Right now I'm going through the challenge of learning Lean 4 and trying to make a Lean package that can talk to MySQL. This is, however, a rather slow process. But I'm enjoying it</p>",
        "id": 262191762,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637425870
    },
    {
        "content": "<p>Certainly a raytracer and a robotics application must be legit instances of \"general-purpose programming\".</p>",
        "id": 262191882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637426034
    },
    {
        "content": "<p>Definitely. I'm 100% convinced that it can be done. And there's so much stuff to be built.</p>",
        "id": 262192065,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637426244
    },
    {
        "content": "<p>I also want to use Lean 4 as a general purpose language. I'm attempting to write a library to allow you to do computations like in Mathematica/Julia/NumPy/SciPy. It is still in a very early stage but I already have a reasonable automatic/symbolic differentiation code. Hopefully, I will get it into a reasonable state in a month or two so I can share it with others.</p>",
        "id": 262192146,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1637426330
    },
    {
        "content": "<p>That'd be dope!</p>",
        "id": 262192272,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637426490
    },
    {
        "content": "<p>I'm working on examples for the Lean 4 hacker guide that implement common Unix-like tools -- suggestions welcome. :)</p>",
        "id": 262197352,
        "sender_full_name": "James King",
        "timestamp": 1637432693
    }
]