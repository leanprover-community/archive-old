[
    {
        "content": "<p>Is there Common LIsp's  macroexpand or macroexpand-1 equivalent in Lean 4? I'm reading \"Beyond Notations\" paper and try to understand how macros are expanded into non meta language.</p>",
        "id": 279950306,
        "sender_full_name": "Yasu Watanabe",
        "timestamp": 1650755146
    },
    {
        "content": "<p>Basically its done like this: (from here <a href=\"https://github.com/leanprover/lean4/blob/master/doc/metaprogramming-arith.md\">https://github.com/leanprover/lean4/blob/master/doc/metaprogramming-arith.md</a>)<br>\nyou declare a bunch of syntax rules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">arith</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">arith</span> <span class=\"c1\">-- int for Arith.int</span>\n<span class=\"n\">syntax</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">arith</span> <span class=\"c1\">-- strings for Arith.symbol</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">60</span>  <span class=\"n\">arith</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\"+\"</span> <span class=\"n\">arith</span><span class=\"o\">:</span><span class=\"mi\">61</span> <span class=\"o\">:</span> <span class=\"n\">arith</span> <span class=\"c1\">-- Arith.add</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"n\">arith</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\"*\"</span> <span class=\"n\">arith</span><span class=\"o\">:</span><span class=\"mi\">71</span> <span class=\"o\">:</span> <span class=\"n\">arith</span> <span class=\"c1\">-- Arith.mul</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">arith</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">arith</span> <span class=\"c1\">-- bracketed expressions</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[Arith| \"</span> <span class=\"n\">arith</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>you declare a bunch of macro rules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">strLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.symbol</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.int</span> <span class=\"bp\">$</span><span class=\"n\">num</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.add</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">arith</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Arith.mul</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">arith</span><span class=\"o\">)</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Arith</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">])</span>\n</code></pre></div>\n<p>you can instead of declaring macro rules also declare MacroM functions and mark them as elaborators of certain syntax declarations<br>\nnow whenever lean sees the corresponding syntax, this is for example how its done here: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/IncludeStr.lean#L28-L50\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/IncludeStr.lean#L28-L50</a>, note that this is a term elaborator which is a special case of a macro that (surprise) is used in place of a term.</p>\n<p>Now whenever lean sees the corresponding syntax it will execute the macro code and put whatever expression it returned in place of it. There is also a more special case of this which is the tactic world where you also have metavariables and the proof context etc but the basic idea is this.</p>",
        "id": 279950998,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1650756208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481687\">@Yasu Watanabe</span> I think you are looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Lean.Macro.expandMacro?\"><code>expandMacro?</code></a> (which ultimately uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Elab/Util.html#Lean.Elab.expandMacroImpl?\"><code>epxandMacroImpl?</code></a>). See also the paper supplement for a standalone implementation of an expander.</p>",
        "id": 279969388,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650788243
    }
]