[
    {
        "content": "<p>Is there a reason that given <code>r : Std.Range</code> and <code>xs : Array Expr</code> or <code>List Expr</code> we do not support <code>xs[r]</code> because there is no <code>GetElem</code> instance for this configuration? It could even be constructed automatically from instances of <code>GetElem</code> for the beginning and end of <code>r</code>.</p>",
        "id": 293310269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660415729
    },
    {
        "content": "<p>the syntax for that would be a bit off, <code>xs[[1:5]]</code></p>",
        "id": 293310475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660415884
    },
    {
        "content": "<p>also, what would it return?</p>",
        "id": 293310518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660415930
    },
    {
        "content": "<p>I think the syntax <code>arr[i:j]</code> currently returns a <code>Subarray</code></p>",
        "id": 293310550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660415958
    },
    {
        "content": "<p>Sounds to me like it would be reasonable to return a subarray as well then?</p>",
        "id": 293311014,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660416316
    },
    {
        "content": "<p>Oh and to make clear why I'm asking, when there is an Std.Range stored in some datastructure you actually have this case of <code>r : Std.Range</code> instead of the <code>arr[i:j]</code> syntax so I'm mostly asking for this case, I see the argument against it though.</p>",
        "id": 293318940,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660422517
    },
    {
        "content": "<p>Ah, I wanted to create an RFC about this at some point, but here is the gist: as Mario said, the current range syntax would look a bit weird inside indexing syntax, but also it's a bit weird for range syntax in itself. If we switched to a more common notation like <code>i..j</code> (or <code>i..&lt;j</code> for explicitness, and then <code>i..=j</code> for inclusive ranges), using ranges as indices would become very natural.</p>",
        "id": 293320541,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1660423748
    }
]