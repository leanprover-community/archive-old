[
    {
        "content": "<p>My auto param <code>consistent : ... := by simp</code> doesn't seem to be working properly here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">rowOfTypes</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DataEntry</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">DataType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>       <span class=\"o\">[]</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eh</span> <span class=\"o\">::</span> <span class=\"n\">et</span><span class=\"o\">,</span> <span class=\"n\">th</span> <span class=\"o\">::</span> <span class=\"n\">tt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eh.isOf</span> <span class=\"n\">th</span> <span class=\"bp\">∧</span> <span class=\"n\">rowOfTypes</span> <span class=\"n\">et</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>        <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">rowsOfTypes</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">DataEntry</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">DataType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">row</span> <span class=\"o\">::</span> <span class=\"n\">rows</span><span class=\"o\">,</span> <span class=\"n\">types</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rowOfTypes</span> <span class=\"n\">row</span> <span class=\"n\">types</span> <span class=\"bp\">∧</span> <span class=\"n\">rowsOfTypes</span> <span class=\"n\">rows</span> <span class=\"n\">types</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>           <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Header</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">DataType</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Header.dataTypes</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Header</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DataType</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DataFrame</span> <span class=\"n\">where</span>\n  <span class=\"n\">header</span>     <span class=\"o\">:</span> <span class=\"n\">Header</span>\n  <span class=\"n\">rows</span>       <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">DataEntry</span><span class=\"o\">)</span>\n  <span class=\"n\">consistent</span> <span class=\"o\">:</span> <span class=\"n\">rowsOfTypes</span> <span class=\"n\">rows</span> <span class=\"n\">header.dataTypes</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">DataType</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"n\">TInt</span><span class=\"o\">,</span> <span class=\"s2\">\"id\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">TString</span><span class=\"o\">,</span> <span class=\"s2\">\"name\"</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">DataEntry</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"alex\"</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">df</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span> <span class=\"n\">DataFrame.mk</span> <span class=\"n\">h</span> <span class=\"n\">r</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">unsolved goals</span>\n<span class=\"cm\">⊢ autoParam (rowsOfTypes r (Header.dataTypes h)) _auto✝</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">df'</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span> <span class=\"n\">DataFrame.mk</span> <span class=\"n\">h</span> <span class=\"n\">r</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rowsOfTypes</span><span class=\"o\">,</span> <span class=\"n\">rowOfTypes</span><span class=\"o\">])</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Even though I marked those functions with <code>@[simp]</code>. Any idea what I'm doing wrong?<br>\nLet me know if you want the full file <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 267638408,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641931952
    },
    {
        "content": "<p>Do you know the actual statements of the simp lemmas?</p>",
        "id": 267639115,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641932267
    },
    {
        "content": "<p>What do you mean? I haven't declared any lemma <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 267639516,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641932463
    },
    {
        "content": "<p>When you give a definition a <code>simp</code> tag, what does that do in lean4?</p>",
        "id": 267640273,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641932824
    },
    {
        "content": "<p>I'm expecting to be wrong here, but I think it makes <code>simp</code> automatically use that definition to unfold its occurrences in the goal</p>",
        "id": 267640503,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641932952
    },
    {
        "content": "<p>(hence my doubt about <code>df'</code> working and <code>df</code> not)</p>",
        "id": 267640645,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641933009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.40.5Bsimp.5D.20not.20working.3F/near/267640503\">said</a>:</p>\n<blockquote>\n<p>I'm expecting to be wrong here, but I think it makes <code>simp</code> automatically use that definition to unfold its occurrences in the goal</p>\n</blockquote>\n<p>This seems like a neat idea, but afaik <code>@[simp]</code> only works on (equational/biconditional) theorems currently.</p>",
        "id": 267732602,
        "sender_full_name": "Mac",
        "timestamp": 1641998170
    },
    {
        "content": "<p>Alright, thanks. I definitely didn't expect that</p>",
        "id": 267733765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641998677
    },
    {
        "content": "<p>No, that should work. Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 267734598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641999092
    },
    {
        "content": "<p>No, wait, there's something strange going on. It works on <code>leanprover/lean4:nightly-2022-01-06</code></p>",
        "id": 267734609,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641999097
    },
    {
        "content": "<p>Where does it not work?</p>",
        "id": 267734655,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641999121
    },
    {
        "content": "<p>I'm going to bake a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, just a sec</p>",
        "id": 267734767,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641999147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DataType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TInt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TFloat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TString</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DataType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DataEntry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EInt</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EFloat</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EString</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NULL</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NULL</span> <span class=\"o\">:=</span> <span class=\"n\">DataEntry.NULL</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Int</span> <span class=\"n\">DataEntry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">DataEntry.EInt</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Float</span> <span class=\"n\">DataEntry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">DataEntry.EFloat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">DataEntry</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">DataEntry.EFloat</span> <span class=\"o\">(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"n\">DataEntry</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">DataEntry.EString</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DataEntry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">isOf</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">DataEntry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">DataType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EInt</span> <span class=\"n\">_</span><span class=\"o\">,</span>    <span class=\"n\">TInt</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EFloat</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"n\">TFloat</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">EString</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">TString</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">NULL</span><span class=\"o\">,</span>      <span class=\"n\">_</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>         <span class=\"n\">_</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DataEntry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Header</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">DataType</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Header.colTypes</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Header</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DataType</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Header.colNames</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Header</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.2</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">DataEntry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">rowOfTypes</span> <span class=\"o\">:</span> <span class=\"n\">Row</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">DataType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>       <span class=\"o\">[]</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eh</span> <span class=\"o\">::</span> <span class=\"n\">et</span><span class=\"o\">,</span> <span class=\"n\">th</span> <span class=\"o\">::</span> <span class=\"n\">tt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eh.isOf</span> <span class=\"n\">th</span> <span class=\"bp\">∧</span> <span class=\"n\">rowOfTypes</span> <span class=\"n\">et</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>        <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">rowsOfTypes</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">DataType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">row</span> <span class=\"o\">::</span> <span class=\"n\">rows</span><span class=\"o\">,</span> <span class=\"n\">types</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rowOfTypes</span> <span class=\"n\">row</span> <span class=\"n\">types</span> <span class=\"bp\">∧</span> <span class=\"n\">rowsOfTypes</span> <span class=\"n\">rows</span> <span class=\"n\">types</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>          <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DataFrame</span> <span class=\"n\">where</span>\n  <span class=\"n\">header</span>     <span class=\"o\">:</span> <span class=\"n\">Header</span>\n  <span class=\"n\">rows</span>       <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span>\n  <span class=\"n\">consistent</span> <span class=\"o\">:</span> <span class=\"n\">rowsOfTypes</span> <span class=\"n\">rows</span> <span class=\"n\">header.colTypes</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DataFrame</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">header</span> <span class=\"o\">:</span> <span class=\"n\">Header</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">consistentConcatOfConsistentRow</span>\n    <span class=\"o\">{</span><span class=\"n\">df</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DataEntry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">rowOfTypes</span> <span class=\"n\">row</span> <span class=\"n\">df.header.colTypes</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">rowsOfTypes</span> <span class=\"o\">(</span><span class=\"n\">df.rows.concat</span> <span class=\"n\">row</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Header.colTypes</span> <span class=\"n\">df.header</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">df</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rows</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">induction</span> <span class=\"n\">rows</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">nil</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"c1\">-- breaks here</span>\n        <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hr.1</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"n\">hr.2</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addRow</span> <span class=\"o\">(</span><span class=\"n\">df</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">DataEntry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rowOfTypes</span> <span class=\"n\">row</span> <span class=\"n\">df.header.colTypes</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">df.header</span><span class=\"o\">,</span> <span class=\"n\">df.rows.concat</span> <span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">consistentConcatOfConsistentRow</span> <span class=\"n\">row</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DataFrame</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Header</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"n\">TInt</span><span class=\"o\">,</span> <span class=\"s2\">\"id\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">TString</span><span class=\"o\">,</span> <span class=\"s2\">\"name\"</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Row</span> <span class=\"o\">:=</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"alex\"</span><span class=\"o\">]]</span>\n\n<span class=\"c1\">-- this no longer works</span>\n<span class=\"kd\">def</span> <span class=\"n\">df1</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span> <span class=\"n\">DataFrame.mk</span> <span class=\"n\">h</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- and this ofc breaks now</span>\n<span class=\"kd\">def</span> <span class=\"n\">df2</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span> <span class=\"n\">df1.addRow</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"juddy\"</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this doesn't work anymore either</span>\n<span class=\"kd\">def</span> <span class=\"n\">df3</span> <span class=\"o\">:</span> <span class=\"n\">DataFrame</span> <span class=\"o\">:=</span> <span class=\"n\">DataFrame.empty</span> <span class=\"n\">h</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">addRow</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"s2\">\"john\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 267736067,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641999670
    },
    {
        "content": "<p>Thanks. And it doesn't work on which version?</p>",
        "id": 267736118,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641999695
    },
    {
        "content": "<p>The theorem, <code>df1</code>, <code>df2</code> and <code>df3</code> break on <code>leanprover/lean4:nightly-2022-01-10</code></p>",
        "id": 267736214,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641999731
    },
    {
        "content": "<p>I was finding it particularly strange because I had been able to use this feature on another repo (a few days ago). So I was trying to understand what I had done differently. The thing is that the other project probably breaks on <code>leanprover/lean4:nightly-2022-01-10</code> too</p>",
        "id": 267736591,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641999917
    },
    {
        "content": "<p>Confirmed. <code>leanprover/lean4:nightly-2022-01-10</code> is breaking some theorems <a href=\"https://github.com/arthurpaulino/LeanMusic/blob/master/LeanMusic/Intervals.lean\">here</a> (and <code>leanprover/lean4:nightly-2022-01-06</code> works just fine)</p>",
        "id": 267737873,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642000469
    },
    {
        "content": "<p>Could you open an issue on GitHub for this?</p>",
        "id": 267738624,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642000799
    },
    {
        "content": "<p>Sure</p>",
        "id": 267738969,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642000938
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 267739452,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642001139
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/946\">https://github.com/leanprover/lean4/issues/946</a></p>",
        "id": 267740595,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642001616
    }
]