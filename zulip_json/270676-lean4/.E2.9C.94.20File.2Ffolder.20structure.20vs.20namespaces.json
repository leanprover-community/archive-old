[
    {
        "content": "<p>I think a source of confusion/doubt is that an <code>import</code> in Lean imports specific files instead of a logical namespace. This was not obvious to me initially</p>\n<p>To be more specific, here is an example from DocGen4:</p>\n<p><a href=\"/user_uploads/3121/aZxfElBF4oVmynNj7Tsszgn4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aZxfElBF4oVmynNj7Tsszgn4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/aZxfElBF4oVmynNj7Tsszgn4/image.png\"></a></div><p>And another example from Lean4's Std namespace (i.e. files located in a <code>Data</code> folder but Data is not part of the namespace):</p>\n<p><a href=\"/user_uploads/3121/NChJCNCxG4NUO53nq2Bo7u59/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NChJCNCxG4NUO53nq2Bo7u59/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NChJCNCxG4NUO53nq2Bo7u59/image.png\"></a></div><p>Aside from the exceptions to the rules above (ToHtmlFormat.lean and Std/Data/ for example), it seems that they follow a general structure:</p>\n<ul>\n<li>make sure that the file/folder structure tries to follow the namespacing</li>\n<li>when a namespace is small enough that it can be fully defined in a single file, do not create a folder and \"folder-name\".lean file for it.</li>\n<li>Instead of Html/Html.lean use /Html/Basic.lean or /Html/Base.lean (at least I see this pattern repeated in various projects).</li>\n<li>otherwise, when a namespace is split into multiple files, place the files in a common folder named after the namespace and add a lean file with all the imports required to import the whole namespace (see Std.lean or Std/Data.lean file both in Lean4)</li>\n</ul>\n<p>Having spent quite a bit of time with Java, I am more used to importing a namespace instead of an individual file in any namespace. Are there benefits to this lower level type of import? It seems that in Lean4 (like in many other languages), every package has to manually maintain the chain of imports in each file to make sure that all files are compiled (compared to Java, for instance, where we only need to specify the src/ folder and files will be automatically picked up).</p>\n<p>In any case, it would be great to have a linter check namespaces vs file/folder structures in the future.</p>",
        "id": 285194654,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654566802
    },
    {
        "content": "<p>Import namespaces (which are generally tied to folder structure) are completely independent of regular <code>namespace</code> namespaces in lean. You can have the same namespaces in multiple files or multiple namespaces in one file</p>",
        "id": 285195506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654567843
    },
    {
        "content": "<p>this is very much unlike Java which ties the two together</p>",
        "id": 285195531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654567872
    },
    {
        "content": "<p>I would not welcome a linter that tries to make them more similar. Mathlib has lots more things to say about the <code>List</code> namespace</p>",
        "id": 285195601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654567925
    },
    {
        "content": "<p>I am curious to understand how this added flexibility benefits Mathlib. Could you give an example? So far I fail to see the benefits and keep seeing myself trying to decipher how the author decided to encode the namespaces by browsing files.</p>",
        "id": 285196274,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654568644
    },
    {
        "content": "<p>Mathlib adds many theorems to the <code>List</code> namespace, even though that is nominally a part of the <code>Std</code> or <code>Init</code> packages</p>",
        "id": 285196293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654568683
    },
    {
        "content": "<p>Since dot-notation is only triggered by putting things in the original namespace there isn't any choice but to do this for \"extension methods\", although there have been discussions about how to make the dot-notation lookup more flexible</p>",
        "id": 285196523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654568893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/File.2Ffolder.20structure.20vs.20namespaces/near/285196293\">said</a>:</p>\n<blockquote>\n<p>Mathlib adds many theorems to the <code>List</code> namespace, even though that is nominally a part of the <code>Std</code> or <code>Init</code> packages</p>\n</blockquote>\n<p>Although much more limited than Lean, in Java this would simply mean a src/Std/List/Theorems.lean in Mathlib contributing to the namespace defined in Std.</p>\n<p>But I digress. I think I do understand how Lean does things at this point and can move forward.</p>\n<p>thanks,</p>",
        "id": 285196646,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654569046
    },
    {
        "content": "<p>Those would end up in the <code>Std.List.Theorems</code> namespace, wouldn't they?</p>",
        "id": 285196674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654569083
    },
    {
        "content": "<p>also <code>List</code> is in the root namespace, it's not <code>Std.List</code></p>",
        "id": 285196720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654569123
    },
    {
        "content": "<p>Sure, I havent thought about dot-notation ... but name it Std/List.lean in MathLib.</p>\n<p>In any case, I dont claim to have a solution for this in Lean, just that I tend to see crazy namespace to files combinations and sometimes not clear why. Take this as a beginners feedback :-)</p>",
        "id": 285196792,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654569210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 285196917,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654569329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20File.2Ffolder.20structure.20vs.20namespaces/near/285196720\">said</a>:</p>\n<blockquote>\n<p>also <code>List</code> is in the root namespace, it's not <code>Std.List</code></p>\n</blockquote>\n<p>The root namespace should be forbidden.</p>",
        "id": 285197115,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1654569522
    }
]