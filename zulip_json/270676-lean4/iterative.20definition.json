[
    {
        "content": "<p>Hello, I recently started learning lean.<br>\nI have a question about the following construct, based on previous programming experience:</p>\n<p>let mut g := #[]<br>\nfor x in xs do<br>\n    g := g.push(fun () =&gt; x)</p>\n<p>this construction in lean should work, but does not work, or it should not work? Or maybe it works (I didn't manage to do it), but not correctly?</p>",
        "id": 276053524,
        "sender_full_name": "PaleChaos",
        "timestamp": 1647870851
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span> <span class=\"c1\">-- this is important</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g.push</span> <span class=\"n\">x</span>\n  <span class=\"n\">g</span>\n</code></pre></div>\n<p>just works</p>",
        "id": 276054252,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647871195
    },
    {
        "content": "<p>Or do you already know about the do notation stuff and there is some different error?</p>",
        "id": 276054454,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647871253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/iterative.20definition/near/276054454\">said</a>:</p>\n<blockquote>\n<p>Or do you already know about the do notation stuff and there is some different error?</p>\n</blockquote>\n<p>I want to ask if there are any problems in lean using a list of functions declared inside the loop and depending on the value of the loop variable, outside the loop?</p>",
        "id": 276056161,
        "sender_full_name": "PaleChaos",
        "timestamp": 1647871991
    },
    {
        "content": "<p>Ah no, that's not an issue, you just hit a special case where the type checker cant automagically figure out what to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span> <span class=\"c1\">-- this is important</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g.push</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">g</span>\n</code></pre></div>\n<p>works</p>",
        "id": 276056220,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647872025
    },
    {
        "content": "<p>This is related to some universe polymorphism not working out automatically here</p>",
        "id": 276056302,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1647872056
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 276056783,
        "sender_full_name": "PaleChaos",
        "timestamp": 1647872266
    },
    {
        "content": "<p>It also looks like an error in elaboration order, since you can insert <code>by exact</code> before the function to solve the problem. (submitted a minimized version as <a href=\"https://github.com/leanprover/lean4/pull/1058\">lean4#1058</a>)</p>",
        "id": 276097450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647888486
    }
]