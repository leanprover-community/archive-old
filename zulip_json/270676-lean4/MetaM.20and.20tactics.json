[
    {
        "content": "<p>How can I use MetaM as a tactic?</p>\n<p>I have seen that most of the tactics are defined as MetaM in Lean 4 like <code>simp</code>, <code>rewrite</code>. But I copy and paste in my code and modified it a little bit and it is not working when I try to use it as a tactic.</p>\n<p>Can someone give me a simple example of defining a small MetaM tactic and using it later?</p>",
        "id": 236927375,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1619835234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Meta.myTriv</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarType</span> <span class=\"bp\">←</span> <span class=\"n\">getMVarType</span> <span class=\"n\">mvarId</span>\n  <span class=\"k\">if</span> <span class=\"n\">mvarType.isConstOf</span> <span class=\"bp\">`</span><span class=\"n\">True</span> <span class=\"k\">then</span>\n    <span class=\"n\">assignExprMVar</span> <span class=\"n\">mvarId</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">True.intro</span> <span class=\"o\">[])</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">myTriv</span> <span class=\"n\">mvarId</span> <span class=\"s2\">\"goal does not have type `True`\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myTriv</span><span class=\"o\">)</span> <span class=\"s2\">\"myTriv\"</span> <span class=\"o\">:</span>  <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic myTriv]</span> <span class=\"kd\">def</span> <span class=\"n\">evalMyTriv</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">Meta.myTriv</span> <span class=\"n\">mvarId</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">myTriv</span>\n</code></pre></div>",
        "id": 236931397,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619838644
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">trivMetaM</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">assignExprMVar</span> <span class=\"n\">mvarId</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">True.intro</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">trivTacticM</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftMetaMAtMain</span> <span class=\"n\">trivMetaM</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">triv</span><span class=\"o\">)</span> <span class=\"s2\">\"triv\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic «triv»]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTriv</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">triv</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivTacticM</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>               <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">triv</span>\n</code></pre></div>",
        "id": 236931431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838683
    },
    {
        "content": "<p>dang</p>",
        "id": 236931435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838688
    },
    {
        "content": "<p>same example too</p>",
        "id": 236931439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838704
    },
    {
        "content": "<p>Ha. We need a better system. Next time I will type &lt;SPACE&gt; before I head to emacs, so it looks like I am typing in Zulip.</p>",
        "id": 236931497,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619838736
    },
    {
        "content": "<p>it's good though, we need more examples of this stuff</p>",
        "id": 236931514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838753
    },
    {
        "content": "<p>it's not clear to me whether <code>macro</code> can be used here</p>",
        "id": 236931582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/MetaM.20and.20tactics/near/236931582\">said</a>:</p>\n<blockquote>\n<p>it's not clear to me whether <code>macro</code> can be used here</p>\n</blockquote>\n<p>Can you clarify your question? This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"myTriv\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">myTriv</span>\n</code></pre></div>",
        "id": 236931752,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619838945
    },
    {
        "content": "<p>my version has a bug though, I guess <code>assignExprMVar</code> doesn't check the types</p>",
        "id": 236931755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838948
    },
    {
        "content": "<p>I mean for \"proper\" tactics, not macro tactics</p>",
        "id": 236931796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619838964
    },
    {
        "content": "<p>like what goes on the right of the arrow there? can some computation happen?</p>",
        "id": 236931847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839032
    },
    {
        "content": "<p>Lean is expecting <code>MacroM Syntax : Type</code></p>",
        "id": 236931931,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839094
    },
    {
        "content": "<p>I don't really know what that means though</p>",
        "id": 236931940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">MacroM</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Macro.Context</span> <span class=\"o\">(</span><span class=\"n\">EStateM</span> <span class=\"n\">Macro.Exception</span> <span class=\"n\">Macro.State</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 236932007,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839173
    },
    {
        "content": "<p>eh... yes</p>",
        "id": 236932058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839205
    },
    {
        "content": "<p>It can perform some computation, but has no access to <code>MetaM</code> and must return <code>Syntax</code></p>",
        "id": 236932060,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839209
    },
    {
        "content": "<p>so it's a pure function?</p>",
        "id": 236932080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839223
    },
    {
        "content": "<p>Yes.</p>",
        "id": 236932109,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839262
    },
    {
        "content": "<p>I guess that's a bit more restrained than the lean 3 <code>parser</code> monad, which had access to the tactic state and a bunch of other stuff</p>",
        "id": 236932161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839306
    },
    {
        "content": "<p>I mean, it's probably a good idea not to let the macros get too crazy but it might make some porting things tricky</p>",
        "id": 236932222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839342
    },
    {
        "content": "<p>I think the idea is to separate concerns: have parsers parse and produce syntax, and then have elaborators map syntax to expressions.</p>",
        "id": 236932226,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839363
    },
    {
        "content": "<p>which is part of why I don't anticipate there being much use of macro tactics besides ad-hoc tactics that are done with <code> `[ ... ]</code> today</p>",
        "id": 236932256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839410
    },
    {
        "content": "<p>Even for something like <code>triv</code>, if I actually cared to make a fast tactic with good error messages I wouldn't implement it as a macro tactic</p>",
        "id": 236932337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839495
    },
    {
        "content": "<p>There are a bunch of \"macro tactics\" in <code>Init</code>, e.g. <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L289-L305\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L289-L305</a></p>",
        "id": 236932457,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839597
    },
    {
        "content": "<p>yes, and most of them will have to be replaced in mathlib... or at least that's my prediction</p>",
        "id": 236932515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839684
    },
    {
        "content": "<p>it's not clear how to \"scope creep\" with those definitions</p>",
        "id": 236932546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619839697
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 236932593,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619839793
    },
    {
        "content": "<p>The point about \"tactics are macros\" is not that you have to write every tactic as a pure macro, but that it gives you a uniform macro/elaborator infrastructure shared with term elaboration, including the hygiene scheme. You can always \"escalate\" from a pure macro to an elaborator by throwing the syntax quotation in <code>evalTactic</code>, then refine on top of that. For tactics that will probably happen more often than for terms, yes.</p>",
        "id": 236947372,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619854944
    },
    {
        "content": "<p>I was looking at rewrite tactics and it returns <code>MetaM RewriteResult</code>. So it looks like that transforming this MetaM into a tactic will not be a simple transformation. Where can I find some examples of a tactic that just changes a goal to a simpler goal?</p>",
        "id": 237010531,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1619912782
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rewriteSimple</span><span class=\"o\">)</span> <span class=\"s2\">\"rewriteSimple\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic rewriteSimple]</span> <span class=\"kd\">def</span> <span class=\"n\">evalRewriteSimple</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Term.withSynthesize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">none</span> <span class=\"n\">true</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">rewrite</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarId'</span> <span class=\"bp\">←</span> <span class=\"n\">replaceTargetEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"n\">r.eNew</span> <span class=\"n\">r.eqProof</span>\n    <span class=\"n\">replaceMainGoal</span> <span class=\"o\">(</span><span class=\"n\">mvarId'</span> <span class=\"o\">::</span> <span class=\"n\">r.mvarIds</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewriteSimple</span> <span class=\"n\">h</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 237013035,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619915491
    },
    {
        "content": "<p>Thanks for the example.<br>\nDo you know how to trace information? So I can understand what is going on.</p>",
        "id": 237015850,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1619918640
    },
    {
        "content": "<p>For unconditional tracing, you can use something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e}: {r.eNew}\"</span>\n</code></pre></div>\n<p>See also <a href=\"https://leanprover.github.io/lean4/doc/debugging.html\">https://leanprover.github.io/lean4/doc/debugging.html</a> (additions welcome)</p>",
        "id": 237033944,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619939941
    },
    {
        "content": "<p>Thank you for your suggestion. <code>logInfo</code> is working inside Tactic and <code>dbg_trace</code> is very useful when there is no <code>logInfo</code> available.<br>\nDoes MetaM have some kind of log? Because I have tried to use <code>logInfo</code> inside it and it is not working <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> . I received this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.Elab.MonadLog</span> <span class=\"o\">(</span><span class=\"n\">ReaderT.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Lean.Meta.Context</span> <span class=\"o\">(</span><span class=\"n\">StateRefT'</span> <span class=\"n\">IO.RealWorld</span> <span class=\"n\">Lean.Meta.State</span> <span class=\"n\">Lean.Core.CoreM</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 237071803,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1619980287
    },
    {
        "content": "<p>I figure out that I can just rename MetaM to TacticM that it works. So it is possible to use all TacticM features <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 237089032,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1619993146
    },
    {
        "content": "<p>There's also <code>liftMetaAtMain</code> to lift <code>MetaM</code> to <code>TacticM</code></p>",
        "id": 237089223,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619993317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , thanks for the suggestion.</p>\n<p>I have found in the definition of <code>MetaM</code>that they use <code>StateRefT</code>, but my VSCode can't find the definition of it when I press <code>F12</code>.<br>\nWhat is that? Why can't my VS Code find this definition?</p>",
        "id": 237099470,
        "sender_full_name": "Guilherme Silva",
        "timestamp": 1620003694
    },
    {
        "content": "<p>make sure you are up to date?</p>",
        "id": 237100373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620004610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143232\">Guilherme Silva</span> <a href=\"#narrow/stream/270676-lean4/topic/MetaM.20and.20tactics/near/237099470\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> , thanks for the suggestion.</p>\n<p>I have found in the definition of <code>MetaM</code>that they use <code>StateRefT</code>, but my VSCode can't find the definition of it when I press <code>F12</code>.<br>\nWhat is that? Why can't my VS Code find this definition?</p>\n</blockquote>\n<p><code>StateRefT</code> is currently a macro. This is a temporary workaround. Not sure whether it is still needed after all the recent improvements. Note that it is highlighted as a keyword. <br>\nWe don't support goto definitions for macros yet.</p>",
        "id": 237100731,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1620005029
    }
]