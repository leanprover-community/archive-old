[
    {
        "content": "<p>I have a few questions..</p>\n<p>Given propositions,</p>\n<p>variable {this_is_about_w : Prop}<br>\nvariable {this_is_about_x : Prop}<br>\nvariable {this_is_about_y : Prop}<br>\nvariable {this_is_about_z : Prop}<br>\n.<br>\n.<br>\n.</p>\n<p>Is there an appropriate way to type inference rules and type new variables from existing variables? </p>\n<p>Why are the following type definitions, invalid?</p>\n<p>variable {w_and_x_and_y : this_is_about_w ∧ this_is_about_x ∧ this_is_about_y}</p>\n<p>and</p>\n<p>variable {expression : w_and_x_and_y}</p>\n<p>Much appreciated!</p>",
        "id": 308319899,
        "sender_full_name": "Nathan",
        "timestamp": 1667790383
    },
    {
        "content": "<p>In your example, I think everything is fine until the last variable -- <code>w_and_x_and_y</code> is not a proposition (ie a type), rather it's a proof of <code>this_is_about_w /\\ ...</code>. And proofs can't appear in type position, since they're not types, so the last <code>variable</code> declaration should complain</p>",
        "id": 308320401,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667790929
    },
    {
        "content": "<p>(does that answer what you were asking about?)</p>",
        "id": 308320461,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667790970
    },
    {
        "content": "<p>Does anyone know where to find the solutions to the exercises from the Lean Theorem Prover: <a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\">https://leanprover.github.io/logic_and_proof/sets_in_lean.html</a>.</p>",
        "id": 308331178,
        "sender_full_name": "Hyun Kim",
        "timestamp": 1667801688
    },
    {
        "content": "<p>Thanks James Gallicchio and Hyun Kim.</p>\n<p>Yes.</p>\n<p>To represent, \"a proposition for a theory in T' is a proof in theory T,\" I was under the impression I could coerce the expression 'this_is_about_w ∧ this_is_about_x ∧ this_is_about_y' to be a Proposition through defining it the way I had.</p>\n<p>Sorry to be so convoluted.</p>",
        "id": 308362536,
        "sender_full_name": "Nathan",
        "timestamp": 1667817650
    },
    {
        "content": "<p>To give a name to that conjunction you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">this_is_about_w_and_x_and_y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">this_is_about_w</span> <span class=\"bp\">∧</span> <span class=\"n\">this_is_about_x</span> <span class=\"bp\">∧</span> <span class=\"n\">this_is_about_y</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">this_is_about_w_and_x_and_y</span> <span class=\"n\">where</span>\n  <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">this_is_about_w</span>\n  <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">this_is_about_x</span>\n  <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">this_is_about_y</span>\n</code></pre></div>",
        "id": 308367416,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1667819491
    }
]