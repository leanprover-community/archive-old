[
    {
        "content": "<p>I'm writing a tactic that gives suggestions on how to change existing tactics to be more legible. This delaborates the goal and combines this with the executed tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">newGoalStx</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">newGoalDecl.type</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">newGoalStx</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tacticStx</span><span class=\"o\">)</span>\n<span class=\"n\">addTrace</span> <span class=\"bp\">`</span><span class=\"n\">structured</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{newStx}\"</span>\n</code></pre></div>\n<p>The <code>newStx</code> object itself seems valid, however adding the trace fails with the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">structured</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">parenthesize</span><span class=\"o\">:</span> <span class=\"n\">uncaught</span> <span class=\"n\">backtrack</span> <span class=\"n\">exception.</span> <span class=\"n\">Falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">raw</span> <span class=\"n\">printer.</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Term.suffices</span>\n <span class=\"s2\">\"suffices\"</span>\n <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">Even</span> <span class=\"o\">[(</span><span class=\"n\">num</span> <span class=\"s2\">\"0\"</span><span class=\"o\">)])</span>\n <span class=\"o\">[]</span>\n <span class=\"o\">(</span><span class=\"n\">Term.byTactic</span>\n  <span class=\"s2\">\"by\"</span>\n  <span class=\"o\">(</span><span class=\"n\">Tactic.tacticSeq</span>\n   <span class=\"o\">(</span><span class=\"n\">Tactic.tacticRepeat_</span>\n    <span class=\"s2\">\"repeat\"</span>\n    <span class=\"o\">(</span><span class=\"n\">Tactic.tacticSeq</span>\n     <span class=\"o\">(</span><span class=\"n\">Tactic.tacticSeq1Indented</span>\n      <span class=\"o\">[(</span><span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">Tactic.apply</span> <span class=\"s2\">\"apply\"</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">Even.add_two</span> <span class=\"o\">[(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)]))</span> <span class=\"o\">[])]))))))</span>\n</code></pre></div>\n<p>Why does this fail? This Syntax 'raw' printing seems in line with what I expect: <code>suffices Even 0 by repeat apply Even.add_two _ _</code></p>",
        "id": 290493044,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658488754
    },
    {
        "content": "<p>No, that syntax tree is missing the <code>sufficesDecl</code> node. Try <code>$newGoalStx:term</code>.</p>",
        "id": 290493380,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658489003
    },
    {
        "content": "<p>Actually do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? This should be a type error in recent versions.</p>",
        "id": 290493582,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658489156
    },
    {
        "content": "<p>What do you mean by the sufficesDecl node? I've tried adding <code>:term</code>, but then the <code>$tacticStx</code> complains with <code>expected term</code>.</p>",
        "id": 290494262,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658489653
    },
    {
        "content": "<p>I'll try creating a mwe for it, good practice anyways</p>",
        "id": 290494278,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658489670
    },
    {
        "content": "<p>Also, I've updated to the latest nightly and the error remains the same. Note that I have set pp.rawOnError, so it could still be a type error I guess? VSCode doesn't complain though</p>",
        "id": 290494446,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658489793
    },
    {
        "content": "<p>Okay that took longer than expected, I tried to trim it down a little too much.  The smallest example without changing the structure of my tactic is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"n\">Lean.PrettyPrinter</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Even</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">):</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalStx</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarDecl</span> <span class=\"n\">goal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">goalStx</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span>\n    <span class=\"n\">addTrace</span> <span class=\"bp\">`</span><span class=\"n\">myTactic</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"This message fails with </span><span class=\"se\">\\n</span><span class=\"s2\">{newStx}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logWarning</span> <span class=\"s2\">\"MWE\"</span>\n\n<span class=\"n\">elab</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"myTactic \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">x</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myTactic</span> <span class=\"n\">apply</span> <span class=\"n\">Even.add_two</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290497369,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658491816
    },
    {
        "content": "<p>That doesn't parse for me on current master. \"expected ';' or line break\" after <code>$goalStx</code>.</p>",
        "id": 290497560,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658491933
    },
    {
        "content": "<p>Ah yes, my toolchain was still overriden with an old nightly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  I get the same error now</p>",
        "id": 290498333,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658492406
    },
    {
        "content": "<p>I'm starting to wonder whether we should remove toolchain overrides as a mis-feature from elan</p>",
        "id": 290498546,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658492523
    },
    {
        "content": "<p>Well the weird thing to me was that I had removed the lean.toolchain from the working directory, but it was overriden by a parent directory that had it. But that might also just be me mismanaging my folder structure <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  I haven't worked with Lean 4 that much yet</p>",
        "id": 290498698,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658492614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20Syntax.20fails/near/290498546\">said</a>:</p>\n<blockquote>\n<p>I'm starting to wonder whether we should remove toolchain overrides as a mis-feature from elan</p>\n</blockquote>\n<p>But it's used in the compiler development process right? At least as documented in the manual.</p>",
        "id": 290498725,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658492636
    },
    {
        "content": "<p>Not by me, but you're right, yes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . A <code>lean-toolchain</code> file with contents a la <code>../build/release/stage0</code> would be much more explicit and discoverable though.</p>",
        "id": 290499050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658492818
    },
    {
        "content": "<p>Damn NixOS punks :P</p>",
        "id": 290499308,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658492945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20printing.20Syntax.20fails/near/290498546\">said</a>:</p>\n<blockquote>\n<p>I'm starting to wonder whether we should remove toolchain overrides as a mis-feature from elan</p>\n</blockquote>\n<p>I use it <a href=\"https://github.com/mhuisi/lean4-cli/blob/main/.github/workflows/check_nightly.yml\">for CI</a></p>",
        "id": 290506751,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1658497121
    },
    {
        "content": "<p>You can use <code>lake +leanprover/lean4:nightly build</code> for that</p>",
        "id": 290506839,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658497174
    },
    {
        "content": "<p>I find switching toolchains in VS Code to be quite intuitive/discoverable. Admittedly, it is confusing when a change to <code>lean-toolchain</code> doesn't propagate because of the override. If you get rid of the override, maybe a similar menu command that would instead modify <code>lean-toolchain</code> then restart the server could be provided?</p>",
        "id": 290508432,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1658497983
    },
    {
        "content": "<p>AFAIK switching toolchains in VS Code does not actually use elan overrides</p>",
        "id": 290508533,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658498040
    },
    {
        "content": "<p>So in my m(notworking)e above, I changed the line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">goalStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Where I'm unsure on how to 'finish' the syntax quotation. Looking at the macro definition of <code>suffices</code>, we see the second match case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"bp\">;</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here I don't know all the notation, but I do see that it expects a sequence of tactics, ending with a <code>body</code> element, that is used as a (I assume) proof term outside of tactic mode. In my case, I do not see why I need such a body term. My case would be pretty simple: <code>suffices Even 0 by repeat apply Even.add_two _ _</code> only contains the tacticSeq, right?</p>\n<p>Could someone elaborate on the purpose of the body term? Is there some way I can consider it 'empty' in my case?</p>",
        "id": 290735782,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658740749
    },
    {
        "content": "<p>An actual compilable mwe that does still has the same error message is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"n\">Lean.PrettyPrinter</span>\n\n<span class=\"c1\">-- TODO: Does not seem to work without</span>\n<span class=\"kn\">open</span> <span class=\"n\">TSyntax.Compat</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- \"4.0.0-nightly-2022-07-22\"</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">Nat.zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Even</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">):</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalStx</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarDecl</span> <span class=\"n\">goal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">myTacticSeq</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|$</span><span class=\"n\">stx</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">goalStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">myTacticSeq</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"bp\">;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">addTrace</span> <span class=\"bp\">`</span><span class=\"n\">myTactic</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"This message fails with </span><span class=\"se\">\\n</span><span class=\"s2\">{newStx}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logWarning</span> <span class=\"s2\">\"MWE\"</span>\n\n<span class=\"n\">elab</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"myTactic \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">x</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myTactic</span> <span class=\"n\">apply</span> <span class=\"n\">Even.add_two</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"c1\">-- suffices Even 0 by</span>\n  <span class=\"c1\">--   apply Even.add_two _ _</span>\n  <span class=\"c1\">--   exact this</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>With almost the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">myTactic</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">message</span> <span class=\"n\">fails</span> <span class=\"k\">with</span>\n<span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">parenthesize</span><span class=\"o\">:</span> <span class=\"n\">uncaught</span> <span class=\"n\">backtrack</span> <span class=\"n\">exception.</span> <span class=\"n\">Falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">raw</span> <span class=\"n\">printer.</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Term.suffices</span>\n <span class=\"s2\">\"suffices\"</span>\n <span class=\"o\">(</span><span class=\"n\">Term.sufficesDecl</span>\n  <span class=\"o\">[]</span>\n  <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">Even</span> <span class=\"o\">[(</span><span class=\"n\">num</span> <span class=\"s2\">\"0\"</span><span class=\"o\">)])</span>\n  <span class=\"o\">(</span><span class=\"n\">Term.byTactic'</span>\n   <span class=\"s2\">\"by\"</span>\n   <span class=\"o\">(</span><span class=\"n\">Tactic.seq1</span>\n    <span class=\"o\">[(</span><span class=\"n\">Tactic.apply</span> <span class=\"s2\">\"apply\"</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">Even.add_two</span> <span class=\"o\">[(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)]))</span>\n     <span class=\"s2\">\";\"</span>\n     <span class=\"o\">(</span><span class=\"n\">Tactic.exact</span> <span class=\"s2\">\"exact\"</span> <span class=\"o\">(</span><span class=\"n\">Lean.termThis</span> <span class=\"s2\">\"this\"</span><span class=\"o\">))])))</span>\n <span class=\"s2\">\";\"</span>\n <span class=\"o\">(</span><span class=\"n\">Term.syntheticHole</span> <span class=\"s2\">\"?\"</span> <span class=\"o\">(</span><span class=\"n\">Term.hole</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The difference is that I added the <code>TSyntax.Compat</code> open, otherwise <code>$stx</code> is the wrong type.  (And seconds before posting I saw that Sebastian Ulrich said on another post that using <code>TSyntax.Compat</code> is a red flag you're doing something wrong <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>\n<p>Additionally, I added <code>?_</code> at the end of the suffices block, because the macro definition expects a <code>$body</code> term, even though in my example that is empty. I expect that it now fails because of this last <code>syntheticHole</code>, but I'm unsure on how to figure this out, since I don't really understand why the <code>$body</code> term is mandatory anyways.</p>\n<p>Any pointers where I seem to be going wrong?</p>",
        "id": 290868558,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658828261
    },
    {
        "content": "<p>Ah, you're using <code>term</code> <code>suffices</code>, but I assume you want <code>tactic</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">t</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalStx</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarDecl</span> <span class=\"n\">goal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">goalStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">addTrace</span> <span class=\"bp\">`</span><span class=\"n\">myTactic</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"This message fails with </span><span class=\"se\">\\n</span><span class=\"s2\">{newStx}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logWarning</span> <span class=\"s2\">\"MWE\"</span>\n</code></pre></div>",
        "id": 290872962,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658831052
    },
    {
        "content": "<p>That certainly makes more sense, however, it still has the error message in your mwe. If you add <code>$t:tactic</code>, it works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"myTactic \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"n\">t</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">goalStx</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarDecl</span> <span class=\"n\">goal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n      <span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">goalStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"kd\">by</span>\n        <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span>\n        <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">addTrace</span> <span class=\"bp\">`</span><span class=\"n\">myTactic</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"This message succeeds with </span><span class=\"se\">\\n</span><span class=\"s2\">{newStx}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logWarning</span> <span class=\"s2\">\"MWE\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myTactic</span> <span class=\"n\">apply</span> <span class=\"n\">Even.add_two</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Adds the expected trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">myTactic</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">message</span> <span class=\"n\">succeeds</span> <span class=\"k\">with</span>\n<span class=\"k\">suffices</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Even.add_two</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>Thanks for the help, all the different types of terms gets confusing sometimes!</p>",
        "id": 290875839,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658833012
    },
    {
        "content": "<p>Ah, you need <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-07-24\">https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2022-07-24</a> or later for my version</p>",
        "id": 290876053,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658833186
    },
    {
        "content": "<p>Yes, that works as well. Guess I should keep a bit more of an eye on nightly changes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Thanks again!</p>",
        "id": 290876399,
        "sender_full_name": "Reinier van der Gronden",
        "timestamp": 1658833421
    }
]