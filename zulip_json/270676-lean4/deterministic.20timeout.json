[
    {
        "content": "<p>Typechecking this function produces two error messages after a delay:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  HSub (optParam Float 0.0) (optParam Float 1.0) ?m.472</span>\n<span class=\"cm\">(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n\n<span class=\"cm\">(deterministic) timeout at 'isDefEq', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>If you remove the default value for either argument typechecking succeeds. I tried this on a nightly from a few days ago and the latest one.</p>",
        "id": 287654818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656374553
    },
    {
        "content": "<p>I have a workaround for now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 287654892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656374590
    },
    {
        "content": "<p>Thanks for reporting the issue. The <code>optParam</code> definition is affecting the type class resolution procedure.</p>",
        "id": 287655031,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656374703
    },
    {
        "content": "<p>I will try to fix it.</p>",
        "id": 287655044,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656374711
    },
    {
        "content": "<p>Pushed a fix for this<br>\n<a href=\"https://github.com/leanprover/lean4/commit/34dc2572f36b35fce217d8d729167256175b3b08\">https://github.com/leanprover/lean4/commit/34dc2572f36b35fce217d8d729167256175b3b08</a></p>",
        "id": 287657661,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656377033
    },
    {
        "content": "<p>Is there an application to having the type of <code>a</code> be <code>optParam Float 0.0</code> rather than <code>Float</code> in the body of the function?</p>",
        "id": 287659207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656378578
    },
    {
        "content": "<p>Yes, it can, and I considered this option, but it would not fully solve the issue since one can write stuff such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 287662585,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656382581
    },
    {
        "content": "<p>Could there be a general interface for letting something alter the binding domains when they're added to the local environment? For example, stripping <code>optParam</code> or other user annotations.</p>",
        "id": 287735799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656431422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> We currently do not have this kind of interface. So, one would have to redefine the elaboration functions for <code>fun</code>, <code>let</code>, etc. to modify the types before they are inserted into the local context.<br>\nHowever, it is not hard to add this kind of user-defined handler. It may be useful, but it would not solve the issue above. The information in the local context is used to create the <code>lambda</code> and <code>forall</code> terms that are sent to the kernel.</p>",
        "id": 287742939,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656434349
    }
]