[
    {
        "content": "<p>We taught our students the tactics mentioned in the title among others today, and there was some confusion over which tactic closes which kind of goal implicitly. Intuitively we might think \"<code>rw</code> is weaker than <code>simp only</code> is weaker than <code>simp</code>\", but this is not true in that regard:</p>\n<ul>\n<li><code>rw</code> uses \"cheap refl\" in the end, that is, <code>try (withReducible rfl)</code></li>\n<li><code>simp only</code> tries <code>True.intro</code></li>\n<li><code>simp</code> also tries <code>True.intro</code> only, but since there is a refl-like <code>[simp]</code> theorem, it can close as much as <code>rw</code></li>\n</ul>\n<p>If we want to present <code>rw</code> as a \"manual <code>simp</code>\", in particular as a safe non-terminal tactic, it seems like it should not have this automatic final step. What do you think? Would it be bothersome in your experience to add an extra <code>rfl</code> below a terminal <code>rw</code>?</p>",
        "id": 237337942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620139997
    },
    {
        "content": "<p>Maybe one could have <code>rwr</code> which is like Lean 3 <code>rwa</code> except that it does <code>rfl</code> instead of <code>assumption</code>?</p>",
        "id": 237338976,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1620140254
    },
    {
        "content": "<p>But <code>rfl</code> is so much shorter to write out than <code>asssumption</code>... :)</p>",
        "id": 237339545,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620140409
    },
    {
        "content": "<p>I think Kevin disabled the <code>rfl</code> at the end of a rewrite in his number theory game because his students could not understand what was going on. I agree that it is reasonable.</p>",
        "id": 237343201,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620141106
    },
    {
        "content": "<p>Sebastian, is the <code>refl</code> tactic renamed <code>rfl</code> in Lean4?</p>",
        "id": 237343571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620141192
    },
    {
        "content": "<p>(I just want to be sure we're talking about the same thing).</p>",
        "id": 237343671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620141219
    },
    {
        "content": "<p>Ah, yes, it is. This one is not extensible (yet).</p>",
        "id": 237344856,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620141547
    },
    {
        "content": "<p>Lean 3's <code>refl</code> tactic also closes <code>P &lt;-&gt; P</code> goals, which Lean 4's <code>rfl</code> doesn't. I disabled cheap rfl after rw in NNG not because I was against it, but because I made an active decision not to talk about definitional equality, so <code>x + 0 = x</code> isn't refl in the eyes of the user (in fact we get occasional bug reports complaining that refl closes this when it shouldn't). I really like cheap refl after rw when I'm actually coding, but I would be just as happy to have rwr doing this (in fact perhaps rwr could try harder with refl if we go down this route, because I sometimes have to do rw, refl in Lean 3).</p>",
        "id": 237349113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620143152
    },
    {
        "content": "<p>I don't think <code>rw</code> should lose the \"cheap refl\" at the end, or that it should be renamed to <code>rwr</code>. But changing it to not do the cheap refl for educational purposes, like Kevin's NNG <code>rw</code>, seems fine</p>",
        "id": 237439759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620189511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure I fully understood you, do you mean a different <code>rw</code> should be used in teaching?</p>",
        "id": 237450762,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620198798
    },
    {
        "content": "<p>yes, that's what NNG does</p>",
        "id": 237450784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620198811
    },
    {
        "content": "<p>once you think the students are comfortable with <code>rw</code> enough that having implicit extra behavior isn't too magical you can take off the training wheels</p>",
        "id": 237450888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620198862
    },
    {
        "content": "<p>In fact I think the general technique of using curated and possibly simplified versions of lean tactics for the purposes of teaching is a very good idea. Lean is really complicated if you have to tackle all of it at once</p>",
        "id": 237451045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620198964
    },
    {
        "content": "<p>Yes, but ideally I would hope that can be achieved by simply not introducing the advanced tactics, or advances versions such as pattern <code>intro</code>, in the beginning. I still think a clear \"power hierarchy\" of rw/simp only/simp would be a good design beneficial to both beginners and advanced users.</p>",
        "id": 237451668,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620199351
    },
    {
        "content": "<p>In that case, perhaps <code>simp only</code> should support cheap <code>rfl</code></p>",
        "id": 237451740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620199437
    },
    {
        "content": "<p>it is a bit annoying to have to add <code>eq_self_iff_true</code> anyway</p>",
        "id": 237451802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620199461
    },
    {
        "content": "<p>which has become more visible in mathlib since we started squeezing our simps</p>",
        "id": 237451873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620199514
    },
    {
        "content": "<p>Yes, that would also work. I think it would be fine for education.</p>",
        "id": 237452042,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620199604
    },
    {
        "content": "<p>We could have <code>simp ONLY!! [foo, bar]</code> for the very restrictive version (-;<br>\nIn case someone really doesn't want <code>eq_self_iff_true</code> by default.</p>",
        "id": 237452044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620199605
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/f9nLKG9ouEHTLWQqL52wATad/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/f9nLKG9ouEHTLWQqL52wATad/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/f9nLKG9ouEHTLWQqL52wATad/image.png\"></a></div>",
        "id": 237452266,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620199764
    },
    {
        "content": "<p>We noticed that people were confused by <code>rw</code> not closing <code>refl</code> goals in NNG and then when they switched to real Lean suddenly it was, and at the time this was flagged as a potential downside of my rw hack. However NNG came from about a year of experimenting on mathematics undergraduates (<a href=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\">this</a> was the original version, and I watched a lot of people working through that stuff) and finding out what worked best for them, and the approach of hiding definitional equality seemed to win out. </p>\n<p>The other hack in NNG tactics was that <code>induction</code> in goals like <code>0 + x = x</code> would give you base case goals like <code>0 + zero = zero</code> which again was unsurprisingly found confusing, so there was a lot of rewriting <a href=\"http://nat.zero\">nat.zero</a> to 0 behind the scenes.</p>",
        "id": 237453884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620200660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Just to make sure we're on the same page, note that Lean 4's \"cheap refl\" would <em>not</em> close <code>x + 0 = x</code> since <code>Nat.add</code> is not reducible</p>",
        "id": 237454324,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620200908
    },
    {
        "content": "<p>Lean 3's doesn't either btw</p>",
        "id": 237454453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201003
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[]</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 237454492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp/near/237337942\">said</a>:</p>\n<blockquote>\n<p>Would it be bothersome in your experience to add an extra <code>rfl</code> below a terminal <code>rw</code>?</p>\n</blockquote>\n<p>For what it's worth, the corresponding tactic in Isabelle/HOL, <code>subst</code>, does not automatically call <code>rfl</code>, and that never seemed to bother anybody.</p>",
        "id": 237454534,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1620201032
    },
    {
        "content": "<p>It surely closes 0 + 0 = 0, maybe that's what I was remembering</p>",
        "id": 237454545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620201037
    },
    {
        "content": "<p>so it does, that's odd</p>",
        "id": 237454580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201060
    },
    {
        "content": "<p><code>rw add_zero</code> -- \"huh\"?</p>",
        "id": 237454592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620201064
    },
    {
        "content": "<p>I think it would be cool if <code>rw</code> used cheap (or even not cheap) refl at the end, <em>if</em> it is the last tactic in the branch. I don't know if the tactic parsing framework is able to determine this though</p>",
        "id": 237454789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201163
    },
    {
        "content": "<p>I remember now, even <code>rw add_zero</code> doesn't close <code>x + 0 = x</code> in NNG, that's the behaviour I wanted. People are so confused by <code>rw</code>, they can't tell the difference between it and <code>apply</code>, like some maths students can't tell the difference between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>â€…â€Š</mtext><mo>âŸ¹</mo><mtext>â€…â€Š</mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">âŸ¹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span></span></span> when they come to university, the terms are kind of used vaguely at school and sometimes interchangeably. [I am now reminded of a stroppy letter I wrote to my daughter's teacher when she was about 8]</p>",
        "id": 237454791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620201164
    },
    {
        "content": "<p>I think <code>apply</code> is a vague word in mathematics though, it means \"use this theorem somehow\"</p>",
        "id": 237454888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201214
    },
    {
        "content": "<p>lean's interpretation of <code>apply</code> is a bit too constrained</p>",
        "id": 237454910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp/near/237454789\">said</a>:</p>\n<blockquote>\n<p>I think it would be cool if <code>rw</code> used cheap (or even not cheap) refl at the end, <em>if</em> it is the last tactic in the branch. I don't know if the tactic parsing framework is able to determine this though</p>\n</blockquote>\n<p>This sounds easy when you only consider branches, but much harder if you also want to propagate a sensible \"terminal\" flag through combinators. I believe the result would be more confusing than the status quo. A separate tactic name would be a cleaner solution.</p>",
        "id": 237455486,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620201553
    },
    {
        "content": "<p>Indeed, I think it doesn't match the tactic architecture itself. If the number of goals returned by the tactic was enforced in the type system, like in HOL, then it would make more sense</p>",
        "id": 237455748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620201679
    },
    {
        "content": "<p>I don't think of <code>rw</code> as a terminal tactic, so I'd be in favor of it not closing cheap rfl goals. Is an extra <code>rfl</code> at the end really that inconvenient?</p>",
        "id": 237455967,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1620201795
    },
    {
        "content": "<p>Then again, I can see that it might be slightly annoying if then almost <em>every</em> proof case ends with <code>rfl</code>, which I guess some might consider as noise.</p>",
        "id": 237456130,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1620201888
    },
    {
        "content": "<p>I really like <code>by rw [lem1, lem2]</code> in calc blocks, short and easy and fits on the same line as the calculation step.</p>",
        "id": 237456244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620201947
    },
    {
        "content": "<p>If it becomes <code>by rw [lem1, lem2]; rfl</code> those 5 extra chars will cause line overflow in some cases</p>",
        "id": 237456373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620201999
    },
    {
        "content": "<p>I wouldn't mind avoiding that</p>",
        "id": 237456380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620202004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp/near/237456244\">said</a>:</p>\n<blockquote>\n<p>I really like <code>by rw [lem1, lem2]</code> in calc blocks, short and easy and fits on the same line as the calculation step.</p>\n</blockquote>\n<p>This seems like something that <code>calc</code> in particular could add, right?</p>",
        "id": 237456426,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1620202027
    },
    {
        "content": "<p>Aah, I see. It wouldn't be very uniform though</p>",
        "id": 237456571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620202088
    },
    {
        "content": "<p>It's not just calc block though, there are lots of lemmas like <code>lemma foo : a = b := by rw [one, two, three]</code>.  Requiring <code>rfl</code> at the end is really cumbersome.</p>",
        "id": 237456766,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620202184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Another aspect to consider, if a) <code>simp</code> was much cheaper in general, and b) squeezing it into <code>simp only</code> was only a Code Action away, do you think you would use <code>rw</code> as often as today? Because I believe Isabelle users would probably default to <code>simp</code> in these cases.</p>",
        "id": 237457150,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620202378
    },
    {
        "content": "<p>It will be interesting to see how important/effective squeezing will be in Lean 4 in general. The discrimination trees fundamentally change the whole scalability issue.</p>",
        "id": 237457555,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620202598
    },
    {
        "content": "<p><code>rw</code> does a lot of things that simp doesn't: 1) it rewrites in the specified order (which is important if you go against the grain), 1b) it rewrites only once, 2) it can open extra subgoals.</p>",
        "id": 237457558,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620202598
    },
    {
        "content": "<p><code>simp only</code> is also important for maintaining predictability/robustness in the face of new additions to the simp set</p>",
        "id": 237457655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620202661
    },
    {
        "content": "<p>(Type-theory issues aside where <code>rw</code> works but <code>simp</code> doesn't.)</p>",
        "id": 237457658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620202665
    },
    {
        "content": "<p>(this is summarized in the \"no nonterminal <code>simp</code>\" rule)</p>",
        "id": 237457744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620202705
    },
    {
        "content": "<p>Oh, nonterminal <code>simp</code>s should definitely be squeezed of course</p>",
        "id": 237457780,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620202731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you have a feeling for how often these features are used in terminal <code>rw</code>s? Also not sure off the top of my mind if Lean 4 <code>simp</code> can actually open new goals.</p>",
        "id": 237457991,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620202843
    },
    {
        "content": "<p>I find <code>rw</code> generally easier to control than <code>simp</code>, for the reasons gabriel mentioned</p>",
        "id": 237458171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620202924
    },
    {
        "content": "<p>but I don't think there is a significant prejudice for one over the other where they both apply</p>",
        "id": 237458230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620202954
    },
    {
        "content": "<p>Opening new goals typically does not happen with non-terminal rws.  But still, having to write <code>by rw Nat.sub_add_cancel; rfl; ...</code> is cumbersome and noisy.</p>",
        "id": 237458380,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620203042
    },
    {
        "content": "<p>I wouldn't mind having <code>rwr</code> for rewrite and then not-cheap refl, but I generally dislike tactics whose only purpose is to be two tactics in a row</p>",
        "id": 237458698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620203178
    },
    {
        "content": "<p>Probably terrible idea: instead of having tactics speculatively close goals, use an extensible set of tactics at <code>done</code> (which is implicit at the end of a \"terminal\" tactic block) to do so instead. Then at least you really don't pay for the feature unless you use it.</p>",
        "id": 237458746,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620203200
    },
    {
        "content": "<p>is this like my suggestion about doing it only for the last tactic in a block? How is the position detected / communicated?</p>",
        "id": 237458860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620203267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp/near/237457991\">said</a>:</p>\n<blockquote>\n<p>Also not sure off the top of my mind if Lean 4 <code>simp</code> can actually open new goals.</p>\n</blockquote>\n<p>This doesn't seem to work, even if I explicitly name the metavariable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">â‰¤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Nat.sub_add_cancel</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.leOfLt</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_cancel</span> <span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- simp makes no progress here</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.leOfLt</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 237459537,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620203589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp/near/237458860\">said</a>:</p>\n<blockquote>\n<p>is this like my suggestion about doing it only for the last tactic in a block? How is the position detected / communicated?</p>\n</blockquote>\n<p>The block itself would do it, not the last tactic. Which is simpler and more robust (we only call the tactic set when we know we would otherwise fail with \"unsolved goals\" anyway), but means the last tactic can't influence what to try.</p>",
        "id": 237460118,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620203883
    },
    {
        "content": "<p>ha, so we will see proofs by <code>example : true := by</code>?</p>",
        "id": 237460237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620203944
    },
    {
        "content": "<p>Only if we allow that syntactically :)</p>",
        "id": 237460317,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620203983
    },
    {
        "content": "<p>As I said, it's probably a terrible idea</p>",
        "id": 237460331,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620203993
    },
    {
        "content": "<p>I could get behind writing <code>{}</code> instead of <code>{refl}</code>.</p>",
        "id": 237460411,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620204025
    },
    {
        "content": "<p>Having things that run on close isn't that unusual, it's supported in lean 3 as well, although it is only actually used in custom tactic blocks like <code>smt_tactic</code></p>",
        "id": 237460451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620204040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp/near/237460237\">said</a>:</p>\n<blockquote>\n<p>ha, so we will see proofs by <code>example : true := by</code>?</p>\n</blockquote>\n<p>How is this worse than <code>example : false -&gt; true.</code>?</p>",
        "id": 237460498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620204068
    },
    {
        "content": "<p>Did I mean to suggest I disliked the pattern? It's fine, just a bit odd</p>",
        "id": 237460530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620204086
    },
    {
        "content": "<p>in fact, since <code>example : false -&gt; true.</code> doesn't work anymore in lean 4 I will have to find a new favorite and that one looks like a candidate</p>",
        "id": 237460670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620204161
    },
    {
        "content": "<p>Having tactics run on the end of a proof is standard in Isabelle, and very convenient to close all remaining trivial goals.</p>",
        "id": 237466726,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620207295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> If you don't specify an explicit one after <code>qed</code>, it uses <code>assumption</code> only, no?</p>",
        "id": 237469010,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620208578
    },
    {
        "content": "<p>Yes, I think so -- but <code>qed (auto)</code> is a very standard idiom.</p>",
        "id": 237471144,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620209732
    },
    {
        "content": "<p>Since there is no token at the end of a proof block anymore anyway, we can add <code>qed</code> as a macro for <code>allGoals</code> in Lean 4 <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 237471387,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620209892
    },
    {
        "content": "<p>Just to throw in my own two cents: I like the idea of <code>rwr</code>. I do have qualms with auto-closing \"trivial' goals at the end of a proof without some kind of marker  (such as a <code>qed</code>) that you are doing so though. My design philosophy is to minimize implicit magic as much as possible.</p>",
        "id": 237499198,
        "sender_full_name": "Mac",
        "timestamp": 1620223166
    },
    {
        "content": "<p>IIRC, SSReflect has a simple <code>done</code> tactic that you can invoke in places by writing <code>//</code>. So for example you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rewrite</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"bp\">//</span>\n</code></pre></div>\n<p>and the <code>done</code> would be invoked at the <code>//</code>. Again IIRC, it was a <code>try</code> tactic, so there was no harm if it failed. <code>rewrite</code> would sometimes open up new subgoals (with conditional rewrites), and this was a way you could close them off and then keep going after the <code>//</code>. </p>\n<p>(Georges Gonthier was a master of optimizing the number of things that can be accomplished with a single 80-character line of SSReflect code.)</p>",
        "id": 237535958,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1620236326
    },
    {
        "content": "<p>Docs:<br>\n<a href=\"https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html#an-extended-rewrite-tactic\">https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html#an-extended-rewrite-tactic</a><br>\n<a href=\"https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html#simplification-items\">https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html#simplification-items</a></p>",
        "id": 237536286,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1620236458
    }
]