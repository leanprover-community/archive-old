[
    {
        "content": "<p>So I was modelling pointers and discovered a weird oddity with unsafe constants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Addr</span> <span class=\"o\">:=</span> <span class=\"n\">USize</span>\n<span class=\"kd\">def</span> <span class=\"n\">Addr.zero</span> <span class=\"o\">:</span> <span class=\"n\">Addr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Addr</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Addr.zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">Ptr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Addr</span>\n\n<span class=\"kd\">@[extern c inline \"0\"]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">axiom</span> <span class=\"n\">Ptr.null</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ptr</span> <span class=\"n\">α</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Ptr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Ptr.null</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">constant</span> <span class=\"n\">Ptr.ofAddr</span> <span class=\"o\">(</span><span class=\"n\">addr</span> <span class=\"o\">:</span> <span class=\"n\">Addr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ptr</span> <span class=\"n\">α</span>\n<span class=\"c1\">-- error: (kernel) invalid declaration, it uses unsafe declaration 'instInhabitedPtr'</span>\n</code></pre></div>\n<p><strong>Why can't unsafe constants use unsafe <code>Inhabited</code> instances to believe the resulting type is inhabited?</strong></p>",
        "id": 244961996,
        "sender_full_name": "Mac",
        "timestamp": 1625508368
    },
    {
        "content": "<p>There are other issues with <code>unsafe</code> instances. For example, it doesn't seem possible to use them in <code>initialize</code> blocks unless you modify the <code>initialize</code> macro to emit an <code>unsafe def</code>.</p>",
        "id": 244962150,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625508511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Unsafe.20inhabited.20constants/near/244962150\">said</a>:</p>\n<blockquote>\n<p>For example, it doesn't seem possible to use them in <code>initialize</code> blocks unless you modify the <code>initialize</code> macro to emit an <code>unsafe def</code>.</p>\n</blockquote>\n<p>That makes more sense. A normal <code>def</code> (which <code>initialize</code> produces) can't use unsafe definitions/instances/constants. Only <code>unsafe</code> ones can. Though, admittedly, it would be desirable for <code>initialize</code> blocks to support <code>declModifiers</code> themselves.</p>",
        "id": 244962379,
        "sender_full_name": "Mac",
        "timestamp": 1625508717
    },
    {
        "content": "<p>My rough guess is there's a missing check for unsafety or something like it in <a href=\"https://github.com/leanprover/lean4/blob/d0996fb9450dc37230adea9d10ecfdf10330ef67/src/kernel/environment.cpp#L188\"><code>add_opaque</code></a> but I wouldn't wanna touch the kernel to add it :) You can also do <code>unsafe def Ptr.ofAddr (addr : Addr) : Ptr a := arbitrary</code> and maybe even figure out how to put <code>opaque</code> reducibility on that.</p>",
        "id": 244965095,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625511154
    }
]