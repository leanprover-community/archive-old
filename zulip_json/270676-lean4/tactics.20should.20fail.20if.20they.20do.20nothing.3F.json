[
    {
        "content": "<p>I know this has been discussed before, but I'm not sure that a decision was reached. In Lean 3 we had the convention that tactics should fail rather than succeed having achieved nothing. In particular both <code>ext</code> and <code>simp</code> had this behaviour, and in both cases they have changed in Lean 4.</p>",
        "id": 311838380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669214069
    },
    {
        "content": "<p>I would love to return to the convention that tactics should fail. I think it's easier for humans, and easier for writing more complicated tactics that use these as building blocks.</p>",
        "id": 311838451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669214097
    },
    {
        "content": "<p>The fix for <code>ext</code> would be very easy: <a href=\"https://github.com/leanprover/std4/pull/33\">https://github.com/leanprover/std4/pull/33</a>.</p>",
        "id": 311839435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669214439
    },
    {
        "content": "<p>Yes please! Any search tactic generally wants to treat \"no-op\" as \"failure\", and it's much easier to turn a failure into a no-op than to check whether a success was in fact a no-op.</p>",
        "id": 311857034,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1669219734
    },
    {
        "content": "<blockquote>\n<p>and it's much easier to turn a failure into a no-op</p>\n</blockquote>\n<p>What if you want to distinguish \"this tactic found nothing to match against\" vs \"this tactic crashed while processing the thing it matched against\". I think failure on no-op is good for interactive tactics, but probably a bad idea for non-interactive tactics</p>",
        "id": 311859024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669220346
    },
    {
        "content": "<p>tactics shouldn't be crashing?</p>",
        "id": 311864139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669221901
    },
    {
        "content": "<p>Noninteractive tactics could return a result <code>Option whatever</code>--but I assume the original message was talking about interactive tactics.</p>",
        "id": 311864354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669221962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/tactics.20should.20fail.20if.20they.20do.20nothing.3F/near/311838451\">said</a>:</p>\n<blockquote>\n<p>I would love to return to the convention that tactics should fail. I think it's easier for humans, and easier for writing more complicated tactics that use these as building blocks.</p>\n</blockquote>\n<p>Continuing Reid's line of thought: Would it be fair to say that complicated tactics should generally use non-interactive tactics as building blocks?</p>",
        "id": 311865258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669222260
    },
    {
        "content": "<blockquote>\n<p>tactics shouldn't be crashing?</p>\n</blockquote>\n<p>True, programmers never make mistakes <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 311867439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669222933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/tactics.20should.20fail.20if.20they.20do.20nothing.3F/near/311865258\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/tactics.20should.20fail.20if.20they.20do.20nothing.3F/near/311838451\">said</a>:</p>\n<blockquote>\n<p>I would love to return to the convention that tactics should fail. I think it's easier for humans, and easier for writing more complicated tactics that use these as building blocks.</p>\n</blockquote>\n<p>Continuing Reid's line of thought: Would it be fair to say that complicated tactics should generally use non-interactive tactics as building blocks?</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> on this, and ideally the non-interactive variants return information about the status rather than just <code>Unit</code>. It is more readable to do something with a <code>TacticM Bool</code> or <code>TacticM (Option _)</code> than to call a <code>TacticM Unit</code> and use <code>try-catch</code> for control flow.</p>",
        "id": 311877396,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669226441
    },
    {
        "content": "<p>How about throwing a <del>error</del> warning on a no-op for an interactive tactic? I want _something_ to tell me about a no-op but can understand the argument that a no-op is not failure.</p>",
        "id": 311879136,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1669227042
    },
    {
        "content": "<p>I think we're in furious agreement that interactive tactics should fail rather than no-op, and non-interactive tactic may fail if they find nothing to do, but it's generally more useful to return something.</p>",
        "id": 311879592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669227233
    },
    {
        "content": "<p>as a workaround, while not as good as having more useful return types, one thing you can do is something like a <code>progress</code> tactic that fails if no progress is made. We used a very crude version with <span class=\"user-mention\" data-user-id=\"236121\">@Fehr Mathieu</span> when he was having trouble with <code>repeat</code> on tactics that ended being no-ops taking very long</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span>  <span class=\"s2\">\"progress \"</span> <span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n     <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.getLCtx</span>\n     <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n     <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n       <span class=\"k\">let</span> <span class=\"n\">lctx'</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.getLCtx</span>\n       <span class=\"k\">let</span> <span class=\"n\">goal'</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n       <span class=\"k\">let</span> <span class=\"n\">lctxDeclExprs</span> <span class=\"o\">:=</span> <span class=\"n\">lctx.decls.toArray.map</span> <span class=\"o\">(</span><span class=\"n\">Option.map</span> <span class=\"n\">Lean.LocalDecl.type</span><span class=\"o\">)</span>\n       <span class=\"k\">let</span> <span class=\"n\">lctx'DeclExprs</span> <span class=\"o\">:=</span> <span class=\"n\">lctx'.decls.toArray.map</span> <span class=\"o\">(</span><span class=\"n\">Option.map</span> <span class=\"n\">Lean.LocalDecl.type</span><span class=\"o\">)</span>\n       <span class=\"k\">if</span> <span class=\"n\">goal</span> <span class=\"bp\">==</span> <span class=\"n\">goal'</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">lctxDeclExprs</span> <span class=\"bp\">==</span> <span class=\"n\">lctx'DeclExprs</span> <span class=\"k\">then</span>\n         <span class=\"n\">throwError</span> <span class=\"s2\">\"no progress made{(← getMainGoal).name}\"</span>\n</code></pre></div>\n<p>I'm sure this is not ideal, but it did seem to work for simple cases</p>",
        "id": 311906684,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669237148
    },
    {
        "content": "<p>That certainly takes the burden off tactics to try and track whether they had any effect, but presumably is less efficient as a result</p>",
        "id": 311915040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669241659
    },
    {
        "content": "<p>But I guess <code>progress</code> would also fail on <code>rw [foo, &lt;-foo]</code>, which is probably a more useful behavior anyway</p>",
        "id": 311915079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669241695
    }
]