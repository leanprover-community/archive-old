[
    {
        "content": "<p>This gives the error that <code>this</code> doesn't take an argument <code>a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>while giving the have statement a name makes it work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It this intended?</p>",
        "id": 314209843,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670323542
    },
    {
        "content": "<p>I'm even surprised the first statement compiles -- I thought that we were hygenic now and if you don't name a variable then you're not allowed to talk about it at all.</p>",
        "id": 314227326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670330144
    },
    {
        "content": "<p>I think the \"default to <code>this</code>\" behaviour is intentional</p>",
        "id": 314228170,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670330409
    },
    {
        "content": "<p>Yes, I think it's specific to <code>have</code></p>",
        "id": 314228539,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670330537
    },
    {
        "content": "<p>I thought, <code>have :</code> would just short form expanding to <code>have this :</code>, but from the above inconsistency it doesn't seem like it.</p>",
        "id": 314228766,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670330610
    },
    {
        "content": "<p>Probably the app elaborator isn't expecting a macro unfolding to an identifier at that place</p>",
        "id": 314231174,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670331435
    },
    {
        "content": "<p>I'm getting pretty close to writing a PR to tear out <code>termThis</code> completely and make it a regular identifier. It causes so. many. problems. in every tactic</p>",
        "id": 314238292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670333685
    },
    {
        "content": "<p>It is incredibly easy to find bugs in core lean related to the use of <code>this</code> as an identifier. There are so many and in such obvious places that reporting them seems insufficient as a solution</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- expected '_' or identifier</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">this</span>\n<span class=\"c1\">-- invalid pattern, constructor or constant marked with '[match_pattern]' expected</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- unexpected type ascription</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- invalid pattern, constructor or constant marked with '[match_pattern]' expected</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"c1\">-- patterns are not allowed in 'let rec' expressions</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">this</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"c1\">-- expected '=&gt;'</span>\n</code></pre></div>",
        "id": 314242479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670335084
    }
]