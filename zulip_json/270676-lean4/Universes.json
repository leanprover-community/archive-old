[
    {
        "content": "<p>Can I  use a type with two different universes in the same declaration?<br>\ne.g. if I have <code>def foo {m : Type u -&gt; Type v}</code> can I use <code>m</code> with two different universes in the same formula?</p>",
        "id": 224370058,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611858138
    },
    {
        "content": "<p>If they're different <code>m</code>'s, then yes. You  can even be explicit with universes if needed.  Here's setting <code>u=0</code> and <code>v=1</code>: <code>foo.{0, 1}</code>.  This notation works with universe variables, too.</p>",
        "id": 224371502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611858748
    },
    {
        "content": "<p><em>In the definition of <code>foo</code></em> you cannot use <code>m</code> with a different universe level: you only have one <code>m</code> that has type <code>Type u -&gt; Type v</code>, and <code>u</code> and <code>v</code> are fixed in the definition of <code>foo</code>. <br>\n<em>After you have declared <code>foo</code></em> you can use it with <code>u</code> and <code>v</code> instantiated however you want.</p>",
        "id": 224372213,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611859040
    },
    {
        "content": "<p>Is there any way to make a tuple of items in two different universes? e.g. could I have <code>def foo {m : Type u -&gt; Type v} {a : Type u} ... : Option (m a, a)</code> because I'm trying to do something like this and getting some type errors</p>",
        "id": 224372930,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611859349
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224373309,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611859548
    },
    {
        "content": "<p>I think you want <code>Option (m a × a)</code></p>",
        "id": 224373324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611859556
    },
    {
        "content": "<p>and this should work even if <code>m a</code> and <code>a</code> are in different universes</p>",
        "id": 224373405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611859574
    },
    {
        "content": "<p>If you have a pair, you can just take a product.<br>\nIf you need a sequence with <code>n</code> elements, this gets inconvenient, but it is possible with <code>Ulift</code>.</p>",
        "id": 224373499,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611859615
    },
    {
        "content": "<p>I want my definition of category to depend on a choice of universe or something like that. Here's what I've got going right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"(\"</span>  <span class=\"n\">x</span>  <span class=\"s2\">\":\"</span>  <span class=\"n\">X</span>  <span class=\"s2\">\")\"</span> <span class=\"s2\">\"↦\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Σ\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\":\"</span> <span class=\"n\">A</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\":\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">F</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊛\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\"==\"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">):</span><span class=\"bp\">⊛</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Cat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Obj</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Hom</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):(</span><span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)):</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Id</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)):</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">Comp</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">):(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)):</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">):(</span><span class=\"n\">Comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"o\">):</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">):(</span><span class=\"n\">Comp</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">f</span><span class=\"o\">):</span>\n<span class=\"bp\">Σ</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">):</span><span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">):(</span><span class=\"n\">Comp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">Comp</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">):</span>\n<span class=\"bp\">⊛</span>\n</code></pre></div>\n<p>As you can see, Cat is a 7-tuple. I hope my notation isn't too purist.</p>\n<p>But I would like to switch Type 1 for something more general. How would I make it depend on a universe?</p>",
        "id": 319260342,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672772291
    },
    {
        "content": "<p>What happens if you replace the <code>1</code>s with <code>_</code>? Or with universe parameters?</p>",
        "id": 319262317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672772968
    },
    {
        "content": "<p>Also, what's the reason for introducing these notations?</p>",
        "id": 319262371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672772994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Universes/near/319262317\">said</a>:</p>\n<blockquote>\n<p>What happens if you replace the <code>1</code>s with <code>_</code>? Or with universe parameters?</p>\n</blockquote>\n<p>I don't know about this yet. How does that work? And what is the most general option?</p>",
        "id": 319262384,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672773001
    },
    {
        "content": "<p>An underscore will be an unspecified universe parameter, making your definition universe polymorphic.</p>",
        "id": 319262502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672773035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Universes/near/319262502\">said</a>:</p>\n<blockquote>\n<p>An underscore will be an unspecified universe parameter, making your definition universe polymorphic.</p>\n</blockquote>\n<p>ok this is good.</p>",
        "id": 319262633,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672773095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559197\">Kind Bubble</span> <a href=\"#narrow/stream/270676-lean4/topic/Universes/near/319262633\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Universes/near/319262502\">said</a>:</p>\n<blockquote>\n<p>An underscore will be an unspecified universe parameter, making your definition universe polymorphic.</p>\n</blockquote>\n<p>ok this is good.</p>\n</blockquote>\n<p>And this will work for any universe now? Is the underscore the most general option?</p>",
        "id": 319262853,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672773160
    },
    {
        "content": "<p>An underscore will be (essentially) equivalent to introducing arbitrary universe variables and replacing the 1s with those variables.</p>",
        "id": 319263141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672773252
    },
    {
        "content": "<p>If you want to specify the universe parameters in a certain order, which can be useful sometimes (particularly in category theory!!) then you should introduce and use those variables explicitly</p>",
        "id": 319263286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1672773313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Universes/near/319263141\">said</a>:</p>\n<blockquote>\n<p>An underscore will be (essentially) equivalent to introducing arbitrary universe variables and replacing the 1s with those variables.</p>\n</blockquote>\n<p>Ok thanks for your help. This is good.</p>",
        "id": 319263974,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1672773580
    },
    {
        "content": "<p>You can also explicitly introduce universes with the <code>def Cat.{u,v} := ...</code> syntax, using <code>u</code> and <code>v</code> as levels like <code>Type u</code> and <code>Type v</code>. The main advantage of doing so is that the _ might be filled in with concrete universe levels (if something constrains them to a concrete level), whereas the explicit universes will raise a type error if accidentally constrained somehow.</p>",
        "id": 319264798,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672773899
    }
]