[
    {
        "content": "<p>I'm hitting a <code>maximum recursion depth has been reached</code> error in a scenario where I don't understand it.<br>\nThe following example is reduced, so it might look a bit strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval₁</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalₙ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t.eval₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalₙ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ite</span> <span class=\"n\">cond</span> <span class=\"n\">pos</span> <span class=\"n\">neg</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">evalₙ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm aware that <code>evalₙ</code> doesn't actually terminate, and this might be related to the issue.<br>\nThe error arises on the last <code>simp</code> in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">same_evaluation</span> <span class=\"o\">:</span> <span class=\"n\">evalₙ</span> <span class=\"bp\">=</span> <span class=\"n\">evalₙ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span>\n  <span class=\"n\">case</span> <span class=\"n\">bool</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evalₙ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I have no idea how <code>simp</code> works, but as far as I can tell, unfolding/reducing the definitions of <code>evalₙ</code> and <code>eval₁</code> should simply yield <code>some (.bool b)</code> in this case. So I don't understand where the recursion is coming from.</p>\n<p>Interestingly, rewriting <code>evalₙ</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evalₙ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>fixes the problem.</p>",
        "id": 288413778,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1656943662
    }
]