[
    {
        "content": "<p>I have this theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">]}</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>and when i put my cursor on line <code>repeat {rw [mul_succ]}</code>, i get the error<br>\n<a href=\"/user_uploads/3121/BTkLYPnrzbw56XT-p1VCACd4/image.png\">image.png</a><br>\nbut when I place it on the next line, I get the message <code>goals accomplished</code><br>\n<a href=\"/user_uploads/3121/8Y1KkBiMdrtd0LXIFynpih7H/image.png\">image.png</a> <br>\nis this normal?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BTkLYPnrzbw56XT-p1VCACd4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BTkLYPnrzbw56XT-p1VCACd4/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8Y1KkBiMdrtd0LXIFynpih7H/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/8Y1KkBiMdrtd0LXIFynpih7H/image.png\"></a></div>",
        "id": 279824306,
        "sender_full_name": "Joseph O",
        "timestamp": 1650634408
    },
    {
        "content": "<p>what does it mean?</p>",
        "id": 279824318,
        "sender_full_name": "Joseph O",
        "timestamp": 1650634413
    },
    {
        "content": "<p>I think that in contrast to Lean 3, in Lean 4 one writes tactic combinators with parentheses:<code>repeat (rw [mul_succ])</code></p>",
        "id": 279825447,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1650634984
    },
    {
        "content": "<p>The brackets can be used if you want to be explicit that a goal can be closed with the tactics within them</p>",
        "id": 279825662,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650635094
    },
    {
        "content": "<p>Though in this case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">])</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    case succ</span>\n<span class=\"cm\">    t a n✝ : Nat</span>\n<span class=\"cm\">    n_ih✝ : t * (a + n✝) = t * a + t * n✝</span>\n<span class=\"cm\">    ⊢ t * (a + n✝) + t = t * a + t * succ n✝</span>\n<span class=\"cm\">    case succ</span>\n<span class=\"cm\">    t a n✝ : Nat</span>\n<span class=\"cm\">    n_ih✝ : t * (a + n✝) = t * a + t * n✝</span>\n<span class=\"cm\">    ⊢ t * (a + n✝) + t = t * a + (t * n✝ + t)</span>\n<span class=\"cm\">    case succ</span>\n<span class=\"cm\">    t a n✝ : Nat</span>\n<span class=\"cm\">    n_ih✝ : t * (a + n✝) = t * a + t * n✝</span>\n<span class=\"cm\">    ⊢ t * (a + n✝) + t = t * a + (t * n✝ + t)</span>\n<span class=\"cm\">    -/</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>we get 3 goals after the <code>repeat</code> which still doesn't seem right.</p>",
        "id": 279826079,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1650635337
    },
    {
        "content": "<p>Hmm, that doesnt seem right either. Im trying to translate </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">},</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279826352,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">])</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279826712,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1650635645
    },
    {
        "content": "<p>Oh i I wasnt aware of the new syntax.</p>",
        "id": 279826757,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635679
    },
    {
        "content": "<p>You opened <code>Nat</code>, so why do you have to do <code>Nat.add_assoc</code>?</p>",
        "id": 279826854,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635745
    },
    {
        "content": "<p>I got <code>uknown identifier</code> without the <code>Nat.</code>. I don't really understand why</p>",
        "id": 279827047,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1650635847
    },
    {
        "content": "<p>This is also valid syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">])</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279827182,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650635902
    },
    {
        "content": "<p>wow thank you</p>",
        "id": 279827297,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635969
    },
    {
        "content": "<p>Which is more used?</p>",
        "id": 279827315,
        "sender_full_name": "Joseph O",
        "timestamp": 1650635981
    },
    {
        "content": "<p>Maybe it's too early to talk about \"more used\". I, personally, use the one I posted more often. But it's a personal preference</p>",
        "id": 279827525,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650636050
    },
    {
        "content": "<p>By the way, <code>simp [mul_succ]</code> is <em>sort of</em> like <code>repeat (rw [mul_succ])</code>. You can collapse the second case of the induction into a single <code>simp</code> too.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I did <code>simp only</code> to emphasize that <code>simp</code> is using only these lemmas.</p>",
        "id": 279828565,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650636504
    },
    {
        "content": "<p>And the fact that <code>add_assoc</code> couldn't be found after <code>open Nat</code> is likely a bug. Should we ping a core dev?</p>",
        "id": 279829870,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650637174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/is.20this.20normal.3F/near/279827047\">said</a>:</p>\n<blockquote>\n<p>I got <code>uknown identifier</code> without the <code>Nat.</code>. I don't really understand why</p>\n</blockquote>\n<p>It's because <code>Nat.add_assoc</code> is a <code>protected</code> theorem.</p>",
        "id": 279829888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650637185
    },
    {
        "content": "<p>I think it's because mathlib4 defines a general <code>add_assoc</code> in the top-level namespace. (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_assoc#doc\">docs4#add_assoc</a>)</p>",
        "id": 279829998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650637223
    },
    {
        "content": "<p>I didn't know <code>protected</code> prevented declarations from being accessed directly after <code>open</code>. Thanks Kyle!</p>",
        "id": 279830528,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650637495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/is.20this.20normal.3F/near/279828565\">said</a>:</p>\n<blockquote>\n<p>By the way, <code>simp [mul_succ]</code> is <em>sort of</em> like <code>repeat (rw [mul_succ])</code>. You can collapse the second case of the induction into a single <code>simp</code> too.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I did <code>simp only</code> to emphasize that <code>simp</code> is using only these lemmas.</p>\n</blockquote>\n<p>did you get rid of the arrow before <code>add_assoc</code> because <code>simp</code> does that for you?<br>\ncould you do something similar to this in lean 3?</p>",
        "id": 279831825,
        "sender_full_name": "Joseph O",
        "timestamp": 1650638120
    },
    {
        "content": "<p>Oh, no, it's just that you're able to prove it by doing reassociation in either direction (this works too <code>simp only [add_succ, mul_succ, hd, ← Nat.add_assoc]</code>). I think I just forgot to copy the arrow.</p>",
        "id": 279832028,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650638222
    },
    {
        "content": "<p>does lean 3 have <code>simp only</code>?</p>",
        "id": 279835695,
        "sender_full_name": "Joseph O",
        "timestamp": 1650639797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/is.20this.20normal.3F/near/279826854\">said</a>:</p>\n<blockquote>\n<p>You opened <code>Nat</code>, so why do you have to do <code>Nat.add_assoc</code>?</p>\n</blockquote>\n<p><code>Nat.add_assoc</code> is <code>protected</code><br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html?highlight=protected#more-on-namespaces\">https://leanprover.github.io/theorem_proving_in_lean4/interacting_with_lean.html?highlight=protected#more-on-namespaces</a></p>",
        "id": 279874936,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650659429
    },
    {
        "content": "<p>why is it protected though?</p>",
        "id": 280109546,
        "sender_full_name": "Joseph O",
        "timestamp": 1650911121
    },
    {
        "content": "<p>Because there are lots of other lemmas we would like to call <code>add_assoc</code> (even one in the root namespace I think). If it weren't protected, then whenever you opened <code>Nat</code>, then all of a sudden <code>add_assoc</code> would be ambiguous, and you would have to use qualified names anyway <code>Nat.add_assoc</code> and (worse) for the root namespace one, <code>_root_.add_assoc</code>.</p>",
        "id": 280110562,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650911643
    }
]