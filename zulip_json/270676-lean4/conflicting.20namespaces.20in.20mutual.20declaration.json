[
    {
        "content": "<p>Is there some fundamental reason why we can't mix namespaces in mutually-recursive functions?</p>\n<p>As an example (MWE), if I have mutually recursive types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n <span class=\"bp\">|</span> <span class=\"n\">somefoo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n <span class=\"bp\">|</span> <span class=\"n\">somebar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span>\n <span class=\"bp\">|</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and want to define some functions on them, say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo.ToString</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo.somefoo</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Foo.bar</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bar.toString</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar.ToString</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bar.somebar</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bar\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bar.foobar</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Foo.toString</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">Bar.toString</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then Lean complains: <code>conflicting namespaces in mutual declaration, using namespace 'Bar', but used 'Foo' in previous declaration</code></p>\n<p>I know that I could solve that easily for this example (and my real-use case), by splitting it up into two \"phases\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">fooToString</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Foo.somefoo</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"foo\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Foo.bar</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">barToString</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">barToString</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bar.somebar</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bar\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bar.foobar</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">fooToString</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">barToString</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.toString</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">fooToString</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bar.toString</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">barToString</span>\n</code></pre></div>\n<p>My question is wether there's any reason (e.g. type-theoretical) why this is difficult for the general case, i.e. why Lean won't support it, or is it \"just\" busywork to define e.g. a hygenic expansion that does something like this?</p>",
        "id": 288853341,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1657221614
    },
    {
        "content": "<p>In Lean, <code>def Foo.bla ...</code> is expanded to <code>namespace Foo def bla ...  end Foo</code>. When we defined <code>mutual</code> commands, we wanted to keep the same semantics. This is where the restriction came from. <code>mutual</code> is an atomic command in Lean. To correctly support your example, we would have to simulate the <code>namespace</code> command in the <code>mutual</code>. This is doable, and it will happen in the future. <br>\nIn the meantime, one can use the new <code>_root_</code> modifier as a workaround. It is not perfect since the namespace <code>Bar</code> will not be open at <code>Bar.Foo</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n <span class=\"bp\">|</span> <span class=\"n\">somefoo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span>\n <span class=\"bp\">|</span> <span class=\"n\">somebar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span>\n <span class=\"bp\">|</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Foo.toString</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Foo.somefoo</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"foo\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Foo.bar</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b.toString</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">_root_.Bar.toString</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bar.somebar</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bar\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bar.foobar</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.toString</span> <span class=\"bp\">++</span> <span class=\"n\">b.toString</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288877156,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657234966
    },
    {
        "content": "<p>BTW, the example above requires the following fix pushed today <a href=\"https://github.com/leanprover/lean4/commit/fce7697151475aef7d46ebba052952e2148e77a4\">https://github.com/leanprover/lean4/commit/fce7697151475aef7d46ebba052952e2148e77a4</a></p>",
        "id": 288877365,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1657235109
    }
]