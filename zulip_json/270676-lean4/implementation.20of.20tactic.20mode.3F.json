[
    {
        "content": "<p>My motivation is to try to call tactics from within code. Is it correct that the block starting with a <code>by</code> is converted by a macro from <code>TacticM Unit</code> to the expected type? If so where is the macro?</p>\n<p>Thanks.</p>",
        "id": 251963704,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630720664
    },
    {
        "content": "<p>We have different syntax categories in Lean. The main ones are: <code>command</code>, <code>term</code>, and <code>tactic</code>.<br>\nThe <code>term</code> category contains the parser <code>\"by \" tacticSeq : term</code> where <code>tacticSeq</code> is roughly a sequence of tactics. <br>\nThe parser produces objects of type <code>Syntax</code>.<br>\nThe three main syntactic categories are processed using the following extensible functions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span>\n<span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>All of them expand macros which are functions from <code>Syntax</code> to <code>MacroM Syntax</code>.<br>\nThe <code>evalTactic</code> is essentially an interpreter. <br>\nWe say it is extensible because users can add new functions for handling the new syntax they have defined. Mathlib4 contains many extensions already<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean</a><br>\nThe <code>elab</code> command used in this file is a macro that allows users to define new syntax <strong>and</strong> the \"eval\" function for the syntax in a single command.</p>",
        "id": 252033814,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1630798077
    },
    {
        "content": "<p>Thank you very much.</p>",
        "id": 252039898,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1630805382
    }
]