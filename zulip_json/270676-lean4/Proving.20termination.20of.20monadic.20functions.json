[
    {
        "content": "<p>Given a monadic function where the thing that is reducing size such as a <code>Parsec</code> one, how can I tell the <code>termination_by</code> that I am actually interested in proving that the size of the monadic state is decreasing, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parsec</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNum</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">digits</span> <span class=\"o\">:=</span> <span class=\"n\">String.mk</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">many1</span> <span class=\"n\">digit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">(</span><span class=\"n\">String.toInt</span><span class=\"bp\">!</span> <span class=\"n\">digits</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isAtEof</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">it</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"n\">it</span> <span class=\"n\">it.atEnd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseAdd</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">isAtEof</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">ws</span> <span class=\"c1\">-- whitespace</span>\n    <span class=\"n\">skipChar</span> <span class=\"sc\">'+'</span>\n    <span class=\"n\">ws</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">parseNum</span>\n    <span class=\"k\">let</span> <span class=\"n\">newLhs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n    <span class=\"n\">parseAdd</span> <span class=\"n\">newLhs</span>\n<span class=\"n\">termination_by</span> <span class=\"bp\">&lt;</span><span class=\"n\">what</span> <span class=\"k\">do</span> <span class=\"n\">I</span> <span class=\"k\">do</span> <span class=\"n\">here</span><span class=\"bp\">&gt;</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">parser</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initialLhs</span> <span class=\"bp\">←</span> <span class=\"n\">parseNum</span>\n  <span class=\"n\">parseAdd</span> <span class=\"n\">initialLhs</span>\n</code></pre></div>\n<p>I cannot <code>termination_by parsedAdd lhs it =&gt; </code> because I can only used the named arguments here it seems so how can I access it?</p>",
        "id": 299168675,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663337479
    },
    {
        "content": "<p>I'm not sure I understand completely,  what should <code>it</code> be ?</p>\n<p>Can you add a fuel parameter to <code>parseAdd</code> based on the size of the state?</p>",
        "id": 299206469,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663348478
    },
    {
        "content": "<p><code>it</code> is the <code>String.Iterator</code> that <code>Parsec</code> is keeping as its internal state, as you can see in the <code>isAtEof?</code> implementation it is the implicit parameter passed in by the <code>Parsec</code> monad so I would like to be able to refer to it from within <code>termination_by</code> as well.</p>\n<p>I dont exactly see how the fuel parameter stuff would work, could you show an example? The code above is fully self contained.</p>",
        "id": 299216692,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663352127
    },
    {
        "content": "<p>You could always unfold <code>Parsec</code> in the type signature and explicitly introduce <code>it</code>. Then you could try to abstract the termination argument into a combinator since you'll be using it a lot.</p>",
        "id": 299218421,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663352730
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">parseAdd'</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">isAtEof</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">ws</span> <span class=\"c1\">-- whitespace</span>\n    <span class=\"n\">skipChar</span> <span class=\"sc\">'+'</span>\n    <span class=\"n\">ws</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">parseNum</span>\n    <span class=\"k\">let</span> <span class=\"n\">newLhs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span>\n    <span class=\"k\">let</span> <span class=\"n\">newFuel</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">newFuel</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fuel</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">parseAdd'</span> <span class=\"n\">newLhs</span> <span class=\"n\">newFuel</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">fuel</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fuel</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseAdd</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">it</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseAdd'</span> <span class=\"n\">lhs</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> enough fuel -/</span><span class=\"o\">)</span> <span class=\"n\">it</span>\n</code></pre></div>",
        "id": 299224511,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663355035
    },
    {
        "content": "<p>(You'll probably need to require something about <code>fuel</code> to prove you can have a <code>newFuel</code> always, but hopefully your size measure is simple?)</p>",
        "id": 299224796,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663355130
    }
]