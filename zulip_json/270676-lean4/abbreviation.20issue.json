[
    {
        "content": "<p>I am very new to lean, not sure why this doesn't type check, the last line has the issue. Not sure if the <code>abbrev</code> syntax means what I assumed also.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DepFn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ap</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">DepFn</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f.β</span> <span class=\"o\">:=</span> <span class=\"n\">f.apply</span> <span class=\"c1\">-- type checks</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">DepFnL</span> <span class=\"o\">(</span><span class=\"n\">αα</span>  <span class=\"n\">ββ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">DepFn</span> <span class=\"n\">αα</span> <span class=\"n\">where</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">ββ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lifted</span> <span class=\"o\">:</span> <span class=\"n\">DepFnL</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">⟩</span> <span class=\"c1\">-- type checks</span>\n<span class=\"c1\">-- def lifted : DepFnL String String := (⟨String, id⟩ : DepFn String) -- also type checks</span>\n\n<span class=\"c1\">-- type mismatch f.apply has type α → f.β but is expected to have type α → β</span>\n<span class=\"kd\">def</span> <span class=\"n\">apL</span> <span class=\"o\">:</span> <span class=\"n\">DepFnL</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.apply</span> <span class=\"c1\">-- ****issue here****</span>\n</code></pre></div>",
        "id": 224083928,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1611686583
    },
    {
        "content": "<p>I'm not sure what you wanted <code>abbrev DepFnL (αα  ββ : Type) := DepFn αα where β := ββ</code> to do, but it doesn't do it. The <code>where</code> clause does nothing because <code>β</code> isn't used, so it's the same as <code>abbrev DepFnL (αα  ββ : Type) := DepFn αα</code>.</p>",
        "id": 224084762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611686933
    },
    {
        "content": "<p>I guess you wanted to say something like <code>DepFnL αα ββ</code> is the the type of <code>DepFn αα</code>s whose <code>β</code> field is (by definition) <code>ββ</code>. But this feature doesn't exist in Lean.</p>",
        "id": 224085004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611687019
    },
    {
        "content": "<p>Yes, exactly, that's what I wanted to do. I expected some kind of type refinement or restriction, but it doesn't seem to be designed this way. Thanks a lot.</p>",
        "id": 224085284,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1611687126
    },
    {
        "content": "<p>Wondering why the <code>where</code> expression is allowed then?</p>",
        "id": 224085436,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1611687189
    },
    {
        "content": "<p><code>where</code> is another way to write <code>let</code>, I think (from Haskell)</p>",
        "id": 224085528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611687235
    },
    {
        "content": "<p>Understood, I wonder what can I do with it in the context of an <code>abbrev</code></p>",
        "id": 224085681,
        "sender_full_name": "Hossam Karim",
        "timestamp": 1611687298
    },
    {
        "content": "<p>Another possible source of confusion is that there is another form<br>\n<code>def foo where ...</code> (no <code>:=</code>)<br>\nwhich is basically the same as<br>\n<code>def foo := { ... }</code></p>",
        "id": 224086286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611687559
    },
    {
        "content": "<p>one of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">DepFn.mk</span> <span class=\"n\">αα</span> <span class=\"n\">ββ</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DepFn'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>maybe what you want)</p>",
        "id": 224290475,
        "sender_full_name": "Nick Chopper",
        "timestamp": 1611817371
    }
]