[
    {
        "content": "<p>I see that lean 4 has booleans, but I couldn't find the definition of Boolean <code>and</code> and <code>or</code> either in core or std4. They were in core in Lean 3. Did I miss them or shall I define them in mathlib4? (I'm porting a Boolean file)</p>",
        "id": 305004121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666200045
    },
    {
        "content": "<p>It is simply called <code>and</code> and <code>or</code> in the top level, defined in <code>Init/Prelude.lean</code></p>",
        "id": 305004291,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666200109
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Init/Prelude.lean#L958-L972\">https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Init/Prelude.lean#L958-L972</a></p>",
        "id": 305004408,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666200137
    },
    {
        "content": "<p>(I located that source location by visiting <a href=\"https://leanprover-community.github.io/mathlib4_docs/index.html\">https://leanprover-community.github.io/mathlib4_docs/index.html</a> )</p>",
        "id": 305004505,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666200171
    },
    {
        "content": "<p>Thanks both. Oh that link to mathlib4_docs is super-helpful!</p>",
        "id": 305004751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666200249
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=and#doc\">docs4#and</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=or#doc\">docs4#or</a> work as well by the way^^</p>",
        "id": 305004790,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666200266
    },
    {
        "content": "<p>And we also have the \"standard\" programmer notation for these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"n\">b</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 305009365,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666201663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20and.2For.20etc/near/305004790\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=and#doc\">docs4#and</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=or#doc\">docs4#or</a> work as well by the way^^</p>\n</blockquote>\n<p>Should these lead to blank pages?</p>",
        "id": 305013162,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666202794
    },
    {
        "content": "<p>They work for me</p>",
        "id": 305013208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666202812
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 305013232,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666202820
    },
    {
        "content": "<p>Here is the direct link: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#or\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#or</a></p>",
        "id": 305013285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666202835
    },
    {
        "content": "<p>I've been having the blank page issue with docs4 links for a bit and curious if it is just me (Safari, MacOS).</p>",
        "id": 305013461,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666202896
    },
    {
        "content": "<p>Do the Lean3 docs links work for you? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and\">docs#and</a></p>",
        "id": 305013548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666202927
    },
    {
        "content": "<p>Yes</p>",
        "id": 305014001,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666203061
    },
    {
        "content": "<p>Firefox gives me a warning in the console about a missing <code>&lt;!DOCTYPE html&gt;</code> in the docs4 page. I wonder if that's the issue?</p>",
        "id": 305014780,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666203350
    },
    {
        "content": "<p>Firefox renders it fine. It's a Safari issue.</p>",
        "id": 305014934,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666203398
    },
    {
        "content": "<p>yeah what I mean is that Safari might be more strict about requiring <code>&lt;!DOCTYPE html&gt;</code></p>",
        "id": 305014988,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666203420
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> renders ok in Safari.</p>",
        "id": 305016308,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666203879
    },
    {
        "content": "<p>I also accumulate more <code>/</code> after <code>mathlib4_docs/</code> in the url as I click around</p>",
        "id": 305016667,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666204009
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290542810\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/doc-gen4.20feature.20request/near/290542810</a> probably (TL;DR: Safari does not support certain regex features which are used in docgen search)</p>",
        "id": 305018973,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1666204872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20and.2For.20etc/near/305016667\">said</a>:</p>\n<blockquote>\n<p>I also accumulate more <code>/</code> after <code>mathlib4_docs/</code> in the url as I click around</p>\n</blockquote>\n<p>That is a usual thing...I invested a little time into investigating why but i eventually stopped since its a basically irrelevant UX bug and I got other stuff to do and on top of that don't actually know what I'm doing with web development :D if someone wants to PR a fix for that feel free.</p>",
        "id": 305019603,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666205119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Boolean.20and.2For.20etc/near/305013461\">said</a>:</p>\n<blockquote>\n<p>I've been having the blank page issue with docs4 links for a bit and curious if it is just me (Safari, MacOS).</p>\n</blockquote>\n<p>I'm experiencing exactly the same issues as you. And the issues are also present with Safari on iOS.</p>",
        "id": 305089418,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1666248806
    },
    {
        "content": "<p>The issue seems to be that WebKit doesn't support these regexes:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">LEAN_FRIENDLY_AND_SEPARATOR</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sr\">/(?&lt;!«[^»]*)&amp;/</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">LEAN_FRIENDLY_EQUAL_SEPARATOR</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sr\">/(?&lt;!«[^»]*)=/</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">LEAN_FRIENDLY_SLASH_SEPARATOR</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sr\">/(?&lt;!«[^»]*)\\//</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with \"SyntaxError: Invalid regular expression: invalid group specifier name\"</p>",
        "id": 305098922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666253234
    },
    {
        "content": "<p>is there a way to do something which is slightly less featureful on webkit?</p>",
        "id": 305099143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666253323
    },
    {
        "content": "<p>The use there seems to be avoiding <code>&amp;</code> inside of name quotations but let's just say that's an unlikely input to a search (seeing as it's fairly hard to even type <code>«</code>)</p>",
        "id": 305099268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666253376
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">const</span> <span class=\"n\">LEAN_FRIENDLY_AND_SEPARATOR</span> <span class=\"bp\">=</span> <span class=\"n\">try</span> <span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"bp\">?&lt;!«</span><span class=\"o\">[</span><span class=\"bp\">^»</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">&amp;/</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">/&amp;/;</span>\n</code></pre></div>\n<p>except in javascript syntax</p>",
        "id": 305099824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666253597
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/leanprover/doc-gen4/pull/85\">https://github.com/leanprover/doc-gen4/pull/85</a></p>",
        "id": 305102125,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666254526
    },
    {
        "content": "<p>Does it work on Mac now?</p>",
        "id": 305210431,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1666289794
    },
    {
        "content": "<p>Yes. Thanks.</p>",
        "id": 305210547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666289835
    }
]