[
    {
        "content": "<p>Quite often I work with a type that has a number in its type. Some functions introduce simple arithmetic on this number which can lead to horrendous types and I would like to reduce this arithmetic. Example:</p>\n<ol>\n<li>Array type like <code>Fin n -&gt; Float</code> Summing consecutive numbers(average pooling) gives <code>Fin n/2 -&gt; Float</code>. Chaining this leads to <code>Fin n/2/2/2/2 -&gt; Float</code>. I would like to have <code>Fin n/16 -&gt; Float</code>.</li>\n<li>Geometrical object <code>Prism dim</code> represents basic geometrical objects of dimension <code>dim</code>. You can for example multiply <code>P : Prism n</code> with <code>Q : Prism m</code> obtaining <code>Prism n + m</code>. See mwe for further details</li>\n<li>Dimensional quantities, for time <code>t : ℝ[s]</code> (real number with seconds as units)<code> and velocity </code>v : ℝ[m*s⁻¹]<code> the expression </code>v * t<code> or </code>t<em>v<code> should have the type </code>ℝ[m]<code> not </code>ℝ[m</em>s⁻¹<em>s]<code> or </code>ℝ[s</em>m*s⁻¹]`. I have partially solved this problem using custom elaborator, see <a href=\"#narrow/stream/270676-lean4/topic/dimensional.20analysis.20and.20arithmetic.20in.20type\">this thread</a>.</li>\n</ol>\n<p>This reduction is doable with a custom elaborator, but I don't think it is the right approach. This way I would have to write a custom elaborator for every function involving <code>Prim dim</code>. So I'm curious if anyone has an idea how to tackle this problem?</p>\n<hr>\n<p>Example with <code>Prism n</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PrismBase</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PrismBase.dim</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">point</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cone</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dim</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dim</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">dim</span> <span class=\"n\">Q</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Prism</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">PrismBase</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">val.dim</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Prism.cone</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">P.1.cone</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">PrismBase.dim</span><span class=\"o\">,</span> <span class=\"n\">P.2</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">Prism.prod</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">P.1.prod</span> <span class=\"n\">Q.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">PrismBase.dim</span><span class=\"o\">,</span> <span class=\"n\">P.2</span><span class=\"o\">,</span> <span class=\"n\">Q.2</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">point</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">segment</span> <span class=\"o\">:=</span> <span class=\"n\">point.cone</span>\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">:=</span> <span class=\"n\">segment.prod</span> <span class=\"n\">segment</span>\n</code></pre></div>\n<p>Now have a look at the types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">segment</span> <span class=\"c1\">-- Prism (0 + 1)             ... should be Prism 1</span>\n<span class=\"k\">#check</span> <span class=\"n\">square</span>  <span class=\"c1\">-- Prism (0 + 1 + (0 + 1))   ... should be Prism 2</span>\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.cone.cone</span> <span class=\"c1\">-- Prism n → Prism (n + 1 + 1)  ... should be Prism n → Prism (n + 2)</span>\n</code></pre></div>\n<p>My attempt to fix this using default arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Prism.cone'</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"k\">let</span> <span class=\"n\">dim</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">dim</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">dim</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prism</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">P.1.cone</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"n\">PrismBase.dim</span><span class=\"o\">,</span> <span class=\"n\">P.2</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">segment'</span> <span class=\"o\">:=</span> <span class=\"n\">point.cone'</span>\n<span class=\"k\">#check</span> <span class=\"n\">segment'</span> <span class=\"c1\">--- Prism (let dim := 0 + 1; Eq.mp (_ : Nat = Nat) dim)</span>\n</code></pre></div>\n<p>... this makes it even worse.</p>",
        "id": 300628610,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664099509
    },
    {
        "content": "<p>I tried a general elaborator along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"reduce_type_of\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">val</span>\n  <span class=\"k\">let</span> <span class=\"n\">reduced</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"n\">typ</span> <span class=\"o\">(</span><span class=\"n\">skipTypes</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Reduced to {reduced}\"</span>\n  <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">reduced</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">segment2</span> <span class=\"o\">:=</span> <span class=\"n\">reduce_type_of</span> <span class=\"o\">(</span><span class=\"n\">point.cone</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">segment2</span>\n</code></pre></div>\n<p>but while it is internally able to reduce the type this does somehow not get properly propagated upwards :(</p>",
        "id": 300632484,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664101674
    },
    {
        "content": "<p>Nice, I was thinking about writing an elaborator like that but didn't get around to it, plus it is still somewhat suboptimal solution.</p>\n<p>Here is a fixed version that enforces the cast to the reduced type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"reduce_type_of\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">val</span>\n  <span class=\"k\">let</span> <span class=\"n\">reduced</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"n\">typ</span> <span class=\"o\">(</span><span class=\"n\">skipTypes</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Reduced to {reduced}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">proof</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">rfl</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">,</span> <span class=\"n\">reduced</span><span class=\"o\">]</span>\n  <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">cast</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">typ</span><span class=\"o\">,</span> <span class=\"n\">reduced</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">segment2</span> <span class=\"o\">:=</span> <span class=\"n\">reduce_type_of</span> <span class=\"o\">(</span><span class=\"n\">point.cone</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">segment2</span>\n</code></pre></div>",
        "id": 300637120,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664104415
    },
    {
        "content": "<p>Also for more complicated cases I'm thinking about notation <code>by convSeq ▸ term</code> which would allow you to rewrite a type of a term using more advanced tactics like <code>ring</code>.</p>",
        "id": 300638679,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664105414
    },
    {
        "content": "<p>If you think these are problems, wait until you run into situations where the numbers in the types aren't defeq! I would imagine that <code>prism 0+1</code> and <code>prism 1</code> are equal by <code>rfl</code>. Can you solve your problem with type ascriptions, eg <code>def segment : Prism 1 := point.cone</code>? The problem we ran into in LTE was that <code>Prism (a+b)</code> and <code>Prism (b+a)</code> are not defeq so we defined functions between the types which were \"morally the identity\" and trained the simplifier to cancel them where possible.</p>",
        "id": 300642295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664107504
    },
    {
        "content": "<p>Well you can use any proof producing function in place of <code>reduce</code> and <code>rfl</code> here if you want to really so I don't see an issue? IN theory we could also just run <code>simp</code> against the thing and it would give us a new expression + a proof for the <code>cast</code> we could use</p>",
        "id": 300644127,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664108700
    },
    {
        "content": "<p>Yes using type ascriptions is possible but useful only for predefined things. In my test, I wrote down a simple neural network and the resulting type contained</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">numOf</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">16</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">numOf</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">16</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"mi\">32</span>\n</code></pre></div>\n<p>My main concern right now is user experience. When you chain bunch of functions together you really want to see human comprehensible type at the end.</p>\n<p>Yes, I'm expecting that sooner or later I will run into cases which are not defeq. Thanks for pointing out that you dealt with this problem in LTE, I will look for inspiration there in the future.</p>",
        "id": 300644517,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664108911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Term.20reduction.20in.20type/near/300644127\">said</a>:</p>\n<blockquote>\n<p>Well you can use any proof producing function in place of <code>reduce</code> and <code>rfl</code> here if you want to really so I don't see an issue? IN theory we could also just run <code>simp</code> against the thing and it would give us a new expression + a proof for the <code>cast</code> we could use</p>\n</blockquote>\n<p>I was just thinking aloud, there is no real issue. Only the fact that I do not know how to run a tactic during elaboration.</p>",
        "id": 300644833,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664109099
    },
    {
        "content": "<p>A closed term is always defeq to its normal form, right? I feel like as a user I have much lower expectations for expressions with variables, so it feels like a good first step to even just reduce closed terms</p>",
        "id": 300678346,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664129843
    },
    {
        "content": "<p>not always: if you cast <code>2 : Nat</code> by a proof of <code>(True -&gt; True) = True</code> by propext, the resulting term is provably equal to 2 but fails to normalize</p>",
        "id": 300678727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130123
    },
    {
        "content": "<p>oh :/ that's unfortunate. is there a tactic that reduces terms with casts and such?</p>",
        "id": 300679472,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664130613
    },
    {
        "content": "<p>no, at least not one that generates a proof</p>",
        "id": 300679532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130660
    },
    {
        "content": "<p>The <code>conv =&gt; reduce</code> is not doing everything you want?</p>",
        "id": 300679576,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664130694
    },
    {
        "content": "<p>the example I just gave is one where even <code>#reduce</code> unfolding proofs and everything still fails</p>",
        "id": 300679661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130737
    },
    {
        "content": "<p>it's the type theory itself that is deficient in this case</p>",
        "id": 300679672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130748
    },
    {
        "content": "<p>I mean, you can't really fault it for not unfolding an <code>axiom</code> which has no definition</p>",
        "id": 300679694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130773
    },
    {
        "content": "<p>Can you give mwe? I fail to precisely understand your description.</p>",
        "id": 300679722,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664130785
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">eq_true</span> <span class=\"n\">id</span>\n  <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- not 2</span>\n</code></pre></div>",
        "id": 300679867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130855
    },
    {
        "content": "<p>Huh, I'm surprised that <code>this ▸ 2</code> even typechecks</p>",
        "id": 300679930,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664130902
    },
    {
        "content": "<p>why wouldn't it? We're rewriting the type <code>Nat</code> by replacing occurrences of <code>True -&gt; True</code> with <code>True</code>, resulting in <code>Nat</code></p>",
        "id": 300679996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130949
    },
    {
        "content": "<p>even if <code>\\t</code> decided to point out that it's useless I could do the same thing by calling <code>Eq.rec</code> directly</p>",
        "id": 300680083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664130995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Term.20reduction.20in.20type/near/300679532\">said</a>:</p>\n<blockquote>\n<p>no, at least not one that generates a proof</p>\n</blockquote>\n<p>What does it take to generate the proof?</p>",
        "id": 300680177,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664131078
    },
    {
        "content": "<p>HoTT</p>",
        "id": 300680227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131089
    },
    {
        "content": "<p>doing this in general is an open research question, to put it mildly</p>",
        "id": 300680289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131142
    },
    {
        "content": "<p>wait but you said the term is provably equal to 2 <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I feel like i've gotten rid of casts in terms before</p>",
        "id": 300680308,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664131163
    },
    {
        "content": "<p>you can do it in every individual case with some trickery or another</p>",
        "id": 300680330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131183
    },
    {
        "content": "<p>it seems likely to be true in general, but constructing a tactic that does it is another matter altogether</p>",
        "id": 300680385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131205
    },
    {
        "content": "<p>because you have to deal with casts and casts of casts ad infinitum</p>",
        "id": 300680413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131227
    },
    {
        "content": "<p>hence HoTT</p>",
        "id": 300680437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131255
    },
    {
        "content": "<p>I see, makes sense. It seems like we'd want a best-effort tactic in mathlib for this? Or at least that knows the \"trickery\" for common cases?</p>",
        "id": 300680621,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664131370
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">eq_true</span> <span class=\"n\">id</span><span class=\"bp\">;</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"n\">True</span> <span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 300680759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131487
    },
    {
        "content": "<p>the common case is that you don't do this</p>",
        "id": 300680789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131514
    },
    {
        "content": "<p>Most tactics just don't deal with casts, or only handle them via <code>congr</code> which can rewrite some dependent functions</p>",
        "id": 300680910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664131590
    },
    {
        "content": "<p>Yay! I have figured out how to do it without <code>cast</code> as <code>cast</code> is pain to deal with ...</p>\n<p>The solution is to just  use <code>let</code> binding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"reduce_type_of\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">typ</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">val</span>\n  <span class=\"k\">let</span> <span class=\"n\">reduced</span> <span class=\"bp\">←</span> <span class=\"n\">reduce</span> <span class=\"n\">typ</span> <span class=\"o\">(</span><span class=\"n\">skipTypes</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"n\">Expr.letE</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">reduced</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">false</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">pure</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">reduce_type_of</span> <span class=\"n\">point.cone</span> <span class=\"c1\">-- Prism 1</span>\n</code></pre></div>",
        "id": 302314153,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1664905444
    }
]