[
    {
        "content": "<p>I am trying to pick up the first tactic in a sequence from a string (obtained by reading a Lean file for example). However, the <code>apply</code> tactic seems to pick up all the subsequent lines as arguments. Is there a way to avoid this? Concretely, in the following example I want the parsing to fail (and expected it to because I thought the arguments would have a <code>colGt</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tacEg</span> <span class=\"o\">:=</span>\n<span class=\"s2\">\"apply f</span>\n<span class=\"s2\">skip</span>\n<span class=\"s2\">decide\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mlParse</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tacEg</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span>\n    <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.reprint.get</span><span class=\"bp\">!</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">mlParse</span> <span class=\"c1\">-- Except.ok \"apply f\\nskip\\ndecide\"</span>\n</code></pre></div>",
        "id": 303863624,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1665675112
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 303865779,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1665675707
    },
    {
        "content": "<p>With more reading of the source, I should correct my question. In tactic mode, why is <code>tacEg</code> as above (correctly) interpreted as the sequence of tactics <code>apply f</code> then <code>skip</code> and then <code>decide</code> instead of the maximal match which is <code>apply</code> with argument <code>f skip decide</code>?</p>",
        "id": 303866499,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1665675921
    },
    {
        "content": "<p>For parsing a sequence of tactics, you need the <code>tacticSeq</code> parser, which inserts the crucial <code>withPosition</code> application</p>",
        "id": 303866789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665676000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsing.20with.20.60apply.60.20and.20indentation/near/303866789\">said</a>:</p>\n<blockquote>\n<p>For parsing a sequence of tactics, you need the <code>tacticSeq</code> parser, which inserts the crucial <code>withPosition</code> application</p>\n</blockquote>\n<p>Thanks. I am now using it and things are working fine.</p>",
        "id": 303871247,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1665677191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 303873939,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665677905
    }
]