[
    {
        "content": "<p>I have discovered a Heisenbug with <code>nightly-2021-08-05</code> (i.e., the zero-cost <code>mmap</code> import update). While working on Papyrus, I have discovered that my <a href=\"https://github.com/tydeu/lean4-papyrus/blob/master/test/src/unit.lean\"><code>unit.lean</code></a> hangs/segfaults on its imports on versions   <code>nightly-2021-08-05</code> and beyond (and does not on versions before that). Unfortunately, I suspect this issue is not easily reproducible or convertible to a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. In particular, simply copying/renaming the repo to a different directory can cause the bug to not occur. Thus, I suspect the hang is caused by the particular place the imports get randomly placed in memory.</p>",
        "id": 248768650,
        "sender_full_name": "Mac",
        "timestamp": 1628426250
    },
    {
        "content": "<p>The bug also causes the oleans to be undeletable until I force terminate all active lean processes.</p>",
        "id": 248769045,
        "sender_full_name": "Mac",
        "timestamp": 1628426859
    },
    {
        "content": "<p>Do you have a stacktrace?</p>",
        "id": 248769091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628426893
    },
    {
        "content": "<p>The addresses depend only on the module names, so I'm not sure how moving the directory could affect the issue. Also it sounds suspicious that only this single file that isn't part of the build fails, right?</p>",
        "id": 248769113,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628426974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/hang.2Fsegfault.20on.20import/near/248769045\">said</a>:</p>\n<blockquote>\n<p>The bug also causes the oleans to be undeletable until I force terminate all active lean processes.</p>\n</blockquote>\n<p>That's just how memory-mapped files work on Windows.</p>",
        "id": 248769120,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628426992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/hang.2Fsegfault.20on.20import/near/248769113\">said</a>:</p>\n<blockquote>\n<p>The addresses depend only on the module names, so I'm not sure how moving the directory could affect the issue.</p>\n</blockquote>\n<p>I may be wrong about the directory moving thing. The first time I thought I tried it and it did crash. But I may have been using the wrong version as when I tried to copy and rebuild again it still crashed in a different directory.</p>",
        "id": 248769201,
        "sender_full_name": "Mac",
        "timestamp": 1628427106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/hang.2Fsegfault.20on.20import/near/248769113\">said</a>:</p>\n<blockquote>\n<p>Also it sounds suspicious that only this single file that isn't part of the build fails, right?</p>\n</blockquote>\n<p>Not really, as it is the import of <code>Papyrus</code> itself that seems to be failing.</p>",
        "id": 248769480,
        "sender_full_name": "Mac",
        "timestamp": 1628427490
    },
    {
        "content": "<p>But that's a pretty boring import. It sounds unlikely that an issue would manifest there but not with any of the nested imports, but who knows.</p>",
        "id": 248769610,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628427669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/hang.2Fsegfault.20on.20import/near/248769120\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/hang.2Fsegfault.20on.20import/near/248769045\">said</a>:</p>\n<blockquote>\n<p>The bug also causes the oleans to be undeletable until I force terminate all active lean processes.</p>\n</blockquote>\n<p>That's just how memory-mapped files work on Windows.</p>\n</blockquote>\n<p>I suspected as much, my current problem is that the locks seems to remain even when there are no more <code>lean</code> processes left (or any other process that seems connected). My current solution is having to logout/login.</p>",
        "id": 248769806,
        "sender_full_name": "Mac",
        "timestamp": 1628427920
    },
    {
        "content": "<p>Scratch that -- they were just hiding under a hanging VS Code process.</p>",
        "id": 248769867,
        "sender_full_name": "Mac",
        "timestamp": 1628427989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/hang.2Fsegfault.20on.20import/near/248769610\">said</a>:</p>\n<blockquote>\n<p>But that's a pretty boring import. It sounds unlikely that an issue would manifest there but not with any of the nested imports, but who knows.</p>\n</blockquote>\n<p>My suspicion as to the source of the problem could be incorrect, but it does only break starting on the <code>nightly-2021-08-05</code> build so I would assume it is an mmap import problem.</p>",
        "id": 248770140,
        "sender_full_name": "Mac",
        "timestamp": 1628428440
    },
    {
        "content": "<p>I figured out what the problem was! I had not properly cleaned the build output from the previous version of Lean. I think the new Lean was somehow breaking on the old build output. Namely, it was not rebuilding <code>TestLib</code> and it was segfaulting because of that import (not <code>Papyrus</code>).</p>",
        "id": 248770859,
        "sender_full_name": "Mac",
        "timestamp": 1628429449
    },
    {
        "content": "<p>Ok ok, we should really bring back <code>CHECK_OLEAN_VERSION</code>...</p>",
        "id": 248770887,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628429506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I wonder if a similar build cache error could be the cause of <a href=\"https://github.com/leanprover/lean4/pull/555\">#555</a>'s segfault.</p>",
        "id": 248770953,
        "sender_full_name": "Mac",
        "timestamp": 1628429615
    },
    {
        "content": "<p>We don't cache .oleans</p>",
        "id": 248770959,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628429631
    },
    {
        "content": "<p>Well, the Nix CI does, but that one's clever enough not to confuse versions</p>",
        "id": 248771017,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628429691
    },
    {
        "content": "<p>Ah. Then what exactly is it caching on Windows?</p>",
        "id": 248771113,
        "sender_full_name": "Mac",
        "timestamp": 1628429802
    },
    {
        "content": "<p>Only the C/C++ compilation via ccache. At least so far we've never had a problem with ccache soundness.</p>",
        "id": 248771144,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628429867
    },
    {
        "content": "<p>Hmm, but in <a href=\"https://github.com/leanprover/lean4/pull/555\">#555</a> you are now compiling and linking very differently. Would it be worth it to try clearing the ccache for it and rebuilding jus to see if that is somehow the problem?</p>",
        "id": 248771271,
        "sender_full_name": "Mac",
        "timestamp": 1628430004
    },
    {
        "content": "<p>Because it really feels like that segfault is coming from some quirk of the CI environment that user machines don't share. That cache could certainly be it (even if it may be unlikely that is the case).</p>",
        "id": 248771286,
        "sender_full_name": "Mac",
        "timestamp": 1628430027
    },
    {
        "content": "<p>Maybe! You're welcome to comment out the cache action and e.g. push the branch to your own <code>master</code> :)</p>",
        "id": 248771423,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628430219
    },
    {
        "content": "<p>Ah, I guess you might not have Actions configured. I can do it as well.</p>",
        "id": 248771476,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628430263
    },
    {
        "content": "<p>Nope, same result</p>",
        "id": 248773974,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1628434021
    }
]