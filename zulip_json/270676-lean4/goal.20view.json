[
    {
        "content": "<p>There's no goal view yet right?</p>",
        "id": 222309002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610377966
    },
    {
        "content": "<p>there is the problems panel on the bottom</p>",
        "id": 222310238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610378462
    },
    {
        "content": "<p>In emacs the \"next error\" window works.</p>",
        "id": 222310470,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610378549
    },
    {
        "content": "<p>But there's no way to see the tactic state at positions where there wasn't an error?</p>",
        "id": 222311307,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610378868
    },
    {
        "content": "<p>I guess \"make an error happen\" works</p>",
        "id": 222311335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610378874
    },
    {
        "content": "<p>(A good way to do this is to use the <code>done</code> tactic)</p>",
        "id": 222341952,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610391729
    },
    {
        "content": "<p>I think the implementation of this relies on <code>hover</code> support (which was mentioned isn't there yet) -- I don't see the goal state either, just diagnostics</p>",
        "id": 222344392,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610392890
    },
    {
        "content": "<p>In some ways, the comma was the most important token in a Lean 3 proof: everyone quickly learned to place their cursor on it whenever they wanted to see the goal resulting from execution of a tactic. Now you might know that Lean 4 does away with the comma, preferring tactic separation by whitespace instead. Which begs the question: which goal state should we display where?<br>\nThe simple solution is to still show the new state resulting from a tactic only strictly after it - even if there is no comma, you can place your cursor at the end of the line (except when you're in vim normal mode, oh well). However, I wanted to take the disappearance of the comma as an opportunity to advocate for showing the resulting state when located <em>anywhere</em> on the tactic instead: when I'm working <em>on</em> a tactic, e.g. refining the set of lemmas passed to <code>simp</code>, I really want to see the resulting state without having to move my cursor. All the same information as before is still accessible, it's just shifted - in the case of the initial state of a tactic block, it should be shifted onto the initial token such as <code>by</code>.</p>\n<p>To illustrate the two approaches, using <code>|</code> to show where the tactic state changes:<br>\nThe adapted Lean 3 approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">|</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">|</span>\n</code></pre></div>\n<p>My proposal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n <span class=\"bp\">|</span><span class=\"n\">intro</span> <span class=\"n\">h</span>\n <span class=\"bp\">|</span><span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>There has been some pushback against this idea :), so I would like to hear what behavior the community feels more intuitive and helpful (and not just familiar from Lean 3), but also in particular if you seen any specific UX issues in either of the approaches that the other one solves.</p>",
        "id": 232498890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617138735
    },
    {
        "content": "<p>What happens with <code>rw [lemma1, lemma2, lemma3]</code> blocks? Currently, one can scrub through the commas to see the effect of each cumulative rewrite.</p>",
        "id": 232499325,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617138864
    },
    {
        "content": "<p>The first one certainly feels more intuitive. The tactic changes the proof state, hence I expect to see the new proof state <em>after</em> the tactic.</p>",
        "id": 232499482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617138936
    },
    {
        "content": "<p>Semantically -- cursor on top of the <code>rw</code> shows the state after 0, 1, or all of the rewrites?</p>",
        "id": 232499638,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617139004
    },
    {
        "content": "<p>Zulip first duplicated, then deleted my message, oops. But <code>rw</code> would be shifted the same way - <code>rw [|lemma1, |lemma2, |lemma3]</code>.</p>",
        "id": 232499926,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617139157
    },
    {
        "content": "<p>Another solution could be to more fundamentally change how the UI works - users could select whether to show the state before or after execution, or even a fancy diff of them. But I think there still should be a sensible default choice presented first.</p>",
        "id": 232500140,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617139253
    },
    {
        "content": "<p>What about changing after the first character? i.e <code>i|ntro h</code> in your notation</p>",
        "id": 232500211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139280
    },
    {
        "content": "<p>I think if you have the cursor at the beginning of the line, then this should be \"before the tactic\", but if you are any point after that then you are after the tactic</p>",
        "id": 232500371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139367
    },
    {
        "content": "<p>This is useful when you are in the middle of writing the tactic application; in lean 3 you have to make your edit and then move the cursor to the end to see if the change had the desired effect (for example, when adding lemmas to a <code>simp only</code> call)</p>",
        "id": 232500449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139425
    },
    {
        "content": "<p>for completeness, I'd like to also offer this option: <code>intro |h</code> and <code>simp [A|, B|, C|]</code>. This fixes the vim normal mode issue to a certain point.</p>",
        "id": 232500593,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617139491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Interesting. At first it looks wrong to just hack apart the word \"intro\" like that, but as you said, being <em>on</em> the first character really means being <em>in front of</em> the tactic with the usual cursor semantics.</p>",
        "id": 232500632,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617139507
    },
    {
        "content": "<p>The fact that it looks like I'm hacking apart the word is only a side effect of the semantics you applied to the <code>|</code>. I'm switching <code>&lt;</code> and <code>&lt;=</code></p>",
        "id": 232500686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139547
    },
    {
        "content": "<p>(For the vim normal mode one, which I guess I care about... we're using | but the cursor is generally always <em>at</em> a particular character, so I guess to me are we saying the position after the last <code>h</code> then? i.e. the newline character itself? Not on the <code>h</code>?) Also maybe relatedly I'd love a way to iterate over the points at which the tactic state changes, but maybe that's a separate thing.</p>",
        "id": 232500833,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617139604
    },
    {
        "content": "<p>That is, if the tactic has span <code>start..end</code> then you see the before if you are at <code>cursor &lt;= start</code></p>",
        "id": 232500834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139604
    },
    {
        "content": "<p>For <code>intro |h</code> and things: The ability to support intra tactic states is something that is specific to the tactic itself. Any tactic could implement this, but in lean 3 only <code>rw</code> does</p>",
        "id": 232501014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139703
    },
    {
        "content": "<p>You have to write the tactic in a certain way, such that intermediate states both (1) actually correspond to a moment in the middle of execution and (2) can be mapped to spans in the expression provided by the user. For most tactics this just doesn't make sense - for example in <code>simp [A, B, C]</code>, there is no moment when you have just <code>A</code> and <code>B</code> applied, because they can be applied in any order and as many times as necessary</p>",
        "id": 232501245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617139832
    },
    {
        "content": "<p>Another issue/question is duplication with error messages - when I'm working on a tactic, even if it displays the \"pre state\", I still usually see the \"post state\" in the \"unsolved goals\" message below - except when the pre state is so big that I would have to fold it first. Not sure if there is any fundamentally nicer way to present all this information.</p>",
        "id": 232501270,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617139846
    },
    {
        "content": "<p>Another issue with error messages is that It is often hard to find the relevant information. For example, here's a random error message from a proof I'm working on now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">bar</span> <span class=\"n\">BD</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span>\n    <span class=\"n\">cochain_complex.mk</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n         <span class=\"o\">(</span><span class=\"n\">BD.complex₂_X</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n           <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n         <span class=\"o\">(</span><span class=\"n\">universal_map.eval_CLCFPTinv₂</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n           <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">))))</span>\n      <span class=\"n\">_</span>\n      <span class=\"n\">_</span>\n\n<span class=\"n\">homotopy.lean</span><span class=\"o\">:</span><span class=\"mi\">165</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n<span class=\"n\">simplify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">bar</span> <span class=\"n\">BD</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span>\n    <span class=\"n\">cochain_complex.mk</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n         <span class=\"o\">(</span><span class=\"n\">BD.complex₂_X</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n           <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n         <span class=\"o\">(</span><span class=\"n\">universal_map.eval_CLCFPTinv₂</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n           <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"bp\">↥</span><span class=\"n\">M</span><span class=\"o\">))))</span>\n      <span class=\"n\">_</span>\n      <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 232501602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140034
    },
    {
        "content": "<p>For the vim weirdos like me, perhaps the best solution would be to put explicit support into the extension to shift the goal request position appropriately when in normal mode. Doesn't work for the Lean 3 \"at end of tactic\" approach though.</p>",
        "id": 232501642,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617140043
    },
    {
        "content": "<p>First, I have to scroll past the tactic state, which has four goals that have nothing wrong with them, to see the error message: \"simplify tactic failed to simplify\". Then I have to scroll some more past the long context to find the actual goal <code>⊢ bar BD r V M (λ (i : ℕ), r' * (c * (c' i * N⁻¹))) (λ (i : ℕ), c * (c' i * N⁻¹)) ?m_1 ?m_2 _ _ = ?m_3</code> that failed to simplify</p>",
        "id": 232501747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140106
    },
    {
        "content": "<p>The information that is most relevant is buried under a mountain of noise</p>",
        "id": 232501820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140148
    },
    {
        "content": "<p>This isn't even a particularly large context. It gets a lot worse than this</p>",
        "id": 232501956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> one thing that's an interesting observation is, that most of the state is actually duplicate. I wonder how much better it would look if we did a tree-like structure where the common things are shared and only the differences shown in each state?</p>",
        "id": 232502137,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617140311
    },
    {
        "content": "<p>Is part of that to do with the goal state being included in the diagnostic message? Maybe the server should just respond with the error itself and the spot it occurs in the diagnostic, and if you want the tactic state too you do a hover separately?</p>",
        "id": 232502143,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617140313
    },
    {
        "content": "<p>Putting the <code>|-</code> part first would also help with the long context problem, although it is a bit weird</p>",
        "id": 232502226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140375
    },
    {
        "content": "<p>One way to address the duplicate context problem is to elide the context from all goals other than the first. That's not quite the same as doing a tree like thing but I don't know how to present that in a way such that you can reconstruct everything</p>",
        "id": 232502581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140552
    },
    {
        "content": "<p>How about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span> <span class=\"n\">goals</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"bp\">...</span> <span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n<span class=\"bp\">...</span> <span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 232502794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140682
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"c1\">---------------</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">bar</span> <span class=\"n\">BD</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 232502963,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617140764
    },
    {
        "content": "<p>you'd have the bar to separate shared from non-shared</p>",
        "id": 232502991,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617140782
    },
    {
        "content": "<p>thus for the 2 other goals you might have additional context</p>",
        "id": 232503013,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617140799
    },
    {
        "content": "<p>What if the main goal has more context than the other two?</p>",
        "id": 232503044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140827
    },
    {
        "content": "<p>then you put the line higher.</p>",
        "id": 232503269,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617140929
    },
    {
        "content": "<p>it's just a common-prefix thing</p>",
        "id": 232503280,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617140937
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 232503285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140942
    },
    {
        "content": "<p>Also, can we remove the commas from the proof goal display? It's annoying to edit those out when copying it into a def or something</p>",
        "id": 232503314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140965
    },
    {
        "content": "<p>especially since the last hypothesis doesn't have a comma</p>",
        "id": 232503340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617140982
    },
    {
        "content": "<p>What if you put the common context last:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">bar</span> <span class=\"n\">BD</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">universal_map.suitable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Maybe the context is even in a separate dropdown</p>",
        "id": 232503644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617141158
    },
    {
        "content": "<p>come to think of it, if we did the compression by common prefix or something, then even showing the proof state both before and after might be feasible</p>",
        "id": 232503652,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141164
    },
    {
        "content": "<p>that blows up in your face if you have 20 goals</p>",
        "id": 232503677,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141185
    },
    {
        "content": "<p>but you could do it for just the first goal for instance</p>",
        "id": 232503706,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141208
    },
    {
        "content": "<p>that's true, it would be best to have the context after the first goal</p>",
        "id": 232503714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617141217
    },
    {
        "content": "<p>or even before the first goal, provided the first goal is always on screen first and there is a way to draw the reader's attention to it</p>",
        "id": 232503798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617141250
    },
    {
        "content": "<p>I do like the visual effect of the variable moving up into the context when you do an <code>intro</code></p>",
        "id": 232503873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617141295
    },
    {
        "content": "<p>like for instance clamped to the bottom of the window?</p>",
        "id": 232503879,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141300
    },
    {
        "content": "<p>right</p>",
        "id": 232503922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617141320
    },
    {
        "content": "<p>in fact, I do like the shared context for another reason, too.</p>",
        "id": 232503957,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141338
    },
    {
        "content": "<p>but you also want to show the error message and the other goals and they can't all fit</p>",
        "id": 232503965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617141343
    },
    {
        "content": "<p>say you have 5 similar goals.</p>",
        "id": 232503973,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141348
    },
    {
        "content": "<p>then doing an <code>all_goals {x y z}</code> becomes much easier if you see the goals instead of mostly context.</p>",
        "id": 232504044,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617141374
    },
    {
        "content": "<p>I'm in favor of <code>|intro</code> or, perhaps best, <code>i|ntro</code>. The old behavior, while \"theoretically\" justifiable, almost always showed the wrong subgoal until you learned to artificially move the cursor past the comma.</p>",
        "id": 232863144,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1617342234
    },
    {
        "content": "<p>I am also in favour of <code>i|ntro</code>: for me this is the best option!</p>",
        "id": 232864143,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617343266
    },
    {
        "content": "<p>does anyone have feedback on the idea of collapsing shared context?</p>",
        "id": 232918215,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617380318
    },
    {
        "content": "<p>I think the common-prefix idea sounds great.</p>",
        "id": 232919353,
        "sender_full_name": "Greg Price",
        "timestamp": 1617380872
    },
    {
        "content": "<p>Not sure if this is helpful or already considered but hopefully there's a difference between the message as presented in vscode and the actual response from the server? Like it'd be nice if one could separate the actual pieces of the context (because they're structurally separate in the server response), regardless of how they're ultimately showed to a human</p>",
        "id": 232923188,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617382623
    },
    {
        "content": "<p>right now, the context in lean4 is passed almost verbatim from the server. This approach has both good and bad sides. One nice thing is, that you can write most of the logic in lean, the not-so-nice part is, that the extension is somewhat limited in what it can do. </p>\n<p>In lean3 the object model with widgets is more complex, but I don't know the details there.</p>",
        "id": 232928469,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617384905
    },
    {
        "content": "<p>I guess I don't know enough about widgets either, I thought they were more about how you create graphical interaction on the client-side, whereas I guess I'm asking more about ways the server communicates structured data -- similar I guess to how if you have the <code>simp?</code> tactic and it wants to say \"here are my simp lemmas\", in lean3 that's a bunch of hairy text, not structured data -- it's just \"Try this: bla\" and you get to parse that (simple) text. Rather than some protocol the server (or tactic definition) speaks, where you can say (e.g. in JSON): <code>{\"response\": {\"simp-lemmas\": [\"foo\", \"bar\"]}}</code> and then how you render that (e.g. as <code>Try this: foo\\n Try this: bar\\n</code>) is up to the client (vscode extension or whatever)</p>",
        "id": 232929310,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617385320
    },
    {
        "content": "<p>(And here like <code>{\"response\": {\"error\": \"whatever\", \"summary\": thatCompressedTreeMessage, \"state\": justTheTacticState}}</code>)</p>",
        "id": 232929433,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617385387
    },
    {
        "content": "<p>For \"Try this\" etc, the LSP spec already gives us the expected format (it should be a \"code action\"). The goal view is special in that it is a custom extension of the protocol.</p>",
        "id": 232929907,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617385649
    },
    {
        "content": "<p>Makes sense -- and that custom extension just speaks plaintext essentially?</p>",
        "id": 232930002,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617385691
    },
    {
        "content": "<p>Not quite <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Lsp/Extra.lean#L40-L42\">https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Lsp/Extra.lean#L40-L42</a></p>",
        "id": 232930071,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617385740
    },
    {
        "content": "<p>a ha, ok, so there's a couple more things, but this is about that <code>rendered</code> field</p>",
        "id": 232930138,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617385782
    },
    {
        "content": "<p>which afaik is not used by either extension anymore</p>",
        "id": 232930227,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617385814
    },
    {
        "content": "<p>Well, if we did go down the route of implementing the prefix compression, we should have a structure more or less like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PlainGoal</span> <span class=\"n\">where</span>\n  <span class=\"n\">rendered</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"kd\">prefix</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>So that you can easily get the old behaviour but just <code>prefix.map (fun x =&gt; prefix ++ x)</code>, but you could also get the compressed prefix rendering if so desired.</p>",
        "id": 232931665,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617386517
    },
    {
        "content": "<p>on the other hand, we still want lean's pretty printer to take care of the heavy lifting. That's not something you want to implement in the extension.</p>",
        "id": 232932013,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1617386649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/270676-lean4/topic/goal.20view/near/232863144\">said</a>:</p>\n<blockquote>\n<p>I'm in favor of <code>|intro</code> or, perhaps best, <code>i|ntro</code>. The old behavior, while \"theoretically\" justifiable, almost always showed the wrong subgoal until you learned to artificially move the cursor past the comma.</p>\n</blockquote>\n<p>Good to hear that someone else actually finds the Lean 3 behavior problematic :)</p>",
        "id": 232960087,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617403144
    },
    {
        "content": "<p>I've now implemented Mario's <code>i|ntro</code> proposal, please give it a try. We also now show goals from all execution branches (e.g. after <code>&lt;;&gt;</code>) at the current position, feedback on that would be valuable as well.</p>",
        "id": 232960277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617403303
    },
    {
        "content": "<p>Well it works :) and I indeed got it working in vim normal mode hee hee <a href=\"https://asciinema.org/a/GARVUQZtmHeGeKxOBqVO18dAC\">https://asciinema.org/a/GARVUQZtmHeGeKxOBqVO18dAC</a> (don't look at my newbie lean code but it does work hooray)</p>",
        "id": 232965622,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617407873
    },
    {
        "content": "<p>I think after a few minutes though that in my case it's a bit awkward that it's on the second character, but I guess I'll try shifting the request by 1 on my side.</p>",
        "id": 232966645,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617408871
    },
    {
        "content": "<p>I've now refined the <code>i|ntro</code> logic in <a href=\"https://github.com/leanprover/lean4/pull/434\">https://github.com/leanprover/lean4/pull/434</a>: if the tactic looks like a combinator (has a nested tactic not surrounded by <code>by</code>), we default to showing the initial goal on the outer tactic. Thus if you put your cursor at <code>i|nduction ... with ...</code>, it will no longer show you a useless \"goals accomplished\". Combinators can and should override this default behavior where sensible, and we do so for induction/cases/case/match, showing the corresponding case goal on the <code>... =&gt;</code> part. Oh, and we show the initial goal on <code>by</code>, even if you haven't written anything after it yet.</p>",
        "id": 237068787,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619977514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/goal.20view/near/232965622\">said</a>:</p>\n<blockquote>\n<p>Well it works :) and I indeed got it working in vim normal mode hee hee <a href=\"https://asciinema.org/a/GARVUQZtmHeGeKxOBqVO18dAC\">https://asciinema.org/a/GARVUQZtmHeGeKxOBqVO18dAC</a> (don't look at my newbie lean code but it does work hooray)</p>\n</blockquote>\n<p>Hi, sorry if this is the wrong place to ask, but is there a way to have this infoview in emacs?</p>",
        "id": 237366398,
        "sender_full_name": "Lucas V.",
        "timestamp": 1620149437
    },
    {
        "content": "<p>Yes, press <code>C-c C-i</code> :)</p>",
        "id": 237367137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620149724
    },
    {
        "content": "<p>(<code>lean4-toggle-info</code> in recent lean4-mode)</p>",
        "id": 237367190,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620149749
    },
    {
        "content": "<p>Thanks! So this <em>almost</em> works, it tries to display the goal but this error pops up in the message buffer instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span> <span class=\"n\">processing</span> <span class=\"n\">message</span> <span class=\"o\">(</span><span class=\"n\">wrong</span><span class=\"bp\">-</span><span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"n\">argument</span> <span class=\"n\">listp</span> <span class=\"bp\">#</span><span class=\"n\">s</span><span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"bp\">-</span><span class=\"n\">table</span> <span class=\"n\">size</span> <span class=\"mi\">1</span> <span class=\"n\">test</span> <span class=\"n\">equal</span> <span class=\"n\">rehash</span><span class=\"bp\">-</span><span class=\"n\">size</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"n\">rehash</span><span class=\"bp\">-</span><span class=\"n\">threshold</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8125</span> <span class=\"n\">data</span> <span class=\"o\">(</span><span class=\"s2\">\"rendered\"</span> <span class=\"s2\">\"```lean</span>\n<span class=\"s2\">m n k : Nat</span>\n<span class=\"s2\">⊢ succ (n + (m + k)) = succ (n + (m + k))</span>\n<span class=\"s2\">```\"</span><span class=\"o\">)))</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>I tried with lean4 stable and nighly. Maybe this is a problem with my lsp-mode? I'm using its latest version too.</p>",
        "id": 237369198,
        "sender_full_name": "Lucas V.",
        "timestamp": 1620150379
    },
    {
        "content": "<p>And I am also using the latest lean4-mode from the lean4 repo</p>",
        "id": 237369404,
        "sender_full_name": "Lucas V.",
        "timestamp": 1620150444
    },
    {
        "content": "<p>Today I figured out the problem:</p>\n<p>Maybe due to other package I am using or maybe because it's emacs 28, when the goal view is created the cursor moves to the goal view. So when <code>lean4-toggle-info</code> calls <code>(lean4-info-buffer-refresh)</code> it is not at the Lean4 buffer and some lsp functions throw the error.</p>\n<p>Simply removing the <code>(lean4-info-buffer-refresh)</code> line solves the problem, but the right fix would probably be a bit more sophisticated</p>",
        "id": 242264953,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1623356450
    }
]