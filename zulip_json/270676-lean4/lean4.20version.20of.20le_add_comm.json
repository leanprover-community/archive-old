[
    {
        "content": "<p>What is the lean4 version of this proof that uses cases' from mathlib:<br>\n<a href=\"/user_uploads/3121/bo3-J-o_GynlqS3HuoOm3OSm/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bo3-J-o_GynlqS3HuoOm3OSm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bo3-J-o_GynlqS3HuoOm3OSm/image.png\"></a></div><p>I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_add_comm</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But it has unsolved goals like this:<br>\n<a href=\"/user_uploads/3121/7E7WzPPUvvs6zI2jHpI3KQI7/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7E7WzPPUvvs6zI2jHpI3KQI7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7E7WzPPUvvs6zI2jHpI3KQI7/image.png\"></a></div><p>I tried adding <code>simp [min, h, Nat.le_of_add_le_add_right]</code> thinking that since that proves <code>a + b ≤ c + b → a ≤ c</code> it would help me eliminate <code>l</code> in this goal and then simp could finish it using the hypothesis, but this didn't work either.  Is there a tactic that eliminates <code>l</code> by subtracting <code>l</code> from both sides of the <code>≤ </code> ?</p>",
        "id": 301507905,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664476862
    },
    {
        "content": "<p>it's a simp lemma</p>",
        "id": 301508319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664477012
    },
    {
        "content": "<p>where did you find that lemma? I can't find <code>min_add_add</code> in any of {lean, mathlib, lean4, std4, mathlib4}</p>",
        "id": 301508619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664477119
    },
    {
        "content": "<p>oh, hang on, no I added it in order to port min_add_add which is in the hitchhiker's guide to logic verification.</p>",
        "id": 301508689,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664477143
    },
    {
        "content": "<p>do you have a MWE that compiles in lean 3?</p>",
        "id": 301508805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664477178
    },
    {
        "content": "<p>Assuming you have a working version of the lean 3 code, you can use <code>simp?</code> to find what additional lemmas it's using</p>",
        "id": 301508924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664477229
    },
    {
        "content": "<p>This is the one I'm trying to port:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_add_add</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 301508944,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664477237
    },
    {
        "content": "<p>the behavior of <code>simp</code> depends on all the lemmas tagged <code>@[simp]</code> in the library, and there are a ton of those and not all have been ported</p>",
        "id": 301509050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664477278
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span> <span class=\"c1\">-- or something in mathlib4 that implies this</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.add_le_add_iff_le_right</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">min_add_add</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 301509568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664477460
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 301510140,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664477650
    },
    {
        "content": "<p>Yeah, math lib provides lemma in <code>import Mathlib.Tactic.Basic</code>.</p>",
        "id": 301510303,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664477711
    },
    {
        "content": "<p>Ok, now that I have min_add_add, I'm also having trouble with length_zip, do we have a lean4 version of length_zip ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.add_le_add_iff_le_right</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">min_add_add</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">length_zip</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">xs</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs'</span> <span class=\"n\">ih</span>  <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- ih ⊢ length (zip (x :: xs') ys) = min (length (x :: xs')) (length ys)</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ys</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys'</span> <span class=\"bp\">=&gt;</span>   <span class=\"c1\">-- ⊢ length (zip (x :: xs') (y :: ys')) = min (length (x :: xs')) (length (y :: ys'))</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zip</span><span class=\"o\">]</span>         <span class=\"c1\">-- ⊢ length ((x, y) :: zip xs' ys') = min (length (x :: xs')) (length (y :: ys'))</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">]</span>      <span class=\"c1\">-- ⊢ length (zip xs' ys') + 1 = min (length xs' + 1) (length ys' + 1)</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">min_add_add</span><span class=\"o\">]</span>  <span class=\"c1\">-- ⊢ length (zip xs' ys') = min (length xs') (length ys')</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>           <span class=\"c1\">-- why can't it make use of ih to solve this?</span>\n</code></pre></div>\n<p>Here's the lean3 proof :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">length_zip</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"o\">{</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">xs'</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"o\">{</span>\n      <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">ys'</span> <span class=\"o\">{</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zip</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"n\">ys'</span><span class=\"o\">,</span> <span class=\"n\">min_add_add</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and it could solve it, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LoVe.zip.equations._eqn_3</span><span class=\"o\">]:</span> <span class=\"n\">zip</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zip</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LoVe.length.equations._eqn_2</span><span class=\"o\">]:</span> <span class=\"n\">length</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zip</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[[</span><span class=\"n\">anonymous</span><span class=\"o\">]]:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LoVe.length.equations._eqn_2</span><span class=\"o\">]:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">length</span> <span class=\"n\">xs'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LoVe.length.equations._eqn_2</span><span class=\"o\">]:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">length</span> <span class=\"n\">ys'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LoVe.min_add_add</span><span class=\"o\">]:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">]:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">]:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>but I'm not sure how to do <code>ih ys'</code> in lean4, that part doesn't compile... saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">ih</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">xs'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I assume that is what helps it with the difference between <code>zip (x :: xs') ys</code> and <code>zip xs' ys</code> ?</p>",
        "id": 301541786,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664490178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434989\">Chris Lovett</span> has marked this topic as unresolved.</p>",
        "id": 301541854,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664490219
    },
    {
        "content": "<p>How about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">length_zip</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">xs.zip</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">xs.length</span> <span class=\"n\">ys.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"n\">generalizing</span> <span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs'</span> <span class=\"n\">ih</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ys</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp_all</span><span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">,</span> <span class=\"n\">List.zip</span><span class=\"o\">,</span> <span class=\"n\">min_add_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 301544072,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664491438
    },
    {
        "content": "<p>The key here is that I am generalzing over <code>ys</code> which allows me to apply the more general IH in the induction step. If you check it out we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"n\">xs'</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>in the generalized vs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"n\">xs'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>in the non generalized variant. This will after all simplification get stuck on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.zipWith</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">xs'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">ys'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">List.zipWith</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">ys'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because ys' does not match (y :: ys') but if we universally quantify over <code>ys</code> we can just plug it in here and everything works out nicely.</p>",
        "id": 301544595,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664491711
    },
    {
        "content": "<p>Thanks works great, and makes sense, I see you also is <code>simp_all</code> so you didn't need to add <code>ih</code> to the simp list.</p>",
        "id": 301547463,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664493317
    },
    {
        "content": "<p>Nice that this <code>generalizing ys</code> syntax now reads very nicely with the proof explanation:</p>\n<blockquote>\n<p>The presence of ∀-quantifiers is explained as follows. The <code>induction’</code> tactic<br>\nautomatically generalized the lemma statement so that the induction hypothesis<br>\nis not restricted to same fixed <code>β</code> and <code>ys</code> as the proof goal but can be used for<br>\narbitrary values of <code>β</code> and <code>ys</code>. Such flexibility is rarely needed for types (e.g., <code>β</code>),<br>\nbut here we need it for <code>ys</code>, because we want to instantiate the quantifier with <code>ys</code>’s<br>\ntail (called <code>ys'</code>) and not with <code>ys</code> itself.</p>\n</blockquote>",
        "id": 301548204,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664493776
    },
    {
        "content": "<p>Note that I'm not using simp_all just to save simp[ih] but mainly because the ih also needs some simplification with the mentioned definitions and simp_all allows that in 1 instead of 2 steps.</p>\n<p>Furthermore I believe that at least mathlib doesn't usually simplify using definitions right away but instead they will build an API such as length_nil: List.length [] = 0 etc and then use these API lemmata to prove things. This allows for change of definition afterwards without breaking all the downstream proofs</p>",
        "id": 301576790,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664518332
    },
    {
        "content": "<p>Thanks for the clarification, but I did notice this <code>simp</code> works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">length_zip₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">xs.zip</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">xs.length</span> <span class=\"n\">ys.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"n\">generalizing</span> <span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs'</span> <span class=\"n\">ih</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ys</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.length</span><span class=\"o\">,</span> <span class=\"n\">List.zip</span><span class=\"o\">,</span> <span class=\"n\">min_add_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 301730317,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664570219
    },
    {
        "content": "<p>Hm, didnt work for me on the first try but maybe I was just being stupid /o\\</p>",
        "id": 301731150,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664570615
    },
    {
        "content": "<p>Nice to know about <code>simp_all</code> thought, thanks :-)</p>",
        "id": 301732580,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1664571310
    }
]