[
    {
        "content": "<p>In doc-gen4 I have to work with <code>Expr</code> a few time to e.g. get the type of a field of a structure (which doesn't seem to be in the compiler as of now? But feel free to correct me on that), extracting arguments from functions to display them separately etc. For that purpose I would sometimes find it extremly useful to view the actual structure of the <code>Expr</code> so I can see where my algorithms are fucking up instead of guessing around with <code>dbg_trace</code> and the string representation of <code>Expr</code>. At the moment I basically slap:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">DataValue</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">KVMap</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">MData</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Level.Data</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Level</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Expr.Data</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>and then <code>repr myexpr</code> in the debug prints to see what is happening. Is there a nicer way to do this?</p>",
        "id": 266868111,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641332677
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/issues/619#issuecomment-895678882\">https://github.com/leanprover/lean4/issues/619#issuecomment-895678882</a></p>",
        "id": 266875207,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641336599
    },
    {
        "content": "<p>Is it only mdata that's missing from <code>pp.all</code>? We could add some pseudo-syntax (or an actual macro that takes a <code>KVMap</code> term) to print it, Lean 3 had something like that.</p>",
        "id": 266876285,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641337255
    },
    {
        "content": "<p>There is other differences that are hard/impossible to see in pp.all: is <code>x.1</code> a constant, a free variable, or a projection?  And if it is a projection, what is the structure name?  Does a let have the nonDep-flag set?  I believe <code>pp.all</code> also renames bound variables.</p>",
        "id": 266915021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641375868
    },
    {
        "content": "<p>Yeah this is exactly the type of stuff I can see in <code>repr</code> since it shows the actual <code>Expr</code> tree.</p>",
        "id": 266915943,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641376551
    },
    {
        "content": "<p>Related to my statement about getting the type of a structure field, it appears there is already a method here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Structure.lean#L317\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Structure.lean#L317</a> but it's and all its friends are private, is there a good reason for this? Or could we just get them public so I can use it as well? Alternatively if there is a good reason I guess I will just copy the stuff out haha.</p>",
        "id": 266936092,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641389918
    }
]