[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Phantom.20universe.20implicit/near/295346823\">said</a>:</p>\n<blockquote>\n<p>if you mouse over <code>foldl</code> and <code>foldr</code> you will see that <code>B</code> is unconstrained in <code>foldr</code> and <code>A</code> is unconstrained in <code>foldl</code>, resulting in two additional universe parameters to <code>Foldable</code></p>\n</blockquote>\n<p>Ah, I didn't even look too hard at <code>Foldable</code> I worked with. Sorry. </p>\n<p>I'll refactor it to the Lean's FoldableLeft, FoldableRight and Foldable.</p>",
        "id": 296095885,
        "sender_full_name": "cognivore",
        "timestamp": 1661864358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347012\">pcpthm</span> <a href=\"#narrow/stream/270676-lean4/topic/Phantom.20universe.20implicit/near/295355221\">said</a>:</p>\n<blockquote>\n<p>Setting <code>pp.universes true</code> reveals <code>u_1</code> is used in <code>Foldable</code> as Mario says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">asum</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asum.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Foldable.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Alternative.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Wow, thank you for the trick! It's amazing to know!</p>",
        "id": 296095969,
        "sender_full_name": "cognivore",
        "timestamp": 1661864387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> has marked this topic as resolved.</p>",
        "id": 296095993,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661864397
    },
    {
        "content": "<p>Oh, I don't think I even need FoldableLeft and FoldableRight, I can say that A is the same.</p>",
        "id": 296096716,
        "sender_full_name": "cognivore",
        "timestamp": 1661864597
    },
    {
        "content": "<p>But I'll still make FoldableLeft/Right because it's idiomatic.</p>",
        "id": 296096764,
        "sender_full_name": "cognivore",
        "timestamp": 1661864613
    }
]