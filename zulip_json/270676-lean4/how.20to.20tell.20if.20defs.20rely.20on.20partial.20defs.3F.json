[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">infLoop</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">infLoop</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">infLoop</span> <span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">infLoop</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">infLoop</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">,</span> <span class=\"n\">forIn</span><span class=\"o\">,</span> <span class=\"n\">Lean.Loop.forIn</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Lean.Loop.forIn.loop</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">infLoop</span>\n</code></pre></div>\n<p>I originally thought <code>partial</code> infected all downstream declarations, but evidently it does not. Is there any way to tell if a definition relies on another partial definition? (and if so, which partial definition?)</p>\n<p>Obviously I am stopped from proving false because I can't unfold through the partial definition, but I'm not sure how I would easily find that it relies on this partial function without just trying to prove something about its behavior.</p>\n<p>I'm also curious if there's an easy way to see what <code>opaque</code> definitions a definition relies on, since it seems like a similar problem to me</p>",
        "id": 306125399,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666732980
    },
    {
        "content": "<p>No, <code>partial</code> definitions are intentionally not viral</p>",
        "id": 306126842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733357
    },
    {
        "content": "<p><code>opaque</code> definitions are not axioms, they cannot be used to prove anything more than you already could</p>",
        "id": 306127006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733403
    },
    {
        "content": "<p>And partial definitions are implicitly opaque?</p>",
        "id": 306127397,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666733493
    },
    {
        "content": "<p>they are explicitly opaque, try <code>#print</code> on them</p>",
        "id": 306127469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733513
    },
    {
        "content": "<p>Your code is making the assumption that a partial definition satisfies its definitional equation, and this is generally false</p>",
        "id": 306127883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733623
    },
    {
        "content": "<p>Ah <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> didn't know <code>print</code> shows that!</p>\n<p>And I see that this is sound, that part makes sense to me -- but is there any way to see what opaque definitions a given symbol depends on? I'm not really concerned about soundness but rather as a human checking whether a given function is partial (even transitively so)</p>",
        "id": 306128416,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666733755
    },
    {
        "content": "<p>Looking at the dependency graph won't tell you if a function is partial</p>",
        "id": 306129173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733960
    },
    {
        "content": "<p>because the partial function might actually be total</p>",
        "id": 306129212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733969
    },
    {
        "content": "<p>it might even be proved total</p>",
        "id": 306129256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666733983
    },
    {
        "content": "<p>But if you want to you can do <code>#print axioms</code> yourself, just copy and modify the code</p>",
        "id": 306129437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666734030
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabPrintAxioms#src\">src4#Lean.Elab.Command.elabPrintAxioms</a></p>",
        "id": 306129602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666734079
    },
    {
        "content": "<p>Will put it on the list of things to check out at some point :)</p>",
        "id": 306131187,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666734506
    }
]