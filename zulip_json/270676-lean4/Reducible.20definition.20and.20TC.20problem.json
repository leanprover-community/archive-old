[
    {
        "content": "<p>I'm having a trouble to synthesize an instance where one of the arguments is hidden behind a reducible definition. Such definition such be invisible to TC but it does not seems so in a specific case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Trait</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">Trait.R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemiInner</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">semiInner</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trait</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Trait</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trait.R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">SemiInner.semiInner</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Real</span>\n  <span class=\"kd\">def</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Float</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n\n  <span class=\"c1\">-- These all work correctly</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Trait</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Trait</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">end</span> <span class=\"n\">Real</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">Float</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"n\">Float</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n\n  <span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"c1\">-- this works</span>\n<span class=\"kd\">end</span> <span class=\"n\">Float</span>\n</code></pre></div>\n<p>The problematic line is <code>#check (norm x : ℝ) </code></p>\n<p>The trace log ends with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.globalInstances</span><span class=\"o\">]</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">[]</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>It looks like there is no instance for <code>SemiInner ℝ (Trait.R ℝ)</code> However, this  <code>example : SemiInner ℝ (Trait.R ℝ) := by infer_instance</code> succeeds. </p>\n<p>The example with <code>Float</code> instead of <code>ℝ</code> works fine. Which is even stranger. Do I misunderstand something or is this a bug?</p>",
        "id": 269454958,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643220194
    },
    {
        "content": "<p>One more thing to point out, it is important that the type <code>ℝ</code> is enforced.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">norm</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>works but type is <code>Trait.R ℝ</code>. This type should reduce to <code>ℝ</code> as <code>Trait.R</code> is marked reducible. However </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">x</span>  <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fails</p>",
        "id": 269455669,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643220481
    },
    {
        "content": "<p>I don't think you can (usefully) mark constructors/projections as reducible</p>",
        "id": 269458103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643221474
    },
    {
        "content": "<p>To understand the issue, we have to display the implicit arguments. You can do that using <code>set_option pp.explicit true</code>. The trace now is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.newSubgoal</span><span class=\"o\">]</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.mk</span> <span class=\"n\">ℝ</span> <span class=\"n\">Float</span><span class=\"o\">))</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.globalInstances</span><span class=\"o\">]</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.mk</span> <span class=\"n\">ℝ</span> <span class=\"n\">Float</span><span class=\"o\">)),</span> <span class=\"o\">[]</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>Note the <code>Float</code> in the trace above. You can fix this issue using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">abbrev</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">Float</span>\n</code></pre></div>",
        "id": 269458160,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1643221495
    },
    {
        "content": "<p>That is, I don't think <code>Trait.R ℝ = ℝ</code> is a reducible defeq</p>",
        "id": 269458193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643221506
    },
    {
        "content": "<p>Assuming you didn't want to make <code>ℝ</code> reducible, I think another option would be <code>instance : SemiInner ℝ Float := ⟨λ x y : Float =&gt; x * y⟩</code></p>",
        "id": 269458707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643221698
    },
    {
        "content": "<p>Yes I don't want to make <code>ℝ</code> reducible.</p>\n<p>Great, I didn't know about the option <code>set_option pp.explicit true</code>, it will be super useful to debug this.</p>",
        "id": 269465693,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643224470
    },
    {
        "content": "<p>One thing I do not understand is how did <code>Float</code> sneaked in to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">main</span> <span class=\"n\">goal</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.mk</span> <span class=\"n\">ℝ</span> <span class=\"n\">Float</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269466154,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643224634
    },
    {
        "content": "<p>If I define <code>ℝ</code> as <code>inductive ℝ</code> it works, i.e. it is some arbitrary type with no connection to <code>Float</code>.</p>\n<p>Making the definition as <code>@[irreducible] def ℝ  := Float</code>, still produced the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">main</span> <span class=\"n\">goal</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.R</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.mk</span> <span class=\"n\">ℝ</span> <span class=\"n\">Float</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I really do not understand where the <code>Float</code> comes in.</p>",
        "id": 269467013,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643224971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Reducible.20definition.20and.20TC.20problem/near/269458103\">said</a>:</p>\n<blockquote>\n<p>I don't think you can (usefully) mark constructors/projections as reducible</p>\n</blockquote>\n<p>What do you mean by that? If you comment it out, the code breaks even more.</p>",
        "id": 269467302,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643225091
    },
    {
        "content": "<p>Ohh is <code>reducible</code> transitive? So because <code>Trait.R</code> is marked as reducible and if <code>Trait.R X</code> happens to be <code>ℝ</code> does it get reduced all the way to <code>Float</code>?  Is this really the intended behavior?</p>",
        "id": 269469010,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1643225771
    },
    {
        "content": "<blockquote>\n<p>One thing I do not understand is how did Float sneaked in to:</p>\n</blockquote>\n<p>The elaborator has to solve typing constraints, and one of them is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ℝ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.R.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span>\n</code></pre></div>\n<p>You can see how Lean solves it using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>The trace contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.R.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.delta.unfoldLeft</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">Float</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.R.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.delta.unfoldRight</span><span class=\"o\">]</span> <span class=\"n\">Trait.R</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">Float</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.168.1</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign</span><span class=\"o\">]</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"n\">Float</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.beforeMkLambda</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"n\">Float</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.checkTypes</span><span class=\"o\">]</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">Trait.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"bp\">=?=</span> <span class=\"n\">Trait.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.final</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"n\">Float</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.R.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Trait.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">success</span>\n</code></pre></div>\n<blockquote>\n<p>Making the definition as @[irreducible] def ℝ  := Float, still produced the goal:</p>\n</blockquote>\n<p>I will take a look at this issue.</p>\n<blockquote>\n<p>If I define ℝ as inductive ℝ it works, i.e. it is some arbitrary type with no connection to Float.</p>\n</blockquote>\n<p>Yes, structures (or inductives) are the way to go if you want to \"seal\" <code>ℝ</code><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">Real</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n    <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SemiInner</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℝ.mk</span> <span class=\"o\">(</span><span class=\"n\">x.val</span> <span class=\"bp\">*</span> <span class=\"n\">y.val</span><span class=\"o\">)</span> <span class=\"o\">⟩</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- Works</span>\n</code></pre></div>",
        "id": 269469972,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1643226170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Reducible.20definition.20and.20TC.20problem/near/269469010\">said</a>:</p>\n<blockquote>\n<p>Ohh is <code>reducible</code> transitive? So because <code>Trait.R</code> is marked as reducible and if <code>Trait.R X</code> happens to be <code>ℝ</code> does it get reduced all the way to <code>Float</code>?  Is this really the intended behavior?</p>\n</blockquote>\n<p>See comment above. The <code>Float</code> is not exposed by the TC procedure, but the elaborator while solving the typing constraints for <code>norm x</code>.</p>",
        "id": 269470215,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1643226283
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.R.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.delta.unfoldLeft</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.step</span><span class=\"o\">]</span> <span class=\"n\">Float</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Trait.R.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.166</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.167</span> <span class=\"bp\">?</span><span class=\"n\">m.168</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.delta.unfoldRight</span><span class=\"o\">]</span> <span class=\"n\">Trait.R</span>\n</code></pre></div>\n</blockquote>\n<p>Why did that happen? <code>Trait.R</code> is marked as reducible and <code>ℝ</code> is not, so it seems odd that it decided to unfold on the left first</p>",
        "id": 269470338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643226340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>Trait.R</code> is a projection, they have special treatment.</p>",
        "id": 269470551,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1643226436
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Making the definition as @[irreducible] def ℝ := Float, still produced the goal:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>I will take a look at this issue.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/commit/2fff4c42b71fc1d451bf968a7f1a07d10993f2eb\">https://github.com/leanprover/lean4/commit/2fff4c42b71fc1d451bf968a7f1a07d10993f2eb</a></p>",
        "id": 269471952,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1643226993
    }
]