[
    {
        "content": "<p>How does this work (version 4.0.0, commit 56cd6c1ff519, Release)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctor</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">inh</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">banana</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lol</span> <span class=\"n\">how</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"s2\">\"test\"</span> <span class=\"bp\">+</span> <span class=\"n\">f1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 283779934,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1653413484
    },
    {
        "content": "<p>If you <code>#print f</code> you can see what the elaborator makes out of it, its basically ignoring the first two matches and only uses the false branch. This seem like a bug in the elaborator to me indeed.</p>",
        "id": 283780622,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653413829
    },
    {
        "content": "<p>The syntax seems a bit tricky, if you avoid having two cases on the same line by repeating the first <code>=&gt;</code> you get a full error.</p>",
        "id": 283781773,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653414397
    },
    {
        "content": "<p>So it seems that problem is somewhere in the implementation of these “or” patterns.<br>\nThis reminds me about <a href=\"https://gist.github.com/forked-from-1kasper/cbf604a185dcd749b5685eb2fe16092a\">similar in some sense</a> bug in cubicaltt.</p>",
        "id": 283782548,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1653414754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197930\">@Uranus Testing</span> Thanks for raising this issue. I pushed a fix for it.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/dca8a8ed98cebc5e8d338a3a38e154859759b4c4\">https://github.com/leanprover/lean4/commit/dca8a8ed98cebc5e8d338a3a38e154859759b4c4</a></p>",
        "id": 283965353,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653534458
    }
]