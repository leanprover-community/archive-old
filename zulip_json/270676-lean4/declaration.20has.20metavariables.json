[
    {
        "content": "<p>I read somewhere that Lean4 improved the elaboration algorithm and we can use the field notation in more places so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span>\n</code></pre></div>\n<p>works in Lean4.<br>\nBut the expression above doesn't work when used inside an inductive type definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- &gt; (kernel) declaration has metavariables 'Test.mk'</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Test</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it a bug?</p>",
        "id": 224709408,
        "sender_full_name": "pcpthm",
        "timestamp": 1612176477
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover/lean4/commit/d4dc54a724\">https://github.com/leanprover/lean4/commit/d4dc54a724</a></p>",
        "id": 224711565,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1612177875
    },
    {
        "content": "<p>That commit broke this (I think):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SortedMap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LessOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">SortedMap</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)),</span>\n           <span class=\"n\">SortedMap</span> <span class=\"n\">l</span> <span class=\"bp\">→</span>\n           <span class=\"n\">l.Forall</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">kv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">kv.fst</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n           <span class=\"c1\">-- N.B., HasLessOrder combined with this Forall implies</span>\n           <span class=\"c1\">-- no duplicate keys.</span>\n           <span class=\"n\">SortedMap</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">galois_stdlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Galois</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List.lean</span><span class=\"o\">:</span><span class=\"mi\">54</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">contains</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">LessOrder</span> <span class=\"bp\">?</span><span class=\"n\">m.2558</span>\n</code></pre></div>",
        "id": 224808847,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1612222241
    },
    {
        "content": "<p>This works in before this patch</p>",
        "id": 224808945,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1612222294
    }
]