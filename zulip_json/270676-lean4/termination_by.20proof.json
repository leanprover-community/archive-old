[
    {
        "content": "<p>Given this declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">textLength</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.length</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">lengths</span> <span class=\"o\">:=</span> <span class=\"n\">children.map</span> <span class=\"n\">textLength</span>\n  <span class=\"n\">lengths.foldl</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>How can I proof <code>textLength</code> terminating?  I'm guessing it would be related to the fact that I'm always unwrapping one <code>element</code> per recursive call but I'm not sure how i can express this.</p>",
        "id": 272587990,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645358692
    },
    {
        "content": "<p>You should be able to use the <code>SizeOf</code> instances for <code>Foo</code> and <code>Array</code>, but  this particular use of a nested inductive might not be ready; if you feign having a termination proof, you still get <code>unexpected occurrence of recursive application Foo.textLength</code>.</p>",
        "id": 272598139,
        "sender_full_name": "Chris B",
        "timestamp": 1645370239
    },
    {
        "content": "<p>It shall be a partial in this case!</p>",
        "id": 272598338,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645370520
    },
    {
        "content": "<p>Something like this will be good for the eventual well-founded docs though, this pattern is pretty common.</p>",
        "id": 272598640,
        "sender_full_name": "Chris B",
        "timestamp": 1645370867
    },
    {
        "content": "<p>Yeah that's why I though it might just work^^ I'd love to help on the well founded docs but I don't really have a full picture on how it works myself yet</p>",
        "id": 272598805,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645371049
    },
    {
        "content": "<p>I think the main issue is that the recursive call to <code>textLength</code> appears unapplied in your definition. Here is a definition that avoids that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">textLength</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.length</span>\n    <span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">textLengthArr</span> <span class=\"n\">xs</span>\n  <span class=\"kd\">def</span> <span class=\"n\">textLengthArr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"o\">[]}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">textLength</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">textLengthArr</span> <span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SizeOf.sizeOf</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>The <code>sorry</code>s should be doable although they certainly make me wish we had <code>linarith</code> already :D</p>",
        "id": 272603595,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1645376212
    }
]