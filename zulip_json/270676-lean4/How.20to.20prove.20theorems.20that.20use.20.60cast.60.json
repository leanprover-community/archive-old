[
    {
        "content": "<p>Hi, everyone.</p>\n<p>Does anyone know how to prove this simple theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cast_heq</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ???</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Goals (1)</span>\n<span class=\"cm\">m n : Nat</span>\n<span class=\"cm\">h : Fin m = Fin n</span>\n<span class=\"cm\">a : Fin m</span>\n<span class=\"cm\">heq : HEq (cast h a) a</span>\n<span class=\"cm\">⊢ (cast h a).val = a.val</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 280004714,
        "sender_full_name": "Casavaca",
        "timestamp": 1650841936
    },
    {
        "content": "<p>You can prove it by generalizing the types <code>Fin m</code> and <code>Fin n</code> and use type variables. Then you can do <code>subst h; constructor</code>.</p>\n<p>In general, you may have an easier time working with <code>m = n</code> instead of <code>Fin m = Fin n</code> and writing a function <code>Fin.cast : m = n -&gt; Fin n -&gt; Fin m</code>. Then you can write lemmas about <code>Fin.cast</code> and reason about <code>Nat</code> equality rather than equality between types. Theorems about type equality are notoriously weak.  From <code>Fin n = Fin m</code>, you might expect that you could prove <code>n = m</code> but the logic wont take you there. You won't be about to prove more straightforward equations like <code>Nat /= Fin n</code> either btw.</p>",
        "id": 280006237,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650844293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20theorems.20that.20use.20.60cast.60/near/280006237\">said</a>:</p>\n<blockquote>\n<p>You can prove it by generalizing the types <code>Fin m</code> and <code>Fin n</code> and use type variables. Then you can do <code>subst h; constructor</code>.</p>\n</blockquote>\n<p>How does this work? The goal involves <code>.val</code>, which depends on these being <code>Fin</code>'s, and I don't see how to generalize it.</p>",
        "id": 280006368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650844488
    },
    {
        "content": "<p>This theorem should be provable due to cardinality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin_injective</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>With it, you can then prove the theorem with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin_cast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fin_injective</span> <span class=\"n\">h</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 280006399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650844543
    },
    {
        "content": "<p>You also should be able to prove <code>Nat /= Fin n</code> since <code>Nat</code> is an infinite type.</p>",
        "id": 280006444,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650844577
    },
    {
        "content": "<p>Using Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin_cast</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a.val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fin_injective</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_ne_fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≠</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this.not_fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280006572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650844779
    },
    {
        "content": "<p>Good points, I spoke too quickly.</p>",
        "id": 280009397,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650848547
    },
    {
        "content": "<p>My point was that the axioms don't allow you to reason directly about type equality. For types of different cardinalities or when you can prove a proposition about one type and not about another, indeed, you can conclude that types are different.</p>",
        "id": 280009484,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1650848677
    },
    {
        "content": "<p>Interesting. I wonder why we cannot prove <code>Fin n = Fin m -&gt; n = m</code>?</p>\n<p>In my imagination, if we apply injection on a equation of a type family, we should get that all indices are equal. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 280102019,
        "sender_full_name": "Casavaca",
        "timestamp": 1650907605
    },
    {
        "content": "<p>We can prove <code>Fin n = Fin m -&gt; n = m</code>, but not for the reason you stated. The <em>only</em> provable equalities of types are for when the types have different cardinalities. This works out for <code>Fin</code> because <code>Fintype.card (Fin n) = n</code>, but in the majority of cases this method is not available, including <code>Vector</code>.</p>\n<p>You could axiomatize that all type families are injective, but that is a short trip to inconsistency, because of this type family:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>The assertion <code>Foo x = Foo y -&gt; x = y</code> is a direct contradiction to Cantor's theorem.</p>",
        "id": 280111734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650912248
    },
    {
        "content": "<p>Could you tell me a little more / point to me something to read? I'm guessing something something have different cardinalities so it cannot be injective, but I don't understand this.</p>",
        "id": 280134951,
        "sender_full_name": "Casavaca",
        "timestamp": 1650923814
    },
    {
        "content": "<p>Which part? That we can prove injectivity for <code>Fin</code> or that we can prove non-injectivity for <code>Foo</code>?</p>",
        "id": 280136779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650924890
    },
    {
        "content": "<p>The second part is <a href=\"https://en.wikipedia.org/wiki/Cantor%27s_theorem\">Cantor's theorem</a>: for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> you cannot have an injective function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> is \"too big\"</p>",
        "id": 280136904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650924978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20theorems.20that.20use.20.60cast.60/near/280006399\">said</a>:</p>\n<blockquote>\n<p>This theorem should be provable due to cardinality:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin_injective</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that Lean 3 has this, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_injective\">docs#fin_injective</a></p>",
        "id": 280137068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650925102
    },
    {
        "content": "<p>It's not entirely trivial to prove, you need the pigeonhole principle to show that the cardinalities of finite sets are different</p>",
        "id": 280137182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650925189
    },
    {
        "content": "<p>I can see now why <code>inductive Foo : (Type u → Prop) → Type u</code> in not injective. Thanks very much.</p>\n<p>But injective type family is so intuitive. I wonder if there is a simple way to make it work, e.g., by add some limitations. Is there some work related to this?</p>",
        "id": 280392597,
        "sender_full_name": "Casavaca",
        "timestamp": 1651084518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489928\">@Casavaca</span>  The following thread should be relevant. <a href=\"https://github.com/leanprover/lean/issues/654\">https://github.com/leanprover/lean/issues/654</a><br>\nBTW, this feature is a recurrent source of unsoundness in other systems. Examples:</p>\n<ul>\n<li>Idris:  <a href=\"https://github.com/idris-lang/Idris-dev/issues/3687\">https://github.com/idris-lang/Idris-dev/issues/3687</a></li>\n<li>Agda: <a href=\"https://lists.chalmers.se/pipermail/agda/2010/001526.html\">https://lists.chalmers.se/pipermail/agda/2010/001526.html</a></li>\n<li>F*</li>\n</ul>",
        "id": 280397665,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651086977
    }
]