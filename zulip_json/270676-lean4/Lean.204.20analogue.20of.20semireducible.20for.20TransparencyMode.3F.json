[
    {
        "content": "<p>Some tactics expect a <code>TransparencyMode</code> argument, but while Lean 3 used <code>semireducible</code> and <code>reducible</code> as possible values, <code>semireducible</code> doesn't seem to be an option verbatim anymore; instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TransparencyMode</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"bp\">|</span> <span class=\"n\">default</span> <span class=\"bp\">|</span> <span class=\"n\">reducible</span> <span class=\"bp\">|</span> <span class=\"n\">instances</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>Which of these ought to be used in place of <code>semireducible</code> for a tactic with a <code>!</code> variant?</p>\n<p>I found some documenation for <code>TransparencyMode</code> on page 26 of the metaprogramming book, but I'm still not sure which of these corresponds to semireducibility (if any)—or if things have been totally reworked somehow. Is it <code>default</code>, since as I understand it <code>semireducible</code> was the default in Lean 3?</p>",
        "id": 302754098,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665096404
    },
    {
        "content": "<p>It's <code>default</code>, yes.</p>",
        "id": 302757168,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665098277
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 302757693,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665098523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> has marked this topic as resolved.</p>",
        "id": 302757709,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665098532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> has marked this topic as unresolved.</p>",
        "id": 302757758,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665098552
    },
    {
        "content": "<p>So, just to be sure the behavior is the same—the convention is that <code>!</code> variants use the <code>default</code> transparency mode, while ones without <code>!</code> use the <code>reducible</code>transparency mode, right? (Just double checking since based on the names I'd expect it to be flipped)</p>",
        "id": 302757993,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665098714
    },
    {
        "content": "<p>Yes, that's the convention. The idea is that <code>!</code> is telling the tactic to work harder (i.e. by being more willing to unfold definitions).</p>",
        "id": 302763211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665102218
    },
    {
        "content": "<p>It would be nice to resolve that convention with lean 4 core; Leo pointed out that this could be confusing given that lean 4 declarations ending in <code>!</code> usually means they panic under some conditions</p>",
        "id": 302763756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665102613
    },
    {
        "content": "<p>Speaking of syntax, it would also be great if we could use <code>syntax \"contrapose\" \"!\"?</code> (or whatever we end up using instead of bang).</p>",
        "id": 302763904,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665102721
    },
    {
        "content": "<p>Personally I think it's fine to just have this secondary meaning, although it's muddier in the case of macros, which <em>also</em> use <code>!</code> with incompatible meaning, sometimes to indicate that they are macros (this convention is dying out but still exists in the <code>s!</code>/<code>f!</code>/<code>m!</code> macros), but since they look like terms they might use the term meaning (who's to say what the <code>!</code> in <code>panic! \"\"</code> means?) or since they are like tactics they might use the tactic meaning (no macros like that exist right now, but I can imagine some mathlib tactics having term forms that inherit the tactic syntax)</p>",
        "id": 302764044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665102823
    },
    {
        "content": "<p>I think we could implement something like <code>syntax \"contrapose\" afterIdent(\"!\")?</code> where <code>afterIdent</code> splits the previous ident token if it consumed the specified string</p>",
        "id": 302764389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665103140
    },
    {
        "content": "<p>is there a tactic naming convention for specifying the use of other transparency modes? e.g. appending something like <code>!!</code> or <code>!a</code> to indicate <code>all</code> or <code>!i</code> for <code>instances</code>? or do we typically not implement these in tactics for some reason? (I don’t have any usage experience, so I don’t know if this is a reasonable question in practice!)</p>",
        "id": 302779252,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665117231
    },
    {
        "content": "<p>Some tactics that have this kind of option allow a <code>config</code> argument which will have a field for the reducibility setting. They are not used enough for the sigil soup to be worth the readability cost</p>",
        "id": 302780931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665118968
    },
    {
        "content": "<p>It occurs to me that <code>erw</code> should maybe be renamed to <code>rw!</code> to follow this naming convention (it is the <code>reducibility := .default</code> version of <code>rw</code>)</p>",
        "id": 302781055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665119061
    },
    {
        "content": "<p>Knuth would probably write <code>rw$</code> and <code>contrapose$</code> to hint that they are doing \"more expensive\" stuff.</p>",
        "id": 302785690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665122849
    }
]