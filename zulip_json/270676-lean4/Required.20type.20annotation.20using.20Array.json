[
    {
        "content": "<p>The following function type checks as expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rowStr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Array.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>However, if the type annotation is removed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rowStr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Array.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>This error is thrown</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>The equivalent function on lists (without type annotation) is fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rowStr</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>Is this expected, and if so, why is the type annotation required?</p>\n<p>Using the Lean 4 2021-09-30 nightly.</p>",
        "id": 255673813,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1633049957
    },
    {
        "content": "<p>Both of these work, which is interesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rowStr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Array.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span> <span class=\"s2\">\"\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">rowStr'</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Array.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>",
        "id": 255675693,
        "sender_full_name": "Chris B",
        "timestamp": 1633051274
    },
    {
        "content": "<p>There is no short answer to this question. Elaboration process has several moving pieces that sometimes interact in unexpected ways. I will try to give some context</p>\n<ul>\n<li>The <code>if-then-else</code> takes a <code>Prop</code> (+ implicit argument saying it is decidable) instead of a <code>Bool</code>. When a <code>Bool</code> is used, we need to apply a coercion.</li>\n<li>The elaborator propates typing constraints.</li>\n</ul>\n<p>When elaborating <code>if b then x else y</code> without knowing <code>b</code>s type, the elaborator will assume the type is <code>Prop</code>. In the array example, this is exactly what happens, and it infers that <code>b : Prop</code> since no typing information was available, and then fails trying to show it is decidable.<br>\nThe List example works because the elaborator succeeds in inferring the type of <code>b</code> before it tries to elaborate the <code>if-then-else</code>. Note that <code>Array.foldr</code> has extra parameters with default values which slightly affect the elaboration order.<br>\nAny tiny change in the elaboration order may trigger the failure above. I will try to address this issue by using a custom elaborator for <code>if-then-else</code> terms.</p>\n<p>Note that, if we use a <code>foldr</code> for <code>Array</code> that is similar to <code>List.foldr</code>, then it will work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foldr'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as.foldr</span> <span class=\"n\">f</span> <span class=\"n\">init</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rowStr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">foldr'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>The following variant of the <code>List.foldr</code> example doesn't work because the type of <code>b</code> is now not inferred before we elaborate the <code>if-then-else</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rowStr'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"s2\">\"#\"</span> <span class=\"k\">else</span> <span class=\"s2\">\" \"</span><span class=\"o\">)</span> <span class=\"s2\">\"\"</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>That is, very small changes in the elaboration order trigger the problem.</p>\n<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span>  Your two examples work because Lean 4 has support for patterns in <code>fun</code> (i.e., we can write <code>fun (a, b) =&gt; ...</code>), and it interpreting <code>(b)</code> as a pattern, which then affects the elaboration order, and allows the elaborator to succeed. </p>\n<p>By adding a custom elaborator for <code>if-then-else</code> that waits for the type of the condition, I think we will make the process more robust, and all of the variants above will work.</p>",
        "id": 255677435,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633052755
    },
    {
        "content": "<p>Interesting, thanks for the breakdown.</p>",
        "id": 255678248,
        "sender_full_name": "Chris B",
        "timestamp": 1633053462
    },
    {
        "content": "<p>Thanks, interesting how such seemingly small changes lead to subtle and complex considerations, but a great deal is going on here.</p>",
        "id": 255678834,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1633053896
    },
    {
        "content": "<p>I improved the <code>if-then-else</code> elaborator. Now, all examples above are elaborated correctly.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/2546a2cf7e23bf1c39ca9f7738af25bc7ffcc468\">https://github.com/leanprover/lean4/commit/2546a2cf7e23bf1c39ca9f7738af25bc7ffcc468</a></p>",
        "id": 255692385,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633066155
    }
]