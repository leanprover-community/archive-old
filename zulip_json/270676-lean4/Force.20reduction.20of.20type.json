[
    {
        "content": "<p>When using dependent types, is there a way to force Lean to reduce a given type?<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Typable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Typable</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Var</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Typable</span> <span class=\"n\">Var</span> <span class=\"n\">where</span>\n  <span class=\"n\">type</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">Var.a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- Error</span>\n</code></pre></div>\n<p>Here <code>x + 1</code> doesn't work because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"n\">Var.a</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"bp\">?</span><span class=\"n\">m.651</span>\n</code></pre></div>\n<p>That is, Lean doesn't \"see through\" <code>type Var.a</code> being <code>Nat</code>. Is there a way I can help/force Lean to see this?</p>",
        "id": 296599473,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1662043087
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Typable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">Typable.type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Typable</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Var</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">typableVar</span> <span class=\"o\">:</span> <span class=\"n\">Typable</span> <span class=\"n\">Var</span> <span class=\"n\">where</span>\n  <span class=\"n\">type</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">Var.a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>In general, typeclass resolution only unfolds <code>reducible</code> definitions.</p>",
        "id": 296603858,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1662044269
    }
]