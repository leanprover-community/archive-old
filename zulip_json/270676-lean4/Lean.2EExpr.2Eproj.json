[
    {
        "content": "<p>In the metaprogramming book, <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> described this constructor as:</p>\n<blockquote>\n<p><code>proj</code> is for projection. Suppose you have a structure such as <code>p : α × β</code>,<br>\n  rather than storing the projection <code>π₁ p</code> as <code>app π₁ p</code>, it is expressed as<br>\n<code>proj Prod 0 p</code>. This is for efficiency reasons</p>\n</blockquote>\n<p>Is this documented somewhere? Where can I learn more about it? Thanks in advance!</p>",
        "id": 284367708,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653917463
    },
    {
        "content": "<p>well, you are talking about the very book that would be the documentation, so not really</p>",
        "id": 284368856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653918095
    },
    {
        "content": "<p>is there something in particular you want to know about it?</p>",
        "id": 284368873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653918108
    },
    {
        "content": "<p>They are called \"primitive projections\" and they correspond to the fields of a structure</p>",
        "id": 284368940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653918127
    },
    {
        "content": "<p>Hm, is there anything we lose (but efficiency) if we face them as regular applications? Like some expressiveness power</p>",
        "id": 284369105,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653918233
    },
    {
        "content": "<p>no, it's just for efficiency</p>",
        "id": 284370951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653919161
    },
    {
        "content": "<p>they are not supposed to be an extension to the logic, they just abbreviate applications of the recursor</p>",
        "id": 284371076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653919204
    },
    {
        "content": "<p>nat and string literals are the same way</p>",
        "id": 284371124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1653919218
    },
    {
        "content": "<p>Alright, thanks!</p>",
        "id": 284371930,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653919610
    },
    {
        "content": "<p>How can I make it print <code>proj</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#inspect\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">`</span><span class=\"n\">inspect</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">t.ctorName</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">aa</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"bp\">#</span><span class=\"n\">inspect</span> <span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"c1\">-- app</span>\n<span class=\"bp\">#</span><span class=\"n\">inspect</span> <span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span> <span class=\"s2\">\"hi\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aa</span> <span class=\"c1\">-- app</span>\n<span class=\"bp\">#</span><span class=\"n\">inspect</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>           <span class=\"c1\">-- app</span>\n<span class=\"bp\">#</span><span class=\"n\">inspect</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>         <span class=\"c1\">-- app</span>\n</code></pre></div>",
        "id": 284566103,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1654058117
    },
    {
        "content": "<p>Not easily. <code>proj</code> is generally not supposed to show up in normal terms. But you can look at the implementation of the projections to find occurrences of <code>proj</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#inspect\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ci</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">t.getId</span> <span class=\"k\">then</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">repr</span> <span class=\"n\">ci.value</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">aa</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"bp\">#</span><span class=\"n\">inspect</span> <span class=\"n\">Foo.aa</span>\n<span class=\"c1\">-- Lean.Expr.lam</span>\n<span class=\"c1\">--   `self</span>\n<span class=\"c1\">--   (Lean.Expr.const `Foo [] (Expr.mkData 1485976967 (bi := Lean.BinderInfo.default)))</span>\n<span class=\"c1\">--   (Lean.Expr.proj</span>\n<span class=\"c1\">--     `Foo</span>\n<span class=\"c1\">--     0</span>\n<span class=\"c1\">--     (Lean.Expr.bvar 0 (Expr.mkData 4279369707 (looseBVarRange := 1) (bi := Lean.BinderInfo.default)))</span>\n<span class=\"c1\">--     (Expr.mkData 1237988559 (looseBVarRange := 1) (approxDepth := 1) (bi := Lean.BinderInfo.default)))</span>\n<span class=\"c1\">--   (Expr.mkData 3385561612 (approxDepth := 2) (bi := Lean.BinderInfo.default))</span>\n</code></pre></div>",
        "id": 284567846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654060359
    },
    {
        "content": "<p>Is there any way to reduce an <code>Expr</code> in a way that minimizes the constructors used? I.e. reducing away not only <code>let</code>s but also <code>proj</code>s and literals?</p>",
        "id": 284577137,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654069315
    },
    {
        "content": "<p>No built-in way I think, since Lean of course <em>wants</em> to preserve these</p>",
        "id": 284577558,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654069648
    },
    {
        "content": "<p>Note that lean <em>does</em> know that a projection can unfold:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.aa</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Foo.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 284577714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654069744
    },
    {
        "content": "<p>(on second thought, this might be eta for structures kicking in instead)</p>",
        "id": 284577731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654069759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.2EExpr.2Eproj/near/284577558\">said</a>:</p>\n<blockquote>\n<p>No built-in way I think, since Lean of course <em>wants</em> to preserve these</p>\n</blockquote>\n<p>For all kinds of transformations it is a bit weird to work on those doublets though, since making the transformation consistent already determines them uniquely</p>",
        "id": 284578156,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654070056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.2EExpr.2Eproj/near/284577731\">said</a>:</p>\n<blockquote>\n<p>(on second thought, this might be eta for structures kicking in instead)</p>\n</blockquote>\n<p>It's actually older than that, see <code>isDefEqProj</code>. And <code>isDefEqNat/isDefEqStringLit</code> for literals.</p>",
        "id": 284579797,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654071201
    }
]