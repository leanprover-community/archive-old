[
    {
        "content": "<p>Unification is a bit less powerful here in Lean 4 than in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Symmetric</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">r</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hr</span> <span class=\"c1\">-- works in Lean 3, fails in Lean 4</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">r</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hr</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works in Lean 4</span>\n</code></pre></div>\n<p>I don't know what the desired behaviour is (i.e. whether this should work or not), but the reason it's autoport-breaking is that in core Lean 4 we have <code>Equivalence</code> defined with <code>{x y}</code> fields and in Mathlib4 we have <code>Symmetric</code> defined with <code>⦃x y⦄</code>. I don't have any objections to putting in all the lambdas of course.</p>",
        "id": 308787437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668000874
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span></p>",
        "id": 308788617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001215
    },
    {
        "content": "<p>I'm torn on whether this should work. The only reason it works in lean 3 is because it doesn't do auto-implicits in the first place; if you wrote <code>\\lam _ _, hr</code> then it wouldn't work in lean 3 either. I think <code>@hr</code> will work in this case</p>",
        "id": 308789025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001356
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/equivalence.20relations.20are.20symmetric/near/308132822\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/equivalence.20relations.20are.20symmetric/near/308132822</a> is also related</p>",
        "id": 308789194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, the issue is due to the new implicit lambda feature in Lean 4. <code>@hr</code> is a good workaround.<br>\nThe binder notation <code>⦃x y⦄</code> is very Lean-specific, and does not work well with the implicit lambda feature. <br>\nIt would be great to collect many examples that are triggering this problem. We should discuss this issue in the next dev meeting.</p>",
        "id": 308795346,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1668003247
    }
]