[
    {
        "content": "<p>how do i fix this type error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allPairsAux</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">allPairsAux</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)::</span><span class=\"n\">accum</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">accum</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.18</span> <span class=\"bp\">?</span><span class=\"n\">u.15</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.166</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.25</span>\n</code></pre></div>",
        "id": 272036308,
        "sender_full_name": "Joseph O",
        "timestamp": 1644958449
    },
    {
        "content": "<p>should i write out the return type?</p>",
        "id": 272036635,
        "sender_full_name": "Joseph O",
        "timestamp": 1644958597
    },
    {
        "content": "<p>yeah that fixed it</p>",
        "id": 272036692,
        "sender_full_name": "Joseph O",
        "timestamp": 1644958619
    },
    {
        "content": "<p>excuse my previous question, i have a new one:</p>\n<p>how can i have gaurds on patterns, like in f# i can do</p>\n<div class=\"codehilite\" data-code-language=\"F#\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272038458,
        "sender_full_name": "Joseph O",
        "timestamp": 1644959375
    },
    {
        "content": "<p>Afaik Lean doesn't support pattern guards, so you would just write <code>=&gt; if x &gt; 5 then .. else ..</code>.</p>",
        "id": 272040057,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1644960151
    },
    {
        "content": "<p>Here's a hacky way to have a pattern guard, where you add an additional boolean discriminant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"s2\">\" matches \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"s2\">\" where \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">matches</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>The <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L206\">matches notation</a> gave me the idea.</p>",
        "id": 272041641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644960913
    },
    {
        "content": "<p>Man, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> you are the master of hacky solutions</p>",
        "id": 272051294,
        "sender_full_name": "Joseph O",
        "timestamp": 1644966487
    }
]