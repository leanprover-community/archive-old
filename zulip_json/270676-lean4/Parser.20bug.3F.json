[
    {
        "content": "<p>I stumbled on what seems like a strange bug. The following works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Term.TestingParser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aa</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"a\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"b\"</span>\n<span class=\"kd\">@[term_parser]</span> <span class=\"kd\">def</span> <span class=\"n\">ab</span> <span class=\"o\">:=</span>\n  <span class=\"n\">leading_parser</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Parser.optional</span> <span class=\"n\">Parser.ident</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">bb</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Parser.optional</span> <span class=\"n\">Parser.ident</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parsedIndicator</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">ab</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"s2\">\"0\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"s2\">\"1\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"s2\">\"2\"</span>\n\n<span class=\"kd\">@[term_elab ab]</span> <span class=\"kd\">def</span> <span class=\"n\">elabab</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"n\">parsedIndicator</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">b</span> <span class=\"n\">xy</span>    <span class=\"c1\">-- 1</span>\n</code></pre></div>\n<p>but if you disallow optional idents after the <code>bb</code> parser, it misses the <code>b</code> case and hits the <code>_</code> case, as demonstrated by the <code>2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab.Term.TestingParser'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aa</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"a\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"b\"</span>\n<span class=\"kd\">@[term_parser]</span> <span class=\"kd\">def</span> <span class=\"n\">ab</span> <span class=\"o\">:=</span>\n  <span class=\"n\">leading_parser</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">Parser.optional</span> <span class=\"n\">Parser.ident</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bb</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parsedIndicator</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">ab</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"s2\">\"0\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"s2\">\"1\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"s2\">\"2\"</span>\n\n<span class=\"kd\">@[term_elab ab]</span> <span class=\"kd\">def</span> <span class=\"n\">elabab</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"n\">parsedIndicator</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">b</span>    <span class=\"c1\">-- 2</span>\n</code></pre></div>\n<p>Is this a bug, or just a gotcha? (I made sure I was on the latest nightly before posting.)</p>",
        "id": 308898298,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668039428
    },
    {
        "content": "<p>This does appear to be a bug. cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aa</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"a\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"b\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">ab</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bb</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">ab</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"k\">#print</span> <span class=\"n\">f</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ab</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"k\">if</span> <span class=\"n\">Syntax.isOfKind</span> <span class=\"n\">__discr.raw</span> <span class=\"bp\">`</span><span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n    <span class=\"n\">let_fun</span> <span class=\"n\">__discr_1</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr.raw</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"n\">Syntax.isOfKind</span> <span class=\"n\">__discr_1</span> <span class=\"bp\">`</span><span class=\"n\">aa</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">__discr_2</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr_1</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr.raw</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n      <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">__discr_2</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr.raw</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr.raw</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n      <span class=\"mi\">2</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"n\">Syntax.isOfKind</span> <span class=\"n\">__discr.raw</span> <span class=\"bp\">`</span><span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">__discr_1</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr.raw</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">if</span> <span class=\"n\">Syntax.isOfKind</span> <span class=\"n\">__discr_1</span> <span class=\"bp\">`</span><span class=\"n\">bb</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n        <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr_1</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n        <span class=\"mi\">1</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.getArg</span> <span class=\"n\">__discr.raw</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n        <span class=\"mi\">2</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">__discr</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n      <span class=\"mi\">2</span>\n</code></pre></div>\n<p>The <code>else if Syntax.isOfKind __discr.raw `ab = true</code> case is unreachable, because we already checked that <code>Syntax.isOfKind __discr.raw `ab = true</code> is false, and the <code>1</code> return value only appears in that branch. In other similar syntax matches, this condition is deduplicated and the <code>1</code> would end up in the first <code>if</code> case. I suspect this has to do with the fact that this is using a parser of arity 2 inside a <code>&lt;|&gt;</code>, which is discouraged.</p>",
        "id": 308906425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668045259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Parser.20bug.3F/near/308906425\">said</a>:</p>\n<blockquote>\n<p>I suspect this has to do with the fact that this is using a parser of arity 2 inside a <code>&lt;|&gt;</code>, which is discouraged.</p>\n</blockquote>\n<p>Yes. Don't do that.</p>",
        "id": 308939721,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668068988
    },
    {
        "content": "<p>Is the proper workaround making a <code>leading_parser</code> for every time you’d want to put a parser of arity &gt;1 inside a <code>&lt;|&gt;</code>? I noticed that worked, but wasn’t sure if this was the best option or if there was something better than <code>&lt;|&gt;</code> to use in this situation.</p>",
        "id": 309065531,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668109526
    },
    {
        "content": "<p>you can use <code>group</code></p>",
        "id": 309069728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668110932
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aa</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"a\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">bb</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"s2\">\"b\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">ab</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span> <span class=\"n\">Parser.group</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bb</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">ab</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"k\">#print</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>works as intended</p>",
        "id": 309069964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668111016
    },
    {
        "content": "<p>Though for all of this you should use <code>syntax</code> instead, which automatically solves this issue</p>",
        "id": 309070156,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668111087
    }
]