[
    {
        "content": "<p>Hi, I'm using lean4.0.0-m1 and I've encountered the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hi.foo</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">s</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hi.anothername</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">s</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Error here</span>\n</code></pre></div>\n<p>The error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">bar</span> <span class=\"n\">s</span> <span class=\"n\">foo</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">foo</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">bar</span> <span class=\"bp\">?</span><span class=\"n\">m.110</span> <span class=\"n\">foo</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>It seems that the error only occurs whenever <code>hi.foo</code> has the same name as <code>foo</code> even though they are in different namespace, that is the error does not occur if I change <code>hi.foo</code> to <code>hi.foo1</code>.</p>",
        "id": 222115103,
        "sender_full_name": "Jason KY.",
        "timestamp": 1610134204
    },
    {
        "content": "<p>No, this is not a bug.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">hi.anothername</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">s</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is expanded into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hi</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">anothername</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">s</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- So, `hi` here is `hi.foo`</span>\n<span class=\"kd\">end</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 222115399,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1610134378
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 222115561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610134464
    },
    {
        "content": "<p>Ah, I see! Thanks</p>",
        "id": 222115576,
        "sender_full_name": "Jason KY.",
        "timestamp": 1610134470
    },
    {
        "content": "<p>Also, how does it compile without us specifying what <code>\\a</code> is?</p>",
        "id": 222115609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610134490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://leanprover.github.io/lean4/doc/autobound.html\">https://leanprover.github.io/lean4/doc/autobound.html</a></p>",
        "id": 222115642,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610134514
    },
    {
        "content": "<p>oh it works for lower case Latin and Greek letters</p>",
        "id": 222115688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610134551
    },
    {
        "content": "<p>that's nice</p>",
        "id": 222115698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610134557
    },
    {
        "content": "<p>thanks</p>",
        "id": 222115752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610134574
    }
]