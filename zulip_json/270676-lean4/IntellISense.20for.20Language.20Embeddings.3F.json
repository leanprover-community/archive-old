[
    {
        "content": "<p>So I just finished a big update to <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a> that allows for the full embedding of C code into Lean and I am wondering how feasible would it be in either the short or long term to get the Lean extension to do C Intellisense on the C code -- or, more generally, augment the editor's IntelliSense in various ways from within Lean?</p>\n<p>I imagine this would be a lot of work, but I know that it is possible for one language drive another in VS Code, I am curious if there is even the possibility of  supporting this in the future and I would be more than happy to help where I can should such a project materialize.</p>",
        "id": 265671349,
        "sender_full_name": "Mac",
        "timestamp": 1640083723
    },
    {
        "content": "<p>See <a href=\"https://github.com/microsoft/language-server-protocol/issues/1366\">https://github.com/microsoft/language-server-protocol/issues/1366</a></p>",
        "id": 265671961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640084189
    },
    {
        "content": "<blockquote>\n<p>augment the [completion LSP response] in various ways from within Lean?</p>\n</blockquote>\n<p>I think that would be useful, also for other projects.  I guess you could then start ccls as a subprocess, send it the current function as a C file, and then proxy the LSP requests.</p>",
        "id": 265672305,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640084421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Thanks! Yeah, I know that it is possible to interleave languages within a VS Code extension, but is it feasible for this (and/or other IntelliSense features) to be driven by Lean itself? Or would that likely need another VS Code extension on top of Lean 4 one to make such a thing possible? That is, would it be possible to do something like Widgets for IntelliSense (or can Widgets already do that)?</p>",
        "id": 265672589,
        "sender_full_name": "Mac",
        "timestamp": 1640084617
    },
    {
        "content": "<p>It is not currently possible to override LSP request handlers from a Lean plugin, but that would be a trivial extension <a href=\"https://github.com/leanprover/lean4/blob/552a488f352a51e194cf9b5ddda908faf952e3b3/src/Lean/Server/Requests.lean#L142-L143\">https://github.com/leanprover/lean4/blob/552a488f352a51e194cf9b5ddda908faf952e3b3/src/Lean/Server/Requests.lean#L142-L143</a></p>",
        "id": 265672728,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640084702
    },
    {
        "content": "<p>We don't really want to override here, we want to aggregate the results.</p>",
        "id": 265672758,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640084730
    },
    {
        "content": "<p>Well, you can call the original one from the override :) . But a more general chaining system would be nice.</p>",
        "id": 265672892,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640084799
    },
    {
        "content": "<blockquote>\n<p>but is it feasible for this [...] features to be driven by Lean itself?</p>\n</blockquote>\n<p>I think that's the most reasonable option.  The LSP issue I've linked above says that that's their preferred approach.  The vscode docs second this.</p>",
        "id": 265672921,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640084815
    },
    {
        "content": "<p>More concretely, I would just start a C language server (like ccls) from inside lean and use that to answer the completion requests.</p>",
        "id": 265672993,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640084872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Cool! I sadly have very little understanding of how the Lean server works, so I guess I had better start familiarizing myself with it. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  Any tips, tricks, hints, advice on the Lean LSP that might help me orient such a project?</p>\n<p>To illustrate my minimal knowledge on topic, my understanding (from what I have picked up in discussions) s that the elaborator builds up something called an 'info tree' which is used to handle requests. Thus, I imagine to do delegation here, the plugin would need to start a C language server, send/update the relevant C snippets to the server, keep some mapping between the C code locations and the Lean code locations in the info tree and then use those mapping to translate requests from client on the Lean the source to requests on the the C source which are then sent to the server. Is that somewhat right?</p>",
        "id": 265673978,
        "sender_full_name": "Mac",
        "timestamp": 1640085571
    },
    {
        "content": "<p>Yes, I think that's the right general approach.  The part that isn't supported yet is hijacking the completion request for the Lean LSP server.  But you can already experiment with starting the other LSP server, we have a pretty full-featured LSP library after all.</p>",
        "id": 265674122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640085663
    },
    {
        "content": "<blockquote>\n<p>keep some mapping between the C code locations and the Lean code locations in the info tree</p>\n</blockquote>\n<p>As far as I understand the alloy library doesn't do any fancy translation, it just prints the atoms and identifiers in the syntax tree to a C file.  I would just compute this mapping in the completion request.  You can get the macro-expanded syntax tree from the info tree, and you have the cursor position from the request, this should be enough information to craft a request to the C server.</p>",
        "id": 265674465,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640085852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> wouldn't that still require reconstructing the entire C file worth of C commands  on each request in order to determine where the offset from the current command's syntax is relative to the whole the C file? I guess, though, assuming that the reprint of the syntax tree to the C language server does not change any offsets within the command, that would just some basic addition of the lengths of each command's syntax.</p>",
        "id": 265675455,
        "sender_full_name": "Mac",
        "timestamp": 1640086665
    },
    {
        "content": "<p>Yes, but I don't think the position computation is a big problem.  ∑ previous_commands + index_in_current_one  (I'm not sure if the C server needs some time to process the file.)</p>",
        "id": 265675570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640086760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Makes sense. One other question: is it feasible to leverage the existing C language server used by the user's VS Code extensions to handle the request, rather than choosing one server and starting that? The reason I ask, is that I imagine if Lean starts it own server it may not be configured in the same way as the one the user usually uses in VS Code (or whatever LSP client is being used).</p>",
        "id": 265676103,
        "sender_full_name": "Mac",
        "timestamp": 1640087184
    },
    {
        "content": "<blockquote>\n<p>is it feasible to leverage the existing C language server used by the user's VS Code extensions to handle the request, rather than choosing one server and starting that?</p>\n</blockquote>\n<p>Which LSP server to start, and what arguments (include paths) to give it is a valid issue.  Note that users may also use other editors than vscode.  I'm not aware of any general way to get the LSP binary path + arguments for another extension from within vscode.</p>",
        "id": 265680583,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640090491
    },
    {
        "content": "<p>Is <a href=\"https://code.visualstudio.com/api/language-extensions/embedded-languages#language-services\">https://code.visualstudio.com/api/language-extensions/embedded-languages#language-services</a> a thing to read?</p>",
        "id": 265681406,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640091106
    },
    {
        "content": "<p>It seems to be what <a href=\"https://github.com/microsoft/vscode-html-languageservice\">https://github.com/microsoft/vscode-html-languageservice</a> uses which surely has to deal with similar things</p>",
        "id": 265681497,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640091138
    },
    {
        "content": "<p>AFAIU, language services are just LSP-servers-as-a-library.</p>",
        "id": 265681889,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640091409
    },
    {
        "content": "<p>It doesn't seem they're too different from my skim so far, yeah -- there's some sample code it seems here <a href=\"https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-embedded-language-service\">https://github.com/microsoft/vscode-extension-samples/tree/main/lsp-embedded-language-service</a> that I'm about to flip through</p>",
        "id": 265682073,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640091518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/IntellISense.20for.20Language.20Embeddings.3F/near/265680583\">said</a>:</p>\n<blockquote>\n<p>Note that users may also use other editors than vscode.  I'm not aware of any general way to get the LSP binary path + arguments for another extension from within vscode.</p>\n</blockquote>\n<p>There is <a href=\"https://code.visualstudio.com/api/language-extensions/embedded-languages#request-forwarding\">Request Forwarding</a> on the client side to invoke another language extension to handle requests. I'm not sure if there is a way to do this server side, though.</p>",
        "id": 265729230,
        "sender_full_name": "Mac",
        "timestamp": 1640117544
    },
    {
        "content": "<p>I am resuscitating  this old thread because I have developed <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a> to the point where the last major feature it needs is C/C++ LSP support. I have installed <code>ccls</code> as a test language server to call out to and plan to use the <code>chainLspRequestHandler</code> (from the old <a href=\"https://github.com/leanprover/lean4/pull/903\">PR</a>) to pass requests along to it. However, I am not very well versed on the inner workings of an LSP. Does anyone have any advice  on how to proceed from here and/or tips on what I should watch out for in this undertaking?</p>",
        "id": 289135339,
        "sender_full_name": "Mac",
        "timestamp": 1657505393
    },
    {
        "content": "<p>Also, IIRC and understand the code, request handlers can only be registered via plugins (through <code>builtin_initialize</code>), not by normal <code>initialize</code> blocks. I am curious as to what the rational behind that is?</p>",
        "id": 289136207,
        "sender_full_name": "Mac",
        "timestamp": 1657506592
    },
    {
        "content": "<p>One major problem I am having is the C/C++ language servers (<code>clangd</code> and <code>ccls</code>) both seem to want to have a real directory and real files to compile. That is, while the LSP specification supports virtual documents, <code>clangd</code> and <code>ccls</code> do not appear to.</p>",
        "id": 289155481,
        "sender_full_name": "Mac",
        "timestamp": 1657525525
    },
    {
        "content": "<p>Okay, so apparently providing it with a blank c file and then the virtual document does work (it uses the text of the virtual document), but just the virtual document without a corresponding c file does not?</p>",
        "id": 289157664,
        "sender_full_name": "Mac",
        "timestamp": 1657527009
    },
    {
        "content": "<p>Hilariously, this means that passing <code>file:///dev/null</code> as the document uri works to create a virtual document, but I don't think there is a parallel on non-MSYS2 Windows?</p>",
        "id": 289161198,
        "sender_full_name": "Mac",
        "timestamp": 1657529068
    },
    {
        "content": "<p>Windows has some \"fun\" pseudo files in any folder <a href=\"https://stackoverflow.com/questions/313111/is-there-a-dev-null-on-windows\">https://stackoverflow.com/questions/313111/is-there-a-dev-null-on-windows</a></p>",
        "id": 289161468,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657529203
    },
    {
        "content": "<p>Thanks! Yep, just saw that.</p>",
        "id": 289161945,
        "sender_full_name": "Mac",
        "timestamp": 1657529442
    },
    {
        "content": "<p>Does Lean have any synchronization primitives (e.g., locks / mutexes)? I am not sure how else I am suppose to synchronize message and version ids across the various request threads (plus other shared state about the connection with the language server).</p>",
        "id": 289163379,
        "sender_full_name": "Mac",
        "timestamp": 1657530262
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1280\">https://github.com/leanprover/lean4/issues/1280</a></p>",
        "id": 289164240,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657530820
    },
    {
        "content": "<p><code>IO.Ref</code> works well enough for the Lean language server</p>",
        "id": 289164272,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657530840
    },
    {
        "content": "<p>Thanks again! I should probably be looking for these things before I ask the question. <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span><br>\n(It is also morning and I have yet to sleep so that may be part of the problem. <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span>)</p>",
        "id": 289164578,
        "sender_full_name": "Mac",
        "timestamp": 1657531018
    },
    {
        "content": "<p>I guess my last major question for the moment (which there may also already be an easy answer I have not yet found): is there a way to hook into the Lean server's main loop to forward request / diagnostics from C server or should I just invoke <code>publishDiagnostics</code> etc. directly from the request handlers I am chaining?</p>",
        "id": 289165110,
        "sender_full_name": "Mac",
        "timestamp": 1657531363
    },
    {
        "content": "<p>If you don't somehow change the behavior of the current <code>publishDiagnostics</code>-calling code, the two different sets of messages will just override each other in the editor, no?</p>",
        "id": 289165581,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657531645
    },
    {
        "content": "<p>So I have made a lot of progress on Alloy with LSP integration and have got basic hovers working (still need to have a proper work thread for the server, though). However, I encountered this fun bit of formatting when it comes to markdown hover text:</p>\n<p><a href=\"/user_uploads/3121/l7oQnerP6p1YsAbIBVlrcb9l/AlloyMarkdownHoverFormatting.PNG\">AlloyMarkdownHoverFormatting.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/l7oQnerP6p1YsAbIBVlrcb9l/AlloyMarkdownHoverFormatting.PNG\" title=\"AlloyMarkdownHoverFormatting.PNG\"><img src=\"/user_uploads/3121/l7oQnerP6p1YsAbIBVlrcb9l/AlloyMarkdownHoverFormatting.PNG\"></a></div><p>Is there some way to get this to render nicer <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> , or <span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span>? I made sure to update to the VSCode Lean 4 extension to v0.0.84 because I thought that the line height may have been fixed by Wojciech's PR <a href=\"https://github.com/leanprover/vscode-lean4/pull/215\">#215</a>, but unfortunately it was not.</p>",
        "id": 289871472,
        "sender_full_name": "Mac",
        "timestamp": 1658045375
    },
    {
        "content": "<p>The hovers are completely different from the infoview issue.</p>",
        "id": 289871521,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658045414
    },
    {
        "content": "<p>Can you post the markdown that you're sending?</p>",
        "id": 289871524,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658045438
    },
    {
        "content": "<p><code>clangd</code> produces the following markdown for the hover above:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">### function `printf`</span>\n\n---\n→ <span class=\"sb\">`int`</span>\nParameters:\n<span class=\"k\">-</span> <span class=\"sb\">`const char * __format`</span>\n\n---\n```objective-cpp\ninline int printf(const char *__format, ...)\n```\n</code></pre></div>",
        "id": 289871622,
        "sender_full_name": "Mac",
        "timestamp": 1658045621
    },
    {
        "content": "<p>Okay, then it renders just as it should.</p>",
        "id": 289871706,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658045727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the horizontal line is suppose to merge with the code block that comes after it?</p>",
        "id": 289871771,
        "sender_full_name": "Mac",
        "timestamp": 1658045805
    },
    {
        "content": "<p>Ah, now I see what you mean.  I was distracted by the headline followed by a horizontal line followed by an arrow.</p>",
        "id": 289871859,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658045890
    },
    {
        "content": "<p>I'm using <code>ccls</code> instead of <code>clangd</code>, which has more sensible hovers.  (Docstring followed by horizontal line followed by type signature.)</p>",
        "id": 289871886,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658045984
    },
    {
        "content": "<p>I am using <code>clangd</code> because I was having great difficulty getting <code>ccls</code> to work in a root-less, virtual document manner.</p>",
        "id": 289872726,
        "sender_full_name": "Mac",
        "timestamp": 1658047192
    },
    {
        "content": "<p><code>ccls</code> wants <code>file://</code> document URIs and does not seem to allow the <code>file:///dev/null/</code> trick I figured out to get <code>clangd</code> to work with virtual documents.</p>",
        "id": 289872859,
        "sender_full_name": "Mac",
        "timestamp": 1658047379
    },
    {
        "content": "<p>While the null URI tricks does allow the  <code>ccls</code> server to run, it will complain that the virtual document is not indexed and error out.</p>",
        "id": 289873238,
        "sender_full_name": "Mac",
        "timestamp": 1658047959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> so is the verdict that there is no neat way to fix the formatting? I put an extra newline between the bar and the the code block (thinking that the grouping maybe be the problem) but that still did not work:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">### function `printf`</span>\n\n---\n\n→ <span class=\"sb\">`int`</span>\nParameters:\n<span class=\"k\">-</span> <span class=\"sb\">`const char * __format`</span>\n\n---\n\n```objective-cpp\ninline int printf(const char *__format, ...)\n```\n</code></pre></div>",
        "id": 289873781,
        "sender_full_name": "Mac",
        "timestamp": 1658048716
    },
    {
        "content": "<p>The formatting works \"as intended\".  clangd wants weird horizontal bars and duplicate type signatures, so it gets them.  Just to make sure, do you get the same formatting if you use clangd directly on a C file?</p>",
        "id": 289874848,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658050223
    },
    {
        "content": "<p>The problem is the non-existent padding between the second horizontal line and the code block, I assume?</p>",
        "id": 289875566,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658051409
    },
    {
        "content": "<p>Personally, I think the whole message is the problem.  But I believe Mac is particularly unhappy about the missing padding, yes.</p>",
        "id": 289876069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658052297
    },
    {
        "content": "<p><a href=\"https://github.com/clangd/clangd/issues/747\">https://github.com/clangd/clangd/issues/747</a></p>",
        "id": 289876106,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658052336
    },
    {
        "content": "<p>Another question, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> / <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> : Is there anything wrong with lightening the requirement of <code>register/chainLspRequestHandler</code> from <code>builtin_intiialize</code> to just <code>initialize</code> (so that users can register/chain handlers without plugins)? I am currently doing that manually by copying the definition and removing the check, but it seems feasible to do it in core as well (though we probably do want at least an <code>Lean.initializing</code> check there).</p>",
        "id": 289899974,
        "sender_full_name": "Mac",
        "timestamp": 1658085643
    },
    {
        "content": "<p>I can never remember why that check is there, so it's probably fine?</p>",
        "id": 289901514,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658087876
    },
    {
        "content": "<p>On a somewhat related note, I ended up encoding the entirety of the <code>ClientCapabilities</code> LSP <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#clientCapabilities\">specification</a> into Lean  for Alloy (see <a href=\"https://github.com/tydeu/lean4-alloy/blob/3b4a9a630c7ab766c6b9f2c3c5c3e7f30e6b7ca0/Alloy/Util/Server/Capabilities.lean\">here</a>). Is that something worth PR'ing <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>? (I'm asking you as you are one of the authors of the <a href=\"https://github.com/leanprover/lean4/blob/5083d47e4d3ca8ad6ff7f955b7f02d46cab1fdfb/src/Lean/Data/Lsp/Capabilities.lean\">current fragment</a> of the specification in the Lean core).</p>",
        "id": 289915234,
        "sender_full_name": "Mac",
        "timestamp": 1658109203
    },
    {
        "content": "<p>Hm, are you planning to make use of having these in core? I think the attitude so far has been to add what we need but ignore the rest.</p>",
        "id": 289915651,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658109868
    },
    {
        "content": "<p>True. No, I don't have any plans at the moment. My reason for asking was that some of the TODOs in the server code (such as <a href=\"https://github.com/leanprover/lean4/blob/5083d47e4d3ca8ad6ff7f955b7f02d46cab1fdfb/src/Lean/Data/Lsp/Basic.lean#L180-L181\">here</a> and <a href=\"https://github.com/leanprover/lean4/blob/5083d47e4d3ca8ad6ff7f955b7f02d46cab1fdfb/src/Lean/Data/Lsp/Capabilities.lean#L45\">here</a>) suggested to me that the goal of the LSP code may be to encode the entire LSP specification, but what was done thus far was just what was most expedient to complete (and necessary for the Lean server's current functionality). Thus, I was curious if a PR of some of the rest of the specification would be appreciated.</p>",
        "id": 289916086,
        "sender_full_name": "Mac",
        "timestamp": 1658110586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Since you've already done the work, I think it would be a waste not to upstream it. Especially since maintenance and, hopefully, compilation overhead should be pretty low.</p>",
        "id": 289931495,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658129449
    },
    {
        "content": "<p>I've sometimes wondered if we shouldn't store the original json for open-ended definitions like the client capabilities.  Any fixed schema is going to truncate something here.  In particular it is impossible to access any of the left out fields from user code, because the watchdog already strips it out.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WithOriginalJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">json</span> <span class=\"o\">:</span> <span class=\"n\">Json</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">WithOriginalJson</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToJson</span> <span class=\"o\">(</span><span class=\"n\">WithOriginalJson</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toJson</span> <span class=\"o\">:=</span> <span class=\"n\">WithOriginalJson.json</span>\n</code></pre></div>",
        "id": 289932848,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658130465
    },
    {
        "content": "<p>Hm, are you planning to make use of having these in core? I think the attitude so far has been to add what we need but ignore the rest.</p>",
        "id": 289942824,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1658137397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/IntellISense.20for.20Language.20Embeddings.3F/near/289932848\">said</a>:</p>\n<blockquote>\n<p>I've sometimes wondered if we shouldn't store the original json for open-ended definitions like the client capabilities.  Any fixed schema is going to truncate something here. </p>\n</blockquote>\n<p>While I do I like idea, it is worth noting that client capabilities are not an open-ended definition according to the schema. There is one field <code>experimental</code> which is user defined (and which I implement by parameterizing <code>ClientCapabilities</code> by a type <code>Experimental</code> which defaults to <code>Json</code>), everything else is very fixed (according to the spec -- that of course doesn't stop implementers from violating the spec).</p>",
        "id": 289996693,
        "sender_full_name": "Mac",
        "timestamp": 1658164715
    },
    {
        "content": "<p>This is a good point.  I was actually thinking of upgrades in the LSP specification version.  Because that's precisely where you need client capabilities: to figure out if the client supports the newest feature that just appeared in the spec today.  But I guess that's similar to new fields being added to <code>Diagnostic</code>.</p>",
        "id": 289999858,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1658166328
    },
    {
        "content": "<p>New problem: the Lean LSP specification does not support the full range of default semantic tokens and modifiers, thus I can't forward the highlights for such tokens from <code>clangd</code>. Would a quick PR that expands <code>SemanticTokenType</code> and <code>SemanticTokenModifier</code> to include the full list be welcomed?</p>",
        "id": 290069272,
        "sender_full_name": "Mac",
        "timestamp": 1658220157
    },
    {
        "content": "<p>I went ahead and made one: <a href=\"https://github.com/leanprover/lean4/pull/1325\">#1325</a>. Hope that is okay. (Still need to wait to make sure I didn't break anything, though.)</p>",
        "id": 290070318,
        "sender_full_name": "Mac",
        "timestamp": 1658220764
    }
]