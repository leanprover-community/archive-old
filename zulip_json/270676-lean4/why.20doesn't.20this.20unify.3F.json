[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ApplicativeTransformation</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span>\n  <span class=\"n\">preserves_pure'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n  <span class=\"n\">preserves_seq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">ApplicativeTransformation</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">ApplicativeTransformation.app</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ApplicativeTransformation.mk</span> <span class=\"n\">f</span> <span class=\"n\">pp</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  ps</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.1275 : Sort ?u.1274</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (x : F (α✝ → β✝)) (y : F α✝), f β✝ (Seq.seq x fun x =&gt; y) = Seq.seq (f (α✝ → β✝) x) fun x =&gt; f α✝ y : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>In Lean 3 this worked (this is from <code>control.traversable.basic</code> in mathlib). I find these error messages confusing. There is an obvious solution to <code> ?m.1275 : Sort ?u.1274 = &lt;some proposition&gt; : Prop</code>. Changing to <code>(ps : _)</code> and variants didn't seem to fix the problem. What am I missing?</p>",
        "id": 312806870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669716544
    },
    {
        "content": "<p>I think it's because Lean 4 unfolds coercions, so all that's left on the LHS of the <code>=</code> is <code>f</code>. <em>Edit:</em> with the version below, it's <code>(ApplicativeTransformation.mk f pp ps).app</code> on the LHS, so this theory isn't right.</p>",
        "id": 312808117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669716984
    },
    {
        "content": "<p>I'm still a bit confused by what's going on, but giving the full types works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ApplicativeTransformation.mk</span> <span class=\"n\">f</span> <span class=\"n\">pp</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but there's no point for it being a <code>@[simp]</code> lemma since it's just <code>f = f</code> in the end (at least that's the error the attribute reports. When I <code>#print</code> the lemma I see a more complicated type... Ah, the LHS is <code>(ApplicativeTransformation.mk f pp ps).app</code>, which is something <code>simp</code> will already simplify?)</p>",
        "id": 312808331,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669717075
    },
    {
        "content": "<p>It has to do with the implicit variables in preserves_pure' and preservsed_seq' (but I can't say I understand why!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ApplicativeTransformation</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">where</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span>\n  <span class=\"n\">preserves_pure'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n  <span class=\"n\">preserves_seq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulApplicative</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">ApplicativeTransformation</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">ApplicativeTransformation.app</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ApplicativeTransformation.mk</span> <span class=\"n\">f</span> <span class=\"n\">pp</span> <span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>^--- that works</p>",
        "id": 312882153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669739501
    },
    {
        "content": "<p>Maybe hygiene has something to do with it?</p>",
        "id": 312882353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669739549
    },
    {
        "content": "<p>Oh nice! So this looks like a bug?</p>",
        "id": 312924044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669751150
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo1mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- implicit binder</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo1mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo1mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.114 : Sort ?u.113</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (a : α✝), a = a : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Should I open an issue or is this expected behaviour?</p>",
        "id": 312929489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669752931
    },
    {
        "content": "<p>I'm not sure. In lean3 we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo1mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- implicit binder</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo1mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo1mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 312933581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669754360
    },
    {
        "content": "<p>But this works in Lean 3: <a href=\"https://github.com/leanprover-community/mathlib/blob/cb48031ce12812ece794b782299def24bd8daba0/src/control/traversable/basic.lean#L90\">https://github.com/leanprover-community/mathlib/blob/cb48031ce12812ece794b782299def24bd8daba0/src/control/traversable/basic.lean#L90</a></p>",
        "id": 312934363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669754611
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo2mk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails on second foo2mk</span>\n</code></pre></div>\n<p>I am now completely bewildered.</p>",
        "id": 312935940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669755155
    },
    {
        "content": "<p>I think this is the implicit lambdas feature in action (lean inserts fun {alpha} =&gt; automatically).</p>",
        "id": 312938879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669756367
    },
    {
        "content": "<p>It might work if you write foo2mk @x</p>",
        "id": 312938909,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669756384
    },
    {
        "content": "<p>Thanks! Yes this <code>@</code> trick fixes it (in both Lean 3 and Lean 4), although I don't really understand why; my mental model of what's going on must be wrong.</p>",
        "id": 312948059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669759977
    },
    {
        "content": "<p>The <code>@</code> operator does two things:</p>\n<ol>\n<li>When applied to an application like <code>@foo x y z</code> (or <code>@(f a) x y z</code> for that matter), it will elaborate the application part <code>foo x y z</code> with all implicit arguments as explicit. So for example if <code>foo</code> or <code>f a</code> here had the type <code>∀ {x y z : ℕ}, ℕ</code> then <code>x y z</code> would be passed in instead of using <code>_ _ _</code> for those arguments and giving a type error. This is the normal use of <code>@</code> from lean 3.</li>\n<li>When used in a context where the expected type is an implicit lambda like <code>foo @_</code> where <code>foo : (∀ {x : ℕ}, ℕ) → ℕ</code>, it prevents automatic insertion of <code>fun x =&gt;</code>. That is, <code>foo 0</code> is interpreted the same as <code>foo @(fun _ =&gt; 0)</code>. This is a lean 4 original.</li>\n</ol>\n<p>Notice that the behavior (1) affects the elaboration of the thing <em>inside</em> the expression, while (2) affects the context <em>around</em> the expression (the expected type). The <code>@</code> simultaneously affects both but you can get just one or the other behavior by using <code>(@e)</code> or <code>@(e)</code> as appropriate.</p>",
        "id": 312949927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669760818
    },
    {
        "content": "<p>The present issue has to do with behavior (2). When you use <code>foo2mk @x</code> it will pass <code>x</code> directly to <code>foo2mk</code> rather than doing <code>foo2mk @(fun _ =&gt; x)</code> like it normally would. Because the type of <code>x</code> is unknown, this would cause it to get the type <code>x : ∀ (a : ?α), a = a</code> and then the second application will fail.</p>",
        "id": 312950303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669760982
    },
    {
        "content": "<p>Pushed a small improvement for the implicit lambda feature. All examples in this thread have been included in the test suite, and are working without the <code>@</code> annotation.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/3e45060dd52c13ee4904da1ccf6279df154f1a8a\">https://github.com/leanprover/lean4/commit/3e45060dd52c13ee4904da1ccf6279df154f1a8a</a></p>",
        "id": 312951373,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1669761446
    }
]