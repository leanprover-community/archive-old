[
    {
        "content": "<p>A few months ago, Giles Gardam <a href=\"https://arxiv.org/abs/2102.11818\">disproved</a> a long-standing conjecture - often called <a href=\"https://www.quantamagazine.org/mathematician-disproves-group-algebra-unit-conjecture-20210412/\">Kaplansky's Unit conjecture</a>, a very basic statement in Algebra.</p>\n<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> and I have formalized this proof in <code>lean 4</code> at <a href=\"https://github.com/siddhartha-gadgil/Polylean/tree/main/Polylean\">https://github.com/siddhartha-gadgil/Polylean/tree/main/Polylean</a>. The README in that folder gives an outline of the code. Our proof mixes proving with some computation, and part of our motivation was to use the nature of <code>lean 4</code> as a theorem prover as well as a programming language with both aspects integrated.</p>\n<p>More details will follow soon in a blog post or two. Comments and suggestions are very welcome.</p>",
        "id": 284431767,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1653977716
    },
    {
        "content": "<p>Oh nice! I suggested to an MSc student that they tried formalising Gardam's work in Lean 3 but we ended up doing something else. The different models for the fg group in question looked to be to be the scary part.</p>",
        "id": 284453624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653992243
    },
    {
        "content": "<p>Thanks. <br>\nOne just has to use one of the models, and we used the description as a Metabelian group. Gardam explicitly gives the data needed: the group action and the cocycle. </p>\n<p>We took advantage of the programming capabilities of lean 4: using the <code>Decidable</code> typeclass the 64 checks for being a cocycle became just <code>by decide</code> with automation by typeclass inference.</p>",
        "id": 284454345,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1653992678
    },
    {
        "content": "<p>It had not occurred to me to try lean 4 for this -- my instinct would have been \"well you'll have to make free abelian groups etc, just stick with lean 3\".</p>",
        "id": 284454527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653992791
    },
    {
        "content": "<p>Mathlib4 has abelian groups, though not homomorphisms. We did have to define being free etc, but this meant we could do this effectively, so equality of homomorphisms is decidable for finitely generated free abelian groups. We clearly redid some stuff which is ready with mathlib, but that was not that much work (a few days work for <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> and myself).</p>",
        "id": 284454924,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1653993092
    },
    {
        "content": "<p>Nice work, that must surely be the first mathematical proof of this size in Lean 4. I'm a bit surprised at the lack of a lakefile.lean, how did you even develop the project?</p>",
        "id": 284455256,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653993322
    },
    {
        "content": "<p>Thanks.<br>\nThere is a <code>lakefile.lean</code>. My link was to a sub-folder of an existing project. The project is at <a href=\"https://github.com/siddhartha-gadgil/Polylean\">https://github.com/siddhartha-gadgil/Polylean</a>.</p>",
        "id": 284455418,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1653993419
    },
    {
        "content": "<p>Thank you. The link is actually to a sub-folder of the main folder containing the relevant code. The project contains a <code>lakefile.lean</code> in the outermost directory (<a href=\"https://github.com/siddhartha-gadgil/Polylean/blob/main/lakefile.lean\">https://github.com/siddhartha-gadgil/Polylean/blob/main/lakefile.lean</a>).</p>",
        "id": 284455437,
        "sender_full_name": "Anand Rao",
        "timestamp": 1653993429
    },
    {
        "content": "<p>Oh my, I completely missed that!</p>",
        "id": 284455481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653993459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Formalizing.20Gardam's.20disproof.20of.20a.20.22Kaplansky.20Conjecture.22/near/284454924\">said</a>:</p>\n<blockquote>\n<p>Mathlib4 has abelian groups, though not homomorphisms. We did have to define being free etc, but this meant we could do this effectively, so equality of homomorphisms is decidable for finitely generated free abelian groups. We clearly redid some stuff which is ready with mathlib, but that was not that much work (a few days work for <span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> and myself).</p>\n</blockquote>\n<p>Adding to this, the key requirement for defining the group <code>P</code> was actually the Metabelian group construction, which turned out to be fairly short and self-contained (requiring only homomorphisms and group actions). We could have in principle done without the theory of free Abelian groups, but as <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> mentioned, we did this to automate the checking of the cocycle condition.</p>",
        "id": 284457370,
        "sender_full_name": "Anand Rao",
        "timestamp": 1653994649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Formalizing.20Gardam's.20disproof.20of.20a.20.22Kaplansky.20Conjecture.22/near/284454345\">said</a>:</p>\n<blockquote>\n<p>We took advantage of the programming capabilities of lean 4: using the <code>Decidable</code> typeclass the 64 checks for being a cocycle became just <code>by decide</code> with automation by typeclass inference.</p>\n</blockquote>\n<p>Does this use of the computation power of Lean 4 means you also trust more or is it still using Lean 4 without extra axioms?</p>",
        "id": 284468986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654000996
    },
    {
        "content": "<p>In the last stage we had to use <code>native_decide</code>. In principle <code>by decide</code> should work but in practice it times out. The algorithms are far from optimal, but I don't know if that is the key bottleneck, or whether once <em>per module compilation</em> lands things will just work.</p>",
        "id": 284472123,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654002413
    },
    {
        "content": "<p>We did not introduce axioms though. It is functions returning <code>Decidable P</code> strung together by typeclass inference.</p>",
        "id": 284472210,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654002460
    },
    {
        "content": "<p>And the part I mentioned automating: showing that we have a cocycle and a group action, is entirely using <code>by decide</code>, so no trust issues.</p>",
        "id": 284472354,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654002528
    },
    {
        "content": "<p>Just to be clear, per module compilation (as in compilation to native code) will make <code>native_decide</code> faster, but not <code>decide</code></p>",
        "id": 284477365,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654004674
    },
    {
        "content": "<p>I see. <code>native_decide</code> is instantaneous already. Is there some way to bridge the gap?</p>",
        "id": 284483094,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654006744
    },
    {
        "content": "<p>Or should one accept <code>native_decide</code> as safe?</p>",
        "id": 284483152,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654006775
    },
    {
        "content": "<p>I had a variant of the approach where instead of <code>by decide</code> or <code>by native_decide</code> I used <code>apply</code> to reduce to a certain Boolean function being true. However <code>rfl</code> or <code>simp</code> on that function timed out too.</p>",
        "id": 284483746,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654007007
    },
    {
        "content": "<p>There are some plans for improving symbolic reduction that should help with <code>decide</code>, but no concrete time frame yet afaik</p>",
        "id": 284484263,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654007233
    },
    {
        "content": "<p>It makes sense that <code>rfl</code> in that context would do roughly as much work as <code>decide</code>, yes</p>",
        "id": 284484303,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654007251
    },
    {
        "content": "<p>For the present then I will use <code>native_decide</code> wherever needed.</p>",
        "id": 284484478,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654007308
    },
    {
        "content": "<p>In case anyone is interested, I have written a blog post with some details: <a href=\"https://siddhartha-gadgil.github.io/automating-mathematics/posts/formalizing-gardam-disproof-kaplansky-conjecture/\">https://siddhartha-gadgil.github.io/automating-mathematics/posts/formalizing-gardam-disproof-kaplansky-conjecture/</a></p>",
        "id": 285333668,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1654650746
    },
    {
        "content": "<p>Very nice!<br>\nI should mention that this has been also formalized in Lean3, by <span class=\"user-mention\" data-user-id=\"452637\">@Cedric Holle</span> . We did run into lots of difficulties because of lean3's performance, and had to run through complicated hoops to get the proof accepted in reasonable time. I was sure <span class=\"user-mention\" data-user-id=\"452637\">@Cedric Holle</span> had posted his code, but can't find it; hopefully he can comment.</p>",
        "id": 313705542,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1670082922
    },
    {
        "content": "<p>In some weak sense I am more impressed by the Lean 3 proof because clearly Lean 4 is a much better tool for doing this job ;-)</p>",
        "id": 313707638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670084014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263407\">Laurent Bartholdi</span> <a href=\"#narrow/stream/270676-lean4/topic/Formalizing.20Gardam's.20disproof.20of.20a.20.22Kaplansky.20Conjecture.22/near/313705542\">said</a>:</p>\n<blockquote>\n<p>Very nice!<br>\nI should mention that this has been also formalized in Lean3, by <span class=\"user-mention silent\" data-user-id=\"452637\">Cedric Holle</span> . We did run into lots of difficulties because of lean3's performance, and had to run through complicated hoops to get the proof accepted in reasonable time. I was sure <span class=\"user-mention silent\" data-user-id=\"452637\">Cedric Holle</span> had posted his code, but can't find it; hopefully he can comment.</p>\n</blockquote>\n<p>You can find my code here: <a href=\"https://github.com/todbeibrot/counter-example-to-the-unit-conjecture-for-group-rings\">https://github.com/todbeibrot/counter-example-to-the-unit-conjecture-for-group-rings</a><br>\nIt needs ~6GB of memory and it takes some time. Also, I didn't add any comments and some things are quite inelegant.</p>",
        "id": 313877060,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1670206660
    }
]