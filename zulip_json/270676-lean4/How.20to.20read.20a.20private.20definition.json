[
    {
        "content": "<p>Recently Jeremy asked me what the automatically generated definition for this type was. It turned out to be harder than anticipated to find out.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">FOTerm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">FOTerm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">FOTerm</span> <span class=\"bp\">→</span> <span class=\"n\">FOTerm</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">BEq</span> <span class=\"n\">FOTerm</span> <span class=\"c1\">-- instBEqFOTerm</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">instBEqFOTerm</span>\n<span class=\"c1\">-- def instBEqFOTerm : BEq FOTerm :=</span>\n<span class=\"c1\">-- { beq := [anonymous] }</span>\n\n<span class=\"c1\">-- ..what?</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">instBEqFOTerm</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- def instBEqFOTerm : BEq.{0} FOTerm :=</span>\n<span class=\"c1\">-- @BEq.mk.{0} FOTerm _private.0.beqFOTerm✝</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">_private.0.beqFOTerm</span><span class=\"bp\">✝</span> <span class=\"c1\">-- syntax fail</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Eval</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">instBEqFOTerm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!.</span><span class=\"n\">constName</span><span class=\"bp\">!</span>\n<span class=\"c1\">-- _private.0.beqFOTerm._@._hyg.2488</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">_private.0.beqFOTerm._</span><span class=\"bp\">@.</span><span class=\"n\">_hyg.2488</span> <span class=\"c1\">-- more syntax fail</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">instBEqFOTerm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!.</span><span class=\"n\">constName</span><span class=\"bp\">!</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!</span>\n<span class=\"c1\">-- #0</span>\n\n<span class=\"c1\">-- The definition has no value?</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">instBEqFOTerm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!.</span><span class=\"n\">constName</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">ConstantInfo.opaqueInfo</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"bp\">|</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"c1\">-- it's opaque.. because it's a partial def</span>\n<span class=\"c1\">-- The actual definition isn't there, it's in an implementedBy that the compiler generated</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">ci</span> <span class=\"o\">:=</span> <span class=\"n\">Compiler.mkUnsafeRecName</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">instBEqFOTerm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!.</span><span class=\"n\">constName</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">ci</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">value</span><span class=\"bp\">!</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">-- fun (x x_1 : FOTerm) =&gt;</span>\n<span class=\"c1\">--   let localinst : BEq FOTerm := { beq := _unsafe_rec };</span>\n<span class=\"c1\">--   match x, x_1 with</span>\n<span class=\"c1\">--   | FOTerm.var a, FOTerm.var b =&gt; true &amp;&amp; a == b</span>\n<span class=\"c1\">--   | FOTerm.app a a_1, FOTerm.app b b_1 =&gt; true &amp;&amp; a == b &amp;&amp; a_1 == b_1</span>\n<span class=\"c1\">--   | x, x_2 =&gt; false</span>\n\n<span class=\"c1\">-- success!</span>\n</code></pre></div>",
        "id": 240869066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622493239
    },
    {
        "content": "<p>Do we need a <code>sudo #print</code>?</p>",
        "id": 240869267,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622493402
    },
    {
        "content": "<p>I vote for <code>#print_dammit</code> :P</p>",
        "id": 240869409,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622493541
    },
    {
        "content": "<p>Maybe not the answer you wanted, but I <em>always</em> use tracing instead of <code>#print</code>ing a helper definition after the fact.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.command</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Doesn't work from a different file of course.</p>",
        "id": 240869580,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622493706
    },
    {
        "content": "<p>I think this story would have ended better if the name of the definition generated by the deriving instance was <code>instBEqFOTerm.impl</code> instead of <code>_private.0.beqFOTerm._@._hyg.2488</code>. Then I could have just written <code>#print instBEqFOTerm.impl._unsafe_rec</code></p>",
        "id": 240869650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622493749
    },
    {
        "content": "<p>Here's the version pulled from <code>trace.Elab.command</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"kd\">mutual</span>\n  <span class=\"kd\">set_option</span> <span class=\"k\">match</span><span class=\"bp\">.</span><span class=\"n\">ignoreUnusedAlts</span><span class=\"bp\">✝</span> <span class=\"n\">true</span>\n  <span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">beqFOTerm</span><span class=\"bp\">✝</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">FOTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">FOTerm</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">localinst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">FOTerm</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">beqFOTerm</span><span class=\"bp\">✝</span><span class=\"o\">⟩</span><span class=\"bp\">;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">FOTerm.var</span> <span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">FOTerm.var</span> <span class=\"n\">b</span><span class=\"bp\">✝</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"bp\">✝</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">✝</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">FOTerm.app</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span><span class=\"bp\">✝²</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">FOTerm.app</span> <span class=\"n\">b</span><span class=\"bp\">✝¹</span> <span class=\"n\">b</span><span class=\"bp\">✝²</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span><span class=\"bp\">✝</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">✝¹</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">a</span><span class=\"bp\">✝²</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"bp\">✝²</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span><span class=\"bp\">✝</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's <code>private</code> <em>and</em> hygienic. That's like double private</p>",
        "id": 240869792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622493921
    },
    {
        "content": "<p>apparently there's even a hygienic <code>set_option</code> option?</p>",
        "id": 240869880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622494020
    },
    {
        "content": "<p>wait, even <code>Bool✝</code> has a tombstone, that looks fishy</p>",
        "id": 240869917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622494053
    },
    {
        "content": "<p>This is before elaboration, so there is no telling whether <code>Bool</code> will be a global reference</p>",
        "id": 240870388,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622494481
    },
    {
        "content": "<p>And yes, all <code>ident</code>s in a quotation are hygiened. The <code>set_option</code> elaborator will remove the scopes again.</p>",
        "id": 240870489,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622494596
    }
]