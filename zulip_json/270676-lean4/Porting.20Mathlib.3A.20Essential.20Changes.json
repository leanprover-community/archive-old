[
    {
        "content": "<p>It would be helpful to list all the essential changes here.</p>",
        "id": 221985621,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610046109
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a> is a starting point</p>",
        "id": 221986148,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610046353
    },
    {
        "content": "<h2><code>begin</code>-<code>end</code> Blocks and Commas</h2>\n<p>Without the macro in <a href=\"https://leanprover.github.io/lean4/doc/tactics.html#begin-end-lovers\">https://leanprover.github.io/lean4/doc/tactics.html#begin-end-lovers</a>, <code>begin</code>-<code>end</code> blocks and commas are gone.</p>",
        "id": 222017348,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610062666
    },
    {
        "content": "<h3>&gt; Macro Approach</h3>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"begin \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"bp\">?</span> <span class=\"s2\">\"end\"</span><span class=\"bp\">%</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- preserve position of the last token, which is used</span>\n  <span class=\"c1\">-- as the error position in case of an unfinished proof</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"o\">}</span><span class=\"bp\">%$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Nat.zeroAdd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Nat.addZero</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<h3>&gt; Built-in Approach</h3>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Nat.zeroAdd</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Nat.addZero</span>\n</code></pre></div>",
        "id": 222018597,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610063675
    },
    {
        "content": "<p>I think the non-macro approach would be cleaner in the long-term.</p>",
        "id": 222018631,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610063712
    },
    {
        "content": "<h2><code>Type*</code></h2>\n<p>Without the macro in <a href=\"https://leanprover.github.io/lean4/doc/typeobjs.html\">https://leanprover.github.io/lean4/doc/typeobjs.html</a>, <code>Type*</code> is gone.</p>",
        "id": 222019536,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610064400
    },
    {
        "content": "<h3>&gt; Macro Approach</h3>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"Type*\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n<span class=\"k\">#check</span> <span class=\"n\">g</span>\n</code></pre></div>\n<h3>&gt; Built-in Approach</h3>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n<span class=\"k\">#check</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 222019668,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610064528
    },
    {
        "content": "<p>I don't think it will be a big deal to switch to <code>by</code>. There is no need to preserve syntax this much, particularly if we're going to be doing the port based on an initial syntax transformation of mathlib to lean 4 style</p>",
        "id": 222021257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610065851
    },
    {
        "content": "<p>I do think it's worth it to keep <code>Type*</code> and <code>Sort*</code> though, which as I mentioned in another thread can be added to the mathlib prelude</p>",
        "id": 222021306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610065901
    },
    {
        "content": "<p>Rather than figuring out every last syntax / style detail now, it might be more fun to look into writing a linter in Lean 4.</p>",
        "id": 222021381,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610065944
    },
    {
        "content": "<p>syntax aware linters will make things so much better</p>",
        "id": 222021450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610066018
    },
    {
        "content": "<p>I said \"linter\" but I think I meant \"code formatter\".</p>",
        "id": 222021644,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610066171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> How close do the delaborator + parenthesizer on full file ASTs get to a pretty-printer style code formatter? <code>leanfmt</code> would be so cool</p>",
        "id": 222022217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610066710
    },
    {
        "content": "<p>I did find this, which seemed related: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/Reformat.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/Reformat.lean</a></p>",
        "id": 222022307,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610066780
    },
    {
        "content": "<p>Right, this the output of that test given <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/Reformat/Input.lean\">this input</a>: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/Reformat.lean.expected.out\">https://github.com/leanprover/lean4/blob/master/tests/lean/Reformat.lean.expected.out</a><br>\nI've already spent quite a bit of time on getting formatting as pretty as possible both on the command and term level, using both general heuristics (e.g. automatic indentation of subterms) and specific annotations (e.g. hard line breaks after <code>match ... with</code> I mentioned on Gather yesterday), but there are many more of these yet to cover before anyone before the output is acceptable for a code formatter.</p>",
        "id": 222055123,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610100523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Porting.20Mathlib.3A.20Essential.20Changes/near/222021257\">said</a>:</p>\n<blockquote>\n<p>I don't think it will be a big deal to switch to <code>by</code>. There is no need to preserve syntax this much, particularly if we're going to be doing the port based on an initial syntax transformation of mathlib to lean 4 style</p>\n</blockquote>\n<p>Is it remotely viable to write a suite of macros that preserves syntax almost exactly, so that the porting process would be:</p>\n<ul>\n<li>Remove all the lean3 expressions that are too weird to fit in those macros, by rewriting them in an uglier way</li>\n<li>Switch to the macro suite, and build all the code as lean 4</li>\n<li>Slowly remove uses of the macros over time and modernize the code to lean 4?</li>\n</ul>\n<p>(ie, copy how people managed the python2 to python3 transition)</p>",
        "id": 222055245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610100619
    },
    {
        "content": "<p>Btw, just for completeness: the delaborator and parenthesizer are the exactly the pretty printer components <em>not</em> involved here :) . There are no <code>Expr</code>s involved, nor are we combining different syntax trees such that we could end up with badly parenthesized trees.</p>",
        "id": 222055283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610100653
    }
]