[
    {
        "content": "<p>Is the identity monad strict?<br>\nInstead of using the identity monad as a base for my transformer I used IO (to debug) and my computation finished instantly...<br>\nI'm thinking this is because IO is strict. Is Id not?</p>",
        "id": 224120235,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611704193
    },
    {
        "content": "<p>Ok, I eliminated the identity monad and performance is the same (poor). Is there anyway to enforce strictness without using IO?</p>",
        "id": 224128229,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611710026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> can you elaborate on what you are trying to do? Lean is a strict language, so unlike for example in Haskell, most expressions are strictly evaluated by default.</p>",
        "id": 224128883,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1611710577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> <br>\nYeah, I can say exactly what I'm doing.<br>\nSo for one of my courses I'm writing a Sudoku solver (in Lean 4). To do this I wrote the <a href=\"http://okmij.org/ftp/papers/LogicT.pdf\">LogicT monad transformer</a> (with some restrictions due to problems with universes/polymorphism)  in Lean and wrote a pretty simple backtracking algorithm using it.<br>\nWhen using the <code>Logic = LogicT Id</code> monad, it is very slow, and will not even be able to solve an empty 3x3 board. However,  <code>LogicT IO</code> is very quick and will evaluate almost instantly</p>",
        "id": 224129128,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611710815
    },
    {
        "content": "<p>I could post my code here, but I've been hesitant to crowd it with asking for help too much since this channel is devoted to lean4 developments<br>\nBut I was also told to post here instead of in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a></p>",
        "id": 224129593,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611711218
    },
    {
        "content": "<p>I'm not familiar with that paper, so it is hard to say exactly what is going on. By all means do post your code though, this channel is for Lean 4 <em>users</em> after all.</p>",
        "id": 224130003,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1611711577
    },
    {
        "content": "<p>Ok, so if I replace <code>Logic</code> here with <code>LogicT IO</code> it gets a ton faster <a href=\"https://git.sr.ht/~pounce/Sudoku/tree/master/item/Sudoku/Solve.lean#L81\">https://git.sr.ht/~pounce/Sudoku/tree/master/item/Sudoku/Solve.lean#L81</a><br>\nThe logic transformer itself is here, and is continuation based <a href=\"https://git.sr.ht/~pounce/Sudoku/tree/master/item/Sudoku/Logic.lean#L10\">https://git.sr.ht/~pounce/Sudoku/tree/master/item/Sudoku/Logic.lean#L10</a></p>",
        "id": 224130686,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611712226
    },
    {
        "content": "<p>That repo looks private/inaccessible.</p>",
        "id": 224131202,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1611712773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> whoops the settings are wrong, they're right now</p>",
        "id": 224135833,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611717759
    },
    {
        "content": "<p>Because lean uses in-place mutation a lot, you should ensure that your monad combinators are using their values linearly. That seems the most likely culprit when it comes to continuation monads</p>",
        "id": 224136164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611718120
    },
    {
        "content": "<p>Hmm, but wouldn't this create a performance issue with both IO and Id?</p>",
        "id": 224136363,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611718346
    },
    {
        "content": "<p>Logic definitely isn't linear (it duplicates continuations on mplus), but this is necessary for transparent backtracking<br>\nBut I don't think that's the main issue since it's duplicated for IO as well (since LogicT IO is still backtracking)</p>",
        "id": 224136730,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611718787
    },
    {
        "content": "<p>So the only thing I'm thinking so far, is that IO is defined with the <code>IO.RealWorld</code> constant that prevents \"reordering\" of operations.<br>\nDoes this really affect compilation, or is it just there for future use?</p>",
        "id": 224218233,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611769257
    },
    {
        "content": "<p>Yes! This seems like the case!<br>\nI replaced <code>IO</code> as a base for my monad transformers with <code>StateM Unit</code> and it runs very quickly</p>",
        "id": 224219900,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611769898
    },
    {
        "content": "<p>You might also get the same result with <code>ReaderM Unit</code>; there is a big difference between <code>A</code> and <code>Unit -&gt; A</code> in order of evaluation, so that seems like the key difference</p>",
        "id": 224221158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611770367
    },
    {
        "content": "<p>Yeah, it might be too eager in some places perhaps. I may try experimenting with thunks to see if I can get rid of the performance issue with Id<br>\nThe LogicT paper was originally written for Haskell with a few extensions.... so I'm sure there are some issues that I don't yet understand about using it in Lean</p>",
        "id": 224222199,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611770738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/monad.20performance/near/224221158\">said</a>:</p>\n<blockquote>\n<p>You might also get the same result with <code>ReaderM Unit</code>; there is a big difference between <code>A</code> and <code>Unit -&gt; A</code> in order of evaluation, so that seems like the key difference</p>\n</blockquote>\n<p>Yeah this is it spot on<br>\n<code>StateM Unit</code> is the same type as <code>Thunk</code> (what I just realized) so all I needed was lazyness and this gave it to me</p>",
        "id": 224384461,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611864009
    }
]