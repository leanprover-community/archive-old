[
    {
        "content": "<p>I have just failed to solve today's Advent of Code problem with a very strange issue. You can have a look at the full code <a href=\"https://github.com/dupuisf/Lean4_AoC2022/blob/master/Aoc2022/Day11.lean\">here</a>. The main loop for Part 2 looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">modulo</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span> <span class=\"n\">monkeys.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">mon</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">mon.test</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">monkeys.size</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">monkeyActivity</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">rnd</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">numRounds</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">rnd</span> <span class=\"bp\">%</span> <span class=\"mi\">100</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Starting round {rnd}, {monkeys.foldl (fun n m =&gt; n + m.items.size) 0}\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">items</span> <span class=\"k\">do</span>\n        <span class=\"n\">monkeyActivity</span> <span class=\"o\">:=</span> <span class=\"n\">monkeyActivity.modify</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">op</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">modulo</span>\n        <span class=\"k\">if</span> <span class=\"n\">i'</span> <span class=\"bp\">%</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">test</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"n\">monkeys</span> <span class=\"o\">:=</span> <span class=\"n\">monkeys.modify</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">ifTrue</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">ifTrue</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">catchItem</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">monkeys</span> <span class=\"o\">:=</span> <span class=\"n\">monkeys.modify</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">ifFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">ifFalse</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">catchItem</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n      <span class=\"n\">monkeys</span> <span class=\"o\">:=</span> <span class=\"n\">monkeys.modify</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">monkeys</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">flushItems</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So basically just a few nested for loops whose body should run in constant time (in <code>numRounds</code>). However, what happens when I run this for 10000 rounds is that it progressively gets slower and slower until I get a stack overflow at round ~9200. I have no idea how a stack gets involved here.</p>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, maybe you would have a quick answer for this? I see you wrote nearly the same code, except that in your solution the items are not inside the <code>Monkey</code> structure.</p>",
        "id": 315251901,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1670789240
    },
    {
        "content": "<p>Do you have a stack trace, say with <code>gdb</code>?</p>",
        "id": 315346852,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670845484
    },
    {
        "content": "<p>My bet would be on the <code>dbg_trace</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{List.range 10000}\"</span><span class=\"bp\">;</span> <span class=\"mi\">42</span> <span class=\"c1\">-- stack overflow</span>\n</code></pre></div>",
        "id": 315437747,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670871436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Stack.20overflow.20in.20for.20loops.3F/near/315437747\">said</a>:</p>\n<blockquote>\n<p>My bet would be on the <code>dbg_trace</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{List.range 10000}\"</span><span class=\"bp\">;</span> <span class=\"mi\">42</span> <span class=\"c1\">-- stack overflow</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Nope -- removing it doesn't change anything...</p>",
        "id": 315448164,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1670874886
    },
    {
        "content": "<p>Here's the stack trace from gdb (assuming I did this correctly):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x0000555558561788</span> <span class=\"k\">in</span> <span class=\"n\">lean_inc</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x0000555558560f85</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">7</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">8</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">9</span>  <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">10</span> <span class=\"mi\">0x0000555558560f90</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>and it just keeps going like this forever.</p>",
        "id": 315448326,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1670874933
    },
    {
        "content": "<p>(This is without the <code>dbg_trace</code> line btw.)</p>",
        "id": 315448537,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1670875003
    },
    {
        "content": "<p>Hmm that is strange. Either way <a href=\"https://github.com/leanprover/lean4/pull/1944\">lean4#1944</a> for the ToString instance.</p>",
        "id": 315457065,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670877290
    },
    {
        "content": "<p>Nice -- now I can claim that doing AoC is not 100% procrastination :-)</p>",
        "id": 315459197,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1670877901
    },
    {
        "content": "<p>This is an interesting bug. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  Here's an MWE, you can probably spot what's going wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Monkey</span> <span class=\"n\">where</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">Monkey.catchItem</span> <span class=\"o\">(</span><span class=\"n\">item</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">monkey</span> <span class=\"o\">:</span> <span class=\"n\">Monkey</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monkey</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">monkey</span> <span class=\"k\">with</span> <span class=\"n\">items</span> <span class=\"o\">:=</span> <span class=\"n\">monkey.items.push</span> <span class=\"n\">item</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monkey</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">monkey</span> <span class=\"o\">:</span> <span class=\"n\">Monkey</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">items</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">monkey</span> <span class=\"o\">:=</span> <span class=\"n\">monkey.catchItem</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">monkey</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">10000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"mi\">0</span> <span class=\"c1\">-- stack overflow</span>\n</code></pre></div>",
        "id": 315462592,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670878868
    },
    {
        "content": "<p>Good thing I started exactly the same way but decided to factor out the mutable field halfway through because I didn't want to deal with the nested update <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> ...</p>",
        "id": 315471363,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670882466
    }
]