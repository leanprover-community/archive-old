[
    {
        "content": "<p>Hi! How hard would it be to make runFrontend accept code that doesn't typecheck? Where is the call to the kernel? Thanks!</p>",
        "id": 291089191,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658946192
    },
    {
        "content": "<p>How are you envisioning writing runnable code that doesn't type-check? Lean relies on types to produce executable code (IR) from terms. A term that does not type check cannot be executed.</p>",
        "id": 291101625,
        "sender_full_name": "Mac",
        "timestamp": 1658951632
    },
    {
        "content": "<p>Furthermore, type checking failures would inhibit many other important features of Lean (e.g., type inference, type class synthesis, etc.).</p>",
        "id": 291101792,
        "sender_full_name": "Mac",
        "timestamp": 1658951709
    },
    {
        "content": "<p>I seems very unlikely to me that one could write Lean code that is theoretically runnable but not type-checkable.</p>",
        "id": 291101948,
        "sender_full_name": "Mac",
        "timestamp": 1658951768
    },
    {
        "content": "<p>As such, I feel this may be a case of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. Why do you need this feature?</p>",
        "id": 291102010,
        "sender_full_name": "Mac",
        "timestamp": 1658951801
    },
    {
        "content": "<p>We are building a typechecker for a content-addressed environment built from Lean 4 code. We're using <code>runFrontend</code> to generate the <code>Environment</code> and then we work from there. However, to test our typechecker against expressions that shouldn't typecheck, we'd like to be able to generate environments from Lean 4 code that doesn't typecheck. But those declarations don't appear in the environment</p>",
        "id": 291111051,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658956376
    },
    {
        "content": "<p>It's not that I'd like that feature from Lean. I just want to know where the typechecking routine is called so I can implement my own pipeline of functions that would skip that part</p>",
        "id": 291112860,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658957338
    },
    {
        "content": "<p>After runFrontend has parsed the Lean code it basically comes down to elaborating the commands one by one which comes down to running elabCommandTopLevel on each of the command syntaxes and at this point the rest of the elaborator takes over, running the appropriate command elaborators which might call into term elaborators, macros, tactics etc. All of those can do type related stuff that might fail. So I'm not quite sure how you are imagining to modify code here.</p>",
        "id": 291113379,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658957604
    },
    {
        "content": "<p>Maybe I am being too naive. Here's another idea: what if I just avoid the part where some exception is thrown when Lean says \"term Foo has type Bla but was expected to have type Doo\"?</p>",
        "id": 291117124,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1658959796
    },
    {
        "content": "<p>Well that exception can be thrown whenever you have elabTermEnsuringType right? and this usually gets called from term elaborators so you are pretty much out of luck with that.</p>",
        "id": 291118000,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658960296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.2EElab.2ErunFrontend.20without.20typechecking/near/291111051\">said</a>:</p>\n<blockquote>\n<p>We are building a typechecker for a content-addressed environment built from Lean 4 code. We're using <code>runFrontend</code> to generate the <code>Environment</code> and then we work from there. However, to test our typechecker against expressions that shouldn't typecheck, we'd like to be able to generate environments from Lean 4 code that doesn't typecheck. But those declarations don't appear in the environment</p>\n</blockquote>\n<p>heard of Unison (search for UCM on Github)?</p>",
        "id": 291330732,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103453
    },
    {
        "content": "<p>Lean 4 uses nominal type-equality. I doubt you can make it content-addressed.</p>",
        "id": 291330788,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103484
    },
    {
        "content": "<p><a href=\"https://github.com/google/evcxr/blob/main/evcxr/HOW_IT_WORKS.md\">https://github.com/google/evcxr/blob/main/evcxr/HOW_IT_WORKS.md</a></p>",
        "id": 291331176,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103697
    },
    {
        "content": "<p>This Rust REPL uses a custom parser to split statements. You might have to do similar stuff: remove wrong statements from your source code before compiling.</p>",
        "id": 291331229,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1659103733
    },
    {
        "content": "<p>Unison was a big inspiration. We've already content addressed Lean environments and now we're working on the typechecker</p>",
        "id": 291352448,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1659114134
    },
    {
        "content": "<p>So an REPL is comming soon?</p>",
        "id": 305257953,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1666310931
    },
    {
        "content": "<p>There is this toy REPL: <a href=\"https://github.com/arthurpaulino/LeanREPL\">https://github.com/arthurpaulino/LeanREPL</a></p>",
        "id": 305262092,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1666313698
    }
]