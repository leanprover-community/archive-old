[
    {
        "content": "<p>When I try to link to a dynamic lib on MacOS (like <a href=\"https://github.com/xubaiw/OpenSSL.lean/tree/main/examples/foo\">this</a>), <code>leanc</code> gives me a <code>LC_DYLD_INFO_ONLY</code> error, followed with a bunch of <code>undefined symbol</code>s. The error looks like: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lake build\n&gt; /Users/xubaiw/.elan/toolchains/leanprover--lean4---nightly-2022-03-01/bin/leanc -o ./build/bin/foo ./build/ir/Main.o ./../.././build/ir/OpenSSL.o ./../.././build/bindings/libopenssl-shim.a /usr/local/Cellar//openssl@3/3.0.1//lib/libssl.dylib /usr/local/Cellar//openssl@3/3.0.1//lib/libcrypto.dylib\nerror: ld64.lld: error: LC_DYLD_INFO_ONLY not found <span class=\"k\">in</span> /usr/local/Cellar//openssl@3/3.0.1//lib/libssl.dylib\nld64.lld: error: LC_DYLD_INFO_ONLY not found <span class=\"k\">in</span> /usr/local/Cellar//openssl@3/3.0.1//lib/libcrypto.dylib\n\nld64.lld: error: undefined symbol: _ERR_print_errors_fp\n&gt;&gt;&gt; referenced by ./../.././build/bindings/libopenssl-shim.a<span class=\"o\">(</span>openssl-shim.o<span class=\"o\">)</span>\n\nld64.lld: error: undefined symbol: _SSL_set_bio\n...\n</code></pre></div>\n<p>While it successfully builds when I manually link them with system <code>clang</code> (with <code>--print-ldflags</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ clang -o ./build/bin/foo ./build/ir/Main.o ./../.././build/ir/OpenSSL.o ./../.././build/bindings/libopenssl-shim.a /usr/local/Cellar//openssl@3/3.0.1//lib/libssl.dylib /usr/local/Cellar//openssl@3/3.0.1//lib/libcrypto.dylib <span class=\"k\">$(</span>leanc --print-ldflags<span class=\"k\">)</span>\n$ ./build/bin/foo\nHello, OpenSSL\n</code></pre></div>\n<p>So I suppose the problem arises from <code>ld64.lld</code>.  Any idea to solve this error?</p>",
        "id": 274298669,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646563351
    },
    {
        "content": "<p>The code also builds when linked to <code>libcrypto.a</code> static lib.</p>",
        "id": 274298747,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646563488
    },
    {
        "content": "<p>Now not sure if it's a general problem with all dynamic linking or just a OpenSSL specific problem. I'll try to work out a smaller example later tonight.</p>",
        "id": 274298882,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646563686
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Things just go more interesting when I try to minimize the problem with two lean packages, one package compiled to shared lib and the other dynamically linked to that lib. </p>\n<p>This time <code>dyld</code> gives <code>Library not loaded</code> when I run the binary. It seems that leanc fails to link shared lib (but system clang also fails in this example).</p>\n<p>This <a href=\"https://github.com/xubaiw/lean-problem-dynamic-link\">example</a> is made cross-platform, so you can test if it can work on other platforms.</p>",
        "id": 274311833,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646580865
    },
    {
        "content": "<p>That just sounds like standard library lookup troubles. Try passing the library file path directly to the linker without <code>-l/-L</code>, or run the executable with <code>DYLD_LIBRARY_PATH</code> set to the library's folder.</p>",
        "id": 274314904,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646584707
    },
    {
        "content": "<p>I have tried directly passing (using <code>moreLibTargets</code> only) and that didn't work though. <code>DYLD_LIBRARY_PATH</code> can run the executable but leads to a segfault.</p>",
        "id": 274316916,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646586427
    },
    {
        "content": "<p>For the segfault, is there any problem with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[export bar1_greet]</span> <span class=\"kd\">def</span> <span class=\"n\">greet</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {name}!\"</span>\n\n<span class=\"kd\">@[extern \"bar1_greet\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">greet'</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n</code></pre></div>",
        "id": 274316987,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1646586504
    },
    {
        "content": "<p>Not per se, as long as you call <code>initialize_bar1</code> first</p>",
        "id": 274332877,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646606912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/ld64.2Elld.20dynamic.20link.20errors.20on.20MacOS/near/274298669\">said</a>:</p>\n<blockquote>\n<p>When I try to link to a dynamic lib on MacOS (like <a href=\"https://github.com/xubaiw/OpenSSL.lean/tree/main/examples/foo\">this</a>), <code>leanc</code> gives me a <code>LC_DYLD_INFO_ONLY</code> error, followed with a bunch of <code>undefined symbol</code>s.</p>\n</blockquote>\n<p>I encountered the same issue while assembling <a href=\"https://github.com/leanprover/lean4/pull/1076\">https://github.com/leanprover/lean4/pull/1076</a>. Apparently Apple's linker recently switched to a different header format, which lld does not yet support: <a href=\"https://github.com/llvm/llvm-project/issues/54550\">https://github.com/llvm/llvm-project/issues/54550</a><br>\nThis shouldn't really matter in practice if you're also planning to distribute your software to machines running older versions of macOS, which would not understand the new format anyway. However, it turns out that Homebrew is not a great tool if you're planning to do that:<a href=\"https://news.ycombinator.com/item?id=12549208\">https://news.ycombinator.com/item?id=12549208</a></p>",
        "id": 276734536,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1648313109
    },
    {
        "content": "<p>This should be fixed in the next LLVM release <a href=\"https://github.com/llvm/llvm-project/commit/94e0f8e001002b828c42048f383806295e7abbb2\">https://github.com/llvm/llvm-project/commit/94e0f8e001002b828c42048f383806295e7abbb2</a></p>",
        "id": 289522142,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657746978
    },
    {
        "content": "<p>Did you manage to fix the <code>LC_DYLD_INFO_ONLY</code> linker error? <span class=\"user-mention\" data-user-id=\"414345\">@Xubai Wang</span></p>",
        "id": 318573180,
        "sender_full_name": "Ramon Fernández Mir",
        "timestamp": 1672402426
    }
]