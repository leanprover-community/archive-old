[
    {
        "content": "<p>IIRC, to declare a structure that lives in <code>Prop</code>, all fields must also be propositions.<br>\nI currently find myself wanting to define a few propositions which are of the form <code>\\exists a b c, p \\and q \\and r \\and s</code>. Using <code>\\exists</code> for this is kind of painful as all of the terms in the conjunction are unnamed. Using a custom <code>inductive</code> type for this basically suffers from the same problem, as it doesn't generate projections for <code>p</code>, <code>q</code>, etc. <br>\nWould it be an option to have <code>Prop</code>-structures with non-<code>Prop</code> fields and just not generate projections for them?</p>",
        "id": 286411208,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1655412379
    },
    {
        "content": "<p>In Lean 3 it works just like that--does it not work in Lean 4?</p>",
        "id": 286412668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655413148
    },
    {
        "content": "<p>No the kernel will complain that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">projection</span> <span class=\"bp\">'</span><span class=\"n\">Foo.x'</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">Foo'</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">predicate</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">field</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">proposition</span>\n</code></pre></div>",
        "id": 286413105,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655413327
    },
    {
        "content": "<p>(though that might of course be fixable)</p>",
        "id": 286413133,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655413338
    },
    {
        "content": "<p>I believe this is the same in Lean 3. If there was no projection for <code>a</code>, how would the type of <code>p</code>'s projection refer to it?</p>",
        "id": 286413803,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655413661
    },
    {
        "content": "<p>You can always declare a structure for <code>p \\and q \\and r \\and s</code> parameterized over <code>a b c</code> though</p>",
        "id": 286414017,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655413751
    },
    {
        "content": "<p>If I understand what's going on, it sounds like the only difference is in some cases you can't use the <code>structure</code> syntax but you can use the <code>inductive</code> syntax to achieve the same thing.</p>",
        "id": 286414687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655414136
    }
]