[
    {
        "content": "<p>Porting <a href=\"https://mmhaskell.com/monads/reader-writer\">https://mmhaskell.com/monads/reader-writer</a> it talks about calling a monad from \"pure code\" where it calls <code>readerFunc1</code> and <code>readerFunc2</code> and so on pure code, do we call these monadic functions pure code or does the monad make it impure?  What is the definition of  pure code ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">readerFunc1</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">Environment</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"n\">env.path.length</span>\n  <span class=\"k\">let</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">env.home.length</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">l3</span> <span class=\"o\">:=</span> <span class=\"n\">env.user.length</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"bp\">+</span> <span class=\"n\">l2</span> <span class=\"bp\">+</span> <span class=\"n\">l3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFloat</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">readerFunc2</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">Environment</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">readerFunc1</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span>\n  <span class=\"n\">return</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f.floor.toUInt32.toNat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">readerFunc3</span> <span class=\"o\">:</span> <span class=\"n\">Reader</span> <span class=\"n\">Environment</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">readerFunc2</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span>\n  <span class=\"n\">return</span> <span class=\"s2\">\"Result: \"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main2</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">loadEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">readerFunc3</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">env</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">str</span>\n</code></pre></div>",
        "id": 295331883,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661475425
    },
    {
        "content": "<p>The term \"pure code\" is not rigorously defined, and I would say it is a matter of perspective. It generally means code that does not have \"side effects\" or refers to \"external state\", and whether the state in a <code>Reader</code> is considered external depends on your point of view. The only monad I would say is unambiguously impure is <code>IO</code>; most others are built out of pure pieces so you can deconstruct it into a pure function of some kind</p>",
        "id": 295332870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661476495
    },
    {
        "content": "<p>Thanks, I will consider all these then to be pure, except the main and loadEnv functions which uses IO.</p>",
        "id": 295338450,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661477603
    },
    {
        "content": "<p>Porting <a href=\"https://mmhaskell.com/monads/state\">https://mmhaskell.com/monads/state</a> looks like Haskell has associative arrays, what is the best replacement in Lean, I found HashMap... ?</p>",
        "id": 295341949,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661479328
    },
    {
        "content": "<p>I don't see <code>HashMap</code> on that page</p>",
        "id": 295345041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661480071
    },
    {
        "content": "<p>Lean has a <code>HashMap</code>  type</p>",
        "id": 295345044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661480079
    },
    {
        "content": "<p>sorry my bad typo, I meant to say haskell is using <code>A.Array</code>, and so sounds like HashMap is the way to go - thanks.  Also do you know how to initialize the lean random generator with a good random seed (like current tick count or something) ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fred</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">gen</span> <span class=\"bp\">←</span> <span class=\"n\">IO.stdGenRef.get</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gen</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">randNat</span> <span class=\"n\">gen</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gen</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">randNat</span> <span class=\"n\">gen</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gen</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">randNat</span> <span class=\"n\">gen</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fred</span>\n</code></pre></div>\n<p>Right now fred is very boring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">48</span>\n<span class=\"mi\">29</span>\n<span class=\"mi\">28</span>\n</code></pre></div>",
        "id": 295345283,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661480307
    },
    {
        "content": "<p>If you are talking about <code>A.Array</code>:</p>\n<ul>\n<li>Lean does not have a type like <code> A.Array i a</code>, which allows you to  choose your own indexing type. In the example it's using it to make a 2D array. IIRC <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> has a mechanism for doing n-D arrays with a generic indexing type.</li>\n<li>The nearest equivalent to the <a href=\"https://hackage.haskell.org/package/array-0.5.4.0/docs/Data-Array.html#v:array\"><code>A.array</code></a> function is <code>Array.ofFn</code>, which I can't find but I thought <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> had an implementation somewhere in mathlib4</li>\n<li><a href=\"https://hackage.haskell.org/package/array-0.5.4.0/docs/Data-Array.html#v:assocs\"><code>A.assocs</code></a> is similar to <code>Array.toList</code>, but we should have a version that returns the indexes too.</li>\n<li><a href=\"https://hackage.haskell.org/package/array-0.5.4.0/docs/Data-Array.html#v:-47--47-\"><code>A.//</code></a> is just <code>Array.set</code> iterated</li>\n</ul>",
        "id": 295345686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661480724
    },
    {
        "content": "<p><code>fred</code> works at the command line, but <code>IO.stdGenRef</code> is deterministic in interactive mode</p>",
        "id": 295345864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661480888
    },
    {
        "content": "<p>But this works right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">initBoard</span> <span class=\"o\">:</span><span class=\"n\">HashMap</span> <span class=\"n\">TileIndex</span> <span class=\"n\">TileState</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HashMap.ofList</span> <span class=\"o\">[((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">TileState.HasX</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">TileState.HasO</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">TileState.HasX</span><span class=\"o\">)</span> <span class=\"bp\">...</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">initBoard.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>   <span class=\"c1\">-- some (TileState.HasX)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">initBoard.insert</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">TileState.Empty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>    <span class=\"c1\">-- some (TileState.Empty)</span>\n</code></pre></div>",
        "id": 295346383,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661481431
    },
    {
        "content": "<p>yes, you could also do <code>map.findD i .Empty</code> to get a default value out of range</p>",
        "id": 295346615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661481658
    },
    {
        "content": "<p>Also seems Haskell has list comprehensions <code>let openSpots = [ fst pair | pair &lt;- A.assocs (board game), snd pair == Empty]</code> what's the easiest way to implement that on HashMap ?</p>",
        "id": 295347625,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661482725
    },
    {
        "content": "<p>Well this isn't too bad I suppose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findOpen</span> <span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">TileIndex</span> <span class=\"n\">TileState</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">TileIndex</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">board.toList.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">TileIndex</span> <span class=\"bp\">×</span> <span class=\"n\">TileState</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x.2</span> <span class=\"bp\">==</span> <span class=\"n\">TileState.Empty</span> <span class=\"k\">then</span> <span class=\"n\">x.1</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">))</span>\n  <span class=\"n\">i.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">TileIndex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 295348525,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661483706
    },
    {
        "content": "<p>you could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findOpen</span> <span class=\"o\">(</span><span class=\"n\">board</span><span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">TileIndex</span> <span class=\"n\">TileState</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">TileIndex</span> <span class=\"o\">:=</span>\n  <span class=\"n\">board.toList.filterMap</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">TileState.Empty</span><span class=\"o\">)</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 295349333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661484653
    },
    {
        "content": "<p>with a monad instance on <code>List</code> you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">List</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">List.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"n\">List</span> <span class=\"n\">where</span>\n  <span class=\"n\">failure</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">orElse</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a.append</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findOpen</span> <span class=\"o\">(</span><span class=\"n\">board</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">TileIndex</span> <span class=\"n\">TileState</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">TileIndex</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">board.toList</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">TileState.Empty</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 295349512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661484937
    },
    {
        "content": "<p>which is the nearest thing we have to list comprehensions</p>",
        "id": 295349538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661484962
    },
    {
        "content": "<p>Cool - I will steal some of this and include it in my section on States: <a href=\"https://github.com/leanprover/lean4/pull/1505/files\">https://github.com/leanprover/lean4/pull/1505/files</a><br>\nIt also is a great example of seqRight, which I can use in applciatives.lean, so thanks for that too.</p>\n<p>PS: it is curious that \"Option\" is the option monad, \"Reader\" is the reader monad, but \"StateM\" is the state monad... why the naming difference?</p>",
        "id": 295351638,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661487359
    },
    {
        "content": "<p>Because <code>State</code> collides with too many other things. In particular, it is conventional, when the local monad <code>FooM</code> is a <code>ReaderT</code> on top of a <code>StateT</code>, to call the state object <code>Foo.State</code> and the reader object <code>Foo.Context</code>. For example, <code>CoreM</code>, <code>MetaM</code>, <code>TermElabM</code>, <code>TacticM</code>, <code>CommandElabM</code> all follow this pattern</p>",
        "id": 295354261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661489889
    },
    {
        "content": "<p>Note that the option monad used to be called <code>OptionM</code> back when there was a reason to keep it separate from <code>Option</code></p>",
        "id": 295354500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661490068
    },
    {
        "content": "<p>There are a whopping 64 hits for <code>structure State</code> in the lean 4 codebase (and 50 hits for <code>structure Context</code>)</p>",
        "id": 295354608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661490165
    },
    {
        "content": "<p>In other words, the <code>M</code> is not a requirement in the naming convention for monads, but it is used for disambiguation when something else has the short name</p>",
        "id": 295354952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661490483
    },
    {
        "content": "<p>Ok, makes sense, one last question to flip it around, if there is a pretty consistent naming convention around adding \"M\" to the monad class name, why not make it <code>ReaderM</code> ?  I understand why Option and List would no go there because those have a life outside of monads, whereas the Reader doesn't really... and it could easily clash with \"streaming\" classes which is what I assumed it was originally before I learned what it really was...  I'd almost like \"ReadStateM\" better or something...</p>",
        "id": 295376678,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1661502962
    },
    {
        "content": "<p>Yes, I think <code>ReaderM</code> would be more consistent. It's not used anywhere in core anyway, we can rename it.</p>",
        "id": 295377005,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1661503109
    },
    {
        "content": "<p>I also wondered why <code>Reader</code> was not <code>ReaderM</code>.</p>",
        "id": 295377035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661503129
    },
    {
        "content": "<p>Most likely because Haskell doesn't do the M suffix here either</p>",
        "id": 295384654,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1661506389
    }
]