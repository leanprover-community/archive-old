[
    {
        "content": "<p>For school reasons, I am looking to make a (micro|uni)-kernel in some language supporting formal verification, I know some Lean 3 and I was wondering if it was a good idea to jump into Lean 4 and try to make it into Lean 4, it looks like it might be able to fit the bill, I wonder how feasible this is?</p>\n<p>e.g. how much stuff has to be reimplemented in baremetal to kickstart Lean 4 programs without any operating system on x86_64 for example? Is it easy or like insanely difficult?</p>",
        "id": 225249484,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612488257
    },
    {
        "content": "<p>I know the existence of stuff like <a href=\"https://github.com/stepcut/idrOS\">https://github.com/stepcut/idrOS</a> and am ready to carry out similar stuff if required</p>",
        "id": 225249544,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612488315
    },
    {
        "content": "<p>There are commands that let you write bindings to C calls, so as long as C can do it I think it's possible to make lean do it</p>",
        "id": 225249573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612488346
    },
    {
        "content": "<p>I'm not sure how include files work though</p>",
        "id": 225249581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612488353
    },
    {
        "content": "<p>I can indeed write down the required stuff to provide primitives in C, then if I can call them from Lean world and write down a model of they should work (which would be really cool if it stops at some boundary to define)</p>\n<p>Also, maybe harder question, can Lean 4 compile to non-x86_64 platforms, e.g. RISC-V or ARM?</p>",
        "id": 225249688,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612488425
    },
    {
        "content": "<p>If <code>lean.h</code> doesn't work because the baremetal environment doesn't have the support this might be a trickier task though. In particular I can imagine memory allocation being a sticking point</p>",
        "id": 225249689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612488425
    },
    {
        "content": "<p>lean compiles to C which compiles via any C compiler. So yes, it should work on any arch</p>",
        "id": 225249721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612488472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/System.20programming.20using.20Lean.204/near/225249721\">said</a>:</p>\n<blockquote>\n<p>lean compiles to C which compiles via any C compiler. So yes, it should work on any arch</p>\n</blockquote>\n<p>Wow! That's really neat :&gt;</p>",
        "id": 225249768,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612488490
    },
    {
        "content": "<p>Hm, it looks like that I would need to patch this: <a href=\"https://github.com/leanprover/lean4/blob/master/src/runtime/object.cpp\">https://github.com/leanprover/lean4/blob/master/src/runtime/object.cpp</a> and everything else would reuse those implementations but I might be wrong?</p>",
        "id": 225250230,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612488860
    },
    {
        "content": "<p>wait, that's C++ code? I thought the runtime was all C</p>",
        "id": 225250297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612488927
    },
    {
        "content": "<p>Well, it is ; but as it looks like to be wrapped in some FFI, I imagine that I can just replace the cool STL containers &amp; stuff by baremetal ol'C</p>",
        "id": 225250408,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612489016
    },
    {
        "content": "<p>I wonder if I can do unikernels of Lean 4 programs :D</p>",
        "id": 225250452,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612489054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> I do not wish to discourage you, by all means do try to put Lean on bare metal! <em>But</em> it does seem like a Lean 4 OS would be a work-intensive project. While it is true that Lean programs compile to C which you could then compile to any architecture, they also link against the language runtime. So while you can definitely compile to RISC-V or ARM (with some obvious rough edges, but nothing should be fundamentally difficult), this is RISC-V or ARM <em>with an OS</em>. Being a reference-counted language, Lean needs the allocator in its runtime to function. So as Mario mentioned, you would need a heap, which is quite <a href=\"https://os.phil-opp.com/heap-allocation/\">a few chapters into</a> \"Writing an OS in Rust\". By contrast, there is an allocation-less subset of Rust which is used in that guide to get off the ground fairly quickly with displaying some text into VGA. On top of all this, numerical Lean code uses <a href=\"https://gmplib.org/\"><code>libgmp</code></a> providing which in real mode sounds.. challenging. It sounds like you would have to cut that out of the runtime also. While I know nothing about Idris internals, looking at the idrOS project you linked it seems its author has written about 9k lines of C and <em>9</em> lines of Idris and then given up, so make of that what you will. Having said all this, I think it should be possible, it might just require a fairly high level of determination.</p>",
        "id": 225253852,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1612492279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> Very much agree, having written an OS in Rust. I've been thinking about this idea a lot too. There are many parts of a kernel where heap allocation really shouldn't happen, or where data must be placed in certain places. Doing a unikernel should be a lot easier IMO, since you could write the whole runtime/OS in C/Rust and then use it in Lean.<br>\nMaybe if there were a way to make the typechecker linear so allocation wouldn't be necessary this could work.</p>",
        "id": 225260311,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1612499301
    },
    {
        "content": "<p>Another issue I think you'd run into here is stack space.<br>\nOperating systems have notoriously tiny stacks (in some places, like the kernel stack for a process), usually just one page.<br>\nI know some OSdevs who have long, recursive functions, and if they recurse too much they have to be offloaded into new threads as to not overflow the stack. Really the rule of thumb is to never have your callstack over 5 layers deep.<br>\nOn the other hand, I've had __huge__ issues with lean recursing too much. I've started to compile the program I'm writing with <code>LEANC_OPTS=\"-fsplit-stack \"</code> so it can't overflow... and obviously this isn't possible in an OS context.</p>",
        "id": 225260554,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1612499633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> <span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span>  Well, it definitely makes sense to me ; I'm just wondering what is the shortest path to get something like a unikernel for example and what properties could I get from writing the rest in Lean 4, etc.<br>\nThat's more an experiment than something else, my fallback project being writing the project in Rust with some design by contracts lib.</p>",
        "id": 225291037,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612527287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> An OS in Lean 4 sounds awesome.  A practical consideration that Wojciech also mentioned is the Lean runtime is still pretty big.  In particular it depends on GMP, and it introduces a bunch of dependencies due to the way constants are compiled.  Essentially, you end up pulling a lot of the definitions needed for implementing Lean in the runtime dependencies. <br>\nWe've gotten Lean 4 programs compiling and running as a process on a Rasberry Pi, but I think a more resource constrained environment would be a lot of work.  Leo has heard about our experience at Galois, but I don't know how much of a priority it is to minimize the runtime and enable more bare-metal applications.  I'd like to be able to compile Lean 4 code to Arduino eventually.</p>",
        "id": 225380751,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1612577514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> We are currently fixing bugs and writing papers, but we hope to get back to the compiler in April. This issue is a priority.</p>",
        "id": 225425539,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1612638243
    },
    {
        "content": "<p>I would distinguish between writing an OS and getting C++ to run on bare metal. The latter is relatively easy to do if you have a reasonably powerful embedded system as a target. All you need to get started is a bare metal build of gcc, an embedded C library like <a href=\"https://sourceware.org/newlib/\">https://sourceware.org/newlib/</a>, a linker script and a small set of c++ specific assembly routines. You need surprisingly little to get C++ running, see for example <a href=\"https://github.com/electronicvisions/libnux/blob/master/src/crt.s\">https://github.com/electronicvisions/libnux/blob/master/src/crt.s</a>. So before trying your hand at compiling lean, I would start out just setting up an environment that allows you to compile C++ to bare metal on the platform of your choice.</p>",
        "id": 226033688,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1613067015
    },
    {
        "content": "<p>We already done such things on RISC-V and FPGAs, so that's why we're interested into the next steps</p>",
        "id": 226042186,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1613070629
    }
]