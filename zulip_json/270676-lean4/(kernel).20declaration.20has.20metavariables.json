[
    {
        "content": "<p>When I see <code>(kernel) declaration has metavariables</code>, is there a way to be told where the metavariables came from and what types they have?</p>",
        "id": 228994485,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614966258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241007\">Jason Gross</span> <a href=\"#narrow/stream/270676-lean4/topic/(kernel).20declaration.20has.20metavariables/near/228994485\">said</a>:</p>\n<blockquote>\n<p>When I see <code>(kernel) declaration has metavariables</code>, is there a way to be told where the metavariables came from and what types they have?</p>\n</blockquote>\n<p>This is a bug. Could you post the example?<br>\nI use the following workaround </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Lean will display the definition before sending it to the kernel.<br>\nIf the metavariable doesn't appear there because it is in an implicit argument, then I also use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 228995521,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614966698
    },
    {
        "content": "<p>Unminimized example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EG</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ET</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">snoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">CtxSyntaxLayer</span>\n<span class=\"kd\">end</span>\n<span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EG</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ET</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">TySyntaxLayer</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">getCtxStep</span> <span class=\"o\">:</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.top</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.bot</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.nat</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Γ</span>\n<span class=\"kd\">end</span>\n<span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EG</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ET</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ETm</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">EGrfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">},</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">GAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">CtxSyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">TySyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">EG</span> <span class=\"n\">getCtx</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">TmSyntaxLayer</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Actx</span> <span class=\"o\">:</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Bctx</span> <span class=\"o\">:</span> <span class=\"n\">EG</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">getCtx</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n        <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span><span class=\"o\">)</span>\n        <span class=\"bp\">→</span> <span class=\"n\">ET</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Actx</span> <span class=\"n\">Bctx</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n        <span class=\"bp\">→</span> <span class=\"n\">ET</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">getTy</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"bp\">→</span> <span class=\"n\">TmSyntaxLayer</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">getTyStep</span> <span class=\"o\">:</span> <span class=\"n\">TmSyntaxLayer</span> <span class=\"n\">G</span> <span class=\"n\">T</span> <span class=\"n\">Tm</span> <span class=\"n\">EG</span> <span class=\"n\">ET</span> <span class=\"n\">getCtx</span> <span class=\"n\">getTy</span> <span class=\"n\">TAlgebra</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.tt</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TAlgebra</span> <span class=\"n\">TySyntaxLayer.top</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.zero</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TAlgebra</span> <span class=\"n\">TySyntaxLayer.nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.succ</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TAlgebra</span> <span class=\"o\">(</span><span class=\"n\">TySyntaxLayer.arrow</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"n\">TySyntaxLayer.nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TAlgebra</span> <span class=\"n\">TySyntaxLayer.nat</span><span class=\"o\">)</span> <span class=\"n\">EGrfl</span> <span class=\"n\">EGrfl</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TmSyntaxLayer.app</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:=</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives<br>\n<code>44:7: (kernel) declaration has metavariables 'getTyStep'</code><br>\nEducated guesswork led me to replace <code>TySyntaxLayer.arrow</code> with <code>@TySyntaxLayer.arrow _ _ _ _ _</code>, and indeed doing this gives me an error message about the final underscore not being synthesizable.  If you want a smaller example, I can probably minimize this one to one that's just a couple lines</p>",
        "id": 228995967,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614966880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241007\">@Jason Gross</span> Yes, a smaller version would be super useful :)</p>",
        "id": 228996100,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614966940
    },
    {
        "content": "<p>Cool, I'll minimize it then.  Is there a version of <code>set_option pp.all true</code> that prints implicits but doesn't desugar, e.g., matches?</p>",
        "id": 228996248,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614966986
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">Foo.foo</span>\n</code></pre></div>\n<p>gives<br>\n<code>4:5: (kernel) declaration has metavariables 'bar'</code></p>",
        "id": 228996696,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614967161
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>However, metavariables may still be hidden inside the syntax sugar.</p>",
        "id": 228996886,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614967220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241007\">Jason Gross</span> <a href=\"#narrow/stream/270676-lean4/topic/(kernel).20declaration.20has.20metavariables/near/228996696\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">Foo.foo</span>\n</code></pre></div>\n<p>gives<br>\n<code>4:5: (kernel) declaration has metavariables 'bar'</code></p>\n</blockquote>\n<p>Perfect. Thanks!</p>",
        "id": 228996960,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614967236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/(kernel).20declaration.20has.20metavariables/near/228996886\">said</a>:</p>\n<blockquote>\n<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>However, metavariables may still be hidden inside the syntax sugar.</p>\n</blockquote>\n<p>Thanks!  For now I'm only hitting this in places where I know that I'm failing to fill all implicits somewhere</p>",
        "id": 228998234,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614967715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456914\">@Sacha Huriot</span> ran across this error in the wild, the most minimal version I can reduce to is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sacha</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>with the current master I see <code>(kernel) declaration has metavariables 'sacha'</code><br>\n<code>set_option trace.Elab.definition true</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.definition</span><span class=\"o\">]</span> <span class=\"n\">sacha</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">_discr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_discr</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n  <span class=\"k\">match</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"bp\">?</span><span class=\"n\">m.22</span> <span class=\"n\">_discr</span>\n\n<span class=\"n\">t.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Elab.definition.body</span><span class=\"o\">]</span> <span class=\"n\">sacha</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">?</span><span class=\"n\">m.22</span>\n  <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"n\">t.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Elab.definition.scc</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sacha</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Adding type ascription after <code>(v, k)</code> fixes it in the MWE, but my understanding is that this is considered a bug still if the tactic state shows no error and only the kernel does, right?</p>",
        "id": 282656040,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652800572
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover/lean4/pull/1155\">lean4#1155</a> to track this now.</p>",
        "id": 282750706,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652860107
    }
]