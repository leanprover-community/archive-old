[
    {
        "content": "<p>Hello,</p>\n<p>I'm trying to prove the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">partial_fun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">partial_fun</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">partial_fun</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">partial_fun</span> <span class=\"c1\">-- doesn't work</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, <code>unfold</code> fails. I think it's because it tries to unfold iteratively, and might not terminate because <code>partial_fun</code> is partial.<br>\nI also tried <code>delta</code>, but it doesn't work either. </p>\n<p>There used to be a <code>unfold1</code> tactic in Lean 3, that unfold only once, but it seems to have been renamed/removed in Lean 4.</p>\n<p>How can I work around this issue ?</p>\n<p>Thanks in advance</p>",
        "id": 320215575,
        "sender_full_name": "David Hamelin",
        "timestamp": 1673267962
    },
    {
        "content": "<p>As far as I know it's not possible to prove anything about the definition of a partial function, you can just evaluate it.</p>",
        "id": 320216507,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1673268260
    },
    {
        "content": "<p>The reason being essentially that a partial definition is not really an expression that makes sense in Lean's type theory, so the kernel cannot access such a definition. For example <code>#reduce partial_fun 4</code> just prints <code>partial_fun 4</code> and does not reduce it to <code>4</code>. I think a partial definition is a shorthand for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">unsafe_fun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unsafe_fun</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[implemented_by unsafe_fun]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">partial_fun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>So the partial function does not actually have a definition, it's just an opaque constant that is evaluated by a unsafe function</p>",
        "id": 320217656,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1673268607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horațiu Cheval</span> <a href=\"#narrow/stream/270676-lean4/topic/Unfold.20partial.20function/near/320217656\">said</a>:</p>\n<blockquote>\n<p>The reason being essentially that a partial definition is not really an expression that makes sense in Lean's type theory, so the kernel cannot access such a definition. For example <code>#reduce partial_fun 4</code> just prints <code>partial_fun 4</code> and does not reduce it to <code>4</code>. I think a partial definition is a shorthand for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">unsafe_fun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unsafe_fun</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[implemented_by unsafe_fun]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">partial_fun</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>So the partial function does not actually have a definition, it's just an opaque constant that is evaluated by a unsafe function</p>\n</blockquote>\n<p>I see, thank you, I will add a step argument</p>",
        "id": 320219223,
        "sender_full_name": "David Hamelin",
        "timestamp": 1673269094
    }
]