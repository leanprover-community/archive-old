[
    {
        "content": "<p>How can I call a function in a shared library from Lean? I have the following Lean code in <code>Main.lean</code> (and more I'm omitting):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"SDL_Init\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">SDL_Init</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">flags</span><span class=\"o\">:</span> <span class=\"n\">Uint32</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Int32</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And the following lakefile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">sdl</span><span class=\"bp\">-</span><span class=\"n\">pong</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">LeanSdlPong</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add library configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">sdl</span><span class=\"bp\">-</span><span class=\"n\">pong</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The SDL_Init extern is defined in SDL2.dll. SDL2.dll is in the same directory as my source code currently. When I compile the project with <code>lake build</code> I get errors like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">SDL_Init</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"bp\">.\\</span><span class=\"n\">build</span><span class=\"bp\">\\</span><span class=\"n\">ir</span><span class=\"bp\">\\</span><span class=\"n\">LeanSdlPong.o</span><span class=\"o\">:(</span><span class=\"n\">l_SDL__Init___boxed</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I tell the linker to link against SDL2.dll?</p>",
        "id": 316634314,
        "sender_full_name": "Cole Shepherd",
        "timestamp": 1671395123
    },
    {
        "content": "<p>I'm not sure how exactly linking dlls works compared to shared objects in linux, but you can add arguments to the linker via the <code>moreLinkArgs</code> argument of the <code>package</code> declaration. See examples <a href=\"https://github.com/yatima-inc/FFI.lean/blob/main/lakefile.lean\">here</a>, <a href=\"https://github.com/JamesGallicchio/eternity2/blob/main/lean/lakefile.lean\">here</a></p>",
        "id": 316728155,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671452713
    },
    {
        "content": "<p>We still haven't really figured out the best way to handle linking non-Lean dependencies into Lean executables, so you will almost definitely encounter bugs or confusing/inconsistent behavior. If you get something working, let us know so we can add it to the list of examples that work <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 316728528,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671452862
    },
    {
        "content": "<p>Yeah, it looks to me like you need to write a shim library in C to call non-Lean dependencies unfortunately</p>",
        "id": 317084117,
        "sender_full_name": "Cole Shepherd",
        "timestamp": 1671598937
    },
    {
        "content": "<p>It's pretty rare to have a function signature that <em>doesn't</em> need a shim library anyways; like, in your example, <code>IO Int32</code> doesn't correspond to C's <code>int32_t</code>, so you need the shim library anyways to handle the IO boxing stuff. (you could make it return just <code>Int32</code>, which I think is sound, but you're probably right that it should be in IO).</p>\n<p>You should be able to link against stuff directly (without a C shim) if the names aren't mangled in some way.</p>",
        "id": 317292818,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1671688202
    }
]