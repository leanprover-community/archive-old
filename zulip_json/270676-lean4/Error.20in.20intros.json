[
    {
        "content": "<p>Hi everyone,  I have this very simple piece of code, but <code>intro h</code> in <code>monoid_cancel_left</code> theorem leads to the error shown below. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">introN'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">binders</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">z</span> <span class=\"n\">iz</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Op.op</span> <span class=\"n\">iz</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">One.one</span> <span class=\"bp\">→</span> <span class=\"n\">Op.op</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Op.op</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Source Code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Op</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Associative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op_associative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LeftOne</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">RightOne</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">right_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Associative</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">LeftOne</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">RightOne</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Inv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">monoid_cancel_left</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">iz</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">iz</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">H.one</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>   <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">MOVE</span> <span class=\"n\">YOUR</span> <span class=\"n\">CURSOR</span> <span class=\"n\">HERE</span> <span class=\"n\">TO</span> <span class=\"n\">SEE</span> <span class=\"n\">THE</span> <span class=\"n\">ERROR</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 300565115,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1664040796
    },
    {
        "content": "<p>Are you sure it's not missing parens?</p>",
        "id": 300570038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664043855
    },
    {
        "content": "<p>E.g. does <code>split</code> make progress?</p>",
        "id": 300570049,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664043872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20in.20intros/near/300570038\">said</a>:</p>\n<blockquote>\n<p>Are you sure it's not missing parens?</p>\n</blockquote>\n<p>I don't think so because I have checked it couple of time. No, <code>split</code> is also not making any progress. I have posted the whole <a href=\"https://gist.github.com/mukeshtiwari/edc727c1bb732bca7e00600a6063f5e2\">file</a>, just in case you want to run it locally.</p>",
        "id": 300570758,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1664044381
    },
    {
        "content": "<p>hmmm....</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Op</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Associative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op_associative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LeftOne</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">RightOne</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">right_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Associative</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">LeftOne</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">RightOne</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Inv</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">monoid_cancel_left</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">iz</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">iz</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">H.one</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">((</span><span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 300571018,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664044593
    },
    {
        "content": "<p>lean is happy with that on  my end...</p>",
        "id": 300571028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664044602
    },
    {
        "content": "<p>Wow! I see the problem is solved by this extra bracket :) <code>((H.op z x) = (H.op z y) ↔ x = y)</code> which is not present in my code. Thank you!</p>",
        "id": 300571709,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1664045033
    },
    {
        "content": "<p>Now, I have another question: what is the difference between these two typeclasses? What are the pros and cons of these two styles, one in which you extend every thing (first) and one in which you put the axioms inside the body of typeclass? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Associative</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">LeftOne</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">RightOne</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonoidNew</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Op</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op_associative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n  <span class=\"n\">left_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">one</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">right_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 300572151,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1664045310
    },
    {
        "content": "<p>Is there a way to get rid of one of the rewrite? (some kind of repeat rewrite)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">H.op_associative</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">H.left_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hcut</span>\n<span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">H.op_associative</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">H.left_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hcut</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">monoid_cancel_left</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">iz</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">H.op</span> <span class=\"n\">iz</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">H.one</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n    <span class=\"k\">have</span> <span class=\"n\">Hcut</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">iz</span>  <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">))</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">iz</span> <span class=\"o\">(</span><span class=\"n\">H.op</span> <span class=\"n\">z</span>  <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">H.op_associative</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">H.left_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hcut</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">H.op_associative</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">H.left_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">Hcut</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hcut</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 300579574,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1664050394
    }
]