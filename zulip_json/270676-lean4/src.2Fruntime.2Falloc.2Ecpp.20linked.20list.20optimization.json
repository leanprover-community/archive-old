[
    {
        "content": "<p>From my reading of <code>alloc.cpp</code>, it seems the mutex in</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">heap_manager</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* The mutex protects the list of orphan segments. */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mutex</span><span class=\"w\">             </span><span class=\"n\">m_mutex</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\">            </span><span class=\"n\">m_orphans</span><span class=\"p\">{</span><span class=\"k\">nullptr</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">push_orphan</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cm\">/* TODO(Leo): avoid mutex */</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">lock_guard</span><span class=\"o\">&lt;</span><span class=\"n\">mutex</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">m_mutex</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">h</span><span class=\"o\">-&gt;</span><span class=\"n\">m_next_orphan</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m_orphans</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m_orphans</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">pop_orphan</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cm\">/* TODO(Leo): avoid mutex */</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">lock_guard</span><span class=\"o\">&lt;</span><span class=\"n\">mutex</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"n\">m_mutex</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">m_orphans</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m_orphans</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">m_orphans</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">-&gt;</span><span class=\"n\">m_next_orphan</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>could be relatively easily replaced with simply an intrusive atomic linked-list, as the comments seem to indicate. Would a PR implementing this be welcome?</p>",
        "id": 290710946,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1658713688
    },
    {
        "content": "<p>Thanks for offering to help. Unfortunately, we don't have the resources to review this kind of PR at the moment.<br>\nWe are currently focused on porting all Mathlib tactics to Lean 4, and making sure all bugs and missing features have been addressed.<br>\nWe will probably only have time to review the PR in November.  Note that we seldom touch <code>alloc.c</code>, so even if you submit the PR now, it will not get stale. If you are ok with the PR sitting there for a few months, please go ahead.</p>",
        "id": 290791108,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658769560
    }
]