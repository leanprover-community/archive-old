[
    {
        "content": "<p>Would there be any easy way to generate a lot of constants automatically at once with random values?</p>",
        "id": 229777578,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1615425901
    },
    {
        "content": "<p>In lean 3 you can do that by calling <code>add_decl</code> to create new definitions, where the definition is a random value turned into a literal expression</p>",
        "id": 229798850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615442130
    },
    {
        "content": "<p>Here's some code that should work, and currently works in the command line but crashes the server for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>        <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n    <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n    <span class=\"n\">value</span>       <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span><span class=\"o\">),</span>\n    <span class=\"n\">type</span>        <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"n\">hints</span>       <span class=\"o\">:=</span> <span class=\"n\">ReducibilityHints.regular</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">safety</span>      <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.safe</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addAndCompile</span> <span class=\"o\">{}</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span>    <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">kex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Nat :=</span>\n<span class=\"c1\">-- 77</span>\n</code></pre></div>",
        "id": 229800065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615443140
    },
    {
        "content": "<p>Hmm, is there any way to do this without the #eval?</p>",
        "id": 229939631,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1615501586
    },
    {
        "content": "<p>Here is an example using the macro system. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Helper syntax for defining the real macro. -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"gen_random_defs%\"</span> <span class=\"n\">ident</span> <span class=\"n\">num</span> <span class=\"n\">num</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">`gen_random_defs id n s` creates `n` declarations of the form</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">def id_&lt;idx&gt; : Nat := &lt;random value&gt;</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">The \"random values\" are generated using the function `stdNext` and \"seed\" `s`</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"gen_random_defs\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_random_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- s and 1 are the \"seeds\" for the random number generator</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_random_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">s1</span> <span class=\"bp\">$</span><span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">stdNext</span> <span class=\"o\">⟨</span><span class=\"n\">s1.toNat</span><span class=\"o\">,</span> <span class=\"n\">s2.toNat</span><span class=\"o\">⟩</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span>      <span class=\"o\">:=</span> <span class=\"n\">n.toNat</span>\n      <span class=\"k\">let</span> <span class=\"n\">currId</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId.appendIndexAfter</span> <span class=\"n\">n</span>\n      <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">mkNullNode</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"n\">currId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n          <span class=\"n\">gen_random_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n\n<span class=\"n\">gen_random_defs</span> <span class=\"n\">foo</span> <span class=\"mi\">4</span> <span class=\"mi\">10</span> <span class=\"c1\">-- Creates `foo_1` ... `foo_4` using random seed 10</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo_1</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_2</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_3</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_4</span>\n</code></pre></div>",
        "id": 229942698,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615503161
    },
    {
        "content": "<p>Is there any way to access IO in term or command macros in order to get rid of the seed argument here? I'm trying to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> `rand_nat_const` creates a random `Nat` in the StdGen range -/</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"rand_nat_const\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"o\">(</span><span class=\"n\">IO.rand</span> <span class=\"o\">(</span><span class=\"n\">stdRange.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stdRange.snd</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>but it seems I can only use the reader monad here</p>",
        "id": 230762485,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616013600
    },
    {
        "content": "<p>It looks like no</p>",
        "id": 230766513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015138
    },
    {
        "content": "<p>macros live in the <code>MacroM</code> monad which is pure</p>",
        "id": 230766548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015154
    },
    {
        "content": "<p>Although you might not need it since <code>MacroM</code> implements <code>MonadRef</code></p>",
        "id": 230767172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015402
    },
    {
        "content": "<p>I see, if I have <code> : command</code> does it live in CommandM instead? and does that include IO?</p>",
        "id": 230767305,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616015444
    },
    {
        "content": "<p>No, all macros live in <code>MacroM</code></p>",
        "id": 230767444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015500
    },
    {
        "content": "<p>but that just means that it is pure during macro expansion, you can just do your computation after macro expansion</p>",
        "id": 230767616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015526
    },
    {
        "content": "<p>Indeed<br>\nthe issue is I would like to avoid the randomness on runtime</p>",
        "id": 230768097,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616015669
    },
    {
        "content": "<p>I'm not sure what you mean. It's the same either way</p>",
        "id": 230768157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015694
    },
    {
        "content": "<p>It's not really clear what counts as \"runtime\" here</p>",
        "id": 230768398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015776
    },
    {
        "content": "<p>If you have a command-like that adds definitions to the environment, that will run when the lean file is processed. The olean files will contain the resulting definitions</p>",
        "id": 230768495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015822
    },
    {
        "content": "<p>if this is then used in a dependent lean file, it will be as if you wrote all those definitions, so I guess it's \"compile time\"?</p>",
        "id": 230768561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015855
    },
    {
        "content": "<p>That said, a lean file that elaborates differently depending on the phase of the moon seems like a bad idea</p>",
        "id": 230768703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015914
    },
    {
        "content": "<p>indeed but it's awfully convenient for this case where I want an algorithm to have some random parameters (for efficiency reasons) but I don't want it to be random on runtime (I don't want one of my runs to get some bad seed)<br>\nAlso it's nice because I don't have to worry about threading a reader through everything, especially if I want to prove things about this (which I want to be immutable)</p>",
        "id": 230771095,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616016978
    }
]