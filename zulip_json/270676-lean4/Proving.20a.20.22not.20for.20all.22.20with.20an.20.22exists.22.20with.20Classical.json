[
    {
        "content": "<p>I think I'm missing something obvious here, but what would be the cleanest way to finish this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sandwich</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">egg</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span>\n  <span class=\"bp\">|</span> <span class=\"n\">roast_beef</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vegetable</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Sandwich</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">egg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">roast_beef</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vegetable</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">egg</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_f_is_not_beef</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">),</span>\n    <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"n\">byContradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"bp\">¬¬∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271770031,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1644792683
    },
    {
        "content": "<p>One way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">byContradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hAll</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sandwich.noConfusion</span> <span class=\"o\">(</span><span class=\"n\">hAll</span> <span class=\"n\">vegetable</span><span class=\"o\">)</span>\n    <span class=\"n\">absurd</span> <span class=\"n\">h1</span> <span class=\"n\">h0</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271770610,
        "sender_full_name": "Chris B",
        "timestamp": 1644793349
    },
    {
        "content": "<p>thanks, wrapping my head around this for a moment....</p>",
        "id": 271770924,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1644793654
    },
    {
        "content": "<p>Just do it in tactic mode, do intro a and then cases a and then follow your nose</p>",
        "id": 271775588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644800165
    },
    {
        "content": "<p>This is kind of <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, but this exercise has helped me many times in the past (thanks Kyle MIller!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sandwich</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">egg</span>\n  <span class=\"bp\">|</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vegetable</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Sandwich</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sandwich</span> <span class=\"bp\">→</span> <span class=\"n\">Sandwich</span>\n  <span class=\"bp\">|</span> <span class=\"n\">egg</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">roast_beef</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">roast_beef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">vegetable</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">egg</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_f_is_not_beef</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Sandwich</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">roast_beef</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_forall_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">vegetable</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_eq_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 271775980,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644800668
    }
]