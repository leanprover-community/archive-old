[
    {
        "content": "<p>I'm trying to use the new <code>a[i]'h</code> notation for array access in an (unapologetically imperative) while loop, but I can't name the hypothesis. An MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"c1\">-- while h : arr.size &gt; 0 do</span>\n    <span class=\"n\">while</span> <span class=\"n\">arr.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">do</span>\n      <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">arr.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I can work-around this by using if, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">n_minus_one_le_n</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le.refl</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">while</span> <span class=\"n\">cond</span> <span class=\"bp\">==</span> <span class=\"n\">false</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">arr.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">arr.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">n_minus_one_le_n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n    <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>but that's kind of a hack. Is there a fundamental reason why this hypothesis-naming syntax does not work in <code>while</code>? It's hard to figure out where that syntax is defined for if (is it even defined in the Lean part of the code?)?</p>",
        "id": 290356845,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658398210
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1337\">https://github.com/leanprover/lean4/issues/1337</a></p>",
        "id": 290359558,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1658400386
    }
]