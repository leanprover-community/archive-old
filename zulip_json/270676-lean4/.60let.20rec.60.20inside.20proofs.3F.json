[
    {
        "content": "<p>Hello everyone,</p>\n<p>for one of my proofs I wanted to create a recursive helper function. Because it is only used inside the proof, I decided to try out <code>let rec</code> :)</p>\n<p>Unfortunately, the type checker does not consider unfolding the <code>let rec</code> to be definitional equal :(</p>\n<p>Minimal (but stupid) example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">as</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- does not work</span>\n\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>Any ideas? I tried simp and even the convert zeta method, but it does not work.</p>\n<p>Obviously, this is not a huge problem, since I can only use regular definitions instead of <code>let rec</code>. However, I was wondering whether this is a bug or if I miss something.</p>\n<p>Thanks in advance</p>",
        "id": 301049484,
        "sender_full_name": "Jan-Mirko Otter",
        "timestamp": 1664294465
    },
    {
        "content": "<p><code>where</code> clauses seem to have the same effect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span><span class=\"n\">rfl</span> <span class=\"c1\">-- does not work</span>\n\n  <span class=\"gr\">admit</span>\n\n<span class=\"n\">where</span>\n  <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">as</span>\n</code></pre></div>",
        "id": 301051778,
        "sender_full_name": "Jan-Mirko Otter",
        "timestamp": 1664295066
    },
    {
        "content": "<p>What happens if you put the <code>let</code> outside the by?</p>",
        "id": 301065415,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664298833
    },
    {
        "content": "<p>I think let expressions in <code>by</code> de-sugar to something more complicated</p>",
        "id": 301065554,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664298871
    },
    {
        "content": "<p>That's weird, I do this <a href=\"https://github.com/leanprover/std4/blob/52c2324923b7f83e4e9b82ca9c8284f7a86bd3e8/Std/Data/List/Basic.lean#L24-L32\">all the time</a> so I'm surprised it would fail here</p>",
        "id": 301068217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664299711
    },
    {
        "content": "<p>Oh, actually I take it back - while I do use <code>let rec</code> to make recursive theorems (i.e. write inductive proofs using the equation compiler) inside a theorem, I don't make non-Prop recursive definitions in a theorem and then try to unfold them using <code>simp</code> or other unfolding tactics</p>",
        "id": 301068710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664299875
    },
    {
        "content": "<p>I see the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">as</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo.count</span> <span class=\"c1\">-- def foo.count : List Nat → Nat := ...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo.count</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo.count</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">as</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar.count</span> <span class=\"c1\">-- theorem bar.count : List Nat → Nat := ...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar.count</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bar.count</span><span class=\"o\">]</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>\n<p>What's happening is that <code>foo.count</code> inherits many of its modifiers from the parent declaration, in particular <code>theorem</code> in this case. One of the consequences of the <code>theorem</code> modifier is that it is marked as irreducible for the purposes of tactics like <code>simp</code> and the unification in <code>rfl</code>, so the unfolding fails</p>",
        "id": 301069492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664300143
    },
    {
        "content": "<p>it's not fully opaque though (in the sense of <code>opaque</code> declarations), so <code>delta</code> still works</p>",
        "id": 301069711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664300221
    },
    {
        "content": "<p>Unfortunately that still doesn't work in this particular case because the constant hasn't been added to the environment yet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">foo.count</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">foo.count</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n  <span class=\"n\">trivial</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo.count</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">foo.count</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 301070101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664300365
    },
    {
        "content": "<p>So I think the answer to your question is that this isn't possible, and deliberately so (for some sense of \"deliberately\"). The reason auxiliary declarations aren't in the environment yet is that we are waiting until we see the whole cluster of mutual definitions before we decide on a compilation strategy, which would affect the term that you see when you unfold the definition. So we get a circular dependence by trying to unfold the definition while still defining it</p>",
        "id": 301070601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664300511
    }
]