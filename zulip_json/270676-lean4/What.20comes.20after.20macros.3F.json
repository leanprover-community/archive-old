[
    {
        "content": "<p>I'm struggling to understand how to expand custom syntax, when the syntactic transformation isn't super easy.<br>\nI'm trying to transform something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">•••••••••▦▦•••••◎•••••••</span>\n<span class=\"bp\">•••••••••▦▦▦▦•••••••••••</span>\n<span class=\"bp\">•••••▦••••▦▦••••••••••••</span>\n<span class=\"bp\">•••••••▦••▦•••*•▦•••••••</span>\n<span class=\"bp\">••••╺━</span><span class=\"mi\">0</span><span class=\"bp\">•••▦•▦•••▦▦•••*••</span>\n<span class=\"bp\">•▦▦▦▦▦▦▦▦•••▦▦•••••••▦▦•</span>\n<span class=\"bp\">•▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦▦•</span>\n<span class=\"bp\">•▦▦▦▦▦▦▦▦▦•▦▦▦▦▦▦▦▦▦▦▦••</span>\n<span class=\"bp\">••▦▦▦▦▦▦▦▦••▦▦▦▦▦▦▦▦▦▦••</span>\n<span class=\"bp\">∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼</span>\n</code></pre></div>\n<p>... into an instance of <code>Game</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Game</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Map</span>\n  <span class=\"n\">snakes</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Snake</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Map</span> <span class=\"n\">where</span>\n  <span class=\"n\">goal</span>  <span class=\"o\">:</span> <span class=\"n\">Pos</span>\n  <span class=\"n\">rocks</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pos</span>\n  <span class=\"n\">fruit</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pos</span>\n  <span class=\"n\">saws</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pos</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Snake</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Pos</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n</code></pre></div>\n<p>From what I've read on elaboration, I feel like it might play some role, but I don't know how or why.</p>",
        "id": 266168419,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640607537
    },
    {
        "content": "<p>You can also run <code>Game.fromFields</code> in the macro, and then quote the <em>result</em> of <code>Game.fromFields</code> (that is, the macro expands into {map := ..., snakes := ...} and not a call to Game.fromFields).</p>",
        "id": 266169092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640608273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20comes.20after.20macros.3F/near/266169092\">said</a>:</p>\n<blockquote>\n<p>You can also run <code>Game.fromFields</code> in the macro, and then quote the <em>result</em> of <code>Game.fromFields</code> (that is, the macro expands into [[air, ...], ...] and not a call to Game.fromFields).</p>\n</blockquote>\n<p>How do I get a <code>List (List Field)</code> (to pass to <code>Game.fromFields</code>) <em>inside</em> the macro? Currently <code>fields</code> is an <code>Array Syntax</code>.</p>",
        "id": 266169163,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640608363
    },
    {
        "content": "<p>I don't see the whole code.  From what I can tell you're producing the <code>fields</code> variable from <code>rows</code> and <code>water</code>; you can probably directly produce the <code>List (List Field)</code> instead.</p>",
        "id": 266169349,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640608568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20comes.20after.20macros.3F/near/266169349\">said</a>:</p>\n<blockquote>\n<p>I don't see the whole code.  From what I can tell you're producing the <code>fields</code> variable from <code>rows</code> and <code>water</code>; you can probably directly produce the <code>List (List Field)</code> instead.</p>\n</blockquote>\n<p>Haha you're right <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> Thanks!</p>",
        "id": 266169478,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640608708
    },
    {
        "content": "<p>I am stuck on one step though. I have this transformation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fieldToTerm</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"n\">Field</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map_field</span><span class=\"bp\">|</span> <span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Field.air</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map_field</span><span class=\"bp\">|</span> <span class=\"bp\">▦</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Field.rock</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map_field</span><span class=\"bp\">|</span> <span class=\"bp\">✸</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Field.saw</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map_field</span><span class=\"bp\">|</span> <span class=\"bp\">◎</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Field.goal</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map_field</span><span class=\"bp\">|</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Field.fruit</span>\n  <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">map_field</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">numLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Field.snakeHead</span> <span class=\"n\">n</span> <span class=\"c1\">-- This doesn't work because `n` isn't a `Nat`.</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwError</span> <span class=\"s2\">\"Unknown map field.\"</span>\n</code></pre></div>\n<p>And I'll need to turn <code>n : Syntax</code> into a <code>Nat</code>.</p>",
        "id": 266169537,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640608794
    },
    {
        "content": "<p>The function <code>Syntax.isNatLit?</code> should work there</p>",
        "id": 266169610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640608879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 266179759,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640618257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as unresolved.</p>",
        "id": 266180318,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640618727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20comes.20after.20macros.3F/near/266169092\">said</a>:</p>\n<blockquote>\n<p>You can also run <code>Game.fromFields</code> in the macro, and then quote the <em>result</em> of <code>Game.fromFields</code> (that is, the macro expands into {map := ..., snakes := ...} and not a call to Game.fromFields).</p>\n</blockquote>\n<p>I now have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">rows</span><span class=\"o\">:</span><span class=\"n\">map_row</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">water</span><span class=\"o\">:</span><span class=\"n\">water_row</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">...</span>\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Game</span> <span class=\"bp\">←</span> <span class=\"n\">Game.fromFields</span> <span class=\"n\">fields.data</span>\n</code></pre></div>\n<p>How do I get  a <code>Syntax</code> object  from <code>g</code> though?</p>",
        "id": 266180411,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1640618815
    },
    {
        "content": "<p>You need to implement a function <code>Game → Syntax</code>, this is the <code>quote</code> function from the <code>Quote</code> type class.  At some point in the future this will be auto-derived, but for now you'll need to write it manually.</p>\n<p>You can use <code>Unhygienic.run `(....)</code> to create syntax outside of the MacroM/TermElabM monads.</p>",
        "id": 266183478,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1640621418
    }
]