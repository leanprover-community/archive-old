[
    {
        "content": "<p>/poll What should we use in mathlib4?<br>\ncamelCase and PascalCase<br>\nsnake_case</p>",
        "id": 222100408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610126830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/capitalization/near/221934052\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/capitalization/near/221933268\">said</a>:</p>\n<blockquote>\n<p>I would say we should follow Lean + core lib with definitions, but keep underscores in lemma names.</p>\n</blockquote>\n<p>FWIW, that's what I suggested last year <a href=\"/user_uploads/3121/F0fh9-9bS_3dnpfNjNcyptlE/image.png\">image.png</a></p>\n</blockquote>\n<p>^<br>\n<a href=\"/user_uploads/3121/F0fh9-9bS_3dnpfNjNcyptlE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/F0fh9-9bS_3dnpfNjNcyptlE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/F0fh9-9bS_3dnpfNjNcyptlE/image.png\"></a></div>",
        "id": 222101163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610127147
    },
    {
        "content": "<p>What happens to the distinction between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group\">docs#group</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Group\">docs#Group</a>, from category theory?</p>",
        "id": 222105010,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610128947
    },
    {
        "content": "<p>If we end up using unification hints this wouldn't be an issue, right?</p>",
        "id": 222106250,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610129627
    },
    {
        "content": "<p>(assuming categories are still defined using classes, that is)</p>",
        "id": 222106642,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610129836
    },
    {
        "content": "<p>Sorry, can you explain further? (Maybe I need to read more about unification hints.)</p>",
        "id": 222107066,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610130041
    },
    {
        "content": "<p>I don't really know what I'm talking about, but I remember monoids being declared in Leo's talk as <code>M : Monoid</code></p>",
        "id": 222109839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610131507
    },
    {
        "content": "<p>Maybe I misremembered</p>",
        "id": 222109855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610131518
    },
    {
        "content": "<p>Looking at List.Mem theorems in Init.Data.List.Basic, I find the naming convention slightly confusing. <a href=\"https://leanprover-community.github.io/mathlib4_docs////Init/Data/List/Basic.html#List.Mem\">https://leanprover-community.github.io/mathlib4_docs////Init/Data/List/Basic.html#List.Mem</a>  <br>\nMem starts with a capital letter but the following lemmas are List.mem_... instead of List.Mem_...<br>\nDoes it mean I should uncapitalize or snakify Mem in a theorem name? I am unsure what to do and I find that weird to do.</p>\n<p>List.Mem could be defined with a recursive def instead of an inductive. But inductive Prop's are preferred because it makes proofs easier.<br>\nHowever it sounds inelegant to decide to write Mem instead of mem just because that particular Prop happens to be recursively defined.</p>\n<p>My suggestion is probably naive but wouldn't it be cleaner to change the naming conventions for something like:<br>\nany declaration ending with a Prop, or with Prop:   like_that  (connectives should be in lower case)<br>\ndefs (not Props, not theorems):  likeThat<br>\ninductive types (not Props):  LikeThat<br>\n?</p>",
        "id": 295639299,
        "sender_full_name": "Michael Jam",
        "timestamp": 1661632910
    },
    {
        "content": "<p>My understanding is roughly: defs, namespaces, structures get capital camelcase. Theorems and lemmas get snake_case.</p>",
        "id": 295640254,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661633715
    },
    {
        "content": "<p>Current conventions are codified by mathport, and you can see its latest output here: <a href=\"https://github.com/leanprover-community/lean3port/blob/f2dc09b58e3e976fb99eab9c5f2b659a27e2dc2a/Leanbin/Init/Data/List/Basic.lean#L46\">https://github.com/leanprover-community/lean3port/blob/f2dc09b58e3e976fb99eab9c5f2b659a27e2dc2a/Leanbin/Init/Data/List/Basic.lean#L46</a></p>",
        "id": 295640366,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661633855
    },
    {
        "content": "<p>(Ignore the little <code>â‚“</code>.)</p>",
        "id": 295640425,
        "sender_full_name": "David Renshaw",
        "timestamp": 1661633886
    },
    {
        "content": "<p>OK I wasn't aware that def's that end with Sort are LikeThat. I thought a def was a term name in Sebastian's convention. I guess it's motivated by the idea that namespaces created by Props should always be capitalized. I kind of dislike that convention but that's only my taste..</p>",
        "id": 295641474,
        "sender_full_name": "Michael Jam",
        "timestamp": 1661635013
    }
]