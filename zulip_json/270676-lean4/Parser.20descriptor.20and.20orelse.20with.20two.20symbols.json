[
    {
        "content": "<p>I want to define a macro that allows me to write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function_properties</span> <span class=\"bp\">&lt;</span><span class=\"n\">function</span><span class=\"bp\">&gt;</span>\n  <span class=\"n\">linear</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">linearity</span><span class=\"bp\">&gt;</span>\n  <span class=\"n\">smooth</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">smoothness</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>that then defines corresponding instances for each property.</p>\n<p>In my attempt at such a macro, writing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function_properties</span> <span class=\"bp\">&lt;</span><span class=\"n\">function</span><span class=\"bp\">&gt;</span>\n  <span class=\"n\">linear</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">linearity</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>generates statement for <code>smooth</code> instead of for <code>linear</code></p>\n<p>Here is the code I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsSmooth</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsLin</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">funProp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">\"smooth\"</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"linear\"</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"function_properties \"</span> <span class=\"n\">term</span> <span class=\"n\">funProp</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">function_properties</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">smooth</span> <span class=\"bp\">$</span><span class=\"n\">proof</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"making smooth\"</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"n\">function_is_smooth</span> <span class=\"o\">:</span> <span class=\"n\">IsSmooth</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">proof</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">function_properties</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">linear</span> <span class=\"bp\">$</span><span class=\"n\">proof</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"making linear\"</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"n\">function_is_linear</span> <span class=\"o\">:</span> <span class=\"n\">IsLin</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">proof</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">function_properties</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">prop</span><span class=\"o\">:</span><span class=\"n\">funProp</span> <span class=\"bp\">$</span><span class=\"n\">props</span><span class=\"o\">:</span><span class=\"n\">funProp</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">function_properties</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">prop</span>\n        <span class=\"n\">function_properties</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">props</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">function_properties</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"n\">linear</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"n\">function_properties</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"n\">smooth</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsSmooth</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsLin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>And defining two properties at the same time fails completely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function_properties</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"n\">linear</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">smooth</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>\n<p>gives an error <code>elaboration function for 'commandFunction_properties__' has not been implemented</code></p>",
        "id": 280686826,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651265612
    },
    {
        "content": "<p>Ughh changing the definition of the parser descriptor to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">smoothProp</span> <span class=\"o\">:=</span> <span class=\"s2\">\"smooth\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">linearProp</span> <span class=\"o\">:=</span> <span class=\"s2\">\"linear\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">funProp</span> <span class=\"o\">:=</span> <span class=\"n\">smoothProp</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">linearProp</span>\n</code></pre></div>\n<p>makes <code>function_properties (@id Float)  linear ⟨⟩</code> correctly define <code>function_is_linear</code> instance. Why is that?</p>\n<p>Defining both properties at the same time still fails though.</p>",
        "id": 280687739,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651266080
    },
    {
        "content": "<p>I'm not on my PC, but have you seen a definition of a function of type <code>Macro</code>? It can be useful to debug the syntax term that's being created. I believe that <code>macro_rules</code> is syntax sugar for creating such function</p>",
        "id": 280688735,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651266512
    },
    {
        "content": "<p>There is bunch of stuff like that in <code>NotationExtra.lean</code> I should look into it.</p>",
        "id": 280689138,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651266663
    }
]