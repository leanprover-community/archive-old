[
    {
        "content": "<p>Hi !</p>\n<p>I am trying to make a lean4 library that links against a linux shared object but I can't find how to make everything work.</p>\n<p>I'm based on the <code>ffi</code> example in <code>lake</code> repository <a href=\"https://github.com/leanprover/lake/tree/master/examples/ffi\">https://github.com/leanprover/lake/tree/master/examples/ffi</a></p>\n<p>Right now, I'm having 2 issues:</p>\n<ul>\n<li>\n<p>I don't know how to say to lake that applications that <code>require</code>s this package needs to be linked with my library.<br>\n    I tried to add <code>moreLinkArgs := #[\"-lz\"]</code> in ffi lake <code>package</code> or <code>lean_lib</code> definition, but it doesn't  propagate the args to the application that require the library.<br>\n    It works if I add a <code>moreLinkArgs := #[\"-lz\"]</code> in either the application <code>package</code> or in <code>lean_exe</code>,  but I feel like it's not application role to know what the library needs.</p>\n</li>\n<li>\n<p>The shared objects built in order to be <code>--load-dynlib</code> are not linked to the shared library, so the lean compiler doesn't load zlib when loading the shared object.<br>\n    By looking at lake source code, Looks like there is no way to define custom linker arguments when building the shared object <a href=\"https://github.com/leanprover/lake/blob/master/Lake/Build/Targets.lean#L84-L92\">https://github.com/leanprover/lake/blob/master/Lake/Build/Targets.lean#L84-L92</a></p>\n</li>\n</ul>",
        "id": 288923524,
        "sender_full_name": "PolyB",
        "timestamp": 1657276736
    },
    {
        "content": "<p>Sadly, shared external libraries for dependencies are not currently supported by Lake. It is on my TODOs list, though. Two reasons I had not prioritized this thus far is that: </p>\n<ol>\n<li>In general, linking against a system library is not portable (users of your library will have to, out of band of Lean/Lake, acquire the library). For instance, note that Windows does not come with zlib.</li>\n<li>Linking a shared library makes it impossible for dependent packages to then build a self-contained native executable / shared library (i.e., they will need to always ship the required shared library with it)</li>\n</ol>\n<p>Number (2) is particularly important for your example because it highlights that even if the ability existed to tell Lake that dependents upon your library should link zlib, the end-user would still need to know that and figure out how to acquire and/or distribute zlib with their application. So, the principle you elucidated that \"it's not the application's role to know what the library needs\" would still be violated.</p>\n<p>Does that make sense / seem reasonable? </p>\n<p>To solve your immediate problem in the short term, I would suggest either using <code>extern_lib</code> to build a static copy of zlib or stick with adding <code>-lz</code> to the <code>moreLinkArgs</code> of your library / application.</p>",
        "id": 289016677,
        "sender_full_name": "Mac",
        "timestamp": 1657338833
    },
    {
        "content": "<p>Thank you for your response !</p>\n<p>Yes that make sense, thank you for the explanation !</p>\n<p>Even if adding <code>-lz</code> fixes my first bullet point, the second one still won't work because my lib won't be loaded at runtime.</p>\n<p>As you suggested I'm working around the issue by using a static build of the library. By doing that I ran into few new issues:<br>\nFor reference this is my current state : <a href=\"https://github.com/PolyB/LeanPythonRaw/blob/try_improve_lake/lakefile.lean\">https://github.com/PolyB/LeanPythonRaw/blob/try_improve_lake/lakefile.lean</a></p>\n<ul>\n<li>\n<p>What is the correct \"lean4\" way to fetch and build external dependencies ?<br>\n  Currently I'm fetching a tarball with <code>wget</code> and building it in <code>__package.buildDir</code>, As there is no helper to do that in Lake I feel like this is hacky.</p>\n</li>\n<li>\n<p>This creates an other issue as the fetched tarball has 2 <code>Target</code>s : the static library, and the directory containing the C headers. This makes fetching the archive a dependency to two things : the <code>extern_lib</code> producing the static library, and the <code>extern_lib</code> that requires the C headers to build my ffi code. How do I make so that the archive is only fetched only once ?</p>\n</li>\n<li>\n<p>The <code>--load-dynlib</code> is still not working , in the console, lake prints : <br>\n<code>LEAN_PATH=[...] LD_LIBRARY_PATH=[...] [...]/lean ./lean/./Python/Raw/Ffi.lean -R ./lean/. -o ./build/lib/Python/Raw/Ffi.olean -i ./build/lib/Python/Raw/Ffi.ilean -c ./build/ir/Python/Raw/Ffi.c --load-dynlib=libpythonffi.so --load-dynlib=libpython3.10.so</code></p>\n<p>But as <code>libpythonffi.so</code> references symbols defined in <code>libpython3.10.so</code>, it crashes when loading <code>libpythonffi.so</code>.</p>\n<p>If I manually swap the 2 <code>--load-dynlib</code> by doing<br>\n<code>[...] --load-dynlib=libpythonffi.so --load-dynlib=libpython3.10.so</code><br>\ninstead of <br>\n<code>[...] --load-dynlib=libpython3.10.so --load-dynlib=libpythonffi.so </code><br>\nit works, but I'm not sure on how to explain Lake that he needs to do that.</p>\n</li>\n<li>\n<p>One issue I ran across is that I can't define a directory as a <code>FileTarget</code>. As a hack I referenced a file in the directory and used <code>.getParent</code> on the file path, how can I do that properly ?</p>\n</li>\n</ul>",
        "id": 289228079,
        "sender_full_name": "PolyB",
        "timestamp": 1657562517
    },
    {
        "content": "<p>Wow! Thanks for the detailed walkthrough of your use case. This will really help me in a having a complex example to support as I improve Lake. Unfortunately, almost everything you hit is an issue with the current target API. Good news this that these things are my next big goal. Bad news is they are not done yet.  However, for stop-gap solutions. here is some advice:</p>\n<blockquote>\n<p>What is the correct \"lean4\" way to fetch and build external dependencies ?</p>\n</blockquote>\n<p>Currently, exactly the way you are doing so.</p>\n<blockquote>\n<p>This creates an other issue as the fetched tarball has 2 Targets :</p>\n</blockquote>\n<p>Sadly, there is not yet a way to fetch one target from another in <code>extern_lib</code> (though the feature does currently exist within Lake, it is just not currently exposed through the target API). One way to solve this for now is to just build a single static library composed of both the third-party code and your ffi. See <a href=\"https://stackoverflow.com/a/3821949\">this</a> StackOverflow post on how to combine static libraries.</p>\n<blockquote>\n<p>The --load-dynlib is still not working , in the console, lake prints</p>\n</blockquote>\n<p>The above single library solution should solve this.</p>\n<blockquote>\n<p>One issue I ran across is that I can't define a directory as a <code>FileTarget</code>.</p>\n</blockquote>\n<p>This is <a href=\"https://github.com/leanprover/lake/issues/90\">leanprover/lake#90</a>. Your hack is reasonable enough for now.</p>",
        "id": 289231771,
        "sender_full_name": "Mac",
        "timestamp": 1657564319
    }
]