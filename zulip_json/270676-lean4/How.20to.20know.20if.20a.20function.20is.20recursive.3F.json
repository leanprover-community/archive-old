[
    {
        "content": "<p>Is there a utility in Lean that tells if a function is recursive, mutually recursive, or not recursive?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- recursive</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.add'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- not recursive</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.double</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add'</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"c1\">-- mutually recursive</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- mutually recursive</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287222848,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1656005234
    },
    {
        "content": "<p>We currently don't have an API for directly answering this question, but we can add it. <br>\nHow are you planning to use it? I am assuming this is for the CVC 5 &lt;-&gt; Lean interface :)<br>\nSo, I am assuming you also want to know whether a function is tagged as <code>partial</code> or not.<br>\nIf it is mutually recursive, I am assuming you also want to retrieve all functions in the mutual block, correct? <br>\nWe have all this information internally, but we need to figure out how to provide it in a convenient way.</p>",
        "id": 287247478,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656017504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20know.20if.20a.20function.20is.20recursive.3F/near/287247478\">said</a>:</p>\n<blockquote>\n<p>all functions in the mutual block</p>\n</blockquote>\n<p>Is this currently available? I know we have it for inductives. But for definitions we're computing it in a more involved way. If we have it as an attribute of <code>DefinitionVal</code> that would be great <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> <br>\nCC: <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> <span class=\"user-mention\" data-user-id=\"432681\">@John Burnham</span></p>",
        "id": 287258583,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656018469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I will add an API for retrieving this information.</p>",
        "id": 287258936,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656018635
    },
    {
        "content": "<p>Fwiw, the two places I went looking for this were <code>FunInfo</code> and <code>DefinitionVal</code>. Either one seems fairly natural/convenient.</p>",
        "id": 287260861,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1656019771
    },
    {
        "content": "<p>For us, having it available in <code>DefinitionVal</code> would be ideal because we're building on top of <code>Lean.Environment</code>. I don't recall seeing <code>FunInfo</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 287264596,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656021873
    },
    {
        "content": "<blockquote>\n<p>How are you planning to use it? I am assuming this is for the CVC 5 &lt;-&gt; Lean interface :)</p>\n</blockquote>\n<p>Yes. You're right!</p>\n<blockquote>\n<p>If it is mutually recursive, I am assuming you also want to retrieve all functions in the mutual block, correct?</p>\n</blockquote>\n<p>That would be awesome!!! It would be nice to have something similar for mutual datatypes</p>",
        "id": 287271615,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1656027183
    },
    {
        "content": "<p>We now have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ConstantInfo.all</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Name</span>\n</code></pre></div>\n<p>The name is not great, but it is consistent with <code>InductiveVal.all</code>.<br>\nThe test suite has an example: <a href=\"https://github.com/leanprover/lean4/blob/98c775da3472401c03f7688b4292e6ee3a25bba3/tests/lean/allFieldForConstants.lean\">https://github.com/leanprover/lean4/blob/98c775da3472401c03f7688b4292e6ee3a25bba3/tests/lean/allFieldForConstants.lean</a><br>\nRecall that Lean breaks a <code>mutual</code> block into strongly connected components. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">printMutualBlock</span> <span class=\"bp\">``</span><span class=\"n\">f</span> <span class=\"c1\">-- [f, g]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">printMutualBlock</span> <span class=\"bp\">``</span><span class=\"n\">g</span> <span class=\"c1\">-- [f, g]</span>\n<span class=\"c1\">-- Recall that Lean breaks a mutual block into strongly connected components</span>\n<span class=\"k\">#eval</span> <span class=\"n\">printMutualBlock</span> <span class=\"bp\">``</span><span class=\"n\">h</span> <span class=\"c1\">-- [h]</span>\n</code></pre></div>",
        "id": 287272583,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656028023
    },
    {
        "content": "<p>The new data is ignored by the Lean kernel.</p>",
        "id": 287272673,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1656028095
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 287272881,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656028348
    },
    {
        "content": "<p>Hey guys, how can I do this VClosure type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">VInt</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">VClosure</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the error that I'm getting: <code>(kernel) arg #1 of 'Value.VClosure' contains a non-valid occurrence of the datatypes being declared</code></p>",
        "id": 287275412,
        "sender_full_name": "Guilherme Reis",
        "timestamp": 1656030851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"510265\">@Guilherme Reis</span> I'd recommend asking this question in a dedicated thread <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 287347344,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656085178
    },
    {
        "content": "<p>One interesting consequence of the SCC algorithm used in mutual compilation is that you can use mutual definitions to declare non-mutual definitions out of order:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As far as I can tell there is no difference between these functions and:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>So this might be useful for writing functions out of order for presentation purposes or something.</p>",
        "id": 287385366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656104870
    }
]