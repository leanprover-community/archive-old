[
    {
        "content": "<p>I have the following code, which is meant to capture the \"splits\" of a list at a given element:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListSplit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ListSplit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ListSplit</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ListSplit</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I would also like to collect all such splits explicitly through a definition such as this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.splits</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ListSplit</span> <span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">headmatch</span><span class=\"o\">:</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"n\">ListSplit.head</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"o\">[])</span> <span class=\"bp\">++</span>\n               <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">splits</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ListSplit.cons</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>The issue seems to be that <code>headmatch</code> is a proposition asserting that <code>h = a</code>, but LEAN requires <code>h</code> to be equal to <code>a</code> by definition and hence does not accept this code. Is there a workaround through which I can define a valid <code>List.splits</code> function as above? </p>\n<p>I was working with a structure carrying an explicit proof of the split earlier, but I would like to switch to an inductive definition to make proofs simpler. Any help will be greatly appreciated.</p>",
        "id": 270009104,
        "sender_full_name": "Anand Rao",
        "timestamp": 1643624849
    },
    {
        "content": "<p>You need to rewrite using the equality</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">then</span> <span class=\"n\">headmatch</span> <span class=\"bp\">▸</span> <span class=\"o\">[</span><span class=\"n\">ListSplit.head</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270009881,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643625172
    },
    {
        "content": "<p>Thanks a lot! This worked for me.</p>",
        "id": 270009979,
        "sender_full_name": "Anand Rao",
        "timestamp": 1643625223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> has marked this topic as resolved.</p>",
        "id": 270009987,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643625226
    },
    {
        "content": "<p>Since your inductive type seems to be invariant in the last parameter, you probably want to move it to the left of the colon. It's a good idea in general to do that whenever possible.</p>",
        "id": 270010402,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643625409
    },
    {
        "content": "<p>Thanks for the suggestion. Did you mean something like this for the header?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListSplit</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I tried this, but the <code>head</code> constructor throws an error because it relies on <code>h</code> as a parameter.</p>",
        "id": 270011402,
        "sender_full_name": "Anand Rao",
        "timestamp": 1643625905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Conflict.20between.20definitional.20and.20propositional.20equality/near/270011402\">said</a>:</p>\n<blockquote>\n<p>because it relies on <code>h</code> as a parameter.</p>\n</blockquote>\n<p>It shouldn't, you can use <code>a</code> there</p>",
        "id": 270011747,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643626070
    },
    {
        "content": "<p>Oh, right. Thanks, I've changed it. Is this change generally recommended for performance reasons, or is it for readability?</p>",
        "id": 270027119,
        "sender_full_name": "Anand Rao",
        "timestamp": 1643634192
    },
    {
        "content": "<p>There are some technical consequences like universe level (not relevant here) or <code>match</code> behavior, but here I was mostly thinking about documentation - I was confused at first why both the list and the element could vary</p>",
        "id": 270027454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643634358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Conflict.20between.20definitional.20and.20propositional.20equality/near/270010402\">said</a>:</p>\n<blockquote>\n<p>Since your inductive type seems to be invariant in the last parameter, you probably want to move it to the left of the colon. It's a good idea in general to do that whenever possible.</p>\n</blockquote>\n<p>This is interesting. We had a quick discussion (in Discord) about what drives one to choose one of the definitions below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span>   <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">f3</span>   <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>     <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is it mostly style or there is more to it?</p>",
        "id": 270045350,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1643641552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> only <code>f3</code> makes both <code>x</code> and <code>y</code> available to the body of the definition.</p>",
        "id": 270046158,
        "sender_full_name": "Mac",
        "timestamp": 1643641806
    },
    {
        "content": "<p>For <code>def</code>s, whether you put an argument before or after the colon is a purely stylistic choice. For <code>inductive</code>, the position before/after the colon makes the argument a parameter/index, which is a crucial distinction.</p>",
        "id": 270050164,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643643285
    }
]