[
    {
        "content": "<p>Is there a way to bind notations to scopes?  Said another way, is there a way to use the same notation for two different things, and then disambiguate between them post-hoc?</p>",
        "id": 229917187,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615493328
    },
    {
        "content": "<p>In Lean, we have \"scoped\" and \"local\" attributes. You can use them for notation, instances, unification hints, simp lemmas, etc. <br>\nIt is not documented yet, but here is an example.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/f000aa0155f9ec168a017931631409e0125eecc6/tests/lean/run/scopedParsers2.lean\">https://github.com/leanprover/lean4/blob/f000aa0155f9ec168a017931631409e0125eecc6/tests/lean/run/scopedParsers2.lean</a></p>",
        "id": 229919278,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615494095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">||</span> <span class=\"n\">y</span>\n\n  <span class=\"n\">scoped</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\"++\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n  <span class=\"k\">#check</span> <span class=\"n\">true</span> <span class=\"bp\">++</span> <span class=\"n\">false</span> <span class=\"c1\">-- Ok</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">true</span> <span class=\"bp\">++</span> <span class=\"n\">false</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"kn\">section</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n  <span class=\"k\">#check</span> <span class=\"n\">true</span> <span class=\"bp\">++</span> <span class=\"n\">false</span> <span class=\"c1\">-- Ok</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- The following doesn't work yet because we parse the command before we (elaborate it and) open the namespace</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"n\">Foo</span> <span class=\"k\">in</span> <span class=\"n\">true</span> <span class=\"bp\">++</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229920096,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615494414
    },
    {
        "content": "<p>Neat, thanks!  Are you planning to fix the <code>open Foo in ...</code> example?  I think it would be quite useful</p>",
        "id": 229921490,
        "sender_full_name": "Jason Gross",
        "timestamp": 1615494967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241007\">Jason Gross</span> <a href=\"#narrow/stream/270676-lean4/topic/binding.20scopes.20to.20notations.3F/near/229921490\">said</a>:</p>\n<blockquote>\n<p>Neat, thanks!  Are you planning to fix the <code>open Foo in ...</code> example?  I think it would be quite useful</p>\n</blockquote>\n<p>Yes, we are planning to do it. This one and local notations are on our to-do list, just not a high priority right now :)</p>",
        "id": 229921747,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615495087
    }
]