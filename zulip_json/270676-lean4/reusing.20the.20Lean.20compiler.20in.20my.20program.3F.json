[
    {
        "content": "<p>How much of the lean compiler can I reuse in a Lean program?  Like, suppose I want to open a file from disk, run it through lean, and get:</p>\n<ul>\n<li>the list of lines</li>\n<li>the list of error messages and their associated row:col ranges</li>\n<li>a structured representation of the document where I have nodes for each namespace, section, command, etc, and where I can walk the AST and get source ranges for each node</li>\n</ul>\n<p>Is this mostly straightforward by using the right stdlib functions, or do I have to rewrite some of it myself?</p>\n<p>(I'm getting sufficiently tired of minimizing examples by hand that I'd like to start porting my Coq bug minimizer to Lean for auto-minimizing test cases.)</p>",
        "id": 231038202,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616166620
    },
    {
        "content": "<p>Yes, this is absolutely possible and how the language server works. The server is a bit complicated by asynchronicity etc, so it's probably better to look at the noninteractive top level function: <a href=\"https://github.com/leanprover/lean4/blob/54405c4543dab3d3c537d0c26965e186e9ce42c4/src/Lean/Elab/Frontend.lean#L92-L99\">https://github.com/leanprover/lean4/blob/54405c4543dab3d3c537d0c26965e186e9ce42c4/src/Lean/Elab/Frontend.lean#L92-L99</a><br>\nYou can see how it prints the error messages, and <code>s.commands : Array Syntax</code> gives you access to the file's concrete syntax tree</p>",
        "id": 231039838,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616167122
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 231053552,
        "sender_full_name": "Jason Gross",
        "timestamp": 1616172399
    }
]