[
    {
        "content": "<p>Can I have <code>lemma</code> back? Is it an easy task to write a macro which defines a keyword <code>lemma</code> to mean <code>theorem</code>?</p>",
        "id": 236713715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619717478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/Proving.20findLeast.3A.20an.20experience.20report/near/234260714\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> FYI <code>declVal</code> is exposed now on master so </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"lemma\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">sig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>should work.</p>\n</blockquote>",
        "id": 236716621,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619718615
    },
    {
        "content": "<p><code>@[simp] lemma</code> doesn't work :-( The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">axiom</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">constant</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">def</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">example</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">inductive</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"kd\">theorem</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 236724842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619721917
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"s2\">\"lemma\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">sig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 236997421,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619902058
    },
    {
        "content": "<p>Thanks Sebastian! Right now all this macro stuff looks like complete gobble-de-gook to me -- I look forward to the day when it all starts making sense.</p>",
        "id": 237001899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619904135
    },
    {
        "content": "<p>I can't really understand how people can just appear from nowhere on this stream (I'm not talking about you, I'm talking about others) writing macro stuff when there's no documentation</p>",
        "id": 237001940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619904190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There's really an elegance and simplicity to the code base of lean4 that makes is quite possible to understand. But it is complex too, so it takes time to build up the intuition.</p>",
        "id": 237002164,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1619904395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'll share a quick explanation of this one in case it helps. The parser for <code>theorem</code> is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">theorem</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">parser</span><span class=\"bp\">!</span> <span class=\"s2\">\"theorem \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declId</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declSig</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declVal</span>\n</code></pre></div>\n<p>and so it is tempting to define <code>lemma</code> similarly, i.e. as a macro that takes the same arguments as <code>theorem</code> and just replaces the name \"lemma\" with \"theorem\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"lemma\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">sig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, the <code>theorem</code> parser is not actually considered at the top-level when parsing commands. Instead, it gets called by the <code>declaration</code> parser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinCommandParser]</span> <span class=\"kd\">def</span> <span class=\"n\">declaration</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n<span class=\"n\">declModifiers</span> <span class=\"n\">false</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">abbrev</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">def</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">theorem</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">constant</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">instance</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">axiom</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">example</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">inductive</span><span class=\"bp\">»</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">classInductive</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">«</span><span class=\"kd\">structure</span><span class=\"bp\">»</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>declModifiers false</code> part is what allows for first parsing e.g. <code>@[simp]</code>. As you can see, the list of declaration commands <code>«abbrev», «def», ...</code> is hardcoded in the <code>declaration</code> parser (presumably for performance reasons) and so it cannot easily be extended. Also, as the error message you saw indicates, the <code>lemma</code> macro is not expanded when the macro does not match the full command. Aside: I am not sure what the rules are in general for when macros are expanded besides at the top-level.</p>\n<p>So, Sebastian's solution is to basically mimic the \"upwards closure\" of the <code>theorem</code> parser, i.e. the path from the <code>theorem</code> parser to the actual top-level command parser, <code>declaration</code>, that calls it. Then whenever the <code>theorem</code> parser would have worked, the same command but with <code>lemma</code> will trigger the macro, and the result will trigger the original <code>declaration</code> parser.</p>",
        "id": 237003783,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619906062
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 237003805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619906108
    },
    {
        "content": "<p>I feel like there is a really nice \"introduction to parsers\" which could be written using Lean 4, explaining what a parser actually is and using Lean 4 to demonstrate them.</p>",
        "id": 237003931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619906257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma.20.3A.3D.20theorem.3F/near/237001940\">said</a>:</p>\n<blockquote>\n<p>I can't really understand how people can just appear from nowhere on this stream (I'm not talking about you, I'm talking about others) writing macro stuff when there's no documentation</p>\n</blockquote>\n<p>The Lean 4 code itself has some examples that you can imitate and then play around with to see how it works. That's at least what I did to write the <a href=\"https://github.com/mhuisi/lean4-cli#configuration\">lean4-cli configuration macro</a>.</p>",
        "id": 237005008,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1619907293
    },
    {
        "content": "<p>I think you're all vastly overestimating how much I know about what a parser even <em>is</em>, but thanks anyway :-) Just to give you some idea of where I'm coming from, although I often read the non-meta mathlib source code (i.e. the maths), it is extremely rare that I ever look at the core Lean 3 code base. I'm about as far from a computer scientist as it's possible to be in this game. I am already lost at \"DSL\" in that README. I am not looking for more hints! I'm just saying that what I need to get going is something far more basic.</p>",
        "id": 237006888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619909139
    },
    {
        "content": "<p>Probably everybody in this chat thread has taken a compilers course, so it definitely can feel intimidating. I feel like that's where most people pick up this sort of thing. It took about six weeks in an upper undergraduate course  and many hours of homework exercises until I really had a handle on basic scanning and parsing. My college's compilers course used Engineering a Compiler 2nd Ed; but textbooks cost money. I've read online that <a href=\"https://craftinginterpreters.com/\">https://craftinginterpreters.com/</a> is quite good, you might try the chapters on scanning and parsing there. It's much more applications-focused - it'll skip a lot of theory that you might not be interested in.</p>",
        "id": 237084189,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1619989793
    },
    {
        "content": "<p>I'll join the thread just so Kevin doesn't feel alone in not having taken a compilers course. :-) A large fraction of the mathlib contributors / user base is in the same boat (and hopefully only more so in the future). Eventually it would be great if we have a layer of documentation that caters to this group, too! (Of course, this can probably only be usefully written by people who <em>haven't</em> taken a compilers course.)</p>",
        "id": 237093317,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619997230
    },
    {
        "content": "<p>the Lean Tactic Game? :&gt; &lt;:</p>",
        "id": 237093877,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619997785
    },
    {
        "content": "<p>Even just tutorials like Rob's great metaprogramming tutorial for LFTCM2020. I think this was pitched at a level where mathematicians without prior PL experience, but who had used Lean a bit, could start to interact with Lean's metaprogramming facilities.</p>",
        "id": 237094093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619998007
    },
    {
        "content": "<p>I'm hoping for a reference manual version first, which can be re-packaged (by anyone) for a lay audience</p>",
        "id": 237094114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619998062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/lemma.20.3A.3D.20theorem.3F/near/237094093\">said</a>:</p>\n<blockquote>\n<p>Even just tutorials like Rob's great metaprogramming tutorial for LFTCM2020. I think this was pitched at a level where mathematicians without prior PL experience, but who had used Lean a bit, could start to interact with Lean's metaprogramming facilities.</p>\n</blockquote>\n<p>For anyone who might be interested into it (I didn't know about it!), I think this is the series of video on this tutorial: <a href=\"https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2</a></p>",
        "id": 237094376,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619998337
    },
    {
        "content": "<p>There is a link to Rob's videos on our community resources page <a href=\"https://leanprover-community.github.io/learn.html#metaprogramming-and-tactic-writing\">here</a>. Maybe that page isn't easy to find though.</p>",
        "id": 237095187,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619999219
    },
    {
        "content": "<p>This is a blast-from-the-past but I think the recent \"Typed Macros\" update broke this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"s2\">\"lemma\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">sig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287765150,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1656444851
    },
    {
        "content": "<p>Thanks, fixed <a href=\"https://github.com/leanprover/lean4/commit/c64ac02ffc5a1e496557a009e42f129306a0c031\">https://github.com/leanprover/lean4/commit/c64ac02ffc5a1e496557a009e42f129306a0c031</a></p>",
        "id": 287772584,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1656448626
    }
]