[
    {
        "content": "<p>thanks for all the responses and input! I'll mark this as solved now</p>",
        "id": 275299380,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1647292646
    },
    {
        "content": "<p>I've encountered a similar problem -- I guess it's actually the same situation, but this time it stems from a hidden call to <code>casesOn</code> that is generated by <code>match</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">m</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">trace_state</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>The state is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">invImage</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">measure</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n            <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n<span class=\"c1\">-- this one is fine</span>\n\n<span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">invImage</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">measure</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n            <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n    <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- problem: notice we know nothing about m</span>\n</code></pre></div>\n<p>(My example is artificial, I made it by isolating the problematic part of a function I wrote in some project of mine that requires a lot more boilerplate to define.)</p>\n<p>It is still possible to write the function by breaking it down to a <code>WellFounded.fix</code> call, so this is not a technical limitation.<br>\nI just wanted to share this non-trivial nested induction example !</p>",
        "id": 276799730,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648403962
    },
    {
        "content": "<p>(Also, I guess this pattern can arise more often than the pattern of <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span>' original message, and it is a bit confusing because the higher order function call is not obvious -- so it's an interesting example of the issue)</p>",
        "id": 276800016,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1648404311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385405\">@Julien Marquet</span> We usually use subtypes to define this kind of function. The subtype stores the fact that the result is less than equal to the input. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_trans</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">))⟩</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">Nat.pred_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"k\">match</span> <span class=\"n\">f'</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_trans</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">Nat.pred_le</span> <span class=\"n\">_</span><span class=\"o\">))⟩</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 276805025,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648411357
    },
    {
        "content": "<p>Note that, the following variant  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is nasty to write down because we currently do not have a mechanism to tell Lean we want <code>h : n = 0 -&gt; False</code> in the second alternative. This feature is currently only available in the <code>split</code> tactic.<br>\nWe do have the mechanism for <code>if-then-else</code> as the example above suggests.</p>",
        "id": 276805192,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648411611
    }
]