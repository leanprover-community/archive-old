[
    {
        "content": "<p>How can I match an operator in the <code>Macro_rules</code> ?</p>\n<p>I am trying to match an operator and do something corresponding to its affix.<br>\nFor instance,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{| \"</span> <span class=\"n\">term</span><span class=\"bp\">*</span> <span class=\"s2\">\" |}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">op</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">|</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">op</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">infixl</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">prec</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">)]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">prio</span><span class=\"o\">)]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">op</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n     <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n</code></pre></div>\n<p>but it doesn't seem to work, and I am not sure what do I miss.</p>",
        "id": 230981652,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616135307
    },
    {
        "content": "<p>Binary operators do not share a common syntax kind, nor can they be traced back to the original notation command. So whatever you are trying to do, I believe you need a fundamentally different approach.</p>",
        "id": 230989916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616142761
    },
    {
        "content": "<p>Oh, does it mean that I am not able to identify if a syntax is operator or not, either using <code>macro_rules</code> or via the elaboration monad ?</p>",
        "id": 230997348,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616147154
    },
    {
        "content": "<p>Is is possible to get syntax (or some other structures) after the macro expansion of operators but before type checking ?</p>",
        "id": 230997693,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616147328
    },
    {
        "content": "<p>Macro expansion and elaboration are intertwined, but you can call <code>expandMacros</code> explicitly to expand as much as possible (including all notations) without elaboration.</p>",
        "id": 230999942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616148605
    },
    {
        "content": "<p>While using <code>expandMacros</code> to  expand the operator notation as much as I want,  will I need to first check if the syntax is of some kind of <code>notation</code> ?</p>",
        "id": 231002812,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616150210
    },
    {
        "content": "<p>I still don't know what you are trying to do</p>",
        "id": 231003411,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616150557
    },
    {
        "content": "<p>I am just trying to write some macros like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">{</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">op1</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">op2</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">...|</span><span class=\"o\">}</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">op2</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">op1</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231003701,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616150709
    },
    {
        "content": "<p>I've never seen idiom brackets that work recursively like this, or are restricted to operators. In any case, the point stands that you cannot really distinguish infix operators from other syntax. But you <em>can</em> unfold them, using <code>expandMacros</code>.</p>",
        "id": 231005157,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616151403
    },
    {
        "content": "<p>But that I saw that <code>expandMixfix</code> can match the syntax to see if it's infix, prefix or postfix?</p>",
        "id": 231005460,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616151565
    },
    {
        "content": "<p>You are confusing the definition and the usage of a notation</p>",
        "id": 231005558,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616151608
    },
    {
        "content": "<p>Is there documentation or which files should I look into to help me clarify it ?</p>",
        "id": 231005891,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616151759
    },
    {
        "content": "<p><code>expandMixfix</code> is called when you use the <code>infix</code> command, not when you use the operator created by it</p>",
        "id": 231006525,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1616152093
    },
    {
        "content": "<p>Ah ! ok I got it! Thank you!!</p>",
        "id": 231006670,
        "sender_full_name": "Lim, Thing-han",
        "timestamp": 1616152161
    }
]