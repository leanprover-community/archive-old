[
    {
        "content": "<p>I'm trying to clear out <a href=\"https://github.com/arthurpaulino/FxyLang/blob/bc4c3ab114bd5afe890840e81e8a69912b7f713b/FxyLang/AST.lean#L324\">this <code>sorry</code></a> but I'm having two problems:</p>\n<ul>\n<li>I'm not being able to use <code>induction</code> on <code>l</code> because Lean is complaining about a \"type mismatch when assigning motive\"</li>\n<li>Even if I succeeded at using induction, I'm afraid I wouldn't be able to go much further because I don't see a reference to <a href=\"https://github.com/arthurpaulino/FxyLang/blob/bc4c3ab114bd5afe890840e81e8a69912b7f713b/FxyLang/AST.lean#L289\"><code>consume</code></a> in the context:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">es</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">Expression</span>\n<span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">p</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Program</span>\n<span class=\"n\">l</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Program</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Option.isSome</span> <span class=\"n\">l</span><span class=\"bp\">?</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Option.get</span> <span class=\"n\">l</span><span class=\"bp\">?</span> <span class=\"n\">hs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p><code>consume</code> is a function that consumes an <code>NEList</code>. So what I'm trying to prove is basically that if the initial <code>NEList</code> doesn't have duplicated values, then the resulting <code>NEList</code> won't either.</p>",
        "id": 278018781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649249687
    },
    {
        "content": "<p>Disclaimer: I did not download/try your example on my machine. So, take the following suggestion with a grain of salt :)<br>\nThe notation </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span>\n        <span class=\"bp\">&lt;</span><span class=\"n\">rest</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>is syntax sugar for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">rest</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>In the <code>match</code>-expression we can annotate discriminants to get a hypotheses stating they are equal to the pattern. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">rest</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>If you use this annotation, we will have <code>h : consume p ns es = (l?, p)</code> in your local context.<br>\nWe currently do not have a similar notation for the <code>let</code> syntax sugar above.</p>",
        "id": 278031835,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649255428
    },
    {
        "content": "<p>For the first issue, it seems to be a bug in the induction tactic when the variable is a <code>let</code>-declaration. I will take a look.<br>\nIn the meantime, you can make progress by using <code>let_fun</code> instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"n\">let_fun</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">?.</span><span class=\"n\">get</span> <span class=\"n\">hs</span>\n</code></pre></div>\n<p><code>let_fun x := v; b</code> is sugar for <code>(fun x =&gt; b) v</code></p>",
        "id": 278033124,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649255926
    },
    {
        "content": "<p>BTW, you can also simplify</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n          <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">?.</span><span class=\"n\">get</span> <span class=\"n\">hs</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.noDup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n          <span class=\"n\">return</span> <span class=\"n\">curry</span> <span class=\"n\">l</span> <span class=\"n\">this</span> <span class=\"n\">p</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p.runIO</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.noDup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n          <span class=\"n\">return</span> <span class=\"n\">curry</span> <span class=\"n\">l</span> <span class=\"n\">this</span> <span class=\"n\">p</span>\n <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p.runIO</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.noDup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n          <span class=\"n\">return</span> <span class=\"n\">curry</span> <span class=\"n\">l</span> <span class=\"n\">this</span> <span class=\"n\">p</span>\n<span class=\"k\">else</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p.runIO</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 278034479,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649256490
    },
    {
        "content": "<p>You can also combine the <code>consume</code> match with the one above and write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span>  <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.noDup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n            <span class=\"n\">curry</span> <span class=\"n\">l</span> <span class=\"n\">this</span> <span class=\"n\">p</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.run</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 278034775,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649256605
    },
    {
        "content": "<p>Yeah that's precisely how it was before but I changed it as an attempt to get <code>consume</code> in my context</p>",
        "id": 278037838,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649257669
    },
    {
        "content": "<p>Note that, you will now have  <code>h : consume p ns es = ...</code></p>",
        "id": 278038078,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649257751
    },
    {
        "content": "<p>Oh right! It's actually slightly different. Thanks!!</p>",
        "id": 278039134,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649258140
    },
    {
        "content": "<p>I will try it when I get home</p>",
        "id": 278039944,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649258450
    },
    {
        "content": "<p>Not sure if this is hard, or tricky, or if I'm simply not competent enough, but how would you prove this one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eqqIffEq</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278085071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649278609
    },
    {
        "content": "<p>It's provable if you replace <code>BEq</code> by <code>LawfulBEq</code>, but you're out of luck if your BEq instance is not lawful.</p>",
        "id": 278085763,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649278916
    },
    {
        "content": "<p>Thanks! I didn't know about <code>LawfulBEq</code>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eqIffBEq</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">eq_of_beq</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 278087069,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649279661
    },
    {
        "content": "<p>Why is it that sometimes we end up with infeasible inductive hypotheses? Is it a symptom os flawed definitions? In this example I can't seem to be able to use <code>hn</code> without assuming something false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NEList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uno</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NEList.contains</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uno</span> <span class=\"n\">a</span><span class=\"o\">,</span>     <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">x</span> <span class=\"bp\">||</span> <span class=\"n\">as.contains</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NEList.noDupAux</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">uno</span>  <span class=\"n\">a</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">l.contains</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">l.contains</span> <span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">¬</span> <span class=\"n\">r.contains</span> <span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">noDupAux</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NEList.noDup</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">noDupAux</span> <span class=\"o\">[]</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">mutual</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>   <span class=\"o\">:</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bool</span>  <span class=\"o\">:</span> <span class=\"n\">Bool</span>        <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">int</span>   <span class=\"o\">:</span> <span class=\"n\">Int</span>         <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">float</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>       <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">list</span>  <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">str</span>   <span class=\"o\">:</span> <span class=\"n\">String</span>      <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">String</span>      <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"bp\">|</span> <span class=\"n\">curry</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l.noDup</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>      <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"n\">String</span>     <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">not</span>  <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span>  <span class=\"o\">:</span> <span class=\"n\">String</span>     <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mul</span>  <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">eq</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ne</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lt</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">le</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">gt</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ge</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Expression</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">skip</span>        <span class=\"o\">:</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sequence</span>    <span class=\"o\">:</span> <span class=\"n\">Program</span>    <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">attribution</span> <span class=\"o\">:</span> <span class=\"n\">String</span>     <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ifElse</span>      <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">whileLoop</span>   <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">evaluation</span>  <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">fail</span>        <span class=\"o\">:</span> <span class=\"n\">String</span>     <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NEList</span> <span class=\"n\">Program</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">consume</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">NEList</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">NEList</span> <span class=\"n\">Expression</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">NEList</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"n\">Program</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">e</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">consume</span> <span class=\"o\">(</span><span class=\"n\">sequence</span> <span class=\"o\">(</span><span class=\"n\">attribution</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">evaluation</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">ns</span> <span class=\"n\">es</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">uno</span>  <span class=\"n\">e</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">sequence</span> <span class=\"o\">(</span><span class=\"n\">attribution</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">evaluation</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uno</span>  <span class=\"n\">n</span><span class=\"o\">,</span>    <span class=\"n\">uno</span>  <span class=\"n\">e</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">sequence</span> <span class=\"o\">(</span><span class=\"n\">attribution</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">evaluation</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uno</span>  <span class=\"n\">_</span><span class=\"o\">,</span>    <span class=\"n\">cons</span> <span class=\"bp\">..</span>   <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">fail</span> <span class=\"s2\">\"incompatible number of parameters\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noDupOfNoDupAux</span> <span class=\"o\">{</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">NEList</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDupAux</span> <span class=\"n\">l</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ns.noDup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is fine</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">noDupOfConsumeNoDup</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p'</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">NEList.noDup</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">uno</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">consume</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">ns</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">NEList.noDup</span><span class=\"o\">,</span> <span class=\"n\">NEList.noDupAux</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span> <span class=\"bp\">$</span> <span class=\"n\">noDupOfNoDupAux</span> <span class=\"n\">h.2</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p'</span> <span class=\"o\">(</span><span class=\"n\">NEList.cons</span> <span class=\"n\">n</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"n\">consume</span> <span class=\"n\">p'</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"c1\">-- `(NEList.cons n ns)` can't be defeq to `ns`... not fine!</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hn</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>Any ideas what I might be doing wrong?</p>",
        "id": 278168937,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649340435
    },
    {
        "content": "<p>the issue is usually a missing <code>generalizing</code> on <code>induction</code></p>",
        "id": 278184429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649346436
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 278185795,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649346954
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">noDupOfConsumeNoDup</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NEList.noDup</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">consume</span> <span class=\"n\">p'</span> <span class=\"n\">ns</span> <span class=\"n\">es</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">NEList.noDup</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">ns</span> <span class=\"n\">generalizing</span> <span class=\"n\">p'</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">uno</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">es</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">ns</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">NEList.noDup</span><span class=\"o\">,</span> <span class=\"n\">NEList.noDupAux</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">noDupOfNoDupAux</span> <span class=\"n\">h.2</span>\n      <span class=\"n\">cases</span> <span class=\"n\">es</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">uno</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n      <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">e</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 278187122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649347374
    },
    {
        "content": "<p>I have the impression that this should be simple, but I don't know what I'm missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foos</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Goals accomplished 🎉</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Goals accomplished 🎉</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- unsolved goals</span>\n<span class=\"c1\">-- ⊢ ¬#[Foo.foo 0] = #[Foo.foo 1]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.foos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"n\">Foo.foos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- unsolved goals</span>\n<span class=\"c1\">-- ⊢ ¬#[Foo.foo 0] = #[Foo.foo 1]</span>\n</code></pre></div>\n<p>Can someone help me please? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 284197295,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653695878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foos</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Goals accomplished 🎉</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Goals accomplished 🎉</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Not</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">CONTRA</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nomatch</span> <span class=\"n\">CONTRA</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- goals accomplished</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.foos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"n\">Foo.foos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Not</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">CONTRA</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nomatch</span> <span class=\"n\">CONTRA</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- goals accomplished</span>\n</code></pre></div>",
        "id": 284197686,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653696228
    },
    {
        "content": "<p>I doubt this is the best way to write this in lean. I wrote it as I would in Coq, which is to unfold the <code>Not</code>,  <code>intros</code> the absurd hypothesis, and then claim that the absurdity is vacuously true.</p>",
        "id": 284197746,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653696270
    },
    {
        "content": "<p>Does your kernel accept it? Mine doesn't: <code>leanprover/lean4:nightly-2022-05-18</code></p>",
        "id": 284197860,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653696395
    },
    {
        "content": "<p>I was on <code>leanprover/lean4:nightly-2022-03-30</code>. Let me try on a newer version.</p>",
        "id": 284197893,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653696456
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foos</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Goals accomplished 🎉</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- Goals accomplished 🎉</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">CONTRA</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">CONTRA</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.foos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"n\">Foo.foos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">CONTRA</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">CONTRA</span>\n</code></pre></div>\n<p>This formulation works on <code>leanprover/lean4:nightly-2022-05-18</code></p>",
        "id": 284197970,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653696519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">CONTRA</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nomatch</span> <span class=\"n\">CONTRA</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>in proof mode also works for me on <code>Lean (version 4.0.0-nightly-2022-05-18, commit eb170d1f43e8, Release)</code>. Does it for you, <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> ?</p>",
        "id": 284198092,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1653696646
    },
    {
        "content": "<p>Yeah</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">≠</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Foo.foo</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 284198110,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653696675
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 284198126,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653696697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Thanks for pointing it out. I added the missing <code>simp</code> theorem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.of_toArray_eq_toArray</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as.toArray</span> <span class=\"bp\">=</span> <span class=\"n\">bs.toArray</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>All examples should now go through using <code>by simp</code>.</p>",
        "id": 284201518,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1653701312
    }
]