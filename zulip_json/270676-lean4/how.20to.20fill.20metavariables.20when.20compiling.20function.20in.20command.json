[
    {
        "content": "<p>I'm trying to compile a function after manually constructing its syntax, but I run into meta variables problems.<br>\nAs a simple example, let's say I want to generate a function of type Nat that returns 42.<br>\nIn regular lean I can just do <code>def f : Nat := 42</code> but here I'm getting an <code>(kernel) declaration has metavariables</code> error.<br>\nHow can I fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"cmd\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">flip</span> <span class=\"n\">elabTerm</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">liftTermElabM</span> <span class=\"n\">name</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">flip</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkDefinitionValEx</span> <span class=\"n\">name</span> <span class=\"o\">[]</span> <span class=\"n\">type</span> <span class=\"n\">val</span> <span class=\"bp\">.</span><span class=\"n\">opaque</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addAndCompile</span> <span class=\"o\">{}</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">KernelException.declHasMVars</span> <span class=\"n\">env</span> <span class=\"n\">name</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"declHasMVars\"</span>\n      <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"name: \"</span> <span class=\"bp\">++</span> <span class=\"n\">name.toString</span>\n      <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"expr: \"</span> <span class=\"bp\">++</span> <span class=\"n\">expr.dbgToString</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"n\">e.toMessageData</span> <span class=\"o\">{})</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n<span class=\"n\">cmd</span>\n<span class=\"k\">#print</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Thanks for suggestions/solutions</p>",
        "id": 286045726,
        "sender_full_name": "Michael Jam",
        "timestamp": 1655199814
    },
    {
        "content": "<p>There is a function <code>assignExprMVar</code> which you can use.</p>",
        "id": 286046479,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1655200227
    },
    {
        "content": "<p>Such as in the example <code>assignExprMVar mvarId2 (mkApp (mkConst ``Nat.succ) mvar)</code></p>",
        "id": 286046552,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1655200256
    },
    {
        "content": "<p>But the issue here is that they don't even know where the meta variables are no? At least I certainly cannot see any being introduced manually.</p>",
        "id": 286047501,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1655200720
    },
    {
        "content": "<p>I think <code>instantiateMVars</code> is what I need</p>",
        "id": 286047882,
        "sender_full_name": "Michael Jam",
        "timestamp": 1655200926
    },
    {
        "content": "<p>I replaced the let val line with <code>  let val &lt;- liftCoreM &lt;| MetaM.run' &lt;| return (&lt;- instantiateMVars (&lt;- (TermElabM.run' &lt;| \n        withDeclName name &lt;| flip elabTerm (.some type) &lt;| &lt;- `(42))))</code> and it works (I know the style is ugly).</p>",
        "id": 286048490,
        "sender_full_name": "Michael Jam",
        "timestamp": 1655201274
    }
]