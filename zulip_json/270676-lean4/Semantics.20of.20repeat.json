[
    {
        "content": "<p>The semantics of <code>repeat</code> have changed between Lean 3 and Lean 4. In Lean 3, <code>repeat t</code> applies <code>t</code> to the initial goals, then to the subgoals produced by each invocation of <code>t</code>, etc., until <code>t</code> fails. In Lean 4, <code>repeat t</code> applies <code>t</code> to the first goal, then to the first goal again, etc., until <code>t</code> fails. This is similar to (the same as?) Lean 3 <code>iterate</code>.</p>\n<p>Was this change intentional? Imo Lean 3 <code>repeat</code> is the much more useful combinator and the subtle change of semantics will likely be confusing for people coming from Lean 3. (Also, the docstring for Lean 4 <code>repeat</code> seems to be describing the Lean 3 behaviour.)</p>\n<p>To get the Lean 3 behaviour back, I believe <code>repeat</code> should be defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"repeat \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">repeat</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">all_goals</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">repeat</span> <span class=\"bp\">$</span><span class=\"n\">seq</span> <span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 307770628,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1667493044
    },
    {
        "content": "<p>I also hit this today, +1 for copying the lean 3 version</p>",
        "id": 307778834,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667493747
    },
    {
        "content": "<p>So what's an example where the semantics differ?</p>",
        "id": 307791292,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667494142
    },
    {
        "content": "<p>The alternative behavior is available in std as <code>repeat'</code></p>",
        "id": 307794391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667495018
    },
    {
        "content": "<p>The example I hit is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">apply</span> <span class=\"n\">mul_eq_zero</span> <span class=\"c1\">-- add curly braces for lean 3</span>\n</code></pre></div>",
        "id": 307794625,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667495077
    },
    {
        "content": "<p>In lean 4 we get two goals a nonzero and b * c nonzero, in lean 3 we get 3 goals</p>",
        "id": 307794784,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667495120
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathport/blob/170c9451a829ac0225ac31d3dcb31fba82097e5e/Mathport/Syntax/Translate/Tactic/Lean3.lean#L201-L208\">https://github.com/leanprover-community/mathport/blob/170c9451a829ac0225ac31d3dcb31fba82097e5e/Mathport/Syntax/Translate/Tactic/Lean3.lean#L201-L208</a></p>",
        "id": 307795187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667495243
    },
    {
        "content": "<ul>\n<li><code>iterate { tac }</code> -&gt; <code>repeat tac</code> or <code>iterate tac</code></li>\n<li><code>iterate n { tac }</code> -&gt; <code>iterate n tac</code></li>\n<li><code>repeat { tac }</code> -&gt; <code>repeat' tac</code></li>\n</ul>",
        "id": 307795433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667495313
    },
    {
        "content": "<p>We hit this issue with some teaching code for the Hitchhiker's Guide (which was specifically about <code>repeat</code>, so a synthetic example).</p>",
        "id": 307796280,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1667495555
    }
]