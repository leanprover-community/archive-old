[
    {
        "content": "<p>Does contraposition not exist yet?</p>",
        "id": 284222241,
        "sender_full_name": "Aron",
        "timestamp": 1653733071
    },
    {
        "content": "<p>Actually, does contradiction exist yet??</p>",
        "id": 284224764,
        "sender_full_name": "Aron",
        "timestamp": 1653736834
    },
    {
        "content": "<p>It's built in the theory (the calculus of constructions). The definition of <code>¬P</code> is <code>P → False</code>, where <code>False</code> is an absurd fact. Hence, <code>¬P</code> is itself the statement of the contradiction theorem for <code>P</code>. If you have, let's say, <code>h₁: ¬P</code> and <code>h₂: P</code> then <code>h₁ h₂</code> is of type <code>False</code> and can prove anything (many tactics do this automatically, but you can also use <code>nomatch</code> for that).</p>\n<p>Contraposition works in a similar fashion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">contraposition</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">not_Q</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not_Q</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Once you unfold the definitions, you are left with <code>P → Q</code>, <code>Q → False</code> and <code>P </code> to prove <code>False</code>, which is straightforward.</p>",
        "id": 284225183,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653737446
    },
    {
        "content": "<p>Yes, but if I'm trying to prove by contraposition, how would I do that? There should be some command to add a hypothesis that is the negation of the current goal and to replace the current goal with False.</p>",
        "id": 284228288,
        "sender_full_name": "Aron",
        "timestamp": 1653742239
    },
    {
        "content": "<p>Sorry, I mean contradiction.</p>",
        "id": 284228292,
        "sender_full_name": "Aron",
        "timestamp": 1653742253
    },
    {
        "content": "<p>That would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.byContradiction#doc\">docs4#Classical.byContradiction</a>.</p>",
        "id": 284228463,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653742462
    },
    {
        "content": "<p>leanpkg doesn't seem to exist on my system?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">toolchain</span> <span class=\"bp\">'</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">binary</span> <span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">atobi16</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---stable/bin/leanpkg`</span>\n</code></pre></div>",
        "id": 284228862,
        "sender_full_name": "Aron",
        "timestamp": 1653743003
    },
    {
        "content": "<p>I'm not sure about the distribution, but since this is in <code>Init</code> you should have it automatically in any Lean4 script:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"c1\">-- Classical.byContradiction : (¬?m.28684 → False) → ?m.28684</span>\n</code></pre></div>",
        "id": 284228943,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653743150
    },
    {
        "content": "<p>It's indeed there, but it still doesn't want to work in my proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"kd\">def</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"∃!\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">≠</span> <span class=\"n\">Q</span><span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"bp\">≠</span> <span class=\"n\">R</span><span class=\"bp\">∧</span> <span class=\"n\">P</span><span class=\"bp\">≠</span> <span class=\"n\">R</span><span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n<span class=\"n\">cases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">P</span> <span class=\"n\">hPlm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exunique</span><span class=\"o\">]</span>\n<span class=\"n\">exists</span> <span class=\"n\">P</span>\n<span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n<span class=\"n\">exact</span> <span class=\"n\">hPlm</span>\n<span class=\"n\">cases</span> <span class=\"n\">hPlm</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hPl</span> <span class=\"n\">hPm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">intro</span> <span class=\"n\">Q</span>\n<span class=\"n\">intro</span> <span class=\"n\">hQlm</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hQlm</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hQl</span> <span class=\"n\">hQm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">Classical.byContradiction</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trying.lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">last</span> <span class=\"n\">line</span>\n<span class=\"n\">unknown</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 284229080,
        "sender_full_name": "Aron",
        "timestamp": 1653743324
    },
    {
        "content": "<blockquote>\n<p>leanpkg doesn't seem to exist on my system?</p>\n</blockquote>\n<p>Lean 4 uses <code>lake</code> rather than <code>leanpkg</code>. See e.g. <a href=\"https://leanprover.github.io/lean4/doc/quickstart.html#create-a-lean-project\">https://leanprover.github.io/lean4/doc/quickstart.html#create-a-lean-project</a>.</p>",
        "id": 284229242,
        "sender_full_name": "Julian Berman",
        "timestamp": 1653743634
    },
    {
        "content": "<p>It's a theorem, you need to <code>apply</code> it. The full tactic would be <code>apply Classical.byContradiction</code>.</p>",
        "id": 284229734,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1653744451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343532\">Aron</span> <a href=\"#narrow/stream/270676-lean4/topic/contrapose/near/284229080\">said</a>:</p>\n<blockquote>\n<p>It's indeed there, but it still doesn't want to work in my proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Classical.byContradiction</span>\n<span class=\"kd\">def</span> <span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"∃!\"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">exunique</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">incidence</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">three</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">≠</span> <span class=\"n\">Q</span><span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"bp\">≠</span> <span class=\"n\">R</span><span class=\"bp\">∧</span> <span class=\"n\">P</span><span class=\"bp\">≠</span> <span class=\"n\">R</span><span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">Q</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span><span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">incidence</span> <span class=\"n\">point</span> <span class=\"n\">line</span> <span class=\"n\">inc</span><span class=\"o\">]:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">inc</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">hlnm</span> <span class=\"n\">hex</span>\n<span class=\"n\">cases</span> <span class=\"n\">hex</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">P</span> <span class=\"n\">hPlm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exunique</span><span class=\"o\">]</span>\n<span class=\"n\">exists</span> <span class=\"n\">P</span>\n<span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n<span class=\"n\">exact</span> <span class=\"n\">hPlm</span>\n<span class=\"n\">cases</span> <span class=\"n\">hPlm</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hPl</span> <span class=\"n\">hPm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">intro</span> <span class=\"n\">Q</span>\n<span class=\"n\">intro</span> <span class=\"n\">hQlm</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hQlm</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">hQl</span> <span class=\"n\">hQm</span> <span class=\"bp\">=&gt;</span>\n<span class=\"n\">Classical.byContradiction</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trying.lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">last</span> <span class=\"n\">line</span>\n<span class=\"n\">unknown</span> <span class=\"n\">tactic</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>are you familiar with proof writing in Lean 3 or 4 already, if not I'd recommend to read theorem proving in Lean 4 before starting with this.</p>",
        "id": 284231125,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653746440
    },
    {
        "content": "<p>I've read up. Still managing to stumble over myself.</p>",
        "id": 284234571,
        "sender_full_name": "Aron",
        "timestamp": 1653752134
    }
]