[
    {
        "content": "<p><code>simp? [*]</code> seems to not include <code>*</code> in the lemma list even when it uses local hypotheses to close the goal. should that be considered a bug? I'm copy-pasting and then manually adding the * back, which seems undesirable</p>",
        "id": 322724789,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674307671
    },
    {
        "content": "<p>How does <code>squeeze_simp</code> do? I've never quite understood why we have two variants of the same tactic but in my lean 3 experience <code>squeeze_simp</code> was the more reliable of the two.</p>",
        "id": 322725537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674307963
    },
    {
        "content": "<p>is squeeze_simp ported..? maybe Data.List.Perm doesn't have it imported</p>",
        "id": 322725739,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674308049
    },
    {
        "content": "<p><code>simp?</code> is implemented in c++ and <code>squeeze_simp</code> in lean itself, I think is what it basically boils down to, kevin</p>",
        "id": 322725761,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674308064
    },
    {
        "content": "<p>I would assume this is a bug, yes</p>",
        "id": 322725784,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674308075
    },
    {
        "content": "<p>It looks to me like Lean4 simp is implemented in Lean, and that squeeze_simp is not in mathlib4</p>",
        "id": 322726741,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674308461
    },
    {
        "content": "<p>Okay, I'll make a GH issue for this</p>",
        "id": 322726817,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674308499
    },
    {
        "content": "<p>Actually, this seems like an Std bug since the <code>simp?</code> behavior is implemented in Std. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>\n<p>It's low priority but if there's a quick fix it would be helpful for de-mathlib-ing files.</p>",
        "id": 322727395,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674308725
    },
    {
        "content": "<p><code>simp?</code> is actually implemented in core. The core version is written a little differently - you use the <code>set_option tactic.simp.trace true</code> option - and <code>simp?</code> is just a frontend for that</p>",
        "id": 322768924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674327882
    },
    {
        "content": "<p>I implemented this functionality though, and IIRC what it does is to replace <code>*</code> by the names of any hypotheses that are used, unless they are inaccessible or contextual in which case it uses <code>*</code>. Can you give a MWE?</p>",
        "id": 322769020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674327940
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">â†’</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n<span class=\"c1\">-- Try this: simp only</span>\n</code></pre></div>",
        "id": 322769275,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674328085
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2053\">lean4#2053</a></p>",
        "id": 322778165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334316
    },
    {
        "content": "<p>thank you!!</p>",
        "id": 322782645,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674338173
    }
]