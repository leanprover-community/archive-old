[
    {
        "content": "<p>I have this function, but it is not structural recursion.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n    <span class=\"n\">l</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">List.rangeStepAux</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">append</span> <span class=\"bp\">$</span> <span class=\"n\">l.drop</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>What different/better ways are there to do this where I won't have to prove termination, and, I would prefer no code, and rather verbal suggestions so I can try to work this out myself. Thanks in advance!</p>",
        "id": 272813928,
        "sender_full_name": "Joseph O",
        "timestamp": 1645541857
    },
    {
        "content": "<p>use <code>partial</code></p>",
        "id": 272815290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542429
    },
    {
        "content": "<p>I don't really know what your function is supposed to do, but it infinite loops when I test it</p>",
        "id": 272815514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542524
    },
    {
        "content": "<p>so proving termination is probably going to be difficult</p>",
        "id": 272815575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272815514\">said</a>:</p>\n<blockquote>\n<p>I don't really know what your function is supposed to do, but it infinite loops when I test it</p>\n</blockquote>\n<p>Make a range from 0-n, and skip every <code>m</code>th term</p>",
        "id": 272821546,
        "sender_full_name": "Joseph O",
        "timestamp": 1645544900
    },
    {
        "content": "<p>so like <code>1,2,4,5,7,8</code>?</p>",
        "id": 272821896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545021
    },
    {
        "content": "<p>Your algorithm also looks cubic</p>",
        "id": 272821956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272821896\">said</a>:</p>\n<blockquote>\n<p>so like <code>1,2,4,5,7,8</code>?</p>\n</blockquote>\n<p>yes. that would be skipping every third term</p>",
        "id": 272822256,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545140
    },
    {
        "content": "<p>What do you do if <code>m</code> is negative, if the start point is greater than the end point, or if the end point is not a multiple of the step? Lots of things cause that code to miss its exit point</p>",
        "id": 272822272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272821956\">said</a>:</p>\n<blockquote>\n<p>Your algorithm also looks cubic</p>\n</blockquote>\n<p>im thinking of scratching my algorithm</p>",
        "id": 272822290,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272822272\">said</a>:</p>\n<blockquote>\n<p>What do you do if <code>m</code> is negative, if the start point is greater than the end point, or if the end point is not a multiple of the step? Lots of things cause that code to miss its exit point</p>\n</blockquote>\n<p>m will never be negative</p>",
        "id": 272822325,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545166
    },
    {
        "content": "<p>your function signature doesn't say so</p>",
        "id": 272822362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545179
    },
    {
        "content": "<p><code>(m n : Nat)</code></p>",
        "id": 272822417,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545199
    },
    {
        "content": "<p>er I meant the other thing</p>",
        "id": 272822461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545218
    },
    {
        "content": "<p>the start point can be greater than the end point in the aux function</p>",
        "id": 272822498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545234
    },
    {
        "content": "<p>also a step size of 0 is bad</p>",
        "id": 272822588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545257
    },
    {
        "content": "<p>Yes, but I use this in a function <code>rangeStep</code> where I use it correctly</p>",
        "id": 272822636,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545282
    },
    {
        "content": "<p>okay, then <code>rangeStepAux</code> needs hypotheses asserting that it's being called correctly</p>",
        "id": 272822691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545307
    },
    {
        "content": "<p>But I would like to use a different algorithm? Do you have ideas for a different one?</p>",
        "id": 272822714,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545313
    },
    {
        "content": "<p>sure, this sounds like <code>(range n).filter (\\lam i, i % m != 0)</code></p>",
        "id": 272822800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272822691\">said</a>:</p>\n<blockquote>\n<p>okay, then <code>rangeStepAux</code> needs hypotheses asserting that it's being called correctly</p>\n</blockquote>\n<p>ok. I cant do that, but I dont really have to worry about what you said, because i'm pretty sure that cant appen</p>",
        "id": 272822834,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545359
    },
    {
        "content": "<p>You misunderstand. You say that <code>rangeStep</code> checks that certain boundary cases don't happen, while <code>rangeStepAux</code> relies on those boundary cases not being inputs. That means that <code>rangeStepAux</code> needs to assert that the bad cases are not legal in its type signature or else you won't be able to prove termination</p>",
        "id": 272823077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545452
    },
    {
        "content": "<p>because <code>rangeStepAux</code> is just a regular function, people can call it themselves if they want</p>",
        "id": 272823202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545491
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272823493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545601
    },
    {
        "content": "<p>but I made it protected so people cant use it</p>",
        "id": 272823870,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545718
    },
    {
        "content": "<p>nope, that's not what protected means</p>",
        "id": 272823926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545729
    },
    {
        "content": "<p>or do I have to use <code>private</code>, if that is a keyword</p>",
        "id": 272823930,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545732
    },
    {
        "content": "<p>protected means you have to write <code>List.rangeStepAux</code> even if you <code>open List</code></p>",
        "id": 272823970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545748
    },
    {
        "content": "<p>Ah. If I use private, will that allow people not to use it?</p>",
        "id": 272824042,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545772
    },
    {
        "content": "<p><code>private</code> makes the function not <em>easily</em> accessible outside the current section</p>",
        "id": 272824057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545776
    },
    {
        "content": "<p>oh</p>",
        "id": 272824096,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545796
    },
    {
        "content": "<p>but it's not air tight and more to the point it is not something you can use to do proofs</p>",
        "id": 272824109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545798
    },
    {
        "content": "<p>if you want to know that a fact is true, you take it as an argument</p>",
        "id": 272824150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545817
    },
    {
        "content": "<p>right</p>",
        "id": 272824190,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545833
    },
    {
        "content": "<p>this makes the function inconvenient to call, but that's fine since this is an aux function</p>",
        "id": 272824273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272823493\">said</a>:</p>\n<blockquote>\n<p>For example</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I dont take start as an argument</p>",
        "id": 272824274,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545849
    },
    {
        "content": "<p>At least with my current algorithm</p>",
        "id": 272824294,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545862
    },
    {
        "content": "<p>in your code <code>start</code> was <code>n</code> and <code>stop</code> was <code>m</code> and <code>step</code> was... 2?</p>",
        "id": 272824319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545875
    },
    {
        "content": "<p>So <code>start</code> is the current value, it increases until it exceeds <code>stop</code></p>",
        "id": 272824402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272824319\">said</a>:</p>\n<blockquote>\n<p>in your code <code>start</code> was <code>n</code> and <code>stop</code> was <code>m</code> and <code>step</code> was... 2?</p>\n</blockquote>\n<p>sorry if it was very unclear. <code>m</code> was stop, and <code>n</code> was step</p>",
        "id": 272824741,
        "sender_full_name": "Joseph O",
        "timestamp": 1645546033
    },
    {
        "content": "<p>I should have made that more clear</p>",
        "id": 272824766,
        "sender_full_name": "Joseph O",
        "timestamp": 1645546044
    },
    {
        "content": "<p>If that's the case, then your step increased by 2 on every iteration</p>",
        "id": 272825303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645546242
    },
    {
        "content": "<p>maybe you and I mean different things by \"step\"</p>",
        "id": 272825385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645546270
    },
    {
        "content": "<p>ah, that is not what i meant. I meant to increase by step</p>",
        "id": 272827467,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547009
    },
    {
        "content": "<p>Let me see what fixing my mistake does.</p>",
        "id": 272827488,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547017
    },
    {
        "content": "<p>I still seem to need to prove termination</p>",
        "id": 272827864,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547152
    },
    {
        "content": "<p>well yes, but now it's actually provable (hopefully)</p>",
        "id": 272828027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547202
    },
    {
        "content": "<p>if you don't want to prove termination you can use <code>partial</code>, but if it is actually nonterminating for some inputs then users will not like it</p>",
        "id": 272828110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547238
    },
    {
        "content": "<p>but if your definition is not structurally recursive then in all likelihood you will need to prove termination manually assuming no <code>partial</code></p>",
        "id": 272828315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547307
    },
    {
        "content": "<p>note that mathlib will almost certainly want such a function to <em>not</em> be <code>partial</code> because you can't prove facts about <code>partial</code> functions</p>",
        "id": 272828458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547363
    },
    {
        "content": "<p>Yes. The only problem now is, how can we prove termination? On what case. I think I have an idea.</p>",
        "id": 272828783,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">step</span> <span class=\"bp\">=</span> <span class=\"n\">stop</span> <span class=\"k\">then</span>\n    <span class=\"n\">l</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">List.rangeStepAux</span> <span class=\"n\">stop</span> <span class=\"o\">(</span><span class=\"n\">step</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">step</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">append</span> <span class=\"bp\">$</span> <span class=\"n\">l.drop</span> <span class=\"o\">(</span><span class=\"n\">step</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">step</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>i think I am close?</p>",
        "id": 272828987,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547566
    },
    {
        "content": "<p>This code has exactly the same nontermination issues as the original</p>",
        "id": 272829132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547631
    },
    {
        "content": "<p>I would rename <code>step</code> to <code>start</code> btw</p>",
        "id": 272829237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547656
    },
    {
        "content": "<p>the step is 2 there</p>",
        "id": 272829262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547669
    },
    {
        "content": "<p>your termination measure should be <code>stop - start</code> most likely</p>",
        "id": 272829366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547718
    },
    {
        "content": "<p>Wait, I still didn't fix the previous bug</p>",
        "id": 272829428,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547744
    },
    {
        "content": "<p>Actually nevermind</p>",
        "id": 272829462,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272829237\">said</a>:</p>\n<blockquote>\n<p>I would rename <code>step</code> to <code>start</code> btw</p>\n</blockquote>\n<p>Why?</p>",
        "id": 272829529,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547772
    },
    {
        "content": "<p>because it's not a step</p>",
        "id": 272829608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547809
    },
    {
        "content": "<p>it's the first value produced by the code</p>",
        "id": 272829658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547831
    },
    {
        "content": "<p>Ok</p>",
        "id": 272831004,
        "sender_full_name": "Joseph O",
        "timestamp": 1645548383
    },
    {
        "content": "<p>Right</p>",
        "id": 272831009,
        "sender_full_name": "Joseph O",
        "timestamp": 1645548386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272829366\">said</a>:</p>\n<blockquote>\n<p>your termination measure should be <code>stop - start</code> most likely</p>\n</blockquote>\n<p>hmm</p>",
        "id": 272831709,
        "sender_full_name": "Joseph O",
        "timestamp": 1645548652
    },
    {
        "content": "<p>And what could I compare that with? <code>stop - start  =  0</code>?</p>",
        "id": 272839325,
        "sender_full_name": "Joseph O",
        "timestamp": 1645551599
    },
    {
        "content": "<p>nothing, <code>termination_by</code> is expecting an expression of type Nat (or other well ordered type)</p>",
        "id": 272846162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645554443
    },
    {
        "content": "<p>Ah. So just that. I will try it</p>",
        "id": 272848769,
        "sender_full_name": "Joseph O",
        "timestamp": 1645555570
    },
    {
        "content": "<p>I get this <a href=\"/user_uploads/3121/7u62afFR4VIUs0VYlG4s6nSO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7u62afFR4VIUs0VYlG4s6nSO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7u62afFR4VIUs0VYlG4s6nSO/image.png\"></a></div>",
        "id": 272856353,
        "sender_full_name": "Joseph O",
        "timestamp": 1645558985
    },
    {
        "content": "<p>The argument order in your recursive call seems wrong</p>",
        "id": 272857697,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1645559634
    },
    {
        "content": "<p>You may be right</p>",
        "id": 272859596,
        "sender_full_name": "Joseph O",
        "timestamp": 1645560456
    },
    {
        "content": "<p>So now it results into something that will be false most of the time <a href=\"/user_uploads/3121/4rfHhyY4MOH8h-qq8gMcQ6DM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4rfHhyY4MOH8h-qq8gMcQ6DM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4rfHhyY4MOH8h-qq8gMcQ6DM/image.png\"></a></div>",
        "id": 272859931,
        "sender_full_name": "Joseph O",
        "timestamp": 1645560615
    },
    {
        "content": "<p>Why? This is now true unless start == 0. By the way, originally you had <code>+2</code> and now you have <code>*2</code>, is that intentional?</p>",
        "id": 272860144,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1645560725
    },
    {
        "content": "<p>I guess I am having trouble understanding what the function is supposed to do, so it's entirely possible that my suggestion makes no sense</p>",
        "id": 272860656,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1645560996
    },
    {
        "content": "<p>I would recommend making the function partial and running it to check if the outputs match what you expect, before proving termination</p>",
        "id": 272860913,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1645561114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272860144\">said</a>:</p>\n<blockquote>\n<p>Why? This is now true unless <code>start = 0</code>. By the way, originally (before renaming from <code>m n</code> to <code>start stop</code>) you had <code>+2</code> and now you have <code>*2</code>, is that intentional?</p>\n</blockquote>\n<p>The <code>+2</code> was a mistake</p>",
        "id": 272861790,
        "sender_full_name": "Joseph O",
        "timestamp": 1645561577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272860656\">said</a>:</p>\n<blockquote>\n<p>I guess I am having trouble understanding what the function is supposed to do, so it's entirely possible that my suggestion makes no sense</p>\n</blockquote>\n<p><a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272821546\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272821546</a></p>",
        "id": 272861902,
        "sender_full_name": "Joseph O",
        "timestamp": 1645561650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272822800\">said</a>:</p>\n<blockquote>\n<p>sure, this sounds like <code>(range n).filter (\\lam i, i % m != 0)</code></p>\n</blockquote>\n<p>I missed this entirely</p>",
        "id": 272861926,
        "sender_full_name": "Joseph O",
        "timestamp": 1645561668
    },
    {
        "content": "<p>This is a filter, I just didn’t know how to keep track of something. thanks again,</p>",
        "id": 272862018,
        "sender_full_name": "Joseph O",
        "timestamp": 1645561704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272861790\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272860144\">said</a>:</p>\n<blockquote>\n<p>Why? This is now true unless <code>start = 0</code>. By the way, originally (before renaming from <code>m n</code> to <code>start stop</code>) you had <code>+2</code> and now you have <code>*2</code>, is that intentional?</p>\n</blockquote>\n<p>The <code>+2</code> was a mistake</p>\n</blockquote>\n<p>The <code>*2</code> looks like even more of a mistake. <code>start</code> will go over powers of 2, which doesn't seem to have anything to do with your goal</p>",
        "id": 272864211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645562873
    },
    {
        "content": "<p>Now I solved this without recursion or an auxiliary function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.rangeStep</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">List.drop</span> <span class=\"n\">start</span> <span class=\"bp\">$</span> <span class=\"n\">List.range</span> <span class=\"n\">stop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"n\">step</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272864218,
        "sender_full_name": "Joseph O",
        "timestamp": 1645562879
    },
    {
        "content": "<p>Thanks so much for your algorithm idea</p>",
        "id": 272864325,
        "sender_full_name": "Joseph O",
        "timestamp": 1645562914
    },
    {
        "content": "<p>I think there is a variant on <code>range</code> that lets you control the starting point</p>",
        "id": 272864341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645562920
    },
    {
        "content": "<p>Is there?</p>",
        "id": 272864357,
        "sender_full_name": "Joseph O",
        "timestamp": 1645562931
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `range' s n` is the list of numbers `[s, s+1, ..., s+n-1]`.</span>\n<span class=\"sd\">  It is intended mainly for proving properties of `range` and `iota`. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">range'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">range'</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 272864430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645562971
    },
    {
        "content": "<p>so it is <code>start</code> and <code>len</code></p>",
        "id": 272864530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645563004
    },
    {
        "content": "<p>where <code>len</code> is <code>stop - start</code></p>",
        "id": 272864547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645563012
    },
    {
        "content": "<p>Ah thank you</p>",
        "id": 272864550,
        "sender_full_name": "Joseph O",
        "timestamp": 1645563014
    },
    {
        "content": "<p>I didn't know</p>",
        "id": 272864568,
        "sender_full_name": "Joseph O",
        "timestamp": 1645563022
    },
    {
        "content": "<p>that's in mathlib(4)</p>",
        "id": 272864585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645563031
    },
    {
        "content": "<p>Ah, im afraid I cant use it then</p>",
        "id": 272864865,
        "sender_full_name": "Joseph O",
        "timestamp": 1645563202
    },
    {
        "content": "<p>Well, in another sense, it's on Zulip, in Mario's message.</p>",
        "id": 272865304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645563426
    },
    {
        "content": "<p>Well yes, but I would have to either inline it into my functions or make it private which in lean 4 i dont think is possible</p>",
        "id": 272866977,
        "sender_full_name": "Joseph O",
        "timestamp": 1645564030
    },
    {
        "content": "<p>or just copy it into your project</p>",
        "id": 272867231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645564161
    },
    {
        "content": "<p>you can't inline it anyway, it's a recursive function</p>",
        "id": 272867268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645564182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272867268\">said</a>:</p>\n<blockquote>\n<p>you can't inline it anyway, it's a recursive function</p>\n</blockquote>\n<p>I meant localize it with <code>let rec</code></p>",
        "id": 272867359,
        "sender_full_name": "Joseph O",
        "timestamp": 1645564219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272867231\">said</a>:</p>\n<blockquote>\n<p>or just copy it into your project</p>\n</blockquote>\n<p>under the given circumstances, I cant do that either</p>",
        "id": 272867373,
        "sender_full_name": "Joseph O",
        "timestamp": 1645564232
    },
    {
        "content": "<p>I don't really understand your decision procedures</p>",
        "id": 272867376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645564235
    },
    {
        "content": "<p>what are the circumstances?</p>",
        "id": 272867392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645564248
    },
    {
        "content": "<p>I’m contributing somewhere</p>",
        "id": 272868678,
        "sender_full_name": "Joseph O",
        "timestamp": 1645565015
    },
    {
        "content": "<p>Besides you can make it private Lean 4 does have a private keyword.</p>",
        "id": 272868854,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645565110
    },
    {
        "content": "<p>Mario told me it is not exactly private</p>",
        "id": 272869265,
        "sender_full_name": "Joseph O",
        "timestamp": 1645565357
    },
    {
        "content": "<p>and can be accessed</p>",
        "id": 272869283,
        "sender_full_name": "Joseph O",
        "timestamp": 1645565369
    },
    {
        "content": "<p>And why is it an issue if some helper range function can be accessed?</p>",
        "id": 272871207,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645566541
    },
    {
        "content": "<p>I don’t know if the maintainers would like that, since they should be declared under the List namespace</p>",
        "id": 272882120,
        "sender_full_name": "Joseph O",
        "timestamp": 1645573005
    },
    {
        "content": "<p>I could add them there, but  as said, I don’t think the Lean4 maintainers want new list methods in their std</p>",
        "id": 272882169,
        "sender_full_name": "Joseph O",
        "timestamp": 1645573044
    },
    {
        "content": "<p>My understanding from the <a href=\"https://leanprover.github.io/lean4/doc/faq.html\">Lean 4 FAQ</a> is that right now unrequested pull requests are not welcome.</p>",
        "id": 272882323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645573126
    },
    {
        "content": "<p>OTOH the more experimental <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>  repo is much more open to PRs.</p>",
        "id": 272882379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645573170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272882323\">said</a>:</p>\n<blockquote>\n<p>My understanding from the <a href=\"https://leanprover.github.io/lean4/doc/faq.html\">Lean 4 FAQ</a> is that right now unrequested pull requests are not welcome.</p>\n</blockquote>\n<p>Oh.</p>",
        "id": 272884518,
        "sender_full_name": "Joseph O",
        "timestamp": 1645574522
    },
    {
        "content": "<p>I guess I will make an issue to see if they would want it.</p>",
        "id": 272886815,
        "sender_full_name": "Joseph O",
        "timestamp": 1645576277
    },
    {
        "content": "<p>My advice would be to leave them alone for now.</p>",
        "id": 272887249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645576601
    },
    {
        "content": "<p>They haven't even made an official release yet and have other things to worry about.</p>",
        "id": 272887291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645576639
    },
    {
        "content": "<p>Ok. Yet I wasn't bothering them in the first place. Either way,  I will keep this change until they accept pull requests</p>",
        "id": 272888974,
        "sender_full_name": "Joseph O",
        "timestamp": 1645577810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 272889411,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645578122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 272890429,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645578951
    },
    {
        "content": "<p>They did say I could share my idea on Zulip</p>\n<p>here it is: <br>\nadd a <code>toList</code> method for the <code>Range</code> structure found in <code>Init.Data.Range</code> so that you can use the list methods to apply transformations on it. </p>\n<p>As well as a <code>toString</code> and <code>Repr</code> instance, but that isnt important</p>",
        "id": 272890557,
        "sender_full_name": "Joseph O",
        "timestamp": 1645579055
    }
]