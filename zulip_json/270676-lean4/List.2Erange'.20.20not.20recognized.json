[
    {
        "content": "<p>I get an error from the compiler \" unknown constant List.range' \". According to the documentation this is a function with two arguments, which I have supplied. What is happening?</p>",
        "id": 321011219,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673549755
    },
    {
        "content": "<p>Could you put together a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? Makes it much easier for us to help :)</p>",
        "id": 321011617,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673549882
    },
    {
        "content": "<p>(But if I'm guessing randomly -- it's defined in Std, do you have <code>import Std</code> at the top of your file?)</p>",
        "id": 321012060,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673550005
    },
    {
        "content": "<p>I have Std imported. This is the MWE</p>\n<p>import Std</p>\n<p>def main : IO Unit := do<br>\n  let stdout &lt;- IO.getStdout<br>\n  let range := (List.range' 1 5) <br>\n  stdout.putStrLn (List.toString range)</p>",
        "id": 321013144,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673550317
    },
    {
        "content": "<p>Hum, that compiles fine for me</p>\n<ul>\n<li>are you working in a Lake project?</li>\n<li>are you using vscode?</li>\n<li>do you get output in the infoview if you write <code>#eval Lean.versionString</code>?</li>\n</ul>",
        "id": 321014223,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673550726
    },
    {
        "content": "<p>I am working in a Lake project. I am not using vscode. I don't know what is infoview, nor #eval. But the version is 4.0.0 alright (downloaded today)..</p>",
        "id": 321017200,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673551700
    },
    {
        "content": "<p>Just as a general remark without emacs, vim or vscode you're going to have a rather unhappy time with Lean really.</p>",
        "id": 321022131,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1673553251
    },
    {
        "content": "<p>Actually, I use the Crimson editor, which at the touch of a button invokes Lake for me and shows me the output of the compilation and build process. What does vscode add?</p>",
        "id": 321025352,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673554297
    },
    {
        "content": "<p>Mainly you'll need something to show the InfoView-- which is the interactive display that a lot of Lean development is centered around. Emacs, VSCode and Vim have plugins that interact with the Lean language server to get the infoview information and display it.</p>",
        "id": 321026069,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673554520
    },
    {
        "content": "<p>Fine, I will see if I get vscode installed. But that does not explain the refusal of <code>List.range'</code> by the compiler. Am I missing some imports?</p>",
        "id": 321026333,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673554611
    },
    {
        "content": "<p>I'm still unsure about that. The file compiles fine for me in a default Lake project. Were you following setup instructions somewhere for the Lake project?</p>",
        "id": 321026750,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673554795
    },
    {
        "content": "<p>My <code>lakefile.lean</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n<span class=\"n\">package</span> <span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n<span class=\"o\">}</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Main</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add library configuration options here</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and this file and <code>Main.lean</code> are in a folder <code>test</code> </p>\n<p>I execute <code>lake build test</code> in the right folder.</p>",
        "id": 321027602,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673555131
    },
    {
        "content": "<p>Here's a quick start: <a href=\"https://github.com/leanprover/lean4/blob/master/doc/quickstart.md\">https://github.com/leanprover/lean4/blob/master/doc/quickstart.md</a></p>",
        "id": 321033858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673557401
    },
    {
        "content": "<p>But it's probably that you don't have Std as a dependency. You can add this to the end of your lakefile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>",
        "id": 321034195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673557519
    },
    {
        "content": "<p>I also suspect your Lean version is a bit out of date, since the Lakefile attribute is now called <code>default_target</code>. at the moment if you're working in Lean 4 you'll probably need to always make sure you're on the latest nightly.</p>\n<p>The std4 @ main dependency will not compile on current nightly (there were a few breaking changes over the last couple months), &amp; updating your Lean version to latest nightly is easier than finding what std commit compiles on your version.</p>",
        "id": 321035492,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673558039
    },
    {
        "content": "<p>sorry it's so fragile right now... the devs are trying to get everything ready for a stable release at breakneck speed <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 321035694,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673558118
    },
    {
        "content": "<p>I have now followed the instructions and installed Lean via vscode. This is output in the Infoview for <code>#eval Lean.versionString</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"4.0.0-nightly-2023-01-13\"</span>\n</code></pre></div>\n<p>but for <code>#eval List.range' 1 5</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">List.range''</span>\n</code></pre></div>\n<p>Curious, isn't it. Should I import something?</p>",
        "id": 321148922,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673613089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579379\">@Rudolf Meijer</span> where's the definition of <code>List.range'</code> that you want to use? I mean, where have you seen it?</p>",
        "id": 321150019,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673613436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/List/Basic.html#List.range'\"><code>List.range'</code></a> in <code>Std.Data.List.Basic</code></p>",
        "id": 321150475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673613576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/List.2Erange'.20.20not.20recognized/near/321034195\">said</a>:</p>\n<blockquote>\n<p>But it's probably that you don't have Std as a dependency. You can add this to the end of your lakefile:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's needed in the <code>lakefile.lean</code> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> </p>\n<p>And then, on the file you want to call <code>List.range'</code>, you need to <code>import Std.Data.List.Basic</code> at the top</p>",
        "id": 321151697,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673613939
    },
    {
        "content": "<p>I am not yet in a project, just typing in an untitled document. Is that the problem, that there is no <code>lakefile.lean</code>? In other words, does one always have to have a project?</p>",
        "id": 321152122,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673614058
    },
    {
        "content": "<p>Why is <code>std</code> not automatically required?</p>",
        "id": 321152303,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673614109
    },
    {
        "content": "<p>If you want to use Lake to import dependencies, then yes, you need to be in a Lake project</p>",
        "id": 321152315,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673614113
    },
    {
        "content": "<p>at least for now, <code>std</code> is just another package which has to be depended on and imported like everything else</p>",
        "id": 321152451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673614156
    },
    {
        "content": "<p>But frankly, <code>std</code> is needed by everyone, I suppose.</p>",
        "id": 321152501,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673614169
    },
    {
        "content": "<p>it does not have any special status of being bundled with lean</p>",
        "id": 321152524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673614177
    },
    {
        "content": "<p>this is primarily for developmental reasons</p>",
        "id": 321152545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673614186
    },
    {
        "content": "<p>it may change in the future but not any time soon</p>",
        "id": 321152637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673614206
    },
    {
        "content": "<p>I see. I am learning... Sorry for assuming too much.</p>",
        "id": 321152674,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673614216
    },
    {
        "content": "<p><code>std</code> is also quite young compared to the core library (which is mainly focused on the tools required for the compiler itself)</p>",
        "id": 321152910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673614280
    },
    {
        "content": "<p>well, everything is young, it's a new language under active development</p>",
        "id": 321153230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673614362
    },
    {
        "content": "<p>Also, do I need <code>git</code> ?  lake protests when I type <code>lake init ...</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">execute</span> <span class=\"bp\">`</span><span class=\"n\">git</span><span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">initialize</span> <span class=\"n\">git</span> <span class=\"n\">repository</span>\n</code></pre></div>",
        "id": 321154575,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673614710
    },
    {
        "content": "<p>A bit more on the topic: you may notice that some data structures have their <code>Lean</code> version as well as their <code>Std</code> version. Examples: <code>HashMap</code> and <code>RBMap</code>. Those have their <code>Lean</code> counterparts because, as Mario said they're needed for the compiler. So, if you need those structures but you really don't want to depend on <code>Std</code>, you can just <code>import Lean.Data.RBMap</code> or <code>import Lean.Data.HashMap</code></p>",
        "id": 321154679,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673614739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579379\">Rudolf Meijer</span> <a href=\"#narrow/stream/270676-lean4/topic/List.2Erange'.20.20not.20recognized/near/321154575\">said</a>:</p>\n<blockquote>\n<p>Also, do I need <code>git</code> ?  lake protests when I type <code>lake init ...</code> </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">execute</span> <span class=\"bp\">`</span><span class=\"n\">git</span><span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">initialize</span> <span class=\"n\">git</span> <span class=\"n\">repository</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yeah... <code>lake init ...</code> eventually calls <code>git init -q</code> <a href=\"https://github.com/leanprover/lake/blob/7795eda4076d10532e7a8d592ef5117f1868421e/Lake/Util/Git.lean#L65-L66\">here</a>. But but it's not an obvious decision to me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 321156344,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673615185
    },
    {
        "content": "<p>Maybe the <code>.gitignore</code> addition as well as the call to <code>git init -q</code> should be optional as in <code>lake init Foo --git</code>?</p>",
        "id": 321156769,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673615287
    },
    {
        "content": "<p>I guess you could even get Lake to fetch dependencies without git, but that seems like a painâ¦</p>",
        "id": 321160072,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673616243
    },
    {
        "content": "<p>However, since Lean 4 is pretty new, we still rely on other tools/languages to do things for us. For example, we need <code>elan</code>, which is implemented in Rust, to download toolchains. Lean 4 does not have its own host for packages yet so we (ab)use GitHub and rely on <code>git</code> to download packages for us. So yes, we pretty much assume you have <code>git</code> installed and set on your PATH otherwise you wouldn't even be able to ergonomically add <code>Std</code> as a dependency to your project.</p>",
        "id": 321160238,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673616281
    },
    {
        "content": "<p>Hopefully, someday Lean 4 will have a bundled reliable implementation for performing HTTP requests</p>",
        "id": 321161156,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673616527
    },
    {
        "content": "<p>Meanwhile, I have found my way around all of this, and obtained my first result. This thread can be considered finshed. But I may be back with other questions, of course. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 321200449,
        "sender_full_name": "Rudolf Meijer",
        "timestamp": 1673626702
    }
]