[
    {
        "content": "<p>Deal All,</p>\n<p>I found the change below somewhat surprising.  I can see why one of the two definitions could go either way, but the other feels like it should work.</p>\n<p>In Lean3, either one of these two definitions works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean3</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">myName</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">myName</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">myName</span>\n\n<span class=\"c1\">-- separately, they both work</span>\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>  <span class=\"c1\">-- in fact, the type ascription is unnecessary</span>\n</code></pre></div>\n<p>However, in Lean4, they both fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">myName</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">myName</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">myName</span>\n\n<span class=\"c1\">-- this fails, although it works in Lean3</span>\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span> <span class=\"c1\">-- failed to infer definition type, fair enough</span>\n\n<span class=\"c1\">--  I find the failure of this a little less justified, though :)</span>\n<span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">fn</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  Int.ofNat fn</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  fn</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Int : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Nat : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 320328785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673297601
    },
    {
        "content": "<p>I think if you mark the definitions <code>nonrec</code> it has the behavior you expect. This is the behavior I'd expect as a programmer, since I'd expect recursive function names to shadow opened namespaces in scope.</p>",
        "id": 320329738,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673297967
    },
    {
        "content": "<p>I can't speak to the Lean3 behavior though... I find it confusing :)</p>",
        "id": 320329953,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673298032
    },
    {
        "content": "<p>You are completely right!  In Lean4, these work (separately, of course):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nonrec</span> <span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span>\n\n<span class=\"n\">nonrec</span> <span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">fn</span>\n</code></pre></div>\n<p>Ok, I learned something, thanks!</p>",
        "id": 320330199,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673298105
    },
    {
        "content": "<p>Moreover, I like the possibility of controlling which behaviour to obtain: really cool!</p>",
        "id": 320330339,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673298149
    },
    {
        "content": "<p>It's quite clean. I end up using nonrec more often in local definitions, if I want to shadow a function with a new one that puts in some arguments or something :)</p>",
        "id": 320330767,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673298337
    },
    {
        "content": "<p>(Should nonrec be more prominent in docs? It's very useful but I'm not sure if the common use case is mentioned in the manual)</p>",
        "id": 320331376,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673298579
    },
    {
        "content": "<p>Honestly, I have yet to really dive into reading the manual: I am faking it, trying to get Lean3 syntax to work with Lean4...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 320331999,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673298824
    },
    {
        "content": "<p>hey, it works for the most part</p>",
        "id": 320332098,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673298852
    },
    {
        "content": "<p>Yes, not only it works, I find that when there is a change, I am usually happier with the newer version!  Yay Lean4!</p>",
        "id": 320332224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673298904
    },
    {
        "content": "<p>This case was one of the first where I thought that I was not so happy, and now I like it better!</p>",
        "id": 320332283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673298932
    },
    {
        "content": "<p><em>fully</em> agreed, Lean4 is \"new and improved\" with an emphasis on improved</p>",
        "id": 320332440,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673298990
    }
]