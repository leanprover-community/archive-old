[
    {
        "content": "<p>Consider the programs:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>partial def foo (u: Unit) : Option Unit := do\n  return ()\n\npartial def bar (u: Unit) : Option Unit := do\n  return $ ()\n</code></pre></div>\n<p>The latter (<code>bar</code>) dies with the type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">43</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">do</span><span class=\"bp\">'</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</code></pre></div>\n<p>I'm guessing the latter does not work because <code>return</code> is not a Lean function, but a piece of syntax that is macro expanded by <code>do</code> notation? And thus <code>$ ()</code> is interpreted as a function that partially applies <code>$</code> to<code>()</code>?</p>",
        "id": 256098106,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633368458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> yes that is correct. </p>\n<p>But this also probably doesn't do what you are thinking because <code>Option</code> is not a <code>Monad</code>. You need to use <code>OptionM</code> (its <code>Monad</code> variant).</p>",
        "id": 256098655,
        "sender_full_name": "Mac",
        "timestamp": 1633368629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> that's even weirder to me! Why does the first program (with <code>foo</code>) compile if <code>Option</code> is not a monad?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"c1\">-- partial def bar (u: Unit) : Option Unit := do</span>\n<span class=\"c1\">--   return $ ()</span>\n</code></pre></div>",
        "id": 256099029,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633368784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> because there is a <code>instance optionCoe : CoeTail a (Option a)</code> so <code>()</code> is automatically being coerced into <code>some ()</code>.  Also, Lean 4 supports using the <code>do</code> notation (to an extent) on pure types (this is called ;pure do notation'). Such pure do notation injects an implicit <code>Id</code> monad (e.g., in this case <code>Id (Option Unit)</code>).</p>\n<p>You can see the result by running <code>#print foo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : Unit â†’ Option Unit :=</span>\n<span class=\"cm\">fun u =&gt; pure (some ())</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 256099337,
        "sender_full_name": "Mac",
        "timestamp": 1633368900
    },
    {
        "content": "<p>Interesting, thank you!</p>",
        "id": 256099907,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633369129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 256100011,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633369175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Monad.20return.20with.20.24/near/256098106\">said</a>:</p>\n<blockquote>\n<p>And thus <code>$ ()</code> is interpreted as a function that partially applies <code>$</code> to<code>()</code>?</p>\n</blockquote>\n<p>No, it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">return</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>That is why the expected type is not known</p>",
        "id": 256119354,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633376306
    },
    {
        "content": "<p>Note also that <code>return t</code> already acts like <code>return $ t</code>, i.e. parses as if there were parentheses around <code>t</code>.</p>",
        "id": 256122818,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1633377651
    }
]