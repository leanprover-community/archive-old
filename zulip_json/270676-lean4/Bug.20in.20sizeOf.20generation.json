[
    {
        "content": "<p>The following inductive type yields a strange error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bug</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bug</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bug</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">a_ih</span><span class=\"bp\">✝</span> <span class=\"o\">()</span> <span class=\"o\">()</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Unit</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Using <code>set_option genSizeOf false</code> suppresses the error, suggesting it occurs in the code that generates the <code>sizeOf</code> definition.<br>\nI believe the bug lies in <a href=\"https://github.com/leanprover/lean4/blob/681bbe5cf40ebd45019db2a84cd04dc0c63b8539/src/Lean/Meta/SizeOf.lean#L76-L85\">this function</a> which determines if the field is to be skipped:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">ignoreField</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">type.isForall</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- TODO: add support for finite domains</span>\n    <span class=\"k\">if</span> <span class=\"n\">type.isArrow</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">type.bindingDomain</span><span class=\"bp\">!.</span><span class=\"n\">isConstOf</span> <span class=\"bp\">``</span><span class=\"n\">Unit</span> <span class=\"k\">then</span>\n      <span class=\"n\">ignoreField</span> <span class=\"n\">type.bindingBody</span><span class=\"bp\">!</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Notice that the recursive call is made directly on the body of the forall type, rather than an expression of that type. Then, the <code>inferType</code> will yield an incorrect result.<br>\nA possible fix is to replace the function with the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">ignoreField</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">helper</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">type</span>\n    <span class=\"k\">if</span> <span class=\"n\">type.isForall</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- TODO: add support for finite domains</span>\n      <span class=\"k\">if</span> <span class=\"n\">type.isArrow</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">type.bindingDomain</span><span class=\"bp\">!.</span><span class=\"n\">isConstOf</span> <span class=\"bp\">``</span><span class=\"n\">Unit</span> <span class=\"k\">then</span>\n        <span class=\"n\">helper</span> <span class=\"n\">type.bindingBody</span><span class=\"bp\">!</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"n\">true</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 313431540,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1669960607
    }
]