[
    {
        "content": "<p>I'm trying to do some simple program verification using Lean 4 and I have this little de Bruijn indexes formalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">LambdaTerm</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">allFreeVariablesBoundBy</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"mi\">0</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span>\n<span class=\"bp\">|</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:=</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">fn</span> <span class=\"n\">depth</span> <span class=\"bp\">∧</span> <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">arg</span> <span class=\"n\">depth</span>\n<span class=\"bp\">|</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"C[\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"](\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">allFreeVariablesBoundBy</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">isClosedTerm</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">):</span> <span class=\"n\">LambdaTerm</span> <span class=\"o\">:=</span>\n  <span class=\"n\">aux</span> <span class=\"n\">index</span> <span class=\"n\">t</span> <span class=\"mi\">0</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">aux</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LambdaTerm.var</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">expr</span> <span class=\"k\">else</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.app</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">i</span> <span class=\"n\">fn</span> <span class=\"n\">depth</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">i</span> <span class=\"n\">arg</span> <span class=\"n\">depth</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LambdaTerm.lambda</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">i</span> <span class=\"n\">body</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">substitute.idOnClosed</span> <span class=\"o\">(</span><span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">[</span><span class=\"n\">depth</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hexpr</span><span class=\"o\">:</span> <span class=\"n\">isClosedTerm</span> <span class=\"n\">expr</span><span class=\"o\">):</span> <span class=\"n\">substitute.aux</span> <span class=\"n\">t</span> <span class=\"n\">index</span> <span class=\"n\">expr</span> <span class=\"n\">depth</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"gr\">admit</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"n\">h_fn</span> <span class=\"n\">h_arg</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n<span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"n\">body</span> <span class=\"n\">h_body</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>In <code>substitute.idOnClosed</code>, I'm trying to reduce the goal to its <code>(if i + depth = m then expr else LambdaTerm.var m) = LambdaTerm.var m</code> form so I can apply <code>ifNeg</code> and <code>rfl</code>, but I'm unable to see how to do it. I also searched here but without any luck.</p>\n<p>I tried <code>change</code> which is not implemented, <code>simp</code>, <code>dsimp</code> and other similar things, and re-read the tests/examples provided in the repository.</p>",
        "id": 236682323,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619706598
    },
    {
        "content": "<p>Although <code>change</code> is not implemented, <code>show</code> exists and does the same thing</p>",
        "id": 236686361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619707964
    },
    {
        "content": "<p>You've done induction on the wrong variable, <code>t</code> and <code>expr</code> are flipped</p>",
        "id": 236687359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619708315
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">substitute.idOnClosed</span> <span class=\"o\">(</span><span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">[</span><span class=\"n\">depth</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hexpr</span><span class=\"o\">:</span> <span class=\"n\">isClosedTerm</span> <span class=\"n\">expr</span><span class=\"o\">):</span>\n  <span class=\"n\">substitute.aux</span> <span class=\"n\">expr</span> <span class=\"n\">index</span> <span class=\"n\">t</span> <span class=\"n\">depth</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"n\">h_fn</span> <span class=\"n\">h_arg</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n<span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"n\">body</span> <span class=\"n\">h_body</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 236687492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619708366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Unfolding.20into.20ite.3F/near/236687492\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">substitute.idOnClosed</span> <span class=\"o\">(</span><span class=\"n\">depth</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">[</span><span class=\"n\">depth</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">LambdaTerm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hexpr</span><span class=\"o\">:</span> <span class=\"n\">isClosedTerm</span> <span class=\"n\">expr</span><span class=\"o\">):</span>\n  <span class=\"n\">substitute.aux</span> <span class=\"n\">expr</span> <span class=\"n\">index</span> <span class=\"n\">t</span> <span class=\"n\">depth</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">depth</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"n\">h_fn</span> <span class=\"n\">h_arg</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n<span class=\"bp\">|</span> <span class=\"n\">lambda</span> <span class=\"n\">body</span> <span class=\"n\">h_body</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">admit</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Uh! Many thanks!</p>",
        "id": 236689904,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1619708819
    }
]