[
    {
        "content": "<p>I've defined my own <code>nat</code> type in the usual way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n</code></pre></div>\n<p>And I want to somehow represent the repeated function composition e.g. <code>nat.succ (nat.succ (nat.zero))</code> as a unary numeral system like 11111 (or some other arbitrary unicode character). How could I go about doing this in Lean4? Eventually I'd like to map this into a binary system again with my own non-standard numerals.</p>",
        "id": 236609705,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619663170
    },
    {
        "content": "<p>You could make <code>1</code> or its unicode replacement a prefix operator, although you would need a <code>0</code> at the end to finish it off</p>",
        "id": 236611588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619664970
    },
    {
        "content": "<p>That's clever, thanks. It's definitely more pleasant to look at that <code>nat.succ</code>. Is there a way to similarly map a custom notation to a term too like the infix/prefix command does for functions?</p>",
        "id": 236612565,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619665910
    },
    {
        "content": "<p>I can just define a new term like <code>def c := nat.zero</code> but it doesn't let me use arbitrary unicode, and it doesn't show up in the result of <code>#reduce</code></p>",
        "id": 236612676,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619666014
    },
    {
        "content": "<p>Figured it out from looking at the Lean4 \"lean4/src/Init/Notation.lean\": I can use this <code>notation:max \"₀\" =&gt; nat.zero</code></p>",
        "id": 236613006,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619666357
    },
    {
        "content": "<p>Although if I want to use the regular 0 numeral the default implementation cannot be overridden by setting the priority <code>notation:max (priority := high) \"0\" =&gt; nat.zero</code><br>\nerror: <code>failed to synthesize instance\n  OfNat nat 0</code></p>",
        "id": 236613238,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619666579
    },
    {
        "content": "<p>I don't think you have to override the syntax for <code>0</code> if you just want to use <code>0</code>; just implement <code>OfNat nat 0</code></p>",
        "id": 236613616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619666911
    },
    {
        "content": "<p>This isn't pretty but here is one approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">prefix</span> <span class=\"s2\">\"I|\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.succ</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">nat.zero</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"bp\">|</span><span class=\"n\">I</span><span class=\"bp\">|</span><span class=\"n\">I</span><span class=\"bp\">|</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>You might need to write a custom parser to support notation like <code>m111</code> for 3, similar to the builtin parser for hex.</p>",
        "id": 236614591,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1619667863
    },
    {
        "content": "<p>if you use a non-identifier token it should be lexed as a sequence even if there are no spaces</p>",
        "id": 236615873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619668992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">prefix</span> <span class=\"s2\">\"🅂\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.succ</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">nat.zero</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">🅂🅂🅂</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 236615960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619669084
    },
    {
        "content": "<p>in lean 3 there was the ability to declare an identifier sequence as a token even if it is alphanumeric, using the <code>precedence</code> command. Does this still exist in lean 4?</p>",
        "id": 236616061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619669170
    },
    {
        "content": "<p>actually I take it back, you still need spaces around identifier tokens (except <code>#print</code> for some reason)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">printnat</span>\n<span class=\"c1\">-- inductive nat : Type</span>\n<span class=\"c1\">-- constructors:</span>\n<span class=\"c1\">-- nat.zero : nat</span>\n<span class=\"c1\">-- nat.succ : nat → nat</span>\n</code></pre></div>",
        "id": 236616303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619669349
    },
    {
        "content": "<p>Thanks both.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"z\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.zero</span>\n<span class=\"kn\">local</span> <span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"s\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.succ</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"c1\">-- s s s s s z</span>\n</code></pre></div>\n<p>Is fine for now until I figure out how to build a custom parser, which I may never do realistically hah</p>",
        "id": 236616710,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619669776
    },
    {
        "content": "<p>This also helps at least with printing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat2str</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"1\"</span> <span class=\"bp\">++</span> <span class=\"n\">nat2str</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">nat2str</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"c1\">-- \"111\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">nat2str</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"c1\">-- 11111</span>\n</code></pre></div>",
        "id": 236619054,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619672052
    },
    {
        "content": "<p>A slightly different variant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁺\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">)))</span> <span class=\"c1\">-- zero⁺⁺⁺</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"0\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">repr</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"s2\">\"⁺\"</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">repr</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">)))</span> <span class=\"c1\">-- 0⁺⁺⁺</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⁺</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁺</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">⁺⁺⁺</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"bp\">⁺⁺</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">⁺⁺⁺⁺⁺</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 236631986,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1619682058
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"🍎\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span>\n<span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"🍎\"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">🍎🍎🍎</span> <span class=\"bp\">+</span> <span class=\"bp\">🍎🍎</span> <span class=\"bp\">=</span> <span class=\"bp\">🍎🍎🍎🍎🍎</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 236633359,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1619682919
    },
    {
        "content": "<p>I'm so adding this to my school talks</p>",
        "id": 236661989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619698138
    }
]