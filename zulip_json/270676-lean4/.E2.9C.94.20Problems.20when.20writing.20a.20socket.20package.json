[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> has marked this topic as resolved.</p>",
        "id": 255316275,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632871087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255232388\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Lean does not have a low level data representation that can interoperate with C. In Lean, we have to write a wrapper for every structure and every function to make them \"boxed\", which involves a bunch of <code>lean_ctor</code> functions, which is quite frustrating and inconvenient for quick exploration. </li>\n</ol>\n<p>Lean also lacks many types, like fixed precision ints <code>Int32</code> and pointer type <code>Ptr</code></p>\n</blockquote>\n<p>Lean does have unboxed types:</p>\n<ul>\n<li>The <code>UInt*</code> types are unboxed fixed-precision (unsigned) integers. </li>\n<li><code>Float</code> is an unboxed <code>double</code>.</li>\n<li><code>USize</code> is integer of the native word size (i.e., <code>size_t</code> in C/C++).</li>\n<li>Inductives without fields (.e.g, <code>Bool</code>) are unboxed 0-indexed tags/bytes (e.g., <code>false</code> is <code>0</code>, <code>true</code> is <code>1</code>). </li>\n</ul>\n<p>Structures which wrap these types are also unboxed. That is,<code>structure Foo := (x : UInt64)</code> is an unboxed 64-bit integer. Such structures can even have bundled propositions. That is,<code>structure Foo := (x : UInt64) (h : x &gt; 1)</code> is still just an unboxed 64-bit integer.</p>",
        "id": 255318822,
        "sender_full_name": "Mac",
        "timestamp": 1632872730
    },
    {
        "content": "<p>Some pointer-based stuff was done in <a href=\"https://arxiv.org/abs/2003.01685\">this paper</a> but I'm not sure what the status of that work is at this point, or whether pointer manipulation was supposed to make its way into Std at some point.</p>",
        "id": 255321147,
        "sender_full_name": "Chris B",
        "timestamp": 1632874263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255318822\">said</a>:</p>\n<blockquote>\n<p>Lean does have unboxed types:</p>\n<ul>\n<li>The <code>UInt*</code> types are unboxed fixed-precision (unsigned) integers. </li>\n<li><code>Float</code> is an unboxed <code>double</code>.</li>\n<li><code>USize</code> is integer of the native word size (i.e., <code>size_t</code> in C/C++).</li>\n<li>Inductives without fields (.e.g, <code>Bool</code>) are unboxed 0-indexed tags/bytes (e.g., <code>false</code> is <code>0</code>, <code>true</code> is <code>1</code>). </li>\n</ul>\n<p>Structures which wrap these types are also unboxed. That is,<code>structure Foo := (x : UInt64)</code> is an unboxed 64-bit integer. Such structures can even have bundled propositions. That is,<code>structure Foo := (x : UInt64) (h : x &gt; 1)</code> is still just an unboxed 64-bit integer.</p>\n</blockquote>\n<p>Thanks, that's very useful. However, I'm going to use the wrapper style due the absence of <code>Int*</code> types and multi field structure unboxing.</p>",
        "id": 255323446,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1632875928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255323446\">said</a>:</p>\n<blockquote>\n<p>I'm going to use the wrapper style due the absence of <code>Int*</code> types</p>\n</blockquote>\n<p>I would argue <code>Int*</code> types are entirely unnecessary. Virtually every modern computer represents unsigned and signed integers the same way (via two's complement). In fact, most low-level IRs (like LLVM, which backs <code>clang</code>) don't make a distinction between. Thus, you should be able to use them interchangeably in virtually cases. And, at the C/C++ level you can trivially cast between the two. If you are determined to make a distinction at the Lean level, you could define an <code>Int*</code> type like <code>structure Int32 := (toUInt32 : UInt32)</code>  and it would still be unboxed.</p>",
        "id": 255328931,
        "sender_full_name": "Mac",
        "timestamp": 1632880116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> that is not entirely true, arithmetic on signed and unsigned types can be different the nuw, nsw modifiers and  udiv / sdiv, urem, srem instructions attest to that. It would make sense to drop the U prefix and refer to them as Int* though, in correspondence of the conventions in LLVM.</p>",
        "id": 255375645,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1632911470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255375645\">said</a>:</p>\n<blockquote>\n<p>that is not entirely true, arithmetic on signed and unsigned types can be different the nuw, nsw modifiers and  udiv / sdiv, urem, srem instructions attest to that. </p>\n</blockquote>\n<p>Those are properties of the arithmetic operations themselves, though, not the type. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255375645\">said</a>:</p>\n<blockquote>\n<p>It would make sense to drop the U prefix and refer to them as Int* though, in correspondence of the conventions in LLVM.</p>\n</blockquote>\n<p>Please no. I hate that LLVM always calls a array of n-bits an <code>integer</code>, when it in many cases it is really not one. A much more accurate descriptor would be 'word' (e.g., <code>w32</code>, <code>w64</code>) or just 'bits' (i.e., <code>b32</code>, <code>b64</code>). I would argue LLVM's naming conventions are largely just an artifact of the time when it had both signed and unsigned types, and a language which instead starts where LLVM is now should not copy that convention.</p>",
        "id": 255435499,
        "sender_full_name": "Mac",
        "timestamp": 1632935023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255229216\">said</a>:</p>\n<blockquote>\n<ol>\n<li>We cannot write platform-specific and feature-specific code in Lean 4 now. I'm referring to something like<code>#ifdef</code> in C/C++ and <code>#[cfg(...)]</code> in Rust.</li>\n</ol>\n</blockquote>\n<p>You actually can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"meta \"</span> <span class=\"s2\">\"do \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_meta_do</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Macro.addMacroScope</span> <span class=\"bp\">`</span><span class=\"n\">_meta_do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">section</span>\n  <span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">_meta_do</span><span class=\"o\">))</span> <span class=\"s2\">\"_meta_do\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">x</span>\n  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkNode</span> <span class=\"n\">_meta_do</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"_meta_do\"</span><span class=\"o\">])</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kd\">meta</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">System.Platform.isWindows</span> <span class=\"k\">then</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"n\">AddressFamily</span> <span class=\"bp\">|</span> <span class=\"n\">net</span> <span class=\"bp\">|</span> <span class=\"n\">inet6</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"n\">AddressFamily</span> <span class=\"bp\">|</span> <span class=\"n\">net</span> <span class=\"bp\">|</span> <span class=\"n\">inet6</span> <span class=\"bp\">|</span> <span class=\"n\">unix</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">AddressFamily</span>\n<span class=\"c\">/-</span><span class=\"cm\"> on Windows:</span>\n<span class=\"cm\">inductive AddressFamily : Type</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">AddressFamily.net : AddressFamily</span>\n<span class=\"cm\">AddressFamily.inet6 : AddressFamily</span>\n<span class=\"cm\">-/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> on WSL:</span>\n<span class=\"cm\">inductive AddressFamily : Type</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">AddressFamily.net : AddressFamily</span>\n<span class=\"cm\">AddressFamily.inet6 : AddressFamily</span>\n<span class=\"cm\">AddressFamily.unix : AddressFamily</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 255927975,
        "sender_full_name": "Mac",
        "timestamp": 1633241852
    },
    {
        "content": "<p>Another solution that I thought might be nice would be to essentially something like (pseudo code)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">has_unix_sockets</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>  <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">System.Platform.isWindows</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">System.Platform.version</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"bp\">||</span> <span class=\"n\">System.Platform.isDarwin</span>  <span class=\"bp\">||</span> <span class=\"n\">System.Platform.isLInux</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">AddressFamily</span>\n  <span class=\"bp\">|</span> <span class=\"n\">net</span><span class=\"o\">:</span>  <span class=\"n\">AddressFamily</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inet6</span><span class=\"o\">:</span>  <span class=\"n\">AddressFamily</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unix</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_unix_sockets</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">AddressFamily</span>\n</code></pre></div>",
        "id": 255943390,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1633258839
    },
    {
        "content": "<p>This is basically done (the <a href=\"https://github.com/xubaiw/lean4-socket\">lean4-socket</a> repo), with simple <a href=\"https://github.com/xubaiw/lean4-socket/tree/main/examples/http-client\">http-client</a> and <a href=\"https://github.com/xubaiw/lean4-socket/tree/main/examples/http-server\">http-server</a> examples. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 255955109,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633271247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255927975\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255229216\">said</a>:</p>\n<blockquote>\n<ol>\n<li>We cannot write platform-specific and feature-specific code in Lean 4 now. I'm referring to something like<code>#ifdef</code> in C/C++ and <code>#[cfg(...)]</code> in Rust.</li>\n</ol>\n</blockquote>\n<p>You actually can do this:<br>\n</p>\n</blockquote>\n<p>Whoops! Thanks a lot. I 'll try it.</p>\n<p>I thinks it's time for me to start reading about the <code>Lean</code>namespace. <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span> <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 255955586,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633271720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span> That's actually close to how we imagined it :) . One big issue with <code>#[cfg]</code> in Rust is that it interferes with generating the API documentation for all platforms from a single platform. I'd rather have platform-specific types and functions declared on all platforms, and ideally the .olean files to be identical.</p>",
        "id": 255955717,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633271878
    },
    {
        "content": "<p>What are all those <code>@&amp;</code> in Xubai Wang's code? They look pretty strange.</p>",
        "id": 255955812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633271971
    },
    {
        "content": "<p>It looks like C or Rust or worse.</p>",
        "id": 255955820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633271982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255955812\">said</a>:</p>\n<blockquote>\n<p>What are all those <code>@&amp;</code> in Xubai Wang's code? They look pretty strange.</p>\n</blockquote>\n<p>There are some discussions <a href=\"#narrow/stream/270676-lean4/topic/Integrating.20with.20reference.20counting.20in.20C.2B.2B\">here</a>.</p>",
        "id": 255956120,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633272273
    },
    {
        "content": "<p>It's said to be \"borrowed references\", but I'm not quite sure. There seems no distinction between <code>lean_obj_arg</code>(without <code>@&amp;</code>) and <code>b_lean_obj_arg</code>(with <code>@&amp;</code>) at C level.</p>",
        "id": 255956239,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633272400
    },
    {
        "content": "<p>So this is needed only when calling C code?</p>",
        "id": 255956281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633272460
    },
    {
        "content": "<p>There are some non-FFI code in Lean 4 source  which are annotated with <code>@&amp;</code> <a href=\"https://github.com/leanprover/lean4/blob/68867d02ac1550288427195fa09e46866bd409b8/src/Init/Fix.lean#L18\">e.g.</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">fixCore</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fixCore1</span> <span class=\"n\">base</span> <span class=\"n\">rec</span>\n</code></pre></div>\n<p>You can just ignore them if you just want to call the functions.</p>",
        "id": 255957150,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1633273318
    },
    {
        "content": "<p>They are never needed, they are merely a reference counting optimization for FFI. On pure-Lean functions they are actually ignored currently, but there is an automatic optimization for adding them heuristically (see the Immutable Beans paper).</p>",
        "id": 255957336,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633273490
    },
    {
        "content": "<p>Thanks. It looks like regular users won't need to worry about them <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 255957706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633273819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> great :). There is platform specific code I have been involved in the past, where C++ templates. constexpr etc., are used in a similar way, solving this by macros / preprocessor programming is not considered elegant even in these relatively inelegant languages.</p>",
        "id": 255961060,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1633277120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/255943390\">said</a>:</p>\n<blockquote>\n<p>One way to solve this would be to basically provide the evidence that the socket variant exists in the constructor.</p>\n</blockquote>\n<p>Great idea! I think this is a wonderful solution for situations where the data/code you wish to generate has the same structure across all platforms. However, for situations where the representation itself varies across platforms this may be insufficient (e.g., <code>USize</code>).</p>",
        "id": 255967456,
        "sender_full_name": "Mac",
        "timestamp": 1633283430
    },
    {
        "content": "<hr>",
        "id": 255969835,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633285786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  In situations where the representation varies across platforms using platform dependent types (like USize) is only appropriate as an implementation detail, I think. Depending on what USize is actually meant to represent it could be appropriate to for example have distinct namespaced definitions for different hardware platforms: </p>\n<p>For example for the hardware platforms we develop, we have a common \"coordinate system\" of all hardware components, which introduces logical coordinates for all hardware components. The logical coordinates are used to address  data in logical hardware components. The corresponding memory addresses and bit level representation of the containers on hardware is strictly separated and varies across hardware platforms, as well as access mode. All of this is strongly typed and implement via various C++ template tricks (including static checks on coordinate ranges etc.), see here <a href=\"https://github.com/electronicvisions/haldls\">https://github.com/electronicvisions/haldls</a>, for an overview. All this is to say, using \"evidence\" based \"static\" dispatching goes a long way and in some sense is common practice in C++ codebases that have to deal with heterogenous hardware targets in a uniform way.</p>",
        "id": 255969941,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1633285880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span> I agree that the library itself should contain the variants for all platforms. However, the platform specific types/defs themselves (i.e., <code>USize</code>, <code>nativeEndianess</code>, etc.) do still need conditional definitions. Such native defs are also important for interactive / interpreted use where the platform is already determined.</p>",
        "id": 255975929,
        "sender_full_name": "Mac",
        "timestamp": 1633291404
    },
    {
        "content": "<p>couldn't you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">X86_64</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- probably architectures could be more or less defined inspired by what LLVM does in their td files.</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Endianness</span>\n<span class=\"bp\">|</span> <span class=\"n\">BigEndian</span>\n<span class=\"bp\">|</span> <span class=\"n\">LittleEndian</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NativeEndiannessOf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Endianness</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">USizeOf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">USize</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NativeEndiannessOf</span> <span class=\"n\">X86_64</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Endianness.LittleEndian</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">USizeOf</span> <span class=\"n\">x86_64</span> <span class=\"n\">where</span>\n  <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64</span>\n</code></pre></div>\n<p>platform / architecture specific functions could then  get the \"native\" architecture as an implicit argument, where architecture / platform is defined as a type, with appropriate type classes defined. What is considered the native architecture would be decided by conditional compilation not at source level.</p>",
        "id": 255981516,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1633296884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130511\">@Christian Pehle</span> that works well and good for compiled code, but what about interpreted code, it would still need to somehow know what architecture it is running on.</p>",
        "id": 255988840,
        "sender_full_name": "Mac",
        "timestamp": 1633304840
    },
    {
        "content": "<p>That is, how do I <code>#eval</code> code using these types in your picture?</p>",
        "id": 255988905,
        "sender_full_name": "Mac",
        "timestamp": 1633304884
    },
    {
        "content": "<p><code>isWindows</code> can be evaluated, there is no reason we couldn't add e.g. a more general constant returning the target triple</p>",
        "id": 256022050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633335539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/256022050\">said</a>:</p>\n<blockquote>\n<p><code>isWindows</code> can be evaluated, there is no reason we couldn't add e.g. a more general constant returning the target triple</p>\n</blockquote>\n<p>Yes, exactly.  Beyond that the way that LLVM describes target architectures in td files (<a href=\"https://github.com/llvm-mirror/llvm/blob/master/include/llvm/Target/Target.td\">https://github.com/llvm-mirror/llvm/blob/master/include/llvm/Target/Target.td</a>, <a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/PowerPC/PPC.td\">https://github.com/llvm/llvm-project/blob/main/llvm/lib/Target/PowerPC/PPC.td</a>) would lend itself very well to a translation into a corresponding relatively sophisticated Lean dependent type, it would be possible to essentially use Lean meta programming facilities to replace the table-gen mechanism in LLVM. Of course that is mainly a ton of work and probably no-one would undertake this ;).</p>",
        "id": 256025726,
        "sender_full_name": "Christian Pehle",
        "timestamp": 1633337536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130511\">Christian Pehle</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Problems.20when.20writing.20a.20socket.20package/near/256025726\">said</a>:</p>\n<blockquote>\n<p>Of course that is mainly a ton of work and probably no-one would undertake this ;).</p>\n</blockquote>\n<p>Are you sure about that? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 256098407,
        "sender_full_name": "Mac",
        "timestamp": 1633368552
    },
    {
        "content": "<p>A more short term approach would probably be useful though.</p>",
        "id": 256098516,
        "sender_full_name": "Mac",
        "timestamp": 1633368592
    }
]