[
    {
        "content": "<p>I'm working through <code>logic.equiv.option</code> &amp; there's some Lean 3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n  <span class=\"k\">then</span> <span class=\"n\">option.get</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>which to my mind scans like Rust's <code>if let</code>through an Equiv?</p>\n<p>On the Lean 3 side, <code>h</code> has type <code>h : ↥((⇑e (some x)).is_some)</code>, (<code>e</code> is e : option α ≃ option β &amp; <code>x</code> is <code>α</code>).</p>\n<p>in Lean 4  the resulting type for <code>h</code> is <code>h : isSome (toFun e (some x)) = true</code> doesn't let Lean 4 know that <code>Option.get h</code> is typed <code>β</code></p>\n<p>(the error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Option.get</span> <span class=\"bp\">?</span><span class=\"n\">m.2294</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">isSome</span> <span class=\"bp\">?</span><span class=\"n\">m.2294</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.2127</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2126</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1989</span>\n</code></pre></div>\n<p>)</p>\n<p>Any pointers?</p>\n<p>(branch <code>arienmmalec/port-equivfunctor</code> has the in progress port for <code>Mathlib.Control.EquivFunctor</code>)</p>",
        "id": 311070900,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668893988
    },
    {
        "content": "<p>Take a look at <code>Option.get</code>'s signature: it takes two explicit parameters</p>",
        "id": 311071578,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1668894617
    },
    {
        "content": "<p>I think we probably ought to add a (deprecated?) shim that we can #align to, or if someone is brave, backport this change.</p>",
        "id": 311071937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668894911
    }
]