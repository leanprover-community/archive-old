[
    {
        "content": "<p>I am having some difficulties translating code from Idris 2 to Lean 4 with respect to universes.</p>\n<p>I understand the notion of a tower of universes starting with <code>Type</code>, i.e. <code>Type 0</code>and I thought I understood the notion of a universe bump when mixing different universes in the same type constructor (i.e. <code>#check Prod    -- Type u_1 → Type u_2 → Type (max u_1 u_2)</code>). However, I am having a hard time putting it to practice. </p>\n<p>Could someone help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">interface ReadContext context where</span>\n<span class=\"cm\">  getRead : context -&gt; Type</span>\n<span class=\"cm\">  setRead : Type -&gt; context -&gt; context</span>\n<span class=\"cm\">  getSetId : {0 ctx : context} -&gt; getRead (setRead a ctx) = a</span>\n\n<span class=\"cm\">[ReadPair] ReadContext (Type, List (String, Type)) where</span>\n<span class=\"cm\">  getRead (a, env) = a</span>\n<span class=\"cm\">  setRead r (a, env) = (r, env)</span>\n<span class=\"cm\">  getSetId {ctx = (a, env)} = Refl</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>This is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ReadContext</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getRead</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">setRead</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span>\n  <span class=\"n\">getSetId</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">getRead</span> <span class=\"o\">(</span><span class=\"n\">setRead</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">readPair</span> <span class=\"o\">:</span> <span class=\"n\">ReadContext</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">getRead</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"n\">setRead</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">a</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- getSetId {ctx = (a, env)} = Refl</span>\n</code></pre></div>\n<p>Here is the error I get: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ReadContext</span> <span class=\"n\">a</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>  <span class=\"c1\">--- this makes sense :</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.409</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.409</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286656695,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655566184
    },
    {
        "content": "<p>Hmm, why did you add the <code>a :</code>? The problem is not universes, but that you're passing a value (<code>a</code>) where a type was expected. A direct translation works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">readPair</span> <span class=\"o\">:</span> <span class=\"n\">ReadContext</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 286657061,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655566695
    },
    {
        "content": "<p>Ooh, I see the stupidity now ... I was thinking that <code>a</code> was just a name for <code>(Type × List (String × Type))</code>, but I am actually instantiating ReadContext with a value of this type!</p>",
        "id": 286657465,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655567358
    },
    {
        "content": "<p>Let me try to get the example working. I think I have another follow up question.</p>",
        "id": 286657522,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655567408
    },
    {
        "content": "<p>I could get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ReadContext</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getRead</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"n\">setRead</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span>\n  <span class=\"n\">getSetId</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">getRead</span> <span class=\"o\">(</span><span class=\"n\">setRead</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">readPair</span> <span class=\"o\">:</span> <span class=\"n\">ReadContext</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">getRead</span> <span class=\"bp\">|</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"n\">setRead</span> <span class=\"bp\">|</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Prod.mk</span> <span class=\"n\">_</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod.mk</span> <span class=\"n\">r</span> <span class=\"n\">env</span>\n  <span class=\"n\">getSetId</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- TODO</span>\n</code></pre></div>\n<p>However, I was stuck for a while trying to figure why the following was not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">setRead</span> <span class=\"bp\">|</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Prod.mk</span> <span class=\"n\">_</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">×</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"c1\">-- error in second 'env'</span>\n</code></pre></div>\n<p>Here is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">r</span> <span class=\"bp\">×</span> <span class=\"n\">env</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">env</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.538</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.538</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why does it work with <code>Prod.mk</code> but not with <code>×</code>?</p>",
        "id": 286659266,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655569977
    },
    {
        "content": "<p>the <code>\\times</code> is notation for the type <code>Prod</code> while <a href=\"http://Prod.mk\">Prod.mk</a> is the constructor, if you want to match on a thing of type Prod you have to match on <code>(x, y)</code></p>",
        "id": 286659355,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655570066
    },
    {
        "content": "<p>Interesting ... but isn't <code>(Nat × String)</code> a notation for <code>(Prod.mk Nat String)</code>? I was assuming they were interchangeable.</p>",
        "id": 286659645,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655570446
    },
    {
        "content": "<p>No that's notation for <code>Prod Nat String</code></p>",
        "id": 286659718,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655570527
    },
    {
        "content": "<p><code>(x, y) = Prod.mk x y</code>, <code>(x × y) = Prod x y</code> where the first one is an actualy value of type <code>Prod</code> and the second one is the <em>type</em> <code>Prod x y</code></p>",
        "id": 286659742,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655570570
    },
    {
        "content": "<p>So obvious now ... and the source of many of my struggles!</p>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> !</p>",
        "id": 286659871,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655570738
    },
    {
        "content": "<p>It certainly doesn't help that Idris reuses the same notation for both levels :)</p>",
        "id": 286659934,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655570814
    },
    {
        "content": "<p>One last question ... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ReadContext</span> <span class=\"o\">(</span><span class=\"n\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getRead</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"n\">setRead</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">context</span>\n  <span class=\"n\">getSetId</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">getRead</span> <span class=\"o\">(</span><span class=\"n\">setRead</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p><code>getSetId</code> is a law that must hold for all instances of this class, right? How do I implement this? The Idris2 source implements it with <code>getSetId {ctx = (a, env)} = Refl</code>.</p>\n<p>(feel free to point me to reading material ... this is uncharted territory for me)</p>",
        "id": 286659951,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655570852
    },
    {
        "content": "<p>So what idris is doing here ( I think I dont know idris) is to set a default value for the field, you can do this in Lean as well by doing: <code>:= ...</code> at the end of your field notation, in this case <code>:= by rfl</code>. If the rfl proof does not work out (or the user wants to choose another one for another reason) they can overwrite this while creating their instance by simply assigning a value to the field as per usual...I dont know whether this is documented anywhere.</p>",
        "id": 286660305,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655571318
    },
    {
        "content": "<p>Ah no they are not doing a default alue they are doing it in the instance I didnt read the code above.</p>",
        "id": 286660374,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655571410
    },
    {
        "content": "<p>What i said still applies though^^</p>",
        "id": 286660378,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1655571417
    },
    {
        "content": "<p>The closest translation would be <code>getSetId := @fun _ (a, env) =&gt; rfl</code>. <code>{ctx =</code> is a named parameter, but Lean only supports them for applications, not definitions.</p>",
        "id": 286660643,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655571795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Lost.20in.20the.20multiverse.20.2E.2E.2E/near/286660643\">said</a>:</p>\n<blockquote>\n<p>The closest translation would be <code>getSetId := @fun _ (a, env) =&gt; rfl</code>. <code>{ctx =</code> is a named parameter, but Lean only supports them for applications, not definitions.</p>\n</blockquote>\n<p>I see. So <code>ctx</code> is not visible in the implementation and you are <code>binding</code> it to <code>_</code> and <code>(a,env)</code>using a lambda so it can be used for the proof.</p>",
        "id": 286660730,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655571943
    },
    {
        "content": "<p>The <code>_</code> is the implicitly bound <code>a</code> from the declaration of <code>ReadContext.getSetId</code>. The name reuse is a bit confusing (again).</p>",
        "id": 286661082,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655572438
    },
    {
        "content": "<p>I need to rely more on the infoView to help go through this. E.g. <code>getSetId := rfl</code> will show me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">ctx</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_1</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">))</span>\n      <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"n\">ctx</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">a</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>I am assuming that <code>✝</code> is a marker for an inaccessible binding?</p>\n<p>In any case, I think I am getting ahead of myself here. For now, let me finish the complete translation fro Idris2 and see if I fully grok it.</p>",
        "id": 286661695,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655573361
    },
    {
        "content": "<p>Thanks again!</p>",
        "id": 286661756,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1655573409
    }
]