[
    {
        "content": "<p>In Lean 3 this worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rβ</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rβ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">he.substr</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>In Lean 4 I seem to need to tell Lean the motive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rβ</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rβ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--he.substr h -- higher unification gets confused</span>\n<span class=\"n\">he.substr</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rβ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">h</span> <span class=\"c1\">-- tell it the motive and it's fine</span>\n</code></pre></div>\n<p>I know this is higher order unification and one can't expect miracles, this post is mainly to check that behaviour like this is expected (e.g. the unification algorithm has changed). This came up when porting <code>logic.relation</code>.</p>",
        "id": 308693123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667950837
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1806\">https://github.com/leanprover/lean4/issues/1806</a></p>",
        "id": 308693599,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667951190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> are you also porting logic.relation? I don't want to duplicate work. I had claimed it on the <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status/\">wiki</a> but you're welcome to have it (I had got up to line 190). I am on a long train journey from Bonn to London starting in 8 hours and it would be great to know whether I should start on another file.</p>",
        "id": 308695018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667952061
    },
    {
        "content": "<p>I started on it, but then saw that we need the <code>mk_iff</code>attribute. So I'm working on <code>mk_iff</code> now.</p>",
        "id": 308695139,
        "sender_full_name": "David Renshaw",
        "timestamp": 1667952120
    },
    {
        "content": "<p>(Status of <code>mk_iff</code> is that currently I can generate the correct theorems, but their proofs are sorried.)</p>",
        "id": 308695405,
        "sender_full_name": "David Renshaw",
        "timestamp": 1667952247
    },
    {
        "content": "<p>Yeah, I'd just got to that point. I decided that I would just make the iffs manually :-)</p>",
        "id": 308695412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667952253
    },
    {
        "content": "<p>So do you want to keep going on <code>mk_iff</code> and I'll spend the train journey tomorrow doing the rest of <code>logic.relation</code>? Are you much further ahead than me? Or shall I just get out of your hair, change the wiki to you, and do another file?</p>",
        "id": 308695473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667952299
    },
    {
        "content": "<p>You're probably exactly where I got to, and I don't intend to continue in the immediate future.</p>",
        "id": 308695527,
        "sender_full_name": "David Renshaw",
        "timestamp": 1667952337
    },
    {
        "content": "<p>OK great, I'll keep going. I am exactly at the first <code>mk_iff</code>. I won't make the iff! (I might add that I am in no position to make attributes but can just about port mathlib files)</p>",
        "id": 308695659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667952395
    },
    {
        "content": "<p>In case you want to test out the attribute:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/561\">https://github.com/leanprover-community/mathlib4/pull/561</a>.<br>\nIt should work, but the proofs are sorried and there are still a bunch of verbose <code>dbg_trace</code> statements.</p>",
        "id": 308695892,
        "sender_full_name": "David Renshaw",
        "timestamp": 1667952554
    },
    {
        "content": "<p>I think I have a complete implementation of <code>mk_iff</code>now:  <a href=\"https://github.com/leanprover-community/mathlib4/pull/561\">https://github.com/leanprover-community/mathlib4/pull/561</a></p>",
        "id": 308882210,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668031307
    },
    {
        "content": "<p>Thanks! I'll try and find the time tomorrow to put everything together but it's my first day back at work after a week of travelling so who knows.</p>",
        "id": 308886260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668032863
    },
    {
        "content": "<p>I should say that I have a branch with logic.relation ported apart from the last few lemmas</p>",
        "id": 308886365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668032883
    }
]