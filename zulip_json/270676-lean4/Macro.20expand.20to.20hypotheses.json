[
    {
        "content": "<p>Is is possible to create a macro that can be used within <code>theorem</code>, <code>def</code>, <code>variable</code> declarations? For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Doesn't work, bracketedBinder isn't a syntax category</span>\n<span class=\"n\">syntax</span>  <span class=\"n\">ident</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">bracketedBinder</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subgroup_theorem</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Is this an appropriate use of the macro system?</p>",
        "id": 234606617,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1618453488
    },
    {
        "content": "<p>Yes, this would be the way to do it, but as you found it's not there yet. One potential complication is that different built-in parsers use different parts of the binder syntax, so it's not quite clear what parser(s) should be made a syntax category and opened up to macro expansion.</p>",
        "id": 234629550,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618471519
    },
    {
        "content": "<p>Okay, thanks for your help</p>",
        "id": 234648122,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1618480874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expand.20to.20hypotheses/near/234629550\">said</a>:</p>\n<blockquote>\n<p>Yes, this would be the way to do it, but as you found it's not there yet. One potential complication is that different built-in parsers use different parts of the binder syntax, so it's not quite clear what parser(s) should be made a syntax category and opened up to macro expansion.</p>\n</blockquote>\n<p>Why aren't all parser nonterminals syntax categories? Is there a downside to this?</p>",
        "id": 234748532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618519038
    },
    {
        "content": "<p>Uh, I think you're severely underestimating the number of nonterminals we have. Performance would definitely be an issue, every category is a table of parser closures indexed by first tokens and run using <code>longestMatch</code>, which is significantly more work than a simple parser like <code>p1 &lt;|&gt; p2</code>. But the bigger question is how to extend those nonterminals not with new syntax but with new semantics. Our current categories have dedicated semantics expressed by functions <code>elabTerm/Level/...</code>, where it's easy to unfold macros for the head as the very first step. But many other nonterminals are never given dedicated semantics but are simply matched against as part of a larger macro or elaborator. Recall that Lean/Racket macro expansion is top-down, not bottom-up, so it's not clear how additional macros (or even elaborators, which need to map to an appropriate \"core syntax\" type) should be automatically applied. Carefully designing support for additional categories manually where beneficial looks like the more realistic approach.</p>",
        "id": 234809663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618559250
    },
    {
        "content": "<p>I guess \"new semantics\" is already an issue for the example in the other thread: how does <code>(~)</code> become an <code>ident</code> unless it is mapped to a <code>name</code>? The syntax itself doesn't say how this would happen</p>",
        "id": 234811724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618560294
    },
    {
        "content": "<p>In the example here, this is resolved by expanding the new syntax to another syntax in the <code>bracketedBinder</code> category, is that always an option?</p>",
        "id": 234811809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618560348
    },
    {
        "content": "<p>If you wanted to support lean 3 style binders you might have <code>($x:ident ≤ $y:expr)</code> -&gt; <code>($x) (H : $x ≤ $y)</code> which is not another syntax in the <code>bracketedBinder</code> category</p>",
        "id": 234811984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618560422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expand.20to.20hypotheses/near/234811809\">said</a>:</p>\n<blockquote>\n<p>In the example here, this is resolved by expanding the new syntax to another syntax in the <code>bracketedBinder</code> category, is that always an option?</p>\n</blockquote>\n<p>Yes, but someone has to add that <code>expandMacros</code> call to (all the) right places. And it gets more complicated if you want \"elaborators\", whatever that should mean for the specific category.</p>",
        "id": 234812139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618560490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expand.20to.20hypotheses/near/234811984\">said</a>:</p>\n<blockquote>\n<p>If you wanted to support lean 3 style binders you might have <code>($x:ident ≤ $y:expr)</code> -&gt; <code>($x) (H : $x ≤ $y)</code> which is not another syntax in the <code>bracketedBinder</code> category</p>\n</blockquote>\n<p>Yeah, this is a good example for why adding a new category is not trivial, apart from the other binder syntax issue I mentioned in my first post.</p>",
        "id": 234812235,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1618560533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expand.20to.20hypotheses/near/234809663\">said</a>:</p>\n<blockquote>\n<p>Carefully designing support for additional categories manually where beneficial looks like the more realistic approach.</p>\n</blockquote>\n<p>Given the discussion here and in my custom identifiers thread, it seems like having binders be one of those categories would be ideal. It could allow for local mixfix and notation binding (as in my thread) while also supporting complex hypotheses (as in this thread).</p>",
        "id": 234907919,
        "sender_full_name": "Mac",
        "timestamp": 1618601194
    }
]