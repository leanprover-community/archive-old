[
    {
        "content": "<p>In Lean 3, it often annoyed me that <code> `(%%x = %%y) </code> didn't work.  And even if it did work, you couldn't use it to implement functions such as <code>mk_pairwise_equality : list expr → expr</code> (because there is no way to provide the universe level to the quotation).</p>\n<p>Fortunately, such syntax extensions are <a href=\"https://github.com/gebner/quote4\">easy to implement</a> in Lean 4 these days:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Quote</span>\n<span class=\"kn\">open</span> <span class=\"n\">Quote</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkPairwiseEquality</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">quote</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">quote</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">quote</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">bEqCs</span> <span class=\"o\">:=</span> <span class=\"n\">mkPairwiseEquality</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n    <span class=\"n\">quote</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">bEqCs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">quote</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 237980431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620503618
    },
    {
        "content": "<blockquote>\n<p>This has almost certainly been done before somewhere else, by somebody else.</p>\n</blockquote>\n<p>I think there is something similar in a haskell extension (that is, a type-safe splice operator)</p>",
        "id": 237984055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620507405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/237984055\">said</a>:</p>\n<blockquote>\n<p>I think there is something similar in a haskell extension (that is, a type-safe splice operator)</p>\n</blockquote>\n<p>Thanks for the pointer, but it is indeed only similar.  The Template Haskell type is <code>Q : Type → Type</code>, while my type is <code>QQ : Expr → Type</code>.  The <code>Type → Type</code> version doesn't work in Lean due to universe polymorphism: we might only know at runtime which universe the type is in, but the <code>Type u → Type</code> version fixes it at compile time.</p>",
        "id": 237985024,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620508365
    },
    {
        "content": "<p>There seems to be a syntactic ambiguity between the two uses of <code>quote</code> for terms and types. How are they disambiguated?</p>",
        "id": 237985358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620508757
    },
    {
        "content": "<p>Also what are the actual types of <code>quote x : quote α</code> and <code>quote α : Type</code>?</p>",
        "id": 237985427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620508822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/237985358\">said</a>:</p>\n<blockquote>\n<p>There seems to be a syntactic ambiguity between the two uses of <code>quote</code> for terms and types. How are they disambiguated?</p>\n</blockquote>\n<p>By the expected type.  Maybe it would be less confusing to use capitalization as in <code>quote x : Quote α</code>.</p>",
        "id": 238015533,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620544310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/237985427\">said</a>:</p>\n<blockquote>\n<p>Also what are the actual types of <code>quote x : quote α</code> and <code>quote α : Type</code>?</p>\n</blockquote>\n<p>For example, <code>quote Type : Type</code> expands to <code>QQ (mkSort (mkLevelSucc levelZero))</code>.<br>\nAnd <code>quote Nat : quote Type</code> expands to <code>QQ.mk (mkConst ``Nat)</code></p>",
        "id": 238015640,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620544440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/237985358\">said</a>:</p>\n<blockquote>\n<p>There seems to be a syntactic ambiguity between the two uses of <code>quote</code> for terms and types. How are they disambiguated?</p>\n</blockquote>\n<p>I am also somewhat concerned with the name clash between this <code>quote</code>/<code>Quote</code> and the built-in Lean <code>quote</code>/<code>Quote</code> for generating <code>Syntax</code>.</p>",
        "id": 238040293,
        "sender_full_name": "Mac",
        "timestamp": 1620571378
    },
    {
        "content": "<p>This is literally one of the todo items:</p>\n<blockquote>\n<p>Pick another name. There is already a <code>Lean.Quote</code> type, which means something slightly different.</p>\n</blockquote>\n<p>Unfortunately, I only learned of <code>Lean.Quote</code> after I wrote this.  Suggestions for other names are welcome.</p>",
        "id": 238040881,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620572018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/238040881\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, I only learned of <code>Lean.Quote</code> after I wrote this.  Suggestions for other names are welcome.</p>\n</blockquote>\n<p>I believe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  was using <code>reflect</code> as his name for exhibiting a similar concept so that might fit here.</p>\n<p>EDIT: Though now looking through the repository, I see that you are already using that terminology for untyped <code>Expr</code> quotations.</p>",
        "id": 238042009,
        "sender_full_name": "Mac",
        "timestamp": 1620573139
    },
    {
        "content": "<p>Since you are already naming the class <code>QQ</code> why not name the whole thing <code>QQ</code> and the command <code>qq</code> as well?</p>",
        "id": 238042907,
        "sender_full_name": "Mac",
        "timestamp": 1620574253
    },
    {
        "content": "<p>Alternatively, since it is a typed <code>reflect</code> you could name it <code>reflectT</code>/<code>ReflectT</code></p>",
        "id": 238042940,
        "sender_full_name": "Mac",
        "timestamp": 1620574316
    },
    {
        "content": "<p>Ever since the postfix <code>!</code> on macros went away, I've had difficulty mentally parsing expressions involving macros, and this one is an example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">bEqCs</span> <span class=\"o\">:=</span> <span class=\"n\">mkPairwiseEquality</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n    <span class=\"n\">quote</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">bEqCs</span>\n</code></pre></div>\n<p>If I didn't know <code>quote</code> was a macro, then this would be returning <code>(quote a) = b ∧ bEqCs</code>, which has the wrong binding and also does not make it obvious that some major syntactic magic is happening. I would prefer that this use a notation closer to <code> `(...) </code>, which already has an association to quotation in lean. Another possible way to signal the use of a macro is to have mandatory parens and no space, as in <code>quote(a = b ∧ bEqCs)</code>. Since this is no longer a valid way to write application of a regular function that seems like a good candidate for \"special\" functions</p>",
        "id": 238051382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620583803
    },
    {
        "content": "<p>How about <code>q!(...)</code>?</p>",
        "id": 238051457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620583865
    },
    {
        "content": "<p>Yeah, it's confusing that the default precedence for macros is different from functions.</p>\n<blockquote>\n<p>Since this is no longer a valid way to write application of a regular function that seems like a good candidate for \"special\" functions</p>\n</blockquote>\n<p>Wait, what?!?  You're right..</p>",
        "id": 238051868,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620584396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/238051457\">said</a>:</p>\n<blockquote>\n<p>How about <code>q!(...)</code>?</p>\n</blockquote>\n<p>I think I'll go with <code>q(...)</code>, since <code>!</code> is no longer supposed to be used for macros.</p>",
        "id": 238051995,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620584522
    },
    {
        "content": "<p>I think we should make an exception for that rule for one-letter macros to accomodate <code>s!</code> and <code>m!</code></p>",
        "id": 238052249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620584819
    },
    {
        "content": "<p>Tbh, I'd prefer <code>s\"foo: {x}\"</code> like in Scala.</p>",
        "id": 238052276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620584880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/238052249\">said</a>:</p>\n<blockquote>\n<p>I think we should make an exception for that rule for one-letter macros to accomodate <code>s!</code> and <code>m!</code></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/issues/406\">https://github.com/leanprover/lean4/issues/406</a></p>",
        "id": 238052277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620584880
    },
    {
        "content": "<p>but if <code>name(...)</code> catches on as a signal for macros then I can get behind that as well</p>",
        "id": 238052316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620584891
    },
    {
        "content": "<p><code>s\"...\"</code> also seems good. Generally, no space after = funny syntax is happening</p>",
        "id": 238052349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620584962
    },
    {
        "content": "<p>(also, <a href=\"https://github.com/leanprover/lean4/issues/407\">https://github.com/leanprover/lean4/issues/407</a>)</p>",
        "id": 238052404,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1620585014
    },
    {
        "content": "<p>also <code>name[...]</code> and <code>name{...}</code> (depending on the macro) a la rust</p>",
        "id": 238052408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620585022
    },
    {
        "content": "<p>The <code>quote a = b</code> was much easier to parse in the editor because <code>quote</code> is highlighted as a keyword.  Now with <code>q(a = b)</code>, only the first <code>q(</code> is highlighted.  The second <code>)</code> remains black. <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span></p>",
        "id": 238052509,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620585128
    },
    {
        "content": "<p>re: escaping in format strings, rust uses <code>\"{{foo}}\"</code>, although <code>\"\\{foo\\}\"</code> would also be reasonable</p>",
        "id": 238052512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620585138
    },
    {
        "content": "<p>I suppose you technically only have to escape the open brace</p>",
        "id": 238052677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620585303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/238052677\">said</a>:</p>\n<blockquote>\n<p>I suppose you technically only have to escape the open brace</p>\n</blockquote>\n<p>True, and <code>\"\\{foo}\"</code> looks better than <code>\"\\{foo\\}\"</code> to me. Rust's <code>\"{{foo}}\"</code> is harder to parse because it could just as easily mean interpolate <code>{foo}</code>.</p>",
        "id": 238054597,
        "sender_full_name": "Mac",
        "timestamp": 1620587236
    },
    {
        "content": "<p>I agree (although I think the escape <code>\\}</code> should still be defined and mean <code>}</code>, even if it isn't required, just so people can use the other version if they prefer). Since we already have backslash-escapes in strings it seems needlessly complicated to have more than one kind of escape</p>",
        "id": 238055182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620587769
    },
    {
        "content": "<p>Hi, I'm having some problems with the installation of lean on Ubuntu and some uncaught exception messages in leanpkg...</p>",
        "id": 238061852,
        "sender_full_name": "Isaia Nisoli",
        "timestamp": 1620594440
    },
    {
        "content": "<p>what is the best channel to ask help/relate bugs?</p>",
        "id": 238061943,
        "sender_full_name": "Isaia Nisoli",
        "timestamp": 1620594513
    },
    {
        "content": "<p>which lean?</p>",
        "id": 238061978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620594529
    },
    {
        "content": "<p>lean4</p>",
        "id": 238062011,
        "sender_full_name": "Isaia Nisoli",
        "timestamp": 1620594591
    },
    {
        "content": "<p>I have now also implemented pattern matching (though I had to do some creative hacks to extend the match and do notation):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"{e}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">frob</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">frob</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.length</span><span class=\"bp\">;</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239230353,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621333618
    },
    {
        "content": "<p>The syntax has changed a bit.  The example at the beginning of the thread is now written as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkPairwiseEquality</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"n\">mkPairwiseEquality</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239230423,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621333667
    },
    {
        "content": "<p>Is there a reason why you have to use <code>%(...)</code> instead of <code>$(...)</code> for antiquotation? The latter would be better for consistency, of course</p>",
        "id": 239305253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363451
    },
    {
        "content": "<p>Because that would break the syntax matchers (because <code>$(...)</code> is now parsed as a term).</p>",
        "id": 239305726,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363636
    },
    {
        "content": "<p>doesn't <code>$(...)</code> work on any syntax class?</p>",
        "id": 239305961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"$(\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"> unknown identifier 'foo' -/</span>\n</code></pre></div>",
        "id": 239306076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363782
    },
    {
        "content": "<p>can you avoid the <code>syntax \"$(\" term \")\" : term</code> part?</p>",
        "id": 239306107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363799
    },
    {
        "content": "<p>antiquotation already exists in the grammar</p>",
        "id": 239306181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363816
    },
    {
        "content": "<p>you just need to attach a meaning to it in your macro</p>",
        "id": 239306241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363847
    },
    {
        "content": "<p>I get a parsing error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">q</span><span class=\"o\">(</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">)</span>\n<span class=\"c1\">-- expected '`(tactic|'</span>\n</code></pre></div>",
        "id": 239306308,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363871
    },
    {
        "content": "<p>Same with <code>$(x)</code>.  Even if it worked, it would be really ugly to match using macro_rules.</p>",
        "id": 239306356,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621363906
    },
    {
        "content": "<p>Probably, but I'd really like this to work from the user side of things</p>",
        "id": 239306507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363954
    },
    {
        "content": "<p>The implementation of <code> `(x) </code> itself might give some clues</p>",
        "id": 239306601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621363991
    },
    {
        "content": "<p>The ability to use the antiquotation syntax outside of quotations was removed in a previous update: <a href=\"https://github.com/leanprover/lean4/commit/f0960b7f89c61ba4e28ea8239076812255b078be\">https://github.com/leanprover/lean4/commit/f0960b7f89c61ba4e28ea8239076812255b078be</a></p>",
        "id": 239306759,
        "sender_full_name": "Mac",
        "timestamp": 1621364050
    },
    {
        "content": "<p>so in that case the <code>q</code> macro just needs to use <code>incQuotDepth</code></p>",
        "id": 239306933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364121
    },
    {
        "content": "<p>however, that may result in a clash with the normal antiquotation expansion</p>",
        "id": 239307023,
        "sender_full_name": "Mac",
        "timestamp": 1621364158
    },
    {
        "content": "<p>(especially in nested quotations)</p>",
        "id": 239307120,
        "sender_full_name": "Mac",
        "timestamp": 1621364183
    },
    {
        "content": "<p>Yes, if you have mixed <code>q(...)</code> and <code> `(...)</code> things might get weird</p>",
        "id": 239307144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364193
    },
    {
        "content": "<p>I will let sebastian handle the macro macro stuff, that's a bit too mind bending for me</p>",
        "id": 239307198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364217
    },
    {
        "content": "<p>You don't <em>need</em> quotations to implement <code>q(...)</code>, it's just a convenience, you can always just wrangle <code>Syntax</code> objects directly</p>",
        "id": 239307300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364266
    },
    {
        "content": "<p>so I would just fall back on that when the syntax gets mixed up</p>",
        "id": 239307411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364297
    },
    {
        "content": "<p>I'll see if I can make this incQuotDepth work.  I'm not happy about the zoo of antiquotations either.</p>",
        "id": 239307541,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621364347
    },
    {
        "content": "<p>BTW, what do you think of the <code>q(x + y)</code>.  Would you prefer <code>q($x + $y)</code>?</p>",
        "id": 239307600,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621364375
    },
    {
        "content": "<p>I don't see that example above, but if <code>x</code> and <code>y</code> are coming from the context then I think they should be <code>$x</code> and <code>$y</code></p>",
        "id": 239307832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364445
    },
    {
        "content": "<p>In short, it should act roughly like lean 3 expr quotation but with better typing</p>",
        "id": 239307984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364502
    },
    {
        "content": "<p>Having no sigils like your original version looks nice but talking about the different meta levels is confusing as it is and syntax that is too sugary may obscure this</p>",
        "id": 239308178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621364573
    },
    {
        "content": "<p>One motivation was that you could do <code>q(by rwa [add_zero] at h)</code> but <code>q(by rwa [add_zero] at %h)</code> would have been a parse error (because I don't think you can declare additional ident parsers).  With the dollar, <code>q(by rwa [add_zero] at $h)</code> should parse though.</p>",
        "id": 239308594,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621364735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Yet.20another.20expression.20quotation.20package/near/239308594\">said</a>:</p>\n<blockquote>\n<p>(because I don't think you can declare additional ident parsers). </p>\n</blockquote>\n<p>Nope, sadly. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> I already ran into this issue in this thread: <a href=\"#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234409388\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Custom.20identifiers.3F/near/234409388</a>.</p>",
        "id": 239309051,
        "sender_full_name": "Mac",
        "timestamp": 1621364920
    }
]