[
    {
        "content": "<p>There are two fairly similar pieces of syntax sugar that I've seen for pattern matching in a <code>def</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n\n  <span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>     <span class=\"bp\">■</span> <span class=\"n\">true</span>\n  <span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">37</span>     <span class=\"bp\">■</span> <span class=\"n\">false</span>\n  <span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"mi\">0</span>     <span class=\"bp\">■</span> <span class=\"n\">true</span>\n  <span class=\"k\">#eval</span> <span class=\"n\">bar</span> <span class=\"mi\">37</span>     <span class=\"bp\">■</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>The former is documented on the <a href=\"https://leanprover.github.io/lean4/doc/tour.html#functions-and-namespaces\">Tour of Lean page</a> and the latter on the <a href=\"https://leanprover.github.io/lean4/doc/enum.html\">Enumerated Types page</a> of the tutorial</p>\n<p>Is there a reason to prefer one or the other? Is the first syntax abusing anonymous function syntax? Or is the fact that you use <code>:= fun</code> to start it just a syntactic overload of <code>fun</code>?</p>",
        "id": 228442510,
        "sender_full_name": "Julian Berman",
        "timestamp": 1614703585
    },
    {
        "content": "<p>Lean 3 already supported <code>fun &lt;x, y&gt;, ...</code>for destructuring a variable while introducing it, and <code>rintro</code> has also been quite popular for this use. Haskell has lambda-case <code>\\case</code> for doing pattern matching right out of a lambda, and this is lean 4's take on the syntax</p>",
        "id": 228442969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614703748
    },
    {
        "content": "<p>The def-match syntax is a shorthand for it which is reasonable both because it resembles the lean 3 syntax and also because it's slightly easier to read than lambda-match</p>",
        "id": 228443226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614703843
    },
    {
        "content": "<p>I'm pretty sure that def-match is literally a macro for lambda-match</p>",
        "id": 228443347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614703894
    },
    {
        "content": "<p>A ha thanks! OK so, \"equivalent\", and the latter expands to the former if I followed that</p>",
        "id": 228443701,
        "sender_full_name": "Julian Berman",
        "timestamp": 1614704026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/match.20syntax.20sugar/near/228443701\">said</a>:</p>\n<blockquote>\n<p>A ha thanks! OK so, \"equivalent\", and the latter expands to the former if I followed that</p>\n</blockquote>\n<p>You can't use the latter in all cases where you can use the former if that isn't clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"c1\">-- errors</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 228444278,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1614704249
    },
    {
        "content": "<p>Thanks! Yes that does clarify things a bit more, ok so the lambda-case thing is an expression you can put in more places (and the def-match thing is special to def's body)</p>",
        "id": 228444916,
        "sender_full_name": "Julian Berman",
        "timestamp": 1614704451
    },
    {
        "content": "<p>This is really cool because occasionally you do find yourself wanting to use the equation compiler in the middle of something else and I don't think it was possible in Lean 3</p>",
        "id": 228457078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708405
    },
    {
        "content": "<p>Didn't the match expression give you that in lean 3?</p>",
        "id": 228473470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614714533
    },
    {
        "content": "<p>Is the equation compiler more powerful than match or are they the same thing?</p>",
        "id": 228481299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614717475
    },
    {
        "content": "<p>They are the same thing</p>",
        "id": 228507333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614728405
    },
    {
        "content": "<p>although lean 4 finally gives proper syntax to recursive match as an expression using <code>let rec</code></p>",
        "id": 228507426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614728457
    },
    {
        "content": "<p>The Lean 3 equation compiler handles dependent pattern matching <em>and</em> termination. So, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is right when he says it is more powerful.<br>\nThe (Lean 4) <code>let rec</code> is not just syntax. It was a significant amount of work to implement it. It can be used in non-meta code and proofs (tactic-mode included).</p>",
        "id": 228636691,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614794189
    },
    {
        "content": "<p>You might not be aware <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> but lean 3 \"accidentally\" supports recursive match as well, if you reference the auxiliary <code>_match</code>constant  from tactic mode inside a <code>match</code> branch. AFAICT this construct is exactly as powerful as the standard top level equation compiler. That's what I mean by \"lean 4 gives proper syntax for recursive match\", because it's now actually an intended feature instead of an accident of implementation</p>",
        "id": 228708295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614826919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Who is converting the recursive application into a <code>rec</code>/<code>brec_on</code>?</p>",
        "id": 228708536,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614827092
    },
    {
        "content": "<p>I think it is just the usual equation compiler framework</p>",
        "id": 228708563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614827116
    },
    {
        "content": "<p>I just checked and of course someone has already used this hack in mathlib:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.lex.is_asymm/src\">src#list.lex.is_asymm</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.lex.is_order_connected/src\">src#list.lex.is_order_connected</a></p>",
        "id": 228708654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614827171
    },
    {
        "content": "<p>In lean 3 every time you use <code>match</code> it creates an auxiliary definition, and I guess the name of that definition is <code>something._match</code>, and the branches are processed with the equation compiler. So <code>_match</code> shows up as a constant inside the context, and if you refer to it you actually get a recursive function</p>",
        "id": 228708808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614827333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This is a huge hack. I doubt it works consistently since the code was not designed to do it.</p>",
        "id": 228709298,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1614827688
    },
    {
        "content": "<p>We're in 100% agreement about that</p>",
        "id": 228709309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614827702
    },
    {
        "content": "<p>But it is a weird behavior that is occasionally useful so it's not too surprising that people eventually decide they want to use it deliberately</p>",
        "id": 228709371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614827753
    },
    {
        "content": "<p>luckily those two instances are the only examples in mathlib so I'll just remove them</p>",
        "id": 228709446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614827789
    }
]