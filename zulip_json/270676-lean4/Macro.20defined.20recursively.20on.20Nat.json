[
    {
        "content": "<p>I'm trying to make a macro that will expand <code>[nary 3 | Nat]</code> to <code>Nat -&gt; Nat -&gt; Nat -&gt; Nat</code> (with the obvious generalization of <code>3</code> and <code>Nat</code>).<br>\nSo far I have something silly like the following, which doesn't work (as indicated) when using numerals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[nary \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">nary</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">nary</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">nary</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">])</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">nary</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"c1\">-- Nat</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">nary</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"c1\">-- Nat → Nat</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">nary</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"c1\">-- Fails: \"elaboration function for ... has not been implemented\"</span>\n</code></pre></div>\n<p>Is there a way to accomplish this with macros, or do I need to do something more complicated? What am I missing?</p>",
        "id": 290704263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658703278
    },
    {
        "content": "<p>The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"[nary \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">nary</span> <span class=\"bp\">$</span><span class=\"n\">nat</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">loop</span> <span class=\"n\">nat.getNat</span>\n</code></pre></div>",
        "id": 290705016,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1658704387
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 290705151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658704563
    },
    {
        "content": "<p>Ah but if you want terms in general that evaluate into Nats, then the <code>MacroM</code> monad probably isn't strong enough -- you would need like <code>TermElabM</code> that can reduce and compute expressions for you</p>",
        "id": 290705161,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1658704582
    },
    {
        "content": "<p>No, this is actually perfectly fine for what I was trying to do.</p>",
        "id": 290705177,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658704637
    }
]