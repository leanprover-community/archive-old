[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Multiparameter.20typeclasses.20mimicking.20textbook.20definitions/near/289603730\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> <a href=\"#narrow/stream/270676-lean4/topic/Multiparameter.20typeclasses.20mimicking.20textbook.20definitions/near/289602184\">said</a>:</p>\n<blockquote>\n<p>I have one final question: does this model make sense at all? Would you design a system with the requirements I have (i.e. swappable monad, simulated real world) in a similar way, or there's something I'm missing?</p>\n</blockquote>\n<p>It's not clear why you want to attach your time type/class to these methods as opposed to just writing a notion of time and then composing it with the other stuff (like IO to get system time).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris Bailey</span> thanks for your comments and sharing <a href=\"https://github.com/ammkrn/timelib/blob/main/Timelib/NanoPrecision/ClockTime/ClockTime.lean\">https://github.com/ammkrn/timelib/blob/main/Timelib/NanoPrecision/ClockTime/ClockTime.lean</a></p>\n<p>I didn't aim to port Haskell's calendar ecosystem (even though I admire it greatly), but rather to say \"for the purposes of measuring timeouts, all we need to do is to be able to create timestamps, perhaps, based on simulation, and subtract those\".</p>\n<p>Now the underlying types can be <code>NaiveClockTime</code> or a <code>Nat</code>, and the outer monad can also be anything. As long as the implementations that want <code>Time</code> don't rely on concrete underlying types, we're good.</p>",
        "id": 289606414,
        "sender_full_name": "cognivore",
        "timestamp": 1657812043
    },
    {
        "content": "<p>So, unless I misunderstand something, our work is largely complementary.</p>",
        "id": 289606519,
        "sender_full_name": "cognivore",
        "timestamp": 1657812103
    },
    {
        "content": "<p>I kind of do the same with logical clocks: rather than implementing some fancy clock, I figure out what would an implementation of the most modern logical clock would take, add relevant tools into the typeclass, and then design a library around the notion of a logical clock rather than a particular logical clock. Admittedly, if I mess up an abstraction, I mess up the whole library UX, that's why I try to provide simple instances to demonstrate usefulness.</p>",
        "id": 289606803,
        "sender_full_name": "cognivore",
        "timestamp": 1657812225
    },
    {
        "content": "<p>Don't use <code>NaiveClockTime</code>, the <code>ClockTime</code> module is like a literal clock that wraps every 24 hours.  I'm a little bit confused; you started the other thread with \"Consider the notion of wall clock (as opposed to a logical one).\" but  it sounds like you're describing a logical clock after all, in which case the other interface makes a little bit more sense </p>\n<p>My two cents is that you're probably better off providing a concrete implementation than a general interface. There are a lot of sharp edges around logical clock stuff and monotonic timestamps (see the doc comments in rust's <code>std::time</code> module). I think downstream users are generally more concerned with getting something that handles all of the edge cases properly as opposed to plugging in their own types and having to worry about that stuff themselves.</p>",
        "id": 289610485,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1657813976
    },
    {
        "content": "<p>Oh my, I meant \"system time\" rather than \"wall time\"!</p>",
        "id": 289610693,
        "sender_full_name": "cognivore",
        "timestamp": 1657814069
    },
    {
        "content": "<p>I'm sorry for causing confusion.</p>",
        "id": 289610718,
        "sender_full_name": "cognivore",
        "timestamp": 1657814082
    },
    {
        "content": "<p>It's a good observation, to be honest, that system time is a logical clock rather than a real one.</p>",
        "id": 289610788,
        "sender_full_name": "cognivore",
        "timestamp": 1657814115
    },
    {
        "content": "<p>Sorry for confusion, I'll make sure that my terminology is correct.</p>",
        "id": 289611056,
        "sender_full_name": "cognivore",
        "timestamp": 1657814250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> has marked this topic as resolved.</p>",
        "id": 289611066,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657814253
    }
]