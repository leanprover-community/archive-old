[
    {
        "content": "<p>I have a macro that I'm using to define some thing (a structure) and also remember its name in the structure, something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Thing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">thething</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"defthing\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">thing</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Thing.mk</span> <span class=\"bp\">$</span><span class=\"n\">thing</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">name.getId.toString</span><span class=\"o\">))</span>\n\n<span class=\"n\">defthing</span> <span class=\"n\">mything</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"n\">defthing</span> <span class=\"n\">myotherthing</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mything.name</span> <span class=\"c1\">-- \"mything\"</span>\n</code></pre></div>\n<p>I would also like to aggregate all the structures I define this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">allthings</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">mything</span><span class=\"o\">,</span> <span class=\"n\">myotherthing</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a nice way to do this with that macro too?</p>",
        "id": 301032957,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1664291556
    },
    {
        "content": "<p>Once a constant is defined, the definition cannot be changed. So there is no way to have <code>allthings</code> to be defined as <code>[]</code> first, then as <code>[mything]</code>, and later as <code>[mything, myotherthing]</code>.</p>",
        "id": 301052288,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1664295192
    },
    {
        "content": "<p>You could define a custom attribute <code>thing</code> and then mark all your definitions with it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"defthing\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">thing</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">@[thing]</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Thing.mk</span> <span class=\"bp\">$</span><span class=\"n\">thing</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">name.getId.toString</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Then, using meta-programming, you can identify and collect all definitions marked <code>@[thing]</code>. Macros alone won't be able to do this.</p>",
        "id": 301053003,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1664295384
    },
    {
        "content": "<p>that sounds like a good solution, thanks!</p>",
        "id": 301055862,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1664296149
    },
    {
        "content": "<p>You can see how this is done in mathport: There is a <a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Basic.lean#L90-L108\">declaration of the <code>@[trTactic]</code> attribute</a>, which creates an environment extension and adds all marked theorems to the extension. Then there is a <a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Basic.lean#L110-L114\"><code>trTactics!</code></a> macro which expands to a list literal containing all tactics that have been marked so far. Then we <a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Lean3.lean#L111-L112\">mark lots of declarations with the attribute</a>, and then <a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic.lean#L61\">call the macro after importing all the tagged declarations</a> to get a big list.</p>",
        "id": 301067121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664299379
    }
]