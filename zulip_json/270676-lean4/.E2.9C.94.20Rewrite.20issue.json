[
    {
        "content": "<blockquote>\n<p>In this case the constraint is ?x + 0 =?= n + 0, right? </p>\n</blockquote>\n<p>Unfortunately, it is not.</p>\n<ul>\n<li>The rewrite tactic traverses the target looking for a term <code>e</code> s.t. the constraint <code>?x + 0 =?= e</code> can be solved. </li>\n<li>The <code>Offset.lean</code> module can solve for any <code>e : Nat</code> using the solution <code>?x := e</code>. </li>\n<li>In the example above, the first nat term found by the rewrite tactic is <code>n+1</code>.</li>\n</ul>\n<p>The tactic is applying the useless rewrite <code>(n+1)+0 = n+1</code>.</p>",
        "id": 253000845,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631468359
    },
    {
        "content": "<p>I see, the situation is more dire than I imagined, and there probably aren't any easy fixes. We definitely need a way to do these rewrites though - NNG wrote a variant on <code>rw</code> just so that this <code>a + 0 = a</code> defeq is hidden from users. How about a variant on <code>rw</code> or a config option to set the reducibility setting to none?</p>",
        "id": 253001230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631468823
    },
    {
        "content": "<p>Ah! That makes a lot more sense now that I know what rewrite actually succeeded.</p>",
        "id": 253001245,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1631468846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The Lean 4 NNG might want to use conv mode?</p>",
        "id": 253001535,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1631469192
    },
    {
        "content": "<p>you have the same issues in conv mode, unless you narrow in on the exact term first</p>",
        "id": 253001548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631469221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> has marked this topic as resolved.</p>",
        "id": 253001551,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631469223
    },
    {
        "content": "<p>but also, lean 3 has conv mode and NNG doesn't use it, so it's not clear to me whether this assertion is true</p>",
        "id": 253001601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631469255
    },
    {
        "content": "<p>the preferred style seems to be lots of <code>rw lem,</code> (for some definition of <code>rw</code>) with the occasional <code>induction</code></p>",
        "id": 253001628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631469313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Rewrite.20issue/near/253001230\">said</a>:</p>\n<blockquote>\n<p>I see, the situation is more dire than I imagined, and there probably aren't any easy fixes. We definitely need a way to do these rewrites though - NNG wrote a variant on <code>rw</code> just so that this <code>a + 0 = a</code> defeq is hidden from users. How about a variant on <code>rw</code> or a config option to set the reducibility setting to none?</p>\n</blockquote>\n<p>Yes, we can add a configuration option to <code>rw</code>.</p>",
        "id": 253022992,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631493388
    },
    {
        "content": "<p>We can now disable the offset constraints by setting the new <code>Rewrite.Config</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"rw0\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">offsetCnstrs</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw0</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- m n : Nat ⊢ Nat.ble (n + 1) n = false</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>The <code>erw</code> tactic is now just a macro</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"erw \"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">transparency</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Meta.TransparencyMode.default</span> <span class=\"o\">})</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">loc.getOptional</span><span class=\"bp\">?</span><span class=\"o\">):</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253030029,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631500968
    }
]