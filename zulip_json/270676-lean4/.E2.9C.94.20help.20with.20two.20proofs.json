[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20two.20proofs/near/266736957\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20two.20proofs/near/266736594\">said</a>:</p>\n<blockquote>\n<p>In cases like this, I would always suggest to describe how your function operates on the different inductive constructors. That's part of building the API</p>\n</blockquote>\n<p>Do you know an example of that?</p>\n</blockquote>\n<p>the append API itself, the append function is defined on <code>[]</code> and <code>x :: xs</code> (lhs) and provides <code>nil_append</code> as well as <code>cons_append</code> via <code>rfl</code> proofs which is where basically all other lemmas are derived from, quite often using <code>induction</code>.</p>",
        "id": 266737207,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641244313
    },
    {
        "content": "<p>Init/Data/List/Basic.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>    <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">List.append</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Append</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">List.append</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">nil_append</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">append_nil</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">HAppend.hAppend</span><span class=\"o\">,</span> <span class=\"n\">Append.append</span><span class=\"o\">,</span> <span class=\"n\">List.append</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">cons_append</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">::(</span><span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">append_assoc</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">cs</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"bp\">++</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 266737315,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641244360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20two.20proofs/near/266736957\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20two.20proofs/near/266736594\">said</a>:</p>\n<blockquote>\n<p>In cases like this, I would always suggest to describe how your function operates on the different inductive constructors. That's part of building the API</p>\n</blockquote>\n<p>Do you know an example of that?</p>\n</blockquote>\n<p>So I would expect to see <code>delta_nil</code> and <code>delta_cons</code> before a <code>delta_append</code>.</p>",
        "id": 266737535,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641244507
    },
    {
        "content": "<p>They would basically replace the <code>simp only [delta]</code> I used.</p>",
        "id": 266737567,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641244534
    },
    {
        "content": "<p>Right. There should also be a <code>append_cons_assoc</code> or something akin to that</p>",
        "id": 266737932,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641244780
    },
    {
        "content": "<p>I am going to chew what you guys said. This is all new info for me :D<br>\nThanks again!</p>",
        "id": 266738213,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641244971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 266738281,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641245023
    }
]