[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466744\">Pi Lanningham</span> has marked this topic as resolved.</p>",
        "id": 266305115,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640738640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466744\">@Pi Lanningham</span> I forgot to mention this other alternative using inheritance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Hash</span> <span class=\"kd\">extends</span> <span class=\"n\">ByteArray</span> <span class=\"n\">where</span>\n  <span class=\"n\">properLength</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">byteArray2</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Hash</span> <span class=\"o\">:=</span> <span class=\"n\">Hash.mk</span> <span class=\"n\">byteArray2</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 266306251,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640739941
    },
    {
        "content": "<p>Found this (old) thread and wanted to make it crystal clear: will the runtime representation of Hash be  exactly like ByteArray, i.e. no extra structure around ByteArray for both cases?</p>",
        "id": 290018522,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658176008
    },
    {
        "content": "<p>Yes, see <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c\">https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c</a></p>",
        "id": 290018824,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658176180
    },
    {
        "content": "<p>I see an explicit mention to inductive types with a 'trivial structure' (one constructor, not unsafe, etc), but nothing about structures explicitly.</p>\n<p>Is that so because a structure is elaborated into an inductive with a single constructor?</p>",
        "id": 290019625,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658176570
    },
    {
        "content": "<p>Yes, exactly. This translation is not considered something purely internal, as e.g. the anonymous constructor is documented likewise about single-constructor inductive types.</p>",
        "id": 290020443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658177018
    }
]