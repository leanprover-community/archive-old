[
    {
        "content": "<p>Does there exist a mechanism or best practice to deal with variable width C types. Variable width in this context referring  to time_t or other C types whose size is unknown for every platform but will be known during compilation time.</p>",
        "id": 258252199,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1634669584
    },
    {
        "content": "<p>In what sense is the size unknown then?</p>",
        "id": 258299012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693273
    },
    {
        "content": "<p>Are you saying that the size is target dependent but otherwise fixed?</p>",
        "id": 258299068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634693302
    },
    {
        "content": "<p>Exactly, in general the types in the sys/types.h header behave like this so C code can be written in a cross platform way without relying on any fixed size in the code itself. I could of course just pick the size that is most commonly aliased for these types but I figured this would lead to problems sooner or later.</p>",
        "id": 258316665,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1634709682
    },
    {
        "content": "<p>You can use something like <code>sizeof(time_t)</code></p>\n<p>For example, <a href=\"https://github.com/leanprover/lean4/blob/68469c2487593c62e230d98432001bcf53f1f687/src/include/lean/lean.h#L1726-L1730\">these lines</a> shows how Lean box <code>size_t</code> (USize) type, which is also a variable width type.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_box_usize</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set_usize</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The only difference is that you have to manually box and unbox these types.</p>",
        "id": 258323809,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1634714724
    },
    {
        "content": "<blockquote>\n<p>Does there exist a mechanism or best practice to deal with variable width C types. Variable width in this context referring to time_t or other C types whose size is unknown for every platform but will be known during compilation time.</p>\n</blockquote>\n<p>The short answer is no.  Everything in Lean is boxed unless it fits into a 63-bit integer.  For <code>time_t</code>, you could also use <code>def TimeT := Nat</code> with overflow/bound checking happening at the interface.</p>\n<p>For other structures, you should wrap them in a heap-allocated external object using <code>lean_register_external_class</code>, <code>lean_alloc_external</code>, etc.</p>",
        "id": 258324920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634715406
    },
    {
        "content": "<p><code>UInt*/USize</code> are passed unboxed as long as they are not nested in other (non-trivial) types, so the current maximum is 64 bits or whatever your CPU word size is</p>",
        "id": 258325835,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634715947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> <a href=\"#narrow/stream/270676-lean4/topic/Variable.20width.20C.20types/near/258323809\">said</a>:</p>\n<blockquote>\n<p>You can use something like <code>sizeof(time_t)</code></p>\n<p>For example, <a href=\"https://github.com/leanprover/lean4/blob/68469c2487593c62e230d98432001bcf53f1f687/src/include/lean/lean.h#L1726-L1730\">these lines</a> shows how Lean box <code>size_t</code> (USize) type, which is also a variable width type.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">lean_box_usize</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set_usize</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The only difference is that you have to manually box and unbox these types.</p>\n</blockquote>\n<p>I'm aware how to do this in C, my question was more like how I could represent such a type on the lean side.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Variable.20width.20C.20types/near/258324920\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does there exist a mechanism or best practice to deal with variable width C types. Variable width in this context referring to time_t or other C types whose size is unknown for every platform but will be known during compilation time.</p>\n</blockquote>\n<p>The short answer is no.  Everything in Lean is boxed unless it fits into a 63-bit integer.  For <code>time_t</code>, you could also use <code>def TimeT := Nat</code> with overflow/bound checking happening at the interface.</p>\n<p>For other structures, you should wrap them in a heap-allocated external object using <code>lean_register_external_class</code>, <code>lean_alloc_external</code>, etc.</p>\n</blockquote>\n<p>So basically you are proposing that if i want to for example interface with <code>clock_gettime</code>and return the <code>timespec</code> struct it fills for me into Lean (its defined like this in C:)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">struct</span> <span class=\"n\">timespec</span> <span class=\"o\">{</span>\n    <span class=\"n\">time_t</span>  <span class=\"n\">tv_sec</span><span class=\"bp\">;</span>  <span class=\"bp\">/*</span> <span class=\"n\">Seconds</span> <span class=\"bp\">*/</span>\n    <span class=\"n\">long</span>    <span class=\"n\">tv_nsec</span><span class=\"bp\">;</span> <span class=\"bp\">/*</span> <span class=\"n\">Nanoseconds</span> <span class=\"bp\">*/</span>\n<span class=\"o\">}</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>I should represent this like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TimeT</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Timespec</span> <span class=\"n\">where</span>\n    <span class=\"n\">sec</span> <span class=\"o\">:</span> <span class=\"n\">TimeT</span>\n    <span class=\"n\">nsec</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n</code></pre></div>\n<p>?</p>",
        "id": 258325971,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1634716017
    },
    {
        "content": "<p>Either that, or make an external type for timespec.</p>",
        "id": 258326016,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634716054
    },
    {
        "content": "<p>See also <code>IO.FS.SystemTime</code> (which maybe shouldn't be in <code>FS</code>...)</p>",
        "id": 258326351,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634716248
    },
    {
        "content": "<p>Yeah I'm partially makng use of IO.FS.SystemTime as well (im more or less building a Haskell <code>time</code> clone)</p>",
        "id": 258345875,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1634726395
    },
    {
        "content": "<p>I've settled on a mix of USize and the Nat suggestion for now and so far its working nicely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_statvfs_fsblkcnt_nbits\"]</span> <span class=\"kd\">constant</span> <span class=\"n\">Fsblkcnt.getNumBits</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">32</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">64</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- inhabitant</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fsblkcnt.numBits</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">getNumBits</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Fsblkcnt.numBits_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">numBits</span> <span class=\"bp\">=</span> <span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">numBits</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">getNumBits</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fsblkcnt.size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">numBits</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Fsblkcnt</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">Fsblkcnt.size</span>\n</code></pre></div>",
        "id": 258578115,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1634834359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  If the value in question can be 64 bits, you really should not be using <code>Nat</code> as it will be unnecessarily boxed . Why not just always use <code>UInt64</code> -- casting to/from that is much cheaper? Or if the size just depends on the system word width, <code>USize</code>?</p>",
        "id": 258610009,
        "sender_full_name": "Mac",
        "timestamp": 1634847279
    },
    {
        "content": "<p>So instead just cast all my values of variable width into UInt64 (or the maximum size i suspect they can have)?</p>",
        "id": 258611375,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1634847835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> yes, that is a much more lightweight solution (along with using <code>USize</code> where feasible)</p>",
        "id": 258616958,
        "sender_full_name": "Mac",
        "timestamp": 1634850168
    }
]