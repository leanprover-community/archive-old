[
    {
        "content": "<p>Trying to port Rust trait code using class inductive leads to this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Circuit</span> <span class=\"o\">(</span><span class=\"n\">Scalar</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">CS</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ConstraintSystem</span> <span class=\"n\">CS</span> <span class=\"n\">Scalar</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Synthesize the circuit into a rank-1 quadratic constraint system.</span>\n<span class=\"bp\">|</span> <span class=\"n\">circuit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">synthesize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Circuit</span> <span class=\"n\">Scalar</span> <span class=\"n\">CS</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">cs</span><span class=\"o\">:</span> <span class=\"n\">CS</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Result</span> <span class=\"n\">CS</span> <span class=\"n\">SynthesisError</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Circuit</span>\n<span class=\"n\">Scalar</span> <span class=\"n\">CS</span>\n</code></pre></div>\n<p>Which produces this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">4</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">zkSNARK.ConstraintSystem.Circuit.circuit'</span> <span class=\"n\">has</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">positive</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>Why does this happen?</p>",
        "id": 264471618,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1639153682
    },
    {
        "content": "<p>Inductives in Lean must be strictly positive. This means that in an inductive <code>I</code> with constructor <code>C : T1 -&gt; T2 -&gt; ... -&gt; I</code>,  <code>I</code> may not occur to the left of an arrow in any of the <code>Ti</code>. In your case, the occurrence of <code>Circuit</code> in the type of the constructor argument <code>synthesize</code> is to blame.</p>\n<p>The strict positivity restriction is required for consistency. You can disable it with <code>unsafe</code>; if you don't want to do that, you'll have to change your data representation.</p>",
        "id": 264472906,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1639154274
    },
    {
        "content": "<p>I found this helpful as well: <a href=\"#narrow/stream/113488-general/topic/non-positive.20occurrence.20of.20datatype.20being.20declared.3F/near/221433415\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/non-positive.20occurrence.20of.20datatype.20being.20declared.3F/near/221433415</a></p>",
        "id": 264477169,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1639156158
    }
]