[
    {
        "content": "<p>I ended up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">IO</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">includeStr</span><span class=\"o\">)</span> <span class=\"s2\">\"includeStr!\"</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[termElab includeStr]</span> <span class=\"kd\">def</span> <span class=\"n\">includeStrImpl</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isStrLit</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">FilePath.mk</span> <span class=\"n\">str</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.pathExists</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">path.isDir</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{str} is a directory\"</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">content</span> <span class=\"bp\">←</span> <span class=\"n\">FS.readFile</span> <span class=\"n\">path</span>\n        <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"n\">content</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">{str}</span><span class=\"se\">\\\"</span><span class=\"s2\"> does not exist as a file\"</span>\n</code></pre></div>",
        "id": 264562597,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639228940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 264562599,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639228942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> fyi, the style for macro keywords in Lean is lower snake case with no bang at the end. Bangs are used to signify functions that may panic (e.g., <code>Array.get!</code>). Macro keywords may also end in an <code>%</code> to distinguish them from identifiers.</p>",
        "id": 264571090,
        "sender_full_name": "Mac",
        "timestamp": 1639240211
    },
    {
        "content": "<p>% it is!</p>",
        "id": 264571114,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639240255
    },
    {
        "content": "<p><code>%</code> is intended for internal macros (e.g. something only to be used in other macros) only</p>",
        "id": 264571187,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639240352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is there a particular reason it is not used more generally? It seems like a nice way to avoid eating identifiers. There a places where it looks bad (e.g., in commands), but I think it looks quite good for term-level macros  like Henrik's example.</p>",
        "id": 264571373,
        "sender_full_name": "Mac",
        "timestamp": 1639240605
    },
    {
        "content": "<p>What should the style guide be then? Using it only sometimes sounds really bad for consistency.</p>",
        "id": 264571499,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639240770
    },
    {
        "content": "<p>Another option for internal macros would be to scope them to the Lean namespace.</p>",
        "id": 264571709,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639240990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> my suggestion for term-level style guide would be: \"End term-level keywords that do computation with <code>%</code>.\"</p>",
        "id": 264571725,
        "sender_full_name": "Mac",
        "timestamp": 1639241020
    },
    {
        "content": "<p>Examples would be elaborators like <code>include_str%</code> or a macro that did syntax-level computations. For example, a macro <code>calc%</code> that expands <code>calc% 12 + 8 * 2</code> to <code>28</code>.</p>",
        "id": 264571891,
        "sender_full_name": "Mac",
        "timestamp": 1639241170
    },
    {
        "content": "<p>In essence, end term-level keywords that are pseudo-functions (i.e., syntax level functions) in <code>%</code>.</p>",
        "id": 264571942,
        "sender_full_name": "Mac",
        "timestamp": 1639241262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20include_str!.20or.20similar/near/264571709\">said</a>:</p>\n<blockquote>\n<p>Another option for internal macros would be to scope them to the Lean namespace.</p>\n</blockquote>\n<p>Unfortunately, keyword registration is global currently. But that's still a good idea for user macros; it won't work for built-in ones.</p>",
        "id": 264572488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639241939
    }
]