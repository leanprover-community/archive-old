[
    {
        "content": "<p>I have this function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">mapNth</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">αs.length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">αs.get'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">αs.replaceAt</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)::</span><span class=\"n\">as</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">::(</span><span class=\"n\">as.mapNth</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and i tried doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"s2\">\"cool\"</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo.mapNth</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">·*-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but i get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expression</span>\n  <span class=\"n\">mapNth</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">foo</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">List.replaceAt</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.get'</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Lean.MetaEval</span> <span class=\"o\">(</span><span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">List.replaceAt</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">List.get'</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">synthesized</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"kd\">instance</span> <span class=\"n\">instructs</span> <span class=\"n\">Lean</span> <span class=\"n\">on</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">any</span> <span class=\"n\">type</span> <span class=\"n\">implementing</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Repr</span><span class=\"bp\">`</span> <span class=\"kd\">class</span> <span class=\"n\">also</span> <span class=\"n\">implements</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">Lean.MetaEval</span><span class=\"bp\">`</span> <span class=\"kd\">class</span>\n</code></pre></div>\n<p>What i dont understand is that <code>mapNth</code> is marked <code>@[reducible]</code>, so it should work. This was a solution, but I dont really like it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"n\">HList</span> <span class=\"o\">[</span><span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">foo.mapNth</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">·*-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>i could just make a wrapper function to utilize this, but is there a reason its not working?</p>",
        "id": 275980141,
        "sender_full_name": "Joseph O",
        "timestamp": 1647799786
    },
    {
        "content": "<p>Also, im using version <code>leanprover/lean4:nightly-2022-03-13</code></p>",
        "id": 275980472,
        "sender_full_name": "Joseph O",
        "timestamp": 1647800243
    },
    {
        "content": "<p>You need an implementation of <code>MetaEval</code>, which usually means that you need a way to print the resulting object</p>",
        "id": 275983833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647804818
    },
    {
        "content": "<p>this is not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so it's hard to say more</p>",
        "id": 275983836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647804841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/fails.20to.20reduce.3F/near/275983833\">said</a>:</p>\n<blockquote>\n<p>You need an implementation of <code>MetaEval</code>, which usually means that you need a way to print the resulting object</p>\n</blockquote>\n<p>i already have a repr instance, why do i need metaeval?</p>",
        "id": 275988878,
        "sender_full_name": "Joseph O",
        "timestamp": 1647811849
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HListRepr</span> <span class=\"o\">(</span><span class=\"n\">HList</span> <span class=\"n\">αs</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">HListRepr</span> <span class=\"o\">(</span><span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">αs</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">repr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">HList.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">HList.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">HList.cons</span> <span class=\"n\">x'</span> <span class=\"n\">xs'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reprPrec</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">HListRepr.repr</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 275988885,
        "sender_full_name": "Joseph O",
        "timestamp": 1647811868
    },
    {
        "content": "<blockquote>\n<p>What i dont understand is that mapNth is marked @[reducible], so it should work. This was a solution, but I dont really like it:</p>\n</blockquote>\n<p>Note that the type is <code> HList (List.replaceAt [Int, String, ℕ] 0 (List.get' [Int, String, ℕ] 0))</code>. So, marking <code>mapNth</code> as reducible will not help. <br>\nAs I mentioned before, typeclass resolution only unfolds definitions marked as reducible. It also uses an index for retrieving relevant instances, and this index unfolds only reducible definitions during retrieval. It is not feasible to change that because everything would become much more expensive.</p>",
        "id": 275991026,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647815093
    },
    {
        "content": "<p>Since <code>#eval</code> is only used for testing, I pushed another modification that should improve the behavior of the system in this kind of example. Given <code>#eval t</code>, Lean infers the type <code>A</code> of the term <code>t</code>. If it fails to find the instance, it normalizes <code>A</code> and tries again.<br>\nThis change should be available in tomorrow's nightly build.</p>",
        "id": 275991155,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647815288
    },
    {
        "content": "<p>In your example, it will first fail to find an instance for <code>HList (List.replaceAt [Int, String, ℕ] 0 (List.get' [Int, String, ℕ] 0))</code>. Then, it will normalize and obtain <code>HList [Int, String, ℕ]</code>, and when it tries to synthesize again, it will find the solution.</p>",
        "id": 275991187,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1647815392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/fails.20to.20reduce.3F/near/275991155\">said</a>:</p>\n<blockquote>\n<p>Since <code>#eval</code> is only used for testing, I pushed another modification that should improve the behavior of the system in this kind of example. Given <code>#eval t</code>, Lean infers the type <code>A</code> of the term <code>t</code>. If it fails to find the instance, it normalizes <code>A</code> and tries again.<br>\nThis change should be available in tomorrow's nightly build.</p>\n</blockquote>\n<p>Only problem is newer releases break mathlib</p>",
        "id": 276046110,
        "sender_full_name": "Joseph O",
        "timestamp": 1647867547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> has <a href=\"https://github.com/leanprover-community/mathlib4/pull/241\">this PR</a> open to update to nightly 03-20. What if we fast-forward it to 03-21 instead?</p>",
        "id": 276047906,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647868296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> in the meantime, if you want to keep moving forward in your studies, you can make a fork of Mathlib4 and update the toolchain in a branch of yours. Then add your fork of Mathlib4 (using your branch) as a dependency</p>",
        "id": 276048800,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647868712
    },
    {
        "content": "<p>Hi yes please <del>edit away</del> (I am editing now)</p>",
        "id": 276056651,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647872211
    },
    {
        "content": "<p>Sorry I didn't quite understand the protocol for the nightly fixes to mathlib4</p>",
        "id": 276056726,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647872239
    },
    {
        "content": "<p>I guess the preference with those is to merge asap</p>",
        "id": 276056757,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647872255
    },
    {
        "content": "<p>how can i tell my mathlib4 dependency to update?</p>",
        "id": 276058702,
        "sender_full_name": "Joseph O",
        "timestamp": 1647873109
    },
    {
        "content": "<p>I'm not sure <code>lake</code> supports something like this yet but you can try closing VS Code, deleting the <code>lean_packages</code> directory and opening VS Code again</p>",
        "id": 276060928,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647874022
    },
    {
        "content": "<p>Updating the hash in lakefile.lean and invoking Refresh File Dependencies in VS Code should be sufficient</p>",
        "id": 276061635,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647874266
    },
    {
        "content": "<p>What do you mean by <code>updating the hash</code></p>",
        "id": 276063113,
        "sender_full_name": "Joseph O",
        "timestamp": 1647874769
    },
    {
        "content": "<p>In your <code>lakefile.lean</code> you have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"bp\">&lt;</span><span class=\"n\">REV</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>The hash Sebastian is talking about is what you put in <code>&lt;REV&gt;</code>. You can add a specific commit hash there</p>",
        "id": 276064857,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647875326
    },
    {
        "content": "<p>nightly 03-21 is breaking Mathlib4 in many places though. So it won't be too trivial to make the update</p>",
        "id": 276066470,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647875892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/fails.20to.20reduce.3F/near/276064857\">said</a>:</p>\n<blockquote>\n<p>In your <code>lakefile.lean</code> you have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"bp\">&lt;</span><span class=\"n\">REV</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>The hash Sebastian is talking about is what you put in <code>&lt;REV&gt;</code>. You can add a specific commit hash there</p>\n</blockquote>\n<p>like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mathlib</span><span class=\"o\">,</span>\n      <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Source.git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"s2\">\"260cceb2bd29e5f2f67bd55335d3cb8a5397416f\"</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276076319,
        "sender_full_name": "Joseph O",
        "timestamp": 1647879482
    },
    {
        "content": "<p>Yeah, but that's the commit hash of Mathlib4 <code>master</code> branch (as of now), which is not updated with nightly 03-21 yet</p>",
        "id": 276076663,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647879604
    },
    {
        "content": "<p>Oh. Are you sure? <a href=\"/user_uploads/3121/FWE789RzW_gfzqclhch8c-a0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FWE789RzW_gfzqclhch8c-a0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FWE789RzW_gfzqclhch8c-a0/image.png\"></a></div>",
        "id": 276078216,
        "sender_full_name": "Joseph O",
        "timestamp": 1647880226
    },
    {
        "content": "<p>Yes. That bump was to nightly 03-20. I'm working on a new bump right now</p>",
        "id": 276078905,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647880477
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/244\">mathlib4#244</a></p>",
        "id": 276079783,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647880801
    },
    {
        "content": "<p>Many changes were made because we don't have <code>instance : OfNat String.Pos n := ⟨⟨n⟩⟩</code> in core though. <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> may I PR it?</p>",
        "id": 276081811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647881547
    },
    {
        "content": "<p>Judging by <a href=\"https://github.com/leanprover/lake/pull/60\">https://github.com/leanprover/lake/pull/60</a>, that might have been intentional</p>",
        "id": 276081990,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1647881637
    },
    {
        "content": "<p>Yes, let's not immediately break down the abstraction we just erected. At least not without thorough motivation.</p>",
        "id": 276082189,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647881706
    },
    {
        "content": "<p>Also many of the <code>⟨...⟩</code> fixes (incl. the proposed OfNat instance) are incorrect and will produce interesting results.  Quiz: what does the following evaluate to?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"ℝeal\"</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"ℝeal\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 276083505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647882233
    },
    {
        "content": "<p>Indeed, I'm going to undo my careless proposed changes regarding <code>String.Pos</code> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/244\">mathlib4#244</a></p>",
        "id": 276085520,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647883107
    }
]