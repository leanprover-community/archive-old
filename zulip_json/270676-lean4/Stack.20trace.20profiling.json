[
    {
        "content": "<p>Has anyone had success using <code>perf</code> to get a meaningful profile of a lean 4 application? I've been trying to run mathport in perf, but the stack trace seems to break down very often, with only one or two functions before hitting some <code>[unknown] ([unknown])</code>, and it's rare to see any functions at all defined in the <code>Mathport</code> package in the call stack.</p>\n<p>Steps:</p>\n<ul>\n<li>add <code>moreLeancArgs := #[\"-UNDEBUG\", \"-Og\", \"-ggdb\", \"-g3\", \"-fno-omit-frame-pointer\"]</code> to lakefile.lean</li>\n<li><code>sudo sh -c \"echo 0 &gt; /proc/sys/kernel/kptr_restrict\"</code></li>\n<li><code>sudo sh -c \"echo -1 &gt; /proc/sys/kernel/perf_event_paranoid\"</code></li>\n<li><code>perf record -g --call-graph fp -e cycles -F 999 -- cmd args...</code></li>\n<li><code>perf script -F +pid &gt; test.perf</code></li>\n<li>View in <a href=\"http://profiler.firefox.com\">profiler.firefox.com</a></li>\n</ul>\n<p>The perf file looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">249188</span><span class=\"o\">:</span>    <span class=\"mi\">4429237</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">1</span><span class=\"n\">b5f5c7</span> <span class=\"n\">lean_expr_loose_bvar_range</span><span class=\"bp\">+</span><span class=\"mi\">0x77</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n\n<span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">250253</span><span class=\"o\">:</span>    <span class=\"mi\">4413503</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">1</span><span class=\"n\">b61131</span> <span class=\"n\">l_Lean_mkLambda</span><span class=\"bp\">+</span><span class=\"mi\">0x111</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n\n<span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">251281</span><span class=\"o\">:</span>    <span class=\"mi\">4380424</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">19</span><span class=\"n\">d775d</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">hash</span><span class=\"bp\">+</span><span class=\"mi\">0xd</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n    <span class=\"n\">d000007fdb84006b</span> <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span> <span class=\"o\">([</span><span class=\"n\">unknown</span><span class=\"o\">])</span>\n\n<span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">252260</span><span class=\"o\">:</span>    <span class=\"mi\">4365599</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">1</span><span class=\"n\">b5ac94</span> <span class=\"n\">l_Lean_Expr_mkData</span><span class=\"bp\">+</span><span class=\"mi\">0x134</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n\n<span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">253293</span><span class=\"o\">:</span>    <span class=\"mi\">4377971</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">19</span><span class=\"n\">dc2fc</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">replace_rec_fn</span><span class=\"o\">::</span><span class=\"n\">apply</span><span class=\"bp\">+</span><span class=\"mi\">0xfc</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n\n<span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">254344</span><span class=\"o\">:</span>    <span class=\"mi\">4350249</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">19</span><span class=\"n\">d7d3e</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mk_lambda</span><span class=\"bp\">+</span><span class=\"mi\">0xe</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n\n<span class=\"n\">mathport</span> <span class=\"mi\">2429065</span><span class=\"bp\">/</span><span class=\"mi\">2429071</span> <span class=\"mi\">1263112</span><span class=\"bp\">.</span><span class=\"mi\">255319</span><span class=\"o\">:</span>    <span class=\"mi\">4324505</span> <span class=\"n\">cycles</span><span class=\"o\">:</span>\n             <span class=\"mi\">399</span><span class=\"n\">d527</span> <span class=\"n\">lean_apply_2</span><span class=\"bp\">+</span><span class=\"mi\">0xc7</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n             <span class=\"mi\">24</span><span class=\"n\">af839</span> <span class=\"n\">l_Lean_Meta_mkLambdaFVars</span><span class=\"bp\">+</span><span class=\"mi\">0x279</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"o\">)</span>\n                   <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">unknown</span><span class=\"o\">]</span> <span class=\"o\">([</span><span class=\"n\">unknown</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 271010783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644254163
    },
    {
        "content": "<p>I usually do <code>--call-graph dwarf,65528</code> which records more of the stack.</p>",
        "id": 271011521,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644254494
    },
    {
        "content": "<p><code>-fno-omit-fp</code> probably doesn't change much unless you also recompile Lean with it. But then you may as well download the Lean 4 \"Linux\" (<em>not</em> \"Linux release\") artifact, which is not linked using lld and thus should work with <code>perf --call-graph dwarf</code>: <a href=\"https://github.com/llvm/llvm-project/issues/53156\">https://github.com/llvm/llvm-project/issues/53156</a></p>",
        "id": 271011545,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644254508
    },
    {
        "content": "<p>perf works great for me. Here is an example:</p>\n<p>perf record --call-graph dwarf build/release/stage1/bin/lean TBA/While/ConstantPropagation.lean</p>\n<p>hotspot</p>",
        "id": 271011675,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644254558
    },
    {
        "content": "<p>do you have to build lean with something other than the default <code>-O3 -DNDEBUG</code>?</p>",
        "id": 271011798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644254602
    },
    {
        "content": "<p>No, if your default linker is not lld</p>",
        "id": 271011855,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644254625
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> what's my default linker?</p>",
        "id": 271011986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644254675
    },
    {
        "content": "<p>Most probably not lld :) . <code>ld -v</code>.</p>",
        "id": 271012049,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644254699
    },
    {
        "content": "<p><code>GNU ld (GNU Binutils for Ubuntu) 2.37</code></p>",
        "id": 271012088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644254720
    },
    {
        "content": "<p>And the output from above is with a self-compiled Lean?</p>",
        "id": 271012764,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644254974
    },
    {
        "content": "<p>no, I'm on nightly</p>",
        "id": 271012955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644255037
    },
    {
        "content": "<p>I haven't tried your suggestion of recompiling lean yet</p>",
        "id": 271012986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644255054
    },
    {
        "content": "<blockquote>\n<p>But then you may as well download the Lean 4 \"Linux\" (not \"Linux release\") artifact</p>\n</blockquote>\n<p><code>--call-graph dwarf</code> works for me with the nightly build (though ld is used for linking mathport since I'm on nixos).</p>",
        "id": 271013086,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644255092
    },
    {
        "content": "<p>gabriel's suggestion seems to produce some very large files, I get these <code>Check IO/CPU overload!</code> warnings and some self test stuff seems to fail</p>",
        "id": 271013226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644255137
    },
    {
        "content": "<p>Yeah, the files are larger because it captures more stack information.  The overload warnings are harmless in my experience.</p>",
        "id": 271013276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644255162
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> BTW, thanks for the <code>perf report | less</code> tip.  The dumb output is really much better than the TUI which gets shown by default.)</p>",
        "id": 271013380,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644255216
    },
    {
        "content": "<p>hm, <code>--call-graph dwarf,65528</code> didn't help</p>",
        "id": 271014500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644255713
    },
    {
        "content": "<p>Do you get unknown in <code>perf report | less</code> as well?  (I don't get any here.)</p>",
        "id": 271014975,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644255875
    },
    {
        "content": "<p>IIRC you can switch the linker by doing <code>export LEAN_CC=gcc</code>.</p>",
        "id": 271015059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644255907
    },
    {
        "content": "<p>Here's perf report (trimmed in kernel calls):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">31</span><span class=\"bp\">%</span>    <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">27</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_dec_ref_cold</span>\n            <span class=\"bp\">|</span>\n            <span class=\"c1\">---lean_dec_ref_cold</span>\n\n     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">45</span><span class=\"bp\">%</span>     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">44</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">replace_rec_fn</span><span class=\"o\">::</span><span class=\"n\">apply</span>\n            <span class=\"bp\">|</span>\n            <span class=\"c1\">---lean::replace_rec_fn::apply</span>\n\n     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">11</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">asm_exc_page_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--6.10%--asm_exc_page_fault</span>\n                       <span class=\"bp\">|</span>\n                        <span class=\"c1\">--5.66%--exc_page_fault</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">66</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">exc_page_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--5.65%--exc_page_fault</span>\n                       <span class=\"bp\">|</span>\n                        <span class=\"c1\">--5.61%--do_user_addr_fault</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">61</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">02</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">do_user_addr_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--5.59%--do_user_addr_fault</span>\n                       <span class=\"bp\">|</span>\n                        <span class=\"c1\">--5.36%--handle_mm_fault</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">36</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">05</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">handle_mm_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--5.31%--handle_mm_fault</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">28</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">08</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">__handle_mm_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--5.20%--__handle_mm_fault</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">24</span><span class=\"bp\">%</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">23</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">l_Lean_mkApp</span>\n            <span class=\"bp\">|</span>\n            <span class=\"c1\">---l_Lean_mkApp</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">18</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">02</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">handle_pte_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--5.16%--handle_pte_fault</span>\n\n     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"bp\">%</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">98</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_free_small</span>\n            <span class=\"bp\">|</span>\n            <span class=\"c1\">---lean_free_small</span>\n\n     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">77</span><span class=\"bp\">%</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">73</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_alloc_small</span>\n            <span class=\"bp\">|</span>\n            <span class=\"c1\">---lean_alloc_small</span>\n\n     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">68</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">do_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--4.68%--do_fault</span>\n\n     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">68</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">do_read_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--4.67%--do_read_fault</span>\n\n     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">14</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">page_cache_ra_unbounded</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--4.08%--page_cache_ra_unbounded</span>\n\n     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">91</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">__do_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--3.91%--__do_fault</span>\n                       <span class=\"n\">ext4_filemap_fault</span>\n\n     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">91</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">02</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">ext4_filemap_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--3.89%--ext4_filemap_fault</span>\n\n     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">88</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">filemap_fault</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--3.84%--filemap_fault</span>\n\n     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">18</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"o\">[</span><span class=\"n\">kernel.kallsyms</span><span class=\"o\">]</span>     <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">do_page_cache_ra</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--3.18%--do_page_cache_ra</span>\n\n     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">%</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">78</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_name_eq</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--3.00%--lean_name_eq</span>\n\n     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">72</span><span class=\"bp\">%</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">72</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>              <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">replace_cache</span><span class=\"o\">::</span><span class=\"n\">insert</span>\n            <span class=\"bp\">|</span>\n            <span class=\"c1\">---lean::replace_cache::insert</span>\n</code></pre></div>",
        "id": 271015189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644255955
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">89</span><span class=\"bp\">.</span><span class=\"mi\">44</span><span class=\"bp\">%</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">72</span><span class=\"bp\">%</span>  <span class=\"n\">mathport</span>  <span class=\"n\">mathport</span>            <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span> <span class=\"n\">lean_apply_1</span>\n            <span class=\"bp\">|</span>\n             <span class=\"c1\">--88.72%--lean_apply_1</span>\n                       <span class=\"bp\">|</span>\n                        <span class=\"c1\">--87.41%--lean::lean_io_as_task_fn</span>\n                                  <span class=\"n\">lean_apply_1</span>\n                                  <span class=\"n\">l_EIO_toBaseIO___rarg</span>\n                                  <span class=\"n\">lean_apply_1</span>\n                                  <span class=\"bp\">|</span>\n                                   <span class=\"c1\">--87.41%--l_Mathport_mathport1</span>\n                                             <span class=\"n\">l_Mathport_mathport1___lambda__3</span>\n                                             <span class=\"n\">l_Lean_withImportModules___rarg</span>\n                                             <span class=\"bp\">|</span>\n                                             <span class=\"bp\">|</span><span class=\"c1\">--60.33%--lean_import_modules</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">l_Lean_profileitIOUnsafe___rarg</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">lean_profileit</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">lean_apply_1</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">l_Lean_profileitIOUnsafe___rarg___lambda__1___boxed</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">l_Lean_profileitIOUnsafe___rarg___lambda__1</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">lean_apply_1</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">l_Lean_withImporting___rarg</span>\n                                             <span class=\"bp\">|</span>          <span class=\"n\">lean_apply_1</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--56.98%--lean_apply_2</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"n\">l_Lean_importModules___lambda__3</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--43.81%--l___private_Lean_Environment_0__Lean_finalizePersistentExtensions_loop</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"n\">lean_apply_3</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--39.13%--l_Lean_registerSimplePersistentEnvExtension___rarg___lambda__1___boxed</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"n\">lean_apply_1</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span><span class=\"c1\">--31.26%--l_Lean_mkStateFromImportedEntries___at_Mathport_initFn____x40_Mathport_Bridge_Rename___hyg_61____spec__2</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"n\">l_Array_foldlMUnsafe_fold___at_Mathport_initFn____x40_Mathport_Bridge_Rename___hyg_61____spec__4</span>\n                                             <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"bp\">|</span>          <span class=\"n\">l_Array_foldlMUnsafe_fold___at_Mathport_initFn____x40_Mathport_Bridge_Rename___hyg_61____spec__3</span>\n</code></pre></div>",
        "id": 271015330,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644255999
    },
    {
        "content": "<p>yeah, definitely not getting that</p>",
        "id": 271015380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644256016
    },
    {
        "content": "<p>I did get something close to that when profiling in gdb though</p>",
        "id": 271015438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644256038
    },
    {
        "content": "<p>there is a call to a profiling command <code>lean_profileit</code> in there? Did you do something on the lean side?</p>",
        "id": 271015643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644256119
    },
    {
        "content": "<p>That's interesting.  I didn't fiddle with the compiler options at all.  This is completely vanilla mathport master.  I've only set the <code>LEAN_CC=cc</code> environment variable.  And the <code>--call-graph dwarf,65528</code> option.</p>",
        "id": 271015788,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644256176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Stack.20trace.20profiling/near/271015643\">said</a>:</p>\n<blockquote>\n<p>there is a call to a profiling command <code>lean_profileit</code> in there? Did you do something on the lean side?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/95aec2cf93762530a9c69dfc98c165a8b54238e2/src/Lean/Environment.lean#L615\">https://github.com/leanprover/lean4/blob/95aec2cf93762530a9c69dfc98c165a8b54238e2/src/Lean/Environment.lean#L615</a></p>",
        "id": 271015975,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644256233
    },
    {
        "content": "<p>I'm trying that now</p>",
        "id": 271015981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644256236
    },
    {
        "content": "<p>oh, the linker failed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"bp\">-</span><span class=\"n\">lc</span><span class=\"bp\">++</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"bp\">-</span><span class=\"n\">lc</span><span class=\"bp\">++</span><span class=\"n\">abi</span>\n<span class=\"n\">collect2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ld</span> <span class=\"n\">returned</span> <span class=\"mi\">1</span> <span class=\"n\">exit</span> <span class=\"n\">status</span>\n</code></pre></div>",
        "id": 271016199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644256327
    },
    {
        "content": "<p>Oh, the nixpkgs wrapper (shell script around leanc) also adds an <code>-L</code> flag.  Not sure if there's an easy way to simulate that elsewhere (without replacing <code>leanc</code> by a shell script).</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"ch\">#! /nix/store/a54wrar1jym1d8yvlijq0l2gghmy8szz-bash-5.1-p12/bin/bash</span>\n<span class=\"nv\">LEAN_CC</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">LEAN_CC</span><span class=\"k\">:-</span><span class=\"p\">/nix/store/xiq6j4jsyj351p8q3yw9cg1hdqp9m685-gcc-wrapper-10.3.0/bin/cc</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"nb\">exec</span> -a <span class=\"s2\">\"</span><span class=\"nv\">$0</span><span class=\"s2\">\"</span> /home/gebner/.elan/toolchains/leanprover--lean4---nightly-2022-01-27/bin/leanc.orig <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span> -L /home/gebner/.elan/toolchains/leanprover--lean4---nightly-2022-01-27/lib  <span class=\"c1\"># use bundled libraries, but not bundled compiler that doesn't know about NIX_LDFLAGS</span>\n</code></pre></div>",
        "id": 271016535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644256470
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I added <code>\"-L/home/mario/.elan/toolchains/leanprover--lean4---nightly-2022-02-06/lib\"</code> to lake's <code>moreLinkArgs</code> and it worked and produced sensible perf output</p>",
        "id": 271017603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644256835
    },
    {
        "content": "<p>I'd really love to know how lld manages to screw this up... and why nobody else seems to mind</p>",
        "id": 271018108,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644257011
    },
    {
        "content": "<p><code>-fuse-ld=ld</code> in the link args should also work btw. Maybe it needs a full path.</p>",
        "id": 271018265,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644257066
    },
    {
        "content": "<p>I am unable to get any combination of flags working to profile a Lean-built executable using <code>nightly-2022-10-31</code>. My <code>lakefile.lean</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">checker</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"n\">moreLeancArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DNDEBUG\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-O3\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"-fuse-ld=ld\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"-L/home/nawrocki/.elan/toolchains/leanprover--lean4---nightly-2022-10-31/lib\"</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>and I am using <code>perf record --call-graph dwarf ./build/bin/checker</code>. The output I get is \"flat\", i.e. has a bunch of <code>[unknown]</code>s like in Mario's original post.</p>",
        "id": 307571524,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1667408128
    },
    {
        "content": "<p>I should say I also tried with <code>moreLeancArgs := #[\"-UNDEBUG\", \"-Og\", \"-ggdb\", \"-g3\", \"-fno-omit-frame-pointer\"]</code> but it did not help.</p>",
        "id": 307572963,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1667408476
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ncmiZ5o29s3A-6uN6E8j9JTd/Screenshot_20221102_102251.png\">Screenshot_20221102_102251.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ncmiZ5o29s3A-6uN6E8j9JTd/Screenshot_20221102_102251.png\" title=\"Screenshot_20221102_102251.png\"><img src=\"/user_uploads/3121/ncmiZ5o29s3A-6uN6E8j9JTd/Screenshot_20221102_102251.png\"></a></div>",
        "id": 307577920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667409796
    },
    {
        "content": "<p>You didn't post the code you're benchmarking, but if you have deep recursions you can try to increase the size of the captured stack trace with <code>--call-graph dwarf,60000</code>.</p>",
        "id": 307579829,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667410382
    },
    {
        "content": "<p>The code is <a href=\"https://github.com/rebryant/model-counting/tree/59fd27668c7b30d73e55400b749a2c93b0fd4760/lean4/ProofChecker\">here</a> (note the lakefile doesn't have the leanc flags I only use those locally). However I was able to get it working on another machine; it seems that something is wrong with the setup on the other one, so <code>leanc</code> is not to blame.</p>",
        "id": 307587315,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1667412309
    }
]