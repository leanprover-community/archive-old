[
    {
        "content": "<p>Consider the program below, ehre we use a <code>mutual</code> clause to create functions <code>even_impl</code> and <code>odd_impl</code>, which supply<br>\nimplementations for the constants <code>odd</code> and <code>even</code> (This pattern was suggested as a workaround to <a href=\"https://github.com/leanprover/lean4/issues/697\">this issue I had yesterday</a>). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">constant</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n\n<span class=\"c1\">-- | in reality these are partial mutually defined functions.</span>\n<span class=\"c1\">-- | We use `constant` to evade</span>\n<span class=\"c1\">-- | `partial mutual...end`</span>\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">even_impl</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n        <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n <span class=\"kd\">def</span> <span class=\"n\">odd_impl</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">0</span>\n     <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implementedBy</span> <span class=\"n\">odd_impl</span><span class=\"o\">]</span> <span class=\"n\">odd</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implementedBy</span> <span class=\"n\">even_impl</span><span class=\"o\">]</span> <span class=\"n\">even</span>\n\n<span class=\"c1\">-- | expected output: 1</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">even</span> <span class=\"mi\">10</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>We expect the result to be <code>1</code>, as <code>10</code> is even. However, the answer that is produced <code>42</code>, which seems to be generated from the <code>Inhabited</code> instance of <code>Foo</code>. Am I misunderstanding what the pattern is supposed to be doing? is this a bug?</p>\n<p>LEAN4 version [nightly]:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">f4759c9a223f</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255606318,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633020202
    },
    {
        "content": "<p>This pattern is not necessary. You can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.mk</span> <span class=\"mi\">0</span>\n   <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">even</span> <span class=\"mi\">10</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">Foo.mk</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">k</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n<span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 255609219,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633021191
    },
    {
        "content": "<p>Right, it's nice that the bug is fixed so I don't need the workaround anymore!</p>\n<p>I was wondering if I misunderstood what <code>implementedBy</code> does, or if the example program exhibits a bug.</p>",
        "id": 255611068,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633021825
    }
]