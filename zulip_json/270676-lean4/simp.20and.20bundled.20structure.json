[
    {
        "content": "<p>I have a bundled type like an add-homomorphism type.<br>\nI noticed <code>simp</code> discrimination tree is not efficiently used. This is because a field of a structure is <code>reducible</code>, the normal form of <code>Struct.field ?meta</code> is a metavariable and it matches any such form.<br>\nI could add <code>semireducible</code> attribute to the field, and now simp lemmas are efficiently discriminated, but then it seems like there is no way to reduce a field projection during a proof (<code>simp</code> doesn't work).<br>\nIs there any better way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Hom</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">hom_add</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hom</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">hom</span> <span class=\"n\">b</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Hom.hom_add</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f.hom</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- Hom.hom_add:1000, failed to unify Hom.hom ?self (?a + ?b) with Hom.hom</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">Hom.hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Hom.refl</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Hom.refl.hom</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Hom.hom</span><span class=\"o\">]</span>\n  <span class=\"n\">traceState</span> <span class=\"c1\">-- Hom.hom is not unfolded</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 234959842,
        "sender_full_name": "pcpthm",
        "timestamp": 1618635208
    }
]