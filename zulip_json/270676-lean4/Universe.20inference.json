[
    {
        "content": "<p>consider:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>inductive NoWorkBlockLens: Type -&gt; Type where\n| BlockOp: o -&gt; NoWorkBlockLens o\n| BlockUnit:  NoWorkBlockLens Unit\n</code></pre></div>\n<p>which does not type check with :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">of</span> <span class=\"n\">type_of</span><span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">NoWorkBlockLens.BlockOp'</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">big</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">corresponding</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatype</span>\n</code></pre></div>\n<p>The fix is to manually declare all universes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- | Needs to be sure that o and Unit are on the same level.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">BlockLens</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">BlockOp</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BlockLens</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">BlockUnit</span><span class=\"o\">:</span>  <span class=\"n\">BlockLens</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Coq infers universes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Set</span> <span class=\"n\">Printing</span> <span class=\"n\">Universes.</span>\n<span class=\"n\">Inductive</span> <span class=\"n\">BlockLens</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">BlockOp</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">o</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BlockLens</span> <span class=\"n\">o</span>\n<span class=\"bp\">|</span> <span class=\"n\">BlockUnit</span><span class=\"o\">:</span> <span class=\"n\">BlockLens</span> <span class=\"n\">nat</span>\n<span class=\"bp\">.</span>\n<span class=\"n\">Print</span> <span class=\"n\">BlockLens.</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inductive</span> <span class=\"n\">BlockLens</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">@</span><span class=\"o\">{</span><span class=\"n\">BlockLens.u0</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">@</span><span class=\"o\">{</span><span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"o\">,</span><span class=\"n\">BlockLens.u1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n    <span class=\"n\">BlockOp</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">@</span><span class=\"o\">{</span><span class=\"n\">BlockLens.u1</span><span class=\"o\">},</span> <span class=\"n\">o</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BlockLens</span> <span class=\"n\">o</span> <span class=\"bp\">|</span> <span class=\"n\">BlockUnit</span> <span class=\"o\">:</span> <span class=\"n\">BlockLens</span> <span class=\"n\">nat.</span>\n</code></pre></div>\n<p>Is this intended behaviour?</p>",
        "id": 274572481,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646759528
    },
    {
        "content": "<p>Lean can infer universes as well: <code>Type _</code></p>",
        "id": 274572781,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646759642
    },
    {
        "content": "<p>Coq has no problem with this definition living in <code>Type</code> instead of <code>Type (u+1)</code>, do you know why that difference exists?</p>\n<p>It came up as an issue <a href=\"#narrow/stream/270676-lean4/topic/Issue.20using.20a.20Type.201.20in.20forIn/near/273751853\">here</a> that requires a pretty annoying workaround</p>",
        "id": 274573806,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646760076
    },
    {
        "content": "<p>Oh wait, re-reading that, it is not living in the same universe as <code>o</code>, nevermind</p>",
        "id": 274574288,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646760258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> You don't need to define them either, and there's <code>PUnit</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NoWorkBlockLens</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BlockOp</span> <span class=\"o\">:</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">NoWorkBlockLens</span> <span class=\"n\">o</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BlockUnit</span> <span class=\"o\">:</span> <span class=\"n\">NoWorkBlockLens</span> <span class=\"n\">PUnit</span>\n</code></pre></div>",
        "id": 274574384,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1646760302
    },
    {
        "content": "<p>Thanks for that, I'd forgotten about the existence of <code>PUnit</code>. In the real use-case I have, it's not <code>Unit</code>, but some kind of user defined datatype, so I unfortunately still need the <code>ULift</code>, I think. I'll experiment a little!</p>",
        "id": 274574772,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1646760468
    }
]