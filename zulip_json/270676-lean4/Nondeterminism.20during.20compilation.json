[
    {
        "content": "<p>In my mathlib4 fork to port SlimCheck to Lean 4 I'm experiencing some weird issues, if I comment the following line out: <a href=\"https://github.com/hargoniX/mathlib4/blob/slim_check/Mathlib/Testing/SlimCheck/Testable.lean#L374\">https://github.com/hargoniX/mathlib4/blob/slim_check/Mathlib/Testing/SlimCheck/Testable.lean#L374</a> the LSP will <em>sometimes</em> hang on this and sometimes produce proper output (I reload the file with <code>C-c C-d</code> in emacs to achieve this effect), example:<br>\nsuccessful run: <a href=\"/user_uploads/3121/PG1mNLmSftkQYNy6-wIiMn1w/image.png\">image.png</a> <br>\nhanging run: <a href=\"/user_uploads/3121/i473DmY9RVvwn1CilNLiTcOn/image.png\">image.png</a> <br>\nLake and thus the compiler are rather consistently convinced this code is broken <a href=\"/user_uploads/3121/0iFvXqkb2QaWA6-JxZe6gkhI/image.png\">image.png</a>  so my question would be...what on earth is going on?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PG1mNLmSftkQYNy6-wIiMn1w/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PG1mNLmSftkQYNy6-wIiMn1w/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/i473DmY9RVvwn1CilNLiTcOn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/i473DmY9RVvwn1CilNLiTcOn/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0iFvXqkb2QaWA6-JxZe6gkhI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0iFvXqkb2QaWA6-JxZe6gkhI/image.png\"></a></div>",
        "id": 277216181,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648683514
    },
    {
        "content": "<p>It sounds like your random number generator is nondeterministic</p>",
        "id": 277216776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648684069
    },
    {
        "content": "<p>if the state is not being stored in the environment then this is expected</p>",
        "id": 277216832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648684094
    },
    {
        "content": "<p>that is, every time the command is elaborated you will get new random numbers</p>",
        "id": 277216859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648684150
    },
    {
        "content": "<p>Pinning the randomSeed does indeed help the consistency so I guess I'll start to look around for where im doing too much recursion then</p>",
        "id": 277217093,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648684358
    },
    {
        "content": "<p>recursion?</p>",
        "id": 277217115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648684381
    },
    {
        "content": "<p>Well its complaining that there might be a stackoverflow during execution no?</p>",
        "id": 277217139,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648684405
    },
    {
        "content": "<p>oh I see</p>",
        "id": 277217218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648684473
    },
    {
        "content": "<p>I can in fact already pin point it to a certain instance from above that is misbehaving so I'll keep digging there, thanks!</p>",
        "id": 277217242,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648684501
    },
    {
        "content": "<p>Huh, I did include one of the failing seeds (<code>Testable.check (∀ (x y z a : Nat) (h1 : 3 &lt; x) (h2 : 3 &lt; y), x - y = y - x) { Configuration.verbose with randomSeed := some 1000}</code>) in a binary and it segfaulted</p>",
        "id": 277218277,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648685361
    },
    {
        "content": "<p>after running for a little at least</p>",
        "id": 277218286,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648685380
    },
    {
        "content": "<p>How does one debug segfaults in Lean generated code the best way?</p>",
        "id": 277218368,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648685447
    },
    {
        "content": "<p>I use <code>gdb</code> and then <code>bt</code> to print the stack trace.</p>",
        "id": 277218401,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648685486
    },
    {
        "content": "<p>The function names are mangled, but readable.</p>",
        "id": 277218487,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648685534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x00000000029a4d74</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x00000000006ea373</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_TestResult_combine___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x00000000006eb7cf</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_TestResult_imp___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0x00000000006ebb9c</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_TestResult_addInfo___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0x0000000000667feb</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__4___lambda__5</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0x000000000066881e</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__4___lambda__6</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0x0000000000668dd1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__4___lambda__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">7</span>  <span class=\"mi\">0x000000000066b2a7</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__2</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">8</span>  <span class=\"mi\">0x000000000066bac9</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__3</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">9</span>  <span class=\"mi\">0x00000000029a519c</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">10</span> <span class=\"mi\">0x00000000006fbbc1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_retry___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">11</span> <span class=\"mi\">0x000000000066bbb3</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">12</span> <span class=\"mi\">0x000000000066c21d</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">13</span> <span class=\"mi\">0x000000000066be01</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">14</span> <span class=\"mi\">0x000000000066c21d</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">15</span> <span class=\"mi\">0x000000000066be01</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">16</span> <span class=\"mi\">0x000000000066c21d</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">17</span> <span class=\"mi\">0x000000000066be01</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">18</span> <span class=\"mi\">0x000000000066c21d</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">19</span> <span class=\"mi\">0x000000000066be01</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">20</span> <span class=\"mi\">0x000000000066c21d</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">21</span> <span class=\"mi\">0x000000000066be01</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">22</span> <span class=\"mi\">0x000000000066c21d</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">23</span> <span class=\"mi\">0x000000000066c300</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuite___at_main___spec__6</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">24</span> <span class=\"mi\">0x00000000029a4e80</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">25</span> <span class=\"mi\">0x000000000077cf2e</span> <span class=\"k\">in</span> <span class=\"n\">l_IO_runRandWith___rarg</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">26</span> <span class=\"mi\">0x000000000066c417</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_checkIO___at_main___spec__2</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">27</span> <span class=\"mi\">0x000000000066c471</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_check___at_main___spec__1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">28</span> <span class=\"mi\">0x000000000066cb75</span> <span class=\"k\">in</span> <span class=\"n\">_lean_main</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">29</span> <span class=\"mi\">0x000000000066d77e</span> <span class=\"k\">in</span> <span class=\"n\">main</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>So apparently: <a href=\"https://github.com/hargoniX/mathlib4/blob/slim_check/Mathlib/Testing/SlimCheck/Testable.lean#L55\">https://github.com/hargoniX/mathlib4/blob/slim_check/Mathlib/Testing/SlimCheck/Testable.lean#L55</a> this one is evil...but only for certain inputs of course?</p>",
        "id": 277218570,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648685638
    },
    {
        "content": "<p>For \"panic\" messages, I use <code>LEAN_ABORT_ON_PANIC=1 gdb &lt;path-to-build-dir&gt;/stage1/bin/lean</code>, <code>run file.lean</code>, <code>bt</code>.</p>",
        "id": 277218580,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648685642
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">list</span>\n<span class=\"mi\">693</span>     <span class=\"o\">{</span>\n<span class=\"mi\">694</span>     <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_10</span><span class=\"bp\">;</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_11</span><span class=\"bp\">;</span>\n<span class=\"mi\">695</span>     <span class=\"n\">x_9</span> <span class=\"bp\">=</span> <span class=\"n\">lean_ctor_get</span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">696</span>     <span class=\"n\">lean_inc</span><span class=\"o\">(</span><span class=\"n\">x_9</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">697</span>     <span class=\"n\">lean_dec</span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">698</span>     <span class=\"n\">x_10</span> <span class=\"bp\">=</span> <span class=\"n\">lean_apply_1</span><span class=\"o\">(</span><span class=\"n\">x_5</span><span class=\"o\">,</span> <span class=\"n\">x_9</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">699</span>     <span class=\"n\">x_11</span> <span class=\"bp\">=</span> <span class=\"n\">lean_alloc_ctor</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">700</span>     <span class=\"n\">lean_ctor_set</span><span class=\"o\">(</span><span class=\"n\">x_11</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x_10</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"mi\">701</span>     <span class=\"n\">return</span> <span class=\"n\">x_11</span><span class=\"bp\">;</span>\n<span class=\"mi\">702</span>     <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">info</span> <span class=\"n\">locals</span>\n<span class=\"n\">x_9</span> <span class=\"bp\">=</span> <span class=\"mi\">0x1</span>\n<span class=\"n\">x_10</span> <span class=\"bp\">=</span> <span class=\"mi\">0x7ffff7bd80c8</span>\n<span class=\"n\">x_11</span> <span class=\"bp\">=</span> <span class=\"mi\">0x7fffffffb580</span>\n<span class=\"n\">x_5</span> <span class=\"bp\">=</span> <span class=\"mi\">0x1</span>\n<span class=\"n\">x_6</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">'\\</span><span class=\"mi\">001</span><span class=\"bp\">'</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm certainly not well versed with how lean does stuff in C under the hood but applying <code>0x1</code> to <code>0x1</code> does not sound like something that should be happening right? (line 698 is the line that is the exit point according to a build with debug info)</p>",
        "id": 277218888,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648685917
    },
    {
        "content": "<p><code>combine</code> looks harmless. Try to take a look at the other functions on the stack. <code>dbg_trace</code> is also helpful in this kind situation.</p>",
        "id": 277219094,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648686099
    },
    {
        "content": "<blockquote>\n<p>I'm certainly not well versed with how lean does stuff in C under the hood but applying 0x1 to 0x1 does not sound like something that should be happening right?</p>\n</blockquote>\n<p>Yes, the memory looks corrupted at this point.</p>",
        "id": 277219183,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648686164
    },
    {
        "content": "<p>Here's the trace with debug info so one can see the arguments...it seems like this 0x1 value is first introduced in the call from <a href=\"https://github.com/leanprover-community/mathlib/pull/8\">#8</a> to <a href=\"https://github.com/leanprover-community/mathlib/pull/7\">#7</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x00000000029922b4</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x00000000006e4a53</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_TestResult_combine___rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80c8</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd8118</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Testing</span><span class=\"bp\">/</span><span class=\"n\">SlimCheck</span><span class=\"bp\">/</span><span class=\"n\">Testable.c</span><span class=\"o\">:</span><span class=\"mi\">698</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x00000000006e5dcf</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_TestResult_imp___rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd8108</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80c8</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Testing</span><span class=\"bp\">/</span><span class=\"n\">SlimCheck</span><span class=\"bp\">/</span><span class=\"n\">Testable.c</span><span class=\"o\">:</span><span class=\"mi\">1166</span>\n<span class=\"bp\">#</span><span class=\"mi\">3</span>  <span class=\"mi\">0x00000000006e619c</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_TestResult_addInfo___rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bdf178</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd8108</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80c8</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Testing</span><span class=\"bp\">/</span><span class=\"n\">SlimCheck</span><span class=\"bp\">/</span><span class=\"n\">Testable.c</span><span class=\"o\">:</span><span class=\"mi\">1283</span>\n<span class=\"bp\">#</span><span class=\"mi\">4</span>  <span class=\"mi\">0x0000000000664e9b</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__4___lambda__5</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">'\\</span><span class=\"mi\">001</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">921</span>\n<span class=\"bp\">#</span><span class=\"mi\">5</span>  <span class=\"mi\">0x00000000006656ce</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__4___lambda__6</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">'\\</span><span class=\"mi\">001</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">1093</span>\n<span class=\"bp\">#</span><span class=\"mi\">6</span>  <span class=\"mi\">0x0000000000665c81</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__4___lambda__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5d8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_8</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">1234</span>\n<span class=\"bp\">#</span><span class=\"mi\">7</span>  <span class=\"mi\">0x0000000000668157</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__2</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2004</span>\n<span class=\"bp\">#</span><span class=\"mi\">8</span>  <span class=\"mi\">0x0000000000668979</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__3</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2159</span>\n<span class=\"bp\">#</span><span class=\"mi\">9</span>  <span class=\"mi\">0x00000000029926dc</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">10</span> <span class=\"mi\">0x00000000006f60b1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_retry___rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef208</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Testing</span><span class=\"bp\">/</span><span class=\"n\">SlimCheck</span><span class=\"bp\">/</span><span class=\"n\">Testable.c</span><span class=\"o\">:</span><span class=\"mi\">7552</span>\n<span class=\"bp\">#</span><span class=\"mi\">11</span> <span class=\"mi\">0x0000000000668a63</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0xb</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xbd</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2176</span>\n<span class=\"bp\">#</span><span class=\"mi\">12</span> <span class=\"mi\">0x00000000006690cd</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xbf</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2324</span>\n<span class=\"bp\">#</span><span class=\"mi\">13</span> <span class=\"mi\">0x0000000000668cb1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x9</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xbf</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2235</span>\n<span class=\"bp\">#</span><span class=\"mi\">14</span> <span class=\"mi\">0x00000000006690cd</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xc1</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2324</span>\n<span class=\"bp\">#</span><span class=\"mi\">15</span> <span class=\"mi\">0x0000000000668cb1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xc1</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2235</span>\n<span class=\"bp\">#</span><span class=\"mi\">16</span> <span class=\"mi\">0x00000000006690cd</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xc3</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2324</span>\n<span class=\"bp\">#</span><span class=\"mi\">17</span> <span class=\"mi\">0x0000000000668cb1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x5</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xc3</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2235</span>\n<span class=\"bp\">#</span><span class=\"mi\">18</span> <span class=\"mi\">0x00000000006690cd</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xc5</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2324</span>\n<span class=\"bp\">#</span><span class=\"mi\">19</span> <span class=\"mi\">0x0000000000668cb1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x3</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xc5</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2235</span>\n<span class=\"bp\">#</span><span class=\"mi\">20</span> <span class=\"mi\">0x00000000006690cd</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80d8</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xc7</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2324</span>\n<span class=\"bp\">#</span><span class=\"mi\">21</span> <span class=\"mi\">0x0000000000668cb1</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7___lambda__4</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80f8</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0xc7</span><span class=\"o\">,</span> <span class=\"n\">x_6</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">,</span> <span class=\"n\">x_7</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2235</span>\n<span class=\"bp\">#</span><span class=\"mi\">22</span> <span class=\"mi\">0x00000000006690cd</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuiteAux___at_main___spec__7</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bd80f8</span><span class=\"o\">,</span> <span class=\"n\">x_4</span><span class=\"bp\">=</span><span class=\"mi\">0xc9</span><span class=\"o\">,</span> <span class=\"n\">x_5</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2324</span>\n<span class=\"bp\">#</span><span class=\"mi\">23</span> <span class=\"mi\">0x00000000006691b0</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_runSuite___at_main___spec__6</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7a6c5f0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2349</span>\n<span class=\"bp\">#</span><span class=\"mi\">24</span> <span class=\"mi\">0x00000000029923c0</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">25</span> <span class=\"mi\">0x0000000000771d9e</span> <span class=\"k\">in</span> <span class=\"n\">l_IO_runRandWith___rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7d1</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bf1000</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Random.c</span><span class=\"o\">:</span><span class=\"mi\">835</span>\n<span class=\"bp\">#</span><span class=\"mi\">26</span> <span class=\"mi\">0x00000000006692c7</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_checkIO___at_main___spec__2</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2377</span>\n<span class=\"bp\">#</span><span class=\"mi\">27</span> <span class=\"mi\">0x0000000000669321</span> <span class=\"k\">in</span> <span class=\"n\">l_SlimCheck_Testable_check___at_main___spec__1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef238</span><span class=\"o\">,</span> <span class=\"n\">x_2</span><span class=\"bp\">=</span><span class=\"mi\">0x7ffff7bef268</span><span class=\"o\">,</span> <span class=\"n\">x_3</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2420</span>\n<span class=\"bp\">#</span><span class=\"mi\">28</span> <span class=\"mi\">0x00000000006699e5</span> <span class=\"k\">in</span> <span class=\"n\">_lean_main</span> <span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"bp\">=</span><span class=\"mi\">0x1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2673</span>\n<span class=\"bp\">#</span><span class=\"mi\">29</span> <span class=\"mi\">0x000000000066a5ee</span> <span class=\"k\">in</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">argc</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">argv</span><span class=\"bp\">=</span><span class=\"mi\">0x7fffffffd638</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Main.c</span><span class=\"o\">:</span><span class=\"mi\">2948</span>\n</code></pre></div>\n<p>so that might be the culprit?</p>",
        "id": 277219497,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648686428
    },
    {
        "content": "<p>Either way I'm off to bed, if someone wants to investigate further there is a reproducible example over here: <a href=\"https://github.com/hargoniX/lean4-c-bug\">https://github.com/hargoniX/lean4-c-bug</a>, maybe I will just wake up and it will be magically fixed <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 277219893,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648686821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> The problem is that <code>PSum</code> can store data and proofs. Recall that proofs are erased by the code generator. This is where the <code>0x1</code> is coming from. An easy fix is to modify <code>apply_*</code> to check its arguments have been erased, but this would impact the performance of all Lean programs that never need this feature. A better fix is to have two sets of <code>apply_*</code> functions: the current one; and another for places that can take proofs and data (e.g., your <code>combine</code> function). We don't have cycles for this kind of modification right now. So, could you please rewrite your code and replace <code>PSum</code> with a type such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Semidecidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unknown</span>\n</code></pre></div>\n<p>This one would be making clear to Lean that the argument stored there is always a proof.  You could also try to rewrite <code>combine</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">combine</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span>  <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">PSum.inr</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">PSum.inr</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">proof</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSum.inl</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>In your current implementation, <code>p</code> and <code>q</code> can be any type.<br>\nI did not read your code carefully. So, you might have other places where the code can be used to process proofs and data. <br>\nBTW, I think it is worth replacing <code>PSum</code> because  it will make the code more readable.</p>",
        "id": 277221942,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648689031
    },
    {
        "content": "<p>Here is a mwe for this issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">combine</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PSum.inr</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">PSum.inr</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">proof</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSum.inl</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">id</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"k\">match</span> <span class=\"n\">combine</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"inr\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"inl\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">evat</span> <span class=\"n\">tst</span>\n</code></pre></div>\n<p>The crash goes away if add <code>{p q : Prop}</code> to <code>combine</code>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">combine</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">PSum</span> <span class=\"n\">Unit</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PSum.inr</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">PSum.inr</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">proof</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSum.inl</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 277222448,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648689607
    },
    {
        "content": "<p>Added an issue for this <a href=\"https://github.com/leanprover/lean4/issues/1087\">https://github.com/leanprover/lean4/issues/1087</a></p>",
        "id": 277222863,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648690087
    },
    {
        "content": "<p>I pushed the \"easy\" fix for the issue above. I am hoping the performance impact will be small.</p>",
        "id": 277223912,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648691426
    },
    {
        "content": "<p>It did indeed get magically fixed^^ But the explanation very much makes sense yes, I'll just keep it like combine <code>{p q : Prop}</code> to make this explicit</p>",
        "id": 277244506,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1648713085
    }
]