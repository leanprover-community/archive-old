[
    {
        "content": "<p>I see you can decompose an \"exists\" with a match, can you decompose an \"or\" with a match?</p>",
        "id": 271765039,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1644785779
    },
    {
        "content": "<p>I'm assuming you are referring to just pattern matching on an expression of type or and yes we can indeed pattern match on them, in fact we can pattern match on anything inductive, for example the proof of commutativity of or can be done via pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>If it's an inductive you can match on it!</p>",
        "id": 271765142,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644785955
    },
    {
        "content": "<p>You can use <code>cases</code>. If you have <code>h : ... ∨ ...</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 271765146,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644785961
    },
    {
        "content": "<p>Yeah <code>cases</code> is basically the tactic variant of <code>match</code></p>",
        "id": 271765162,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644785993
    },
    {
        "content": "<p>I'm getting \"unknown identifier 'cases'\" -- do I need any import for this?</p>",
        "id": 271765321,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1644786117
    },
    {
        "content": "<p>Note that <code>structure</code> is just syntactic sugar around an inductive with one type so you can also match on it / use <code>cases</code> on it in a proof if you want to argue over the fields over some arbitrary structure.</p>\n<p>Regarding the identifier, you need to be in tactic mode to use it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_comm_alt</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 271765401,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1644786230
    },
    {
        "content": "<p>still poking at it, but I think this is what I needed, thank you</p>",
        "id": 271765830,
        "sender_full_name": "Mark Wilhelm",
        "timestamp": 1644786836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431462\">@Mark Wilhelm</span> Are you in a tactic block? Did you write <code>by</code> somewhere before <code>cases</code>?</p>",
        "id": 271766926,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1644788390
    }
]