[
    {
        "content": "<p>While the Lean 4 core does have a native <code>IO.FS.removeFile</code> to delete a single file (which calls <a href=\"https://en.cppreference.com/w/cpp/io/c/remove\"><code>std::remove</code></a>), it does not have an analogous native <code>IO.FS.removeAll</code> (which could call <a href=\"https://en.cppreference.com/w/cpp/filesystem/remove\"><code>std::filesystem::remove_all</code></a> or  <code>std::experimental::filesystem::remove_all</code> for <code>c++14</code>) to recursively remove a directory. While this can be partially replicated in pure Lean, it has a number of pitfalls with race conditions that a native implementation would not. </p>\n<p>Thus, the addition of such a function would be quite useful (it is needed in Lake for example). Since <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  added <code>IO.FS.createDir</code> (in <a href=\"https://github.com/leanprover/lean4/pull/519\">#519</a>) for <code>leanpkg</code>, I was wondering if an <code>IO.FS.removeAll</code> addition would be welcome (I might even be able to add it myself if need be).</p>",
        "id": 247487569,
        "sender_full_name": "Mac",
        "timestamp": 1627492263
    },
    {
        "content": "<p>Actually, it may not be currently possible to remove a directory at all from Lean since, unless I'm mistaken, <code>std;:remove</code> (and thus <code>IO.FS.removeFile</code>) can't delete directories at all (even empty ones).</p>",
        "id": 247490945,
        "sender_full_name": "Mac",
        "timestamp": 1627493779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/IO.2EFS.2EremoveAll/near/247487569\">said</a>:</p>\n<blockquote>\n<p>While this can be partially replicated in pure Lean, it has a number of pitfalls with race conditions that a native implementation would not. </p>\n</blockquote>\n<p>Could you elaborate? The libstdc++ implementation looks straightforward/naive enough: <a href=\"https://code.woboq.org/gcc/libstdc++-v3/src/filesystem/ops.cc.html#1051\">https://code.woboq.org/gcc/libstdc++-v3/src/filesystem/ops.cc.html#1051</a></p>",
        "id": 247566182,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1627554591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/IO.2EFS.2EremoveAll/near/247490945\">said</a>:</p>\n<blockquote>\n<p>Actually, it may not be currently possible to remove a directory at all from Lean since, unless I'm mistaken, <code>std;:remove</code> (and thus <code>IO.FS.removeFile</code>) can't delete directories at all (even empty ones).</p>\n</blockquote>\n<p>Yes, we should add <code>removeDir</code></p>",
        "id": 247566237,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1627554606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/IO.2EFS.2EremoveAll/near/247566182\">said</a>:</p>\n<blockquote>\n<p>Could you elaborate? The libstdc++ implementation looks straightforward/naive enough: <a href=\"https://code.woboq.org/gcc/libstdc++-v3/src/filesystem/ops.cc.html#1051\">https://code.woboq.org/gcc/libstdc++-v3/src/filesystem/ops.cc.html#1051</a></p>\n</blockquote>\n<p>Ah, yeah, my bad. I missed this part of the C++ filesystem library <a href=\"https://en.cppreference.com/w/cpp/filesystem\">documentation</a> yesterday: </p>\n<blockquote>\n<p>The behavior is <strong>undefined</strong> if the calls to functions in this library introduce a <strong>file system race</strong>, that is, when multiple threads, processes, or computers interleave access and modification to the same object in a file system.</p>\n</blockquote>\n<p>So, you are correct, the C++ implementation doesn't avoid races either. So, <code>remove_all</code> probably could just be replicated in Lean through the use of <code>removeFile</code> and (a  new) <code>removeDir</code>.</p>",
        "id": 247573716,
        "sender_full_name": "Mac",
        "timestamp": 1627560147
    },
    {
        "content": "<p>Gotta love a stdlib where deleting a directory can trigger undefined behavior</p>",
        "id": 247573928,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1627560302
    }
]