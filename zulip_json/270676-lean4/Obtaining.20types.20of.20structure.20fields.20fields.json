[
    {
        "content": "<p>I've been trying to get some very basic things to work for my doc gen tool based on the thing <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> provided me with and am currently attempting to get information about a structure, especially its fields and their types. My current code is basically this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">envOfFile</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Environment</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"n\">Options.empty</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainModuleName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">main</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">ok</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.runFrontend</span> <span class=\"n\">input</span> <span class=\"n\">opts</span> <span class=\"n\">path.toString</span> <span class=\"n\">mainModuleName</span>\n  <span class=\"n\">unless</span> <span class=\"n\">ok</span> <span class=\"k\">do</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"could not elaborate file\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prettyPrintStructures</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">envOfFile</span> <span class=\"n\">path</span>\n  <span class=\"n\">for</span> <span class=\"n\">struct</span> <span class=\"k\">in</span> <span class=\"n\">structureExt.getEntries</span> <span class=\"n\">env</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"structure \"</span> <span class=\"bp\">++</span> <span class=\"n\">struct.structName.toString</span>\n    <span class=\"n\">for</span> <span class=\"n\">info</span> <span class=\"k\">in</span> <span class=\"n\">struct.fieldInfo</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">info.projFn</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">constInfo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"s2\">\"  \"</span> <span class=\"bp\">++</span> <span class=\"n\">info.fieldName.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\" : \"</span> <span class=\"bp\">++</span> <span class=\"n\">constInfo.type.dbgToString</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Should not happen\"</span>\n</code></pre></div>\n<p>and while it does correctly find the structures and their fields the type of the projection functions are of course not the actual types of the fields. Now I'm wondering whether I've just overlooked some function in the Lean package that lets me get these types or whether the best way to obtain this would basially be to walk the <code>Expr</code> I get from <code>constInfo.type</code> and remove the outer most foralls (since these will be used for generic structures like for example with: <code>forall {α : Type} {β : Type}, (Point α β) -&gt; β</code> + the left part of the arrow I find after getting rid of the foralls and use that as the type of the field....or whether there is a third and better way I'm not aware of to do this.</p>",
        "id": 254875749,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1632609126
    },
    {
        "content": "<p>Seconded, I wasn't able to find functionality for this. Here is an attempt that works for direct fields (i.e. no subobject fields). Getting it to work for parent fields similarly to <code>getStructureFieldsFlattened</code> would be more work since Lean does not generate projections for those, so I think we would have to recursively process parent structures.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getProjFnInfoForField</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">structName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fieldName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">ProjectionFunctionInfo</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">projFn</span> <span class=\"o\">:=</span> <span class=\"n\">getProjFnForField</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">structName</span> <span class=\"n\">fieldName</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"n\">projFn</span><span class=\"o\">,</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">env.getProjectionFnInfo</span><span class=\"bp\">?</span> <span class=\"n\">projFn</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n\n<span class=\"sd\">/-- Like `getStructureFields`, but include also the types of fields. Note that when the structure type</span>\n<span class=\"sd\">has generic parameters, the field types will contain unassigned mvars. These are returned in the second</span>\n<span class=\"sd\">tuple component. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getTypedStructureFields</span> <span class=\"o\">(</span><span class=\"n\">structName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">fields</span> <span class=\"o\">:=</span> <span class=\"n\">getStructureFields</span> <span class=\"n\">env</span> <span class=\"n\">structName</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">field</span> <span class=\"k\">in</span> <span class=\"n\">fields</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">projFn</span><span class=\"o\">,</span> <span class=\"n\">projInfo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">getProjFnInfoForField</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">structName</span> <span class=\"n\">field</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"'{structName}.{field}' has no associated projection function\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">ConstantInfo.type</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">projFn</span>\n    <span class=\"c1\">-- make mvars for parameters and the structure argument</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvars</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">cod</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaBoundedTelescope</span> <span class=\"n\">tp</span> <span class=\"o\">(</span><span class=\"n\">projInfo.numParams</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- forget the structure argument mvar</span>\n    <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"n\">ret.push</span> <span class=\"o\">(</span><span class=\"n\">field</span><span class=\"o\">,</span> <span class=\"n\">mvars.pop</span><span class=\"o\">,</span> <span class=\"n\">cod</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">ret</span>\n</code></pre></div>",
        "id": 280437507,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651111836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo₂</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"TEST\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"n\">none</span> <span class=\"k\">do</span> <span class=\"n\">getTypedStructureFields</span> <span class=\"n\">n.getId</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> #[(toFoo, (#[?_uniq.11475], Foo ?_uniq.11475)), (c, (#[?_uniq.11477], String)), (d, (#[?_uniq.11479], ?_uniq.11479 -&gt; (forall (α : Type), Foo α)))] -/</span>\n<span class=\"n\">TEST</span> <span class=\"n\">Foo₂</span>\n</code></pre></div>",
        "id": 280437593,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651111932
    },
    {
        "content": "<p>The way this is done right now in doc-gen4 (this is the way I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> recommended to me) is by parsing the type of the actual constructor like this: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process.lean#L257-L264\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process.lean#L257-L264</a></p>",
        "id": 280462327,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651135628
    },
    {
        "content": "<p>I see, thanks! Looking at the constructor is a good solution to share the index mvars between field types.</p>",
        "id": 280540575,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651172431
    },
    {
        "content": "<p>Here is a suggestion.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  Execute `k` with an array containing pairs `(fieldName, fieldType)`.</span>\n<span class=\"sd\">  `k` is executed in an updated local context which contains local declarations for the `structName` parameters.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">withFields</span> <span class=\"o\">(</span><span class=\"n\">structName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">includeSubobjectFields</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">inductInfo</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">structName</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"'{structName}' is not a structure\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">us</span> <span class=\"o\">:=</span> <span class=\"n\">info.levelParams.map</span> <span class=\"n\">mkLevelParam</span>\n  <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">info.type</span> <span class=\"k\">fun</span> <span class=\"n\">params</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withLocalDeclD</span> <span class=\"bp\">`</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">structName</span> <span class=\"n\">us</span><span class=\"o\">)</span> <span class=\"n\">params</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">fieldName</span> <span class=\"k\">in</span> <span class=\"n\">getStructureFieldsFlattened</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">structName</span> <span class=\"n\">includeSubobjectFields</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"bp\">←</span> <span class=\"n\">mkProjection</span> <span class=\"n\">s</span> <span class=\"n\">fieldName</span>\n      <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">info.push</span> <span class=\"o\">(</span><span class=\"n\">fieldName</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">proj</span><span class=\"o\">))</span>\n    <span class=\"n\">k</span> <span class=\"n\">info</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">printFieldNames</span> <span class=\"o\">(</span><span class=\"n\">structName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">includeSubobjectFields</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withFields</span> <span class=\"o\">(</span><span class=\"n\">includeSubobjectFields</span> <span class=\"o\">:=</span> <span class=\"n\">includeSubobjectFields</span><span class=\"o\">)</span> <span class=\"n\">structName</span> <span class=\"k\">fun</span> <span class=\"n\">fieldTypes</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">fieldName</span><span class=\"o\">,</span> <span class=\"n\">fieldType</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">fieldTypes</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{fieldName} : {← ppExpr fieldType}\"</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo₂</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">printFieldNames</span> <span class=\"bp\">``</span><span class=\"n\">Foo₂</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">toFoo : Foo (β × β)</span>\n<span class=\"cm\">a : Nat</span>\n<span class=\"cm\">b : β × β → β × β</span>\n<span class=\"cm\">c : String</span>\n<span class=\"cm\">d : β → (α : Type) → Foo α</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">printFieldNames</span> <span class=\"o\">(</span><span class=\"n\">includeSubobjectFields</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Foo₂</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">a : Nat</span>\n<span class=\"cm\">b : β × β → β × β</span>\n<span class=\"cm\">c : String</span>\n<span class=\"cm\">d : β → (α : Type) → Foo α</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 280623464,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651234453
    }
]