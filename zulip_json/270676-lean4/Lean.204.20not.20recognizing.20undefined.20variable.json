[
    {
        "content": "<p>I was having trouble with a particular variable that I was being told had a particular type I didn't think it should have. Interestingly, when I deleted the definition for this variable I didn't get any kind of undeclared identifier error. What is going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">abc</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">defg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">bazqux</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 319858555,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1673037227
    },
    {
        "content": "<p>I guess lean just assumes it's an implicit argument?</p>",
        "id": 319859198,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1673037485
    },
    {
        "content": "<p>That is correct you can add the following after <code>structure abc := ...</code> to inspect what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">abc.defg</span>\n<span class=\"c1\">-- abc.defg : abc → ∀ {bazqux : Nat}, foobar bazqux = 1</span>\n</code></pre></div>",
        "id": 319859761,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673037712
    },
    {
        "content": "<p>You can turn off the auto implicit feature with <code>set_option autoImplicit false</code></p>",
        "id": 319859954,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673037785
    },
    {
        "content": "<p>Some other ways you can spot this:</p>\n<ul>\n<li>If you use vscode or emacs, then the <code>bazqux</code> will be highlighted differently if it's a local variable or a constant.</li>\n<li>You can hover over <code>abc</code> (instead of writing <code>#check abc</code>) to see the extra parameter.</li>\n</ul>",
        "id": 319861232,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673038328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20not.20recognizing.20undefined.20variable/near/319861232\">said</a>:</p>\n<blockquote>\n<p>Some other ways you can spot this:</p>\n<ul>\n<li>If you use vscode or emacs, then the <code>bazqux</code> will be highlighted differently if it's a local variable or a constant.</li>\n<li>You can hover over <code>abc</code> (instead of writing <code>#check abc</code>) to see the extra parameter.</li>\n</ul>\n</blockquote>\n<p>\"hover over <code>defg</code>\", <code>abc</code> is just <code>Type</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">abc</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">defg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">bazqux</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"n\">abc</span>\n<span class=\"c1\">-- abc : Type</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">abc.defg</span>\n<span class=\"c1\">-- abc.defg : abc → ∀ {bazqux : Nat}, foobar bazqux = 1</span>\n</code></pre></div>",
        "id": 319863021,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1673038890
    },
    {
        "content": "<p>Should have tested it first.</p>",
        "id": 319863203,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673038946
    }
]