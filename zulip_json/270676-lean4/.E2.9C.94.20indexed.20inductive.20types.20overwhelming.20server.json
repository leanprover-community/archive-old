[
    {
        "content": "<p>The bottleneck is the <code>match</code>. I didn't analyze why Lean is spending so much time processing it, but it seems to have a lot of unnecessary complexity. You can write the theorem as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">BasicRel</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invariance_of_linear_extension</span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">X</span><span class=\"o\">](</span><span class=\"n\">f₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">FormalSum</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">BasicRel</span> <span class=\"n\">X</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">linear_extension</span> <span class=\"n\">f₀</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">linear_extension</span> <span class=\"n\">f₀</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">rel</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">rel</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zeroCoeff</span> <span class=\"n\">tail</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">hyp</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyp</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linear_extension</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">addCoeffs</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">tail</span>   <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linear_extension</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.right_distrib</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">step</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">r</span>       <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linear_extension</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span> <span class=\"n\">invariance_of_linear_extension</span> <span class=\"n\">f₀</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">r</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">swap</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">tail</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linear_extension</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x₂</span> <span class=\"bp\">+</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">f₀</span> <span class=\"n\">x₁</span> <span class=\"o\">:=</span>\n        <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and it is almost instantaneous on my machine.</p>",
        "id": 281676959,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652099902
    },
    {
        "content": "<p>It is the same proof, I just simplified the <code>match</code> patterns.</p>",
        "id": 281677009,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1652099930
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> . I used the complex match as I got errors claiming the pattern has the wrong type. I must have been using match incorrectly.</p>",
        "id": 281680706,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1652101576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 281681516,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652101896
    }
]