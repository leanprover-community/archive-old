[
    {
        "content": "<p>I've written <a href=\"https://gist.github.com/Trebor-Huang/386f160a35ed49430154aa4eff66d331\">some Lean 4 code</a> with this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">double_negation</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>that is purely intuitionistic. Apart from the ghastly reuse of negation as logical negation, is there anything I should know about Lean 4 that could improve the code? This implements the basics of <a href=\"https://arxiv.org/abs/1805.07518\">https://arxiv.org/abs/1805.07518</a></p>",
        "id": 315157208,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670731178
    },
    {
        "content": "<p>And if I want to go further, is there some good way I can automate parts of the theorem proving? It is mostly intuitionistic propositional logic after you unfold all the definitions, and I would probably add first order logic as well.</p>",
        "id": 315157349,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670731268
    },
    {
        "content": "<p>I have only minor stylistic changes to suggest, the proofs are all pretty trivial so there isn't much to golf</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pprop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">syn</span> <span class=\"o\">:</span> <span class=\"n\">pos</span> <span class=\"bp\">→</span> <span class=\"n\">neg</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Pprop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Pprop</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Pprop.pos</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Bool</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">False</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">True</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"kt\">Prop</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Null</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">False</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AndOp</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">and</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">P.pos</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.pos</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">P.neg</span> <span class=\"bp\">∨</span> <span class=\"n\">Q.neg</span>\n    <span class=\"n\">syn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">np</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.syn</span> <span class=\"n\">h.left</span> <span class=\"n\">np</span>\n      <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">nq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Q.syn</span> <span class=\"n\">h.right</span> <span class=\"n\">nq</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">P.neg</span><span class=\"o\">,</span> <span class=\"n\">P.pos</span><span class=\"o\">,</span> <span class=\"n\">flip</span> <span class=\"n\">P.syn</span><span class=\"o\">⟩</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">double_negation</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrOp</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">or</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">P</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"bp\">-</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tensor</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span> <span class=\"n\">where</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">P.pos</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.pos</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P.pos</span> <span class=\"bp\">→</span> <span class=\"n\">Q.neg</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q.pos</span> <span class=\"bp\">→</span> <span class=\"n\">P.neg</span><span class=\"o\">)</span>\n  <span class=\"n\">syn</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">P.syn</span> <span class=\"n\">h.left</span> <span class=\"o\">(</span><span class=\"n\">h'.right</span> <span class=\"n\">h.right</span><span class=\"o\">)</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">61</span> <span class=\"s2\">\" ⊗ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tensor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Par</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">P</span> <span class=\"bp\">⊗</span> <span class=\"bp\">-</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">54</span> <span class=\"s2\">\" ⅋ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Par</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Impl</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Pprop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">P</span> <span class=\"n\">⅋</span> <span class=\"n\">Q</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">53</span> <span class=\"s2\">\" ⊸ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Impl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tensor_sym</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⊗</span> <span class=\"n\">Q</span> <span class=\"bp\">⊸</span> <span class=\"n\">Q</span> <span class=\"bp\">⊗</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 315161068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670734947
    },
    {
        "content": "<p>Ahh using <code>where</code> for instances should have been obvious, but somehow I didn't.. Maybe I'm just not familiar enough. Thanks!</p>",
        "id": 315162172,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670736113
    }
]