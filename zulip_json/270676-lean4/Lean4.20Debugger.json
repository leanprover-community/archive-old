[
    {
        "content": "<p>When I'm learning new software one thing I really like to do is compile the program in debug mode and then step through the program and observe the values of variables. Has there been thought to making this kind of thing possible for lean4? </p>\n<p>I know that this can be problematics in the presence of generics or polymorphism. Languages like OCaml and Java erase generic parameters so there is not enough information at runtime to know the exact types of variables. When I worked for Microsoft I worked on the Bartok compiler that was written in C#. One nice thing about the .Net infrastructure is that each object had a pointer to information about its type. On the other hand, this can lead to memory overhead, since I recall some programs where the size of the metadata was as large as the code.</p>\n<p>I'm just starting to study the lean4 implementation, but wonder if there would be a way to tweak it, perhaps just in a \"debug\" mode, so that polymorphic functions were passed type parameters as well as non-type parameters at runtime. This implies that there would be some kind of \"runtime type information\". This would then give enough information that a debugger could display the types and values of variables.</p>\n<p>It would also be nice if the emitted C files had preprocessor directives pointing to the lean source locations so that stepping through the C code could point to the original lean source. Of course, that would not be helpful if you did not have visibility to the local variables that correspond to the lean environment. </p>\n<p>I know this would be a major project. I was just wondering if this is something others think is desirable and if anyone is willing to fund such an effort. I'd be happy to work on such a project if someone would fund it.</p>",
        "id": 264073026,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638911669
    },
    {
        "content": "<p>In thinking about how to support a native code debugger, I think a possible first step would be to provide an LLVM backend for lean4. This would provide a vehicle for supplying the debug information and would get you ports to the machines supported by LLVM. It would probably also be required to make some extensions to Dwarf for lean4. At the moment I don't see an easy path to debugger support without some thing like LLVM.</p>",
        "id": 264076497,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638913203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296262\">Richard L Ford</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20Debugger/near/264076497\">said</a>:</p>\n<blockquote>\n<p>At the moment I don't see an easy path to debugger support without some thing like LLVM.</p>\n</blockquote>\n<p>I don't know if Lean4 has debug message hooks but that should work. If Lean4 is missing them then they can be added.  If it has hooks and more or needed then they could be added.</p>",
        "id": 264077486,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638913666
    },
    {
        "content": "<p>I just discovered <a href=\"https://github.com/tydeu/lean4-papyrus\">Papyrus</a> which is a work-in-progress for an LLVM interface to Lean 4. So it look like some thought has been given to relating LLVM to lean4.</p>",
        "id": 264083345,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638916341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296262\">@Richard L Ford</span> Please take my word with a grain of salt because I am very new to Lean, but I think a debugger will be more desirable when/if Lean 4 gets more traction for general purpose programming. As of now the most common use case is theorem proving (not much about variable values... it's more about their types)</p>",
        "id": 264083414,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638916377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, that is probably true. The reason I would want it now is for studying Lean itself. It would be interesting to be able to step through Lean and watch it in action. That might even be helpful for the Lean developers.</p>",
        "id": 264083882,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638916634
    },
    {
        "content": "<p>I see. I guess Leonardo and Sebastian would know better how a debugger would help on Lean development. I can only imagine how cool it would be to see Lean's reasoning process from inside</p>",
        "id": 264084494,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638917011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20Debugger/near/264084494\">said</a>:</p>\n<blockquote>\n<p>I see. I guess Leonardo and Sebastian would know better how a debugger would help on Lean development. I can only imagine how cool it would be to see Lean's reasoning process from inside</p>\n</blockquote>\n<p>If you're interested in \"just\" the reasoning part the tracing stuff that is provided already shows a ton of what is going on...and most of it is really not that interesting (from a user perspective) unless you are specifically searching for a bug.</p>",
        "id": 264086737,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1638918278
    },
    {
        "content": "<p>Note that lean 3 had a VM debugger, but it never got any serious use and was basically abandoned</p>",
        "id": 264147929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638966811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, you mean a debugger that works on the bytecode? Does it still exist. Can it be used?</p>",
        "id": 264155503,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638970674
    },
    {
        "content": "<p>Yes it still exists, but don't ask me how to use it because I only tried once and I've never seen anyone else use it. I think it was mainly written as a case study for one of the lean papers</p>",
        "id": 264155691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638970746
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/library/tools/debugger/cli.lean\">https://github.com/leanprover-community/lean/blob/master/library/tools/debugger/cli.lean</a></p>",
        "id": 264155883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638970818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. Thanks. I'll take a look. It at least illustrates another approach. I seem to remember in a talk (by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think, though I could be mistaken) that he mentioned that lean3 had more uptake from mathematicians than computer scientists, but that since lean4 has more programming facilities that he expected it to be used more for programming. In that case I think a debugger would be more important.</p>",
        "id": 264156473,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638971084
    },
    {
        "content": "<p>I can believe I said some such thing.</p>",
        "id": 264156606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638971128
    },
    {
        "content": "<p>I think that debugging is generally harder in functional languages. Haskell and OCaml both have dubious debugging functionality</p>",
        "id": 264156620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638971133
    },
    {
        "content": "<p>printf debugging seems to be the norm</p>",
        "id": 264156671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638971150
    },
    {
        "content": "<p>But the interactivity you get from a repl / <code>#eval</code> makes up for it to some extent</p>",
        "id": 264156760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638971182
    },
    {
        "content": "<blockquote>\n<p>I think that debugging is generally harder in functional languages. Haskell and OCaml both have dubious debugging functionality?</p>\n</blockquote>\n<p>I agree with that. In OCaml, the bytecode debugger works somewhat OK if you are not in a polymorphic context but then it fails to show values of variables. And it is not supported in a multi-threading environment, though there is a push to merge multi-core OCaml  into the main-line, so I would hope they will make the debugger work with multi-core.</p>",
        "id": 264156789,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638971205
    },
    {
        "content": "<p>FWIW, according to <a href=\"https://leanprover.github.io/lean4/doc/dev/debugging.html#debuggers\">the docs</a>, GDB is usable with Lean 4 (I haven't tried this yet). I did however recently use perf for optimizing <a href=\"https://github.com/leanprover/lean4/blob/58692836940fc8f9a9ff41c1ffb674cbb89c700d/tests/bench/liasolver.lean\">this small arithmetic benchmark</a>, and it worked very well.</p>",
        "id": 264157555,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1638971584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>, I have used gdb to step through the lean 4 C code. And I used the python gdb macros to help display the lean data structures somewhat. So it is somewhat doable, but to understand what is happening you need to have the lean code in one window and the C code in another, so you can correlate the lean identifiers with the x_1 (etc.) variables in C.</p>",
        "id": 264157862,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1638971748
    },
    {
        "content": "<p>I think those variables may also show up in the IR output, which is maybe a bit closer to the source than the C code. You can look at the generated IR of a function with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>before the function.</p>",
        "id": 264158125,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1638971876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20Debugger/near/264158125\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I see the <a href=\"https://leanprover.github.io/reference/lean_reference.pdf\">Lean manual</a> list <code>set_option</code>s but not the one noted. Is there a way/place to see the entire list? Or does one have to <a href=\"https://linux.die.net/man/1/grep\">GREP</a> the source code?</p>",
        "id": 264159492,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638972456
    },
    {
        "content": "<p><code>set_option</code> has autocomplete, that's what I normally use</p>",
        "id": 264159653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638972522
    },
    {
        "content": "<p>I don't know if it still works, but <a href=\"#narrow/stream/270676-lean4/topic/.23help/near/221643103\">this snippet</a> used to list all the options.</p>",
        "id": 264161110,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1638973159
    },
    {
        "content": "<p>Yes, we want to support a debugger in the future, but it is a low priority right now. The current code generator does not preserve sufficient information. Moreover, part of the code generator has not been ported to Lean yet and is still written in C++. This is a big project, and we also want to fix other compiler-related issues. Some of these issues are recorded as part of our \"Compiler Refactoring\" project: <a href=\"https://github.com/leanprover/lean4/projects/4\">https://github.com/leanprover/lean4/projects/4</a><br>\nOur current priority is the Mathlib port and then better automation for Lean 4. It is hard to predict, but I think we will only be able to work on the \"Compiler Refactoring\" project (and then the debugger) one year from now.</p>",
        "id": 264244446,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1639012438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>, thanks for the update. </p>\n<p>Today I was looking at the code that emits C today and the code seems to be using only a limited set of C features. It seems like it would not be too hard to take that code and modify it to emit the text form of LLVM. I'm not sure if getting it into SSA form would be a problem, and the jump points would be for jumps between basic blocks (if I understand the code correctly). Of course that would just be a first step, but it might be able to produce something that is interoperable with the C++ part (which could also emit LLVM if using clang). </p>\n<p>I must say I'm really impressed with Lean4. I've been kind of watching it from afar waiting for it to released. Today I also reread the paper Counting Immutable Beans and it of course was valuable in understanding the IR. I'm excited to start using Lean4</p>",
        "id": 264253112,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1639021437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296262\">@Richard L Ford</span> IIUC this is what <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> 's <a href=\"https://github.com/tydeu/lean4-papyrus/\">Papyrus</a> project is doing</p>",
        "id": 264253216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639021548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> yeah, my next big use case was going to be writing an LLVM emitter for Lean. I just unfortunately got side-tracked by Lake.</p>",
        "id": 264253380,
        "sender_full_name": "Mac",
        "timestamp": 1639021697
    },
    {
        "content": "<p>My hope is to get back to work on Papyrus in the new year.</p>",
        "id": 264253408,
        "sender_full_name": "Mac",
        "timestamp": 1639021733
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"270523\">@Huá»³nh Tráº§n Khanh</span> in response to your question about Cranelift, notice that you can also JIT using an in-lean LLVM emitter, see the Papyrus readme</p>",
        "id": 264253454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639021794
    },
    {
        "content": "<p>so I would be inclined to put resources into that rather than cranelift integration (not that anything is wrong with cranelift, it's a nice compiler, but it's not innately a better target than LLVM)</p>",
        "id": 264253550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639021915
    }
]