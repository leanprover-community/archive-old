[
    {
        "content": "<p>I want to parse numbers such as <code>i32</code> within a macro. Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">inum</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"i\"</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">inum</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"inum% \"</span> <span class=\"n\">inum</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inum</span><span class=\"bp\">%</span> <span class=\"n\">i</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">numLit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- def fooNoSpace : Int := (inum% i10)</span>\n<span class=\"kd\">def</span> <span class=\"n\">fooSpace</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inum</span><span class=\"bp\">%</span> <span class=\"n\">i</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p><code>fooSpace</code> does work and prints <code>10 + 42</code>. <code>fooNoSpace</code> errors out with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">crash.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">inum</span>\n</code></pre></div>\n<p>How should I change the macro to allow definitions like <code>i32</code> or <code>i10</code>?</p>",
        "id": 255690546,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633064460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> as <code>i32</code> is already  an <code>ident</code>, you need a custom parser. I wrote one already for my LLVM IR DSL. The code I used to do so is here: <a href=\"https://github.com/tydeu/lean4-papyrus/blob/master/Papyrus/Script/IntegerType.lean\">https://github.com/tydeu/lean4-papyrus/blob/master/Papyrus/Script/IntegerType.lean</a></p>",
        "id": 255694831,
        "sender_full_name": "Mac",
        "timestamp": 1633068426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Thanks a lot for the pointer. I'm trying to understand how everything fits together. What invokes the <a href=\"https://github.com/tydeu/lean4-papyrus/blob/e7defabc928f7dd8bdcfc6dbef5da95c80f4e4bc/Papyrus/Script/IntegerType.lean#L85-L86\"><code>decodeIntTypeLit?</code></a> function? I find <a href=\"https://github.com/tydeu/lean4-papyrus/search?q=decodeIntTypeLit\">zero uses</a> of this function, so I imagine this has to be invoked by some sort of hook?</p>",
        "id": 255838050,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633146609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> oops, nope. I think that is just a leftover from an earlier version of the code.</p>",
        "id": 255839370,
        "sender_full_name": "Mac",
        "timestamp": 1633148034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> is there another example I could take a look at, in that case?</p>",
        "id": 255880304,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633190515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> what do you mean (i.e., what kind of example would you like)? </p>\n<p>After then macro at the end of that file  the syntax<code>i32</code> will expand to <code>integerType 32</code>. If you  wanted to change that to, for example. <code>foo 32</code> you would by changing <code>expandInTypeLitAsType</code> to, for example, an <code>expandIntTypeLitAsFoo</code> which is defined like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expandIntTypeLitAsFoo</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkCAppFrom</span> <span class=\"n\">stx</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">expandIntTypeLitAsNatLit</span> <span class=\"n\">stx</span><span class=\"o\">]</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">intTypeLit</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expandIntTypeLitAsFoo</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 255880957,
        "sender_full_name": "Mac",
        "timestamp": 1633191166
    }
]