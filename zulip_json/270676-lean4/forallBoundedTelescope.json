[
    {
        "content": "<p>Is there a lambda equivalent for  <code>forallBoundedTelescope</code> ?</p>",
        "id": 271697249,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644684365
    },
    {
        "content": "<p>there's <code>lambdaTelescope</code></p>",
        "id": 271698409,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1644685845
    },
    {
        "content": "<p>Well, yes, but it's not bounded</p>",
        "id": 271698614,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644686129
    },
    {
        "content": "<p>Note that, <code>forallBoundedTelescope</code> may try to reduce the given type to make sure we have the requested number of binders. We rely on this feature in many different places. On the other hand, <code>lambdaTelescope</code> does not reduce the input expression. It just \"consumes\" the binders of the lambda expression. This is what we needed to implement Lean.<br>\nNote that it may be quite expensive to unfold arbitrary expressions, and we try to avoid it.</p>",
        "id": 271699088,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644686787
    },
    {
        "content": "<p>Hmm, so is there something like telescope, but for only one binder ?</p>",
        "id": 271699268,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644687092
    },
    {
        "content": "<p>We have <code>withLocalDecl</code>. Here are some code that may be useful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lambdaBoundedTelescope</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lambdaTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">:]</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst1</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">``</span><span class=\"n\">List.map</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"n\">lambdaBoundedTelescope</span> <span class=\"n\">info.value</span> <span class=\"mi\">1</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lambdaTelescope1</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Expr.lam</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"lambda expected{indentExpr e}\"</span>\n  <span class=\"n\">withLocalDecl</span> <span class=\"n\">n</span> <span class=\"n\">d.binderInfo</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tst2</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ConstantInfo.defnInfo</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">``</span><span class=\"n\">List.map</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"n\">lambdaTelescope1</span> <span class=\"n\">info.value</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tst2</span>\n</code></pre></div>",
        "id": 271699492,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1644687419
    },
    {
        "content": "<p>there's also a <code>withLocalDecls</code> as a list version. Bit complicated type, because of dependent binders.</p>",
        "id": 271700233,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1644688318
    }
]