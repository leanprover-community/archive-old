[
    {
        "content": "<p>Can I somehow rewrite <code>f (h ▸ b)</code> to <code>(h ▸ f b)</code>? I'm not even sure it is meaningful as I do not fully understand what <code>▸</code> does. Concretely, in my case <code>f = PSigma.fst</code> and I would like to reduce <code>PSigma.fst (h ▸ {fst := x, snd := y})</code> to <code>h ▸ x</code>. How can I achieve that?</p>",
        "id": 254627881,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632444063
    },
    {
        "content": "<p>Assuming that the statement typechecks, you should be able to prove this with <code>cases h; rfl</code></p>",
        "id": 254629145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632445030
    },
    {
        "content": "<p>What is the type of <code>h</code> in your example?</p>",
        "id": 254629180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632445075
    },
    {
        "content": "<p>This is the sort of goal you want to avoid having in the first place</p>",
        "id": 254629231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632445090
    },
    {
        "content": "<p>The concrete term is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PSigma.fst</span>\n      <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Impl</span> <span class=\"o\">(</span><span class=\"n\">subs</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">)</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">))</span> <span class=\"n\">_root_.id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Impl</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">▸</span>\n        <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">snd</span> <span class=\"o\">:=</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n            <span class=\"n\">subs</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">)</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">))</span> <span class=\"n\">_root_.id</span> <span class=\"bp\">=</span>\n              <span class=\"n\">subs</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">)</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">))</span> <span class=\"n\">_root_.id</span><span class=\"o\">)</span> <span class=\"o\">})</span>\n      <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Impl</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 254630045,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632445681
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 254636987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632447434
    },
    {
        "content": "<p>I will try to produce one, but it will take me some time. For now, I have managed to avoid the problem as you have suggested :)</p>",
        "id": 254717624,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1632495462
    }
]