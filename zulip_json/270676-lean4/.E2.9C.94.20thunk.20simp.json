[
    {
        "content": "<p>Thank you that helps a lot :)</p>",
        "id": 309435147,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668333358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> has marked this topic as resolved.</p>",
        "id": 309435192,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668333364
    },
    {
        "content": "<p>Is there a way to also remember as a hypothesis that <code>a = { fn := fun _ =&gt; a.get }</code></p>",
        "id": 309435999,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668334003
    },
    {
        "content": "<p>it's provably true, so you can <code>have</code> it and prove it by <code>ext</code></p>",
        "id": 309436366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668334255
    },
    {
        "content": "<p>My instinct is also saying <code>have</code> should work, but <code>ext</code> seems to be unknown.</p>\n<p>So let me give a proper example so it is a bit more clear where I am getting stuck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x.get</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lex_left_identity</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span>\n  <span class=\"n\">lex</span> <span class=\"n\">Ordering.eq</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lex_right_identity</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span>\n  <span class=\"n\">lex</span> <span class=\"n\">a</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lex</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a.get</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">gt</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>Tactic State</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">eq</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"o\">{</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ordering.eq</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>As you see it has been totally forgotten that <code>a = Thunk.mk fun _ =&gt; Ordering.eq</code></p>",
        "id": 310611380,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668692470
    },
    {
        "content": "<p>use <code>cases h : a.get with ...</code></p>",
        "id": 310611625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668692548
    },
    {
        "content": "<p>Awesome that works :D</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lex_right_identity</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span>\n  <span class=\"n\">lex</span> <span class=\"n\">a</span> <span class=\"n\">Ordering.eq</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lex</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a.get</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 310612675,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668692916
    }
]