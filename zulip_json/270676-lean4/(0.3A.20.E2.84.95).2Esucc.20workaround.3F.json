[
    {
        "content": "<p>(deleted)</p>",
        "id": 250705893,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1629939874
    },
    {
        "content": "<p>Lean3 I can write this, but not in Lean4 is there a workaround?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">one_eq_succ_zero</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 250706019,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1629939978
    },
    {
        "content": "<p>Do you get the same error when you paste this in an empty file? <br>\nIt is likely that something on the next line causes this error, because Lean thinks you're applying <code>(0: ℕ).succ</code> to whatever is on the next line.</p>",
        "id": 250708466,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629942471
    },
    {
        "content": "<p>Oh wow, you are right, thanks.  I had lots of fun with the Natural Number Game and now I'm trying to port my answers to Lean 4... and my follow on syntax for a lemma is incorrect.  This bogus error on previous line thing is not very friendly... can that be fixed?</p>",
        "id": 250845714,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1630014645
    },
    {
        "content": "<p>lean will often be able to catch this due to whitespace sensitivity, but you have to be in a context that introduces a <code>colGt</code> scope, like <code>by</code></p>",
        "id": 250845902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630014746
    },
    {
        "content": "<p>in other words, if you inserted <code>by exact</code> before the type, it would probably not get confused like this</p>",
        "id": 250845986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630014803
    },
    {
        "content": "<p>Harumph.  Sounds like the answer is \"it's hard\" because of the lean language syntax.  By the way what is the lean4 equivalent of this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 250846443,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1630015038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_succ</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 250846879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630015243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434989\">Chris Lovett</span> <a href=\"#narrow/stream/270676-lean4/topic/.280.3A.20.E2.84.95.29.2Esucc.20workaround.3F/near/250846443\">said</a>:</p>\n<blockquote>\n<p>Harumph.  Sounds like the answer is \"it's hard\" because of the lean language syntax.</p>\n</blockquote>\n<p>Actually, it's closer to \"it used to be impossible, now it is possible but requires specific accomodation in the grammar\"</p>",
        "id": 250847046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630015320
    },
    {
        "content": "<p>In lean 3, the main mechanism for avoiding this is command keywords like <code>theorem</code> or <code>lemma</code>, which always end the previous definition no matter where it is written. I'm guessing that you discovered that <code>lemma</code> is no longer a command keyword in lean 4; if you use mathlib4 then <code>lemma</code> will be a command keyword</p>",
        "id": 250848926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630016120
    },
    {
        "content": "<p>I'm getting a syntax error on add_zero, is my add_zero axoim correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/RFkUrJmwuxsT1Hl9STLPMeWW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RFkUrJmwuxsT1Hl9STLPMeWW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RFkUrJmwuxsT1Hl9STLPMeWW/image.png\"></a></div>",
        "id": 250872049,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1630030906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 250875784,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1630033563
    }
]