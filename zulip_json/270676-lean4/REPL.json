[
    {
        "content": "<p>Do we have a REPL (read–eval–print loop) for lean4? or is there a plan to exist?</p>",
        "id": 222159220,
        "sender_full_name": "Petrica Chiriac",
        "timestamp": 1610178161
    },
    {
        "content": "<p>The ability to use that would require typing a line of code perfectly without looking at the error message, which I believe only a handful in this community can do.</p>",
        "id": 222159540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610178856
    },
    {
        "content": "<p>There is not a REPL nor plans to write one afaik.  I think it would have very limited utility.<br>\nI had thought I wanted a REPL when I first started using Lean, but once you have development environment integration working there isn't a need.  If you want to interactively evaluate a term or print the type of an expression it is easier  to quickly type commands like <code>#eval</code> or <code>#check</code> in your buffer then to switch to a terminal and use a REPL.</p>",
        "id": 222160308,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1610180280
    },
    {
        "content": "<p>Also <code>#eval foo</code> updates automatically when you tweak <code>foo</code>. Continuous compilation is awesome.</p>",
        "id": 222160357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610180349
    },
    {
        "content": "<p>Just for the sake of clarification: is there any active Lean REPL project you're aware of?</p>",
        "id": 258359414,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733642
    },
    {
        "content": "<p>Ah, I guess the thread speaks by itself :D</p>",
        "id": 258359670,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1634733767
    },
    {
        "content": "<p>I'm trying to treat specific REPL commands <a href=\"https://github.com/arthurpaulino/LeanREPL/blob/b0f1628327d930d679970f0242cbd9cb8a55a797/Main.lean#L42\">here</a>.<br>\nFor instance, <code>\"!quit\"</code> and <code>\"!reset\"</code>.</p>\n<p><code>\"!quit\"</code> is easy because I just need to break the loop. But <code>\"!reset\"</code> is supposed to start the loop again from a fresh environment. Is it possible to do so?</p>",
        "id": 268268031,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642424977
    },
    {
        "content": "<p>I tried throwing an error from <code>loop</code> but I wasn't able to catch it in <code>runCommandElabM</code></p>",
        "id": 268270245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642426122
    },
    {
        "content": "<p>For <code>!reset</code>, maybe you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Init</span> <span class=\"o\">}]</span> <span class=\"o\">{}</span>\n      <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n      <span class=\"n\">loop</span>\n</code></pre></div>",
        "id": 268284780,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1642433255
    },
    {
        "content": "<p>For <code>!quit</code>, maybe simply do not call <code>loop</code> recursively?</p>",
        "id": 268285076,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1642433384
    },
    {
        "content": "<p><code>Environment</code> is a persistent data structure, no need to recreate it. You can simply store the initial one in a variable.</p>",
        "id": 268285320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642433484
    },
    {
        "content": "<p>Thanks for both ideas!</p>",
        "id": 268286761,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642434205
    },
    {
        "content": "<p>Alright, I was able to do this:<br>\n<a href=\"https://github.com/arthurpaulino/LeanREPL\">https://github.com/arthurpaulino/LeanREPL</a><br>\nThanks for the help everyone!</p>\n<p>I'd also like to know what you guys think about having something like this bundled in the Lean 4 binary so one could simply call:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean --repl\n</code></pre></div>\n<p>I know it's not very useful for theorem proving, but it can allow people to build computational environments for Lean on top of it. For example, one possibility is making a Lean 4 kernel for Jupyter and having an extension that does the job of the Lean Infoview inside the Jupyter interface. Or if Jupyter is not plastic enough, another possibility is building an app dedicated for Lean 4.</p>\n<p>Such environment would be suitable for applications that use libraries like Tomas' <a href=\"https://github.com/lecopivo/SciLean\">SciLean</a></p>",
        "id": 268320027,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642457991
    }
]