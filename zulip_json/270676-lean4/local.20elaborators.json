[
    {
        "content": "<p>If I have a function to elaborate a <code>def</code> command, is there an attribute I can apply to it (possibly with keyword <code>local</code>) so that in a given namespace or section it gets used instead of the built-in elaborator for <code>def</code>?</p>",
        "id": 273420379,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645989577
    },
    {
        "content": "<p>Are you replacing the <code>def</code> elaborator entirely?</p>",
        "id": 273420452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645989665
    },
    {
        "content": "<p>if so, you can accomplish this by making a high priority syntax which overrides <code>def</code></p>",
        "id": 273420499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645989724
    },
    {
        "content": "<p>Yes but I'd like to do the replacement in the elaborator of <code>myfunky_namespace</code>, that's why it seems like applying an attribute inside the elaborator seems like the most straightforward option</p>",
        "id": 273420692,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645990033
    },
    {
        "content": "<p>More specifically, I wand to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elabMyFunkyNamespace</span> <span class=\"o\">:</span> <span class=\"n\">AllTheProperTypes</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"kn\">namespace</span> <span class=\"n\">foo</span><span class=\"o\">))</span>\n<span class=\"c1\">-- apply attribute to my ready-to-go `def`-elaborator substitute</span>\n</code></pre></div>",
        "id": 273420765,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645990126
    },
    {
        "content": "<p>I don't think it's possible to give <code>elab</code> overrides for existing syntax, but I could be wrong</p>",
        "id": 273421088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645990432
    },
    {
        "content": "<p>Yeah, I was afraid of that. I'd rather not copy / paste the parsing code for <code>declaration</code>. Let's bite that bullet for now</p>",
        "id": 273421794,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645991495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/local.20elaborators/near/273421088\">said</a>:</p>\n<blockquote>\n<p>I don't think it's possible to give <code>elab</code> overrides for existing syntax, but I could be wrong</p>\n</blockquote>\n<p>It is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"eval thyself\"</span>\n</code></pre></div>",
        "id": 273421937,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645991709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Are you looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"n\">scoped</span> <span class=\"n\">elab_rules</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>or does it need to be more dynamic than that?</p>",
        "id": 273422011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645991830
    },
    {
        "content": "<p>Nice!</p>\n<p>What I'm looking for would be more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kn\">local</span> <span class=\"n\">elab_rules</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'm using <code>constant</code> to create an <code>opaque</code> definition and this kind of namespace allows you to temporarily make the definition transparent (read: make definition about the underlying term of the <code>constant</code>). Every <code>def</code> in that section needs to do the normal thing in addition to transporting all the definition to use the opaque type. When you encounter <code>end</code>, the elaborator should disappear.</p>",
        "id": 273422332,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645992098
    },
    {
        "content": "<p>Cool, I just tried and the following matches my declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"s2\">\"my elab\"</span>\n</code></pre></div>",
        "id": 273422580,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645992437
    },
    {
        "content": "<p>One more detail <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> : when I include <code> `($d:declaration) </code> inside a command quasi-quotation, it kind of looks like it's going to try to splice something called <code>d</code> right in that pattern. How do I make sure it looks like a bound variable?</p>",
        "id": 273423657,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645993949
    },
    {
        "content": "<p>If I understood you correctly, you'll want to move the antiquotation one level deeper: <code>$$d:declaration</code></p>",
        "id": 273423729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645994068
    },
    {
        "content": "<p>Ah ok! I think we're on the same page but just to spell this out: I'm creating a quasi-quotation of a list of commands in which I splice nothing. Inside that quasi-quotation, there will be a syntax pattern for declaration inside a <code>elab_rules</code> command. That pattern needs to bind variable <code>d</code> and that's what the anti-quotation of level 2 will accomplish. Makes sense?</p>\n<p>Also, am I using the quotation vocabulary correctly?</p>",
        "id": 273423889,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645994325
    },
    {
        "content": "<p>Sounds good, though splicing is usually reserved to inserting a sequence of elements I believe</p>",
        "id": 273423993,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645994467
    },
    {
        "content": "<p>Ah I see. Thanks! So \"anti-quotation\" is what I should call those?</p>",
        "id": 273424055,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1645994528
    },
    {
        "content": "<p>Yes</p>",
        "id": 273424070,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1645994566
    }
]