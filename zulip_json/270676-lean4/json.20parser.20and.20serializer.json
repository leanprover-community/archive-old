[
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/json.20parse.20and.20serializer\">#lean4 &gt; json parse and serializer</a> by <span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span>.</p>",
        "id": 312400529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669500503
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">version</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">module</span>  <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toJson</span> <span class=\"o\">{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span> <span class=\"c1\">-- {\"version\": 1, \"module\": \"test\"}</span>\n</code></pre></div>\n<p>Please post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> next time, not screenshots of your code.</p>",
        "id": 312401293,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1669501183
    },
    {
        "content": "<p>Thank you and sorry for the screenshot, I was trying to make clear the errors.</p>",
        "id": 312420637,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1669519827
    },
    {
        "content": "<p>You should have unfolded \"All Messages\" then :)</p>",
        "id": 312445033,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669542499
    },
    {
        "content": "<p>How? Do you mean in the Lean Infoview panel? In Emacs I would probably open the <code>Flycheck errors</code> and copy from there.</p>",
        "id": 312602260,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1669633469
    },
    {
        "content": "<p>Click on \"All messages\" in the infoview panel.</p>",
        "id": 312602676,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1669633588
    },
    {
        "content": "<p>Thank you, sorry for the mess. Anyway, back to the main problem... now trying to go one step further, write the json in a file and read json objects one-by-one from a text file (one object per line, json-lines format).... directions for read/write files primitives and parsing ?! </p>\n<p>I was able to parse with the Json.parse, nice. So now Just need to get to read/write files. I am trying to understand the Lean implementation comparing it to Aeson. If I got it right,  the type Json correspond to the <a href=\"https://hackage.haskell.org/package/aeson-2.1.1.0/docs/Data-Aeson.html#g:3\">Value</a> type from Aeson, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Json.parse</span> <span class=\"s2\">\"{</span><span class=\"se\">\\\"</span><span class=\"s2\">name</span><span class=\"se\">\\\"</span><span class=\"s2\"> : </span><span class=\"se\">\\\"</span><span class=\"s2\">alexandre</span><span class=\"se\">\\\"</span><span class=\"s2\">, </span><span class=\"se\">\\\"</span><span class=\"s2\">telefone</span><span class=\"se\">\\\"</span><span class=\"s2\">: 12}\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 312606323,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1669634904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span> <a href=\"#narrow/stream/270676-lean4/topic/json.20parser.20and.20serializer/near/312602260\">said</a>:</p>\n<blockquote>\n<p>How? Do you mean in the Lean Infoview panel? In Emacs I would probably open the <code>Flycheck errors</code> and copy from there.</p>\n</blockquote>\n<p>there's also an <a href=\"https://github.com/leanprover/lean4-mode\">Emacs mode</a> for Lean (although you wouldn't use Flycheck errors there but you get a <em>Lean Goal</em> buffer that has those)</p>",
        "id": 312637271,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669644886
    },
    {
        "content": "<p>to do I/O and read from or write to files you can use the <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L348\">IO monad</a>, also just like in Haskell.</p>",
        "id": 312638113,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669645125
    },
    {
        "content": "<p>you can't do it as simply with <code>#check</code> like that, it'd be easier to compile your main function (with lake) and test it there, but if you want to do it with the infoview too you can call IO from <code>#eval</code> <del>a (metaprogramming) command. I wouldn't recommend going there first though, just use lake</del></p>",
        "id": 312638561,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1669645255
    },
    {
        "content": "<p><code>#eval</code> does <code>IO</code> just fine</p>",
        "id": 312638933,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669645335
    },
    {
        "content": "<p>How to report a bug? Not sure if a bug or an expected behavior. Haskell Aeson parse empty strings, but Lean reports error.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">λ</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">fromStrict</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Maybe</span><span class=\"w\"> </span><span class=\"kt\">Value</span><span class=\"w\"></span>\n<span class=\"kt\">Nothing</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now Lean reports an error in the second case, it seems that Json.parse can't deal with empty string:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Json.parse</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>shows <code>error: offset 0: unexpected end of input</code></p>",
        "id": 316144031,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1671139551
    },
    {
        "content": "<p>It seems to me that both Aeson and Lean are telling you the empty string is not valid JSON (which I believe is correct).</p>",
        "id": 316144535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671139737
    },
    {
        "content": "<p>Yes, the json for an empty string would be the two characters <code>\"\"</code> which to write in lean is <code>\"\\\"\\\"\"</code></p>",
        "id": 316145072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671139919
    },
    {
        "content": "<p>But the Haskell decode gives me a Maybe value. Not an error. Lean gives me an error.</p>",
        "id": 316145210,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1671139959
    },
    {
        "content": "<p>the Maybe is the error</p>",
        "id": 316145279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671139981
    },
    {
        "content": "<p>Aeson is just less specific about the kind of error than lean</p>",
        "id": 316145318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671139999
    },
    {
        "content": "<p>(honestly a parser that only yields <code>Maybe T</code> is pretty barebones and I am surprised a production library would do that)</p>",
        "id": 316145554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671140097
    },
    {
        "content": "<p>I see your point, they could have used <code>Either</code>, right?</p>",
        "id": 316145718,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1671140156
    },
    {
        "content": "<p>Looks like Aeson does provide an Either-returning variant but you have to call <code>eitherDecode</code> instead of <code>decode</code></p>",
        "id": 316145909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671140218
    },
    {
        "content": "<p>Hum, that is quite interesting! Using Aeson for a while but I didn't realize that problem! Lean just educated me to be more careful. Reproducing Lean behaviors in Haskell:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">λ</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">eitherDecode</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">fromStrict</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\\"\\\"</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Either</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"w\"> </span><span class=\"kt\">Value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">Right</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nf\">λ</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">eitherDecode</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">fromStrict</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Either</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"w\"> </span><span class=\"kt\">Value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"kt\">Left</span><span class=\"w\"> </span><span class=\"s\">\"Error in $: not enough input\"</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316146522,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1671140405
    },
    {
        "content": "<p>This post made me revisit whether the one issue I found using <a href=\"https://github.com/nst/JSONTestSuite\">a JSON test suite</a> is fixed now, namely that <code>readFile</code> filters out NUL. Looks like this tiny issue is still there, as parsing <code>n_multidigit_number_then_00.json</code> still succeeds <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 316157302,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1671144655
    },
    {
        "content": "<p>I don't think I ever ran the transform tests, but there seems to be some weirdness with invalid codepoints that might be worth investigating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test_transform</span><span class=\"bp\">\\</span><span class=\"n\">string_1_escaped_invalid_codepoint.json</span><span class=\"o\">:</span> <span class=\"n\">ok</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"㠀\"</span><span class=\"o\">]</span>\n<span class=\"n\">test_transform</span><span class=\"bp\">\\</span><span class=\"n\">string_1_invalid_codepoint.json</span><span class=\"o\">:</span> <span class=\"n\">ok</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"A\"</span><span class=\"o\">]</span>\n<span class=\"n\">test_transform</span><span class=\"bp\">\\</span><span class=\"n\">string_2_escaped_invalid_codepoints.json</span><span class=\"o\">:</span> <span class=\"n\">ok</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"㠀㠀\"</span><span class=\"o\">]</span>\n<span class=\"n\">test_transform</span><span class=\"bp\">\\</span><span class=\"n\">string_2_invalid_codepoints.json</span><span class=\"o\">:</span> <span class=\"n\">ok</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"AA\"</span><span class=\"o\">]</span>\n<span class=\"n\">test_transform</span><span class=\"bp\">\\</span><span class=\"n\">string_3_escaped_invalid_codepoints.json</span><span class=\"o\">:</span> <span class=\"n\">ok</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"㠀㠀㠀\"</span><span class=\"o\">]</span>\n<span class=\"n\">test_transform</span><span class=\"bp\">\\</span><span class=\"n\">string_3_invalid_codepoints.json</span><span class=\"o\">:</span> <span class=\"n\">ok</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"AAA\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 316158420,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1671145136
    },
    {
        "content": "<p>(This is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">System.FilePath</span>\n<span class=\"kn\">open</span> <span class=\"n\">IO.FS</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">filePaths</span> <span class=\"bp\">←</span> <span class=\"n\">walkDir</span> <span class=\"o\">⟨</span><span class=\"s2\">\"test_transform\"</span><span class=\"o\">⟩</span>\n  <span class=\"n\">for</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">filePaths</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">readFile</span> <span class=\"n\">p</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{p}: {Lean.Json.parse c}\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>\n<p>btw)</p>",
        "id": 316158700,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1671145273
    },
    {
        "content": "<p>I ended up implementing in Haskell what I tried for 1-2 days in Lean. The Haskell code is <a href=\"https://gist.github.com/arademaker/35c9025f61bb5499eef65649bf0a8a65\">https://gist.github.com/arademaker/35c9025f61bb5499eef65649bf0a8a65</a>. But I would like to understand what can or still can't be ported to Lean.</p>\n<p>The idea is simple. Read a JSON-lines file with a single JSON object per line, apply a simple transformation on each object and serialize a new JSON-lines file with simpler JSON objects on each line. I used <code>eitherDecode</code>, but once I confirmed that my data didn't raise any exception, I simplified the code to use only <code>decode</code>. I had to deal with Data.ByteString.Lazy and Data.ByteString.Char8 basically because  I want to use functions like <code>lines</code> and <code>putStrLn</code>.</p>\n<p>The <code>Sentence</code> and <code>Token</code> types were created to facilitate the parsing of JSON. Once I make them instance of FromJSON and ToJSON Aeson creates code for parsing and serializing. Is it possible in Lean?</p>\n<p>The ugly part is that I needed the simplified types <code>SToken</code> and <code>SSentence</code> and the direct encoding approach to serialize the result data into JSON again.  What are the limitations and possible improvements in the Lean implementation of JSON parser/serializer? In my simple use-case, what I could have done better in Lean? In my Lean version, I ended up in a ugly nesting of match expressions like below just to get the Tokens out of the Sentence object:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getTokens</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Json</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">obj</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Except.ok</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.data</span> <span class=\"bp\">$</span> <span class=\"k\">match</span> <span class=\"n\">Json.getArr</span><span class=\"bp\">?</span> <span class=\"bp\">$</span> <span class=\"n\">r.getObjValD</span> <span class=\"s2\">\"tokens\"</span> <span class=\"k\">with</span>\n                                  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n                                  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Except.error</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"s2\">\"/Users/ar/work/wn/glosstag/data/sentences/own-00.jl\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">getTokens</span> <span class=\"bp\">$</span> <span class=\"n\">List.head</span><span class=\"bp\">!</span> <span class=\"bp\">$</span> <span class=\"n\">List.map</span> <span class=\"n\">Json.parse</span> <span class=\"bp\">$</span> <span class=\"n\">lines</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The JSON-lines files can be found <a href=\"https://github.com/own-pt/glosstag/tree/master/data/sentences\">here</a>. I understand that this is not a MWE... So maybe I need to refine my question further.. anyway, feedbacks will be welcome.</p>",
        "id": 319193299,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1672752112
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319254073,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672770158
    }
]