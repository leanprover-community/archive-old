[
    {
        "content": "<p>What is the correct way to pattern match with arrays. It is clear when the arrays are of known length, just use <code>#[]</code>, <code>#[a]</code>, <code>#[a,b]</code> etc in the pattern. What about when the array length is not known. Playing around I ended up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">arr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨[]⟩</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">⟨</span><span class=\"n\">as</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but it doesn't seem satisfactory pattern matching on the representation of arrays. Could the explicit reference to the underlying list circumvent the efficient implementation of arrays?</p>",
        "id": 320127473,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1673219348
    },
    {
        "content": "<p>I believe that would in fact cause the array to be converted to a list first. You could build some array slice/list view types, but nothing like that has been built yet...</p>",
        "id": 320128174,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673220024
    },
    {
        "content": "<p>Arrays don't really support any fast modification other than adding/removing at the end</p>",
        "id": 320128217,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673220090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20with.20arrays/near/320128217\">said</a>:</p>\n<blockquote>\n<p>Arrays don't really support any fast modification other than adding/removing at the end</p>\n</blockquote>\n<p>Updating any of the elements is O(1) if the reference count of the array is 1</p>",
        "id": 320128676,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1673220513
    },
    {
        "content": "<p>(err, sorry, I mean adding/removing elements anywhere other than at the end)</p>",
        "id": 320128797,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673220655
    },
    {
        "content": "<p>Thanks for the response.<br>\nDo I understand correctly. In the above function the pattern creates a new list from the non-empty array, then the recursive call creates a new array from the list? So in similar use cases it would be better just using lists directly.</p>",
        "id": 320129195,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1673221019
    },
    {
        "content": "<p>Yep! It is slightly unfortunate that it is so easy to accidentally turn an array into a list and vice versa, since those operations are <em>not</em> cheap.</p>",
        "id": 320129662,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673221347
    },
    {
        "content": "<p>Arrays don't really lend themselves well for pattern matching, they're best worked with using the functions in the standard library. For programming purposes, I'd personally write <code>reverse</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">xs.size</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs.swap</span><span class=\"bp\">!</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">xs.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 320129731,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1673221400
    }
]