[
    {
        "content": "<p>I see that many but not all of the post-facto <code>[irreducible]</code> attributes have been successfully removed from mathlib. Is there a consensus now that this backport is feasible?</p>",
        "id": 230708730,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615994713
    },
    {
        "content": "<p>Some easy irreducibles have been ported.  But the interesting ones like additive/multiplicative/with_top/with_bot/with_one/with_zero/order_dual are still open as far as I'm concerned.</p>",
        "id": 230709591,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615995004
    },
    {
        "content": "<p>By \"open\" do you mean \"it is an open question if they are feasible\" or only that they have not yet been backported?</p>",
        "id": 230710174,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615995201
    },
    {
        "content": "<p>One of the big issues why we made these type tags irreducible is because of the simplifier.  Namely, if you define <code>def WithTop (α) := Option α</code> and <code>def WithBot (α) := Option α</code>, then Lean 3 used to apply simp lemmas for <code>WithTop</code> to <code>WithBot</code> and vice versa.<br>\n<a href=\"#narrow/stream/113488-general/topic/.22bug.22.20in.20.60simp.60.3F/near/207319933\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.22bug.22.20in.20.60simp.60.3F/near/207319933</a></p>",
        "id": 230710208,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615995218
    },
    {
        "content": "<p>I've tried to port additive/multiplicative to structures (which clearly solves the simp issue), but <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> was staunchly against that change.</p>",
        "id": 230710404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615995270
    },
    {
        "content": "<p>What is the status of type aliases for the purpose of getting different typeclass instances inferred in lean 4?</p>",
        "id": 230711004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995448
    },
    {
        "content": "<p>What do you mean by \"type alias\" here?</p>",
        "id": 230711367,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615995564
    },
    {
        "content": "<p><code>def foo := bar</code>, <code>instance : my_class foo := something_else</code></p>",
        "id": 230711423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995592
    },
    {
        "content": "<p>It might be possible to label <code>def foo</code> with some irreducibility attribute but it can't be something completely opaque, because the defeq between <code>foo</code> and <code>bar</code> is an essential part of this mechanism</p>",
        "id": 230711619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995650
    },
    {
        "content": "<p>but it seems like semireducible should be good enough since type class inference does not see through such definitions</p>",
        "id": 230711714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995685
    },
    {
        "content": "<p>The issue Gabriel mentions about simp seeing through semireducible definitions also sounds like a bug in simp, not a reason to mark things irreducible</p>",
        "id": 230712134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995804
    },
    {
        "content": "<p>It's not a bug in simp directly, it's pretty deep in unification.</p>",
        "id": 230712320,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615995853
    },
    {
        "content": "<p>And yes, instead of marking the type tags irreducible, we might be able to fix these leaks.</p>",
        "id": 230712386,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615995879
    },
    {
        "content": "<p>Alternatively, we could have a reducibility setting which is \"irreducible except in opt-out settings\"</p>",
        "id": 230712518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995919
    },
    {
        "content": "<p>which might also be <code>irreducible</code>, I guess</p>",
        "id": 230712584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615995933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the following technically works in Lean4 because of the discrimination tree indexing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Cls</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">cls</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Cls</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Cls.x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Cls</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">false</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Cls</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">true</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fooFalse</span> <span class=\"o\">:</span> <span class=\"n\">cls</span> <span class=\"n\">Foo</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">false</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">barTrue</span>  <span class=\"o\">:</span> <span class=\"n\">cls</span> <span class=\"n\">Bar</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">⟩</span>  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230712745,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615995975
    },
    {
        "content": "<p>That all looks good except for the foreboding \"technically\"</p>",
        "id": 230712900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996033
    },
    {
        "content": "<p>I don't see why this would be any less than a supported feature</p>",
        "id": 230712995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996064
    },
    {
        "content": "<p>It works fine, I just hesitate to endorse the style :)</p>",
        "id": 230713020,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615996070
    },
    {
        "content": "<p>In lean 3, this was one of the main reasons to use a type alias</p>",
        "id": 230713140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996102
    },
    {
        "content": "<p>To clarify what is happening in the example above: the query <code>Cls Bar</code> asks the discrimination tree for candidate matches to <code>Cls Bar</code>, and since <code>Bar</code> is not <code>reducible</code>, it only returns the desired instance. In Lean3, the query <code>Cls Bar</code> would cause a head-map query for <code>Cls</code>, which would return both.</p>",
        "id": 230713658,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615996288
    },
    {
        "content": "<p>My hope is that this is handled exactly the same as if <code>Bar</code> was a newtype structure around <code>Foo</code></p>",
        "id": 230713931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996368
    },
    {
        "content": "<p>The only difference between them should be during unification, when the reducibility setting is set to semireducible or more</p>",
        "id": 230714121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996407
    },
    {
        "content": "<p>and since most tactics like <code>rw</code> and <code>simp</code> use reducible reducibility setting, they should also see <code>Bar</code> as opaque in either case</p>",
        "id": 230714352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996476
    },
    {
        "content": "<p>unless of course you use <code>rw [Bar]</code></p>",
        "id": 230714426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615996499
    },
    {
        "content": "<p>It seems sketchy to me. Would it really be so bad to use a struct?</p>",
        "id": 230715669,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615996859
    },
    {
        "content": "<p>AFAICT, the simp issues seem to be solved in Lean 4.  Lemmas for the type tags do not leak to the definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasLessEq</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Foo.le_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">≤</span> <span class=\"n\">y.toNat</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bar.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasLessEq</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- applies Foo.le_iff once</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- doesn't apply Foo.le_iff</span>\n</code></pre></div>\n<p>In Lean 3, both of the two simp calls actually go into an infinite loop.</p>",
        "id": 230716674,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615997031
    },
    {
        "content": "<p>Yes, for the same reasons as in the <code>Cls</code> example above. The two goals are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">HasLessEq.LessEq.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Foo</span> <span class=\"n\">instHasLessEqFoo</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">HasLessEq.LessEq.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Bar</span> <span class=\"n\">instHasLessEqBar</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and the discrimination tree treats <code>Foo</code> and <code>Bar</code> as separate constants (since they are not <code>reducible</code>).</p>",
        "id": 230717545,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615997217
    },
    {
        "content": "<blockquote>\n<p>It seems sketchy to me. Would it really be so bad to use a struct?</p>\n</blockquote>\n<p>You lose the defeq, which means that if this thing appears inside types (and since this is a type that's not unusual) there are circumstances where this will unavoidably lead to DTT hell</p>",
        "id": 230717704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615997264
    },
    {
        "content": "<p>For additive/multiplicative, it is possible to prove theorems in O(1) that otherwise requires the horrible and wasteful hack that is <code>to_additive</code>. It's possible to prove <code>to_additive</code> style theorems in O(statement), but this requires something like <code>equiv_rw</code> and I think it's still open in the general case</p>",
        "id": 230718231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615997374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Airreducible/near/230717545\">said</a>:</p>\n<blockquote>\n<p>Yes, for the same reasons as in the <code>Cls</code> example above. The two goals are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">HasLessEq.LessEq.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Foo</span> <span class=\"n\">instHasLessEqFoo</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">HasLessEq.LessEq.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Bar</span> <span class=\"n\">instHasLessEqBar</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and the discrimination tree treats <code>Foo</code> and <code>Bar</code> as separate constants (since they are not <code>reducible</code>).</p>\n</blockquote>\n<p>Ah, so it still leaks when Lean uses unification. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasLessEq</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Foo.le_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">≤</span> <span class=\"n\">y.toNat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- 100% CPU</span>\n</code></pre></div>",
        "id": 230718841,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615997506
    },
    {
        "content": "<p>That sounds like it would be solved by setting the reducibility setting on that unification</p>",
        "id": 230719554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615997662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The issue has always been that Lean uses more aggressive unification for implicit arguments than for explicit arguments.  That is, even if simp uses reducible transparency, <code>Foo</code> and <code>Nat</code> will still unify when they are in implicit arguments.  I have no idea whether it would be feasible/desirable/devastating to change that behavior.</p>",
        "id": 230720614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615997899
    },
    {
        "content": "<p>That kind of sounds like having another reducibility setting would be a good idea then</p>",
        "id": 230720900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615997974
    },
    {
        "content": "<p>it would be interesting to know exactly what the fallout of not unfolding semireducibles in implicits is though</p>",
        "id": 230721117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998021
    },
    {
        "content": "<p>What do you expect to learn? Chances are a ton of things will break and it will be hard to diagnose all the reasons.</p>",
        "id": 230721898,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615998280
    },
    {
        "content": "<p>I don't think we actually depend on it that much. I certainly haven't been writing code with this in mind</p>",
        "id": 230722248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998400
    },
    {
        "content": "<p>But it would be good to classify the breakages and see whether they aren't just mistakes</p>",
        "id": 230722343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998433
    },
    {
        "content": "<p>You could also instrument the lean3 unifier to print out specifically when an <code>isDefEq</code> call on an implicit argument that succeeds with <code>semireducible</code> would have failed with <code>reducible</code>.</p>",
        "id": 230722404,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615998457
    },
    {
        "content": "<p>Does the unifier ever use reducible in normal usage? i.e. not in a tactic</p>",
        "id": 230722589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998518
    },
    {
        "content": "<p>Just because you catch such an instance doesn't mean that the proof would have failed, because it might just be the tactic trying something and if it fails it will do something else</p>",
        "id": 230722774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998582
    },
    {
        "content": "<p>those kinds of breakages come up all the time when we have minor tactic semantic changes</p>",
        "id": 230722825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/mathport.3Airreducible/near/230722589\">said</a>:</p>\n<blockquote>\n<p>Does the unifier ever use reducible in normal usage? i.e. not in a tactic</p>\n</blockquote>\n<p>In lean3, reducibility status is generally mediated by <code>transparency_scope</code> objects. Here is the grep:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">frontends</span><span class=\"o\">/</span><span class=\"n\">lean</span><span class=\"o\">/</span><span class=\"n\">elaborator</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">2376</span><span class=\"o\">:</span>            <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">(),</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">None</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">frontends</span><span class=\"o\">/</span><span class=\"n\">lean</span><span class=\"o\">/</span><span class=\"n\">inductive_cmds</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">422</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">m_ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">None</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">defeq_canonizer</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">107</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">m_ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Instances</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">defeq_canonizer</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">115</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">m_ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Instances</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">preprocess</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">(),</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Reducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">preprocess</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">132</span><span class=\"o\">:</span>                <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">(),</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Reducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">preprocess</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">145</span><span class=\"o\">:</span>                <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">(),</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Reducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">inliner</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">138</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">(),</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Instances</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">type_context</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">756</span><span class=\"o\">:</span>    <span class=\"k\">struct</span> <span class=\"nc\">transparency_scope</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">flet</span><span class=\"o\">&lt;</span><span class=\"n\">transparency_mode</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">type_context</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">757</span><span class=\"o\">:</span>        <span class=\"n\">transparency_scope</span><span class=\"p\">(</span><span class=\"n\">type_context_old</span> <span class=\"o\">&amp;</span> <span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span> <span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">:</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">type_context</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">787</span><span class=\"o\">:</span>        <span class=\"n\">transparency_scope</span> <span class=\"n\">m_transparency_scope</span><span class=\"p\">;</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">type_context</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">790</span><span class=\"o\">:</span>            <span class=\"n\">m_transparency_scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">),</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">equations_compiler</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">389</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Reducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">inductive_compiler</span><span class=\"o\">/</span><span class=\"n\">nested</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">238</span><span class=\"o\">:</span>            <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">tctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Instances</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">app_builder</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">761</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">_s1</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">md</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">app_builder</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">765</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">_s1</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Semireducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">type_context</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">716</span><span class=\"o\">:</span>        <span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">All</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">type_context</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">2571</span><span class=\"o\">:</span>        <span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">ensure_semireducible_mode</span><span class=\"p\">(</span><span class=\"n\">m_transparency_mode</span><span class=\"p\">));</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">rewrite_tactic</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">93</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">ensure_semireducible_mode</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">()));</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">unfold_tactic</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">79</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">m_ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Instances</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">smt</span><span class=\"o\">/</span><span class=\"n\">smt_state</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">242</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope2</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Reducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">simplify</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">1109</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Semireducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">dsimplify</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span>            <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Instances</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">dsimplify</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">88</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">Reducible</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">dsimplify</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">322</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">s</span><span class=\"p\">(</span><span class=\"n\">m_ctx</span><span class=\"p\">,</span> <span class=\"n\">m_cfg</span><span class=\"p\">.</span><span class=\"n\">m_md</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">dsimplify</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">337</span><span class=\"o\">:</span>        <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">s</span><span class=\"p\">(</span><span class=\"n\">m_ctx</span><span class=\"p\">,</span> <span class=\"n\">m_cfg</span><span class=\"p\">.</span><span class=\"n\">m_md</span><span class=\"p\">);</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">tactic</span><span class=\"o\">/</span><span class=\"n\">induction_tactic</span><span class=\"p\">.</span><span class=\"nl\">cpp</span><span class=\"p\">:</span><span class=\"mi\">115</span><span class=\"o\">:</span>    <span class=\"n\">type_context_old</span><span class=\"o\">::</span><span class=\"n\">transparency_scope</span> <span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">transparency_mode</span><span class=\"o\">::</span><span class=\"n\">All</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 230723098,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615998673
    },
    {
        "content": "<p>fyi you need to use <code> ````quote ... ```` </code> to enclose <code> ```lean ... ``` </code></p>",
        "id": 230723614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998841
    },
    {
        "content": "<p>That isn't Lean code -- I made it a regular <code>quote</code> so it would line-wrap (though it is still ugly)</p>",
        "id": 230723783,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615998890
    },
    {
        "content": "<p>I guess <code>grep</code> isn't a language id</p>",
        "id": 230723957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615998945
    },
    {
        "content": "<p>The examples where it is explicitly reducible seem to be in the compiler and the equation compiler. The compiler operation is not very observable so I doubt it matters much, and the equation compiler may or may not cause weird edge case errors but probably doesn't cause too many issues in practice</p>",
        "id": 230724433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615999101
    },
    {
        "content": "<p>I am happy to push a dont-force-semireducible-for-implicits patch to a lean3 branch if you will run the experiment</p>",
        "id": 230725090,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615999354
    },
    {
        "content": "<p>FYI Lean4 does build with this change</p>",
        "id": 230725378,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1615999447
    },
    {
        "content": "<p>There are a ton of breakages even building lean3. Here is the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dselsam</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/</span><span class=\"n\">lean3</span><span class=\"bp\">/</span><span class=\"n\">library</span><span class=\"bp\">/</span><span class=\"n\">init</span><span class=\"bp\">/</span><span class=\"kd\">meta</span><span class=\"bp\">/</span><span class=\"n\">interactive.lean</span><span class=\"o\">:</span><span class=\"mi\">97</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">,</span>\n<span class=\"n\">propagate_tags</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n<span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">tactic.tag</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>tag</code> has type <code>tactic.tag</code> which is defined to <code>list name</code>. The patch is only one line so I'll just tell you: comment out <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/type_context.cpp#L2571\">https://github.com/leanprover-community/lean/blob/master/src/library/type_context.cpp#L2571</a></p>",
        "id": 230727104,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616000049
    },
    {
        "content": "<p>FYI here is the commit that added this feature in the first place: <a href=\"https://github.com/leanprover-community/lean/commit/e59fd2927a91e4dbe00c825764632786b6388df2\">https://github.com/leanprover-community/lean/commit/e59fd2927a91e4dbe00c825764632786b6388df2</a></p>",
        "id": 230728435,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616000503
    },
    {
        "content": "<p>I remember this being a big win at the time and I am skeptical about rolling it back. I also doubt Leo would even consider merging it.</p>",
        "id": 230728820,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616000631
    },
    {
        "content": "<p>I expect that there will be a lot of breakages like that example: it was committed because it works, but it's definitely a bug and should be fixed regardless. (In that example, <code>tactic.tag</code> should have <code>decidable_eq</code>)</p>",
        "id": 230738870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616004123
    },
    {
        "content": "<p>BTW, there isn't much breakage in core: <a href=\"https://github.com/leanprover-community/lean/issues/556\">lean#556</a></p>",
        "id": 230739494,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616004362
    },
    {
        "content": "<p>Here's an example breakage from mathlib that might be tricky to fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">typevec.lean</span><span class=\"o\">:</span><span class=\"mi\">436</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">solve1</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">focused</span> <span class=\"n\">goal</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"n\">i_n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i_ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"n\">i_n</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">i_n.succ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i_ᾰ.fs</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i_ᾰ.fs</span><span class=\"o\">,</span>\n<span class=\"n\">i_ih</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">typevec</span> <span class=\"n\">i_n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i_ᾰ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i_ᾰ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">prod.fst</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i_ᾰ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk</span> <span class=\"n\">i_n</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i_ᾰ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">prod.fst</span> <span class=\"n\">i_n</span> <span class=\"n\">α.drop</span> <span class=\"n\">β.drop</span> <span class=\"n\">i_ᾰ</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk</span> <span class=\"n\">i_n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"n\">i_n</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i.fs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"n\">i_n</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">i.fs</span><span class=\"o\">)</span> <span class=\"n\">i_ᾰ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>This is after a <code>simp [prod.fst, prod.mk, *] at *</code> that was supposed to close the goal. Note that <code>@i_ih (λ (i : fin2 i_n), α i.fs) (λ (i : fin2 i_n), β i.fs) a b</code> unifies with the goal, but only at semireducible because we need to reduce <code>(λ (i : fin2 i_n), α i.fs).drop = α</code></p>",
        "id": 230753501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616009743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what do you think about removing <code>irreducible</code> from Lean3 and adding Lean4's constant-with-def, rather than the somewhat hacky plan we sketched in <a href=\"#narrow/stream/270676-lean4/topic/mathport/near/225031878\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathport/near/225031878</a> ?</p>",
        "id": 230805761,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616035077
    },
    {
        "content": "<p>(While this will presumably be hard, it hopefully comes out of a fixed budget of hard work for the porting effort. :-)</p>",
        "id": 230805934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616035211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> this proposal is conditional on the tentative plan to stop using <code>irreducible</code> in Lean3 except in ways that simulate Lean4's constant-with-def. the proposal wouldn't entail much <em>additional</em> work -- it would mainly serve to enforce the irreducible policy</p>",
        "id": 230806168,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616035467
    },
    {
        "content": "<p>I think it would be easier to not remove irreducible but rather restrict its usage to certain patterns that mathport can pick up on and translate to constant-with-def</p>",
        "id": 230813270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616042657
    },
    {
        "content": "<p>It shouldn't be too hard to lint against unapproved usage patterns</p>",
        "id": 230813290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616042698
    },
    {
        "content": "<p>I agree with Mario.  The format of irreducible definitions in Lean 3 is easy enough to parse.  There's one definition <code>foo</code> with the irreducible attribute, and one lemma <code>foo.equations._eqn_1</code>.</p>",
        "id": 230833339,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616059305
    },
    {
        "content": "<p>On the other hand, adding Lean 4-style constants to the kernel is a nontrivial effort.  And then we'd still need to modify the definition command to actually simulate an irreducible definition using constants.</p>",
        "id": 230833523,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616059393
    },
    {
        "content": "<p>either way, but FYI <code>constant</code> is just a regular definition with reducibility hint <code>opaque</code>.</p>",
        "id": 230861608,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616073756
    },
    {
        "content": "<p>The meaning of an opaque reducibility hint is probably different in Lean 4, but in Lean 3 it has no real effect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">)</span> <span class=\"n\">reducibility_hints.opaque</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a_eq_42</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230863975,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616074700
    },
    {
        "content": "<p>I might be wrong about <code>constant</code> then. Let me confirm.</p>",
        "id": 230865607,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616075249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> You are right, <code>constant</code> is stronger than <code>opaque</code> and there is currently no support in Lean3. <code>opaque</code> seems a poor word choice, more like \"rigid\"</p>",
        "id": 230867607,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616075986
    },
    {
        "content": "<p>FYI these are the differing lines: </p>\n<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/kernel/declaration.h#L444\">https://github.com/leanprover/lean4/blob/master/src/kernel/declaration.h#L444</a><br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/kernel/type_checker.cpp#L481\">https://github.com/leanprover/lean4/blob/master/src/kernel/type_checker.cpp#L481</a></p>\n<p>Basically, even though the constants keep their value, they still tell <code>is_delta</code> no, whereas <code>opaque</code> is still a delta and only affects the case when <code>f ... =?= g ...</code></p>",
        "id": 230868305,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616076210
    },
    {
        "content": "<p>FYI the patch from <a href=\"#narrow/stream/270676-lean4/topic/mathport/near/225031878\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathport/near/225031878</a> complicates mathport a lot (it can no longer process action items in one pass) and also cannot be applied currently due to post-factor semireducible-toggling e.g. <a href=\"#narrow/stream/270676-lean4/topic/mathport/near/225031878\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/mathport/near/225031878</a></p>",
        "id": 231037189,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1616166272
    }
]