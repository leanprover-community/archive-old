[
    {
        "content": "<p>Is it possible to build a stack safe Bind/Monad  (a la IO) purely within Lean? or does it require special runtime support?</p>\n<p>For example I'd like to write a stack safe function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">repeatN</span> <span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">ma</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">repeatN</span> <span class=\"n\">ma</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289893641,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1658076672
    },
    {
        "content": "<p>What do you mean by stack safe? That it doesn't kill the program in case it overflows?</p>",
        "id": 289894202,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658077521
    },
    {
        "content": "<p>Yeah, I'm trying to avoid stack overflows, basically</p>",
        "id": 289894282,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1658077626
    },
    {
        "content": "<p>I'd say since it depends highly on compiler optimizations if and how much stack space is used this seems quite impossible to do precisely?</p>",
        "id": 289894348,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1658077727
    },
    {
        "content": "<p>I think the question here is about whether Lean does tail call optimization for monadic functions</p>",
        "id": 289894358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658077754
    },
    {
        "content": "<p>right</p>",
        "id": 289894366,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1658077783
    },
    {
        "content": "<p>The CPS monads in Init.Control do (or did). You might also be able to use the loop syntax.</p>",
        "id": 289894412,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658077808
    },
    {
        "content": "<p>oh, let me take a look</p>",
        "id": 289894478,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1658077930
    },
    {
        "content": "<p>I'd say this should just work iff your <code>bind</code> calls the second argument in tail position</p>",
        "id": 289894657,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658078215
    },
    {
        "content": "<p>got it. In this case M is a GADT  which only captures its arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n<span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>and later gets interpreted</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">callback</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n<span class=\"bp\">...</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Bind</span> <span class=\"n\">ma</span> <span class=\"n\">cont</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">run</span> <span class=\"n\">ma</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">callback</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>I guess this is where the Stack Overflow is coming.</p>",
        "id": 289895102,
        "sender_full_name": "Juan Pablo Romero",
        "timestamp": 1658078764
    }
]