[
    {
        "content": "<p>I having a problem using <code>pattern (foo _)</code> in conv mode when the function <code>foo</code> depends on a somewhat complicated tangle of type classes. </p>\n<p>Here is MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Trait</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">Trait.R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_one</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Trait</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">HAdd</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">One.one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Trait.R</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Trait</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trait</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">Int</span> <span class=\"n\">Nat</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_one_to_one</span> <span class=\"o\">:</span> <span class=\"n\">add_one</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"n\">add_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>            <span class=\"c1\">-- Error: One (Trait.R ?m.532)</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_one</span> <span class=\"n\">Int</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>I really do not understand why is there a meta variable when trying to synthesize <code>One (Trait.R ?m.532)</code>.  The <code>?m.532</code> should clearly be <code>Int</code>, I do not even understand why is it trying to synthesize an instance, an instance is already in the expression <code>add_one (1 : Int)</code> I'm trying to match on.</p>\n<p>I'm suspecting that there is a bug of missing <code>instantiateMVars</code> or something along those lines.</p>",
        "id": 266607728,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1641120173
    }
]