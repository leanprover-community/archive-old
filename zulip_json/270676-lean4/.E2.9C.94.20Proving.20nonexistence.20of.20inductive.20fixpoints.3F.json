[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">no_suboject_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Object</span><span class=\"o\">,</span> <span class=\"bp\">¬∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">o.subobjects</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Object.rec</span>\n    <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">o'</span> <span class=\"bp\">≠</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">motive_2</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">o'</span> <span class=\"bp\">≠</span> <span class=\"n\">some</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">ih</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"n\">o</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 295816601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661768735
    },
    {
        "content": "<p>haha, wow, that really feels like black magic at first :D (makes more sense after looking at the signature of <code>Object.rec</code> though). Thanks a lot for that!</p>",
        "id": 295818101,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1661769415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 295818124,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661769426
    },
    {
        "content": "<blockquote>\n<p>well founded recursion doesn't support inductives with rank higher than omega</p>\n</blockquote>\n<p>For the record, it does just fine as long as you provide the measure yourself.  <code>termination_by .. =&gt; foo</code> accepts any <code>(foo : Foo)</code> that has a <code>WellFoundedRelation Foo</code> instance.  (In particular this well-founded relation can have a rank bigger than ω.)</p>",
        "id": 295825529,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1661772663
    },
    {
        "content": "<p>true, but in general you won't really have a better inductive to put there than <code>Foo</code> itself</p>",
        "id": 295826918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661773234
    },
    {
        "content": "<p>You could put something like <code>Ordinal</code> there but you would still have to prove the analogue of all the <code>sizeOf</code> lemmas and at that point the original <code>Object.rec</code> proof seems simpler</p>",
        "id": 295827046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661773291
    }
]