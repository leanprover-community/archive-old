[
    {
        "content": "<p>Having a hard time figuring out if a tactic like this exists.  I would like to apply a lemma, but instead of failing if some of the terms don't match, just generate new hypotheses of their equality.</p>\n<p>Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.applyFun</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.isPrefix_double</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.examp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">):</span>  <span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">delim</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- new_apply_tactic List.isPrefix_self</span>\n  <span class=\"c1\">-- now (hypothetically) we have the new goal</span>\n  <span class=\"c1\">-- b ++ [] = (take (length delim) a) ++ (take (length delim) a)</span>\n</code></pre></div>",
        "id": 320600415,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673414004
    },
    {
        "content": "<p><code>convert</code>; unlike <code>apply</code> you need to provide all the arguments of the function, but these can be <code>_</code> and will be solved by unification where possible.</p>",
        "id": 320611562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673419117
    },
    {
        "content": "<p>Thanks!  It seems like this matches what I was looking for, but it's not as powerful as I expected.  Here is an example of its failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.applyFun</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">helper</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">examp</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">helper</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"c1\">-- This doesn't work.  Ideally at this point I would just have a new goal:</span>\n  <span class=\"c1\">-- ∃ s t, s ++ t = [a]</span>\n</code></pre></div>",
        "id": 320750848,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673456335
    },
    {
        "content": "<p>In Lean 4, there's now a distinction between <code>_</code> (placeholders that must be solved by unification) and <code>?_</code> (placeholders that may create new goals).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">examp</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c1\">-- Three goals:</span>\n  <span class=\"c1\">-- ⊢ [a] = ?_1 ++ ?_2</span>\n  <span class=\"c1\">-- ⊢ List α</span>\n  <span class=\"c1\">-- ⊢ List α</span>\n</code></pre></div>",
        "id": 320764513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673460415
    },
    {
        "content": "<p>Note that I had to write <code>(α := α)</code> to fill in what <code>α</code> is supposed to be. I guess <code>convert</code> isn't able to fill in this argument by unification... (I feel that it should though)</p>",
        "id": 320764731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673460481
    },
    {
        "content": "<p>Seems like convert got a bit weaker in lean 4</p>",
        "id": 320764966,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673460555
    }
]