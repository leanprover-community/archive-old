[
    {
        "content": "<p>Looking at the <code>Fin</code> structure defined in the prelude (Lean 4 version) a couple of questions arise:</p>\n<ul>\n<li>I understand most of the <code>Fin</code> definition, but what is the purpose of the last two lines given <code>Fin</code> has already been shown to be an instance of <code>LE</code> and <code>LT</code>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Fin.decLt</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">LT.lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">Nat.decLt</span> <span class=\"bp\">..</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Fin.decLe</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">LE.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLe</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<ul>\n<li>What causes the following errors? </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">To10</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">To10</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">To10</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩:</span><span class=\"n\">To10</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩:</span><span class=\"n\">To10</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩:</span><span class=\"n\">To10</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩:</span><span class=\"n\">To10</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩:</span><span class=\"n\">To10</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩:</span><span class=\"n\">To10</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n<span class=\"c1\">--#check zero ≤ one  -- error: failed to synthesize instance LE To10</span>\n<span class=\"c1\">--#check zero &lt; one  -- error: failed to synthesize instance LT To10</span>\n</code></pre></div>\n<p>I just remembered <code>abbrev</code> being mentioned elsewhere so I tried changing the definition of <code>To10</code> to <code>abbrev To10 : Type := Fin 10</code> and the errors disappear. Hence something to do with the difference between <code>def</code> and <code>abbrev</code>, but what, any why does it only affect <code>LT</code> and <code>LE</code>, not equality?</p>\n<ul>\n<li>More generally, what are the guidelines for using <code>def</code> vs <code>abbrev</code>?</li>\n</ul>",
        "id": 254512166,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1632392490
    },
    {
        "content": "<p><code>Fin.decLt </code> doesn't declare that <code>Fin</code> has a <code>&lt;</code>, but that this <code>&lt;</code> is decidable, meaning that <code>∀ a b, a &lt; b ∨ ¬ a &lt; b</code>. Similarly, <code>Fin.decLe</code> states that <code>∀ a b, a ≤ b ∨ ¬ a ≤ b</code>.</p>",
        "id": 254512605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632392743
    },
    {
        "content": "<p>Those are derived from their decidability on <code>ℕ</code>, as you can see from the (very brief) proofs.</p>",
        "id": 254512737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632392813
    },
    {
        "content": "<p>Ok, so without those two lines you have that Fin is an instance of LT and LE but you need decidability to make headway in proofs, or for computation.</p>",
        "id": 254512946,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1632392937
    },
    {
        "content": "<p>Yep</p>",
        "id": 254512967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632392948
    },
    {
        "content": "<p>Thanks</p>",
        "id": 254512987,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1632392964
    },
    {
        "content": "<p>Your error is a reducibility issue. <code>eq</code> is defined for all types, so that's no surprise if you don't get any error. <code>&lt;</code> and <code>≤</code> however have to be declared (they come from \"syntax\" typeclasses).  Here, you defined <code>To10</code> to be a <em>type synonym</em> of <code>Fin 10</code>. By design, hardly anything leaks through type synonyms, because this system allows us to overcharge a type with different instances of the same structure.</p>",
        "id": 254513138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632393033
    },
    {
        "content": "<p>Eg <code>order_dual</code> is equipped with the reverse order. <code>with_top α</code>, <code>with_bot α</code>, <code>alexandroff α</code> are all type synonyms of <code>option α</code>, used to add a top element, a bottom element, a point at infinity, respectively.</p>",
        "id": 254513325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632393133
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Questions.20on.20Fin.20type.20and.20def.2Fabbrev\">#general &gt; Questions on Fin type and def/abbrev</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>",
        "id": 254513420,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632393192
    },
    {
        "content": "<p>If I really wanted a type to range over 0..9 should I use <code>def</code> and put on the extra effort, or is <code>abbrev</code> a better approach, or indeed something else.</p>",
        "id": 254513608,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1632393286
    },
    {
        "content": "<p>You should use \"Fin 10\". If you don't want to write \"Fin 10\", then you can use the \"notation\" to give it some shorthand</p>",
        "id": 254514249,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632393670
    },
    {
        "content": "<p><code>abbrev</code> should be just fine here I think?</p>",
        "id": 254514362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632393726
    },
    {
        "content": "<p>Every new definition comes with a cost, because, unlike a human, Lean does not know when it's best to keep the definition wrapped up in its box and to proceed using the API for the definition (which someone has to write -- every definition needs an API), and when to open the box and use the underlying \"definiens\". If you want something which is the same as <code>Fin 10</code> then this is the argument for using <code>Fin 10</code> rather than letting it be <code>X</code> or whatever -- <code>Fin</code> already has an API so you don't need to write it.</p>",
        "id": 254514849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632394048
    },
    {
        "content": "<p><code>Fin 10</code> would be ok here, but I think there would be situations where I wouldn't want to repeat the basic form. If I say wanted to model dates and times, then rather than have <code>Fin 24</code> everywhere, I would want to use a type named <code>Hour</code>, and <code>Minute</code> rather than <code>Fin 60</code>, etc.</p>\n<p>Sounds like <code>abbev</code> would be the way to go. As you can probably guess from the example, my interest is in computing rather than maths.</p>",
        "id": 254515473,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1632394353
    },
    {
        "content": "<p>I think what's crucial here is the difference between facilitating _defining_ something or proving something about existing definitions.</p>",
        "id": 254515737,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632394485
    },
    {
        "content": "<p>The <code>&lt;</code> and <code>&lt;=</code> are defined for all <code>Fin n</code>, so you don't have to worry about specializing those instances to Hour or Minute. Hopefully, the API you are using does not care about <code>24</code> or <code>60</code>.</p>",
        "id": 254515821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632394550
    },
    {
        "content": "<p>I can understand that perhaps for <code>Hour</code> you might want to have two representations, <code>00-23</code> and <code>00-12 {am,pm}</code>, while for <code>Minute</code> it'd be solely <code>00-59</code>.</p>",
        "id": 254515952,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632394621
    },
    {
        "content": "<p>And yes, there you would then need to have at least separate specialization.</p>",
        "id": 254516020,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632394670
    },
    {
        "content": "<p>So by using <code>abbrev</code> everything is inherited from <code>Fin</code> and all the properties hold.</p>\n<p>Yes, 24 and 60 are excluded, and all times are modelled in UTC, so hour is always 0..23 (am/pm is just an output presentation).</p>",
        "id": 254516478,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1632394887
    },
    {
        "content": "<p>It's also quite easy to make a type synonym and copy across the subset of typeclass instances you actually want. Search for <code>@[derive ]</code> in mathlib3 for many examples.</p>",
        "id": 254684674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632480519
    }
]