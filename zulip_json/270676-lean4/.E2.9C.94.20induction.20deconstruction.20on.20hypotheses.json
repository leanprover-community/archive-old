[
    {
        "content": "<p>Well in that case the picture sort of did its job I guess. For those kinds of hypotheses to work, you have to (or Lean has to) move a bunch of stuff into the motive, but it can be hard to get the right stuff lined up. The solution Anand Rao posted is a good example. What you end up getting is induction on <code>Foo</code> with a much more compliated motive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Bar.match_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">allPos</span> <span class=\"n\">data</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"n\">data</span> <span class=\"n\">hh</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">allPos</span> <span class=\"n\">data</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Foo.mk</span> <span class=\"n\">data</span> <span class=\"n\">hh</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">Foo.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">motive</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">allPos</span> <span class=\"o\">:</span> <span class=\"n\">allPos</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_1</span> <span class=\"n\">data</span> <span class=\"n\">allPos</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 267742023,
        "sender_full_name": "Chris B",
        "timestamp": 1642002201
    },
    {
        "content": "<p>Yeah, Anand Rao's idea worked nicely and I applied such reasoning <a href=\"https://github.com/arthurpaulino/LeanMySQL/blob/2a7708b4c80c9d566725b9a9d29ff48604311d03/lib/DataFrame.lean#L94\">here</a></p>",
        "id": 267742927,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642002552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 267746838,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642004179
    }
]