[
    {
        "content": "<p>Hey again. I'm having an issue with structural recursion. Any hints?</p>\n<p>The <code>depth</code> function is structurally recursive in the 4th argument, the surface. Yet the errors pretend the 4th doesn't exist. Is there some class I need to implement or something?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Surface</span>\n<span class=\"bp\">|</span> <span class=\"n\">Unresolved</span>\n<span class=\"bp\">|</span> <span class=\"n\">Inside</span>\n<span class=\"bp\">|</span> <span class=\"n\">Outside</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ambiguious</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Surface</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Surface</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Surface.Unresolved</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Surface</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.get</span><span class=\"bp\">!</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">depth</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span><span class=\"bp\">!</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span><span class=\"bp\">!</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Array.get</span><span class=\"bp\">!</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"bp\">'</span><span class=\"n\">termination_by'</span> <span class=\"n\">modifier</span> <span class=\"n\">missing</span>\n</code></pre></div>",
        "id": 260513906,
        "sender_full_name": "Sofia",
        "timestamp": 1636205951
    },
    {
        "content": "<p>Tried inlining the array (for a fixed length) as <code>Ambiguious (a b c d e f g h : Surface)</code>, no luck. Doesn't change the result.</p>",
        "id": 260515441,
        "sender_full_name": "Sofia",
        "timestamp": 1636207521
    },
    {
        "content": "<p>Inlining as in, matching on x directly, then selecting the variant... Guess I can do that in the top level match maybe?</p>",
        "id": 260515517,
        "sender_full_name": "Sofia",
        "timestamp": 1636207585
    },
    {
        "content": "<p>The hack worked. But ... obviously undesired.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Surface</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">7</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 260515614,
        "sender_full_name": "Sofia",
        "timestamp": 1636207702
    },
    {
        "content": "<p>Reverting and trying that trick with the original code, no dice.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Surface</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.get</span><span class=\"bp\">!</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 260515714,
        "sender_full_name": "Sofia",
        "timestamp": 1636207819
    },
    {
        "content": "<p>Suspect it might relate to the use of <code>a.get!</code> because the inhabited case is not structurally recursive, but it is a constant and that constant terminates....</p>",
        "id": 260515759,
        "sender_full_name": "Sofia",
        "timestamp": 1636207896
    },
    {
        "content": "<p>Recursion through arrays is not structural in Lean's sense - <code>a.get! y</code> is not a strict subterm of the parameter's pattern. But well-founded recursion is simple enough here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">sizeOfWfRel</span>\n</code></pre></div>",
        "id": 260520020,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636212913
    },
    {
        "content": "<p>I do not see <code>sizeOfWfRel</code> anywhere. Is that a hint to implement it?</p>",
        "id": 260521363,
        "sender_full_name": "Sofia",
        "timestamp": 1636214602
    },
    {
        "content": "<p>Ah, it is capital F. Case sensitive search!</p>",
        "id": 260521530,
        "sender_full_name": "Sofia",
        "timestamp": 1636214850
    },
    {
        "content": "<p>Can confirm it worked. Thanks. :)</p>\n<p>Magic trick aside, I already scratched that code. Was just testing anyway.</p>",
        "id": 260521586,
        "sender_full_name": "Sofia",
        "timestamp": 1636214903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Structural.20recursion/near/260520020\">said</a>:</p>\n<blockquote>\n<p>Recursion through arrays is not structural in Lean's sense - <code>a.get! y</code> is not a strict subterm of the parameter's pattern. But well-founded recursion is simple enough here.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">sizeOfWfRel</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sorry, I didn't know what parts of wellfounded recursion were finished and which weren't. This will need an explicit <code>decreasing_by</code> proof, and I've made sure that it will fail properly without one from now on.</p>",
        "id": 260539819,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636237592
    },
    {
        "content": "<p>Huh? No. The <code>termination_by sizeOfWFRel</code> sufficed.</p>",
        "id": 260575535,
        "sender_full_name": "Sofia",
        "timestamp": 1636293652
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Surface</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Surface.Ambiguious</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.get</span><span class=\"bp\">!</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Surface.Unresolved</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">sizeOfWFRel</span>\n</code></pre></div>",
        "id": 260575749,
        "sender_full_name": "Sofia",
        "timestamp": 1636293857
    },
    {
        "content": "<p>Not really, it was defaulting to <code>admit</code></p>",
        "id": 260575969,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636294136
    },
    {
        "content": "<p>I don't know what that means.</p>",
        "id": 260579600,
        "sender_full_name": "Sofia",
        "timestamp": 1636298449
    },
    {
        "content": "<p>It was equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>i.e. it did not actually prove wellfoundedness</p>",
        "id": 260580002,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636298921
    },
    {
        "content": "<p>Just checking, do you know about <code>partial</code> in case you do not want to prove something about this function?</p>",
        "id": 260580019,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636298942
    },
    {
        "content": "<p>I know I can use partial; but my understanding is that colours the function so it cannot be used from total functions?</p>",
        "id": 260580162,
        "sender_full_name": "Sofia",
        "timestamp": 1636299091
    },
    {
        "content": "<p>No, you simply cannot unfold it in proofs</p>",
        "id": 260580323,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636299250
    },
    {
        "content": "<p>If it was equivalent to such a sorry proof, why do I not see any errors and I'm able to run the program?</p>",
        "id": 260580326,
        "sender_full_name": "Sofia",
        "timestamp": 1636299255
    },
    {
        "content": "<p>Hmm. Okay. I guess this is related to how assert! and panic! exist at all?</p>",
        "id": 260580344,
        "sender_full_name": "Sofia",
        "timestamp": 1636299286
    },
    {
        "content": "<p>Yes, all three require <code>Inhabited</code></p>",
        "id": 260580451,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636299416
    },
    {
        "content": "<p>Ah, I see. Explains the no proving false part trivially. :D</p>",
        "id": 260580662,
        "sender_full_name": "Sofia",
        "timestamp": 1636299682
    },
    {
        "content": "<p>Noted, partial functions are not scary. Just more difficult to prove.</p>",
        "id": 260580670,
        "sender_full_name": "Sofia",
        "timestamp": 1636299712
    },
    {
        "content": "<p>How did you see it failed? I see no errors when using the sorry in the proof.</p>",
        "id": 260580737,
        "sender_full_name": "Sofia",
        "timestamp": 1636299789
    },
    {
        "content": "<p>The point of <code>sorry</code> is to <em>accept</em> an incomplete proof (with a warning when used explicitly). <code>#print axiom depth</code>before the fix would show that the definition depends on the <code>sorryAx</code> axiom.</p>",
        "id": 260580900,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636299992
    },
    {
        "content": "<p>I get this when I try that print?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">././</span><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">112</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"kd\">axioms</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">or</span> <span class=\"n\">string</span> <span class=\"n\">literal</span>\n<span class=\"bp\">././</span><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">113</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"sc\">':'</span>\n<span class=\"bp\">././</span><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">113</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">depth'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 260580945,
        "sender_full_name": "Sofia",
        "timestamp": 1636300073
    },
    {
        "content": "<p>Yes, please apply the spell check in the first error message</p>",
        "id": 260581495,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636300727
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">depth</span>\n</code></pre></div>",
        "id": 260581497,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1636300732
    },
    {
        "content": "<p>I tried that, should have mentioned that didn't work either. <code>././Main.lean:112:14: error: unknown constant 'depth'</code></p>",
        "id": 260581853,
        "sender_full_name": "Sofia",
        "timestamp": 1636301031
    },
    {
        "content": "<p>Ah, after the failure.</p>\n<p><code>'depth' depends on axioms: [sorryAx]</code></p>",
        "id": 260581925,
        "sender_full_name": "Sofia",
        "timestamp": 1636301060
    },
    {
        "content": "<p>Ran it on the wrong line, whoops.</p>",
        "id": 260581929,
        "sender_full_name": "Sofia",
        "timestamp": 1636301070
    },
    {
        "content": "<p>I processed it as a setopt kind of verbose thing.</p>",
        "id": 260581939,
        "sender_full_name": "Sofia",
        "timestamp": 1636301090
    },
    {
        "content": "<p>Is there an option to show this globally?</p>",
        "id": 260582161,
        "sender_full_name": "Sofia",
        "timestamp": 1636301383
    },
    {
        "content": "<p>Seems <code>#print options</code> is missing on Lean 4. <a href=\"https://leanprover.github.io/reference/other_commands.html#instructions\">https://leanprover.github.io/reference/other_commands.html#instructions</a></p>",
        "id": 260583103,
        "sender_full_name": "Sofia",
        "timestamp": 1636302610
    },
    {
        "content": "<p>Either way, I need to sleep. TTYL. o/</p>",
        "id": 260583109,
        "sender_full_name": "Sofia",
        "timestamp": 1636302619
    }
]