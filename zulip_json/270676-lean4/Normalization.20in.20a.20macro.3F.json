[
    {
        "content": "<p>How do I normalize a term in a macro? I imagine this is possible, since the LEAN kernel implements normalization by evaluation?</p>\n<p>For example, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Listlike</span>\n<span class=\"bp\">|</span> <span class=\"n\">Cons</span><span class=\"o\">:</span> <span class=\"n\">Listlike</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Listlike</span>\n<span class=\"bp\">|</span> <span class=\"n\">Done</span><span class=\"o\">:</span> <span class=\"n\">Listlike</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">cons_fn</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Listlike</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Listlike</span> <span class=\"o\">:=</span> <span class=\"n\">Listlike.Cons</span> <span class=\"n\">l</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">listlike</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Done\"</span> <span class=\"o\">:</span>  <span class=\"n\">listlike</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Cons\"</span> <span class=\"n\">listlike</span> <span class=\"o\">:</span> <span class=\"n\">listlike</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"listlike%\"</span> <span class=\"n\">listlike</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">listlike</span><span class=\"bp\">%</span> <span class=\"n\">Done</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Listlike.Done</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">listlike</span><span class=\"bp\">%</span> <span class=\"n\">Cons</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">listlike</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cons_fn</span> <span class=\"o\">(</span><span class=\"n\">listlike</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Listlike</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">listlike</span><span class=\"bp\">%</span> <span class=\"n\">Cons</span> <span class=\"n\">Cons</span> <span class=\"n\">Done</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : Listlike :=</span>\n<span class=\"cm\">cons_fn (cons_fn Listlike.Done)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I want <code>#print foo</code> to be <code>Listlike.Cons (Listlike.Cons (Listlike.Done))</code>. Is this possible to achieve?</p>",
        "id": 256032621,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633341238
    },
    {
        "content": "<p>There is <code>Lean.Meta.reduce</code>, but you will need an elaborator to run it</p>\n<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/Normalization.20in.20a.20macro.3F/near/256032621\">said</a>:</p>\n<blockquote>\n<p>since the LEAN kernel implements normalization by evaluation?</p>\n</blockquote>\n<p>It doesn't, btw</p>",
        "id": 256033676,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633341801
    },
    {
        "content": "<p>Is there an example program that uses <code>Lean.Meta.reduce</code> I can read? That'd be super.</p>\n<blockquote>\n<p>It doesn't, btw</p>\n</blockquote>\n<p>Interesting, what algorithm does Lean use to typecheck? I assumed it used NBE from glancing the kernel :)</p>",
        "id": 256036770,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633343537
    },
    {
        "content": "<p>I found this: <a href=\"https://github.com/digama0/lean-type-theory\">https://github.com/digama0/lean-type-theory</a>. Will give it a read!</p>",
        "id": 256189227,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633418427
    }
]