[
    {
        "content": "<p>What does the error <code>invalid pattern variable, must be atomic</code> mean w.r.t. to a <code>match</code> expression?<br>\nFor example in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Rooted</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"§\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Rooted.root</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Rooted</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"bp\">§</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 251548600,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630499094
    },
    {
        "content": "<p>If I change the second to last line to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rooted.root</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>... I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"n\">or</span> <span class=\"kd\">constant</span> <span class=\"n\">marked</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"o\">[</span><span class=\"n\">matchPattern</span><span class=\"o\">]</span><span class=\"bp\">'</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 251549966,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630499753
    },
    {
        "content": "<p>You cannot match against <code>Rooted.root</code>, it is not a constructor</p>",
        "id": 251550046,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630499781
    },
    {
        "content": "<p>You can compare <code>x</code> against it using <code>==</code>, assuming <code>[BEq α]</code></p>",
        "id": 251550095,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630499808
    },
    {
        "content": "<p>Hmmm, why does this work then:?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Are <code>1</code> and <code>2</code> considered constructors?</p>",
        "id": 251550186,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630499870
    },
    {
        "content": "<p>Yes. Try removing the last case.</p>",
        "id": 251550612,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630500073
    },
    {
        "content": "<p>This is off-topic now, but what is the use of <code>BEq</code>as compared to <code>DecidableEq</code>?</p>",
        "id": 251550784,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630500156
    },
    {
        "content": "<p><code>==</code> does not need to behave the same as <code>=</code>. For example, <code>BEq Float</code> is not reflexive.</p>",
        "id": 251550996,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630500248
    },
    {
        "content": "<p>And <code>BEq Expr</code> will compare terms up to alpha equivalence</p>",
        "id": 251551207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630500364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 251552326,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630500858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20invalid.20pattern.20variable/near/251550046\">said</a>:</p>\n<blockquote>\n<p>You cannot match against <code>Rooted.root</code>, it is not a constructor</p>\n</blockquote>\n<p>You could however do so, if you mark it <code>[matchPattern]</code> (in the same file) like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">matchPattern</span><span class=\"o\">]</span> <span class=\"n\">Rooted.root</span>\n</code></pre></div>",
        "id": 251647245,
        "sender_full_name": "Mac",
        "timestamp": 1630540924
    },
    {
        "content": "<p>What does this attribute do?</p>",
        "id": 251675911,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1630567512
    },
    {
        "content": "<p>It marks the definition as reducible by the pattern exhaustiveness checker</p>",
        "id": 251676565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630567923
    },
    {
        "content": "<p>it's generally required for any definition you want to use on the lhs of a pattern match</p>",
        "id": 251676648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630567963
    },
    {
        "content": "<p>and it's usually only useful if the definition unfolds to some combination of constructors</p>",
        "id": 251676698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630567999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20invalid.20pattern.20variable/near/251647245\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20invalid.20pattern.20variable/near/251550046\">said</a>:</p>\n<blockquote>\n<p>You cannot match against <code>Rooted.root</code>, it is not a constructor</p>\n</blockquote>\n<p>You could however do so, if you mark it <code>[matchPattern]</code> (in the same file) like so:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">matchPattern</span><span class=\"o\">]</span> <span class=\"n\">Rooted.root</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Did you try it? As Mario said, it doesn't make sense here, and it doesn't work.</p>",
        "id": 251679583,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1630569854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Sadly, no I did not try it. I had used <code>@[matchPattern]</code> with classes before and assumed it worked.  I guess that I was just lucky, as it only seems to work when the elaborator can smartly deduced the class instance unfolds to a constructor. For example, the following does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Rooted</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">matchPattern</span><span class=\"o\">]</span> <span class=\"n\">Rooted.root</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Rooted</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">false</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">Rooted.root</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 251817986,
        "sender_full_name": "Mac",
        "timestamp": 1630639834
    }
]