[
    {
        "content": "<p>In the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">test</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"ยง\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n<span class=\"n\">macro</span> <span class=\"n\">num</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwError</span> <span class=\"s2\">\"Test Error\"</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">ยง</span>\n</code></pre></div>\n<p>The term <code>1 ยง</code> produces the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">term__'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"mi\">1</span><span class=\"bp\">ยง</span>\n</code></pre></div>\n<p>I don't understand the error message, and was rather expecting to see <code>Test Error</code>.<br>\nWhat is going on here?</p>",
        "id": 266709706,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641229522
    },
    {
        "content": "<p>The overloading is because <code>macro</code> is <code>syntax</code>+<code>macro_rules</code>. The wrong error message is... unfortunate.</p>",
        "id": 266710094,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641229697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/elaboration.20function.20has.20not.20been.20implemented/near/266710094\">said</a>:</p>\n<blockquote>\n<p>The overloading is because <code>macro</code> is <code>syntax</code>+<code>macro_rules</code>. The wrong error message is... unfortunate.</p>\n</blockquote>\n<p>Yeah I just noticed that, too <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI've changed the post above accordingly.</p>",
        "id": 266710169,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641229735
    },
    {
        "content": "<p>So just to make sure I understand correctly:<br>\nThe <code>elaboration function for 'term__' has not been implemented</code> message is just the current state of Lean 4, but eventually it should show <code>Test Error</code>?</p>",
        "id": 266787921,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641289723
    },
    {
        "content": "<p>I was looking at the wrong file yesterday. It's fixed now.</p>",
        "id": 266790837,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641291644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/elaboration.20function.20has.20not.20been.20implemented/near/266790837\">said</a>:</p>\n<blockquote>\n<p>I was looking at the wrong file yesterday. It's fixed now.</p>\n</blockquote>\n<p>What is fixed about it?</p>\n<p>I am running into this problem for this DSL:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Arithmetic for dimensional calculus</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">DCalc</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">symbol</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DCalc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">power</span> <span class=\"o\">:</span> <span class=\"n\">DCalc</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DCalc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">DCalc</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DCalc</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DCalc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"n\">DCalc</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DCalc</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">DCalc</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">dcalc</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">dcalc</span> <span class=\"c1\">-- DCalc.symbol</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dcalc</span> <span class=\"s2\">\"^\"</span> <span class=\"n\">num</span> <span class=\"s2\">\"/\"</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">dcalc</span> <span class=\"c1\">-- DCalc.power</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dcalc</span> <span class=\"s2\">\"*\"</span> <span class=\"n\">dcalc</span> <span class=\"o\">:</span> <span class=\"n\">dcalc</span> <span class=\"c1\">-- DCalc.mul</span>\n<span class=\"n\">syntax</span> <span class=\"n\">dcalc</span> <span class=\"s2\">\"/\"</span> <span class=\"n\">dcalc</span> <span class=\"o\">:</span> <span class=\"n\">dcalc</span> <span class=\"c1\">-- DCalc.div</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">dcalc</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">dcalc</span>\n\n<span class=\"c1\">-- auxiliary notation for translating `dcalc` into `term`</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[DCalc| \"</span> <span class=\"n\">dcalc</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">DCalc.symbol</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">x.getId</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">numLit</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">DCalc.power</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">d</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">DCalc.mul</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">DCalc.div</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">dcalc</span><span class=\"o\">)</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">])</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">]</span>           <span class=\"c1\">-- DCalc.symbol \"x\" : DCalc</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">]</span>         <span class=\"c1\">-- DCalc.symbol \"x\" : DCalc</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">]</span>       <span class=\"c1\">-- DCalc.symbol \"x\" : DCalc</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>The last 3 checks give me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">dcalc__'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"n\">x</span>\n</code></pre></div>\n<p>This example is a slight modification of the one in the source: doc/metaprogramming-arith.md<br>\nWhy does it trigger this error?</p>\n<ul>\n<li>Nicolas.</li>\n</ul>",
        "id": 269037642,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1642969798
    },
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">DCalc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">dcalc</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">DCalc.mul</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>etc. you are transferring <code>x</code> from the category <code>dcalc</code> to <code>term</code>, in which it has no interpretation. You need to continue the translation recursively, like you did in the parenthesis case.</p>",
        "id": 269038149,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1642970554
    },
    {
        "content": "<p>Ops! Thanks for the feedback!</p>",
        "id": 269038587,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1642971167
    }
]