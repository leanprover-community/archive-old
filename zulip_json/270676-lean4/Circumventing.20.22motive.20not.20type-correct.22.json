[
    {
        "content": "<p>Since this has been a continuous issue for me, asking for some guidance on how to avoid issues with rewriting terms appearing in dependent positions.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">length_rangeAux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rangeAux</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">L.length</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">rangeAux</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">length_range</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">range</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">rangeAux_eq_append</span>\n    <span class=\"o\">:</span> <span class=\"n\">rangeAux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rangeAux</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">rangeAux</span> <span class=\"n\">n</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">rangeAux</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"n\">L</span> <span class=\"k\">from</span>\n      <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">L</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">L</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rangeAux</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">rangeAux</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ih</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.append_assoc</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">get_range</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"n\">exact</span> <span class=\"n\">i.elim0</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">range</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rangeAux</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rangeAux_eq_append</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Here, I want to rewrite but the term occurs as the argument to <code>get</code>. I've tried manually generalizing the term here but failed to make progress</p>",
        "id": 278621975,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649713896
    },
    {
        "content": "<p>best thing is to eliminate references to <code>get</code> asap by replacing them with <code>get?</code></p>",
        "id": 278622144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649713989
    },
    {
        "content": "<p>(that's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 278622184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649714025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Circumventing.20.22motive.20not.20type-correct.22/near/278622184\">said</a>:</p>\n<blockquote>\n<p>(that's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>\n</blockquote>\n<p>Thought I could get away with it cuz this is a useful lemma to have around <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 278622853,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649714447
    },
    {
        "content": "<p>the important thing about <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is to put the right imports at the top</p>",
        "id": 278622911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649714489
    },
    {
        "content": "<p>in this case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n</code></pre></div>",
        "id": 278622919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649714495
    },
    {
        "content": "<p>Oh, sorry! I think it just needs <code>namespace List</code>, everything else is Prelude material I think</p>",
        "id": 278623030,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649714541
    },
    {
        "content": "<p>Rewriting the get is a good idea, I can definitely give that a shot. But it doesn't apply in general, right? I was reading through an old thread in Lean3 world and I think at the time you suggested just using <code>simp_rw</code> or something which would insert <code>cast</code>s as needed</p>",
        "id": 278623102,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649714589
    },
    {
        "content": "<p>(But which we don't have yet in Lean 4)</p>",
        "id": 278623145,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649714622
    },
    {
        "content": "<p>it kind of applies in general, the general technique is to reduce dependent types to nondependent types + predicates</p>",
        "id": 278623160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649714631
    },
    {
        "content": "<p>Ah, which is what you showed me last time with generalizing to <code>forall o h,</code> etc</p>",
        "id": 278623277,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649714698
    },
    {
        "content": "<p>Okay, I did try something like that with this example but it didn't seem to be helping, let me see if I can re-derive that...</p>",
        "id": 278623321,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649714723
    },
    {
        "content": "<p>here's a proof (modulo the part I assume you know how to handle). I think that <code>get_range</code> as stated is just a really hard theorem to work with and I would suggest alternatives like <code>get_range'</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">range</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rangeAux</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rangeAux_eq_append</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">get_range'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Option.some_inj</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">get</span><span class=\"bp\">?</span><span class=\"n\">_range</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">get_range</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">get_range'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">i.2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 278624674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649715580
    },
    {
        "content": "<p>BTW, we should probably use the TR + csimp trick to hide <code>rangeAux</code>. We have done it for a few <code>List</code> functions, but not for <code>range</code>. <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/List/Basic.lean#L145\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/List/Basic.lean#L145</a></p>",
        "id": 278625805,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649716341
    },
    {
        "content": "<p>As in define <code>range</code> via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and then prove equivalence to the TR one?</p>",
        "id": 278627668,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649717753
    },
    {
        "content": "<p>I think the best definition for proofs is one that uses <code>::</code> and does not use tail recursion</p>",
        "id": 278627798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649717826
    },
    {
        "content": "<p>It has the same problem as <code>reverse</code> in that it can't really be defined that way</p>",
        "id": 278627936,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1649717905
    },
    {
        "content": "<p>not quite like <code>reverse</code>, you can do it but you need an <code>aux</code> which specifies the starting point</p>",
        "id": 278627977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649717950
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rangeAux₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">rangeAux₂</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range₂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rangeAux₂</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 278628200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649718055
    },
    {
        "content": "<p>What is the \"TR + csimp trick\"?</p>",
        "id": 278654248,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1649746314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Circumventing.20.22motive.20not.20type-correct.22/near/278654248\">said</a>:</p>\n<blockquote>\n<p>What is the \"TR + csimp trick\"?</p>\n</blockquote>\n<p>Here is the <code>List.map</code> instance</p>\n<ul>\n<li>We first define the non-tail-recursive version that is more convenient to use in proofs</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">as</span>\n</code></pre></div>\n<ul>\n<li>Then, we define the tail-recursive version which is better for code generation</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">mapTRAux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span>    <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bs.reverse</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mapTRAux</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">mapTR</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mapTRAux</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<ul>\n<li>We prove they are equal and mark the theorem with <code>[csimp]</code>. After that, the code generator replaces any occurrence of <code>map</code> with <code>mapTR</code>.</li>\n</ul>",
        "id": 278688186,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649768232
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mapTRAux_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mapTRAux</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"bp\">=</span>  <span class=\"n\">bs.reverse</span> <span class=\"bp\">++</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">as</span> <span class=\"n\">generalizing</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mapTRAux</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mapTRAux</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">),</span> <span class=\"n\">reverse_cons</span><span class=\"o\">,</span> <span class=\"n\">append_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[csimp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_eq_mapTR</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">mapTR</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">β</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">as</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mapTR</span><span class=\"o\">,</span> <span class=\"n\">mapTRAux_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 278688218,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649768254
    },
    {
        "content": "<p>This is very interesting. Does this situation / trick also come up for Lean 3?</p>\n<p>Also, once the two definitions are set up and the <del>second one</del> equality theorem is marked <code>[csimp]</code>, is the non-tail-recursive definition still available if we want to use it for further proofs?</p>",
        "id": 278721054,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649782596
    },
    {
        "content": "<p>From looking at the implementation <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/CSimpAttr.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/CSimpAttr.lean</a> the \"marking\" only causes the two to be added into a Name -&gt; Name map, it doesnt touch the declarations at all.  ANd the fact that <code>replaceConstants</code> is exported here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/CSimpAttr.lean#L53\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/CSimpAttr.lean#L53</a>, makes me think that it's probably gonna be used by the C parts of the compiler after the registration process.</p>",
        "id": 278722462,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649783204
    },
    {
        "content": "<p>Also both the export and csimp attributes are missing from doc-gen I'll add them right away...</p>",
        "id": 278722475,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649783216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> there doesn't seem to be an obvious way to gain access to the theorem that declares this type of replacement is valid right now since it's not implemented as a regular tag attribute but this custom extension based on the name map, could we maybe have a tag attribute that marks the theorem in addition to this map? Or some other way to recover it?</p>\n<p>Also since it is not obvious from the declaration that it will be replaced later on I guess it would make sense to mark the declaration that is getting replaced by the compiler later on as well in the docs right? (which is possible right now)</p>",
        "id": 278723632,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649783806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/270676-lean4/topic/Circumventing.20.22motive.20not.20type-correct.22/near/278721054\">said</a>:</p>\n<blockquote>\n<p>This is very interesting. Does this situation / trick also come up for Lean 3?</p>\n<p>Also, once the two definitions are set up and the <del>second one</del> equality theorem is marked <code>[csimp]</code>, is the non-tail-recursive definition still available if we want to use it for further proofs?</p>\n</blockquote>\n<p>This approach makes the \"official\" one not tail recursive, and when you definitionally unfold it and use it in proofs that's what you see. The <code>@[csimp]</code> lemma rewrites the non-tail-recursive function into a tail recursive version (which is also available for proofs, but is not recommended outside the <code>map_eq_mapTR</code> theorem itself) which is intended primarily for compilation. This means that when you use <code>map</code> you get the <code>mapTR</code> implementation in the compiler, but when you reason about it you see only <code>map</code>. This gives us the best of both worlds, and the equality is proven so there is no expansion of the TCB either.</p>",
        "id": 278731508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649787192
    },
    {
        "content": "<p>This trick is not done in lean 3, but I think the lean 3 interpreter doesn't do TCO so there isn't much point in formulating things as tail recursive</p>",
        "id": 278731644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649787244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Circumventing.20.22motive.20not.20type-correct.22/near/278723632\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> there doesn't seem to be an obvious way to gain access to the theorem that declares this type of replacement is valid right now since it's not implemented as a regular tag attribute but this custom extension based on the name map, could we maybe have a tag attribute that marks the theorem in addition to this map? Or some other way to recover it?</p>\n<p>Also since it is not obvious from the declaration that it will be replaced later on I guess it would make sense to mark the declaration that is getting replaced by the compiler later on as well in the docs right? (which is possible right now)</p>\n</blockquote>\n<p>I could also try and add this myself if the compiler folks are busy doing other stuff (and its desired) of course.</p>",
        "id": 278989158,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649954101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Sorry for not responding earlier, I was a bit overwhelmed in the last few days. I will add the missing feature today.</p>",
        "id": 279081185,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650030246
    },
    {
        "content": "<p>No worries^^ Usually you just add something the next day whenever you are asked for something, it's perfectly fine to take a bit longer of course xd</p>",
        "id": 279081229,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650030294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Added <code>hasCSimpAttribute</code></p>",
        "id": 279099462,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1650041800
    },
    {
        "content": "<p>\\o/</p>",
        "id": 279099479,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650041810
    }
]