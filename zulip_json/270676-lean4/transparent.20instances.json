[
    {
        "content": "<p>I'm trying to write some category theory in Lean 4.<br>\nI essentially ported mathlib's code, and I have this notation for arrows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\"⟶\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasHom.hom</span> <span class=\"c1\">-- \\h</span>\n</code></pre></div>\n<p>I defined <code>Category</code> and <code>Functor</code>, then the category of categories.<br>\nI have this notation for functors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\"⥤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor</span>\n</code></pre></div>\n<p>(By the way, I choose to have all objects bundled, rather than a carrier+typeclass setup. That is why <code>Functor</code> and <code>Category</code> are structures to me here, rather than a typeclass, and I don't have \"unbundled functors\". This works well in Lean 4 imho, at least in my use case.)</p>\n<p>Now, in the category of categories, I of course defined arrows between <code>C</code> and <code>D</code> to be functors <code>C ⥤ D</code>.<br>\nThe thing is, the notation <code>C ⥤ D</code> is more natural than <code>C ⟶ D</code> for functors, and sometimes it makes more sense to define some constructions on <code>Functor</code> than on <code> - ⟶ -</code> (it's the case to me when I define a product of functors as a functor between the products).<br>\nIs it possible to make Lean remove the typeclass application whenever it sees <code>C ⟶ D</code>, to instead desugar it to <code>C ⥤ D</code>?</p>\n<p>I guess this behavior would be something like \"transparent instances\", just like marking a definition <code>@[reducible]</code> makes it transparent to typeclass resolution.</p>\n<p>(I guess it would also make sense to have a similar behavior for other objets where arrows also make sense \"outside of the category\", possibly in linear maps between vector spaces, but I can't really find another compelling example than the functors off the top of my head.)</p>",
        "id": 294243027,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1660907782
    },
    {
        "content": "<p>Actually now that I think of it there may be more places where such a behavior would be relevant: for instance, if I define monoidal categories, I want to have a notation for monoidal functors, and I also want to be able to write about functors between monoidal categories by forgetting the monoidal structure. I guess this situation can be generalized to any category with additional structure.<br>\nAlso, if I want to write about formal semantics, I may want to have a category between terms where arrows are reductions (I'm kind of making that up though, I don't really know how it's done), then I want the reductions to be properly denoted with a wiggly arrow rather than the <code>hom</code> arrow. This goes beyond notation: there is additional structure in reductions (for instance, I may want to define deduction rules for my reductions) that has not much to do with the categorical structure.</p>",
        "id": 294247037,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1660909308
    },
    {
        "content": "<p>I don't know the answer, but I think it's an important question. In mathlib, it routinely causes a lot of pain to go back and forth between, say, linear maps and morphisms in <code>Module R</code>.</p>",
        "id": 294256662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660912840
    },
    {
        "content": "<p>We've used some tricks in some cases, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Sheaf.hom\">docs#category_theory.Sheaf.hom</a> is a structure wrapper around natural transformations for precisely this reason</p>",
        "id": 294257023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660912932
    }
]