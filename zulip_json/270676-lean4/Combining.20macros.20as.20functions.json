[
    {
        "content": "<p>Say I wanted to combine two macros, e.g. because they represent two different syntax extensions and I want to call them recursively. I tried naming the functions and building one that combines them, but that apparently doesn't work. Here's an MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">bar</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo1</span><span class=\"o\">)</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo2</span><span class=\"o\">)</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"n\">foo</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">bar</span>\n\n<span class=\"kd\">@[macro foo1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo1</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"kd\">@[macro foo2]</span>\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo2</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getNat.repr</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">expandFoo1</span> <span class=\"n\">x</span>\n    <span class=\"n\">expandFoo2</span> <span class=\"n\">x1</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">foo</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n     <span class=\"c1\">-- let xs' &lt;- xs.mapM expandFoo1</span>\n     <span class=\"c1\">-- let xs' &lt;- xs.mapM expandFoo2</span>\n     <span class=\"k\">let</span> <span class=\"n\">xs'</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">xs.mapM</span> <span class=\"n\">expandFoo</span>\n     <span class=\"k\">let</span> <span class=\"n\">xsl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs'.toList.map</span> <span class=\"bp\">λ</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span>\n     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">xsl</span><span class=\"o\">))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[bar|\"</span> <span class=\"n\">bar</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">bar</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">baz</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">|</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I imagine I'm missing some housekeeping in <code>MacroM</code> with my improvised <code>do</code>-gluing there (actually based on Haskell's <code>&gt;=&gt;</code>). I imagine there might already even be a function that join macros like these somewhere but I cannot find it, can someone maybe point me to it?</p>",
        "id": 290067882,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658219326
    },
    {
        "content": "<p>Another option that kind of works but is pretty unsatisfactory (feels hacky) is just adding both patterns to one function and then marking the syntax by hand by defining another function (as the macro annotations won't combine)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[macro foo1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo1</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"n\">x.getNat.repr</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"kd\">@[macro foo2]</span>\n<span class=\"kd\">def</span> <span class=\"n\">expandFoo2</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span> <span class=\"o\">:=</span> <span class=\"n\">expandFoo1</span>\n</code></pre></div>\n<p>(I'm assuming that I'll also want those macro expansions to work on their own)</p>",
        "id": 290072178,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1658221929
    }
]