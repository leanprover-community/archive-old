[
    {
        "content": "<p>How far away are we from a Lean 4 web editor? I'm thinking about making Lean 4 gamey teaching tools and right now installing Lean 4 is not a reasonable option for a wide class of mathematicians.</p>",
        "id": 244410945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054075
    },
    {
        "content": "<p>Note: I'm not in any hurry! Everything still needs a lot of work at my end.</p>",
        "id": 244410986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054122
    },
    {
        "content": "<p>We're at least much closer thanks to <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>'s work on compiling Lean 4 to Wasm. However, someone would still have to compose the Wasm-compiled Lean server with e.g. the Monaco web editor. Afaik that hasn't been done before, all previous work is about connecting a web editor to a language server running on some, well, server somewhere else, Gitpod-style.</p>",
        "id": 244413127,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625055294
    },
    {
        "content": "<p>Since Lean 4 has a VSCode extension, one could probably use an existing web IDE that supports VSCode extension like <a href=\"https://www.eclipse.org/che/\">Eclipse Che</a> / <a href=\"https://theia-ide.org/\">Theia</a>.</p>",
        "id": 244427645,
        "sender_full_name": "Mac",
        "timestamp": 1625061690
    },
    {
        "content": "<p>This is what Sebastian meant with the Gitpod-style, which already supports VSCode in the browser in the same manner as Eclipse Theia. We already use that for the theorem prover lab. The Lean 3 web editor runs entirely in the browser, including the language server.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThis is the link to the gitpod version of the theorem prover lab: <a href=\"https://gitpod.io/#https://github.com/IPDSnelting/tba-2021\">https://gitpod.io/#https://github.com/IPDSnelting/tba-2021</a><br>\nIf your only goal is avoiding that people need to install Lean 4, this should be sufficient (up to 50h/month) and you should be able to copy the gitpod config files (.gitpod.Dockerfile and .gitpod.yml) from the github to set up your own: <a href=\"https://github.com/IPDSnelting/tba-all\">https://github.com/IPDSnelting/tba-all</a><br>\nTo build an actual gamey teaching tool, we'd likely need a Monaco editor in the sense of Lean 3.</p>",
        "id": 244430335,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1625062791
    },
    {
        "content": "<p>Shoot, let me fix the links</p>",
        "id": 244430529,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1625062861
    },
    {
        "content": "<p>With the LSP server architecture relying on the ability to spawn isolated processes, for a web editor I think at least a version of <code>IO.Process.spawn</code> which creates a WebWorker would have to be implemented.</p>",
        "id": 244440125,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625066323
    },
    {
        "content": "<p>There's also the brutal method of just starting the file worker directly (since the web editor only has a single file anyhow).</p>",
        "id": 244440948,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625066605
    },
    {
        "content": "<p>That could also work! One would probably have to adapt the worker somewhat, e.g. to do the full LSP initialization</p>",
        "id": 244442784,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625067236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/web.20editor/near/244430335\">said</a>:</p>\n<blockquote>\n<p>This is what Sebastian meant with the Gitpod-style, which already supports VSCode in the browser in the same manner as Eclipse Theia. We already use that for the theorem prover lab. The Lean 3 web editor runs entirely in the browser, including the language server.</p>\n</blockquote>\n<p>In fact, if I am not mistaken, Gitpod uses Theia itself. I was just a little confused by Sebastian's statement about the web editor connecting to a language server <em>somewhere else</em>.  But I guess I just misunderstood.</p>",
        "id": 244460544,
        "sender_full_name": "Mac",
        "timestamp": 1625074452
    },
    {
        "content": "<blockquote>\n<p>Gitpod uses Theia itself</p>\n</blockquote>\n<p>Gitpod did originally use Theia by default, but they switched to VSCode a few months ago. In fact, the Lean 4 extension does not work with Theia, only VSCode.</p>\n<blockquote>\n<p>I was just a little confused by Sebastian's statement about the web editor connecting to a language server <em>somewhere else</em>. But I guess I just misunderstood.</p>\n</blockquote>\n<p>You're not misunderstanding that, that's what all these fully-fledged IDEs (like Gitpod) do, see e.g. the <a href=\"https://theia-ide.org/docs/architecture/#architecture-overview\">architecture overview of Theia</a>. The language server does not run in the web browser, but on the corresponding host. The Monaco setup of Lean 3 works differently.</p>",
        "id": 244467471,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1625077455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/web.20editor/near/244467471\">said</a>:</p>\n<blockquote>\n<p>The Monaco setup of Lean 3 works differently.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/lean-web-editor/\"><code>lean-web-editor</code></a> indeed runs a WASM version of Lean in the browser.  But this has nothing to do with using Monaco as an editor.  We could also run Lean on a server somewhere and connect it to Monaco via websockets or sth (just like gitpod).</p>",
        "id": 244467730,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1625077572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/web.20editor/near/244467471\">said</a>:</p>\n<blockquote>\n<p>You're not misunderstanding that, that's what all these fully-fledged IDEs (like Gitpod) do, see e.g. the <a href=\"https://theia-ide.org/docs/architecture/#architecture-overview\">architecture overview of Theia</a>. The language server does not run in the web browser, but on the corresponding host. The Monaco setup of Lean 3 works differently.</p>\n</blockquote>\n<p>Ah, I see this is a terminology problem. When I hear web editor, I interpret that to mean the server that hosts the editor (where the language server is also running), I don't think of the web app client running in the browser. So I think of the web editor and language server as being collocated on the host without regard for the browser, hence my confusion.</p>",
        "id": 244475649,
        "sender_full_name": "Mac",
        "timestamp": 1625081432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/web.20editor/near/244467471\">said</a>:</p>\n<blockquote>\n<p>In fact, the Lean 4 extension does not work with Theia, only VSCode.</p>\n</blockquote>\n<p>Oh! Do you (or <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>) happen to know what the road block to supporting Theia is?</p>",
        "id": 244475968,
        "sender_full_name": "Mac",
        "timestamp": 1625081589
    },
    {
        "content": "<p>Actually, I'd like to state that in a weaker form; Theia on Gitpod did not work together with the Lean 4 extension. I vaguely remember that this was somehow due to semantic highlighting, for which Theia has added support long ago, so maybe Gitpod was just running an older version.</p>",
        "id": 244477763,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1625082440
    },
    {
        "content": "<p>How far away are we from a hopefully non-sluggish web interface to Lean 4?</p>",
        "id": 251046858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630147148
    },
    {
        "content": "<p>Hello, I’m interested in running Lean 4 in a browser-based editor like Monaco. It sounds like Lean 4 is much larger than Lean 3 (original question for context: <a href=\"https://github.com/leanprover/lean-client-js/issues/43\">https://github.com/leanprover/lean-client-js/issues/43</a>). Does this rule out the possibility of running Lean 4 client-side and would require hosting of Lean 4 in some kind of server and creating a client-server connection via something like websocket? I'm fine with putting in the work to make it happen, just wanted to know if this is the most viable approach before I go down the rabbit hole.</p>",
        "id": 281482203,
        "sender_full_name": "Taro Naoi",
        "timestamp": 1651864463
    },
    {
        "content": "<p>I would say we mostly just don't know yet? Lean does compile to C which we could probably get to compile to WASM for a web browser if we wanted to so it might be possible, might also be too big.</p>",
        "id": 281487493,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651867440
    },
    {
        "content": "<p>Though according to the thread <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> seems to be the person for this</p>",
        "id": 281487596,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1651867496
    },
    {
        "content": "<blockquote>\n<p>Does this rule out the possibility of running Lean 4 client-side and would require hosting of Lean 4 in some kind of server and creating a client-server connection via something like websocket? </p>\n</blockquote>\n<p>No, it does not. <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> already managed to compile Lean 4 into javascript using emscripten. The current Lean 4 binary is much bigger than the Lean 3 one, but this is due to an issue in our current code generator. It is too aggressive in inlining local functions. We are planning to address this issue when we rewrite the code generator in Lean.<br>\nFor having Lean in the browser using Monaco, we still need the LSP client part. As <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> pointed out , <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> is the best person to answer this question.</p>",
        "id": 281487763,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1651867587
    },
    {
        "content": "<p>It has been a while since I looked into this and thoughts scattered, but I can attempt to summarise the state of things.</p>\n<ul>\n<li>Having browser-based Monaco connect to a Lean 4 server hosted on a native CPU somewhere already works on various platforms, for example on Gitpod. To implement this yourself I imagine you would have to duplicate some of the work Gitpod did, but it demonstrably works.</li>\n<li>When we are talking about running Lean 4 itself in the browser, we have to disambiguate what we mean. There are two distinct modes of operation to get running — the <em>batch compiler</em>, i.e. the <code>lean</code> you would run on the command line, and the <em>server</em>, invoked with <code>lean --server</code>. We use the same binary (<code>lean</code>) to run both, but they are really quite different applications. Moreover there are at least two possible compilation targets, namely WASM with the Emscripten runtime, and WASM with a custom runtime (a bit lower-level, kind of like WASI).</li>\n</ul>\n<p>In <a href=\"https://github.com/leanprover/lean4/pull/505\">lean4#505</a>, I got the <em>batch compiler</em> working with Emscripten runtime, but it has some issues.</p>\n<ul>\n<li>It is slow to load and to execute. I think this is surmountable with engineering effort, but I don't know how much effort. Here are some issues I identified:<ul>\n<li>Lean assumes a POSIX-like environment with blocking <code>open/read</code> for files which does not fit the web. On the web, you really want to load things asynchronously. This may require explicit support in the Lean runtime.</li>\n<li>The Lean kernel (and maybe other parts, but mostly the kernel) relies on exceptions for control flow. At the time of my experiments, exceptions were not natively supported in WASM, and would instead work through a hack in the Emscripten compiler which jumps from WASM to JS every time an exception is raised, causing both runtime and code size overhead. But it <a href=\"https://webassembly.org/roadmap/\">looks like</a> the exception extension is now supported in major browsers, so this may be easy enough to dispose of.</li>\n</ul>\n</li>\n<li>WASM is currently a 32-bit platform. Consequently, WASM-Lean cannot load \"standard\" 64-bit .oleans compiled by a 64-bit native Lean binary. So the .oleans must be either made platform independent (this is not great since the naïve implementation increases importing overhead on 64-bit platforms, whereas a more complex implementation would be, well, more complex), or they must be built by a 32-bit Lean (e.g. by WASM-Lean running in Node.js). The 64-bit WASM extension is not widely supported as of now.</li>\n</ul>\n<p>Then supposing we wanted compile the <em>server</em> for Emscripten (in order to have purely browser-based LSP support), there are additional things to do:</p>\n<ul>\n<li>The server heavily relies on threads to carry out concurrent processing. This also has changed since the <a href=\"https://github.com/leanprover/lean4/pull/505\">lean4#505</a> experiments, since back then we had to rely on the Emscripten runtime, whereas now it looks like WASM threads are widely supported. But their execution semantics are specific to the web and would also need special support in the Lean runtime.</li>\n<li>Besides threads, the server uses POSIX processes (one \"watchdog\" process managing a \"worker\" process for each open file). One option suggested by Gabriel above would be not do it and only start one worker. This would limit us to a single open file (fine in games like NNG), and maybe to a static list of <code>import</code>s (we rely on the process restarting when the <code>import</code>s change; it might be possible to do away with this with some hacks when only one file is open), but might work easily enough with a modified watchdog. For full-featured support, we'd need code in the Lean runtime for launching WebWorker-based processes.</li>\n</ul>\n<p>Lastly let me mention the Emscripten-less variant where we compile to WASM without Emscripten and implement our own JS runtime for things like opening files. This might improve performance as Emscripten can be heavyweight, but would be harder to get working.</p>\n<p>So the short story is, back in 2021 WASM-Lean was not very feasible due to lack of browser support for the exceptions and threads WASM extensions. These are supported now so it seems possible, but would be a bit of work, mostly adding things to the Lean runtime.</p>",
        "id": 281494817,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1651871661
    },
    {
        "content": "<p>I just wanted to check in here and see if the status of a Lean 4 web editor has changed since May.</p>",
        "id": 292056192,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640442
    },
    {
        "content": "<p>It hasn't</p>",
        "id": 292056239,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659640466
    },
    {
        "content": "<p>A possible alternative is post up a machine with the (official) <a href=\"https://code.visualstudio.com/blogs/2022/07/07/vscode-server\">VS Code Server</a>, assuming I get access, and an install of Lean 4 . Wrap it in some auth.</p>",
        "id": 292056530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1659640649
    },
    {
        "content": "<p>Alternatively, VS Code has the \"Remote-Container: Try a Development Container Sample...\".  Perhaps if there were someone that works at MSFT, they could do some convincing to have that container added to the sample repo <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 292287080,
        "sender_full_name": "Tom",
        "timestamp": 1659832414
    },
    {
        "content": "<p>It looks like someone has managed to get an in-browser language server to work: <a href=\"https://www.hiro.so/blog/write-clarity-smart-contracts-with-zero-installations-how-we-built-an-in-browser-language-server-using-wasm\">https://www.hiro.so/blog/write-clarity-smart-contracts-with-zero-installations-how-we-built-an-in-browser-language-server-using-wasm</a></p>",
        "id": 321037767,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673558982
    },
    {
        "content": "<blockquote>\n<p>From any GitHub repository, it’s possible to press “.” to open and edit a project in VS Code for the web.</p>\n</blockquote>\n<p>whoa!</p>",
        "id": 321039845,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673559804
    }
]