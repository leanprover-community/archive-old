[
    {
        "content": "<p>I am experimenting with unexpanders, which allow macros to appear in pretty printing. When trying to implement one for a binder I get this error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bindme\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[appUnexpander myfun]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpand</span> <span class=\"o\">:</span> <span class=\"n\">PrettyPrinter.Unexpander</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bindme</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bindme</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"c1\">--[Error pretty printing expression: parenthesize: uncaught backtrack exception. Falling back to raw printer.]</span>\n<span class=\"c1\">-- myfun.{u_1 u_1} ?_uniq.952 ?_uniq.952 (fun (x : ?_uniq.952) =&gt; x) : ?m.952 → ?m.952</span>\n</code></pre></div>\n<p>Any ideas?</p>",
        "id": 221956915,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610034030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> To be sure, what is the expected output of <code>#check</code> that should replace the error?</p>",
        "id": 222041400,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610086081
    },
    {
        "content": "<p>Should it be <code>myfun fun (x : ?m.1129) =&gt; x : ?m.1129 → ?m.1129</code>?</p>",
        "id": 222042340,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610087540
    },
    {
        "content": "<p>I think this should be a step in the right direction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bindme\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[appUnexpander myfun]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpand</span> <span class=\"o\">:</span> <span class=\"n\">PrettyPrinter.Unexpander</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bindme</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bindme</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 222042601,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610087921
    },
    {
        "content": "<p>I would like the macro \"bindme\" to appear in the output. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bindme</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1129</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.1129</span>\n</code></pre></div>",
        "id": 222050047,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610096703
    },
    {
        "content": "<blockquote>\n<p><code>`(myfun (fun $x =&gt; $p))</code></p>\n</blockquote>\n<p>Adding these parentheses just stops the unexpander from working at all. Adding them has the same effect as removing <code>def unexpand</code> entirely.</p>",
        "id": 222050297,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610096925
    },
    {
        "content": "<p>I was able to narrow down the problem to fixing the <code>$i</code> part.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bindme\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[appUnexpander myfun]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpand</span> <span class=\"o\">:</span> <span class=\"n\">PrettyPrinter.Unexpander</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bindme</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">o</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bindme</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"k\">#check</span> <span class=\"n\">bindme</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>gives <code>bindme i✝, x : ?m.957 → ?m.957</code> and <code>bindme i✝, y : ?m.967 → ?m.967</code>, that's still not quite the expected result...</p>",
        "id": 222133907,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610144502
    },
    {
        "content": "<p>I am not sure if this is relevant, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bindme\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\", \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[appUnexpander myfun]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpand</span> <span class=\"o\">:</span> <span class=\"n\">PrettyPrinter.Unexpander</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>gives <code>elaboration function for 'antiquot' has not been implemented</code>.</p>",
        "id": 222137400,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610147102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Does this mean that elaboration for 'antiquot' will be implemented in the future?</p>",
        "id": 222137719,
        "sender_full_name": "Mohamed Al-Fahim",
        "timestamp": 1610147326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373871\">@Mohamed Al-Fahim</span> You forgot the quotation around <code>#check $i</code></p>",
        "id": 222164101,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610187057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> Your <code>$x</code> is capturing the full <code>(x : ?m.1129)</code> binder as shown in <span class=\"user-mention\" data-user-id=\"373871\">@Mohamed Al-Fahim</span>'s output, which will break the <code>bindme</code> syntax after being inserted. You could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[appUnexpander myfun]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpand</span> <span class=\"o\">:</span> <span class=\"n\">PrettyPrinter.Unexpander</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myfun</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bindme</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>instead, but at this point it should be clear that analysing anything but the raw arguments in an <code>appUnexpander</code> is very brittle since it is dependent on the behavior on the pretty printers that came before it. It would be better to write a full delaborator here working directly on <code>Expr</code>, though that means importing <code>Lean</code>.</p>",
        "id": 222164231,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610187335
    },
    {
        "content": "<p>Or make the <code>bindme</code> syntax less restrictive by using <code>x:term</code> :)</p>",
        "id": 222164332,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1610187485
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 222281168,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1610361583
    },
    {
        "content": "<p>Is the \"collapsing\" of brackets in unexpanders (e.g. the unexpander for List will show<code>[0, 1, 2]</code>  instead of [0, [1, [2]]]` just a built-in behavior that does this for matching pairs of brackets, or is there something more to it?</p>",
        "id": 250268132,
        "sender_full_name": "Chris B",
        "timestamp": 1629629609
    },
    {
        "content": "<p>it is just how the unexpander is defined, the definition of which you can find <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/NotationExtra.lean#L100-L107\">here</a> in the Lean 4 source code. You could define a custom unexpander in a similar manner. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[appUnexpander List.nil]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandListNilAlt</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(())</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">Unit.unit</span>\n\n<span class=\"kd\">@[appUnexpander List.cons]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandListConsAlt</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">())</span>      <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>                  <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">Unit.unit</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- (1, 2, 3) : List Nat</span>\n</code></pre></div>",
        "id": 250279705,
        "sender_full_name": "Mac",
        "timestamp": 1629646412
    },
    {
        "content": "<p>Thanks, I think I'm almost there. I was (am?) confused by how that lets you print stuff that doesn't otherwise have an instance of ToString, like the set notation unexpander in Mathlib4 lets you print sets declared with the macro. I guess it's just turning the macro invocation back into the token tree from which it was expanded and showing it to you again. That's interesting.</p>",
        "id": 250287394,
        "sender_full_name": "Chris B",
        "timestamp": 1629657634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpanders/near/250287394\">said</a>:</p>\n<blockquote>\n<p>I guess it's just turning the macro invocation back into the token tree from which it was expanded and showing it to you again. That's interesting.</p>\n</blockquote>\n<p>Exactly! An unexpander is a pretty printer takes the expanded syntax and (ideally) reverts it back to the syntax it come frame (i.e., it 'unexpands` it) and then prints the resulting syntax.</p>",
        "id": 250291154,
        "sender_full_name": "Mac",
        "timestamp": 1629663067
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 250299932,
        "sender_full_name": "Chris B",
        "timestamp": 1629677223
    }
]