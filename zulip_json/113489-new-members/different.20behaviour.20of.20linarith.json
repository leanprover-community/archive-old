[
    {
        "content": "<p>Hi all, recently I noticed that <code>linarith</code> seems to have different behaviour based on where it's called.<br>\ne.g. <code>have hint1: foo := by linarith</code> then <code>cases h (hint1) with u h'</code>seems to have a better chance of finding solution than <br>\n<code>cases h (by linarith) with u h'</code> in my case.<br>\nWhy?</p>\n<p>Edit: This is the tutorial problem 0067:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 0067</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">nondecreasing_seq</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">notub</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">notub</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hint2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">seq_limit</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hint</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">n</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">crit1</span> <span class=\"o\">:=</span> <span class=\"n\">h''</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">n</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>hint</code> and <code>hint2</code> are in the situation I described above.</p>",
        "id": 253605960,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1631808321
    },
    {
        "content": "<p>Well, without looking at your example closely, you provided more information in the first case, namely the type <code>foo</code>.<br>\nIt has to be definitionally equal to the expected argument type of <code>h</code>, but that definitional equality might involve some unfolding that <code>linarith</code> doesn't know it should do.</p>",
        "id": 253607219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631808799
    }
]