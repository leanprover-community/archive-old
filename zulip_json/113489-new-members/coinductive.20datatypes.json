[
    {
        "content": "<p>Is there coinductive datatypes in Lean or a way to mimic it? It's called <code>codatatype</code> in Isabelle/HOL. I kind of need to port something defined by codatatype in Isabelle/HOL to Lean.</p>\n<p>Reference: <a href=\"http://isabelle.in.tum.de/dist/doc/datatypes.pdf\">http://isabelle.in.tum.de/dist/doc/datatypes.pdf</a></p>",
        "id": 200176840,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591669633
    },
    {
        "content": "<p>There is no built in support, but a few ways to mimic it</p>",
        "id": 200182312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591678563
    },
    {
        "content": "<p>The QPF package being developed by <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> is the nearest hope to a general facility for this in lean, but in specific cases you can make do with ad hoc encodings</p>",
        "id": 200182335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591678652
    },
    {
        "content": "<p><a href=\"https://github.com/avigad/qpf/\">https://github.com/avigad/qpf/</a></p>",
        "id": 200196972,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591692990
    },
    {
        "content": "<p>Looks promising</p>",
        "id": 200197049,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591693035
    },
    {
        "content": "<p>I think that version is fixed for the lean together meeting. I'm pretty sure it's been developed since then</p>",
        "id": 200197203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591693130
    },
    {
        "content": "<p>I'm a little bit confused. It seems that <code>coinductive</code> was once in Lean and removed since v3.4.2 (18 Jan 2019) with comment \"To be moved to mathlib instead.\" And mathlib has <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/meta/coinductive_predicates.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/meta/coinductive_predicates.lean</a> and some smoke tests show that it basically works. By there's no built in support, do you mean the implementation so far is not complete or not general enough?</p>",
        "id": 200426112,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591800483
    },
    {
        "content": "<p>A friend found <a href=\"https://github.com/leanprover/lean/wiki/Coinductive-Types\">https://github.com/leanprover/lean/wiki/Coinductive-Types</a> , which provides a historical perspective.</p>",
        "id": 200428390,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591801402
    },
    {
        "content": "<p>There are two different things here: coinductive predicates and coinductive types</p>",
        "id": 200428560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591801467
    },
    {
        "content": "<p>Coinductive predicates were originally in lean core and were moved to mathlib a while ago, and although they haven't gotten any love in the past few years the implementation works as far as I am aware</p>",
        "id": 200428665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591801515
    },
    {
        "content": "<p>Depending on your use case this may be sufficient</p>",
        "id": 200428708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591801537
    },
    {
        "content": "<p>These are propositions though, and can be defined fairly easily by using impredicativity of Prop. This construction does not cover coinductive datatypes, which live in Type</p>",
        "id": 200428897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591801625
    },
    {
        "content": "<p>Do you have any specific examples you are trying to encode? You linked to a book</p>",
        "id": 200428941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591801655
    },
    {
        "content": "<p>The motivating example:</p>\n<blockquote>\n<p>We first define concrete data structures. We define a type mvec of a multivector as a codatatype in Isabelle. We could have used a datatype but by defining this notion coalgebraically, we can formalize the various multivector operations more elegantly by considering their grades separately.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">codatatype</span> <span class=\"n\">mvec</span> <span class=\"o\">=</span> <span class=\"n\">Mvec</span> <span class=\"o\">(</span><span class=\"n\">Scalar</span><span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"o\">:</span> <span class=\"s\">&quot;real^3&quot;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bivec</span><span class=\"o\">:</span> <span class=\"s\">&quot;real^3&quot;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Trivec</span><span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">mvec</span> <span class=\"o\">::</span> <span class=\"n\">ab_group_add</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">primcorec</span> <span class=\"n\">zero_mvec</span> <span class=\"kp\">where</span>\n  <span class=\"s\">&quot;Scalar 0 = 0&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Vec 0 = 0&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Bivec 0 = 0&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Trivec 0 = 0&quot;</span>\n\n<span class=\"k\">primcorec</span> <span class=\"n\">plus_mvec</span> <span class=\"kp\">where</span>\n  <span class=\"s\">&quot;Scalar (x + y) = Scalar x + Scalar y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Vec (x + y) = Vec x + Vec y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Bivec (x + y) = Bivec x + Bivec y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Trivec (x + y) = Trivec x + Trivec y&quot;</span>\n\n<span class=\"k\">primcorec</span> <span class=\"n\">uminus_mvec</span> <span class=\"kp\">where</span>\n  <span class=\"s\">&quot;Scalar (-x) = - Scalar x&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Vec (-x) = - Vec x&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Bivec (-x) = - Bivec x&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Trivec (-x) = - Trivec x&quot;</span>\n\n<span class=\"k\">primcorec</span> <span class=\"n\">minus_mvec</span> <span class=\"kp\">where</span>\n  <span class=\"s\">&quot;Scalar (x - y) = Scalar x - Scalar y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Vec (x - y) = Vec x - Vec y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Bivec (x - y) = Bivec x - Bivec y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Trivec (x - y) = Trivec x - Trivec y&quot;</span>\n<span class=\"kn\">instance</span>\n<span class=\"k\">by</span> <span class=\"n\">intro_classes</span> <span class=\"o\">(</span><span class=\"n\">simp_all</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">mvec_eq_iff</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n\n<p>(More code omitted, it's from A New Formalization of Origami in Geometric Algebra by Tetsuo Ida, Jacques Fleuriot, and Fadoua Ghourabi )</p>",
        "id": 200437572,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591805219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/coinductive.20datatypes/near/200428897\">said</a>:</p>\n<blockquote>\n<p>These are propositions though, and can be defined fairly easily by using impredicativity of Prop. This construction does not cover coinductive datatypes, which live in Type</p>\n</blockquote>\n<p>Ah, I need to read more to tell the difference...They look very similar (not only by name but also by use cases)</p>",
        "id": 200437815,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591805317
    },
    {
        "content": "<p>What? This is not even a recursive structure, so it makes no difference if it is inductive or coinductive</p>",
        "id": 200445185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591808612
    },
    {
        "content": "<p>I believe that the comments about <code>codatatype</code> over <code>datatype</code> have more to do with details of the datatype package implementation in isabelle than any mathematical notion</p>",
        "id": 200445343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591808668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Here's a rendering of that code snippet in lean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scalar</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">vec</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bivec</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">trivec</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">scalar</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">scalar</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">vec</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">vec</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">bivec</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">bivec</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">trivec</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">trivec</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">scalar</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">vec</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">bivec</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">trivec</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>",
        "id": 200446177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591809079
    },
    {
        "content": "<p>I think the quote is saying that the use of <code>codatatype</code> allows them to define the various components of the operations by specifying all of its projections separately rather than making a constructor which puts them all in one expression. I think this is a minor gain, and in the context of lean certainly not worth the hassle of using a non-builtin datatype with worse defeq. Instead you can use attributes like <code>@[simps]</code> to automatically generate the projection theorems that isabelle's <code>primcorec</code> is creating</p>",
        "id": 200446615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591809268
    },
    {
        "content": "<p>Thanks for the tips and sorry for the late reply. Yes, the trivial addition case failed to demonstrate the necessity of coinductive types, but we need more general cases:</p>\n<ol>\n<li>for multiplication, it would need something like </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">instantiation</span> <span class=\"n\">mvec</span> <span class=\"o\">::</span> <span class=\"n\">monoid_mult</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">primcorec</span> <span class=\"n\">times_mvec</span> <span class=\"kp\">where</span>\n<span class=\"s\">&quot;Scalar (x * y) = Scalar x * Scalar y + (Vec x · Vec y) - (Bivec x · Bivec y) - Trivec x * Trivec y&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Vec (x * y) = ...&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Bivec (x * y) = ...&quot;</span>\n<span class=\"o\">|</span> <span class=\"s\">&quot;Trivec (x * y) = ...&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n\n<p>and yes, this is still something that can be solved by plain structures.</p>\n<ol start=\"2\">\n<li>\n<p>we need to generalize to n dimensions not only 3 dimensions</p>\n</li>\n<li>\n<p>there's an infinite dimension version along the way, from it obtain all finite dimensional geometric algebras as subalgebras.</p>\n</li>\n</ol>\n<p>I'm still looking into the possibilities of implementing the above in Lean or Agda. And I'm also learning more about the whole coninductive, corecursive, coinduction thing and its applicability/necessity  to my problem.</p>\n<p>I also checked out <code>@[simps]</code> which doesn't seem to solve the multiplication case and is very limited for the addition case.</p>\n<p>I'll get back here when I have a more clear picture of what I'm trying to do here.</p>",
        "id": 200632680,
        "sender_full_name": "Utensil Song",
        "timestamp": 1591933998
    },
    {
        "content": "<p>This can all be done with no difficulty</p>",
        "id": 200634202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591936327
    },
    {
        "content": "<p>there is no argument for coinductive types here besides some trivial syntax</p>",
        "id": 200634207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591936359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">real_inner_product</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scalar</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">vec</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">bivec</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">trivec</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">scalar</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">scalar</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">vec</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">vec</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">bivec</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">bivec</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">trivec</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">trivec</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">scalar</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">vec</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">bivec</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">trivec</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">mvec</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">scalar</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">scalar</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">scalar</span> <span class=\"bp\">+</span> <span class=\"n\">inner</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">vec</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">vec</span> <span class=\"bp\">-</span> <span class=\"n\">inner</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">bivec</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">bivec</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">trivec</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">trivec</span><span class=\"o\">,</span>\n  <span class=\"n\">vec</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">bivec</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">trivec</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Note that I don't actually know the maths here, I'm just following your indications. There is some complexity in defining the infinite dimensional version but as long as you can give it an inner product structure you can do the same as above.</p>",
        "id": 200634459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591936718
    }
]