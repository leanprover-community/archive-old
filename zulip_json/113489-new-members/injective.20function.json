[
    {
        "content": "<p>Is there an easy way to formulate/prove the existence of an <code>injective</code> function from finite set A to B given that the cardinalities (?) allow?  The choose-using tactic  will give a function (I guess) but  ... I have the idea that a finset induction  would do it, but worry there is a trivial way out there will save me the trouble. I want to use this in the 'extend to a basis' manner. Thanks</p>",
        "id": 215703745,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1604578894
    },
    {
        "content": "<p>Can you formalise the precise statement which you want?</p>",
        "id": 215703854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604578962
    },
    {
        "content": "<p>\"finite set\" can be said in several different ways in Lean and the answer to your question is probably \"yes\", but  the details will depend on precisely how you want to state the maths assertion in type theory.</p>",
        "id": 215703930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604579033
    },
    {
        "content": "<p>One thing I learnt very early on is that formalising the question is an important part of asking the question.</p>",
        "id": 215704018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604579076
    },
    {
        "content": "<p>Another thing I learnt very early on is that choosing a random way to formalise the question and then solving it might lead to problems later when I want to apply the theorem I've already proved. I might find that it doesn't apply, because <code>set.finite</code> and <code>fintype</code> and <code>finset</code> are all different things.</p>",
        "id": 215704193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604579191
    },
    {
        "content": "<p>In set theory, a set is a primitive notion and there is no question about what is meant. In type theory the type is the primitive notion, and various concepts of finite set can be built on top of this in different ways.</p>",
        "id": 215704350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604579302
    },
    {
        "content": "<p>An fintype indexed set of vectors <code>v: ι → E</code> some of which are zero, the rest linearly independent. Say on sets <code>s,t :finset ι</code>,  respectively. Suppose that the dimension of <code>E</code> is <code>|s|+|t|</code> and I have a ready set of <code>|s|</code> vectors to complete my basis (say via a <code>w: k → E</code>). I suppose I am not very happy with how <code>fin m</code>  objects work ... My use case is <code>v: fin n → E</code>. Must I really ?</p>",
        "id": 215710296,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1604582713
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? A self-contained piece of code containing one <code>sorry</code> which is what you want filled in? This is the precise meaning of my original question.</p>",
        "id": 215710529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604582843
    },
    {
        "content": "<p>This is an important skill to learn.</p>",
        "id": 215710577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604582880
    },
    {
        "content": "<p>I'll try</p>",
        "id": 215710685,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1604582918
    },
    {
        "content": "<p>I had some trouble, so this exercise was well worth it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">E</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- rather than use 'fin k → E' I have used fintype n for illustration</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- to simplify my statements</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_orth</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">j</span><span class=\"bp\">⟫=</span><span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_nonzero</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">,</span>  <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">enlarges</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">i</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ho</span><span class=\"o\">:</span> <span class=\"n\">is_orth</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">enlarges</span> <span class=\"n\">v</span> <span class=\"n\">w</span>  <span class=\"bp\">∧</span> <span class=\"n\">is_orth</span> <span class=\"n\">w</span>  <span class=\"bp\">∧</span>  <span class=\"n\">is_nonzero</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">is_orth</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">is_nonzero</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">,</span>\n  <span class=\"c1\">-- would like to use z, which we can engineer to be in the orthogonal to v.range</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- how to interweave z with v ?</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>? use .val?</p>",
        "id": 215726777,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1604589977
    },
    {
        "content": "<p>Here's what I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype_card</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hS</span> <span class=\"k\">with</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- e is a bijection S -&gt; p</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">equiv.injective</span> <span class=\"n\">e.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">hxy</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">e</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215834614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604662925
    },
    {
        "content": "<p>Looking around in the library I found <code>fintype.card_eq</code> which says that if two <code>fintype</code>s have the same cardinality then there's an <code>equiv</code> between them, i.e. a bijection. I built the proof on that.</p>",
        "id": 215834694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604662987
    },
    {
        "content": "<p><code>s</code> is a finset so it's not a type, it's a term. The corresponding type is <code>S</code>.</p>",
        "id": 215834845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604663088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injective.20function/near/215834694\">said</a>:</p>\n<blockquote>\n<p>Looking around in the library I found <code>fintype.card_eq</code> which says that if two <code>fintype</code>s have the same cardinality then there's an <code>equiv</code> between them, i.e. a bijection. I built the proof on that.</p>\n</blockquote>\n<p>Thanks ! I was about to moot an induction. This clears quite a few things <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 215846396,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1604669909
    },
    {
        "content": "<p>Can you use coe_sort <code>s</code> as the type instead rather than defining <code>S</code>? I can never remember how to input the coe_sort up arrow...</p>",
        "id": 215851950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604672629
    },
    {
        "content": "<p>Probably -- but I have exactly the same problem!</p>",
        "id": 215880740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604685089
    },
    {
        "content": "<p>Usually I resort to finding a lemma that does a coercion, and copying it from the goal window...</p>",
        "id": 215951299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604749337
    }
]