[
    {
        "content": "<p>How to get a witness from a hypothesis that starts with \"∃\" ?</p>",
        "id": 203854390,
        "sender_full_name": "Valéry Croizier",
        "timestamp": 1594743887
    },
    {
        "content": "<p>You can do <code>cases h with wit hw</code>.</p>",
        "id": 203854654,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594744035
    },
    {
        "content": "<p>If <code>h</code> is the name of your hypothesis.</p>",
        "id": 203854689,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594744060
    },
    {
        "content": "<p>Looks good, thanks!</p>",
        "id": 203854785,
        "sender_full_name": "Valéry Croizier",
        "timestamp": 1594744104
    },
    {
        "content": "<p>Or equivalently, <code>obtain ⟨v, hv⟩ := hexists,</code> where the brackets are typed <code>\\&lt;</code> and <code>\\&gt;</code>.</p>",
        "id": 203887913,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594760585
    },
    {
        "content": "<p>You can even put <code>obtain ⟨v, hv⟩ : ∃ v : V, f v = 0 := hexists</code> -- the advantage of this is that it's very readable</p>",
        "id": 203888077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594760657
    },
    {
        "content": "<p>Is there a neat way of doing this, when not in a tactic-block?<br>\nSomething like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hexists</span> <span class=\"k\">in</span> <span class=\"c1\">--?</span>\n</code></pre></div>",
        "id": 221051492,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609150815
    },
    {
        "content": "<p>yup, such <code>let</code> statements work</p>",
        "id": 221051704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609151125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20.E2.88.83.20witness/near/221051704\">said</a>:</p>\n<blockquote>\n<p>yup, such <code>let</code> statements work</p>\n</blockquote>\n<p>Doesn't work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Here I get: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">additional</span> <span class=\"n\">details</span><span class=\"o\">)</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">induction</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">Exists.dcases_on'</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 221052177,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609151635
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.indefinite_description\">docs#classical.indefinite_description</a></p>",
        "id": 221052335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609151795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20.E2.88.83.20witness/near/221052335\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.indefinite_description\">docs#classical.indefinite_description</a></p>\n</blockquote>\n<p>Then the function would become noncomputable right? I thought in Lean it could somehow remain constructive. Or would I have to use something other than <code>∃</code> then?</p>",
        "id": 221052414,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609151922
    },
    {
        "content": "<p>Right, your function is impossible to make computable if it depends on extracting a witness</p>",
        "id": 221052674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609152351
    },
    {
        "content": "<p>You could use <code>{n : \\N // n &gt; 0}</code></p>",
        "id": 221052731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609152424
    },
    {
        "content": "<p>Although maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> will let you use exists anyway</p>",
        "id": 221052974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609152766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20.E2.88.83.20witness/near/221052731\">said</a>:</p>\n<blockquote>\n<p>You could use <code>{n : \\N // n &gt; 0}</code></p>\n</blockquote>\n<p>Is this an approach used more generally in Lean? Returning a subtype instead of a <code>∃</code>-proposition to stay in the constructive realm?</p>",
        "id": 221053075,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609152918
    },
    {
        "content": "<p>This function is just <code>classical.some</code>.</p>",
        "id": 221053082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609152925
    },
    {
        "content": "<p>Here's why such a function can't be defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">magic</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">magic_extract</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">magic</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">magic</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">magic_extract</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">magic</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">magic_extract</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">proof_irrel</span> <span class=\"o\">:</span> <span class=\"n\">magic</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">magic</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h1.symm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">proof_irrel.trans</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 221053083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609152927
    },
    {
        "content": "<p>you can't extract a witness computably because all exists-witnesses are equal</p>",
        "id": 221053114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609152962
    },
    {
        "content": "<p>Mathlib is not a constructive library (at least in most places).</p>",
        "id": 221053164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609153029
    },
    {
        "content": "<p>Actually I would say that most of the time we have computable witnesses when it can be done without too much effort</p>",
        "id": 221053171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609153059
    },
    {
        "content": "<p>However, instead of returning subtypes the preference is for a function and a theorem about that function</p>",
        "id": 221053219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609153087
    }
]