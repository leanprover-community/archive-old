[
    {
        "content": "<p>Hello! I'm trying to make Fifteen. Here is hopefully a MWE <code>leanproject get SnobbyDragon/leanfifteen &amp;&amp; code leanfifteen</code> (<a href=\"https://github.com/SnobbyDragon/leanfifteen\">https://github.com/SnobbyDragon/leanfifteen</a>)</p>\n<p>In the <code>fifteentactics.lean</code> file, my <code>slide_tile</code> tactic is failing when I try to use the <code>use</code> tactic. I think it's parallel to this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">solve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\":(\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">solve</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This fails but works if I do <code>`[use 1]</code>. Is there a way to fix this?<br>\nThanks!</p>",
        "id": 221270539,
        "sender_full_name": "Angela Li",
        "timestamp": 1609391859
    },
    {
        "content": "<p>what is Fifteen?</p>",
        "id": 221270797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392252
    },
    {
        "content": "<p>oh this is the 4x4 sliding puzzle?</p>",
        "id": 221270808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392303
    },
    {
        "content": "<p>yeet</p>",
        "id": 221270816,
        "sender_full_name": "Angela Li",
        "timestamp": 1609392309
    },
    {
        "content": "<p>I guess so</p>",
        "id": 221270817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609392310
    },
    {
        "content": "<p>You are passing the literal <code>n</code> to the use tactic there</p>",
        "id": 221270883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392404
    },
    {
        "content": "<p>uhhh I think I don't know what that means</p>",
        "id": 221270945,
        "sender_full_name": "Angela Li",
        "timestamp": 1609392520
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">solve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\":(\"</span>\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">solve</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221270957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392558
    },
    {
        "content": "<p>the previous version was doing basically <code>solve 1 = use n</code> and it would complain that <code>n</code> doesn't exist at the point of use</p>",
        "id": 221271011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392612
    },
    {
        "content": "<p>and the <code>n : nat</code> was unused</p>",
        "id": 221271016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392624
    },
    {
        "content": "<p>Ohhhh okay that makes sense. Ahhhh parsing I haven't done that yet. time to learn something new. thanks!</p>",
        "id": 221271018,
        "sender_full_name": "Angela Li",
        "timestamp": 1609392640
    },
    {
        "content": "<p>alternatively, without the fancy parser, closer to your original version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">solve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tactic.interactive.use</span> <span class=\"o\">[</span><span class=\"n\">pexpr.of_expr</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\":(\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">solve</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221271046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392715
    },
    {
        "content": "<p>we have to turn <code>n : nat</code> back into a <code>pexpr</code> because that's what <code>use</code> takes as input</p>",
        "id": 221271095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392781
    },
    {
        "content": "<p>Okay thanks! I will try this on tiles now :)</p>",
        "id": 221271118,
        "sender_full_name": "Angela Li",
        "timestamp": 1609392814
    },
    {
        "content": "<p>remember that tactics deal in <code>expr</code>s, not the actual types that you see at the user level. This allows them to do some things that would otherwise be impossible, but requires you to get your head around all the parsing and quoting and antiquoting stuff</p>",
        "id": 221271173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609392891
    }
]