[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">option.some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>simp</code> works.  Does <code>simp</code> <a href=\"https://leanprover-community.github.io/extras/simp.html\">mainly</a> do <code>rw</code>?  If that's true, what should the <code>rw</code> be?</p>",
        "id": 245919870,
        "sender_full_name": "Jiekai",
        "timestamp": 1626239041
    },
    {
        "content": "<p>This is using the part of <code>simp</code> that isn't <code>rw</code>, namely the <code>constructor_eq</code> setting</p>",
        "id": 245920186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626239467
    },
    {
        "content": "<p>it just knows that different constructors are different</p>",
        "id": 245920191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626239478
    },
    {
        "content": "<p>however there might be a rewrite lemma for this, probably called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.some_ne_none\">docs#option.some_ne_none</a></p>",
        "id": 245920269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626239575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is there a way to get an output of what kind of lemmas <code>simp</code> or <code>finish</code> used though (if they use any)?</p>",
        "id": 245920317,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626239643
    },
    {
        "content": "<p>Yes, <code>simp?</code> or <code>squeeze_simp</code></p>",
        "id": 245920339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626239657
    },
    {
        "content": "<p>however in this case I doubt that lemma will show up, because <code>simp only</code> will already perform this reduction</p>",
        "id": 245920347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626239681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactics.20for.20.60.C2.AC.20option.2Esome.20m.20.3D.20option.2Enone.60/near/245920347\">said</a>:</p>\n<blockquote>\n<p>however in this case I doubt that lemma will show up, because <code>simp only</code> will already perform this reduction</p>\n</blockquote>\n<p>Yeah, it did <code>simp only [not_false_iff]</code>.</p>",
        "id": 245920376,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626239738
    },
    {
        "content": "<p>I looked up the mathlib code and found <code>apply option.no_confusion</code> works.<br>\nBut when I used vscode <code>Go to Definition</code> there is no <code>no_confusion</code>.   Then I created my own version of <code>option</code>, and <code>no_confusion</code> still works.</p>\n<p>Then I found this <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">xena no-confusion-over-no_confusion</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 245920695,
        "sender_full_name": "Jiekai",
        "timestamp": 1626240145
    },
    {
        "content": "<p>Don't forget this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">option.some</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">option.none.</span>\n</code></pre></div>",
        "id": 245921167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626240768
    }
]