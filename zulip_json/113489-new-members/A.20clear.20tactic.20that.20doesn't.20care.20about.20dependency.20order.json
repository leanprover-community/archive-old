[
    {
        "content": "<p>I wrote a small wrapper around <code>clear</code> that can clear multiple hypotheses which depend on each other and don't need to be specified in dependency order. So the following succeeds where <code>clear</code> fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">smart_clear</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(),</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Does this already exist somewhere? (I did it mostly to learn about Lean metaprogramming, so didn't look for it much.)</p>\n<p>(Also hi, first time posting here.)</p>",
        "id": 186197043,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579622531
    },
    {
        "content": "<p>Did you PR it? I occasionally get irritated by this :-)</p>",
        "id": 186229646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579641975
    },
    {
        "content": "<p>Yes, please PR that. I guess this should be <code>clear'</code>, following the standard convention to name fixes to the core library tactics.</p>",
        "id": 186229774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579642062
    },
    {
        "content": "<p>Why not just have clearing <code>a</code> also clear <code>b</code> and <code>c</code>? I kind of thought this was how <code>clear</code> already worked</p>",
        "id": 186230307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579642354
    },
    {
        "content": "<p>This is definitely not how <code>clear</code> works.</p>",
        "id": 186230369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579642412
    },
    {
        "content": "<p>But this is certainly how I would like it to work.</p>",
        "id": 186230390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579642433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Wow! That's a really nice first post! I'm looking forward to your next posts (-; Welcome!<br>\nAnd yes, please contribute this to mathlib.</p>",
        "id": 186243418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579652888
    },
    {
        "content": "<p>This is how <code>revert</code> works</p>",
        "id": 186254342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579666643
    },
    {
        "content": "<p>Thank you for the warm welcome. I'll polish the code a bit more and submit a PR.</p>\n<p>Wrt whether we should be able to write just <code>clear a</code> in my example: I'd consider this too much magic, but if you all want it, I can implement that as well. Coq's <code>clear dependent</code> works like this. (Coq's <code>clear</code> works like my <code>smart_clear</code>.)</p>",
        "id": 186293553,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579705079
    },
    {
        "content": "<p>maybe <code>clear! a</code>, for the equivalent of <code>clear dependent</code>?</p>",
        "id": 186297401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579707361
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/1899\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1899\">https://github.com/leanprover-community/mathlib/pull/1899</a> (without <code>clear!</code> for now).</p>",
        "id": 186403577,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579795538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> awesome. Thanks! I made a minor comment on style.</p>",
        "id": 186406653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579797117
    },
    {
        "content": "<p>E.g., you indent too much. For the test I suggest:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">clear&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- clear would fail since `b` depends on `a`</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186407063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579797341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks, I've fixed the indentation.</p>\n<p>I also have an implementation of <code>clear!</code> now (thanks to Simon Hudon). However, <code>clear!</code> doesn't seem to be a legal name. Is there any way to enable this notation?</p>",
        "id": 186516479,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579888537
    },
    {
        "content": "<p><code>clear</code> should be a single tactic that parses an optional <code>!</code>. There are various tactics you can look at to see how to do this, e.g. <code>set</code>.</p>",
        "id": 186517102,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579888869
    },
    {
        "content": "<p>Oh okay, makes sense. Thanks!</p>",
        "id": 186518238,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579889627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I've never actually written a tactic myself, but I was wondering: can you use things like <code>guard_hyp</code> in your tests, to guarantee that the context looks the way you want?</p>",
        "id": 186518861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579889999
    },
    {
        "content": "<p>Looks like it. I wasn't aware of this family of tactics, but I should be able to use them to make the tests more meaningful. Will do. (Also, I just discovered some format macros that I can probably use.)</p>",
        "id": 186519470,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579890383
    },
    {
        "content": "<p>Yeah <code>clear!</code> won't exactly work, because <code>clear</code> is a tactic defined in the core library</p>",
        "id": 186524407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579893624
    },
    {
        "content": "<p>Oh, right. This should be a drop-in replacement for <code>clear</code>, right? Maybe it should be a PR to 3.5c replacing the old one?</p>",
        "id": 186524712,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579893847
    },
    {
        "content": "<p>I'll have time next week to look into migrating mathlib officially to 3.5c.</p>",
        "id": 186524856,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579893945
    },
    {
        "content": "<p><code>clear'!</code>?</p>",
        "id": 186525650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579894376
    },
    {
        "content": "<p><code>clear'?</code>!</p>",
        "id": 186525725,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579894417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I've made the tests more accurate, per your suggestion. Thanks again!</p>\n<p>Wrt the name: I think I'll just keep <code>clear_dependent</code>. <code>clear'!</code> is too ugly, and nondescript to boot.</p>\n<p>Wrt improving the builtin <code>clear</code> instead: This would certainly be preferable. However, I'm not sure that my current implementation is robust enough to go into the stdlib. It's a bit of a hack (using <code>revert</code> under the hood) and I don't have the necessary experience with Lean tactics to judge what might go wrong. (For example, many tactics seem to have logic related to goal tags which I don't understand.) Ideally, the C++ for <code>clear</code> would be changed to use the <code>revert</code> logic, but I don't dare to go near that.</p>",
        "id": 186588115,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1579985379
    },
    {
        "content": "<p>I think <code>clear'!</code> is better, because the tick represents a todo to fix the builtin tactic for the next version of lean</p>",
        "id": 186590855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579990461
    },
    {
        "content": "<p>I don't see a problem with using <code>revert</code>. The goal tags thing is so that you can use the <code>case</code> tactic. It isn't very important that tactics preserve this unless you want to do processing between <code>induction</code> and <code>case</code></p>",
        "id": 186590931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579990584
    }
]