[
    {
        "content": "<p>Here's a question (don't take the context too seriously). Let's say I have<br>\n<code>\ndef a (R : Type) [ring R] := ℕ → R\n</code><br>\nso an \"a\" is a sequence of elements of R. I then want to define \"b\", which should be an \"a\", but such that the nth element of the sequence is equal to the zero element of the ring if n &gt; 3. What's the best way to write this definition? I somehow want to package the data of the sequence, and a proof of vanishing for n &gt; 3 into one definition.</p>",
        "id": 226024106,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613063344
    },
    {
        "content": "<p>One definition would be<code>{f : a R // ∀ n, 3 &lt; n → f n = 0}</code></p>",
        "id": 226024713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613063475
    },
    {
        "content": "<p>Sometimes structures are nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(This doesn't define an <code>a</code> type.  I don't know the context, but <code>ℕ → R</code> is a simple enough type that it might not need to be called anything but itself.)</p>",
        "id": 226025560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613063848
    },
    {
        "content": "<p>Thanks, I'll try working with a structure. In my context <code>a</code> is actually <code>mv_power_series</code> (multivariable power series) and I'm trying to put some conditions on the coefficients.</p>",
        "id": 226025815,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613063960
    },
    {
        "content": "<p>If there's only one property, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s suggestion of a <code>subtype</code> is good, too, especially since there are a number of lemmas surrounding them.</p>",
        "id": 226026059,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613064053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> why aren't you at my course!! It's running until 6</p>",
        "id": 226026145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613064093
    },
    {
        "content": "<p>Oh! How do I join?</p>",
        "id": 226026290,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613064136
    }
]