[
    {
        "content": "<p>Below is my first proof after the natural number game. I have a few questions:</p>\n<ol>\n<li>Is it idiomatic? (Especially to a mathematician rather than a computer scientist)</li>\n<li>How do I determine what theorems were used in the <code>simp</code> in line (1)? (<code>#print nat_sum</code> is a bit long to be helpful)</li>\n<li>In VS Code, placing the cursor at (2) shows only one goal (omitting <code>2 &gt; 0</code>). Why?</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">range_concat</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- (1)</span>\n  <span class=\"c1\">-- rest mirrors `triangle_succ`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_mul_div_left</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- (2)</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_lt_succ</span> <span class=\"c1\">-- 2 &gt; 0</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What would be a good challenge (in order to learn Lean) after the above?</p>",
        "id": 181165049,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574205764
    },
    {
        "content": "<p>Most end up reviewing TPIL, in order to be a competent user you will need to have an understanding of the underlying type theory; especially how to read and debug type errors. Knowing how to construct terms by hand is also very useful when trying to construct definitions, and I know Kevin is not very excited about Lean's term mode but I can't imagine not knowing how to use it, at least.</p>",
        "id": 181166692,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1574207164
    },
    {
        "content": "<p>1) (Speaking generally, I haven't tried to \"golf\" your proof) there is some basic style advice in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/style.md\">this file</a>; in particular we usually use curly brackets to separate the proofs of individual goals. Also, using <code>simp</code> in the middle of a proof (a \"non-terminal simp\") is generally discouraged since such proofs can break if the simp lemmas change (which can happen depending on what files you have imported). </p>\n<p>2) There are  a few options that let you see the steps that the simplifier tries, see <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md#simp\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md#simp\">this doc</a>. It can be quite verbose though.</p>\n<p>Somewhat related: you can try replacing <code>simp</code> with <code>squeeze_simp</code>. It will return a message with a roughly equivalent <code>simp only</code> statement that has a (partial) list of used lemmas. It's not perfect though - it might miss some lemmas or have some extra ones.</p>\n<p>3) is interesting, I'm not sure why the <code>2 &gt; 0</code> goal introduced by the <code>← add_mul_div_left</code> rewrite disappears outside the square brackets and then reappears later.</p>",
        "id": 181167814,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574208191
    },
    {
        "content": "<p>Below is the new proof with suggestions (1) and (2) applied (thanks for <code>squeeze_simp</code> -- that was very helpful). The problem I now have is that having removed <code>simp</code> the long string of rewrites seems hard to read (to me). Is this really idiomatic?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nat_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_concat</span><span class=\"o\">,</span> <span class=\"n\">sum_append</span><span class=\"o\">,</span> <span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">sum_nil</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n        <span class=\"err\">←</span> <span class=\"n\">add_mul_div_left</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n        <span class=\"n\">succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span><span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">zero_lt_succ</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181171362,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574212172
    },
    {
        "content": "<p>I feel a bit bad that I didn't introduce the <code>{ }</code> convention in the natural number game. It was because it was always induction on nat, and the base case was usually trivial. There is some talk about this in TPIL, there are several conventions for this sort of thing and I always thought of them as equal but mathlib seems to have chosen one and hence this should probably be the one I'm promoting.</p>",
        "id": 181186196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574236436
    },
    {
        "content": "<p>The long string of rewrites is hiding a triviality. To be honest I would have been too scared to approach this sum because integer division is hard to work with (5/2=2 etc). I would have been tempted to either prove 2*sum = ... or to work with rationals.</p>",
        "id": 181187406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574237915
    },
    {
        "content": "<p>Here's my effort.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- terrified of denominators</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- induction</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- base case done</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_concat</span><span class=\"o\">,</span> <span class=\"n\">sum_append</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">],</span> <span class=\"c1\">-- just enough to use induction hypo</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- to deal with awkward n - 1 case when n = 0</span>\n  <span class=\"c1\">-- ring won&#39;t work until the singleton sum and succ and subtraction are gone</span>\n  <span class=\"c1\">-- and simp will rmove most of these. But I can&#39;t use simp in the middle of a proof.</span>\n  <span class=\"c1\">-- So first I wrote `simp, repeat {rw succ_eq_add_one}`, and now I copy paste the result</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181188076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574238664
    },
    {
        "content": "<p>My philosophy is that if what you're doing is clear you can just try and kill the result quickly with tactics and hang readibility, just add comments</p>",
        "id": 181188083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574238691
    }
]