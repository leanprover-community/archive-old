[
    {
        "content": "<p>Hello!</p>\n<p>Is there a tool to extract the whole structure of a Lean file? The goal is to extract all the tactics from each proof (for proof in tactic mode) and to transform a term proof into a tactic proof.<br>\nAlso t o transform a term proof into a tactic proof, I have found that adding \"begin exact(\" - \") end\" around the term proofs works quite well. However, there are cases where it does not work (<a href=\"/user_uploads/3121/U9AE3lO8wG2681Dwv2-7j7pM/dummy.lean\">mathlib/src/data/analysis/topology.lean</a> is an example where it doesn't work). Is there a general way to do this?</p>\n<p>Thank you in advance!</p>\n<p>Auguste</p>",
        "id": 205764152,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596437650
    },
    {
        "content": "<p>bad link</p>",
        "id": 205764573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596438164
    },
    {
        "content": "<p>why would you want to convert term mode to tactic mode?</p>",
        "id": 205764594,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596438185
    },
    {
        "content": "<p>I'm trying to get the combination of proof state + applied tactic. Tactic proof mode gives the proof state. Term mode proofs do not allow to obtain this state (I did not find how anyway), so I try to transform them into tactic mode.<br>\nAbout the link, this is not a link to the original file, but a link to a modified version of this file where all the term mode proofs have been transformed into tactic mode proofs (and there are two errors).</p>",
        "id": 205765774,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596439423
    },
    {
        "content": "<p>You can inspect a term mode proof in VS Code with a recent version of lean -- move your cursor through the proof and you should be able to see output</p>",
        "id": 205766503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596440145
    },
    {
        "content": "<p>Thank you! However, since I'm doing the extraction from a program, how do I know where to place my cursor to get the same output as if it was the first state of the proof in tactic mode? Can I always get this state in a term mode proof?<br>\nFor example, in the next proof, I have to place my cursor just before the ÃÄ$`:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ctop</span> <span class=\"n\">Œ±</span> <span class=\"n\">œÉ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">H‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùìù</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">to_topsp</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">H‚ÇÇ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"bp\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÇ</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">mem_nhds_sets_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">H‚ÇÅ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÅ</span><span class=\"bp\">‚ü©‚ü©</span>\n</code></pre></div>\n\n\n<p>And in this proof, I have to put it just before <code>.trans</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">tendsto_nhds_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">realizer</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">realizer</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">t</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">tendsto_iff</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"k\">forall</span>\n</code></pre></div>",
        "id": 205767645,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596441124
    },
    {
        "content": "<p>Since there are variables that are declared before, I cannot get this state directly from the declaration of the theorem in a term mode proof. The tactic mode facilitates this since Lean takes care of it. But if there is a Lean file parser, it wouldn't be too hard to do I guess.</p>",
        "id": 205768253,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596441694
    },
    {
        "content": "<p>You might be able to get more exact/machine-oriented info from the olean files? There's a parser <a href=\"https://github.com/digama0/olean-rs\">https://github.com/digama0/olean-rs</a> but it might be out of date.</p>",
        "id": 205769685,
        "sender_full_name": "Chris B",
        "timestamp": 1596442715
    },
    {
        "content": "<p>Thank you! I'll look into it.</p>",
        "id": 205770590,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596443414
    },
    {
        "content": "<p>there's also the <code>#explode</code> command, and you still haven't fixed your bad link</p>",
        "id": 205770974,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596443759
    },
    {
        "content": "<p>Thank you for the command! I can't find it in the Lean reference manual, but if I understand it correctly, it returns the basic steps of a proof, right?<br>\nAbout the link, I don't understand what's wrong. It's a link to an uploaded file (which is a modified version of the original file), and I can re-download it. What's wrong with it?</p>",
        "id": 205772038,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596444668
    },
    {
        "content": "<p>I think it's been said that olean files are version dependent and that repo hasn't been updated in a while, so I just meant it might not parse new olean files correctly.<br>\nThere's some info on <code>explode</code> in the mathlib docs : <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##explode\">https://leanprover-community.github.io/mathlib_docs/commands.html##explode</a></p>",
        "id": 205773093,
        "sender_full_name": "Chris B",
        "timestamp": 1596445576
    },
    {
        "content": "<p>Thanks for the link to the doc!<br>\nAbout the olean parser, I am trying to use the Lean version. But I still have the same \"failed to open file\" error. I tried absolute and relative paths but nothing works. Do you know if there is a particular way to use it? Or is it also the error that the program returns when there is a problem during parsing?</p>",
        "id": 205774627,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596446903
    },
    {
        "content": "<p>It looks like the header (and probably other stuff) has changed for the olean format since the last updates on that parser. I was able to get it to work by setting the leanpkg.toml to use an older version <code>lean_version = \"leanprover-community/lean:3.5.0\"</code>, then building the project with  <code>leanpkg build</code>. <br>\nThe format to get the parser working was <code>olean-rs/target/debug/olean-rs -D /home/user/my_lean_project/src/main.olean &gt; output.txt</code></p>",
        "id": 205776634,
        "sender_full_name": "Chris B",
        "timestamp": 1596448377
    },
    {
        "content": "<p>Thank you very much! I'm going to try that.</p>",
        "id": 205777182,
        "sender_full_name": "Auguste Poiroux",
        "timestamp": 1596448739
    },
    {
        "content": "<blockquote>\n<p>However, there are cases where it does not work (mathlib/src/data/analysis/topology.lean is an example where it doesn't work). Is there a general way to do this?</p>\n</blockquote>\n<p>If you end up going back to this, you should print them with <code>set_option pp.all true</code> to get the best odds. You'll still need to bring the universes into scope manually I think, and even with pp.all there are instances where the pretty printer won't round-trip.</p>",
        "id": 205778319,
        "sender_full_name": "Chris B",
        "timestamp": 1596449527
    },
    {
        "content": "<p>I will look into adding a <code>--lean-version</code> flag to <code>olean-rs</code> to support newer versions of lean</p>",
        "id": 205786707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596457069
    }
]