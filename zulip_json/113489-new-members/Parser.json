[
    {
        "content": "<p>Hello !</p>",
        "id": 131100158,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1533724805
    },
    {
        "content": "<p>bienvenu</p>",
        "id": 131100172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533724848
    },
    {
        "content": "<p>Can one use lean.parser to actually parse strings? If so, how do I run a parser on a string? That's what I want to do.</p>",
        "id": 131100173,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1533724849
    },
    {
        "content": "<p>Should I ask this on the other <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a>  stream?</p>",
        "id": 131102457,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1533728450
    },
    {
        "content": "<p>You could try pinging <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>. (Actually, I just did that. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span>)</p>",
        "id": 131102527,
        "sender_full_name": "Sean Leather",
        "timestamp": 1533728525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"114221\">@Pablo Le Hénaff</span> You can. Here's an example: <a href=\"https://github.com/robertylewis/mathematica/blob/master/mathematica_parser.lean\" target=\"_blank\" title=\"https://github.com/robertylewis/mathematica/blob/master/mathematica_parser.lean\">https://github.com/robertylewis/mathematica/blob/master/mathematica_parser.lean</a></p>",
        "id": 131102655,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533728715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> cool! Last time I asked about this, I got the impression it couldn't be done.</p>",
        "id": 131102723,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533728784
    },
    {
        "content": "<p>Er, wait a sec. <code>lean.parser</code> is different from <code>data.buffer.parser</code>.</p>",
        "id": 131102733,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533728807
    },
    {
        "content": "<p>I didn't know about <code>data.buffer.parser</code></p>",
        "id": 131102760,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1533728867
    },
    {
        "content": "<p><code>data.buffer.parser</code> is a parser monad. <code>lean.parser</code> exposes a bit of the built-in parser, I think.</p>",
        "id": 131102828,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533728946
    },
    {
        "content": "<p>So you can use the former to write your own string parser. But you don't get access to any of the built in stuff.</p>",
        "id": 131102840,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533728969
    },
    {
        "content": "<p>I think <code>data.buffer.parser</code> is what I need, thanks!</p>",
        "id": 131102853,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1533728993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What can't be done (easily, anyway) is parsing a string into an expr.</p>",
        "id": 131102949,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533729089
    },
    {
        "content": "<p>ah, okay. The thing I really wanted to do was parse a string into a tactic.</p>",
        "id": 131103152,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533729281
    },
    {
        "content": "<p>(I have some \"self-describing\" tactics, which you can ask to output a string, which is meant to be a tactic block that achieves whatever the invoked tactic just did (probably only using lower-level tactics). I really want to verify the output by parsing it and replaying it on the original goal, but never worked out how to do the parsing step.)</p>",
        "id": 131103215,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533729362
    },
    {
        "content": "<p>Yeah, you'd need to access the Lean parser to do that.</p>",
        "id": 131103543,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533729677
    },
    {
        "content": "<p>Can you make them output an expr instead of a string?</p>",
        "id": 131103549,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1533729684
    },
    {
        "content": "<p>Hmm, can't you save the tactics from just before you generate the strings</p>",
        "id": 131103550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533729686
    },
    {
        "content": "<p>Sure, certainly I can save the tactics: the point is to double-check that the copy-and-pasteable text you're about to present to the human really does what you promise.</p>",
        "id": 131103754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533729928
    }
]