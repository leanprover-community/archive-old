[
    {
        "content": "<p>I recently  try to include inner product to a normed space. Here is my work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">normed_group</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_inner_product</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inner</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_inner_product</span> <span class=\"o\">(</span><span class=\"n\">inner</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">.</span> <span class=\"o\">:=</span> <span class=\"n\">inner</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">inner_product</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span> <span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]:=</span>\n<span class=\"o\">(</span><span class=\"n\">refx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_zero</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥^</span><span class=\"mi\">2</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>the message error I have is :<br>\ninvalid field notation, type is not of the form (C ...) where C is a constant<br>\n  x<br>\nhas type<br>\n  α</p>\n<p>I don't understand the error. Can you help me with this? Thank you.</p>",
        "id": 172211530,
        "sender_full_name": "Mii Nguyen",
        "timestamp": 1564658145
    },
    {
        "content": "<p>I suspect your notation isn't working the way you expect, and Lean is still parsing the <code>.</code> as field notation.</p>",
        "id": 172211940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564658634
    },
    {
        "content": "<p>It does seem a bit ambitious trying to overload <code>.</code>, given it has a built-in language meaning.</p>",
        "id": 172211995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564658658
    }
]