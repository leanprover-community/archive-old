[
    {
        "content": "<p>Hello guys,</p>\n<p>I have a function that is a Prop. I need to make sure this function is decidable. For that I think I need to implement a function that returns tt if a Prop holds. <br>\nIs there any way to do this easily?</p>",
        "id": 322367654,
        "sender_full_name": "Kasper",
        "timestamp": 1674158544
    },
    {
        "content": "<p>Could you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with the <code>Prop</code> you're talking about? Deciding things depends a lot on the specifics.</p>\n<p>It's true that one way to create decidable Props is to write boolean-valued functions, but that's not always the best way.</p>",
        "id": 322368497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674158818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  basically I have a function that returns a Prop. the function takes an inductive type and recursively calls itself by \"peeling\" one of the constructors off until it has the \"smallest\" constructor, which it maps to a boolean value. </p>\n<p>I guess a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be something like this (although its a bit random) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">lan</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">numb</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">lan</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">lan</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">lan</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">lan</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">is_right_number</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lan</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lan.numb</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_right_number</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lan.plus</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I now want to proof <code>foo</code> is decidable</p>",
        "id": 322370645,
        "sender_full_name": "Kasper",
        "timestamp": 1674159530
    },
    {
        "content": "<p>Ok, in this case you're probably better off making it a <code>bool</code>-valued function (and change the conjuction into <code>&amp;&amp;</code>). Then whenever you use it as a Prop it will automatically be decidable.</p>",
        "id": 322375005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674160991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Making.20a.20proposition.20decidable/near/322375005\">said</a>:</p>\n<blockquote>\n<p>Ok, in this case you're probably better off making it a <code>bool</code>-valued function (and change the conjuction into <code>&amp;&amp;</code>). Then whenever you use it as a Prop it will automatically be decidable.</p>\n</blockquote>\n<p>For reasons I am unable to explain outside of this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I am not albe to make it a bool-valued function sadly.</p>",
        "id": 322378706,
        "sender_full_name": "Kasper",
        "timestamp": 1674162284
    },
    {
        "content": "<p>Then what you want is to fill in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">is_right_number</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">is_right_number</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 322379657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674162607
    },
    {
        "content": "<p>What exactly do you mean by making <code>foo</code> decidable? Classically, all propositions are decidable, but in order to be able to use it with <code>dec_trivial</code>, you have to construct a <code>decidable</code> instance explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">d₁</span> <span class=\"n\">d₂</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">and.decidable</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">d₁</span> <span class=\"n\">d₂</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322380843,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1674163014
    },
    {
        "content": "<p>I would guess that you can use apply_instance in both branches after a resetI</p>",
        "id": 322411977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674177271
    },
    {
        "content": "<p>I would recommend <code>dunfold foo</code> instead of <code>unfold foo</code> just in case there is something fishy going on with the equational lemmas</p>",
        "id": 322444997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674200221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Making.20a.20proposition.20decidable/near/322444997\">said</a>:</p>\n<blockquote>\n<p>I would recommend <code>dunfold foo</code> instead of <code>unfold foo</code> just in case there is something fishy going on with the equational lemmas</p>\n</blockquote>\n<p>Is it something we should do always when <code>dunfold foo</code> works?</p>",
        "id": 322446487,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1674200869
    },
    {
        "content": "<p>According to the suggestions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dunfold</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>or maybe even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">dunfold</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 322447592,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1674201308
    },
    {
        "content": "<p>Well specifically when writing decidability instances (or other sorts of data that you want to reduce later), you don't want to be rewriting along non-definitional equalities</p>",
        "id": 322447759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674201366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579335\">Kasper</span> <a href=\"#narrow/stream/113489-new-members/topic/Making.20a.20proposition.20decidable/near/322378706\">said</a>:</p>\n<blockquote>\n<p>For reasons I am unable to explain outside of this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I am not albe to make it a bool-valued function sadly.</p>\n</blockquote>\n<p>Could explain more, hopefully with an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that shows the obstruction? I'm concerned about this because writing a <code>decidable</code> instance is strictly more difficult than writing a <code>bool</code>-valued function. That's because <code>decidable</code> is essentially <code>bool</code> but with a proof of why the truth value is the correct one for the given proposition (and there's a function <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.to_bool\">docs#decidable.to_bool</a> to get a simple <code>bool</code> from a <code>decidable</code> proposition).</p>",
        "id": 322460758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674205947
    }
]