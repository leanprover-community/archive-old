[
    {
        "content": "<p>I am currently reading through Section 10.1 of Theorem Proving with Lean (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances</a>)</p>\n<p>I was wondering if the following intuition of mine, regarding how de-suraging of Type class and instance declaration works in Lean is correct? </p>\n<p>If there is something that I might be missing out in my understanding please let me know. </p>\n<p>It looks like Type classes are not yet documented in Lean Reference Manual, so the only resource seems to be Theorem Proving in Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">inhabited₁</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">inhabited₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">inhabited₃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat_inhabited₁</span> <span class=\"o\">:</span> <span class=\"n\">inhabited₁</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inhabited₁.mk</span> <span class=\"n\">nat.zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat_inhabited₂</span> <span class=\"o\">:</span> <span class=\"n\">inhabited₂</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">nat.zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_inhabited₃</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inhabited₃.mk</span> <span class=\"n\">nat</span> <span class=\"n\">nat.zero</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span>\n<span class=\"n\">nat_inhabited₃</span>\n</code></pre></div>",
        "id": 219759444,
        "sender_full_name": "Rajiv",
        "timestamp": 1607862115
    }
]