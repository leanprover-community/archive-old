[
    {
        "content": "<p>After doing some exercises on codewars and looking at the other solutions that people submitted to the problems I solved I noticed that some solutions use the symbol <code>$</code>. What does that symbol mean? I don't think it's explained in <em>Theorem Proving in Lean</em> or the other tutorials I've looked at</p>",
        "id": 201219909,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592443611
    },
    {
        "content": "<p><code>f $ .. </code> is like <code>f ( .. )</code></p>",
        "id": 201219965,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443690
    },
    {
        "content": "<p>i think it's the same <code>$</code> from haskell</p>",
        "id": 201219972,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443703
    },
    {
        "content": "<p>Oh, I see. Is there any reason to prefer one over the other?</p>",
        "id": 201219975,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592443719
    },
    {
        "content": "<p>Or is it just to prevent build up of <code>(</code>'s?</p>",
        "id": 201219991,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592443775
    },
    {
        "content": "<p>right, it's just to prevent parentheses</p>",
        "id": 201220056,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443808
    },
    {
        "content": "<p>especially ones where the two ends are far apart</p>",
        "id": 201220080,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443816
    },
    {
        "content": "<p>for dumb reasons, $ doesn't work correctly in tactic mode</p>",
        "id": 201220084,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443835
    },
    {
        "content": "<p>so i mostly don't use it</p>",
        "id": 201220087,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443839
    },
    {
        "content": "<p>What's the reason?</p>",
        "id": 201220092,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592443858
    },
    {
        "content": "<p>oh i don't know</p>",
        "id": 201220111,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443895
    },
    {
        "content": "<p>something about special parsing used for interactive tactics or something</p>",
        "id": 201220120,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443911
    },
    {
        "content": "<p>I see. Thanks for answering my question btw</p>",
        "id": 201220163,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1592443931
    },
    {
        "content": "<p>i tried to modify the <code>assumption</code> tactic to accept an optional <code>assumption?</code> and all hell broke loose</p>",
        "id": 201220168,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592443952
    },
    {
        "content": "<p>i think we're supposed to accept these things because they're getting fixed in lean 4 and they're not halting mathlib progress now</p>",
        "id": 201220182,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20does.20.24.20mean.3F/near/201220084\">said</a>:</p>\n<blockquote>\n<p>for dumb reasons, $ doesn't work correctly in tactic mode</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113489-new-members/topic/term.20mode.20haveI/near/198705223\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/term.20mode.20haveI/near/198705223</a></p>\n<p>Essentially, <code>$</code> has a really low precedence</p>",
        "id": 201226024,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1592452737
    },
    {
        "content": "<p>You can see for yourself what any notation like <code>$</code> does with <code>#print notation $</code>. To understand the output in this case you will need to know a little about Pratt parsers.</p>",
        "id": 201232502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592462468
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\">https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/</a></p>",
        "id": 201243447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592470941
    }
]