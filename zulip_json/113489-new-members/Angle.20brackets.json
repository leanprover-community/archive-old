[
    {
        "content": "<p>Are <code>(| ... |)</code> and <code>⟨ ... ⟩</code> meant to be treated identically by lean?</p>",
        "id": 157364494,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1549038035
    },
    {
        "content": "<p>In particular, I have a case where <code>or.inr ⟨a, b⟩</code> works as expected, but <code>or.inr (|a, b|)</code> does not (it does though if I write <code>or.inr ( (|a, b|) )</code>.</p>",
        "id": 157364977,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1549038441
    },
    {
        "content": "<p>That is curious. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, is this normal?</p>",
        "id": 157365234,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549038663
    },
    {
        "content": "<p>It looks like <code>(|</code> is missing the precedence from <code>⟨</code></p>",
        "id": 157365782,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1549039157
    },
    {
        "content": "<p>i.e. it's a bug</p>",
        "id": 157365789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1549039166
    },
    {
        "content": "<p>Is it worth fixing?</p>",
        "id": 157366189,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549039494
    },
    {
        "content": "<p>Well, I'll file an issue, and then people can decide.</p>",
        "id": 157366944,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1549040212
    },
    {
        "content": "<p>issues at lean repo are dead on arrival for the most part. Everything I have seen suggests that lean ascii support is half-hearted at best and has several issues, and seems like one of those things that is more likely to be dropped than fixed in lean 4</p>",
        "id": 157381995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549051879
    },
    {
        "content": "<p>I recommend getting used to the angle brackets</p>",
        "id": 157382079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549051931
    },
    {
        "content": "<p>This <code>(| ... |)</code> is a nightmare for mathematicians who want to use <code>|</code> for absolute values. I really really hope Lean 4 drops it</p>",
        "id": 157382482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549052283
    },
    {
        "content": "<p>Hmmkay.  That's a little disappointing personally as I am loathe to install an IDE just for unicode support.</p>",
        "id": 157504096,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1549263675
    },
    {
        "content": "<p>I mean, if you can find another means to input the unicode, by all means go ahead, but it's certainly easiest to use an editor that supports unicode</p>",
        "id": 157504689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549264729
    },
    {
        "content": "<p>You don't really need an IDE - I hesitate to call the existing editors IDEs since they are mostly just error reporting and unicode input</p>",
        "id": 157504712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549264776
    },
    {
        "content": "<p>but presumably you use <em>some</em> text editor to write your files, and you can probably set it up to input the lean unicode characters</p>",
        "id": 157504769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549264820
    },
    {
        "content": "<p>This is true.  I should just not be lazy and write some vimscript to translate <code>\\forall</code> etc into unicode.</p>",
        "id": 157505858,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1549266492
    },
    {
        "content": "<p>Although if it is the opinion of the maintainers that ASCII should not be preferred, it might be worth mentioning this in the tutorial document, and possibly throwing warnings that ASCII is deprecated (a bit more extreme)</p>",
        "id": 157505951,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1549266647
    },
    {
        "content": "<p>You don't need any fancy vimscript, <code>imap</code> is all you need</p>",
        "id": 157506093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549266853
    },
    {
        "content": "<p>Saved by a fellow vimmer :-) There are all sorts of people around here :-)</p>",
        "id": 157513531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549276394
    },
    {
        "content": "<p>That makes sense.  I'm working on proving that X in Z and Y in Z implies X union Y in Z.  The statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"bp\">\\&lt;</span> <span class=\"n\">hXZ</span><span class=\"o\">,</span> <span class=\"n\">hYZ</span><span class=\"bp\">\\&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>magically pulls this apart but I'm not sure why you use angle brackets in the first part and regular parens in the second.</p>",
        "id": 264184492,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638982440
    },
    {
        "content": "<p><code>and</code> is an inductive type with one constructor which takes two inputs -- that's the pointy brackets. <code>or</code> is an inductive type with two constructors, that's the round brackets.</p>",
        "id": 264184665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982494
    },
    {
        "content": "<p>They represent different operations. <code>(h1 | h2)</code> destructures an or-like type and produces two subgoals; <code>\\&lt;h1, h2\\&gt;</code> destructures an and-like type and produces one subgoal with two hypotheses</p>",
        "id": 264184684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638982505
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"bp\">|</span> <span class=\"n\">hB</span><span class=\"o\">),</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  2 goals</span>\n\n<span class=\"cm\">  A B C: Prop</span>\n<span class=\"cm\">  hA : A</span>\n<span class=\"cm\">  ⊢ C</span>\n\n<span class=\"cm\">  A B C : Prop</span>\n<span class=\"cm\">  hB: B</span>\n<span class=\"cm\">  ⊢ C</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264184928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982584
    },
    {
        "content": "<p>I will ponder this.  I think I need to get a grip on what I'm doing from the point of view of the underlying language, since the words \"constructor\" have no meaning to me in this context (though I do know the term from general object oriented programming).</p>",
        "id": 264185006,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638982615
    },
    {
        "content": "<p>That pattern is appropriate for destructuring a goal that looks like <code>A /\\ B -&gt; C -&gt; D \\/ E -&gt; F</code>, and produces two subgoals like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">|-</span> <span class=\"n\">F</span>\n\n<span class=\"n\">hXY</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">hYZ</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">|-</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 264185023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638982622
    },
    {
        "content": "<p>The word \"constructor\" is applied to the functions that construct an element of an inductive type. For example, if you look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or/src\">src#or</a>, you will see that it has two constructors, called <code>or.inl</code> and <code>or.inr</code></p>",
        "id": 264185296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638982712
    },
    {
        "content": "<p>If P and Q are propositions, then they're types, as are <code>P ∧ Q</code> and <code>P ∨ Q</code>. If <code>P</code> is a proposition then to give a term of type <code>P</code> is to give a proof of <code>P</code>. Statements like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7073em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> now become functions from proofs of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> to proofs of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>.</p>",
        "id": 264185341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982732
    },
    {
        "content": "<p><code>P ∧ Q</code> has one constructor. If you want to prove <code>P ∧ Q</code> then the only way to do it is to prove <code>P</code> and to prove <code>Q</code>! So <code>P ∧ Q</code> has one constructor which takes as inputs proofs of <code>P</code> and of <code>Q</code> and then gives you a proof of <code>P ∧ Q</code>. On the other hand there are two ways to prove <code>P ∨ Q</code> -- you can either prove <code>P</code> or you can prove <code>Q</code>. So <code>P ∨ Q</code> has two constructors! This whole story is very weird because \"and\" and \"or\" are just defined by truth tables as far as I'm concerned and they're basically dual to each other. The asymmetry comes from the fact that we're doing constructive logic here, and so you get a whole bunch of extra weirdness which as mathematicians we are not usually exposed to.</p>",
        "id": 264185881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982913
    },
    {
        "content": "<p>A very good place to read about this stuff is Theorem Proving In Lean <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> -- chapter 3 does this stuff: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html\">https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html</a> .</p>",
        "id": 264186088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982984
    },
    {
        "content": "<p>OK, thanks a lot, I will see where this all takes me.</p>",
        "id": 264186276,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638983057
    },
    {
        "content": "<p>That book holds off from introducing tactics until chapter 5, which has the disadvantage that pre that point proofs can become quite long and unwieldy and difficult to debug (you miss a bracket somewhere, you get an incomprehensible error three lines later and you're totally bewildered), but it has a _really_ good explanation to the whole \"a proposition is a type\" thing.</p>",
        "id": 264186304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638983071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> <a href=\"#narrow/stream/113489-new-members/topic/Angle.20brackets/near/264185006\">said</a>:</p>\n<blockquote>\n<p>the words \"constructor\" have no meaning to me in this context (though I do know the term from general object oriented programming).</p>\n</blockquote>\n<p>Maybe if you want to relate OO, the Lean constructors are like static factory methods on an abstract base class.  Lean promises that every object can be constructed using one of these factory methods, so you get a reverse operation, destructuring.</p>\n<p>One weird way to think about destructuring is that you're doing the visitor pattern, and each goal that pops up is a different \"method\" you have to implement.</p>",
        "id": 264186468,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638983142
    }
]