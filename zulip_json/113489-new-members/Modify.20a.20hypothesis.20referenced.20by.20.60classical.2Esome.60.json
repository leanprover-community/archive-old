[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">eq_true</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>simp_rw</code> tactic creates a new premise instead of updating the existing premise <code>h</code>. I guess that's because the goal references <code>h</code>. Working backwards is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">eq_true</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But if the goal is more complicated, it is intractable. How to deal with this situation?</p>",
        "id": 263968197,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638863604
    },
    {
        "content": "<p><code>revert</code> and <code>generalize</code> can be useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263968836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638864158
    },
    {
        "content": "<p>The idea is to put everything into the goal that has some kind of dependence on some value (via <code>revert</code>), and then you can <code>generalize</code> that value out of everything simultaneously.</p>",
        "id": 263969008,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638864345
    },
    {
        "content": "<p>I recall the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/generalize_proofs.html\">generalize_proofs</a>  tactic also being useful for these kinds of problems.</p>",
        "id": 263969089,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638864406
    },
    {
        "content": "<p>It's helpful to know roughly how rewriting actually works in Lean.  It needs to create the motive for <code>eq.rec</code>, which is sort of an expression with holes, and then given this motive and a proof that <code>a = b</code>, what <code>eq.rec</code> gives you is that plugging in <code>a</code> into all the holes is equal to plugging in <code>b</code> into all the holes.</p>\n<p>When you <code>rw h</code> where <code>h : a = b</code>, then the tactic creates a motive from the goal by looking for all the <code>a</code>'s and turning them into holes.  When you <code>rw h at h'</code>, then it basically has to <code>revert h'</code>, do the rewrite (but restricting its search for <code>a</code>'s inside the <code>h'</code> part of the goal), and then <code>intro h'</code>.  If <code>h</code> depends on <code>h'</code>, then the revert would fail, and instead <code>h'</code> is duplicated first. At least, this is my understanding.</p>",
        "id": 263969615,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638864849
    },
    {
        "content": "<p>So, said another way, the idea with using <code>revert</code> and <code>generalize</code> is to more carefully control how <code>rw h at h'</code> operates -- you can rewrite the goal and multiple hypotheses simultaneously this way.</p>",
        "id": 263969916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638865175
    },
    {
        "content": "<p>Thanks. But it doesn't work if the goal also contains <code>some_spec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Produces error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">generalize</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">check</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n<span class=\"o\">[</span><span class=\"n\">check</span><span class=\"o\">]</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span>\n  <span class=\"n\">eq</span> <span class=\"n\">_</span>\n<span class=\"n\">argument</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">expected</span> <span class=\"n\">type</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Of course in this lemma we can use split, but I am talking in general.</p>",
        "id": 263970313,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638865499
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263970458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638865609
    },
    {
        "content": "<p>The problem is that <code>some_spec h</code> contains <code>some h</code> in its type, and it's not possible to create a motive in this situation.  It's possible if you first remove <code>some_spec h</code> from the expression, since then it can no longer require <code>some h</code> literally being there.</p>",
        "id": 263971130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638866146
    },
    {
        "content": "<p>\"motive\" = \"expression with metavariables\", right? how do the dreaded \"motive is not type-correct\" errors fit into this?</p>",
        "id": 263971673,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638866525
    },
    {
        "content": "<p>I have no idea what a motive is precisely. My mental model is that it's the combination <code>(term_expr, type_expr)</code>. When that error shows up, something doesn't typecheck or is not a well-formed formula in some sense.</p>",
        "id": 263973030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638867463
    },
    {
        "content": "<p>I still find \"motive not type correct\" to be somewhat mysterious, but I think many cases are related to my last comment. It can happen when the holes punched out are actually implied by other parts of the expression.</p>\n<p><code>rw some_spec h</code> in this example gets \"motive is not type correct\", but I don't understand the motive it comes up with (I assume that's what it prints) or what's type incorrect about it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"bp\">∧</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263973214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638867581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> My understanding is that the definition of a motive is this argument of the recursor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eq.rec</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n          <span class=\"c1\">-- ^ motive</span>\n</code></pre></div>",
        "id": 263974149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638868155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> In this example, <code>m</code> is like a metavariable for the expression <code>a * a + a = m * a + m</code>. (Conceptually it's an expression with a metavariable, but it's also just a lambda expression.)</p>",
        "id": 263974527,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638868396
    },
    {
        "content": "<p>Here's a \"motive not type correct\" I've run into frequently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, motive is not type correct</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Having it print implicit arguments, this is the motive it comes up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span>\n     <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">x</span> <span class=\"n\">_inst_1</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That <code>@fintype.card x _inst_1</code> is the issue.  The <code>_inst_1</code> argument is <code>fintype α</code>, not <code>fintype x</code>, so there's a type error.</p>\n<p>(Side note: it seems that <code>rw</code> rewrites by taking the current goal <code>g</code> (even if it's an equality) and creating motives for <code>g = g</code>, putting holes in the second <code>g</code>.)</p>",
        "id": 263975151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638868769
    },
    {
        "content": "<p><code>simp [h]</code> works here, but then you have to <code>convert rfl</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263976967,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638869808
    },
    {
        "content": "<p>But I think that's to do with the instances being wrong completely; does rw at * work? Subst should, too</p>",
        "id": 263978724,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638870930
    },
    {
        "content": "<p>Why the \"but\"?</p>",
        "id": 263979095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638871162
    },
    {
        "content": "<p>I doubt <code>rw at *</code> would work because I'm pretty sure it does <code>rw</code> one at a time. <code>subst</code> is more likely to work since it's basically <code>revert</code>ing everything before creating its motive for the rewrite (at least, according to how I think it works)</p>",
        "id": 263979390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638871312
    },
    {
        "content": "<p><code>rw</code> does work if you <code>revert</code> the instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ∀ [_inst_1 : fintype α] [_inst_2 : fintype β], @fintype.card α _inst_1 = @fintype.card β _inst_2</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ∀ [_inst_1 : fintype β] [_inst_2 : fintype β], @fintype.card β _inst_1 = @fintype.card β _inst_2</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263979462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638871339
    },
    {
        "content": "<p><code>rw at *</code> creates a goal that the instances are equal, which seems sensible to me. The reason I said <code>but</code> is because it seems like a pretty transparent case, imo; if you just do a \"dumb\" <code>rw</code> then the goal becomes <code>@fintype.card ‹fintype α› β = @fintype.card ‹fintype β› β</code>, which is clear nonsense. <code>simp_rw</code> is a bit cleverer and turns the lhs into <code>@fintype.card (h.rec ‹fintype α›) β</code>.</p>",
        "id": 263980496,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638871998
    },
    {
        "content": "<p>Also, interestingly <code>rw at *</code> didn't need to unfreeze instances; I worry this is a bug, as whenever I've rewritten instances without unfreezing I've gotten the weirdest behaviour possible...</p>",
        "id": 263980541,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638872030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Modify.20a.20hypothesis.20referenced.20by.20.60classical.2Esome.60/near/263980496\">said</a>:</p>\n<blockquote>\n<p>if you just do a \"dumb\" <code>rw</code> then the goal becomes <code>@fintype.card ‹fintype α› β = @fintype.card ‹fintype β› β</code>, which is clear nonsense.</p>\n</blockquote>\n<p>Exactly, I was giving you simple example of \"motive not type correct\" where it's clear why the motive is not type correct.</p>",
        "id": 263980910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638872249
    },
    {
        "content": "<p>also, never mind about <code>rw at *</code> working, I was seeing ghosts</p>",
        "id": 263981025,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638872312
    }
]