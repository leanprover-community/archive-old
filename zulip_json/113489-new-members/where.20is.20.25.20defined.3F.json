[
    {
        "content": "<p><code># print notation %</code> tells you about the <code>has_mod</code> typeclass. I'm not sure how to find the instance for <code>\\N</code>.</p>",
        "id": 196066030,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588447311
    },
    {
        "content": "<p>Also are you just after the theorem <code>nat.even_iff</code>?</p>",
        "id": 196066072,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588447350
    },
    {
        "content": "<p>more generally, are you looking for these two theorems? <code>nat.mod_eq_zero_of_dvd</code> and <code>nat.dvd_of_mod_eq_zero</code>?<br>\nI found them by typing <code>#check nat.mod_eq</code> and then hitting ctrl-space in VSCode to see a list of completions.<br>\n(note the ctrl-space and cmd-space are two different keystrokes on macOS)</p>",
        "id": 196066145,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588447472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/where.20is.20.25.20defined.3F/near/196066145\" title=\"#narrow/stream/113489-new-members/topic/where.20is.20.25.20defined.3F/near/196066145\">said</a>:</p>\n<blockquote>\n<p>more generally, are you looking for these two theorems? <code>nat.mod_eq_zero_of_dvd</code> and <code>nat.dvd_of_mod_eq_zero</code>?<br>\nI found them by typing <code>#check nat.mod_eq</code> and then hitting ctrl-space in VSCode to see a list of completions.<br>\n(note the ctrl-space and cmd-space are two different keystrokes on macOS)</p>\n</blockquote>\n<p>I was trying to prove this thing. My approach was to start by rewriting this mod statement as algebra and then massage the algebra, but then I realized I didn't know how to rewrite a mode statement. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">arithmetic2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"n\">m</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">d</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196066312,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588447720
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">arithmetic2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"n\">m</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">d</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd&#39;</span> <span class=\"n\">hm</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_iff_eq_add</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I stay away from %, I find the API for MOD much easier.</p>",
        "id": 196066727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588448301
    },
    {
        "content": "<p><code>%</code> is a programming thing</p>",
        "id": 196066983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588448659
    }
]