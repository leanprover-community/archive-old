[
    {
        "content": "<p>Often times in programming, more efficient and less wasteful algorithms/code is preferable over big memory-eating clunky code. Does something like this apply when proving theorems in  Lean? For example, I wrote this big ugly proof for an exercise in Theorem Proving in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Exists.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">byCases</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hw</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpw</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"n\">absurd</span> <span class=\"n\">hpw</span> <span class=\"n\">hnp</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"n\">hqr</span><span class=\"o\">)</span>\n                <span class=\"n\">Or.intro_right</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"n\">hq</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Exists.elim</span> <span class=\"n\">hp</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">λ</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">hw</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Exists.elim</span> <span class=\"n\">hq</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">λ</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">Or.intro_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">hw</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>And the book provides this much smaller, more elegant solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h1</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hpa</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hqa</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hqa</span><span class=\"o\">⟩))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hpa</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hpa</span><span class=\"o\">)⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hqa</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hqa</span><span class=\"o\">)⟩))</span>\n</code></pre></div>\n<p>Is there any technical reason that the latter should be preferred to the former? Does it 'run' better? Is it just down to human readability, line count, and perhaps mathematical elegance?</p>",
        "id": 322823523,
        "sender_full_name": "debord",
        "timestamp": 1674374820
    },
    {
        "content": "<p>I don't think your proof is big and ugly. Mine was also longer than the one presented in the book:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_or</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Exists.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">fun</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">Or.elim</span> <span class=\"n\">hw</span>\n              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"n\">hq</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Exists.elim</span> <span class=\"n\">hp</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">fun</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hw</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Exists.elim</span> <span class=\"n\">hq</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">fun</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hw</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 322830129,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1674379172
    },
    {
        "content": "<p>But you can prove this exercise without using <code>Classical.byCases</code>. I think that's what matters.</p>",
        "id": 322831314,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1674379783
    },
    {
        "content": "<p>From a mathematical point of view, I would say that there is little difference between a proof that is long and slow and one that is short and  fast.</p>\n<p>From the point of view of maintaining a library of mathematical results, I would say that short and fast proofs are usually preferable, since they are likely easier to fix, quicker to compile and generally probably more streamlined.</p>\n<p>As a mathematician, I find the issue with axioms secondary and generally tend to prefer using all axioms at my disposal!</p>",
        "id": 322841582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1674385325
    },
    {
        "content": "<p>In good mathematics writing you'll often find that the key ideas are emphasized and tedious technical clutter is dealt with carelessly or skipped, because it's the ideas which we're excited about rather than the details. So I can see appeal in a proof of this of the form <code>by finish</code> or <code>by aesop</code> or whatever, which is much shorter to read and takes much longer to run.</p>",
        "id": 322844809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674387045
    },
    {
        "content": "<p>If someone is new to type theory and wants to understand how the <em>propositions-as-types</em> paradigm works, it can be helpful for them to write proofs of the exercises in Chapters 3–4 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a> without using convenient abbreviations. But after all, it's a matter of preference.</p>",
        "id": 322847273,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1674388298
    },
    {
        "content": "<p>When I was new to type theory, I found the following kind of proof much more helpful than the verbose solutions above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">⟩)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hqx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hqx</span><span class=\"o\">⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hx</span><span class=\"o\">⟩)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>It hammers home the fact that a proof is a function. I find it also much easier to write than the more verbose solutions above, where you can lose track of things like parentheses.</p>",
        "id": 322891392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674410869
    },
    {
        "content": "<p>Kevin, I think your syntax is a mix of Lean 3 and Lean 4 that doesn't exist anywhere.</p>",
        "id": 322891532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674410963
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322892505,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1674411551
    },
    {
        "content": "<p>The code I posted compiles in current lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">⟩)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hqx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hqx</span><span class=\"o\">⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hx</span><span class=\"o\">⟩)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 322893632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674412250
    },
    {
        "content": "<p>Since when was λ valid in lean 4 for that? I thought it was \"reclaimed\" as a variable name!</p>",
        "id": 322922222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674433819
    },
    {
        "content": "<p>Oh lol I must have missed the memo</p>",
        "id": 322924185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674435340
    },
    {
        "content": "<p>I think the answer is \"since forever\" btw</p>",
        "id": 322924261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674435380
    },
    {
        "content": "<p>yep, both lean 3 and lean 4 support <code>\\lam</code> and <code>fun</code> as synonyms</p>",
        "id": 322939667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674449268
    },
    {
        "content": "<p>it was only the style guide that changed</p>",
        "id": 322939716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674449293
    }
]