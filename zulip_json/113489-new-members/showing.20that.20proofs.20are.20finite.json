[
    {
        "content": "<p>Hello, I'm trying to prove that classical propositional logic is complete and have one remaining <code>sorry</code>  that I'm stuck on which involves showing that proofs are finite. Here is the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop_thm</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">p</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp_i</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">},</span> <span class=\"n\">prop_thm</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">})</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">p.imp</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin_subset_proves_of_proves</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">prop_formula</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"bp\">∃Δ</span><span class=\"o\">,</span> <span class=\"bp\">Δ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∧</span> <span class=\"n\">set.finite</span> <span class=\"bp\">Δ</span> <span class=\"bp\">∧</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Δ</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In order to prove this I wanted to make a function  <code>assumptions_used  :  ∀Γ p, prop_thm Γ p → set prop_formula</code> which gives me the smallest set of formulas in Γ needed to prove p. Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">assumptions_used</span> <span class=\"o\">:</span> <span class=\"bp\">∀Γ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">prop_thm.ax</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">prop_thm.imp_i</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">assumptions_used</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">q</span><span class=\"o\">})</span> <span class=\"n\">r</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">q</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This gives me the error  \"induction tactic failed, recursor 'prop_thm.dcases_on' can only eliminate into Prop\", which I don't know how to resolve. I have little experience with defining functions using the equation compiler so I wouldn't be surprised if this is nonsense. Do you have any hints or suggestions?</p>",
        "id": 287400671,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1656117421
    },
    {
        "content": "<p>Proof irrelevance means that with <code>prop_thm</code> being <code>Prop</code>-valued, you can't do pattern matching to construct something Type-valued. The error message is telling you that you're only allowed to pattern match to construct something Prop-valued.</p>\n<p>Maybe you might want this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">prop_thm</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">p</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp_i</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">},</span> <span class=\"n\">prop_thm</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">})</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">p.imp</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 287401191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656118078
    },
    {
        "content": "<p>Then you can write <code>nonempty (prop_thm Δ φ)</code> when you want a Prop version.</p>",
        "id": 287401248,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656118112
    },
    {
        "content": "<p>Oh that makes sense, seems like it works. Thanks!</p>",
        "id": 287401568,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1656118533
    },
    {
        "content": "<p>On a related note, is Tukey's lemma (or something similar) in mathlib?</p>",
        "id": 287401570,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1656118536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"427414\">@Eduardo Freire</span> maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/order/zorn.html\">https://leanprover-community.github.io/mathlib_docs/order/zorn.html</a>?</p>",
        "id": 287405801,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656124797
    },
    {
        "content": "<p>Yeah, initially I thought that Zorn's lemma would be harder to apply, but thinking about it its probably the same amount of work.<br>\nNice to know that there is a place showing the several versions of it, thank you</p>",
        "id": 287406667,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1656125926
    },
    {
        "content": "<p>no problem... btw, not sure if this is relevant but there's a proof of Hausdorff's Maximality Principle here: <a href=\"https://leanprover-community.github.io/mathlib_docs/order/chain.html\">https://leanprover-community.github.io/mathlib_docs/order/chain.html</a></p>",
        "id": 287410108,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1656129999
    },
    {
        "content": "<p>Regarding the main question,  <code>assumptions_used</code> is not really needed. You could define it using Kyle's suggestion and define a function that converts prop-valued <code>prop_thm</code> to type-valued <code>prop_thm</code> using choice (or just define type-valued version only), but it's easier to just use induction directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">prop_thm</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"n\">prop_formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">p</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp_i</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">},</span> <span class=\"n\">prop_thm</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">})</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">p.imp</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">union_proves_of_proves</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prop_formula</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prop_thm</span> <span class=\"n\">s</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop_thm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set.mem_union_left</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.union_assoc</span><span class=\"o\">,</span> <span class=\"n\">set.union_comm</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.union_assoc</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin_subset_proves_of_proves</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">prop_formula</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Γ</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">prop_formula</span><span class=\"o\">),</span> <span class=\"bp\">Δ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∧</span> <span class=\"bp\">Δ.</span><span class=\"n\">finite</span> <span class=\"bp\">∧</span> <span class=\"n\">prop_thm</span> <span class=\"bp\">Δ</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[{</span><span class=\"n\">φ</span><span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">set.singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.finite_singleton</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.mem_singleton</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">Δ</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">Δ</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">φ</span><span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">set.diff_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.union_comm</span><span class=\"o\">],</span> <span class=\"n\">set.finite.diff</span> <span class=\"n\">h₂</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.diff_union_self</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">union_proves_of_proves</span> <span class=\"n\">h₃</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287420427,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1656141982
    },
    {
        "content": "<p>That is really helpful, I should be one application of Zorn's lemma away from proving the main result now, thanks!</p>",
        "id": 287444071,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1656174978
    }
]