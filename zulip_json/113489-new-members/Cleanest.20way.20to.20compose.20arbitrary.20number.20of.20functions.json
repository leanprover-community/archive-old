[
    {
        "content": "<p>Suppose <code>n : ℕ</code> and that I have <code>f : (fin n) → (α → α)</code> and <code>a : α</code>. What is the cleanest way to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mn>0</mn></msub><mi>a</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_{n-1}(f_{n-2}(...(f_0 a)....))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">...</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord\">....</span><span class=\"mclose\">))</span></span></span></span> in Lean?</p>",
        "id": 318258622,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1672235306
    },
    {
        "content": "<p>I would write it like <code>f $ g $ h x</code></p>",
        "id": 318260304,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672235957
    },
    {
        "content": "<p>That only works for n=3 though</p>",
        "id": 318261010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672236236
    },
    {
        "content": "<p>Ah, <code>n</code> is an input of <code>f</code>. I got confused because you wrote it subscripted in LaTeX (as if you had those functions at hand).</p>\n<p>In Lean 4, I would <code>foldl</code> on <code>List.range n</code></p>",
        "id": 318261225,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672236312
    },
    {
        "content": "<p>How do you provide an element of <code>fin 0</code> though?</p>",
        "id": 318263142,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672236905
    },
    {
        "content": "<p>I would write something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">composeN</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n    <span class=\"n\">for</span> <span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"n\">idx</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">idx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"bp\">·</span><span class=\"o\">)]⟩</span> <span class=\"bp\">∘</span> <span class=\"n\">fn</span>\n    <span class=\"n\">fn</span>\n</code></pre></div>\n<p>the <code>List.range</code> approach is annoying to work with because you would have to prove the bounds on the values inside List.range and I don't know whether we have built in lemmata for that. This works with a default Lean 4 installation.</p>",
        "id": 318265162,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672237505
    },
    {
        "content": "<p>Based on how you are writing the <code>Fin</code> type here you are probably asking a Lean 3 quesiton though and I have no clue about that. There the List.range approachw ith something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">composeN</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"n\">n</span>\n  <span class=\"n\">range.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">elem</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"bp\">∘</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>should work out but I have no clue about the things you have available.</p>",
        "id": 318265445,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672237625
    },
    {
        "content": "<p>This question is related: <a href=\"#narrow/stream/270676-lean4/topic/iterating.20over.20.60Fin.20n.60/near/314789036\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/iterating.20over.20.60Fin.20n.60/near/314789036</a></p>",
        "id": 318265720,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672237721
    },
    {
        "content": "<p>The following code works in Lean 3.<br>\nUnfortunately, I don't know how to typecast <code>(fin 5) → (ℤ → ℤ)</code> to <code>list (ℤ → ℤ)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>      <span class=\"o\">[(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldl</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">f</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"mi\">9</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">chain</span> <span class=\"n\">g'</span> <span class=\"mi\">9</span>\n</code></pre></div>\n<p>Both <code>#eval</code>s return 624.</p>",
        "id": 318265905,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672237800
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">composeN</span> <span class=\"n\">functions</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">composeN</span><span class=\"o\">,</span> <span class=\"n\">forIn'</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.forIn'</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.forIn'.loop</span><span class=\"o\">,</span> <span class=\"n\">functions</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>formally  verified <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 318266187,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672237892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Cleanest.20way.20to.20compose.20arbitrary.20number.20of.20functions/near/318265905\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, I don't know how to typecast <code>(fin 5) → (ℤ → ℤ)</code> to <code>list (ℤ → ℤ)</code>.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.of_fn\">docs#list.of_fn</a></p>",
        "id": 318272835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672240136
    },
    {
        "content": "<p>There might be a nice way to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cons_induction\">docs#fin.cons_induction</a> here</p>",
        "id": 318273057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672240215
    },
    {
        "content": "<p>I updates my solution above. Thanks!</p>",
        "id": 318273255,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672240312
    },
    {
        "content": "<p>Thanks to all</p>",
        "id": 318280134,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1672242918
    },
    {
        "content": "<p>I am surprised this is not in mathlib yet though as I would have guessed somebody should have needed this at some point</p>",
        "id": 318280366,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1672242995
    },
    {
        "content": "<p>I wonder if it should be pushed</p>",
        "id": 318280681,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1672243109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>, why not list.foldr to avoid the need to reverse?</p>",
        "id": 318290100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672245493
    },
    {
        "content": "<p>I doubt this is very useful to have in mathlib; if you're working frequently with functions from a type to itself, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.End\">docs#function.End</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">comp_n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">function.End</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</code></pre></div>",
        "id": 318290595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672245717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Cleanest.20way.20to.20compose.20arbitrary.20number.20of.20functions/near/318290100\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span>, why not list.foldr to avoid the need to reverse?</p>\n</blockquote>\n<p>I can do <code>(list.of_fn f).reverse.foldr (∘) id</code> instead. But you probably meant something different, didn't you?</p>",
        "id": 318291312,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672245976
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 318291667,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672246109
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 318291723,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672246142
    },
    {
        "content": "<p>These four functions seem (but I haven't really checked it) to do the same.</p>",
        "id": 318291758,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672246159
    },
    {
        "content": "<p>Either I reverse the list, or I reverse the sides of the composition.</p>",
        "id": 318291821,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672246188
    },
    {
        "content": "<p>There doesn't seem to be a difference for our purpose between these two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 318291963,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672246240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Cleanest.20way.20to.20compose.20arbitrary.20number.20of.20functions/near/318290595\">said</a>:</p>\n<blockquote>\n<p>I doubt this is very useful to have in mathlib; if you're working frequently with functions from a type to itself, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.End\">docs#function.End</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">comp_n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">function.End</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Why is it named after endomorphisms and not just general unary operations?</p>",
        "id": 318292333,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672246368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Cleanest.20way.20to.20compose.20arbitrary.20number.20of.20functions/near/318291723\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><code>(list.of_fn f).foldl (flip (∘)) id</code></p>",
        "id": 318307278,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672252742
    }
]