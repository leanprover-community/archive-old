[
    {
        "content": "<p>I am looking at <a href=\"https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/data/subtype/basic.lean#L14\">this code</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_of_subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>— And I cannot figure out whence the notation for subtypes <code>{ … // … }</code> comes from. Is it built in?</p>",
        "id": 257681394,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1634296721
    },
    {
        "content": "<p>There is <a href=\"https://github.com/leanprover-community/lean/blob/a0fb1e8c7ac81dfd2e80ad0de08f4e57ee853d82/library/init/core.lean#L247\">this structure</a> — is it what <code>{ … // … }</code> stands for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257681650,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1634296860
    },
    {
        "content": "<p>Yup, exactly.</p>",
        "id": 257682338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634297172
    },
    {
        "content": "<p>So how do we know that this notation stands for this definition?</p>",
        "id": 257682412,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1634297216
    },
    {
        "content": "<p>It would good if it were written in the docs... And I can't find where the notation is defined <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 257682869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634297445
    },
    {
        "content": "<p>The parser for all the <code>{}</code>-related syntax in Lean 3 can be found in <code>src/frontends/lean/brackets.cpp</code></p>",
        "id": 257684775,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634298495
    },
    {
        "content": "<p>It's built in. The reason is because there is a lot of overloading of notations that start with <code>{</code>, and lean's <code>notation</code> command can't handle it</p>",
        "id": 257685971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634299181
    }
]