[
    {
        "content": "<p>I have a finite set <code>qq</code> and I want to prove that the functions <code>qq → qq</code> are also a finite set.</p>\n<p>Something like this:</p>\n<p><code>instance finiteness_of_endofunctions {qq : Type} [fintype qq] : fintype (qq → qq) := sorry</code></p>\n<p>How do I do that?</p>",
        "id": 185440156,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578846126
    },
    {
        "content": "<p><code>by apply_instance</code></p>\n<p>There's already a <code>fintype</code> for <code>pi</code> types.</p>",
        "id": 185440209,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578846259
    },
    {
        "content": "<p>You need <code>decidable_eq qq</code> as well as it turns out</p>",
        "id": 185440226,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578846306
    },
    {
        "content": "<p>Like this? <code>instance finiteness_of_endofunctions {qq : Type} [fintype qq] [decidable_eq qq] : fintype (qq → qq) := pi.fintype</code></p>",
        "id": 185440332,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578846506
    },
    {
        "content": "<p>Why do I need the decidable_eq?</p>",
        "id": 185440341,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578846527
    },
    {
        "content": "<p>I imagine it's because each of the finitely many functions <code>qq -&gt; qq</code> needs to be able to determine which element of the input it is looking at.</p>",
        "id": 185441606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1578848832
    },
    {
        "content": "<p><code>fintype</code> without <code>decidable_eq</code> is sort of a strange beast.</p>",
        "id": 185441675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1578848950
    },
    {
        "content": "<p>Well, I suppose that is reasonable</p>",
        "id": 185444398,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578853661
    },
    {
        "content": "<p>But now, if I do add <code>decidable_eq</code> on <code>qq</code>, for the purpose of what I am doing, I would also have to endow <code>qq -&gt; qq</code> with <code>decidable_eq</code>. </p>\n<div class=\"codehilite\"><pre><span></span>instance decidable_eq_endofunctions {qq : Type} [fintype qq] [decidable_eq qq] : decidable_eq (qq → qq) :=  sorry\n</pre></div>\n\n\n<p>Library search suggests using <code>classical.dec_eq (qq → qq)</code></p>\n<p>Any chance I can avoid going classical?</p>",
        "id": 185444537,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578853915
    },
    {
        "content": "<p><code>by apply_instance</code> does work there.</p>",
        "id": 185444674,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578854081
    },
    {
        "content": "<p>You shouldn't have to write these instances; instance search will find these in use cases even without your <code>instance</code> declaration</p>",
        "id": 185448910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578860913
    },
    {
        "content": "<p>I thought so too, but it did not seem to be working</p>",
        "id": 185449519,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578861857
    },
    {
        "content": "<p>it should work with the <code>decidable_eq</code> instance in the context</p>",
        "id": 185449769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578862324
    },
    {
        "content": "<p>I think that we should stop pretending that we care about constructive math (as opposed to computable defs). In particular, I'd stop requiring <code>decidable P</code> whenever we only use this assumption to prove a proposition.</p>",
        "id": 185460335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578881820
    },
    {
        "content": "<p>There will always be people who want to use lean to do things which are quite a long way from maths, I guess. I just switch classical on and don't think any more about it :-)</p>",
        "id": 185470262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578900326
    },
    {
        "content": "<p>The trouble is that switching classical on doesn't always mean you don't have to think about it.</p>",
        "id": 185471403,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578901955
    },
    {
        "content": "<blockquote>\n<p>it should work with the decidable_eq instance in the context</p>\n</blockquote>\n<p>I thought so too.</p>\n<p>Please take a look at <a href=\"https://gist.github.com/Agnishom/426552564fd1a235ac7c009c24b11c09#file-monoid_recognizers-lean-L38\" target=\"_blank\" title=\"https://gist.github.com/Agnishom/426552564fd1a235ac7c009c24b11c09#file-monoid_recognizers-lean-L38\">line 38 of this</a>. I'd want a lot of this painful instances to be automatic, but they are not, for some reason</p>",
        "id": 185596147,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1579009293
    }
]