[
    {
        "content": "<p>I am trying to figure out how to set up the sketch for a proof of the assertion \"If X is a Borel space then it is measurable isomorphic to (0,1)\" in Lean.   I don't know if it's true or not.  Baby steps, I am trying to make the most <code>mathlib</code>-compliant sketch.  Here is my first pass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.lebesgue_measure</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">measurable_space</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> A measurable function is a function between the underlying sets of two measurable spaces that preserves</span>\n<span class=\"cm\">the structure of the spaces: the preimage of any measurable set is measurable.</span>\n<span class=\"cm\">In probability theory, a measurable function on a probability space is known as a random variable.</span>\n<span class=\"cm\">https://en.wikipedia.org/wiki/Measurable_function -/</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">measurable</span>\n<span class=\"c\">/-</span><span class=\"cm\"> measurable :</span>\n<span class=\"cm\">  Œ† {Œ± : Type u_1} {Œ≤ : Type u_2} [_inst_1 : measurable_space Œ±] [_inst_2 : measurable_space Œ≤],</span>\n<span class=\"cm\">    (Œ± ‚Üí Œ≤) ‚Üí Prop  -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> For a pairing between X and Y (where Y need not be different from X) to be a bijection, four properties must hold:</span>\n<span class=\"cm\">each element of X must be paired with at least one element of Y,</span>\n<span class=\"cm\">no element of X may be paired with more than one element of Y,</span>\n<span class=\"cm\">each element of Y must be paired with at least one element of X, and</span>\n<span class=\"cm\">no element of Y may be paired with more than one element of X.</span>\n<span class=\"cm\">https://en.wikipedia.org/wiki/Bijection -/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bijection</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">into</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique_into</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y‚ÇÅ</span> <span class=\"n\">y‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">y‚ÇÅ</span> <span class=\"bp\">‚àß</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">y‚ÇÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">y‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"n\">y‚ÇÇ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">onto</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique_onto</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x‚ÇÅ</span> <span class=\"n\">x‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">‚àß</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"n\">x‚ÇÇ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">borel_space</span> <span class=\"c1\">-- borel_space : Œ† (Œ± : Type u_1) [_inst_1 : topological_space Œ±] [_inst_2 : measurable_space Œ±], Prop</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> A Borel isomorphism is a measurable bijective function between two measurable standard Borel spaces</span>\n<span class=\"cm\">https://en.wikipedia.org/wiki/Borel_isomorphism -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">borel_isomorphism</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span>\n              <span class=\"o\">[</span><span class=\"n\">TSX</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MSX</span><span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"o\">]</span>\n              <span class=\"o\">[</span><span class=\"n\">TSY</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MSY</span><span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"o\">]</span>\n              <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span> <span class=\"o\">)</span>\n              <span class=\"o\">[</span><span class=\"n\">BSX</span><span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BSY</span><span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n              <span class=\"o\">[</span><span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bijection</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R01</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R01_is_topological_space</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">R01</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R01_is_measurable_space</span><span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">R01</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R01_is_borel_space</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">R01</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- If (X,ùëë) is s Borel space then it is measurable isomorphic to (0,1)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">borel_space_iso_Icc_01</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">borel_isomorphism</span> <span class=\"n\">X</span> <span class=\"n\">set_Icc_01_is_borel_space</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 220529943,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608487261
    },
    {
        "content": "<p>mathlib already has <code>function.bijective</code></p>",
        "id": 220534504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608493960
    },
    {
        "content": "<p>also <code>into</code> is trivially true</p>",
        "id": 220534516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608493986
    },
    {
        "content": "<p>as is <code>unique_into</code></p>",
        "id": 220534529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608494011
    },
    {
        "content": "<p>also as I mentioned in the other thread this theorem is false, just use <code>X = pempty</code></p>",
        "id": 220534630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608494122
    },
    {
        "content": "<p>This is basically asserting that every topological space is <code>[0,1]</code> which is crazy</p>",
        "id": 220534639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608494157
    },
    {
        "content": "<p>Did you maybe mean to state the Borel isomorphism theorem?</p>\n<p><a href=\"https://math.stackexchange.com/questions/556875/any-two-uncountable-borel-subsets-of-0-1-borel-isomorphic\">https://math.stackexchange.com/questions/556875/any-two-uncountable-borel-subsets-of-0-1-borel-isomorphic</a></p>",
        "id": 220537703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608498786
    },
    {
        "content": "<p>Oh, that theorem makes a lot more sense. I think we're not really in a position to prove it though as it needs a lot of setup work in descriptive set theory</p>",
        "id": 220537788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608498922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> no, I was trying to explore a <a href=\"https://math.stackexchange.com/questions/3780089/extending-the-concept-of-distribution-function-to-any-totally-or-partially-order/3782009#3782009\">specific claim</a> made in Math StackExchange by reasoning about it in Lean.   I understand from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that it is false.  Even so, I want to learn the most <code>mathlib</code>-ish way to express the claim.  The wording of the claim is</p>\n<p>\" If (ùëå,ùëë) is s Borel space (a Polish space for instance) then it is measurable isomorphic to (0,1) and one can define an order in ùëå. The isomorphism however is not explicit, it is based on constructions that use the axiom of choice.\"</p>",
        "id": 220538599,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608500384
    },
    {
        "content": "<p>the \"for instance\" is apparently important</p>",
        "id": 220538641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500406
    },
    {
        "content": "<p>but as stated it is not true</p>",
        "id": 220538645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500418
    },
    {
        "content": "<p>you shouldn't believe everything you read on the internet :)</p>",
        "id": 220538648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500434
    },
    {
        "content": "<p>damiano's link contains a mention of \"standard Borel space (i.e. polish)\" and I'm not sure what to make of the added adjective</p>",
        "id": 220538660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500484
    },
    {
        "content": "<p>probably I should just look up what this borel isomorphism theorem actually says instead of guessing from peoples' oblique references to it</p>",
        "id": 220538663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500514
    },
    {
        "content": "<p>I'm pretty sure damiano is right that this is the theorem that Oliver was thinking of</p>",
        "id": 220538760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500660
    },
    {
        "content": "<p><a href=\"http://math.iisc.ac.in/~manju/MartBM/RaoSrivastava_borelisomorphism.pdf\">Here it is</a>: Two standard Borel sets <code>X</code> and <code>Y</code> are isomorphic iff they are of the same cardinality.</p>",
        "id": 220539491,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608501886
    },
    {
        "content": "<p>We don't have polish spaces AFAIK so this will be some work to formalize</p>",
        "id": 220540113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608502863
    },
    {
        "content": "<p>A Polish space is a second countable, completely metrizable topological space.</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.second_countable_topology\">docs#topological_space.second_countable_topology</a></li>\n<li>I don't know about \"completely metrizable\"</li>\n</ul>",
        "id": 220542087,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608506268
    },
    {
        "content": "<p>that means it can be equipped with a complete metric space structure</p>",
        "id": 220542130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608506298
    },
    {
        "content": "<p>So all the definitions are there: </p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.second_countable_topology\">docs#topological_space.second_countable_topology</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_space\">docs#complete_space</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric_space\">docs#metric_space</a></li>\n</ul>",
        "id": 220542484,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608506883
    },
    {
        "content": "<p>I don't know if there is any particular reason to define \"metrizable\" though</p>",
        "id": 220542694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608507164
    },
    {
        "content": "<p>I was just reading the first sentence of paragraph 2 of <a href=\"http://math.iisc.ac.in/~manju/MartBM/RaoSrivastava_borelisomorphism.pdf\">Rao and Srivastava</a>.   You can go to <a href=\"https://ncatlab.org/nlab/show/Polish+space\">nlab</a>:</p>\n<p>\"A Polish space is a topological space that‚Äôs homeomorphic to a separable complete metric space. Every second countable locally compact Hausdorff space is a Polish space, among others.\"</p>\n<p>or <a href=\"https://en.wikipedia.org/wiki/Polish_space\">Wikipedia</a> which matches Rao and Srivastava and nLab:</p>\n<ul>\n<li>a Polish space is a separable completely metrizable topological space</li>\n<li>that is, a space homeomorphic to a complete metric space that has a countable dense subset</li>\n</ul>\n<p>The Wiki of <a href=\"https://en.wikipedia.org/wiki/Completely_metrizable_space\">completely metrizable</a> is</p>\n<p>\"a topological space (X, T) for which there exists at least one metric d on X such that (X, d) is a complete metric space and d induces the topology T.\"</p>\n<p>I'm not sure if this covers it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.cauchy</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">topological_space.second_countable_topology</span>\n<span class=\"k\">#check</span> <span class=\"n\">complete_space</span>\n<span class=\"k\">#check</span> <span class=\"n\">metric_space</span>\n</code></pre></div>",
        "id": 220542868,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608507450
    },
    {
        "content": "<p>is that a question?</p>",
        "id": 220543091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608507765
    },
    {
        "content": "<p>I question the value of defining \"metrizable\" because usually we just care about straight up metric spaces</p>",
        "id": 220543109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608507801
    },
    {
        "content": "<p>I don't know many examples of metrizable spaces that are not metric spaces</p>",
        "id": 220543118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608507834
    },
    {
        "content": "<p>If the goal is to bring <code>polish_space</code> into <code>mathlib</code>, taking  Rao and Srivastava's definition of Polish space as reliable, it appears that all of the required sub-definitions are available in <code>mathlib</code>, so you can say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.cauchy</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">Œ±</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">variable</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">polish_space</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">topological_space.second_countable_topology</span> <span class=\"n\">Œ±</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">Œ±</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 220544198,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608509574
    },
    {
        "content": "<p>Except I want one space that is all of these and I don't know how to express it in Lean.  If I add <code>s=t</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">polish_space</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">topological_space.second_countable_topology</span> <span class=\"n\">Œ±</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">Œ±</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">t</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span>\n</code></pre></div>",
        "id": 220544684,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608510486
    },
    {
        "content": "<p>you should take a look at how such definitions are written in mathlib</p>",
        "id": 220544802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608510694
    },
    {
        "content": "<p>I just spent an hour looking and I can't find a good model  This is as close as I could get and it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.cauchy</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">polish_space</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_uniform</span><span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_complete</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">Œ±</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_second_countable</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">topological_space.second_countable_topology</span> <span class=\"n\">Œ±</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 220546115,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608512895
    },
    {
        "content": "<p>That's looking better. Drop the <code>@</code></p>",
        "id": 220546138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608513000
    },
    {
        "content": "<p>One problem with this definition, mathematically speaking, is that it's not a metric space or metrizable space anymore</p>",
        "id": 220546242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608513130
    },
    {
        "content": "<p><code>uniform_space</code> is not a predicate, so you shouldn't call it <code>is_*</code>. Use <code>extends</code> so that a polish space inherits from uniform space</p>",
        "id": 220546313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608513281
    },
    {
        "content": "<p>Drop <code>t</code> too (the field)</p>",
        "id": 220546329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608513324
    },
    {
        "content": "<p>the uniform structure implies a top space structure</p>",
        "id": 220546336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608513350
    },
    {
        "content": "<p>DONE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">polish_space</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_complete</span><span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">Œ±</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_second_countable</span><span class=\"o\">:</span> <span class=\"n\">second_countable_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 220548162,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608516898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/If.20X.20is.20a.20Borel.20space.20then.20it.20is.20measurable.20iso.20to.20R/near/220543109\">said</a>:</p>\n<blockquote>\n<p>I question the value of defining \"metrizable\" because usually we just care about straight up metric spaces</p>\n</blockquote>\n<p>Dear Mario,</p>\n<p>at least from a mathematical point of view, the concept of <code>metrizable</code> instead of <code>metric</code> shows up in that you do not need to fix a specific metric.  This arises when you have several \"natural\" metrics on a space, all equivalent, and you like the freedom to move from one to the other.  a couple of examples where this happens are</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic norms: the metrics are obtained by choosing a real number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and setting <code>nrm x = b ^ (- val x)</code>.  Common choices of <code>b</code> are <code>p</code> itself or <code>e</code>; if you <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic field is not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, but some finite extension, then is is common to choose as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> the cardinality of the residue field;</li>\n<li>finite dimensional vector spaces, where all norms are equivalent to one another.</li>\n</ol>\n<p>In the first case, it is mostly a matter of making a choice of convention to begin with and then stick to it.  The second one is a little more subtle, since sometimes you obtain a \"random\" norm on <code>X</code> and then you prove that <code>X</code> is a finite dimensional vector space.  E.g. the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">‚Ñì</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\ell^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">‚Ñì</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> norms on a finite dimensional vector space are all equivalent to one another.</p>\n<p>The bottom line, though, is that I mostly agree with your statement.  I feel that this is similar to when you wonder whether a Hausdorff space comes with a function on pairs of points giving disjoint open sets or you simply assert the existence of such open sets and leave the rest to choice.</p>",
        "id": 220558628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608535122
    },
    {
        "content": "<p>Dear Mario,</p>\n<p>reading my previous answer, I want to apologize in case you feel that it is patronizing.  I was simply trying to spell out a concept to which I am still trying to adjust of how the definitions that appear in formalizing mathematics later on haunt or help us!</p>\n<p>I know that I have been struggling with extracting the \"obvious\" open sets from the definition of Hausdorff, so it felt very close to my heart!</p>",
        "id": 220564552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608541322
    }
]