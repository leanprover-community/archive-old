[
    {
        "content": "<p>How was I able to prove this obviously untrue statement? By which I mean, how can I phrase the statement I wanted?</p>\n<p><code>lemma bad (b p : nat) : (b : ℚ) / (p : ℚ) = (((b : ℕ) / (p : ℕ)) : ℚ) := rfl</code></p>\n<p>This is Obviously False: 1/2 is 1/2 in the rationals and 0 in the naturals. How do I phrase <code>bad</code> in such a way that <code>rfl</code> doesn't prove it and instead I need to add the hypothesis that <code>p</code> divides <code>b</code>?</p>",
        "id": 202237272,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593351797
    },
    {
        "content": "<p>Type inference is outside in.</p>",
        "id": 202237408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593351988
    },
    {
        "content": "<p>(Generally speaking.)</p>",
        "id": 202237411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593351992
    },
    {
        "content": "<p>I hoped I'd be able to completely override the type inference algorithm by specifying the types of everything - I presume the problem is that the right-hand <code>/</code> has implicitly upcasted its two explicitly <code>nat</code> inputs. How can I stop it doing that? I ask because I have the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"n\">p_prime</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b_nonzero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"c1\">--have s : (b : ℚ) / (p : ℚ) = (((b : ℕ) / (p : ℕ)) : ℚ) := rfl,</span>\n<span class=\"c1\">--rw ← @padic_val_rat_of_nat p (b / p) at e,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In scope is a term of type <code>padic_val_rat p (↑b / ↑p) = ↑(padic_val_nat p b) - 1</code>, and I know <code>padic_val_rat_of_nat</code> can turn the left-hand side into a <code>padic_val_nat</code> (it's currently talking about <code>padic_val_rat</code>) <em>if</em> I can make that <code>b / p</code> term appear as an upcasted natural, rather than a rational</p>",
        "id": 202237555,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593352266
    },
    {
        "content": "<p>there should be a theorem <code>nat.cast_div</code> (but there probably isn't right now)</p>",
        "id": 202237645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352423
    },
    {
        "content": "<p>The way to write your statement is something like (untested)<br>\n<code>lemma bad (b p : nat) : (b / p : ℚ) = (b / p : ℕ)</code></p>",
        "id": 202237708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593352509
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 202237710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352523
    },
    {
        "content": "<p>Writing either of these functions is by a large margin the hardest thing I've experienced in Lean. My approach must be completely wrong, because it feels like Lean is fighting me as hard as it can in a way I've never experienced from a computer. It would be a lot easier if I could simply prevent it from doing any coercion locally, because then at least I could easily control what types anything had!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">cast_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_div</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_dvd</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ind_m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">n_nonzero</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">padic_val_rat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"n\">p_prime</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b_nonzero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">@</span><span class=\"n\">cast_dvd</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- I can do that one</span>\n<span class=\"c1\">-- this is nonsense</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202242816,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593360479
    },
    {
        "content": "<p>You can always control coercion by putting more type ascriptions in, or putting <code>\\u</code> directly in the term where you want the coercion to appear</p>",
        "id": 202243650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593361616
    },
    {
        "content": "<p>in particular you can use double type ascription like <code>((x + y : nat) : int)</code> to make sure a coercion gets inserted between the type ascriptions</p>",
        "id": 202243721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593361691
    },
    {
        "content": "<p><code>cast_dvd</code> is not true in the generality you have stated for it</p>",
        "id": 202243814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593361827
    },
    {
        "content": "<p>the division on alpha has nothing to do with the algebraic structure</p>",
        "id": 202243818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593361847
    },
    {
        "content": "<p>Here's a true version of your theorem (possibly not maximally general)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">cast_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_dvd</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n_dvd</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">n_nonzero</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"n\">n_nonzero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202243958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593362126
    },
    {
        "content": "<p>Maybe this will help you for the second part:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"n\">p_prime</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b_nonzero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">@</span><span class=\"n\">cast_dvd</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span><span class=\"o\">],</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202244265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593362616
    },
    {
        "content": "<p>You also don't have to provide as many arguments to the rewrites if you do them from left to right:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b0&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">b_nonzero</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p0&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span> <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">padic_val_rat_of_nat</span><span class=\"o\">,</span> <span class=\"n\">cast_dvd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">dvd</span> <span class=\"n\">p0&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"n\">b0&#39;</span> <span class=\"n\">p0&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span> <span class=\"n\">p_prime</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span><span class=\"o\">,</span> <span class=\"n\">padic_val_rat_of_nat</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_one</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202244531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593363034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span></p>",
        "id": 202244556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593363086
    },
    {
        "content": "<p>You just have to learn the knack. <code>lemma bad (b p : nat) : (b : ℚ) / (p : ℚ) = (((b : ℕ) / (p : ℕ)) : ℚ) := rfl</code> works because Lean knows the RHS is a rational so it deduces that <code>/</code> is rat.div` and then it coerces b and p into Q before doing the division. You need to tell Lean the division is still happening in nat, that's what it guesses incorrectly.</p>",
        "id": 202250719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593372340
    },
    {
        "content": "<p>Thanks all, I'll stare at these</p>",
        "id": 202256510,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593379995
    },
    {
        "content": "<p>It took me a while. You go from outside in. I used to be forever checking types when I was doing this the first time</p>",
        "id": 202256526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593380040
    },
    {
        "content": "<p>This is what I mean when I say I don't know how to control the type of anything: I have not yet found <em>any</em> type annotations I can place on the last line while retaining an expression that type-checks, and I don't know what types the things on the left or right hand side of <code>f</code> are. When I hover over them in the Lean widget, it tells me it's coercing to Z, but when I try and annotate anything as being in Z, the nat.cast_sub stops compiling, with an error message that tells me two identical terms are not equal. (Obviously the terms aren't identical - one of them has been coerced to a different type than the other. But I have no idea what those types are.)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">padics</span><span class=\"bp\">.</span><span class=\"n\">padic_norm</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cast_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_dvd</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n_dvd</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">n_nonzero</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"n\">n_nonzero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">padic_val_nat_of_quot</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"n\">p_prime</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b_nonzero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">@</span><span class=\"n\">cast_dvd</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">@</span><span class=\"n\">padic_val_rat_of_nat</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- I can do this</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The aim is to append these lines to get a <code>u</code> that type-checks, but currently <code>f.symm</code> is of the wrong type (although the error message does not help me work out what that type is):</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">s</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 202279517,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593416190
    },
    {
        "content": "<p>Ah, I found an unhelpful type annotation I can place without breaking things: I can note that either of the <code>1</code>s is a <code>nat</code>. But that doesn't tell me what anything has been coerced to.</p>",
        "id": 202279784,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593416442
    },
    {
        "content": "<p>I don't have long to look at this now, but the fact that you are writing <code>↑</code> by hand seems like a bad idea. Always write <code>(x : T)</code> when you want to make coercions.</p>",
        "id": 202282072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418285
    },
    {
        "content": "<p>What do you want <code>f</code> to say?</p>",
        "id": 202282165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418351
    },
    {
        "content": "<p>When I copy-paste your code I get <code>unknown identifier 'padic_val_nat'</code>.</p>",
        "id": 202282515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593418616
    },
    {
        "content": "<p>Hmm... I don't!</p>",
        "id": 202282579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418663
    },
    {
        "content": "<p>Oops, I needed to restart Lean after updating.</p>",
        "id": 202282663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593418711
    },
    {
        "content": "<p>Now I can ask \"What do you want <code>f</code> to say?\".</p>",
        "id": 202282737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593418766
    },
    {
        "content": "<p>So if you replace the last line with</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_sub</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 202282831,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418821
    },
    {
        "content": "<p>you at least get a manageable error message</p>",
        "id": 202282840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418828
    },
    {
        "content": "<p>But at least I can finish the proof: <code>exact_mod_cast e</code>.</p>",
        "id": 202282845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593418832
    },
    {
        "content": "<p>:-)</p>",
        "id": 202282861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418844
    },
    {
        "content": "<p>I would advise trusting in Patrick's answer, but if you want to dig deeper you'll have to work out why there are two different ways the coercion is happening. :-(</p>",
        "id": 202282992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418935
    },
    {
        "content": "<p>The unsolved goal from my last line is <code>coe_base = nat.cast_coe</code>, ... which isn't a good sign!</p>",
        "id": 202283005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593418956
    },
    {
        "content": "<p>I did a bit of cleanup, but now I should work instead:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">padics</span><span class=\"bp\">.</span><span class=\"n\">padic_norm</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cast_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_dvd</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_nonzero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n_dvd</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">n_nonzero</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"n\">n_nonzero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">cast_dvd_char_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span> <span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_dvd</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cast_dvd</span> <span class=\"n\">n_dvd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">padic_val_nat_of_quot</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"n\">p_prime</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b_nonzero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_zero</span> <span class=\"n\">p_prime</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span> <span class=\"n\">p_prime</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- I can do this</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202284230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593419918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20between.20nat.20and.20rat/near/202282072\">said</a>:</p>\n<blockquote>\n<p>I don't have long to look at this now, but the fact that you are writing <code>↑</code> by hand seems like a bad idea. Always write <code>(x : T)</code> when you want to make coercions.</p>\n</blockquote>\n<p>Ah OK, thanks - I was essentially copy-pasting out of the goal window at that point; just wanted to construct terms that I could <code>rw</code> by to make progress</p>",
        "id": 202298665,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593431402
    },
    {
        "content": "<p>Thanks again all, I will stare harder at these examples</p>",
        "id": 202298749,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1593431474
    },
    {
        "content": "<p>I often find myself deleting arrows which I've cut and pasted from goal windows</p>",
        "id": 202299403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593431962
    }
]