[
    {
        "content": "<p>Can anyone explain why this times out? Using <code>#eval</code> instead of <code>#reduce</code> works just fine.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">logish_rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">logish</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">logish</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_self</span><span class=\"o\">,</span> <span class=\"c1\">-- The problem is related to this somehow</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"c1\">--apply nat.succ_pos,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"c1\">--apply lt_add_one,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">logish</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">is_well_order</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">logish_rec</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">logish</span> <span class=\"mi\">1</span> <span class=\"c1\">-- (deterministic) timeout</span>\n</code></pre></div>",
        "id": 204159614,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594945370
    },
    {
        "content": "<p>to an approximation, <code>reduce</code> only uses definitional equality to the computation, but <code>eval</code> replaces some of that with smart algorithms</p>",
        "id": 204159703,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594945448
    },
    {
        "content": "<p>yeah, though I expected <code>logish 1</code> to be definitionally equal to <code>1</code> with no problems.</p>",
        "id": 204159763,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594945526
    },
    {
        "content": "<p>see e.g. this for a smaller example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"mi\">100</span> <span class=\"bp\">*</span> <span class=\"mi\">555</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">100</span> <span class=\"bp\">*</span> <span class=\"mi\">555</span>\n</code></pre></div>",
        "id": 204159768,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594945538
    },
    {
        "content": "<p>oh i didn't really read what you wrote at all; let me try to give a more relevant answer</p>",
        "id": 204159777,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594945562
    },
    {
        "content": "<p>i'm not sure what you expect <code>reduce</code> to <em>do</em> with those sorries</p>",
        "id": 204159826,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594945572
    },
    {
        "content": "<p>It's not the sorries that are the problem, I only put them there to rule out problems related to those lemmas</p>",
        "id": 204159856,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594945609
    },
    {
        "content": "<p>Replacing <code>nat.div_lt_self</code> with <code>sorry</code> eliminates the timeout, which is why it must be something to do with that lemma</p>",
        "id": 204159882,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594945652
    },
    {
        "content": "<p>(although it still doesn't reduce all the way to 1)</p>",
        "id": 204159933,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594945696
    },
    {
        "content": "<p>I first started investigating this when I had a goal of the form <code>1 ≤ logish 2</code>, and <code>change 1 ≤ 2</code> failed, even though (in my mind) <code>logish 2</code> seems definitionally equal to <code>2</code></p>",
        "id": 204160160,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594945948
    },
    {
        "content": "<p>can you prove <code>logish 2 = 2</code> at all?</p>",
        "id": 204160350,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594946167
    },
    {
        "content": "<p>I don't know how, but I suppose it must be possible.</p>",
        "id": 204160822,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594946687
    },
    {
        "content": "<p>I got <code>logish 1 = 1</code> though.</p>",
        "id": 204160839,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594946708
    },
    {
        "content": "<p>If you can't prove it by <code>rfl</code> then they're not defeq according to Lean.</p>",
        "id": 204160845,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594946726
    },
    {
        "content": "<p>Good point. I had to <code>rw well_founded.fix_eq</code> to prove <code>logish 1 = 1</code></p>",
        "id": 204160936,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1594946833
    },
    {
        "content": "<p>Lean's implemented defeq differs from the theoretical version when it comes to well founded recursion. We try not to unfold proofs because they haven't been written with that in mind (and it's also kind of useless), but <code>acc.rec</code> iota reduction requires it</p>",
        "id": 204163849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594950637
    },
    {
        "content": "<p>I think I investigated a problem similar to this a while ago and found that <code>propext</code> was being used somewhere in a proof in order to use <code>rw</code> on an iff. This axiom blocked the reduction of the proof to <code>rfl</code> even though you can prove it by a suitable sequence like <code>rfl.trans $ rfl.trans rfl</code> with carefully chosen intermediate terms</p>",
        "id": 204163953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594950823
    },
    {
        "content": "<p>I starred that post since it was so cool! <a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/196855763\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/196855763</a></p>",
        "id": 204166694,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594955308
    }
]