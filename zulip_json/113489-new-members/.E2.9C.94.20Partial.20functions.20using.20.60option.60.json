[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 274108392,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646389246
    },
    {
        "content": "<p>One last question about this: If I want to work without tactics, I think I would end up with something along those lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comp_part</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">op</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">op</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span> <span class=\"bp\">↔</span>  <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.so</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">op.rec</span>\n    <span class=\"n\">β</span>\n    <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.so</span> <span class=\"n\">y'</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"n\">y'</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.so</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,})</span>\n    <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">op.no</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,})</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>where obviously I cheated in the end, but the outer structure should look like this.<br>\nIs there a way to have the same structure using pattern matching? The big problem is: if I match first on <code>f x</code>, I then want to further match on the equality between <code>f x</code> and my just-obtained match for <code>f x</code>, and I don't know if lean supports that. (<a href=\"https://agda.readthedocs.io/en/v2.6.2.1/language/with-abstraction.html#with-abstraction-equality\">In agda</a>)</p>",
        "id": 274115023,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646393080
    },
    {
        "content": "<p>Are you looking for something like <a href=\"https://proofassistants.stackexchange.com/a/529/347\">https://proofassistants.stackexchange.com/a/529/347</a>?</p>",
        "id": 279916489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650705218
    }
]