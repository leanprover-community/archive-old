[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Slow.20simp/near/201376596\">said</a>:</p>\n<blockquote>\n<p>then there's an idiom which you can do instead: you run <code>simp</code>, see the new goal, and then write <code>suffices : &lt;new goal&gt;, by simpa using this</code></p>\n</blockquote>\n<p>Kevin, note this idiom is so common that you can abbreviate <code>by simpa using this</code> to <code>by simpa</code>.</p>",
        "id": 201414762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592585298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> the point of this is that instead of just letting <code>simp</code> change the goal to something you can't quite control, you say \"simp, change the goal to this\" and then let it do it; that way, changes in the behaviour of simp are less likely to break your proof.</p>",
        "id": 201415672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592585776
    },
    {
        "content": "<p>We could have <code>tidy?</code> produce <code>simp only ...</code> scripts. The right solution to this would be to provide a non-interactive version of <code>squeeze_simp</code> that returns a list of names directly, and then an outer interactive layer that takes care of producing a trace message. From what I remember, it didn't look trivial to refactor it like this, but of course it just can't be that hard.</p>",
        "id": 201470169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592645577
    },
    {
        "content": "<p>If someone wants to do that refactor of <code>squeeze_simp</code> I'll promise to do the corresponding improvement to <code>tidy</code>. :-)</p>",
        "id": 201470172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592645604
    },
    {
        "content": "<p>(Deleted)</p>",
        "id": 201477415,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1592659147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Slow.20simp/near/201377569\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_of_images_eq_image_of_prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">t</span>\n  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hgc</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hfa</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hgc</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>When you got this proof with <code>tidy</code> did you write the rintros by hand or did <code>tidy</code> write them for you? It does not write it for me but instead it writes <code>intro</code> and then <code>cases</code>!</p>",
        "id": 201620703,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592839856
    },
    {
        "content": "<p>I did not make this proof with tidy, I wrote it by hand.</p>",
        "id": 201620758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592839883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Slow.20simp/near/201620758\">said</a>:</p>\n<blockquote>\n<p>I did not make this proof with tidy, I wrote it by hand.</p>\n</blockquote>\n<p>Ok thanks I got it wrong then!</p>",
        "id": 201620803,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592839905
    },
    {
        "content": "<p>The tidy auto-generated proof has all the <code>work_on_goal</code> stuff in</p>",
        "id": 201620842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592839922
    },
    {
        "content": "<p>You can write <code>rintro?</code> I think, to get Lean to suggest what you want the line to be.</p>",
        "id": 201620927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592839953
    },
    {
        "content": "<p>Oh that's interesting, the suggestion doesn't compile. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> the <code>rfl</code> is too optimistic in <code>rintro?</code> here. The issue is that the term of type <code>f a = (b, d).fst</code> doesn't want to be <code>rfl</code> despite the fact that it would fine if the RHS were <code>dsimp</code>ed first.</p>",
        "id": 201621593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592840225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Slow.20simp/near/201373243\">said</a>:</p>\n<blockquote>\n<p>The reason that mathlib is written in heiroglyphics is precisely because they want all proofs to compile as fast as possible.</p>\n</blockquote>\n<p>If only</p>",
        "id": 201622934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592840794
    },
    {
        "content": "<p>I didn't write the <code>?</code> mode for <code>rintro</code>, do I'm not too sure how it decided what to propose. We should raise an issue about the bad suggestion.</p>",
        "id": 201673428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592868531
    },
    {
        "content": "<p>You could add some more examples to <a href=\"https://github.com/leanprover-community/mathlib/issues/2794\">#2794</a>.</p>",
        "id": 201676389,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592871292
    }
]