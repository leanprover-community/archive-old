[
    {
        "content": "<p>I currently have the following two lines of code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">instance</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"n\">A</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span> <span class=\"p\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">has_coe</span> <span class=\"p\">(</span><span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">set</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"err\">⟨</span><span class=\"n\">λ</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">carrier</span><span class=\"err\">⟩</span>\n<span class=\"n\">instance</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"n\">A</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span> <span class=\"p\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"p\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">is_subring</span> <span class=\"n\">S</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">subring</span>\n</pre></div>\n\n\n<p>returning the error message</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  is_subring S\nterm\n  S\nhas type\n  subalgebra R A : Type ?\nbut is expected to have type\n  set ?m_1 : Type ?\n</pre></div>\n\n\n<p>am I misunderstanding how the coercion should be working?</p>",
        "id": 192294908,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585591444
    },
    {
        "content": "<p>It doesn't know yet what <code>S</code> is supposed to be a subring of</p>",
        "id": 192297123,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585592457
    },
    {
        "content": "<p>How can I make it explicit? In the definition of <code>is_subring</code> the ambient ring is not explicit, i.e. it looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">is_subring</span> <span class=\"p\">{</span><span class=\"n\">R</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span> <span class=\"p\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"p\">:</span> <span class=\"nb\">set</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"n\">extends</span> <span class=\"n\">is_add_subgroup</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">is_submonoid</span> <span class=\"n\">S</span> <span class=\"p\">:</span> <span class=\"n\">Prop</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 192297574,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585592663
    },
    {
        "content": "<p>I guess you could claim it should be able to infer it from the definition <code>S.subring</code>, but I think the coercion will not fire soon enough for that to work.</p>",
        "id": 192297596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585592676
    },
    {
        "content": "<p>Maybe <code>is_subring (S : set A)</code> for example.</p>",
        "id": 192297609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585592685
    },
    {
        "content": "<p>I see. That fixes it!</p>",
        "id": 192297646,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585592708
    },
    {
        "content": "<p>Just because you have written this first <code>has_coe</code> instance doesn't mean Lean has to use it.</p>",
        "id": 192297649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585592711
    },
    {
        "content": "<p>is there a simple explanation of what Lean is doing for why it doesn't \"use\" it?</p>",
        "id": 192297719,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585592756
    },
    {
        "content": "<p>It isn't doing anything because it has no way to know what the <code>?m_1</code> is in the error message.</p>",
        "id": 192297798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585592788
    },
    {
        "content": "<p>For example, someone else could add an <code>instance : has_coe (subalgebra R A) (set R)</code> (never mind that it would be nonsense) and then what do you expect to happen?</p>",
        "id": 192298090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585592918
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 192298176,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585592957
    },
    {
        "content": "<p>I guess this is related to my previous question: my code </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">instance</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"n\">A</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span> <span class=\"p\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">]</span> <span class=\"p\">:</span>\n<span class=\"n\">integral_domain</span> <span class=\"p\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">subring</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"p\">((</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nb\">set</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>is giving the error message </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nR : Type ?,\n_inst_1 : comm_ring R,\nA : Type ?,\n_inst_2 : integral_domain A,\n_inst_3 : algebra R A\n⊢ is_subring (has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A)))\n</pre></div>\n\n\n<p>while the code from the previous question is supposed to be giving the instance of <code>(integral_closure R A) : subalgebra R A</code> as a subring of <code>A</code>. How can I \"remind\" Lean that this does have an instance of <code>is_subring</code>?</p>",
        "id": 192307993,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585597611
    },
    {
        "content": "<p>also it seems from the error message that Lean isn't actually using the coercion I set up, rather I guess it's using the sequence of coercions <code>subalgebra R A → submodule R A → set A</code>. Is there a possibility that this is related to my issue?</p>",
        "id": 192308616,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585597854
    },
    {
        "content": "<p>What happens if you remove your coercion and then attempt to coerce anyway?</p>",
        "id": 192310017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598490
    },
    {
        "content": "<p>If it still works then you should trust that the people who set it up knew what they were doing and don't add the coercion</p>",
        "id": 192310055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598521
    },
    {
        "content": "<p>It has the same error message</p>",
        "id": 192310129,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585598541
    },
    {
        "content": "<p>Sure</p>",
        "id": 192310150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598548
    },
    {
        "content": "<p>But I'm asking just about whether the coercion succeeds</p>",
        "id": 192310183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598561
    },
    {
        "content": "<p>From subalgebra to set</p>",
        "id": 192310220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598584
    },
    {
        "content": "<p>My guess is that you shouldn't be creating that instance but this is not the answer to your problem</p>",
        "id": 192310229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598587
    },
    {
        "content": "<p>You should also see if the second instance is solved by <code>by apply_instance</code></p>",
        "id": 192310517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598714
    },
    {
        "content": "<p>It would surprise me if there were important coercions which were not there already</p>",
        "id": 192310560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598745
    },
    {
        "content": "<p>The inbuilt coercions might have subtle priorities set, for example</p>",
        "id": 192310692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598814
    },
    {
        "content": "<p>And what happens if you just remove the explicit coercion to set A in your error? Mathlib might have solved all your problems already</p>",
        "id": 192310843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598907
    },
    {
        "content": "<p>I'll get to a computer and stop guessing in a sec</p>",
        "id": 192310877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585598922
    },
    {
        "content": "<p>I'm still working out the imports :-(</p>",
        "id": 192312274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585599705
    },
    {
        "content": "<p>I think we should have a bot which just flags all posted code which doesn't actually compile and either kicks the poster or suggests imports and opens which will fix it.</p>",
        "id": 192312357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585599746
    },
    {
        "content": "<p>Right. This succeeds</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>so don't add a new one.</p>",
        "id": 192312557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585599856
    },
    {
        "content": "<p>sorry for the delay. These imports should be the necessary ones:</p>\n<div class=\"codehilite\"><pre><span></span>import ring_theory.integral_closure\nimport ring_theory.localization\nimport ring_theory.algebra\nimport ring_theory.subring\n</pre></div>",
        "id": 192312565,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585599862
    },
    {
        "content": "<p>A more realistic idea would be to try someone who could write a web page explaining what is a MWE, so that we can paste a link to that web page each it's needed.</p>",
        "id": 192312594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585599884
    },
    {
        "content": "<p>So do we not have bundled subrings?</p>",
        "id": 192312660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585599933
    },
    {
        "content": "<p>Where are my undergraduates?</p>",
        "id": 192312698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585599955
    },
    {
        "content": "<p>This is the only definition I see on the subring document:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">is_subring</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"p\">:</span> <span class=\"nb\">set</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"n\">extends</span> <span class=\"n\">is_add_subgroup</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">is_submonoid</span> <span class=\"n\">S</span> <span class=\"p\">:</span> <span class=\"n\">Prop</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 192312851,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600029
    },
    {
        "content": "<p>Yeah, I think we don't have bundled subrings. Shame. I bet it would be easier with those.</p>",
        "id": 192312872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600046
    },
    {
        "content": "<p>And this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 192312910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600069
    },
    {
        "content": "<p>Unfortunate :/</p>",
        "id": 192313294,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600247
    },
    {
        "content": "<p>Did you see the Artin-Tate thread?</p>",
        "id": 192313473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600328
    },
    {
        "content": "<p>No I didn't</p>",
        "id": 192313493,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600338
    },
    {
        "content": "<p>This whole algebra, subring thing drives me nuts</p>",
        "id": 192313498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600339
    },
    {
        "content": "<p>I saw a conversation about difficulties with \"triangles\" of rings in commutative algebra, not sure if that's the thread you mean but yeah it seems to be an annoying issue</p>",
        "id": 192313627,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600425
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">integral_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 192313781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600494
    },
    {
        "content": "<p>i.e. I just feed it the things it can't find</p>",
        "id": 192313805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600513
    },
    {
        "content": "<p>Nice! what purpose does the <code>@</code> character serve?</p>",
        "id": 192313872,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600560
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"n\">A</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p><code>@</code> means \"forget <code>{}</code> and <code>[]</code> and just tell me every input\"</p>",
        "id": 192313936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600583
    },
    {
        "content": "<p>Ohh that makes sense</p>",
        "id": 192314063,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600659
    },
    {
        "content": "<p>It's exactly the same problem as before. You want to prove <code>integral_domain (integral_closure R A)</code> and you want to use <code>subring.domain</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">domain</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">subring.domain :</span>\n<span class=\"cm\">  Π {D : Type u_1} [_inst_3 : integral_domain D] (S : set D) [_inst_4 : is_subring S], integral_domain ↥S</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 192314085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600676
    },
    {
        "content": "<p>Lean asks you for <code>S</code> which is in your case some kind of coercion of <code>integral_closure R A</code> to a set, i.e. to a term of type <code>set D</code> for some <code>D</code>, but Lean doesn't have a clue what <code>D</code> is.</p>",
        "id": 192314240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600751
    },
    {
        "content": "<p>If it knew it had to find a coercion to <code>set A</code> it could do it (indeed, my second solution is doing just that).</p>",
        "id": 192314311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600793
    },
    {
        "content": "<p>But until you tell it it's looking for a coercion to <code>set ?m_1</code> and it can't find one for some reason.</p>",
        "id": 192314494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585600876
    },
    {
        "content": "<p>I see. so by using @ you are allowed to enter the first implicit argument A which I guess basically tells Lean that we are meant to consider <code>integral_closure R A</code> as an element of <code>set A</code>, then it finds the previously defined coercion to do this on its own</p>",
        "id": 192314665,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585600950
    },
    {
        "content": "<p>Exactly. And using my new toy</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>we can see from the debugging output that indeed the unifier is failing to find the coercion when the metavariable is in place:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [1]: subalgebra R A =?= set ?m_1\n[type_context.is_def_eq_detail] unfold right: set\n[type_context.is_def_eq_detail] [2]: subalgebra R A =?= ?m_1 → Prop\n[type_context.is_def_eq_detail] on failure: subalgebra R A =?= ?m_1 → Prop\n[type_context.is_def_eq] subalgebra R A =?= set ?m_1 ... failed  (approximate mode)\n</pre></div>",
        "id": 192314997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585601136
    },
    {
        "content": "<p>Is that failing to find a coercion or simply checking that the two sides are not defeq (without a coercion)?</p>",
        "id": 192315262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585601274
    },
    {
        "content": "<p>Oh man, looking at this debugging output it even seems to get so close!</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [7]: has_coe_to_sort.coe (has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A))) =?= {x // x ∈ ?m_2}\n[type_context.is_def_eq_detail] [8]: (λ (s : set A), {x // x ∈ s}) (has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A))) =?= {x // x ∈ ?m_2}\n[type_context.is_def_eq_detail] after whnf_core: {x // x ∈ has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A))} =?= {x // x ∈ ?m_2}\n[type_context.is_def_eq_detail] process_assignment ?m_1 := A\n[type_context.is_def_eq_detail] assign: ?m_1 := A\n[type_context.is_def_eq_detail] [9]: x ∈ has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A)) =?= x ∈ ?m_2\n[type_context.is_def_eq_detail] process_assignment ?m_1 := has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A))\n[type_context.is_def_eq_detail] [10]: set ?m_1 =?= set A\n[type_context.is_def_eq_detail] assign: ?m_1 := has_coe_t_aux.coe (set A) (has_coe_t_aux.coe (submodule R A) (integral_closure R A))\n[type_context.is_def_eq] integral_domain ↥(integral_closure R A) =?= integral_domain ↥?m_2 ... success  (approximate mode)\n</pre></div>",
        "id": 192315378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585601316
    },
    {
        "content": "<p>I don't know how to read these logs, I only started looking at them today.</p>",
        "id": 192315520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585601394
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/b8c86cfd46b5253c4888979078ba1f00\" title=\"https://gist.github.com/kbuzzard/b8c86cfd46b5253c4888979078ba1f00\">https://gist.github.com/kbuzzard/b8c86cfd46b5253c4888979078ba1f00</a></p>",
        "id": 192315730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585601473
    }
]