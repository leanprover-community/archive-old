[
    {
        "content": "<p>Aloha,</p>\n<p>How do I use a structure? I want to formalize the fundamental theorem of projective geometry, which says</p>\n<blockquote>\n<p>if Π is a Desarguean projective plane, then it's coordinatized by a (certain) division ring D.</p>\n</blockquote>\n<p>I see <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/configuration.html#configuration.projective_plane\">mathlib has a \"structure\" <code>configuration.projective_plane</code></a>, which I guess is what I want to use (right?) . How do I?</p>",
        "id": 315027661,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1670650895
    },
    {
        "content": "<p>I think you can start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">configuration.desarguean</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- fill this in</span>\n</code></pre></div>",
        "id": 315028437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670651672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> What is the definition of Desarguean that you would like to use?</p>",
        "id": 315028444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670651691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20a.20structure/near/315028444\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> What is the definition of Desarguean that you would like to use?</p>\n</blockquote>\n<p>Π is Desarguea iff whenever a set of 6 points are perspective from a point, then they are perspective from a line.</p>",
        "id": 315028746,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1670651974
    },
    {
        "content": "<p>Is it not spelt Desargue<em>si</em>an?</p>",
        "id": 315033337,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670656211
    },
    {
        "content": "<p>It's called arguesian plane or desarguesian plane.</p>",
        "id": 315090869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670684335
    },
    {
        "content": "<p>I got my spelling from a document written by old gentleman who's an expert in the field. That suggests his spelling might've been in use once upon a time.</p>",
        "id": 315111398,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1670695227
    },
    {
        "content": "<p>I bet the old gentleman wasn't Desargues. Probably Desargues wanted to keep his name intact :-) I was once taken to task on mathoverflow for referring to a collection of Frobenius elements as Frobenii.</p>",
        "id": 315111514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670695291
    },
    {
        "content": "<p>Do the eponyms Ptolemic and/or Linnaean keep the names intact more that Desarguean, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ?</p>",
        "id": 315112331,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1670695785
    },
    {
        "content": "<p>Apparently <em>Frobenii</em> is in common use? <a href=\"https://stacks.math.columbia.edu/tag/0CC6\">stacks#0CC6</a> <a href=\"https://stacks.math.columbia.edu/tag/03SL\">stacks#03SL</a></p>",
        "id": 315122193,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670702443
    },
    {
        "content": "<p>Following  <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s suggestion, I'm getting error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n\n<span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">39</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">L</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">39</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>Please let me know why and how I could figure this out myself. Happy New Year!</p>",
        "id": 318907644,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672608613
    },
    {
        "content": "<p>You need to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>because of the universe restriction present in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/configuration.projective_plane\">docs#configuration.projective_plane</a>.</p>\n<p>Maybe we should allow <code>P</code> and <code>L</code> to be in different universes? Mathlib seems usually maximally universe polymorphic, and a lot of restrictions have been removed from category theory, for example.</p>",
        "id": 318908050,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672608951
    },
    {
        "content": "<p>I don't really see why we would need the points and lines to live in the same universe.</p>",
        "id": 318938825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672639971
    },
    {
        "content": "<p>My vague memory is that it caused some headaches somewhere, but upon inspection it seems that I might be wrong.</p>",
        "id": 318940978,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1672641841
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18039\">#18039</a></p>",
        "id": 318941822,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1672642551
    },
    {
        "content": "<p>What is <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> 's  code doing? Specifically, what is <code>has_mem</code> doing? And having used that code, how do I, for example, talk about the line containing two points, <code>p q : P</code>?</p>",
        "id": 319112244,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672706733
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mem\">docs#has_mem</a> contains the data of a relation between two types (the type of points <code>P</code> and the type of lines <code>L</code> here), which you can use <code>∈</code> to refer to (e.g. <code>p ∈ l</code> means <code>p</code> lies on <code>l</code>).</p>",
        "id": 319112554,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672706999
    },
    {
        "content": "<p>Apparently <code>L</code> can't be inferred from <code>p</code> and <code>q</code>, which may or may not be a problem ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> the line through p and q -/</span>\n</code></pre></div>",
        "id": 319112988,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672707328
    },
    {
        "content": "<p>Oh it's <code>mem</code> for <code>mem</code>bership!! <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 319113042,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672707363
    },
    {
        "content": "<p>Why doesn't this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">q₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≠</span> <span class=\"n\">q₂</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n  <span class=\"n\">mk_point</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>The first error message is <code>unknown identifier 'mk_line'</code>.</p>",
        "id": 319114820,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672708897
    },
    {
        "content": "<p>You didn't <code>open configuration.projective_plane</code> as I did.</p>",
        "id": 319115433,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672709444
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319115435,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1672709447
    },
    {
        "content": "<p>Also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/configuration.projective_plane.mk_point\">docs#configuration.projective_plane.mk_point</a> takes the two lines as implicit arguments, so you need to write <code>mk_point h</code> where <code>h : mk_line h₀ ≠ mk_line h₁</code>.</p>",
        "id": 319115533,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672709550
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319128616,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672722484
    },
    {
        "content": "<p>I'm still getting an error when trying to add the hypothesis that the lines from <code>mk_line</code> aren't equal. Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.configuration</span>\n<span class=\"kn\">open</span> <span class=\"n\">configuration.projective_plane</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">configuration.projective_plane</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">centrally_perspective</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">q₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≠</span> <span class=\"n\">q₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">mk_line</span> <span class=\"n\">h₀</span> <span class=\"bp\">≠</span> <span class=\"n\">mk_line</span> <span class=\"n\">h₁</span><span class=\"o\">):</span>\n<span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n  <span class=\"n\">mk_point</span> <span class=\"n\">h₃</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">p₀</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₀</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₀</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≠</span> <span class=\"n\">q₁</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≠</span> <span class=\"n\">q₂</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">Lean</span>\n</code></pre></div>",
        "id": 319131729,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1672725403
    },
    {
        "content": "<p>You need to add type annotations like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">mk_line</span> <span class=\"n\">h₀</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)):</span>\n<span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n  <span class=\"n\">mk_point</span> <span class=\"n\">h₃</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mk_line</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>because Lean can't infer <code>L</code>. I wonder whether we should bundle <code>P</code> and <code>L</code> together ...</p>",
        "id": 319151286,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672736966
    }
]