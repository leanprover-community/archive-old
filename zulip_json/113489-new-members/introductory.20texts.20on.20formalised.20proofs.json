[
    {
        "content": "<p>Hi Lean community,</p>\n<p>I came here via the natural numbers game - which is awesome! many thanks to the creators.<br>\nThe idea of lettings computers check proofs is very appealing, but only if one understands how the computer does it.<br>\nCan you recommend some literature to get me started on that understanding? Or a list of topics that one would need to know to understand how lean works?<br>\nMy background is a BSc in math.</p>",
        "id": 233147916,
        "sender_full_name": "Nikolai",
        "timestamp": 1617610143
    },
    {
        "content": "<p>Did you check out Theorem Proving In Lean? <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 233148198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617610428
    },
    {
        "content": "<p>I did not. Thanks</p>",
        "id": 233148789,
        "sender_full_name": "Nikolai",
        "timestamp": 1617610956
    },
    {
        "content": "<p>Thanks for the suggestion again. I skimmed it and it looks interesting but is not what I was looking for. <br>\nWhat I'm interested in is more: how proof verification is actually implemented (â‰ˆ how is Lean or something similar implemented)?<br>\nAnd the philosophical side: it seems like we would be replacing trust in humans ability to verify specific mathematical proofs for humans ability to verify the proof-checker (lean). Why is that better? How reliably can the verification be verified and what's the formal system for doing so?</p>",
        "id": 233974734,
        "sender_full_name": "Nikolai",
        "timestamp": 1618077779
    },
    {
        "content": "<p>Lean is a lot more than just a proof checker; there is no need to verify tactics or the elaborator, only the kernel itself</p>",
        "id": 233977969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618080671
    },
    {
        "content": "<p><code>leanchecker</code> is the built-in proof verifier, but there are other implementations of programs that verify lean proofs</p>",
        "id": 233978023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618080723
    },
    {
        "content": "<p>To your second question, I think it's sort of the same reason why it's more appealing to verify that a function <code>sum</code> computes the sum of its arguments and then trusting the results it produces rather than trying to verify the result every time you call it with new arguments. In terms of the actual verification, if you start with some simple-ish set of rules and only allow the entity doing the proving to move according to the pre-approved rules, then chasing some statements back to the axioms of whatever system you're working in requires a number of steps that humans can't handle even if you assume they won't make stupid mistakes (which they will).</p>",
        "id": 233978133,
        "sender_full_name": "Chris B",
        "timestamp": 1618080826
    },
    {
        "content": "<p>I think metamath has the record for 'simplest implementation of an ITP verifier', <a href=\"https://github.com/david-a-wheeler/mmverify.py/blob/master/mmverify.py\">the Python one</a> is 370 lines.</p>\n<p><a href=\"https://github.com/jrh13/hol-light/\">hol light</a> is another small/mature prover with a <a href=\"https://www.cs.kent.ac.uk/people/staff/sao/documents/itp14.pdf\">paper that seems to address soundness and construction</a></p>\n<p><a href=\"https://github.com/digama0/mm0\">metamath-zero</a> is way down in the nitty gritty of implementation and trust for theorem proving, so it may be of interest. There's a companion paper explaining the theory as well.</p>",
        "id": 233978821,
        "sender_full_name": "Chris B",
        "timestamp": 1618081438
    },
    {
        "content": "<p>In terms of type theory background, I found Nederpelt and Geuvers's <a href=\"https://www.win.tue.nl/~wsinrpn/book_type_theory.htm\">\"Type Theory and Formal Proof\"</a> fairly enlightening, though as an introductory text, it doesn't cover CIC (calculus of inductive constructions, some variant of which is used in Lean's foundations, I believe).</p>",
        "id": 233979753,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618082196
    },
    {
        "content": "<p>Thanks for the all the replies. I guess I have a lot of fun reading to do :D</p>",
        "id": 234206946,
        "sender_full_name": "Nikolai",
        "timestamp": 1618251901
    }
]