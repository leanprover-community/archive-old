[
    {
        "content": "<p>Is there any way to cache information between multiple runs of a tactic? For example, whenever you run <code>library_search</code>, some of the work is specific to the current goal and environment, like looking up every lemma whose head symbol matches the current goal and seeing if it can be applied to the current goal. That work is then redone every time you run <code>library_search</code> until the goal changes. You'd need a way to store and access global or global-ish variables, and a way to flush the cache whenever the imports or the goal changes.</p>",
        "id": 213984128,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603230766
    },
    {
        "content": "<p>someone who knows what they're talking about will likely answer this, my non-functional-programming brain just knows that I think the answer for these languages has you something something state monad'ing, but just grepping finds <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/cache.html\">https://leanprover-community.github.io/mathlib_docs/tactic/cache.html</a> if that helps (it doesn't do what you want but probably it'd need to manipulate persistent state for a goal it looks like so you may be able to steal from its implementation)</p>",
        "id": 213985480,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603231538
    },
    {
        "content": "<p>or <a href=\"https://github.com/leanprover-community/mathlib/blob/f75dbd3/src/tactic/local_cache.lean#L207\">https://github.com/leanprover-community/mathlib/blob/f75dbd3/src/tactic/local_cache.lean#L207</a> looks even more likely to be relevant though it doesn't have a docstring in the docs</p>",
        "id": 213985633,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603231618
    },
    {
        "content": "<p>hmm, its implementation (for the first link) seems to be via things like <code>unfreeze_local_instances</code> that call into c++</p>",
        "id": 213986400,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603232108
    },
    {
        "content": "<p>the second one of those links was introduced in <a href=\"https://github.com/leanprover-community/mathlib/issues/837\">#837</a> and library_search is one of the stated goals there in fact.</p>",
        "id": 213986608,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603232261
    },
    {
        "content": "<p><code>run_once_under_name</code> looks promising. i guess <code>get_env</code> and <code>add_decl</code> let you manipulate data globally</p>",
        "id": 213986639,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603232281
    },
    {
        "content": "<p>There is also the open pr <a href=\"https://github.com/leanprover-community/mathlib/issues/2300\">#2300</a> for caching whole blocks also by Keeley</p>",
        "id": 213986852,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603232422
    },
    {
        "content": "<p>hmm, that PR looks a bit abandoned</p>",
        "id": 213987425,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603232825
    },
    {
        "content": "<p>caching blocks seems like a pretty good idea though</p>",
        "id": 213987440,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603232836
    },
    {
        "content": "<p>I don't think either of Keeley's PR's can solve the problem in general, and in fact I don't think there is any way to do this in pure lean without C++ support, because it requires caching across different runs of the same file, which is much harder. Lean currently treats the entire file as a functional program that it can pause and restart at various points in order to allow the live editing behavior without \"old\" data from previous runs affecting the result, but this makes it much harder for anything a tactic does to store information in any permanent way except through the environment, which is discarded in a new run.</p>",
        "id": 213999306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603243877
    }
]