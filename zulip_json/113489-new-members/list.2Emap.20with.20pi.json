[
    {
        "content": "<p>Hello. I have an issue using dependent function space in conjunction with <code>list.map</code>. Could anyone take a peek?<br>\nIn the following state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span>\n<span class=\"err\">⊢</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">g</span><span class=\"o\">}),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">attach</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span>\n</pre></div>\n\n\n<p>I would like to rewrite <code>g</code> with <code>g'</code>. However, I get \"motive is not type correct\" error.<br>\nI <em>think</em> I understand why this is. Given <code>c.2</code> is supposed to be <code>x ∈ g</code>, I would end up with mismatching types as <code>attach g'</code> would lead to <code>c.2</code> being <code>x ∈ g'</code>.<br>\nHowever, I am not sure how to proceed - I think I need some kind of a congruence that says I can switch <code>map f l</code> for <code>map f' l'</code> if I can show <code>f = f'</code> and <code>l = l'</code>, but \"modulo types\".<br>\nYou can reconstruct the goal (and the error) with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">g</span><span class=\"o\">}),</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">attach</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"c1\">-- motive not type correct</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147355746,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1541748471
    },
    {
        "content": "<p>Is <code>g</code> a variable? If so, <code>subst g</code> is probably the easiest thing</p>",
        "id": 147356172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541749190
    },
    {
        "content": "<p>I am not sure I know what variable means in this context, but <code>g</code> is a list computed by a function, so I think it is not. The equivalence <code>h : g = g'</code> basically expands <code>bar x y</code> to <code>x :: bar x' y</code>. I've tried <code>subst expand_bar</code>, but the \"given expression is not a local constant\".</p>",
        "id": 147356421,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1541749650
    },
    {
        "content": "<p>Definitely not a variable, come to think of it, <code>h : g = g'</code> is just <code>h : expand_bar a b = a :: expand_bar a' b</code>. And I don't think I can <code>subst expand_bar</code>.</p>",
        "id": 147356591,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1541749977
    },
    {
        "content": "<p>I think you need to unsimplify your example then. This is generally speaking a complicated problem with nonuniform solutions, I would have to know more about the problem to say how to proceed</p>",
        "id": 147357025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541750709
    },
    {
        "content": "<p>I will give it a try, thanks. I did a lot of simplifying, may have lost something along the way :).</p>",
        "id": 147357098,
        "sender_full_name": "Gavid Liebnich",
        "timestamp": 1541750848
    },
    {
        "content": "<p>The <code>subst</code> tactic (instead of <code>rw</code>) may help you</p>",
        "id": 147357269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541751086
    },
    {
        "content": "<p>I don't know if this works in your actual example, but you could try reverting everything which depends on <code>g</code>:</p>\n<div class=\"codehilite\"><pre><span></span>example (h : g = g&#39;) : @foo α g f = [] :=\nbegin\n  unfold foo,\n  revert f,\n  rw h,\n  intro f\nend\n</pre></div>",
        "id": 147436293,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541862505
    },
    {
        "content": "<p>Note that this <code>rw</code> now also rewrites the type of <code>f</code>.</p>",
        "id": 147436358,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541862620
    }
]