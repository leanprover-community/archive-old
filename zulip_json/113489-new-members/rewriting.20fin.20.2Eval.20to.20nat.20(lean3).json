[
    {
        "content": "<p>hi! I have a goal in which I want to rewrite <code>(10 : fin 256).val</code> to <code>10</code>: <a href=\"/user_uploads/3121/GtK3R63V0b8UTPjh7QRR4BVu/image.png\">image.png</a> <br>\nI don't understand why <code>simp</code> doesn't do this. if I understand <code>fin</code> correctly, <code>10 : fin 256</code> is really a pair of a nat <code>10</code> and a proof that 10 &lt; 256 right?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GtK3R63V0b8UTPjh7QRR4BVu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GtK3R63V0b8UTPjh7QRR4BVu/image.png\"></a></div>",
        "id": 289047479,
        "sender_full_name": "Lynn",
        "timestamp": 1657380505
    },
    {
        "content": "<p>this actually works somehow but I feel like there must be a better way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">97</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">97</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">87</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">87</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 289047570,
        "sender_full_name": "Lynn",
        "timestamp": 1657380616
    },
    {
        "content": "<p>These things are not just equal, they're definitionally equal, so you can probably use the <code>change</code> tactic if your goal is sufficently small. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- or just don't change it at all</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289047925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657381077
    },
    {
        "content": "<p>I see, thank you!  so, here is my proof, let's see if I can simplify the proof a lot using <code>change</code> …</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nibble</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span>\n    <span class=\"k\">then</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">char.to_nat</span> <span class=\"sc\">'0'</span>\n    <span class=\"k\">else</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">char.to_nat</span> <span class=\"sc\">'a'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nibble_alt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"mi\">48</span> <span class=\"k\">else</span> <span class=\"mi\">87</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nibble_eq</span> <span class=\"o\">:</span> <span class=\"n\">nibble</span> <span class=\"bp\">=</span> <span class=\"n\">nibble_alt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nibble</span><span class=\"o\">,</span> <span class=\"n\">nibble_alt</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">48</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"sc\">'a'</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"mi\">97</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.eq_iff_veq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.add_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.add_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.sub_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mod_add_mod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">97</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">97</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">87</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">87</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.mod_eq_sub_mod</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.sub_add_comm</span><span class=\"o\">,</span> <span class=\"n\">transitivity</span> <span class=\"mi\">256</span> <span class=\"bp\">+</span> <span class=\"mi\">97</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289048430,
        "sender_full_name": "Lynn",
        "timestamp": 1657381592
    },
    {
        "content": "<p>comments/suggestions are very welcome, it feels like it's 3x as long as it should be <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span>  it always feels like maybe I am not utilising the full power of Lean</p>",
        "id": 289048466,
        "sender_full_name": "Lynn",
        "timestamp": 1657381655
    },
    {
        "content": "<p>Can dec_trivial solve it?</p>",
        "id": 289048523,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657381687
    },
    {
        "content": "<p>wow! it can! what is this amazing tactic?</p>",
        "id": 289048541,
        "sender_full_name": "Lynn",
        "timestamp": 1657381735
    },
    {
        "content": "<p>It's lean just enumerating all the possible values of fin</p>",
        "id": 289048615,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657381804
    },
    {
        "content": "<p>wow, cool, I was silently wondering the whole time if it could do that</p>",
        "id": 289048640,
        "sender_full_name": "Lynn",
        "timestamp": 1657381837
    },
    {
        "content": "<p>(the more there is to enumerate, the slower it gets, of course, so that's something to look out for)</p>",
        "id": 289048722,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657381928
    },
    {
        "content": "<p>hmm… maybe I should browse more tactics, instead of browsing mathlib docs for the next super-low-level nat/fin lemma that gets me a little bit closer to the goal, which is what I spent most of my time doing when writing proofs in Lean</p>",
        "id": 289049036,
        "sender_full_name": "Lynn",
        "timestamp": 1657382382
    },
    {
        "content": "<p>Both can be useful, certainly</p>",
        "id": 289049137,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657382439
    },
    {
        "content": "<p>I just now learned that there is a plugin(?) to make norm_num work with <code>fin</code>, that should be super helpful too</p>",
        "id": 289049154,
        "sender_full_name": "Lynn",
        "timestamp": 1657382445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Is it within scope to have <code>norm_fin</code> be able to handle the coercion to <code>nat</code>? For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_fin</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289049793,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657383190
    }
]