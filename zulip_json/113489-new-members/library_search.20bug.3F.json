[
    {
        "content": "<p>I'm running the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_lemma2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"n\">epos</span> <span class=\"n\">ele1</span> <span class=\"n\">xlt</span> <span class=\"n\">ylt</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"k\">by</span> <span class=\"n\">library_search</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">The</span>  <span class=\"bp\">`</span><span class=\"n\">library_search</span><span class=\"bp\">`</span> <span class=\"n\">suggests</span><span class=\"o\">:</span>  <span class=\"bp\">`</span><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">y</span><span class=\"bp\">`.</span> <span class=\"n\">However</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"n\">I</span> <span class=\"n\">click</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">just</span> <span class=\"n\">produces</span> <span class=\"bp\">`</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">y</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">without</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">exact</span><span class=\"bp\">`.</span> <span class=\"n\">It&#39;s</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">big</span> <span class=\"n\">problem</span> <span class=\"n\">but</span> <span class=\"n\">I</span> <span class=\"n\">presume</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">bug</span><span class=\"err\">?</span>\n</code></pre></div>",
        "id": 204333849,
        "sender_full_name": "Chris M",
        "timestamp": 1595136016
    },
    {
        "content": "<p>Yeah, VS Code isn't smart enough to realize that the <code>have</code> is followed by a comma, which requires something in tactic mode to follow it, rather than something in term mode. (If you use <code>:=</code> it would work). I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> added this feature (where the replacement tries to avoid putting in <code>exact</code>).</p>",
        "id": 204333991,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595136420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> Please remove the <code>by</code> before <code>library_search</code>.</p>",
        "id": 204334085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595136616
    },
    {
        "content": "<p>I didn't realize we could use <code>by</code> in tactic mode!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">by</span> <span class=\"k\">by</span> <span class=\"k\">by</span> <span class=\"k\">by</span> <span class=\"k\">by</span> <span class=\"k\">by</span> <span class=\"k\">by</span> <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204334342,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595137302
    },
    {
        "content": "<p>This is more of a VSCode \"Try this:\" bug than library_search.</p>",
        "id": 204335884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595140816
    },
    {
        "content": "<p>I think the correct fix is indeed: don't use unnecessary <code>by</code>s in tactic mode if you want the \"Try this:\" feature to work. Automatically detecting unnecessary <code>by</code> sounds hard.</p>",
        "id": 204335887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595140855
    },
    {
        "content": "<p>Worked, thanks!</p>",
        "id": 204510758,
        "sender_full_name": "Chris M",
        "timestamp": 1595304337
    }
]