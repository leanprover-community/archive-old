[
    {
        "content": "<p>Excuse the weird title. I'm trying to prove that a finset of subsets of a finset must contain an element of largest size, without relying on classical choice:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_empty_has_max_size</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">powerset</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">card</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Here's my attempt so far, which seems to have taken me down a strange path:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_one_eq</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">card_eq_one</span> <span class=\"n\">α</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">card</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_congr</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists_congr</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">singleton_val</span><span class=\"o\">,</span> <span class=\"n\">val_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">powerset_empty</span> <span class=\"o\">:</span> <span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">subset_singleton</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"err\">∅</span><span class=\"o\">:</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n<span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">not_empty_has_max_size</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">powerset</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">card</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">FPE</span> <span class=\"n\">Fne</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">E</span> <span class=\"kn\">using</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">E</span> <span class=\"n\">ha</span> <span class=\"n\">hE</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">powerset_empty</span><span class=\"o\">,</span> <span class=\"n\">subset_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">FPE</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">FPE</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">contradiction</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∅</span> <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">mem_singleton_self</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_singleton</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hg</span>\n      <span class=\"kn\">end</span><span class=\"o\">)</span>\n    <span class=\"kn\">end</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hh1</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">powerset</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hE</span> <span class=\"n\">hh1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm hoping someone can point me in a smarter direction. Thanks as always!</p>",
        "id": 133904539,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536863805
    },
    {
        "content": "<p>Doesn't every finset of finsets contain an element of largest size, regardless of <code>E</code> and the associated condition?</p>",
        "id": 133904686,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536863962
    },
    {
        "content": "<p>Maybe, I got worried that without having some kind of bound on the size of the finsets I wouldn't be able to prove it without choice.</p>",
        "id": 133904800,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536864087
    },
    {
        "content": "<p>just use finset.map (I'm assuming this exists!) on finset.card to get a finset of nats and then take the max and work your way back?</p>",
        "id": 133905022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536864288
    },
    {
        "content": "<p>A finset is basically a list, and you could write a program that takes a list of lists and returns one of the maximum length, so there should be no trouble proving it constructively.</p>",
        "id": 133905060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536864332
    },
    {
        "content": "<p>Yeah, I was looking for a function on finset which is max after applying a function, but I guess since nat has decidable equality you can use <code>finset.map</code> in this case.</p>",
        "id": 133905178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536864424
    },
    {
        "content": "<p>Sorry, not <code>finset.map</code> but <code>finset.image</code>.</p>",
        "id": 133905214,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536864473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_empty_has_max_size</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">powerset</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">card</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">max_of_ne_empty</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">image_eq_empty</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">card</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_of_max</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">le_max_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133905271,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536864502
    },
    {
        "content": "<p>Wow, thanks!</p>",
        "id": 133905289,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536864530
    },
    {
        "content": "<p>That uses decidable_eq, doesn't it?</p>",
        "id": 133905350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864599
    },
    {
        "content": "<p>rofl</p>",
        "id": 133905394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536864605
    },
    {
        "content": "<p>My suggestion:</p>\n<div class=\"codehilite\"><pre><span></span>import data.finset\n\nsection\nvariables {α : Type*} (r : α → α → Prop) [is_preorder α r]\nlocal infix ` ≼ `:50 := r\n\ntheorem list_zorn : ∀ l : list α, l ≠ [] → ∃ a ∈ l, ∀ b, a ≼ b → b ≼ a := sorry\ntheorem finset_zorn : ∀ s : finset α, s ≠ ∅ → ∃ a ∈ s, ∀ b, a ≼ b → b ≼ a := sorry\n\nend\n</pre></div>",
        "id": 133905407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864617
    },
    {
        "content": "<p>I would have never thought of using finset.image. And yes, decidable_eq is allowed.</p>",
        "id": 133905415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536864627
    },
    {
        "content": "<p>here the relation is <code>card s &lt;= card t</code> on finsets</p>",
        "id": 133905436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864659
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_empty_has_max_size</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">F</span> <span class=\"err\">⊆</span> <span class=\"n\">powerset</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">card</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">max_of_ne_empty</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">image_eq_empty</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">card</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mem_of_max</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">le_max_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n</blockquote>\n<p>what is the role of E in your theorem?</p>",
        "id": 133905447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536864678
    },
    {
        "content": "<p>you can just prove this using the zorn in mathlib</p>",
        "id": 133905450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536864683
    },
    {
        "content": "<p>of course, but this (1) doesn't use nonconstructive axioms and (2) doesn't need the chain condition</p>",
        "id": 133905467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864708
    },
    {
        "content": "<p>If E is unnecessary here all the better. In the \"application\", it's the ground set of a matroid.</p>",
        "id": 133905518,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536864736
    },
    {
        "content": "<p><code>decidable_eq nat</code> doesn't use axioms either</p>",
        "id": 133905536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536864758
    },
    {
        "content": "<p>yes, but the theorem can be proven constructively without that assumption</p>",
        "id": 133905569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864803
    },
    {
        "content": "<p>Yeah, the max/min stuff should be on multisets.</p>",
        "id": 133905579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536864816
    },
    {
        "content": "<p>Unfortunately, here max/min don't work directly since it's not a poset</p>",
        "id": 133905596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864844
    },
    {
        "content": "<p>you can have zorn on a set (i.e. type) S as long as you have a choice function on P(P(S))\\{{}}, right</p>",
        "id": 133905633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536864846
    },
    {
        "content": "<p>yes, but we don't have that here and I claim it's still provable</p>",
        "id": 133905662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864871
    },
    {
        "content": "<p>sure</p>",
        "id": 133905694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536864907
    },
    {
        "content": "<p>I mean we should just define <code>max</code> for a set in the same style as <code>prod</code>, in terms of <code>max</code> on multiset, and nat is already a decidable linear whatever so there would be no problem there.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">prod</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</pre></div>",
        "id": 133905726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536864957
    },
    {
        "content": "<p>what is this about <code>nat</code>? I don't see it in the question</p>",
        "id": 133905781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536864991
    },
    {
        "content": "<p><code>nat</code> is the codomain of <code>finset.card</code> (I assume)</p>",
        "id": 133905798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536865015
    },
    {
        "content": "<p>sure but that doesn't really matter; we are doing the choosing on <code>finset A</code> which is not decidable (unless you assume so)</p>",
        "id": 133905829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536865050
    },
    {
        "content": "<p>all that decidability of nat gives you is decidability of the relation <code>≼</code> given by <code>s ≼ t ↔ card s ≤ card t</code></p>",
        "id": 133905887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536865087
    },
    {
        "content": "<p>I guess Kevin ran away from all this decidable nonsense :P</p>",
        "id": 133905902,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536865123
    },
    {
        "content": "<p>I'm a bit confused.<br>\nAll I am saying is that the original thing should be a direct conclusion of some lemma about <code>max</code> of a <code>multiset nat</code>, applied to <code>F.1.map finset.card</code>.</p>",
        "id": 133905936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536865165
    },
    {
        "content": "<p>That lemma being the analogue for multisets of <code>finset.max_of_ne_empty</code> and <code>finset.le_max_of_mem</code></p>",
        "id": 133906034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536865232
    },
    {
        "content": "<p>But I guess maybe <code>decidable_linear_order</code> is stronger than <code>decidable_eq</code> anyways, so it doesn't really matter.</p>",
        "id": 133906232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536865426
    },
    {
        "content": "<p>the point is this isn't a question about decidable linear orders, but decidable preorders. Lack of uniqueness of the maximum makes it hard to define a function like <code>max</code> directly</p>",
        "id": 133906443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536865625
    },
    {
        "content": "<p>You mean something like a \"pre-total order\"?</p>",
        "id": 133906534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536865702
    },
    {
        "content": "<p><code>is_total_preorder</code> exists in core btw</p>",
        "id": 133906805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536866000
    },
    {
        "content": "<p>but totality is not needed</p>",
        "id": 133906808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536866007
    },
    {
        "content": "<p>Finding the maximum value of a function on a finite set is a pretty standard thing to do. Of course there might not be a unique element of the set which maximizes the function, but the maximum value of the function is still well-defined. And often you only need some statement about the existence of a maximizing element.<br>\nIt's not very obvious how you're supposed to get this from only the ability to take the maximum element of a finite set (in a totally ordered type).</p>",
        "id": 133906861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536866047
    },
    {
        "content": "<p>like kenny and chris have shown, you can take the image of the finset and get the maximum</p>",
        "id": 133906917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536866152
    },
    {
        "content": "<p>unless you care about  constructivity and then you have to prove it from scratch</p>",
        "id": 133906965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536866171
    },
    {
        "content": "<p>that works in any total preorder</p>",
        "id": 133906991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536866226
    },
    {
        "content": "<p>in a partial order, I don't see any easy way to get it except zorn's lemma</p>",
        "id": 133907005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536866249
    },
    {
        "content": "<blockquote>\n<p>like kenny and chris have shown, you can take the image of the finset and get the maximum</p>\n</blockquote>\n<p>I don't think I did anything</p>",
        "id": 133907255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536866554
    },
    {
        "content": "<p>I care a little bit about constructivity, but maybe I'll see how far I can get with Chris's solution first.</p>",
        "id": 133907303,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536866632
    },
    {
        "content": "<p>oops, I didn't see that you just quoted chris's solution</p>",
        "id": 133909339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536868590
    }
]