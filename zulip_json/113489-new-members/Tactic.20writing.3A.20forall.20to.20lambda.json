[
    {
        "content": "<p>Continuing from earlier, I've been learning more about writing tactics. This time my problem is harder to describe, please bear with me.</p>\n<p>Background:<br>\nI'm now trying to write a tactic (a basic imitation of mathlib's wlog) for a project a friend and I are working on (a basic continuation of the natural numbers game). I've called it wlog_le, and it should take two naturals m n and give two goals, the first is to show that the original goal is symmetric in m and n, and the second is to show that the original goal holds under the assumption that m &lt;= n. Here's my code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- The theorem to be applied (proof isn&#39;t relevant)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">wlogle</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hsymm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"o\">(</span><span class=\"n\">parse</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"o\">(</span><span class=\"n\">texpr</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"c1\">-- Convert a goal relating two variables into two goals</span>\n<span class=\"c1\">-- One showing symmetry of the goal,</span>\n<span class=\"c1\">-- One with hypothesis m ≤ n showing the original goal.</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">wlog_le</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hsymm</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"n\">ident</span><span class=\"o\">)):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">em</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">en</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">symm_name</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">hsymm</span><span class=\"o\">,</span>\n  <span class=\"n\">le_name</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">hle</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">hsymm</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">symm_name</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">hle</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">le_name</span><span class=\"o\">,</span>\n  <span class=\"n\">revert_lst</span> <span class=\"o\">[</span><span class=\"n\">en</span><span class=\"o\">,</span> <span class=\"n\">em</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- We fail to apply wlogle, because it cannot unify</span>\n  <span class=\"c1\">-- Need to convert a goal of the form ∀ m n : nat, p m n</span>\n  <span class=\"c1\">-- into λ m n : nat, p m n</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">wlogle</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">intro_lst</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">symm</span><span class=\"o\">],</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">intro_lst</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le</span><span class=\"o\">],</span>\n  <span class=\"n\">swap</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- As an example of something we could prove</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_cancel_</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hmnz</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- The tactic needs to turn the reverted ∀ into a λ</span>\n  <span class=\"n\">wlog_le</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">hs</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I've proven the general result as a theorem (the proof I've omitted here) and now I want to make its application into a more friendly tactic wlog_le, that modifies goals and assumptions.</p>\n<p>Problem:<br>\nThis tactic fails. The wlogle theorem needs to be supplied with a <code>p : nat -&gt; nat -&gt; Prop</code>, to unify (in more basic cases it can manage). How can I convert a goal of the form <code>∀ m n : p m n</code> into a function <code>λ m n: p m n</code> using tactics?</p>\n<p>Sorry for how complicated this is, I couldn't think of a more basic case which brought about the same problem.</p>",
        "id": 192327685,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585608951
    },
    {
        "content": "<p>\"How can I convert a goal of type forall... Into a function lambda...\" sounds to me like the question \"how can I convert a type P into a term of type P?\" and I guess that's impossible in general</p>",
        "id": 192329379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585610441
    },
    {
        "content": "<p>Hmm, well, I'm not trying to convert it, I just need to form a lambda expression that is similar to the forall, if that makes sense. You might be right though.</p>",
        "id": 192331368,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585612247
    },
    {
        "content": "<p>you could match on <code>expr.pi a (expr.pi b body)</code> and produce<code> expr.lam a (expr.lam b body)</code> (there are more arguments than that, this is just illustrative)</p>",
        "id": 192337555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585618545
    },
    {
        "content": "<p>I think I tried something similar. For example, putting <code>`(expr.pi %%a %%b %%c %%d) ← target,</code> above my applyc, gives me \"match failed\".</p>",
        "id": 192338454,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585619631
    },
    {
        "content": "<p>don't quote it</p>",
        "id": 192338522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585619720
    },
    {
        "content": "<p><code>expr.pi</code> is literally a constructor of <code>expr</code>, so you should just write <code>expr.pi a b c d ← target,</code></p>",
        "id": 192338531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585619750
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 192338605,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585619836
    },
    {
        "content": "<p>Yep I've sorted it after some struggle</p>",
        "id": 192339527,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585621107
    },
    {
        "content": "<p>Thank you again Kevin and Mario</p>",
        "id": 192339533,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1585621125
    }
]