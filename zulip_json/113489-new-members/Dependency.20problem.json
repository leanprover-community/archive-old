[
    {
        "content": "<p>I made a <a href=\"https://github.com/leanprover-community/mathlib/tree/normed-spaces-edits\">new branch</a>, modifying <code>normed_space.basic</code> (see discussions <a href=\"https://github.com/leanprover-community/mathlib/pull/2660#discussion_r423522431\">1</a> <a href=\"#narrow/stream/113489-new-members/topic/.22variables.22.20command/near/197581417\">2</a>), which broke <code>normed_space.operator_norm</code>.  I can't figure out why, and wondered if someone would mind diagnosing it for me.</p>",
        "id": 197741946,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589570812
    },
    {
        "content": "<p>The first error is, \"term <code>f</code> has type <code>𝕜 →ₗ[𝕜] E : Type (max u_1 u_2)</code> but is expected to have type <code>?m_2 →ₗ[?m_1] ?m_3 : Type (max ? ?)</code>\".</p>",
        "id": 197741950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589570817
    },
    {
        "content": "<p>That looks ugly )-; [The error, I mean]</p>",
        "id": 197742221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589570946
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n    <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk_continuous</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_7</span> <span class=\"err\">?</span><span class=\"n\">m_8</span> <span class=\"err\">?</span><span class=\"n\">m_9</span> <span class=\"err\">?</span><span class=\"n\">m_10</span> <span class=\"err\">?</span><span class=\"n\">m_11</span> <span class=\"n\">f</span>\n  <span class=\"n\">term</span>\n    <span class=\"n\">f</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_normed_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">to_vector_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_field</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">to_module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_6</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field</span><span class=\"bp\">.</span><span class=\"n\">to_normed_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_7</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_8</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_9</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">to_module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"err\">?</span><span class=\"n\">m_7</span> <span class=\"err\">?</span><span class=\"n\">m_8</span> <span class=\"err\">?</span><span class=\"n\">m_10</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">to_module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_7</span> <span class=\"err\">?</span><span class=\"n\">m_9</span> <span class=\"err\">?</span><span class=\"n\">m_11</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Is it a diamond?</p>",
        "id": 197742444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589571073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> (Btw, I think these questions could go in \"general\")<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/0f96de153ffb79f9c3cb147f6c206e67cc09aa49#diff-fc5c89c1d4551a23597885d48b6ed4e5R705\">https://github.com/leanprover-community/mathlib/commit/0f96de153ffb79f9c3cb147f6c206e67cc09aa49#diff-fc5c89c1d4551a23597885d48b6ed4e5R705</a><br>\nthis looks like an instance loop</p>",
        "id": 197742474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571091
    },
    {
        "content": "<p>It should probably be a <code>def</code> instead of an <code>instance</code></p>",
        "id": 197742498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571104
    },
    {
        "content": "<p>I'll try that!  Of <code>of_normed_module</code> or <code>to_normed_module</code>, which should be the <code>instance</code> and which the <code>def</code>?</p>",
        "id": 197742708,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571210
    },
    {
        "content": "<p>The one that makes your life easier when defining a new normed_space</p>",
        "id": 197742828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571253
    },
    {
        "content": "<p>So <code>of_</code></p>",
        "id": 197742845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571261
    },
    {
        "content": "<p>I think <code>of_</code> should be the <code>def</code></p>",
        "id": 197742931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589571316
    },
    {
        "content": "<p>I'm confused, are these two classes the same?</p>",
        "id": 197742990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589571347
    },
    {
        "content": "<p>If at some point someone encounters a <code>normed_module</code> over a field, they will have to work a little bit to make it a <code>normed_space</code>. But the rest of the time, we want lemmas about <code>normed_module</code>s to automatically apply to <code>normed_space</code>s.</p>",
        "id": 197743063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571367
    },
    {
        "content": "<p>There is a typo in my documentation.</p>",
        "id": 197743064,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571368
    },
    {
        "content": "<p>or does this equivalence only hold under certain conditions</p>",
        "id": 197743071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589571373
    },
    {
        "content": "<p>It should read, \"Over a normed field, <code>∥c • x∥ ≤ ∥c∥ ∥x∥</code> automatically implies <code>∥c • x∥ = ∥c∥ ∥x∥</code>\"</p>",
        "id": 197743102,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571394
    },
    {
        "content": "<p>The equivalence holds when the ring is a field</p>",
        "id": 197743125,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571410
    },
    {
        "content": "<p>In general, if <code>A -&gt; B</code> and <code>C -&gt; B -&gt; A</code> then <code>B</code> should be the parent and <code>A -&gt; B</code> an instance</p>",
        "id": 197743149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589571427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> We could also decide to do away with <code>normed_module</code> and just define <code>normed_space</code> over general rings, right?</p>",
        "id": 197743212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571455
    },
    {
        "content": "<p><code>normed_module</code> is brand new, I just made it.</p>",
        "id": 197743239,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571476
    },
    {
        "content": "<p>(Was going to open a discussion topic later.)</p>",
        "id": 197743283,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571484
    },
    {
        "content": "<p>And then this:<br>\n<span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependency.20problem/near/197743102\">said</a>:</p>\n<blockquote>\n<p>It should read, \"Over a normed field, <code>∥c • x∥ ≤ ∥c∥ ∥x∥</code> automatically implies <code>∥c • x∥ = ∥c∥ ∥x∥</code>\"</p>\n</blockquote>\n<p>just becomes a lemma about normed spaces, if the base ring happens to be a field.</p>",
        "id": 197743293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependency.20problem/near/197743239\">said</a>:</p>\n<blockquote>\n<p><code>normed_module</code> is brand new, I just made it.</p>\n</blockquote>\n<p>Sure, so I should have said: change the def or <code>normed_space</code> to work for general rings.</p>",
        "id": 197743328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571515
    },
    {
        "content": "<p>I think <code>normed_space</code> means <code>normed_vector_space</code></p>",
        "id": 197743361,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571537
    },
    {
        "content": "<p>We decided to have both <code>module</code> and <code>vector_space</code> in mathlib, but it creates extra technical nuissance. The only reason we keep it is psychological/pedagogical.</p>",
        "id": 197743393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571559
    },
    {
        "content": "<p>You don't want a library without <code>vector_space</code>, but renaming <code>module</code> to <code>vector_space</code> also seems dishonest.</p>",
        "id": 197743511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571615
    },
    {
        "content": "<p>I think consistency is good -- what is done in the general category should also be done in the normed category, etc.</p>",
        "id": 197743515,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571618
    },
    {
        "content": "<p>But in the normed category, you won't have beginning users that don't know that modules and vector spaces are just the same thing.</p>",
        "id": 197743571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571653
    },
    {
        "content": "<p>Unifying the two concepts would allow you to get rid of this instance loops altogether. But keeping it for the sake of consistency isn't a big problem either. Upgrading a <code>normed_module</code> over a field to a <code>normed_space</code> is just a one-liner in a proof.</p>",
        "id": 197743795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571788
    },
    {
        "content": "<p>I'm not sure it would be wise to go down the path of Banach modules, Hilbert modules, ...</p>",
        "id": 197743799,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571792
    },
    {
        "content": "<p>Sobolev modules</p>",
        "id": 197743819,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571804
    },
    {
        "content": "<p>The module of measures of bounded variation</p>",
        "id": 197743841,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589571824
    },
    {
        "content": "<p>I think <code>vector_space</code> is just an abbreviation for <code>module</code>. We could have <code>normed_module</code>, and then <code>normed_space</code> as an abbreviation of <code>normed_module</code>.</p>",
        "id": 197745445,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589572775
    },
    {
        "content": "<p>But \"just an abbreviation\" is not good enough for type class inference.</p>",
        "id": 197745554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572816
    },
    {
        "content": "<p>I wish the pretty printer could do type class inference <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 197745594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572847
    },
    {
        "content": "<p>Let me add that I made up these \"normed modules\" this morning because I had some instances in mind</p>",
        "id": 197745658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589572875
    },
    {
        "content": "<p>Then everything would be a module, but print as <code>vector_space</code> if the pretty printer can infer that the base ring is a field.</p>",
        "id": 197745660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572876
    },
    {
        "content": "<p>(I was going to start a thread discussing it, but here will do.)</p>",
        "id": 197745694,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589572901
    },
    {
        "content": "<p>Notably:  if E is a normed k-space then C(a, E) is a C(a, k)-module</p>",
        "id": 197745806,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589572952
    },
    {
        "content": "<p>In that case, one has <code>norm_smul_le</code> rather than <code>norm_smul</code>, i.e., <code>∥c • x∥ ≤ ∥c∥ ∥x∥</code> without equality</p>",
        "id": 197746052,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589573091
    },
    {
        "content": "<p>So if <code>normed_module</code> becomes the basic object, it should still be with the <code>norm_smul_le</code> axiom rather than the <code>norm_smul</code> axiom, which is only equivalent over fields.</p>",
        "id": 197746141,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589573150
    },
    {
        "content": "<p>Sure. And <code>norm_smul</code> would be a lemma with the assumption <code>[normed_field k]</code></p>",
        "id": 197746284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573221
    },
    {
        "content": "<p>Hmm.  Won't this break all the existing instances of normed spaces in the library?  They are all constructed by checking the axiom <code>norm_smul</code>.</p>",
        "id": 197749012,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589574732
    },
    {
        "content": "<p>Yup, that's right. So all their constructions should be prepended with <code>normed_space.mk'</code> or some other name that provided a second constructor.<br>\n<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> You might be shocked if you read the defn of metric_space in mathlib. It hardcodes a metric + a topology + proof that they are compatible.<br>\nBut of course nobody creates metric spaces like that, so there is a 2nd constructor that only asks for a metric.</p>",
        "id": 197775735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589602559
    },
    {
        "content": "<p>The reason for this design is: in the case of the product metric/topology, you don't use the 2nd constructor, but fill in all fields by hand. And now the product metric induces a topology that is definitionally the product topology! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 197775809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589602623
    },
    {
        "content": "<blockquote>\n<p>so there is a 2nd constructor that only asks for a metric.</p>\n</blockquote>\n<p>AFAIR, <code>metric_space</code> is done by using <code>:= </code> and <code>. </code> types, not by a second constructor.</p>",
        "id": 197784778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589618681
    }
]