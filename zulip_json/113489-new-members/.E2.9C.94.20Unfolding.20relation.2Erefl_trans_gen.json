[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20relation.2Erefl_trans_gen/near/272091651\">said</a>:</p>\n<blockquote>\n<p>I tried <code>destruct h</code> but it gave me some scary things. Is the command <code>destruct</code> worth using in practice at all?</p>\n</blockquote>\n<p>I kind of forgot this tactic even existed. I don't think I've used it in years; the equivalent of Coq <code>destruct</code> is lean <code>cases</code></p>",
        "id": 272096320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645006474
    },
    {
        "content": "<p>I should have looked farther into the file. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen.cases_head\">docs#relation.refl_trans_gen.cases_head</a> looks rather relevant.</p>",
        "id": 272096331,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645006481
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 272096416,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645006535
    },
    {
        "content": "<p>Looking at the docs it appears <code>destruct</code> is a low level version of <code>cases</code> that you should almost never need to use</p>",
        "id": 272096518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645006581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20relation.2Erefl_trans_gen/near/272092839\">said</a>:</p>\n<blockquote>\n<p>OK, here is a silly example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rr</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">relation.refl_trans_gen</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rr</span> <span class=\"mi\">3</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">20</span><span class=\"o\">,</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nontriv</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rr</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">rr</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>In the concrete example above, can I provide the \"witness\" (20, 10, 3) by something more idiomatic than repeatedly writing <code>exact</code> please?</p>",
        "id": 272096549,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645006603
    },
    {
        "content": "<p>the answer is usually <code>refine</code></p>",
        "id": 272096590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645006631
    },
    {
        "content": "<p>The only thing I've ever used <code>destruct</code> for is for this automated destruction loop proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272096639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645006666
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272096775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645006732
    },
    {
        "content": "<p>Or another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">and4</span> <span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">P3</span> <span class=\"n\">P4</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">P4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">and4</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272096917,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645006815
    },
    {
        "content": "<p>hm, I would do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"bp\">∧</span><span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272096963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645006852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20relation.2Erefl_trans_gen/near/272096639\">said</a>:</p>\n<blockquote>\n<p>The only thing I've ever used <code>destruct</code> for is for this automated destruction loop proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Would your code be useful in a tactic combinator for proving propositional tautologies?</p>",
        "id": 272097134,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645006959
    },
    {
        "content": "<p>such a thing would probably be implemented directly rather than using a script like that</p>",
        "id": 272097190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645006992
    },
    {
        "content": "<p>these kinds of scripts are mostly useful for ad hoc proof bashing where everything is specific to the goal</p>",
        "id": 272097291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007044
    },
    {
        "content": "<p>It was more for fun. This is easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 272097299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645007048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20relation.2Erefl_trans_gen/near/272096590\">said</a>:</p>\n<blockquote>\n<p>the answer is usually <code>refine</code></p>\n</blockquote>\n<p>Is it idiomatic to use <code>refine</code> despite of not using underscores in my example and similar?</p>",
        "id": 272097322,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645007067
    },
    {
        "content": "<p>?</p>",
        "id": 272097338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007084
    },
    {
        "content": "<p><code>refine</code> applications usually use an underscore somewhere</p>",
        "id": 272097361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007095
    },
    {
        "content": "<p>otherwise you would just use <code>exact</code></p>",
        "id": 272097386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20relation.2Erefl_trans_gen/near/272097386\">said</a>:</p>\n<blockquote>\n<p>otherwise you would just use <code>exact</code></p>\n</blockquote>\n<p>Is it then better to use <code>refine</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rr</span> <span class=\"mi\">3</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">20</span><span class=\"o\">,</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Or is there something even better?</p>",
        "id": 272097452,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645007148
    },
    {
        "content": "<p>I couldn't get <code>refine</code> to work here. This worked, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rr</span> <span class=\"mi\">3</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272097538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645007193
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rr</span> <span class=\"mi\">3</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 272097613,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645007253
    },
    {
        "content": "<p>the constructors of this type are a bit annoying to name, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rr</span> <span class=\"mi\">3</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">relation.refl_trans_gen.head</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">relation.refl_trans_gen.head</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">_</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">relation.refl_trans_gen.single</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272097701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfolding.20relation.2Erefl_trans_gen/near/272096331\">said</a>:</p>\n<blockquote>\n<p>I should have looked farther into the file. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen.cases_head\">docs#relation.refl_trans_gen.cases_head</a> looks rather relevant.</p>\n</blockquote>\n<p>Is there an easier way how to write my proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unpack_transitive_closure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relation.refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nontriv</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">relation.refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">relation.refl_trans_gen.cases_head</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nontriv</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272097903,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645007439
    },
    {
        "content": "<p>gosh, I don't want to think how to make this use of <code>use</code> to keep working. I don't think it was designed for multiple constructor inductives</p>",
        "id": 272097906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007440
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">unpack_transitive_closure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relation.refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nontriv</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">relation.refl_trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">relation.refl_trans_gen.cases_head</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">nontriv</span>\n</code></pre></div>",
        "id": 272098060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645007526
    },
    {
        "content": "<p>Thank you very much for all your help!!</p>",
        "id": 272098985,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645008130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 272098997,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645008137
    }
]