[
    {
        "content": "<p>Is there something somewhat between <code>list.sum</code> and <code>finset.sum</code> - I'm looking to work with a sum over <code>[0..k]</code> (and ideally induct on k). I know I could use <code>list.sum (list.map f) (range n)</code>, but since <code>finset.sum</code> takes an extra mapping parameter I was wondering if there's a version of <code>list.sum</code> with this extra parameter as well</p>",
        "id": 182550286,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575462053
    },
    {
        "content": "<p>Why would <code>finset.sum</code> not work?</p>",
        "id": 182550332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575462120
    },
    {
        "content": "<p>Oh. That's a good point. Thanks!</p>",
        "id": 182550401,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575462176
    },
    {
        "content": "<p>When working with finite sums I have used <code>list.sum</code> and <code>list.range</code>. However it seems that <code>finset</code> is the preferred way (e.g., <a href=\"https://github.com/leanprover-community/mathlib/blob/9607bbf808b80ccdb7ce1254a5b4b28950fc180e/src/algebra/big_operators.lean#L737\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/9607bbf808b80ccdb7ce1254a5b4b28950fc180e/src/algebra/big_operators.lean#L737\">Gauss' summation formula in mathlib</a>). What are the advantages of <code>finset</code> over <code>list</code> for this use?</p>",
        "id": 182610445,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1575501034
    },
    {
        "content": "<p>One advantage is the use-case I mentioned above, where we want to sum a function over a range, rather than just sum over a set (without the indirection of <code>map</code>)</p>",
        "id": 182610577,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575501136
    },
    {
        "content": "<p>I think the main advantage is just that <code>finset.sum</code> has a lot more theorems proved about it. I don't know (but would like to know) whether it would be possible / desirable to prove them all for <code>multiset.sum</code> and <code>list.sum</code>.</p>",
        "id": 182611240,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575501770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> that makes sense. However I now have a very basic question. It took me a long time to find <code>finset.sum</code> (by trial and error <code>import data.fintype</code> worked; in particular <code>import data.finset</code> is not enough). Is there a better way than trial and error?</p>",
        "id": 182612701,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1575503118
    },
    {
        "content": "<p>Good question. For some reason all those definitions are in <code>algebra.big_operators</code>. I'm not sure of the best way of finding that out if you're new.</p>",
        "id": 182613210,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575503525
    },
    {
        "content": "<p>The reason <code>list.sum</code> doesn't have a function argument is exactly because you can apply <code>list.map</code> first. You can't do this for <code>finset.sum</code> because mapping a finset to another finset will cause duplicates to be removed</p>",
        "id": 182614241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575504386
    },
    {
        "content": "<p><code>algebra.big_operators</code> is kind of in a weird position because it is the dependency sup of <code>finset</code> and the <code>algebra</code> collection. We don't really want either of those to import the other, but then stuff depending on both gets orphaned</p>",
        "id": 182614542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575504673
    },
    {
        "content": "<p>From a practical perspective I suspect that <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>'s point (\"a lot more theorems\") makes <code>finset.sum</code> the natural choice. However, philosophically is <code>list.sum</code> closer to what mathematicians mean? For example it would not be particularly strange to see something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>3</mn></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1,2,2,3,3,3} f(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">2</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">2</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">3</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">3</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> in a mathematical paper. (Perhaps I should take a look at those theorems and see whether they apply to <code>list</code>.)</p>",
        "id": 182614936,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1575505054
    },
    {
        "content": "<blockquote>\n<p>For example it would not be particularly strange to see something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>3</mn></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1,2,2,3,3,3} f(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">2</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">2</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">3</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">3</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> in a mathematical paper.</p>\n</blockquote>\n<p>I would find that very strange, but perhaps that's another matter.</p>",
        "id": 182615216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575505343
    },
    {
        "content": "<p>I would think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>2</mn><mi>f</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>3</mn><mi>f</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(1)+2f(2)+3f(3)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> would be more likely</p>",
        "id": 182615261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575505383
    },
    {
        "content": "<p>I agree that <code>list.sum</code> feels closer to what's intended, which was the idea behind the original question here</p>",
        "id": 182616270,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575506425
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> that makes sense. However I now have a very basic question. It took me a long time to find <code>finset.sum</code> (by trial and error <code>import data.fintype</code> worked; in particular <code>import data.finset</code> is not enough). Is there a better way than trial and error?</p>\n</blockquote>\n<p>Yes. Ask here! Alternatively go to VS Code and search for <code>finset.sum</code>. If you get only a few results, you are not searching in mathlib and you have to fiddle with your settings.</p>",
        "id": 182619739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575509871
    },
    {
        "content": "<p>I get 306 results for <code>finset.sum</code>. \"Search mathlib\" is off by default for new VS Code projects for me. It's a real pain. I've had to show several Imperial UG's how to search mathlib because the magnifying glass sometimes doesn't work by default.</p>",
        "id": 182619819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575509966
    },
    {
        "content": "<p>Is there a recommended option for \"search mathib\"? I've been adding <code>./_target/deps/**/*.*</code> to the \"files to include\" box to have this work, would be nice if there was an option for the vscode extension?</p>",
        "id": 182619939,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1575510117
    },
    {
        "content": "<p>If your code has mathlib as a dependency then there's a sometimes very well-hidden cog with a small minus sign on it (\"exclude settings files\").</p>",
        "id": 182620012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575510173
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/LQN0Od_WhvvoqqhX4lYUw5BZ/search.png\" target=\"_blank\" title=\"search.png\">search.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LQN0Od_WhvvoqqhX4lYUw5BZ/search.png\" target=\"_blank\" title=\"search.png\"><img src=\"/user_uploads/3121/LQN0Od_WhvvoqqhX4lYUw5BZ/search.png\"></a></div>",
        "id": 182620051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575510231
    },
    {
        "content": "<p>If it's light blue (i.e. on), click on it. Then VS Code search will look in mathlib.</p>",
        "id": 182620106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575510252
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 182620329,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1575510501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s suggestion worked (namely, clicking on the little cog at the right end of the \"files to include\" box) -- thanks! For other beginners (like me), after you click on a search result you may need to wait a while until Lean parses the file (completely?) to get \"go to definition\" to work. Once it does, it works great (and, indeed, took me to <code>big_operators.lean</code>).</p>",
        "id": 182622738,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1575513949
    },
    {
        "content": "<blockquote>\n<p>I get 306 results for <code>finset.sum</code>. \"Search mathlib\" is off by default for new VS Code projects for me. It's a real pain. I've had to show several Imperial UG's how to search mathlib because the magnifying glass sometimes doesn't work by default.</p>\n</blockquote>\n<p>:O there's a search in VS code!</p>",
        "id": 182650970,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575545644
    }
]