[
    {
        "content": "<p>Hi ! stupid question, but is there a way to rewrite some equality that I defined using let? Say I have a goal <code>foo = blah</code>, and I do <code>let bar := blah</code> before_hand, how do I rewrite my goal as <code>foo = bar</code>?</p>",
        "id": 243956148,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624647396
    },
    {
        "content": "<p>I tried to just <code>rw bar</code> but Lean did not like it.</p>",
        "id": 243956202,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624647434
    },
    {
        "content": "<p><code>change</code> would work</p>",
        "id": 243956383,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1624647536
    },
    {
        "content": "<p>I think that <code>set [...] with h</code>, instead of <code>let</code>, will produce a hypothesis <code>h</code> that you can use for <code>rw</code>.</p>",
        "id": 243956433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624647567
    },
    {
        "content": "<p>Alternatively, if you use <code>set bar := blah with hbar,</code>, you can use <code>rw ‚Üêhbar,</code></p>",
        "id": 243956434,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1624647568
    },
    {
        "content": "<p>Nice! So <code>set</code> works just like <code>let</code>? In practice, is it better to avoid <code>let</code>?</p>",
        "id": 243956825,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624647765
    },
    {
        "content": "<p>I personally tend to avoid <code>let</code>, but I don't think that's mathlib policy, at least</p>",
        "id": 243957107,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1624647918
    },
    {
        "content": "<p>I also tend to avoid <code>let</code> because of the aforementioned finickyness, but also <code>simp_rw</code> and <code>simp only</code> work to rewrite them</p>",
        "id": 243959217,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624649003
    },
    {
        "content": "<p>Thank you! I have a last silly question: is there a canonical syntax for turning an hypothesis of the form <code>f = g</code> where f and g are functions into an hypothesis of the form <code>f x = g x</code> (given some <code>x</code>in the domain of course)?</p>",
        "id": 243960068,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624649430
    },
    {
        "content": "<p><code>congr_fun</code>?</p>",
        "id": 243960131,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624649465
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/congr_fun\">docs#congr_fun</a>)</p>",
        "id": 243960232,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624649520
    },
    {
        "content": "<p>So something like <code>have neq_hyp := congr_fun ...</code>?</p>",
        "id": 243960605,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624649718
    },
    {
        "content": "<p>It works but I was just wondering if there was a way to make it directly act on my <code>f = g</code> hypothesis rather than adding a new one.</p>",
        "id": 243960679,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624649757
    },
    {
        "content": "<p>I mean, if it's a goal state you can just <code>rw</code> it at the goal</p>",
        "id": 243960749,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624649777
    },
    {
        "content": "<p>you could also do <code>rw function.funext_iff at h, specialize h x</code>, but at that point you may just write <code>replace h := congr_fun h x</code></p>",
        "id": 243960843,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624649831
    },
    {
        "content": "<p>Oh, I was not aware of the <code>replace</code>syntax! Looks like what I want!</p>",
        "id": 243961003,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1624649895
    }
]