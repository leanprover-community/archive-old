[
    {
        "content": "<p>I've been scratching my head over this simple problem :<br>\nIf I define a structure and give it a coercion to functions, like this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_fun</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_fun</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">fct</span><span class=\"o\">,</span> <span class=\"n\">fct.f</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n\n<p>and then define an instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">:</span> <span class=\"n\">my_fun</span> <span class=\"o\">:={</span>\n    <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>I don't know what the right way to unfold these definitions is in a proof. In the interactive prover, when I try to prove this lemma :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">square</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I can use <code>unfold_coes</code> to turn <code>⇑square 1</code> into <code>square.f 1</code>, but I don't know how to unfold this function. If I try <code>unfold square.f</code> I get <code>square.f does not have equational lemmas nor is a projection</code>.</p>\n<p>I have found that if I use <code>rw square</code>, after unfolding the function coercion, the goal becomes <code>⇑{f := λ (u : ℝ), u * u} 1 = 1</code>, which I also don't know how to unfold, but <code>simp</code> will complete the goal. Even more confusingly, if I don't unfold the function coercion and directly use rw square on <code>⇑square 1</code>, the goal becomes identical <code>⇑{f := λ (u : ℝ), u * u} 1 = 1</code>, but now <code>simp</code> doesn't close it!</p>",
        "id": 212819203,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1602247116
    },
    {
        "content": "<p>Have you tried <code>unfold my_fun.f</code>?</p>",
        "id": 212819401,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602247214
    },
    {
        "content": "<p>Actually <code>unfold square my_fun.f</code></p>",
        "id": 212819422,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602247232
    },
    {
        "content": "<p>Thank you! This works, and <code>unfold my_fun.f square</code> does the same thing. I would have thought <code>square.f</code> was short for <code>my_fun.f square</code> but apparently not.</p>",
        "id": 212819737,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1602247397
    },
    {
        "content": "<p>It is short for <code>my_fun.f square</code>, but you can only unfold declarations, and <code>my_fun.f square</code> is not a declaration, but both <code>square</code> and <code>my_Fun.f</code> are</p>",
        "id": 212819879,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602247458
    },
    {
        "content": "<p>I see where you misunderstood <code>unfold my_fun.f square</code> is like <code>unfold my_fun.f, unfold square</code>.</p>",
        "id": 212820257,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602247671
    },
    {
        "content": "<p><code>my_fun.f</code> and <code>Square</code> are two separate arguments,</p>",
        "id": 212820399,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602247725
    },
    {
        "content": "<p>How should I think of the expression <code>square.f</code> ? Its type is <code>ℝ → ℝ</code> but <code>unfold</code> gives an error.</p>",
        "id": 212821391,
        "sender_full_name": "Jean-Philippe Burelle",
        "timestamp": 1602248222
    },
    {
        "content": "<p>I'm not sure what to add to what Chris already wrote. <code>unfold</code> doesn't take an expression, it takes a list of constants.</p>",
        "id": 212822181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602248566
    }
]