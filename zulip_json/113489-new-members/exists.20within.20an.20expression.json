[
    {
        "content": "<p>I want to use the following theorem (the right implication):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">connected_space_iff_connected_component</span> <span class=\"o\">:</span>\n  <span class=\"n\">connected_space</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">connected_component</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>To a goal of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">connected_component</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>where <code>s : set \\alpha</code>.<br>\nNow just trying to apply this to my goal doesnt work, because there is an exists on the right hand expression. How do I unfold this \"in\" my apply statement? I am looking to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">connected_space_iff_connected_component.1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which doesnt work.</p>",
        "id": 219404433,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607550919
    },
    {
        "content": "<p>So if I was not being clear, I already have a fixed x such that my goal is of the form <code> connected_component x = s </code></p>",
        "id": 219404574,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607550992
    },
    {
        "content": "<p>You need to provide lean a proof <code>h</code> of <code>connected_space \\a</code>, then do <code>rcases</code> on <code>connected_space_iff_connected_component.mp h</code></p>",
        "id": 219404844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551137
    },
    {
        "content": "<p>This will provide you with a new <code>x</code> and a proof that its connected component is <code>univ</code>.</p>",
        "id": 219404920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551178
    },
    {
        "content": "<p>It would be easier if you can provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 219405017,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551212
    },
    {
        "content": "<p>Okay here is the actual theorem that I am proving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">connected_component_inter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">connected_component</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_clopen</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">connected_space_iff_connected_component.1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219405187,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.20within.20an.20expression/near/219404844\">said</a>:</p>\n<blockquote>\n<p>You need to provide lean a proof <code>h</code> of <code>connected_space \\a</code>, then do <code>rcases</code> on <code>connected_space_iff_connected_component.mp h</code></p>\n</blockquote>\n<p>Ah, I was hoping to avoid this</p>",
        "id": 219405207,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551309
    },
    {
        "content": "<p>pro tip: If you use <code> ```lean </code> that will highlight the syntax properly</p>",
        "id": 219405454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551405
    },
    {
        "content": "<p>I'm not sure how you expect to apply this lemma anyway. You don't know that your space is connected...</p>",
        "id": 219405601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.20within.20an.20expression/near/219405454\">said</a>:</p>\n<blockquote>\n<p>pro tip: If you use <code> ```lean </code> that will highlight the syntax properly</p>\n</blockquote>\n<p>Used ```clean <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 219405627,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551483
    },
    {
        "content": "<p>which oddly enough has some familial relationship to lean</p>",
        "id": 219405669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607551506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.20within.20an.20expression/near/219405601\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how you expect to apply this lemma anyway. You don't know that your space is connected...</p>\n</blockquote>\n<p>I actually dont know why I thought of this</p>",
        "id": 219405809,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551562
    },
    {
        "content": "<p>I was working on a different method and then suddenly got this idea of how I thought I could shorten the proof considerably</p>",
        "id": 219405893,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551600
    },
    {
        "content": "<p>I mean... if the following is what you wanted to do, then I hope it helps :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected_component_inter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">connected_component</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_clopen</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">connected_space</span> <span class=\"o\">(</span><span class=\"n\">connected_component</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">connected_space_iff_connected_component.1</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219405912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551612
    },
    {
        "content": "<p>not sure what that idea was</p>",
        "id": 219405924,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.20within.20an.20expression/near/219405912\">said</a>:</p>\n<blockquote>\n<p>I mean... if the following is what you wanted to do, then I hope it helps :)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected_component_inter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">connected_component</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_clopen</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">connected_space</span> <span class=\"o\">(</span><span class=\"n\">connected_component</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">connected_space_iff_connected_component.1</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes this is what I wanted to do, thanks. (but I dont remember my idea of the proof anymore <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> )</p>",
        "id": 219406126,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551712
    },
    {
        "content": "<p>the RHS doesn't mention <code>x</code></p>",
        "id": 219406317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607551805
    },
    {
        "content": "<p>Yeah this lemma can't be true</p>",
        "id": 219406510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551895
    },
    {
        "content": "<p>You want to assume <code>x</code> is in the <code>Z</code>.</p>",
        "id": 219406561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607551906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.20within.20an.20expression/near/219406561\">said</a>:</p>\n<blockquote>\n<p>You want to assume <code>x</code> is in the <code>Z</code>.</p>\n</blockquote>\n<p>oh yes of course. This is the lemma <a href=\"https://stacks.math.columbia.edu/tag/08ZN\">https://stacks.math.columbia.edu/tag/08ZN</a></p>",
        "id": 219406749,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607551979
    },
    {
        "content": "<p>Also is there some type of notation I can use to switch between considering a term of  <code>set α</code> to a term of <code>set s</code> for some subset s (assuming it is a subset of s)? Like some sort of a lift?</p>",
        "id": 219407580,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607552377
    },
    {
        "content": "<p>This is actually annoying to do...</p>",
        "id": 219407740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607552426
    },
    {
        "content": "<p>You have to use images and preimages w.r.t. the inclusion <code>s \\to \\alpha</code>.</p>",
        "id": 219407817,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607552454
    },
    {
        "content": "<p>Note that therer is a coercion from <code>s</code> to <code>\\alpha</code>so it's preferred to refer to this inclusion as <code>coe</code> (possibly with an accompanying type ascription).</p>",
        "id": 219408030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607552540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> you have reached the forbidden grounds of Lean territory</p>",
        "id": 219408297,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607552701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/exists.20within.20an.20expression/near/219407817\">said</a>:</p>\n<blockquote>\n<p>You have to use images and preimages w.r.t. the inclusion <code>s \\to \\alpha</code>.</p>\n</blockquote>\n<p>How do I get this inclusion? I can only figure out how to get the inclusion to set.univ (using set.inclusion)</p>",
        "id": 219410066,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607553690
    },
    {
        "content": "<p>wait. Maybe thats right, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_inter.inter</span> <span class=\"n\">t</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">t</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_clopen</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_preconnected</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">18</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">preconnected_subset_clopen</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_clopen</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_preconnected</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset_of_inter_eq_self_left</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">set.inclusion</span> <span class=\"o\">(</span><span class=\"n\">set.subset_univ</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219410224,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607553786
    },
    {
        "content": "<p>But is there really no easier way to talk about <code>t ∩ s </code> as a term of <code>set t</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>. Maybe I am going about the problem the wrong way. The reason I want to consider it as a subset of t is so that I can apply:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_clopen_iff</span> <span class=\"o\">[</span><span class=\"n\">preconnected_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_clopen</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 219410800,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607554116
    },
    {
        "content": "<p>If you want to get <code>t \\cap s</code> as a set in <code>s</code>, just use <code>(coe : s \\to \\a) \\inv ' t</code> (i.e. the prreimage of <code>t</code> under the coercion from <code>s</code> to <code>\\alpha</code>). (Sorry for the bad typesetting... don't have lean open right now)</p>",
        "id": 219411246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607554329
    }
]