[
    {
        "content": "<p>I am trying to prove some facts about quotient modules, and I got stuck on something that boils down to the following.<br>\nEven though lean agrees that <code>coker</code> is well defined, in the example it seems to forget that <code>im R f</code> induces a valid equivalence relation.<br>\nWhat am I doing wrong?<br>\nAs a side question: it feels like the things I am trying to do should be in lean somewhere, but I cannot seem to find them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.simple_module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coker</span> <span class=\"o\">:=</span> <span class=\"n\">N</span> <span class=\"bp\">⧸</span> <span class=\"n\">im</span> <span class=\"n\">R</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">coker</span> <span class=\"n\">R</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">submodule.quotient.mk</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">quotient.exists_rep</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304417427,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1665999320
    },
    {
        "content": "<p><code>@@quotient.exists_rep (im R f).quotient_rel x</code> works but I'm not sure why this isn't working as is...</p>",
        "id": 304423422,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666001404
    },
    {
        "content": "<p>also, is this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map\">docs#submodule.map</a> of top?</p>",
        "id": 304424027,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666001639
    },
    {
        "content": "<p>Thanks! I can work with that. I am still curious why the above code does not work, because I might be doing something wrong.</p>\n<p>It is indeed <a href=\"http://submodule.map\">submodule.map</a>, which is helpful. It seems like a lot of the things I need are actually in <code>linear_map</code> instead <code>modules</code>. The naming scheme is still a bit confusing to me.</p>",
        "id": 304426067,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1666002410
    },
    {
        "content": "<p>I think you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range\">docs#linear_map.range</a>?</p>",
        "id": 304451584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666010742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/quotient.20modules.20exists_rep/near/304451584\">said</a>:</p>\n<blockquote>\n<p>I think you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range\">docs#linear_map.range</a>?</p>\n</blockquote>\n<p>I guess, but I am mainly interested in why quotient.exists_rep fails. I run in to similar problems with groups and quotients it seems, in the following very artificial example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">group</span>\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span>\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hIJ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">normal</span> <span class=\"bp\">$</span> <span class=\"n\">subgroup_of</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">is_simple_group</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">quotient.group</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hN</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hN</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"c1\">--have hg : group (↥J ⧸ subgroup_of I J) := @quotient.group _ _ _ hN, -- pointless</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- failed to synthesize type class instance for has_one</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The typeclass system feels very fragile, but I must be using it wrong.</p>",
        "id": 304458689,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1666012885
    },
    {
        "content": "<p>This is a better way to spell what you have there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">group</span>\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span>\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hIJ</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">normal</span> <span class=\"bp\">$</span> <span class=\"n\">subgroup_of</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_simple_group</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">J</span> <span class=\"bp\">⧸</span> <span class=\"n\">I.subgroup_of</span> <span class=\"n\">J</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hN</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_pair_ne</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">J</span> <span class=\"bp\">⧸</span> <span class=\"n\">subgroup_of</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 304464692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666014556
    },
    {
        "content": "<p>In general:</p>\n<ul>\n<li>If you have a typeclass in an existential, use <code>casesI</code> not <code>cases</code>, to ensure it enters the context</li>\n<li>Don't call <code>cases</code> on typeclass arguments, look for the API lemma you're supposed to use instead (in this case, exists_pair_ne)</li>\n</ul>",
        "id": 304464740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666014572
    },
    {
        "content": "<p>For efficiency reasons the typeclass cache isn't automatically reset all the time during tactic proofs.<br>\nThis means that if you introduce a typeclass hypothesis (like <code>subgroup.normal</code>) during a proof you need to instruct lean to reset the cache.<br>\nMany tactics have <code>I</code> version that does this for you.</p>",
        "id": 304464774,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666014584
    }
]