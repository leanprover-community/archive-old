[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to work with ideals generated by a single element, but I am having issues getting Lean to realize that they are principal.  More specifically, I suspect that the issue is that Lean does not recognize the element that I use to define the ideal to be the <code>generator</code> guaranteed by the <code>is_principal</code> property.  I am aware of the existence of this lemma (in /src/ring_theory/principal_ideal_domain.lean), which is what I would like to apply:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mem_iff_eq_smul_generator</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"bp\">.</span><span class=\"n\">generator</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">eq_comm</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"n\">span_singleton_generator</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>and this is my attempt</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">myprinc</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">sh</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">Rg</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span> <span class=\"n\">Rg</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">principal</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n            <span class=\"n\">use</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n<span class=\"c1\">--  library_search fails</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208546301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598874214
    },
    {
        "content": "<p>Try <code>haveI</code>?</p>",
        "id": 208547761,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875436
    },
    {
        "content": "<p>(Why is <code>is_principal</code> a class anyways?)</p>",
        "id": 208547811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/principal.20submodules/near/208547761\">said</a>:</p>\n<blockquote>\n<p>Try <code>haveI</code>?</p>\n</blockquote>\n<p>Do you mean to simply type <code>haveI</code> to try to finish the goal?</p>",
        "id": 208547863,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875485
    },
    {
        "content": "<p>I get an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">&#39;«</span><span class=\"o\">:=</span><span class=\"err\">»&#39;</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 208547900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875516
    },
    {
        "content": "<p>instead of <code>have</code>. But now I think you might need <code>letI</code></p>",
        "id": 208547919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875538
    },
    {
        "content": "<p>(I suspect that you are underestimating my incompetence with Lean...  ahahaa)</p>\n<p>I understand what you meant now!</p>",
        "id": 208547985,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875568
    },
    {
        "content": "<p>actually no, it is a Prop so <code>haveI</code> should be fine, but the proof still won't work</p>",
        "id": 208548077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875644
    },
    {
        "content": "<p>I tried with <code>letI</code> after, as Reid Barton said, <code>haveI</code> did not work.  It still does not find a solution with library_search, but now the output makes me suspect that Lean knows what generator I am talking about</p>",
        "id": 208548125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/principal.20submodules/near/208546301\">said</a>:</p>\n<blockquote>\n<p>More specifically, I suspect that the issue is that Lean does not recognize the element that I use to define the ideal to be the <code>generator</code> guaranteed by the <code>is_principal</code> property. </p>\n</blockquote>\n<p>Yes, <code>generator</code> is just some arbitrary choice of generator and you can't force it to be your <code>g</code>, so the lemma doesn't apply.</p>",
        "id": 208548215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/principal.20submodules/near/208548215\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/principal.20submodules/near/208546301\">said</a>:</p>\n<blockquote>\n<p>More specifically, I suspect that the issue is that Lean does not recognize the element that I use to define the ideal to be the <code>generator</code> guaranteed by the <code>is_principal</code> property. </p>\n</blockquote>\n<p>Yes, <code>generator</code> is just some arbitrary choice of generator and you can't force it to be your <code>g</code>, so the lemma doesn't apply.</p>\n</blockquote>\n<p>Ok, this sucks, though...</p>",
        "id": 208548252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875778
    },
    {
        "content": "<p>it's not a problem, just use a different lemma</p>",
        "id": 208548356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875839
    },
    {
        "content": "<p>for example <code>mem_span_singleton</code> which appears in its proof looks relevant</p>",
        "id": 208548373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598875862
    },
    {
        "content": "<p>I will keep trying, but I have failed with many lemmas...</p>",
        "id": 208548395,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875881
    },
    {
        "content": "<p>in particular, the <code>mwe</code> produced above might work with <code>mem_span_singleton</code>, but I am not sure that the actual instance that I have will</p>",
        "id": 208548437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875917
    },
    {
        "content": "<p>I need to see</p>",
        "id": 208548440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598875920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Want to share your screen and prove this together?</p>",
        "id": 208548506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598875976
    },
    {
        "content": "<p>sure, but I will not be able to talk while sharing the screen, since my computer does not have a mic</p>",
        "id": 208548531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598876005
    },
    {
        "content": "<p>(also, where do you want to share my screen?)</p>",
        "id": 208548552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598876025
    },
    {
        "content": "<p>Aha... let's see how it goes... you could write a chat in the comment blocks</p>",
        "id": 208548561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598876036
    },
    {
        "content": "<p>(I should say: I am able to talk, just you will not be able to listen to me...)</p>",
        "id": 208548613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598876047
    },
    {
        "content": "<p>for the record: the <code>mwe</code> could be solved as follows</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">myprinc</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- x ∣ s :=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>thanks to all who pointed me towards the right lemma!</p>",
        "id": 208550696,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598877389
    }
]