[
    {
        "content": "<p>Hi, I'm just working through the tutorial in VS code. I'm having difficulty getting introspection on some of the code used in lemmas. Particularly I'm looking at the <code>inf_lt</code> lemma, which uses <code>hx.2</code>. The Lean Goal window shows the value of hx, but it isn't expanded so the user can't tell what the 1 and 2 cases are. Is there are way to inspect these values in VS code?</p>",
        "id": 200668405,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591967765
    },
    {
        "content": "<p>What do you mean with \"it isn't expanded\"?</p>",
        "id": 200672535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591969985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311255\">@Nathan Glenn</span> (I didn't look at the file.) I guess <code>hx : p \\and q</code>? and then <code>hx.1</code> has type <code>p</code>.</p>",
        "id": 200672597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591970018
    },
    {
        "content": "<p>Or if it is <code>p ↔ q</code> then <code>hx.1</code> is the forward direction (aka <code>hx.mp</code>, for \"modus ponens\") and <code>hx.2</code> is the reverse direction (also known as <code>hx.mpr</code> for \"modus ponens reverse\").</p>",
        "id": 200672837,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1591970117
    },
    {
        "content": "<p>by \"it isn't expanded\" I mean that it is shown as <code>x is_an_inf_of A</code> in the goals panel, and looking just at this string it is not possible to tell there are cases; you have to go find the definition of <code>is_an_inf_of</code> and search backwards from there.</p>",
        "id": 200673427,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591970371
    },
    {
        "content": "<p>You currently  cannot do that from the goal view, but it should come soon.</p>",
        "id": 200673565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591970428
    },
    {
        "content": "<p>Of course you can do that from the code itself.</p>",
        "id": 200673589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591970439
    },
    {
        "content": "<p>ooh, sounds promising! Where do the developer people hang out and discuss features being worked on? If I were to contribute, it would probably have to be there, not with the math definitions part</p>",
        "id": 200673924,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591970596
    },
    {
        "content": "<p>By \"do that from the code itself\" you mean search around in VS code, or do you mean that there are commands that you can do?</p>",
        "id": 200674039,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591970643
    },
    {
        "content": "<p>In VSCode you can right-click on everything and choose \"Go to definition\" in the contextual menu.</p>",
        "id": 200674357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591970816
    },
    {
        "content": "<p>Default keybinding is F12</p>",
        "id": 200674418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591970849
    },
    {
        "content": "<p>About the coming stuff, I think the main entry point here is <a href=\"https://github.com/leanprover/vscode-lean/pull/159\">https://github.com/leanprover/vscode-lean/pull/159</a></p>",
        "id": 200674518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591970894
    },
    {
        "content": "<p>Ah, the \"Go to definition\" functionality is I think the problem here. The line <code>exact hx.2 y h</code> takes you to the definition of the <code>exact</code> tactic, no matter where your cursor is. A separate issue is that it's not possible to go to definitions of propositions shown in the goals window.</p>",
        "id": 200675501,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591971397
    },
    {
        "content": "<p>The former is known (and frustrating). I think it's tricky to fix due to the way the tactic parser works, but feel free to open an issue <a href=\"https://github.com/leanprover-community/lean\">here</a>.</p>\n<p>The latter should be coming hopefully not too long after the info view refactor lands.</p>",
        "id": 200675785,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591971582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311255\">Nathan Glenn</span> <a href=\"#narrow/stream/113489-new-members/topic/inspecting.20prop.2E1.20and.20prop.2E2.20in.20VS.20code/near/200673924\">said</a>:</p>\n<blockquote>\n<p>ooh, sounds promising! Where do the developer people hang out and discuss features being worked on? If I were to contribute, it would probably have to be there, not with the math definitions part</p>\n</blockquote>\n<p>Most Lean-related discussion (whether mathematical or programming-related) occurs in this Zulip. Feel free to open threads about anything you're curious about (after searching \"all public streams\" on Zulip, of course).</p>",
        "id": 200676207,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591971773
    },
    {
        "content": "<p>Thanks! I will eagerly await the new UI, then :)</p>",
        "id": 200676528,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591971941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311255\">@Nathan Glenn</span> I don't remember, have you been made aware of the <code>unfold</code> tactic at this point in the tutorials?</p>",
        "id": 200679139,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591973180
    },
    {
        "content": "<p>You should be able to apply it to, i.e.,<code>is_an_inf_of</code>.</p>",
        "id": 200679511,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591973342
    },
    {
        "content": "<p>Sounds promising! Okay, so I'm in tutorial 0, lemma <code>inf_lt</code>. If I type <code>unfold hx</code>, I get <code>unfold tactic failed, hx does not have equational lemmas nor is a projection</code>.  <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> The documentation says that <code>unfold</code> unfolds constants at their appearances in the goal, but I need to look at things that aren't necessarily in the goal. <code>hx</code> is just another state variable in this case.</p>",
        "id": 200697292,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591981783
    },
    {
        "content": "<p><code>unfold is_an_inf_of at hx</code></p>",
        "id": 200697471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591981869
    },
    {
        "content": "<p>waitwaitwait <code>is_an_inf_of</code> is just notation. Hang on</p>",
        "id": 200697805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591982072
    },
    {
        "content": "<p>I don't know how to do this. I can just look at the definitions and see what the answer is, but I am struggling to get Lean to unfold it. The situation is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">is_an_inf_of</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">is_an_inf_of</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">is_inf</span>\n<span class=\"n\">def</span> <span class=\"n\">is_inf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"n\">is_a_max_of</span> <span class=\"o\">(</span><span class=\"n\">low_bounds</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"n\">is_a_max_of</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">is_max</span>\n<span class=\"n\">def</span> <span class=\"n\">is_max</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">up_bounds</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 200698027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591982210
    },
    {
        "content": "<p>Yes, it looks nice in the demo and when you know what you are doing, but it does make it more difficult to unfold since you need to know the actual name.</p>",
        "id": 200698087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591982252
    },
    {
        "content": "<p>I usually do that only in pure demo files. I also use this zeroth tutorial file to show Lean to people who don't intend to ever use it.</p>",
        "id": 200698175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591982288
    },
    {
        "content": "<p>So the <code>infix</code> stuff is notation, which Lean can see through. So the answer to your question <span class=\"user-mention\" data-user-id=\"311255\">@Nathan Glenn</span> is</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">unfold</span> <span class=\"n\">is_inf</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_max</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>giving</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">low_bounds</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">up_bounds</span> <span class=\"o\">(</span><span class=\"n\">low_bounds</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 200698232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591982323
    },
    {
        "content": "<p>You can do both in one line.</p>",
        "id": 200698417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591982415
    },
    {
        "content": "<p>That worked great, thanks Kevin!<br>\nI was hoping then that I could replace those two lines with something like <code>repeat {unfold (whatever) at hx}</code> but  that doesn't work. I guess it would probably explode the goals once the structures got more complex, anyway.</p>",
        "id": 200700742,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591983552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/inspecting.20prop.2E1.20and.20prop.2E2.20in.20VS.20code/near/200698175\">said</a>:</p>\n<blockquote>\n<p>I also use this zeroth tutorial file to show Lean to people who don't intend to ever use it.</p>\n</blockquote>\n<p>So maybe I should start with tutorial 1? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 200701306,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591983845
    },
    {
        "content": "<p>No, I mean you're not really meant to <em>edit</em> that zeroth file.</p>",
        "id": 200702044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591984225
    },
    {
        "content": "<p><code>unfold is_inf is_max at hx</code> works</p>",
        "id": 200702241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591984337
    },
    {
        "content": "<p>Sure, although it's annoying that this is not consistent with the <code>simp</code>/<code>dsimp</code> and <code>rw</code> syntax.</p>",
        "id": 200702508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591984459
    },
    {
        "content": "<p>Ah okay, so the zeroth file is like an overview that I should read through and move on with?</p>",
        "id": 200702877,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1591984634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/inspecting.20prop.2E1.20and.20prop.2E2.20in.20VS.20code/near/200702241\">said</a>:</p>\n<blockquote>\n<p><code>unfold is_inf is_max at hx</code> works</p>\n</blockquote>\n<p>Since <code>is_an_inf_of</code> is notation (that Lean has been made aware of) for <code>is_inf</code>, maybe we could ask that Lean unfold it without digging any further (i.e without knowledge of <code>is_inf</code> for the user). Does this seem like a reasonable feature request for the <code>unfold</code> tactic?</p>",
        "id": 200706221,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591986155
    },
    {
        "content": "<p>In some sense it's unfolded already. I think it's the prettyprinter which is making it not display as <code>is_inf</code>. If you <code>set_option pp.notation false</code> you can see what's really going on</p>",
        "id": 200708712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591987360
    }
]