[
    {
        "content": "<p>I'm having a lot of trouble with the <code>restrict_scalars</code> mechanism. Here's an MWE of what I'm trying to do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">is_R_or_C</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℝ</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>The problem is that <code>convex K</code> requires an instance of <code>semimodule ℝ α</code>. Casting <code>K</code> to a <code>set (semimodule.restrict_scalars ℝ 𝕜 α)</code> doesn't work for a reason I don't understand, it still looks for a <code>semimodule ℝ α</code> when I do that. Also, registering the appropriate instance also fails, since that makes trouble with <code>semimodule ℝ ℝ</code>.</p>\n<p>Any advice?</p>",
        "id": 209466523,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1599619308
    },
    {
        "content": "<p><code>restrict_scalars</code> is used to generate a module instance</p>",
        "id": 209476409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599633777
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower\">docs#is_scalar_tower</a> is used to prove anything about them</p>",
        "id": 209476419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599633793
    },
    {
        "content": "<p>we should put this in the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semimodule.restrict_scalars\">docs#semimodule.restrict_scalars</a></p>",
        "id": 209476432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599633818
    },
    {
        "content": "<p>also since <code>k</code> is a field I guess you should say <code>vector_space</code> instead of <code>semimodule</code></p>",
        "id": 209476483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599633850
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">is_R_or_C</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℝ</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">convex</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 209476546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599633925
    },
    {
        "content": "<p>Seems to work -- thanks a lot!</p>",
        "id": 209550965,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1599676928
    },
    {
        "content": "<p>Now I have a follow-up question: is there a good way to deal with subspaces with these scalar towers? For example, suppose I'd like to show that a <code>subspace 𝕜 α</code> is convex, is there a clean way to do that?</p>",
        "id": 209585463,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1599698164
    },
    {
        "content": "<p>what's the issue?</p>",
        "id": 209599207,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599718195
    },
    {
        "content": "<p>To prove that a subspace is convex, one would want to use <code>subspace.convex</code>, which only works for <code>subspace ℝ α</code>. So as far as I can tell, one would have to contruct a <code>subspace ℝ α</code> out of the <code>subspace 𝕜 α</code>, and add some lemmas showing that their carriers are the same, etc. I was hoping that there was some easier way that I had overlooked, but maybe I'm just the first to run into this issue...</p>",
        "id": 209643987,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1599746021
    }
]