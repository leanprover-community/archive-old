[
    {
        "content": "<p>(mwe below). My goal state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span>  <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}),</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and I try to <code>change ... |x-x| = 0</code>, but Lean is not comfortable subtracting <code>x</code> from <code>x</code>, as it is in a special set, which may not contain <code>0</code>. How can I convince Lean that it should think of <code>x</code> as an element in <code>ℝ</code> ? The error I get is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_zero</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}),</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Minimal Working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">metric_space</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">interval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">}</span>  <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,</span>  <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">|</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_self</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">}),</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 281561795,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1651959500
    },
    {
        "content": "<p>I think you put the coercion further inward. (I know nothing about the math you're doing, but...)</p>",
        "id": 281562042,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651959868
    },
    {
        "content": "<p><code>      change ∀ (x : {x : ℝ | a ≤ x ∧ x ≤ b}), |(x : ℝ)-x| = 0,\n</code></p>",
        "id": 281562046,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651959874
    },
    {
        "content": "<p>seems to work.</p>",
        "id": 281562051,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651959882
    },
    {
        "content": "<p>Thanks a lot! This worked.</p>",
        "id": 281562733,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1651960846
    }
]