[
    {
        "content": "<p>I'd like to define some functions which can take in any type but have some default behavior if an unexpected type is given. E.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_int_or_nat</span><span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>\n\n\n<p>This doesn't work , but is something similar possible? Typeclasses seem appropriate for this ad-hoc polymorphism, but I don't know how to define a \"everything else\" typeclass, something like below.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">is_Z_or_N</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"c1\">-- possibly a solution involves having a default value?</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Z_is</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n <span class=\"n\">Z_or_N_typeclass</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">tt</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">N_is</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n <span class=\"n\">Z_or_N_typeclass</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">tt</span>\n\n<span class=\"c1\">--instance everything_else : Z_or_N_typeclass (Type*) :=</span>\n<span class=\"c1\">-- Z_or_N_typeclass.mk ff</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Z_or_N_typeclass</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">Z_or_N_fun</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Z_or_N_fun</span><span class=\"bp\">.</span><span class=\"n\">is_Z_or_N</span>\n</code></pre></div>",
        "id": 203233802,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594187714
    },
    {
        "content": "<p>I suspect this is <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>. Note that <code>nat = int</code> is undecidable in Lean. Your definitions don't work because the equation compiler is expecting an inductive type and universes aren't inductive types</p>",
        "id": 203234282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594188320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> this feels like those linear algebra assumptions \"assume K is R or C\"</p>",
        "id": 203234708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594188878
    },
    {
        "content": "<p>Something like your second example works more or less as is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_Z_or_N</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"o\">(</span><span class=\"n\">is_Z_or_N</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Z_is</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">N_is</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">everything_else</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ff</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">is_Z_or_N</span> <span class=\"n\">nat</span> <span class=\"c1\">-- tt</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">is_Z_or_N</span> <span class=\"n\">int</span> <span class=\"c1\">-- tt</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">is_Z_or_N</span> <span class=\"n\">unit</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 203234799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594189019
    },
    {
        "content": "<p>This doesn't go against Kevin's observation because the actual data is in the instance; you can still get <code>is_Z_or_N nat</code> to return false</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">is_Z_or_N</span> <span class=\"n\">nat</span> <span class=\"n\">everything_else</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 203234883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594189177
    },
    {
        "content": "<p>You can even associate the typeclass with a correctness proof so that you can do things like Kenny's R or C example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_Z_or_N</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">is_Z_or_N</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">∨</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"o\">(</span><span class=\"n\">is_Z_or_N</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Z_is</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">N_is</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"n\">everything_else</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Z_or_N_typeclass</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 203235105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594189461
    },
    {
        "content": "<p>On the other hand, I hope you will never have to prove that a certain type is not equal to <code>nat</code> or <code>int</code>...</p>",
        "id": 203235204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594189635
    },
    {
        "content": "<p>that <code>valid</code> field can't be a biconditional because as I showed you can use the <code>everything_else</code> instance with <code>nat</code> and <code>int</code> as well</p>",
        "id": 203235259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594189725
    },
    {
        "content": "<p>I'm guessing we can't prove <code>mynat = nat</code> either</p>",
        "id": 203236159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594190756
    },
    {
        "content": "<p>Kevin was originally right that this is probably XY - I was just having difficulties doing things the moral way. I don't understand why my <code>eval</code> function below is wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">has_relop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">relOP</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_binop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">binOP</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_relop</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_binop</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">binop</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">has_binop</span><span class=\"bp\">.</span><span class=\"n\">evl</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">relop</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">has_relop</span><span class=\"bp\">.</span><span class=\"n\">evl</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">getvar</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">getEnv</span> <span class=\"n\">v</span> <span class=\"n\">env</span>\n</code></pre></div>\n\n\n<p>The calls to <code>has_binop.evl</code>, <code>eval</code>, and <code>has_relop.evl</code> in the function all say they cannot synthesize typeclass instances for their arguments. E.g. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_relop</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_binop</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">has_relop</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">has_binop</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">binOP</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Env</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_binop</span> <span class=\"bp\">_</span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 203236617,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594191325
    },
    {
        "content": "<p>Made some fixes: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Env</span><span class=\"o\">:=</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">exVar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">vx</span> <span class=\"o\">:</span> <span class=\"n\">exVar</span> <span class=\"bp\">ℤ</span>\n <span class=\"bp\">|</span> <span class=\"n\">vy</span> <span class=\"o\">:</span> <span class=\"n\">exVar</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">relOP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">EQ</span> <span class=\"bp\">|</span> <span class=\"n\">NEQ</span> <span class=\"bp\">|</span> <span class=\"n\">LE</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">binOP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">PLUS</span> <span class=\"bp\">|</span> <span class=\"n\">MINUS</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_relop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">relOP</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_binop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">evl</span> <span class=\"o\">:</span> <span class=\"n\">binOP</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">relop</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_relop</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">relOP</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">binop</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_binop</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">binOP</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">getvar</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">exVar</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span>\n\n<span class=\"n\">def</span> <span class=\"n\">getEnv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">,</span> <span class=\"n\">exVar</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span>  <span class=\"o\">(</span><span class=\"n\">exVar</span><span class=\"bp\">.</span><span class=\"n\">vx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">exVar</span><span class=\"bp\">.</span><span class=\"n\">vy</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">relop</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">has_relop</span><span class=\"bp\">.</span><span class=\"n\">evl</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">binop</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">has_binop</span><span class=\"bp\">.</span><span class=\"n\">evl</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">getvar</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">getEnv</span> <span class=\"n\">v</span> <span class=\"n\">env</span>\n</code></pre></div>\n\n\n<p>And the sole error now is  <code>infer type failed, unknown variable __mlocal__fresh_10_435536</code> on <code>Exp.relop</code> in the definition of <code>eval</code> (reproducible in the Lean web editor)</p>",
        "id": 203237960,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594192629
    },
    {
        "content": "<p>Is this really what you want to do?</p>",
        "id": 203253726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594205587
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">Exp</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">relop</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_relop</span><span class=\"bp\">.</span><span class=\"n\">evl</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">binop</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">o</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_binop</span><span class=\"bp\">.</span><span class=\"n\">evl</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">getvar</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">getEnv</span> <span class=\"n\">v</span> <span class=\"n\">env</span>\n</code></pre></div>",
        "id": 203253886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594205719
    },
    {
        "content": "<p>Yes! thanks for working out the root of the problem.</p>",
        "id": 203294406,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594227958
    }
]