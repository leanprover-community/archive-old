[
    {
        "content": "<p>Hello. This is my first time posting here (or on Zulip at all) so if I should've put this somewhere else or done this differently, my bad.<br>\nI've been fairly stuck trying to prove this theorem that I <em>believe</em> is correct. I really want to stick to computable proofs as well, but I'm happy to bend that if need be.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Type isomorphism. Classically is equivalent to bijection but this allows me to use the inverse function `g` while staying computable.</span>\n<span class=\"n\">def</span> <span class=\"n\">type_iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">∧</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_cancel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">type_iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">type_iso</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hsum</span> <span class=\"k\">with</span> <span class=\"n\">fs</span> <span class=\"n\">gshfs</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">gshfs</span> <span class=\"k\">with</span> <span class=\"n\">gs</span> <span class=\"n\">hfs</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"err\">$</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n    <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">gs</span> <span class=\"err\">$</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n    <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(I could've used <code>rintros</code> for <code>sum_cancel</code> but am using the Lean web editor to draft this)<br>\nCan someone point me in the right direction? Thanks!</p>",
        "id": 189456757,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1583112534
    },
    {
        "content": "<p>The theorem is false. <code>nat ⊕ empty</code> is isomorphic to <code>nat ⊕ nat</code></p>",
        "id": 189457413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583113907
    },
    {
        "content": "<p>By the way, the computable version of <code>bijection</code> is called <code>equiv</code> and there is a sizeable mathlib file about it</p>",
        "id": 189457457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583113958
    },
    {
        "content": "<p>(You can use <code>rintros</code> in the <a href=\"https://leanprover-community.github.io/lean-web-editor\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor\">community web editor</a> if you <code>import tactic</code>.)</p>",
        "id": 189457514,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583114091
    },
    {
        "content": "<p>Oh cool. Thanks! <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 189457726,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1583114463
    },
    {
        "content": "<p>The theorem is true for cancelling <code>option</code>, or more generally if <code>α</code> is finite, but I don't think it is computable</p>",
        "id": 189457783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583114548
    },
    {
        "content": "<p>Actually, I think it might be computable. If <code>f : option A -&gt; option B</code> has an inverse <code>g</code>, and you want to construct a function <code>A -&gt; B</code>, you check if <code>f (some a) = some b</code> so you are done, or <code>f (some a) = none</code> in which case <code>f none = some b</code>. (<code>f none</code> cannot be <code>none</code> in this case since <code>f</code> is injective.)</p>",
        "id": 189457911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583114809
    },
    {
        "content": "<p>I'll have to see about using <code>data.equiv</code>, it seems to have gotten most of the boilerplate out of the way (like proving type isomorphism an equivalence relation).</p>",
        "id": 189458034,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1583115067
    },
    {
        "content": "<p>Product types aren't cancellative either. :( There go my dreams of embedding the commutative semiring of types in a signed type commutative ring</p>",
        "id": 189467210,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1583131780
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/Eilenberg+swindle\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Eilenberg+swindle\">https://ncatlab.org/nlab/show/Eilenberg+swindle</a></p>",
        "id": 189507263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583166076
    }
]