[
    {
        "content": "<p>Is there a way to tell Lean to infer the most general type for a definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>It works if I write types explicitly: <code>def I : α → α := S K (@K _ Type)</code>, but how can I make it implicit?</p>",
        "id": 261434448,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1636918384
    },
    {
        "content": "<p>Are you sure you want <code>Type</code> and not <code>(Type u)</code> or <code>(Type v)</code> or ...</p>",
        "id": 261434927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636919083
    },
    {
        "content": "<p>It doesn't affect the final type of <code>I</code>. The second argument of the last <code>K</code> is ignored.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">I</span> <span class=\"c1\">-- I : Π {α : Sort u_1}, α → α</span>\n</code></pre></div>",
        "id": 261435167,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1636919465
    },
    {
        "content": "<p>You can also put any random type like <code>int</code> there, yeah.</p>",
        "id": 261435174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636919481
    },
    {
        "content": "<p>A priori they could all define different functions <code>I</code>, so you should say which one you mean</p>",
        "id": 261435182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636919520
    },
    {
        "content": "<p>Haskell has some defaulting rule for situations like this because it can assume that all your definitions are parametric</p>",
        "id": 261435237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636919573
    },
    {
        "content": "<p>here is maybe a more familiar example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">list.length</span> <span class=\"o\">[]</span>  <span class=\"c1\">-- error: don't know how to synthesize placeholder</span>\n</code></pre></div>",
        "id": 261435452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636919976
    },
    {
        "content": "<p>For</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">K</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>\n<p>a reason it doesn't work is that Lean doesn't do Hindley-Milner type inference.  A key step of the algorithm is abstraction of metavariables at binding sites, but Lean instead says \"don't know how to synthesize placeholder\" in this situation.</p>",
        "id": 261435822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636920371
    },
    {
        "content": "<p>Elaborating on what Reid said about how they could all define different functions <code>I</code>: the types might be the same for the various choices, but the definitions potentially might not be equal. (They are in this case, though.)</p>",
        "id": 261435851,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636920435
    },
    {
        "content": "<p>I don't use <code>let</code> expressions enough to have noticed that it checks for metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>  <span class=\"c1\">-- don't know how to synthesize placeholder</span>\n<span class=\"k\">in</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>This is a place where Hindley-Milner would abstract the metavariable and make <code>x</code> be polymorphic.</p>\n<p>The <code>let</code> tactic allows metavariables, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261436181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636920906
    }
]