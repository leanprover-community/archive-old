[
    {
        "content": "<p>is the palindrome proposition in hitchhiker's guide... wrong? how would it work with even-length palindromes?</p>",
        "id": 196701355,
        "sender_full_name": "Nam",
        "timestamp": 1588801028
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">palindrome</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">sandwich</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"n\">palindrome</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">palindrome</span> <span class=\"o\">([</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 196701402,
        "sender_full_name": "Nam",
        "timestamp": 1588801052
    },
    {
        "content": "<p>[] has even length</p>",
        "id": 196701453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588801074
    },
    {
        "content": "<p>ahhh, i see where i got it wrong now. the <code>sandwich</code> constructor sandwiching a <strong>list</strong></p>",
        "id": 196701599,
        "sender_full_name": "Nam",
        "timestamp": 1588801134
    },
    {
        "content": "<p>i read it wrongly to be two lists sandwiching an element</p>",
        "id": 196701630,
        "sender_full_name": "Nam",
        "timestamp": 1588801148
    },
    {
        "content": "<p>Kevin, for a mathematician, your mastery of C.S. topics is astonishing.</p>",
        "id": 196728093,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1588828721
    },
    {
        "content": "<p>Once I remember an undergraduate asking me if zero was an even number</p>",
        "id": 196746018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588843686
    },
    {
        "content": "<p>The alternative being that the predicate only made sense on positive integers</p>",
        "id": 196746043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588843711
    },
    {
        "content": "<p>The Ancient Greeks didn't like division by 1, I'm told. They would write things like \"if n = 1, then m; otherwise m / n\".</p>",
        "id": 196911096,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1588952229
    },
    {
        "content": "<p>Thereby allowing division by 0? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 196911997,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1588952630
    },
    {
        "content": "<p>Division by what now?</p>",
        "id": 196915441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588954119
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span>\n<span class=\"n\">def</span> <span class=\"n\">diff_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">action</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">diff_list</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>#. why is the body of the first <code>def</code>, erm, kinda weird? it is a function type.<br>\n#. <code>diff_list</code> has one argument, why do we call it with 2 (a list, and the initial state)? is this the first argument (\\sigma) in <code>action</code>?</p>",
        "id": 197091538,
        "sender_full_name": "Nam",
        "timestamp": 1589161497
    },
    {
        "content": "<p><code>action</code> is defining a type, which is a function type in this case</p>",
        "id": 197091659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589161758
    },
    {
        "content": "<p>the type of <code>action</code> is <code>action : Type -&gt; Type -&gt; Type</code></p>",
        "id": 197091662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589161773
    },
    {
        "content": "<p><code>diff_list</code> has one argument, but the result is an <code>action</code>, which is itself a function, expecting an argument of its own (the sigma, as you say)</p>",
        "id": 197091710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589161821
    },
    {
        "content": "<p>so the first <code>def</code> is like a typedef in C?</p>",
        "id": 197092841,
        "sender_full_name": "Nam",
        "timestamp": 1589163680
    },
    {
        "content": "<p>is there a keyword for that? say, <code>alias</code>?</p>",
        "id": 197092849,
        "sender_full_name": "Nam",
        "timestamp": 1589163699
    },
    {
        "content": "<p><code>def</code> is like <code>typedef</code> indeed. There is no separate keyword, as in DTT the operations of making a type and making a term are the same</p>",
        "id": 197097988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589170092
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">action</span> <span class=\"n\">σ</span> <span class=\"n\">α</span>\n<span class=\"n\">def</span> <span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">action</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">action</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">action</span> <span class=\"n\">σ</span> <span class=\"n\">β</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">lawful_monad</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">lawful_monad</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n<span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>how should I read the <code>@action.pure \\sigma</code>? action.pure does not take a type, does it?</p>",
        "id": 197499440,
        "sender_full_name": "Nam",
        "timestamp": 1589421659
    },
    {
        "content": "<p><code>action.pure</code> takes three arguments: <code>σ</code> <code>α</code> and <code>a</code>, but normally the first two are inferred because they are written in <code>{}</code> binders. When you use <code>@action.pure</code> they all become explicit, and so it's expecting three arguments. If you only provide the first, that is, <code>σ</code>, you get a function waiting for the other two arguments</p>",
        "id": 197499662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589421965
    },
    {
        "content": "<p>(and actually, if I recall the definition of <code>action</code> from your last question, there is another argument hidden inside the definition of <code>action</code> itself, so you can actually put four arguments in before you get a value.)</p>",
        "id": 197499686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589422048
    },
    {
        "content": "<p>i see. thank you!</p>",
        "id": 197499738,
        "sender_full_name": "Nam",
        "timestamp": 1589422094
    },
    {
        "content": "<p>speaking of my previous questions, it was something like this.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">diff_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">action</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">diff_list</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 197499752,
        "sender_full_name": "Nam",
        "timestamp": 1589422131
    },
    {
        "content": "<p>which brings me to another question. <code>diff_list [1, 2, 3, 2]</code> returns an <code>action</code>, which is <code>\\sigma -&gt; \\alpha \\times \\sigma</code>, which is a function</p>",
        "id": 197499778,
        "sender_full_name": "Nam",
        "timestamp": 1589422198
    },
    {
        "content": "<p>You should be able to do something similar with <code>pure</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">action</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- (0, [1,2,3])</span>\n</code></pre></div>\n\n\n<p>note that I passed 4 arguments to <code>pure</code></p>",
        "id": 197499829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589422252
    },
    {
        "content": "<p>so do i get it right that <code>#eval diff_list [1, 2, 3, 2]</code> won't do much?</p>",
        "id": 197499838,
        "sender_full_name": "Nam",
        "timestamp": 1589422281
    },
    {
        "content": "<p>it's a curried function, so no, it might do some computation but it's still waiting for an argument</p>",
        "id": 197499846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589422310
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">diff_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">action</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>why do i not have to specify <code>action.pure</code>? how does lean know if the <code>pure []</code> is for <code>action</code> and not, say, <code>set</code>? is that because it is matched with the return type?</p>",
        "id": 197500095,
        "sender_full_name": "Nam",
        "timestamp": 1589422610
    },
    {
        "content": "<p>but which type is right? which declaration takes precedence? the signature, or the code in the body?</p>",
        "id": 197500104,
        "sender_full_name": "Nam",
        "timestamp": 1589422650
    },
    {
        "content": "<p><code>pure</code> is not actually the same function as <code>action.pure</code>, it is the <code>pure</code> function from the root namespace. This function has a typeclass argument allowing it to work on anything with a monad instance, and your <code>@[instance] def action.lawful_monad </code> registered <code>action.pure</code> as the pure operation of the action monad</p>",
        "id": 197500653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589423448
    },
    {
        "content": "<p>It knows to look for the monad instance on <code>action</code> and not <code>set</code> because the expected return type of <code>pure []</code> is <code>action N (list N)</code></p>",
        "id": 197500677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589423509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> <a href=\"#narrow/stream/113489-new-members/topic/hitchhiker's.20guide/near/197500104\">said</a>:</p>\n<blockquote>\n<p>but which type is right? which declaration takes precedence? the signature, or the code in the body?</p>\n</blockquote>\n<p>Elaboration in lean proceeds outside-in, from the expected type down to the types of variables. So the signature is always taken verbatim unless it is not provided (and you are required to provide it at the top level of a definition by cases like that one).</p>",
        "id": 197500861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589423736
    },
    {
        "content": "<p>If lean didn't know the expected type, it wouldn't be able to figure out what <code>pure []</code> means in this instance</p>",
        "id": 197500928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589423807
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">diff_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span> <span class=\"k\">in</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>fails because I haven't said what type <code>x</code> is</p>",
        "id": 197500999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589423900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/hitchhiker's.20guide/near/197500999\">said</a>:</p>\n<blockquote>\n<p>For example,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">diff_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span> <span class=\"k\">in</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>fails because I haven't said what type <code>x</code> is</p>\n</blockquote>\n<p>could you elaborate why it fails? my guess is at the <code>let</code> declaration, <code>x</code> type is not known. but shouldn't the return type be propagated backward because that same <code>x</code> is returned?</p>",
        "id": 197503720,
        "sender_full_name": "Nam",
        "timestamp": 1589428093
    },
    {
        "content": "<p>When lean elaborates a let expression, it first tries to elaborate the let definition, and then only if that is successful, uses the result in the body. This is done mostly to localize error reporting, but it does prevent it from finding the solution in this case, even though the information is available in principle</p>",
        "id": 197505734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589431326
    },
    {
        "content": "<p>\"Dependent types often make deﬁnitions and proofs more diﬀicult\". My prior intuition was the opposite, i thought being more precise means the compiler could help you out more, and code generation / simplification is better. Can someone explain what the author means by difficult here?</p>",
        "id": 197583418,
        "sender_full_name": "Jake",
        "timestamp": 1589474613
    },
    {
        "content": "<p>You can do more stuff. The new stuff is hard.</p>",
        "id": 197584658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475172
    },
    {
        "content": "<p>That's a very brief summary.</p>",
        "id": 197584666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475180
    },
    {
        "content": "<p>For evidence of the pain, search the history of this chat for \"motive is not type correct\".</p>",
        "id": 197584722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475203
    },
    {
        "content": "<p>I think the author means he's more used to Isabelle.</p>",
        "id": 197587172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589476173
    },
    {
        "content": "<p>More dependent types means more arguments to functions across the board, so it's not necessarily the case that code performance improves</p>",
        "id": 197587928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476485
    },
    {
        "content": "<p>Hard to guess what the author had in mind with so little context.</p>",
        "id": 197587965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589476507
    },
    {
        "content": "<p>simplification is much harder because of complicated definitional equality problems that can come up at any point</p>",
        "id": 197587986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476520
    },
    {
        "content": "<p>for example, more difficult than what: programming without dependent types, or theorem proving without dependent types?</p>",
        "id": 197588053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589476554
    },
    {
        "content": "<p>and there are a number of constructions that would be convenient to do in a proof that are only type correct up to a propositional equality, and these require the insertion of \"cast\" functions into the term that later obstruct simplification and other kinds of term analysis</p>",
        "id": 197588230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476620
    },
    {
        "content": "<p>that is a slightly less brief summary of \"DTT hell\"</p>",
        "id": 197588296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476644
    },
    {
        "content": "<p>Dependent types <em>can</em> enhance a programmatic proof with invariants and such without adding any additional overhead, when everything goes well and things fit together nicely. But when things don't work out exactly right, the fallback is much worse than the simply typed scenario</p>",
        "id": 197588530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476753
    },
    {
        "content": "<p>I think Conor McBride has a number of papers on what DTT looks like on a good day</p>",
        "id": 197588709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476825
    },
    {
        "content": "<p>I've changed the sentence to: \"Dependent inductive types often cause difficulties when the terms they depend on don't line up nicely.\", basically what <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> says.</p>",
        "id": 197667278,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589535021
    },
    {
        "content": "<p>And I've edited it further with an example in parentheses (<code>m + n</code> vs. <code>n + m</code>).</p>",
        "id": 197694710,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1589551088
    }
]