[
    {
        "content": "<p>In the following snippet, applying <code>ring_nf</code> two times in a row changes the state twice. I would expect a tactic that puts an expression in a \"normal form\" to not change that expression again when it sees an expression that is putatively already in that normal form. What is going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"c1\">-- c * a + b * c = 0</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"c1\">-- (a + b) * c = 0</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"c1\">-- c * a + c * b = 0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251292981,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630356626
    },
    {
        "content": "<p>I would guess this is the same issue as <a href=\"https://github.com/leanprover-community/mathlib/issues/5711\">#5711</a>, <code>ring_nf</code> normalizes given a fixed order on the atoms, but when it is run again it picks a different order, as the ordering is based on the order it sees the atoms.</p>",
        "id": 251294727,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630357426
    },
    {
        "content": "<p>I wonder if this operation can be periodic with arbitrarily large period</p>",
        "id": 251302310,
        "sender_full_name": "Will Sawin",
        "timestamp": 1630361215
    },
    {
        "content": "<p>Is there any way to tell <code>ring_nf</code> to use a particular order?</p>",
        "id": 251306313,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630363450
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 251307716,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630364340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  Indeed this is my current solution. But my expression takes ~15 lines to write out, so I'm looking for a way of doing this that avoids writing out the expression itself.</p>\n<p>In fact, I don't really need to put the whole thing in normal form, I just want to factor out a few expressions from the places they occur. Ideally, I would like a tactic where I just do something like specify a list of one or two expressions <code>[e1, e2]</code>, and then I consistently get out something of the form <code>e1 * (...) + e_2 * (...) + &lt;contains no e1 or e2&gt;</code>.</p>",
        "id": 251310143,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630366047
    },
    {
        "content": "<p><code>change _ = e1 * _ + e2 * _ + _</code>?</p>",
        "id": 251310273,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630366137
    },
    {
        "content": "<p>Ok, that might work, let me try it out</p>",
        "id": 251310394,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630366212
    },
    {
        "content": "<p>Unfortunately, it's not telling me it knows how to do this. Let me post a schematic of what I am trying to do. Here's what I have currently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">reformat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">main_theorem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">reformat</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Except <code>a,b,c,d,e,f</code> are very big expressions. I want to be able to prove the main theorem without making this reformat lemma, because writing that all out takes a long time and it's not feasible to do that every time I want to do a new theorem similar to main theorem.</p>",
        "id": 251311509,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630367072
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reformat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251313031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630368190
    },
    {
        "content": "<p>This suggestion also works for the reformat lemma, but my desire is to get rid of reformat entirely.</p>",
        "id": 251313929,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630368879
    },
    {
        "content": "<p>After hunting around in tactic.ring, I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.ring.add_atom\">docs#tactic.ring.add_atom</a>. I think what I would effectively like to do is call this on all the expressions I want in front, then make sure that when normalize is eventually called, it is called in this preexisting monadic environment. Would this work, and are there any tips on doing this?</p>",
        "id": 251320266,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630374442
    },
    {
        "content": "<p>You shouldn't be using <code>ring_nf</code> in proofs anyway (in most cases). It was originally intended as a debugging tool. I can't imagine that you will get a better proof using this method than just multiplying the equations together</p>",
        "id": 251322580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630376587
    },
    {
        "content": "<p>Here's a proof which only requires you to specify <code>c, d, g</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">main_theorem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg2</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Ideally it would be easier to specify these sums of products of equations; see the zulip thread on <code>ring_rw</code></p>",
        "id": 251323695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630377552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/ring_nf.20changes.20goal.20twice/near/251322580\">said</a>:</p>\n<blockquote>\n<p>You shouldn't be using <code>ring_nf</code> in proofs anyway (in most cases). It was originally intended as a debugging tool. I can't imagine that you will get a better proof using this method than just multiplying the equations together</p>\n</blockquote>\n<p>But <code>ring</code> nowadays regularly tells you <code>Use this: ring_nf,</code></p>",
        "id": 251375958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630412898
    },
    {
        "content": "<p>Unfortunately, I would really like to avoid specifying <code>g</code>. To give you a sense of the reality of my situation, <code>g</code> is actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">‚àë</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n_var</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.fin_range</span> <span class=\"n\">n_var</span><span class=\"o\">,</span> <span class=\"n\">polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">A_x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n            <span class=\"bp\">‚àë</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n_var</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.fin_range</span> <span class=\"n\">n_var</span><span class=\"o\">,</span> <span class=\"n\">polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">B_x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this is not the real problem. The problem is when I go to formalize other SNARK constructions the equations will be different, and I have no idea if all of these variables will be different, or if there will be additional terms to the sum.</p>\n<p>Here's something that I think will solve my problem: If I rewrite <code>h1</code> and <code>h2</code> to <code>b = -a</code> and <code>f = -e</code>, it seems like running <code>ring_nf</code> on the result should do what I want.</p>",
        "id": 251443526,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630438114
    },
    {
        "content": "<p>Presumably just running ring also works there? <br>\nI think a variant of <code>ring_nf</code> that allows you to specify the term order would be a good addition to mathlib.</p>",
        "id": 251447065,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630439360
    },
    {
        "content": "<p>Isn't <code>finset.fin_range k</code> just <code>finset.univ</code>?</p>",
        "id": 251450248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630440404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/ring_nf.20changes.20goal.20twice/near/251375958\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/ring_nf.20changes.20goal.20twice/near/251322580\">said</a>:</p>\n<blockquote>\n<p>You shouldn't be using <code>ring_nf</code> in proofs anyway (in most cases). It was originally intended as a debugging tool. I can't imagine that you will get a better proof using this method than just multiplying the equations together</p>\n</blockquote>\n<p>But <code>ring</code> nowadays regularly tells you <code>Use this: ring_nf,</code></p>\n</blockquote>\n<p>It only says that when it \"fails\"</p>",
        "id": 251482599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630456573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/ring_nf.20changes.20goal.20twice/near/251294727\">said</a>:</p>\n<blockquote>\n<p>I would guess this is the same issue as <a href=\"https://github.com/leanprover-community/mathlib/issues/5711\">#5711</a>, <code>ring_nf</code> normalizes given a fixed order on the atoms, but when it is run again it picks a different order, as the ordering is based on the order it sees the atoms.</p>\n</blockquote>\n<p>Could the order instead be based on lexicographical order of the pretty-printed names, or something like that? That should give a stable ordering in 99.9% of the cases.</p>",
        "id": 251590508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630514469
    },
    {
        "content": "<p>It used to use <code>expr.lt</code> as the order, but that had issues with defeq</p>",
        "id": 251590946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630514643
    },
    {
        "content": "<p>If you assume there are no defeq clashes, then that would work fine, but if <code>a</code> and <code>d</code> are defeq then depending on which order you visit <code>a + b + c + d</code> you might end up with the list <code>a=d, b, c</code> or <code>b, c, d=a</code></p>",
        "id": 251591229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630514736
    },
    {
        "content": "<p>adding a pass to sort the atoms after collection will probably help in most cases though</p>",
        "id": 251591450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630514806
    }
]