[
    {
        "content": "<p>When developing in VS Code, double clicking <code>sorry</code> just shows an error message, but single clicking on it shows the tactic state.  Replacing <code>sorry</code> with <code>_</code> also shows the tactic state.</p>\n<p>What other tips and tricks are useful to know when using Lean in VS Code?</p>",
        "id": 284624908,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654095995
    },
    {
        "content": "<p>Is there a way to set up automatic indenting?</p>",
        "id": 284628471,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654097634
    },
    {
        "content": "<p>Is there a pretty printer for Lean, along the lines of clang-format (C++) or black (Python)?</p>",
        "id": 284639046,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654102388
    },
    {
        "content": "<p>Not yet. In will come in Lean 4 (but not very soon).</p>",
        "id": 284641691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654103562
    },
    {
        "content": "<p>It seems it should be straight forward to write one, as long as Lean 3 is straight forward to parse.  I've only seen a little of the language, but it seems easy to parse so far.</p>\n<p>What would be the best language to write the pretty printer in?  Lean itself, or is it unsuited to writing tools like that?</p>",
        "id": 284641926,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654103665
    },
    {
        "content": "<p>What is Lean itself written in?  OCaml?  Self-hosted?</p>",
        "id": 284642316,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654103872
    },
    {
        "content": "<p>Lean 4 is self hosted (for the most part a tiny bit of C++ is there still but not because it has to be but rather because the devs are busy with other stuff than removing it right now) and compiles to C, Lean 3 is written in C++ and a bytecode language.</p>",
        "id": 284642622,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654104025
    },
    {
        "content": "<p>Furthermore parsing Lean 4 in general is highly non trivial because users can extend the syntax in any way they desire, however Lean 4 also has large meta programming faciliities that allow you to access basically all information the compiler has about the code so you could use it to write a formatter</p>",
        "id": 284642730,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654104107
    },
    {
        "content": "<p>That's cool, I've often wanted extensible syntax and great meta programming facilities.  For a few years I programmed professionally in Common Lisp and since then always wanted a language where the meta language was the language itself.</p>\n<p>Sorry I wasn't clear, I was asking about how easy / hard it is to parse Lean 3, to make a pretty printer for Lean 3.  Is the C++ parser for Lean 3 reasonably separable?  Does it keep things like line and column information and whitespace, or does it toss them?</p>",
        "id": 284643353,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654104433
    },
    {
        "content": "<p>Not a question I am qualified to answer, for Lean 4 the answer is no, comments and whitespaces are discarded as far as I know (although you can make your custom syntax extensions sensitive to them)</p>",
        "id": 284644192,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654104870
    },
    {
        "content": "<p>The tools written to help port lean 3 to lean 4 (<a href=\"https://github.com/leanprover-community/mathport\">https://github.com/leanprover-community/mathport</a>) might be useful for writing a parser.<br>\nOne ingredient of the above is that you can run <code>lean --ast file.lean</code> to get an AST representation of what lean sees, which could certainly be helpful in writing a formatter. But this would still need a lot of work to get something acceptable out I believe, so maybe not really worth the effort.</p>",
        "id": 284647760,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654106478
    },
    {
        "content": "<p>Thanks to both of you.</p>",
        "id": 284648816,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654106969
    }
]