[
    {
        "content": "<p>In the corresponding sample, I'm trying to get the 2 out of the (alpha<em>beta</em>2) multiplication on the right. </p>\n<p>The lemma I've found does a little bit more, but I can't get the rewrite to work. </p>\n<p>Could anyone help me understand why it's expecting a function? I sort of get this in the context of an iff rewrite, because then it is a function, but I'm also supposed to be able to rewrite with an equality lemma, right? Thanks in advance!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">fact'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial_mul</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n        <span class=\"c1\">-- function expected at</span>\n        <span class=\"c1\">-- mv_polynomial.monomial_mul</span>\n        <span class=\"c1\">-- term has type</span>\n        <span class=\"c1\">-- ⇑(mv_polynomial.monomial ?m_4) ?m_5 * ⇑(mv_polynomial.monomial ?m_6) ?m_7 =</span>\n        <span class=\"c1\">-- ⇑(mv_polynomial.monomial (?m_4 + ?m_6)) (?m_5 * ?m_7)</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292006644,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659619530
    },
    {
        "content": "<p>It's not the rewrite,  this gives the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial.monomial_mul</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>The issue is that <code>mv_polynomial.monomial_mul</code>'s arguments are implicit, so you just need </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mv_polynomial.monomial_mul</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 292008053,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659620191
    },
    {
        "content": "<p>Ahhhh, so if arguments are between { }, it doesn't just mean it'll infer them, it also means you can't supply them? Though it's not a problem per se, I can rw multiple times in this case; is there any way I can specify which instance of a pattern I'd like to rewrite when the arguments are implicit like this?</p>",
        "id": 292008535,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659620418
    },
    {
        "content": "<p>Yes, you can use <code>@</code>. If you call <code>@mv.polynomial.monomial_mul</code> it will expect <em>all</em> variables, both those in <code>{}</code> and those in <code>[]</code>.</p>",
        "id": 292008851,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659620566
    },
    {
        "content": "<p>Follow-up question. I'm failing at another rewrite, I've checked the whole expression in the hypothesis and goal and the brackets and such seem to match, so I'm guessing it's a type coercion thing or something of that sort.</p>\n<p>Two questions: How do I fix this, but perhaps more importantly, how could I debug something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.homogeneous</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_waring_decomposition</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">mv_polynomial.homogeneous_submodule</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i.2</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">i.1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">waring_rank</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">mv_polynomial.homogeneous_submodule</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">is_waring_decomposition</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">sizeof</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simple_waring_rank</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">mv_polynomial.homogeneous_submodule</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">waring_rank</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span>  <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">choose_α_β</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">α</span><span class=\"bp\">*</span><span class=\"n\">β</span> <span class=\"bp\">∧</span> <span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">mv_polynomial.coeff</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">cases</span> <span class=\"n\">choose_α_β</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">β</span> <span class=\"n\">hαβ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">fact₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">ring_nf</span> <span class=\"n\">SOP</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mv_polynomial.ext_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.monomial_pow</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.monomial_mul</span><span class=\"o\">,</span> <span class=\"n\">finsupp.smul_single'</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.coeff_add</span><span class=\"o\">,</span>\n  <span class=\"n\">mv_polynomial.coeff_monomial</span><span class=\"o\">],</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hαβ</span> <span class=\"k\">with</span> <span class=\"n\">hmiddle</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">hfirst</span> <span class=\"n\">hlast</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hfirst</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hlast</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">fact'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"c1\">-- Another rewrite failure?</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fact'</span><span class=\"o\">,</span>\n\n\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292015807,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659623642
    },
    {
        "content": "<p>The problem is that in the goal the polynomails are supported on <code>fin 2</code> and in <code>fact'</code> they are supported on <code>nat</code>.</p>",
        "id": 292025714,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659627784
    },
    {
        "content": "<p>You can click on the VSCode widget to see it.</p>",
        "id": 292025740,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659627797
    },
    {
        "content": "<p>Thanks, that makes a ton of sense:)</p>",
        "id": 292025945,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659627892
    },
    {
        "content": "<p>You can use <code>@</code>again to force where they are supported in <code>fact'</code>.</p>",
        "id": 292025990,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659627915
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">fact'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mv_polynomial.monomial_mul</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.monomial_eq_C_mul_X</span><span class=\"o\">],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.C_mul</span><span class=\"o\">,</span> <span class=\"n\">map_bit0</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.C_1</span><span class=\"o\">],</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n</code></pre></div>\n<p>I ended up squeezing in a type ascription in and that seems to do the trick too:)</p>",
        "id": 292026154,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659627984
    },
    {
        "content": "<p>Looks like Filippo beat me to it, but yeah, I was suspicious of the twos, so I clicked on them:<br>\n<a href=\"/user_uploads/3121/miDCdvEXwyoNfvFAgpMFkkkK/Screenshot-from-2022-08-04-18-02-08.png\">Screenshot-from-2022-08-04-18-02-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/miDCdvEXwyoNfvFAgpMFkkkK/Screenshot-from-2022-08-04-18-02-08.png\" title=\"Screenshot-from-2022-08-04-18-02-08.png\"><img src=\"/user_uploads/3121/miDCdvEXwyoNfvFAgpMFkkkK/Screenshot-from-2022-08-04-18-02-08.png\"></a></div>",
        "id": 292028952,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659629116
    },
    {
        "content": "<p>Okay, so I'm now putting (fin 2) everywhere, but I'm stuck at a \"failed to synthesize type class for mul_zero_one_class (fin 2)\".</p>\n<p>Any pointers for what I should put on the blank and/or how I could find that out?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact_disjoint_support</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">finsupp.support_add_eq</span> <span class=\"o\">((</span><span class=\"n\">finsupp.support_single_disjoint</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"n\">_</span><span class=\"o\">))</span>\n                <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292048019,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659636277
    },
    {
        "content": "<p>That last fin 2 should be ℕ I think</p>",
        "id": 292498400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659993737
    }
]