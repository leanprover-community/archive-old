[
    {
        "content": "<p>In this example, why do I have to reprove the property of my function lifted into the quotient? I would have thought that <code>map2_mk</code> is able to retrieve it from the function itself. The lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient\">docs#quotient</a>.map₂_mk is tagged <code>@[simp]</code> where it is defined.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.with_zero</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semigroup</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cancel_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"c1\">-- we twist the multiplication to simplify refl and symm proofs</span>\n<span class=\"c1\">-- the definition is equivalent to `(a, a') ≈ (b, b') &lt;-&gt; a * b' = a' * b` due to the commutativity assumption</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_pair_setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq.symm</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">q.snd</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">q.snd</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cancel_left</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">mul_pair_setoid</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_pair_equiv_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≈</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_pair_left_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotient.eq</span><span class=\"o\">,</span> <span class=\"n\">mul_pair_equiv_iff</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mul_pair_quotient</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">G</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">mul_pair_setoid</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.map₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span><span class=\"o\">))</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩</span> <span class=\"n\">hac</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d'</span><span class=\"o\">⟩</span> <span class=\"n\">hbd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_pair_equiv_iff</span><span class=\"o\">,</span> <span class=\"n\">quotient.eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">hac</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mul</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- why do I have to provide the proof again?</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.map₂_mk</span> <span class=\"n\">_</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩</span> <span class=\"n\">hac</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d'</span><span class=\"o\">⟩</span> <span class=\"n\">hbd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_pair_equiv_iff</span><span class=\"o\">,</span> <span class=\"n\">quotient.eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">hac</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mul_pair_quotient</span>\n</code></pre></div>",
        "id": 271404639,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644484728
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient.map₂_mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271406194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644485687
    },
    {
        "content": "<p>All of those are \"term-like\" tactics, so why doesn't just the <code>refine</code> step work?</p>",
        "id": 271406263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644485738
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">has_mul.mul</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient.map₂_mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271406455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644485841
    },
    {
        "content": "<p>The elaborator can't infer the implicit arguments correctly for you unless you unfold things in the right order for it, it seems</p>",
        "id": 271406493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644485859
    },
    {
        "content": "<p>Thanks. This is helpful for the API I am building, but I still don't grok what's \"wrong\"</p>",
        "id": 271406552,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644485896
    },
    {
        "content": "<p>(as an aside, note that <code>(λ (p q : S × S), (p.1 * q.1, p.2 * q.2))</code> is just <code>(*)</code>)</p>",
        "id": 271406557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644485899
    },
    {
        "content": "<p>And if you really want term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">quotient.map₂_mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 271406665,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644485987
    },
    {
        "content": "<p>Term mode or tactic mode, I don't understand why <code>show _, from _</code> is necessary for the unification(?) to occur</p>",
        "id": 271406732,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644486015
    },
    {
        "content": "<p>My guess is that it unfolds things in the wrong order</p>",
        "id": 271407024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644486137
    },
    {
        "content": "<p>Here's a version without <code>show</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mk_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">*</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">q.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">quotient.map₂_mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"bp\">⟦</span><span class=\"n\">p</span><span class=\"bp\">⟧</span> <span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271407073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644486171
    }
]