[
    {
        "content": "<p>How do I find what exactly is preloaded in lean? I mean staff like natural numbers booleans are already defined. Where do I find all the definitions?</p>",
        "id": 209936992,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600012170
    },
    {
        "content": "<p>Ok, I found it. However, I would like to use some library functions as examples and I would prefer to use the same names not to confuse the students. How can I avoid loading at least part of the core? So for example I want to define</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bnot</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">â†’</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n</code></pre></div>\n\n\n<p>but obviously I get an error. :-(</p>",
        "id": 209937551,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600012877
    },
    {
        "content": "<p>If you write <code>prelude</code> at the top of your file then nothing will be implicitly imported.<br>\nWhether this is a good approach is a separate question... you will also be missing (for example) all tactics, and importing those will possibly import other stuff you don't want. So another option is to put all your custom stuff in a <code>namespace</code>.</p>",
        "id": 209937966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600013414
    },
    {
        "content": "<p>I use namespaces when teaching: if you <code>namespace foo</code> and then define <code>bnot</code> then, within the <code>foo</code> namespace, Lean will (hopefully) prefer your <code>bnot</code> to the builtin one.</p>",
        "id": 209938738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600014614
    },
    {
        "content": "<p>Ok but now I notice that namespaces don't allow me to redefine notations. :-(<br>\nSorry but coming from agda the lean syntax is positively Stone Age.</p>",
        "id": 209939079,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600015243
    },
    {
        "content": "<p>This is interesting to hear -- I've had no experience with other provers at all so I don't know what I'm missing out on. There are all sorts of tricks you can do with notation, so I wouldn't give up hope yet. What exactly are you trying to do? NB notation in Lean 4 will be better, but there's still no release.</p>",
        "id": 209939092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600015313
    },
    {
        "content": "<p>In Agda infix (or even mixfix) identifiers are written like this _&amp;&amp;_ and the arguments go where the underlines are. So I can redefine it like any other function. Only disadvantages you have to use spaces to separate tokens (but one gets used to this very quickly).</p>",
        "id": 209939149,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600015386
    },
    {
        "content": "<p>Basically I tried to redefine &amp;&amp; and || because I think the prelude definitions are brain damaged. Or to be more polite: my examples don't work because I have uneccessarily to match on the 2nd argument. My way out is now to use &amp; and | instead. Maybe this is actually better then redefining the ones which are there.</p>",
        "id": 209939224,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600015507
    },
    {
        "content": "<p>The equation compiler does not always define things the way you expect them to be defined, when matching on more than one thing: <code>#print prefix &lt;what you just defined&gt;</code> is always worth inspecting.</p>",
        "id": 209939510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600015995
    },
    {
        "content": "<p>What's the error you're seeing about notation?</p>",
        "id": 209939604,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600016131
    },
    {
        "content": "<p>Do you mean that &amp;&amp; is fixed to be the notation for the root band?</p>",
        "id": 209939668,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600016191
    },
    {
        "content": "<p>You can probably use local notation for yours?</p>",
        "id": 209939676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600016210
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">61</span><span class=\"o\">:</span><span class=\"mi\">53</span><span class=\"o\">:</span> <span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">notb</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">notb</span> <span class=\"n\">y</span>\n  <span class=\"n\">notb</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">notb</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>actually now I have decided to use &amp; and | instead since I am defining the operations in a different way anyway.</p>",
        "id": 209940887,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600017889
    },
    {
        "content": "<p>I think defining notation locally (using keyword local) can override any previous notation, but I'm not sure. You could possibly also change the has_and instance to point to your definition instead.</p>",
        "id": 209941385,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600018600
    },
    {
        "content": "<p><code>|</code> is already used in set notation but hopefully there won't be a problem.</p>",
        "id": 209941396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600018638
    }
]