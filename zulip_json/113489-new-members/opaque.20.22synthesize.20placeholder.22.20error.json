[
    {
        "content": "<p>Below I make a definition <code>chain_decomposition</code>. Lean doesn't complain when i declare it, and also doesn't complain when I <code>#check</code>it, but does complain when I try to use it in any sense. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_chain</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">chain_decomposition</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">chains</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">chains_spec</span> <span class=\"o\">:</span> <span class=\"n\">chains</span> <span class=\"bp\">=</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">classes</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">chain_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">chains</span><span class=\"o\">,</span> <span class=\"n\">is_chain</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">chain_decomposition</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 198285342,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035157
    },
    {
        "content": "<p>specifically I get </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>\n\n\n<p>at the end of my mwe</p>",
        "id": 198285423,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035212
    },
    {
        "content": "<p>I think this is either universe polymorphism stuff or <code>variables</code> stuff, but maybe I'm making a much more basic error</p>",
        "id": 198285438,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035241
    },
    {
        "content": "<p>Shouldn't <code>alpha</code> be explicit in the structure def</p>",
        "id": 198285537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590035393
    },
    {
        "content": "<p>In your <code>example</code>, <code>C</code> is a chain decomposition, but of what?</p>",
        "id": 198285586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590035413
    },
    {
        "content": "<p>So you want <code>C : chain_decomposition \\alpha</code></p>",
        "id": 198285593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590035425
    },
    {
        "content": "<p>Does that mean I don't get to exploit <code>variables</code> to make my other definitions shorter?</p>",
        "id": 198285600,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035447
    },
    {
        "content": "<p>This works, following Johan's suggestion:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_antichain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">chain_decomposition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">chains</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">chains_spec</span> <span class=\"o\">:</span> <span class=\"n\">chains</span> <span class=\"bp\">=</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">classes</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">chain_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">chains</span><span class=\"o\">,</span> <span class=\"n\">is_chain</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">chain_decomposition</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 198285624,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035506
    },
    {
        "content": "<p>hmm okay, i think it's clear to me that I was asking for magic</p>",
        "id": 198285673,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035555
    },
    {
        "content": "<p><code>variables</code> just declare types, they don't magically add arguments to all definitions&amp;lemmas.</p>",
        "id": 198285749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590035677
    },
    {
        "content": "<p>The magic i want is to say at the beginning of my file \"whenever I say α, I mean a term of <code>Type u</code> with instance of <code>partial_order</code> and <code>fintype</code>\"</p>",
        "id": 198285767,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035725
    },
    {
        "content": "<p>but really i should tell every function what typeclass instances it needs</p>",
        "id": 198285823,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035779
    },
    {
        "content": "<p>and if I have a huge list of typeclasses I should make a typeclass that includes all of them</p>",
        "id": 198285846,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035794
    },
    {
        "content": "<p>You can declare <code>variables {α : Type u} [partial_order α] [fintype α]</code>, then declare <code>chain_decomposition (α : Type u)</code> (this will be another <code>α</code>, so add typeclasses if needed), then use <code>α</code> again.</p>",
        "id": 198285847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590035799
    },
    {
        "content": "<p>Or you can use <code>variable (α)</code> before <code>chain_decomposition</code> and <code>variable {α}</code> after it.</p>",
        "id": 198285868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590035830
    },
    {
        "content": "<p>So <code>variable (α)</code> does add an argument to every definition?</p>",
        "id": 198285882,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035871
    },
    {
        "content": "<p>/me goes off to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#variables-and-sections\">tpil section 2.6</a></p>",
        "id": 198285937,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590035916
    },
    {
        "content": "<p>Yes and no.</p>\n<ol>\n<li>If a definition/theorem uses <code>α</code>, then <code>variable (α) [partial_order α]</code> will automatically add <code>(α) [partial_order α]</code> to arguments.</li>\n<li>This doesn't work if a definition/theorem uses <code>α</code> only inside a tactic block (<code>by</code>, <code>begin...end</code>).</li>\n</ol>",
        "id": 198286051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590036118
    },
    {
        "content": "<p>Try Section 6.2</p>",
        "id": 198286131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590036206
    },
    {
        "content": "<p>I think i am a fan of this switching between <code>variable (α)</code> and <code>variable {α}</code> business, it feels pretty close to the magic I wanted</p>",
        "id": 198286195,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590036269
    },
    {
        "content": "<p>maybe I am now at a point where if i read tpil cover to cover I will remember most of it</p>",
        "id": 198286271,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590036381
    },
    {
        "content": "<p>section 6.2 says the things I want, thanks for the pointer :)</p>",
        "id": 198286299,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590036406
    },
    {
        "content": "<p>I read tpil cover to cover three times and got more out of it each time (typeclasses only made sense to me the third time)</p>",
        "id": 198292613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590045187
    },
    {
        "content": "<p>I rarely read any book cover to cover</p>",
        "id": 198292626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590045207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Including fiction?</p>",
        "id": 198292652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590045239
    },
    {
        "content": "<p>yeah</p>",
        "id": 198292691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590045245
    },
    {
        "content": "<p>I think the only math texts i have read cover-to-cover are abridged lecture notes for a course or papers written by me</p>",
        "id": 198294393,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590047015
    },
    {
        "content": "<p>Out of interest what are you trying to prove here?</p>",
        "id": 198384221,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590099372
    },
    {
        "content": "<p>dilworth's theorem on maximal antichains and minimal chain decompositions</p>",
        "id": 198384300,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590099454
    }
]