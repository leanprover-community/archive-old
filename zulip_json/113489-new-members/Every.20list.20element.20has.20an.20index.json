[
    {
        "content": "<p>I need the following observation or some variation on it. Any idea, please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">lis</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">lis</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n_lt_len</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lis.length</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.nth_le</span> <span class=\"n\">lis</span> <span class=\"n\">n</span> <span class=\"n\">n_lt_len</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273688560,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646159513
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mem_iff_nth_le\">docs#list.mem_iff_nth_le</a></p>",
        "id": 273693722,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1646161544
    }
]