[
    {
        "content": "<p>Is there a tactic that allows me to just say: \"apply these 3 terms/lemmas in whichever order is needed to prove the result\"?</p>",
        "id": 202952257,
        "sender_full_name": "Chris M",
        "timestamp": 1594008914
    },
    {
        "content": "<p><code>solve_by_elim</code> might work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202952447,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594009224
    },
    {
        "content": "<p>This is motivated by this massively long proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span>  <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">inf_le_left</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">x</span>        <span class=\"o\">:</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span>  <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">inf_le_left</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">y</span>        <span class=\"o\">:</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span>  <span class=\"bp\">≤</span> <span class=\"n\">z</span>             <span class=\"o\">:</span> <span class=\"n\">inf_le_right</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n            <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span>  <span class=\"bp\">≤</span> <span class=\"n\">x</span>     <span class=\"o\">:</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n            <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span>  <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">inf_le_right</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">y</span>        <span class=\"o\">:</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n            <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span>  <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">inf_le_right</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">≤</span>  <span class=\"n\">z</span>        <span class=\"o\">:</span> <span class=\"n\">inf_le_right</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Where I want to just say something like: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">inf_le_right</span><span class=\"o\">,</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span> <span class=\"n\">le_inf</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 202952463,
        "sender_full_name": "Chris M",
        "timestamp": 1594009285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  The following doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">inf_le_right</span><span class=\"o\">,</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span> <span class=\"n\">le_inf</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It doesn't improve the goal state.</p>",
        "id": 202952758,
        "sender_full_name": "Chris M",
        "timestamp": 1594009802
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202952987,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594010229
    },
    {
        "content": "<p>this is like Coq Ltac</p>",
        "id": 202952988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010230
    },
    {
        "content": "<p>if you rewrite inf_assoc then you have already cleared the goal lol</p>",
        "id": 202952994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010253
    },
    {
        "content": "<p>oh lol!</p>",
        "id": 202952997,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594010261
    },
    {
        "content": "<p>the point is to prove inf_assoc</p>",
        "id": 202952998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010261
    },
    {
        "content": "<p>using inf_le_left etc</p>",
        "id": 202952999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you know Coq Ltac?</p>",
        "id": 202953108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010447
    },
    {
        "content": "<p>they can say things like, \"if the goal looks like foo, then apply bar\"</p>",
        "id": 202953110,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010457
    },
    {
        "content": "<p>I've been wanting to ask about this</p>",
        "id": 202953113,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010470
    },
    {
        "content": "<p>you can do that in non-interactive tactics</p>",
        "id": 202953119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594010483
    },
    {
        "content": "<p>you can also write non-interactive tactics inside a begin-end block if it's not reusable</p>",
        "id": 202953125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594010517
    },
    {
        "content": "<p>but do we have that functionality currently?</p>",
        "id": 202953167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010548
    },
    {
        "content": "<p>what are non-interactive tactics?</p>",
        "id": 202953221,
        "sender_full_name": "Chris M",
        "timestamp": 1594010651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">Ltac</span> <span class=\"n\">perm_aux</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">goal</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"o\">|-</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"o\">_</span> <span class=\"o\">?</span><span class=\"n\">l</span> <span class=\"o\">?</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">apply</span> <span class=\"n\">perm_refl</span>\n  <span class=\"o\">|</span> <span class=\"o\">|-</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"o\">_</span> <span class=\"o\">(?</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">?</span><span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"o\">(?</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">?</span><span class=\"n\">l2</span><span class=\"o\">))</span> <span class=\"o\">=&gt;</span>\n     <span class=\"k\">let</span> <span class=\"n\">newn</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"k\">compute</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n         <span class=\"o\">(</span><span class=\"k\">apply</span> <span class=\"n\">perm_cons</span><span class=\"o\">;</span> <span class=\"n\">perm_aux</span> <span class=\"n\">newn</span><span class=\"o\">)</span>\n  <span class=\"o\">|</span> <span class=\"o\">|-</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"o\">(?</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">?</span><span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"o\">?</span><span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span>\n     <span class=\"k\">match</span> <span class=\"n\">eval</span> <span class=\"k\">compute</span> <span class=\"k\">in</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n     <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">=&gt;</span> <span class=\"n\">fail</span>\n     <span class=\"o\">|</span> <span class=\"o\">_</span> <span class=\"o\">=&gt;</span>\n         <span class=\"k\">let</span> <span class=\"n\">l1&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">constr</span><span class=\"o\">:(</span><span class=\"n\">l1</span> <span class=\"o\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n         <span class=\"o\">(</span><span class=\"k\">apply</span> <span class=\"o\">(</span><span class=\"n\">perm_trans</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"n\">l1&#39;</span> <span class=\"n\">l2</span><span class=\"o\">);</span>\n         <span class=\"o\">[</span> <span class=\"k\">apply</span> <span class=\"n\">perm_append</span> <span class=\"o\">|</span> <span class=\"k\">compute</span><span class=\"o\">;</span> <span class=\"n\">perm_aux</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">])</span>\n     <span class=\"k\">end</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 202953241,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010707
    },
    {
        "content": "<p>^ an example of Ltac <code>match goal with</code></p>",
        "id": 202953243,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010718
    },
    {
        "content": "<p>so we can build tactics that apply inf_le_left and le_inf</p>",
        "id": 202953250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010748
    },
    {
        "content": "<p>like a custom solver for lattice equations</p>",
        "id": 202953253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594010761
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202953310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594010877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Did you define <code>infs</code> specifically for this purpose?</p>",
        "id": 202953470,
        "sender_full_name": "Chris M",
        "timestamp": 1594011195
    },
    {
        "content": "<p>yes</p>",
        "id": 202953516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594011288
    },
    {
        "content": "<p>does <code>&lt;|&gt;</code> mean \"try either the left or right hand side, whichever works\"?</p>",
        "id": 202953528,
        "sender_full_name": "Chris M",
        "timestamp": 1594011328
    },
    {
        "content": "<p>the left hand side first</p>",
        "id": 202953530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594011335
    },
    {
        "content": "<p>The only reason it is not literally in the begin-end block of the theorem is because it's recursive and that's annoying to write without a global definition</p>",
        "id": 202953531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594011337
    },
    {
        "content": "<p>I think that these kind of \"light weight custom tactics\" are underrated in proof scripts</p>",
        "id": 202953590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594011453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_inf</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">infs</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n</code></pre></div>",
        "id": 202953794,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594011805
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs_and_sups</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs_and_sups</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs_and_sups</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_sup_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs_and_sups</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_sup_right_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs_and_sups</span><span class=\"o\">}]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_inf</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">sup_le</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">infs_and_sups</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n</code></pre></div>",
        "id": 202954063,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594012285
    },
    {
        "content": "<p>I think you just wrote a prover for intuitionistic logic</p>",
        "id": 202954099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594012322
    },
    {
        "content": "<p>oh right they're the same as lattices</p>",
        "id": 202954128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594012343
    },
    {
        "content": "<p>where's my complement</p>",
        "id": 202954130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594012348
    },
    {
        "content": "<p>heyting lattices to be precise</p>",
        "id": 202954136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594012369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , did you just write the <code>lattice</code> tactic for the first time, or is it already part of the library?</p>",
        "id": 202954142,
        "sender_full_name": "Chris M",
        "timestamp": 1594012394
    },
    {
        "content": "<p>for the first time</p>",
        "id": 202954145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594012401
    },
    {
        "content": "<p>nice</p>",
        "id": 202954150,
        "sender_full_name": "Chris M",
        "timestamp": 1594012422
    },
    {
        "content": "<p>generally speaking if it appears in a code block on zulip it was just written</p>",
        "id": 202954151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594012423
    },
    {
        "content": "<p>the procedure is pretty simple: split on everything and apply all assumptions</p>",
        "id": 202954213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594012526
    },
    {
        "content": "<p><code>solve_by_elim</code> is good at this, although note that its default <code>max_depth</code> is very low (3!)</p>",
        "id": 202956033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594015485
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">solve_by_elim</span>\n  <span class=\"o\">[</span><span class=\"n\">le_antisymm</span><span class=\"o\">,</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span> <span class=\"n\">sup_le</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">,</span>\n    <span class=\"n\">le_sup_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">le_sup_right_of_le</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">max_depth</span> <span class=\"o\">:=</span> <span class=\"mi\">30</span><span class=\"o\">}]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">lattice</span>\n</code></pre></div>",
        "id": 202956034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594015488
    },
    {
        "content": "<p>(In this case, because of the shape of the lemmas, there's no danger setting a high <code>max_depth</code>; it would be fine probably to set it to 1000.)</p>",
        "id": 202956111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594015576
    },
    {
        "content": "<p>I'm not claiming that this is superior to Kenny's hand-rolled tactic; just that this sort of machinery is available \"out of the box\" as well.</p>",
        "id": 202956124,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594015619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20for.20.22apply.20in.20some.20order.22/near/202953310\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I am confused as to why the following doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">}}}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I would have guessed that this is equivalent to your solution using <code>infs</code>.</p>",
        "id": 203230897,
        "sender_full_name": "Chris M",
        "timestamp": 1594183384
    },
    {
        "content": "<p>because <code>infs</code> allows for tree-like search while your translation can only apply one tactic at a time</p>",
        "id": 203232869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594186375
    },
    {
        "content": "<p>Ah I see it now, thanks :)</p>",
        "id": 203352248,
        "sender_full_name": "Chris M",
        "timestamp": 1594273052
    },
    {
        "content": "<p>So a followup question:<br>\nIn this code by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, we use <code>inf_le_left_of_le</code> instead of <code>inf_le_left</code> as I do in the original <code>calc</code> proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right_of_le</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I understand this is because <code>calc</code> has its own implicit use of <code>le_trans</code> and similar terms, and hence we can't just write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}]</span>\n</code></pre></div>\n\n\n<p>However, it would be nice if we can somehow define <code>infs</code> instead to say something like \"use <code>inf_le_left</code> and <code>inf_le_right</code> and make a <code>calc</code> proof from them using the appropriate transitivity terms\", without either  having to know the names of those transitivity terms or the name <code>inf_le_left_of_le</code>. Is this possible?</p>",
        "id": 203353447,
        "sender_full_name": "Chris M",
        "timestamp": 1594274887
    },
    {
        "content": "<p>It is possible to change the tactic to use <code>le_trans</code> and <code>inf_le_left</code> instead of <code>inf_le_left_of_le</code>, but general proof search using <code>le_trans</code> is messy because it has an undetermined middle variable</p>",
        "id": 203353512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594275002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">infs</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span> <span class=\"n\">infs</span><span class=\"o\">}]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203353566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594275090
    }
]