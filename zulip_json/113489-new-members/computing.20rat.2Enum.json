[
    {
        "content": "<p>I was surprised I can't find an easier way to prove this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">explicit_num</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.num</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">rat.num_div_eq_of_coprime</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this the go-to way or is there an easier way?</p>",
        "id": 263890510,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1638813818
    },
    {
        "content": "<p>Huh, I would have thought <code>by { rw h, refl }</code> would work, since everything is computable...</p>",
        "id": 263927095,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638826088
    },
    {
        "content": "<p>I tried <code>subst h, norm_num</code> but that didn't work either</p>",
        "id": 263927979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638826508
    },
    {
        "content": "<p>I'm not an expert, but I think there is no shorter way, not because someone was lazy to implement it, but simply because that's the minimal amount of work you have to invest to express what you want to obtain. Each rational number is fully reduced. Division of rational numbers is a function, not a structure. When written syntactically as <code>1 / 3</code> it seems obvious that <code>1</code> and <code>3</code> are coprime, that <code>1</code> is an integer and that <code>3</code> is a positive natural number. But note that it could be written as <code>2 / 6</code> or <code>(-3) / (-9)</code> or in many other ways.</p>\n<p>What I'm trying to say is that each part of the proof is necessary. <code>convert</code> is needed to deal with nat/int/rat conversions. <code>1</code> and <code>3</code> are needed to explicitly specify that we know what the numerator and the denominator of the reduced fraction are. <code>linarith</code> is needed because it is probably the easiest way to prove that <code>3</code> is a positive integer. And <code>simp [h]</code> is needed to actually use the hypothesis.</p>\n<p>It is possible to write a tactic to do this automatically. Given a rational number of the form <code>a / b</code>, the tactic would produce a local hypothesis <code>(a / b).num = a</code>, or produce an error if it is not true. I'm not on that level yet to write such tactic, sorry.</p>",
        "id": 263961999,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638856626
    },
    {
        "content": "<p>This is what I don't understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails quickly</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span>              <span class=\"c1\">-- outputs `int.of_nat 2` quickly</span>\n</code></pre></div>",
        "id": 263963892,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638858733
    },
    {
        "content": "<p>Ah progress, this also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.gcd</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p><code>#print axioms</code> indicates that <code>nat.gcd</code> uses <code>propext</code> (in the proof of termination). So the rationals are not so constructive after all <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\nBut now I don't totally understand why <code>#reduce nat.gcd 1 1</code> <em>does</em> work.</p>",
        "id": 263964663,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638859654
    },
    {
        "content": "<p>I guess if <code>nat.gcd 1 1 = 1 := rfl</code> doesn't work, then neither should this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">nat.coprime'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nat.coprime</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">then</span> <span class=\"n\">decidable.is_true</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span>\n  <span class=\"k\">else</span> <span class=\"n\">decidable.is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"n\">x.succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.succ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">nat.coprime'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"n\">x.succ</span><span class=\"o\">)</span> <span class=\"n\">x.succ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decidable.is_true</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">decidable.is_true</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat.coprime</span><span class=\"o\">,</span> <span class=\"n\">nat.gcd</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decidable.is_false</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">decidable.is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat.coprime</span><span class=\"o\">,</span> <span class=\"n\">nat.gcd</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.coprime</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 263965021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638860141
    },
    {
        "content": "<p>I guess <a href=\"https://github.com/leanprover-community/lean/issues/562\">lean#562</a> is related</p>",
        "id": 263966106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638861313
    },
    {
        "content": "<p>That seems to be it. It works <a href=\"https://leanprover.github.io/live/latest/#code=import%20tactic%0A%0Aexample%20:%20nat.gcd%201%203%20=%201%20:=%20rfl%0A%0Ainstance%20nat.coprime'%20:%20%CE%A0%20(x%20y%20:%20%E2%84%95),%20decidable%20(nat.coprime%20x%20y)%0A%7C%200%20%20%20%20%20y%20:=%0A%20%20if%20h%20:%20y%20=%201%0A%20%20then%20decidable.is_true%20(by%20simp%20%5Bnat.coprime,%20h%5D)%0A%20%20else%20decidable.is_false%20(by%20simp%20%5Bnat.coprime,%20h%5D)%0A%7C%20(nat.succ%20x)%20y%20:=%20have%20y%20%25%20x.succ%20%3C%20x.succ,%20from%20nat.mod_lt%20_%20$%20nat.succ_pos%20_,%0A%20%20match%20nat.coprime'%20(y%20%25%20x.succ)%20x.succ%20with%0A%20%20%7C%20decidable.is_true%20h%20:=%20decidable.is_true%20(by%20simpa%20%5Bnat.coprime,%20nat.gcd%5D%20using%20h)%0A%20%20%7C%20decidable.is_false%20h%20:=%20decidable.is_false%20(by%20simpa%20%5Bnat.coprime,%20nat.gcd%5D%20using%20h)%0A%20%20end%0A%0Aexample%20:%20nat.coprime%201%203%20:=%20dec_trivial\">in an old version of lean</a>)</p>",
        "id": 263966468,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638861736
    },
    {
        "content": "<p>I think this might explain all the mysterious problems I had trying to get some <code>dec_trivial</code> proofs to work a few months ago.</p>",
        "id": 263966526,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638861811
    },
    {
        "content": "<p>and then I think the kernel doesn't care about any of this \"lemma\" or \"irreducible\" nonsense, and will just unfold anything that it needs to, and that's why <code>#reduce</code> does still work</p>",
        "id": 263966530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638861815
    },
    {
        "content": "<p>There are clearly some missing <code>norm_num</code> plugins for <code>nat.gcd</code>, <code>nat.coprime</code>, <code>rat.num</code> and <code>rat.denom</code></p>",
        "id": 263973733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638867922
    },
    {
        "content": "<p>the proof should be <code>by rw h; norm_num</code></p>",
        "id": 263973758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638867945
    },
    {
        "content": "<p>I still don’t understand why <code>#reduce</code> works but not <code>rfl</code></p>",
        "id": 263979943,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1638871660
    },
    {
        "content": "<p>I assume that #reduce is allowed to reduce <code>acc.rec</code> but <code>rfl</code> isn't?</p>",
        "id": 263981314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638872504
    },
    {
        "content": "<p>My conclusion was that the elaborator does not unfold lemmas (like <code>mod_lt</code> used in the proof of termination) but the kernel does</p>",
        "id": 264019265,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638891989
    }
]