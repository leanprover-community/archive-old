[
    {
        "content": "<p>if {x // p x} = {x // q x}, then is it true that p = q?</p>",
        "id": 133907830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536867134
    },
    {
        "content": "<p>Pretty sure it's independent unless they're different sizes.</p>",
        "id": 133907874,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536867189
    },
    {
        "content": "<p>great, I just found another independent proposition</p>",
        "id": 133908076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536867382
    },
    {
        "content": "<p>ZFC 1 : 0 Lean</p>",
        "id": 133908080,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536867386
    },
    {
        "content": "<p>Lean has loads of independent propositions like this</p>",
        "id": 133909373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536868638
    },
    {
        "content": "<p>ZFC aleph[0] : 0 Lean</p>",
        "id": 133909397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868672
    },
    {
        "content": "<p>Equality of types is essentially \"freely generated\"; unless it's obviously true it's probably independent</p>",
        "id": 133909398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536868673
    },
    {
        "content": "<p>of course there is a whole cottage industry built around alternative models that fit in this gap (see: HoTT)</p>",
        "id": 133909453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536868728
    },
    {
        "content": "<p>the distance from axioms to independent statements is very short in lean:</p>\n<div class=\"codehilite\"><pre><span></span>inductive A. inductive B.\nexample : A = B := independent\n</pre></div>",
        "id": 133909548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536868836
    },
    {
        "content": "<p>wait what</p>",
        "id": 133909561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868849
    },
    {
        "content": "<p>well I suppose it makes sense</p>",
        "id": 133909567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868858
    },
    {
        "content": "<p>so we can essentially have two copies of <code>empty</code> and nobody will notice</p>",
        "id": 133909593,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868881
    },
    {
        "content": "<p>also is there any way to create an inductive type?</p>",
        "id": 133909604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868896
    },
    {
        "content": "<p>inside a proof?</p>",
        "id": 133909605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868900
    },
    {
        "content": "<p>i.e. how much does Lean itself know about inductive types?</p>",
        "id": 133909613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868910
    },
    {
        "content": "<p>oh wait, I forgot to define equality</p>\n<div class=\"codehilite\"><pre><span></span>prelude\ninductive A. inductive B.\ninductive eqA : Type â†’ Type | refl : eqA A\nexample : eqA B := independent\n</pre></div>",
        "id": 133909625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536868922
    },
    {
        "content": "<p>lol</p>",
        "id": 133909675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536868946
    },
    {
        "content": "<p>inductive types in lean are essentially an axiom schema</p>",
        "id": 133909720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536869012
    },
    {
        "content": "<p>you have to write down the type specification, and then poof appears a new type constant</p>",
        "id": 133909741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536869041
    },
    {
        "content": "<p>so they only work at the top level</p>",
        "id": 133909795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536869059
    },
    {
        "content": "<p>I see</p>",
        "id": 133909828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536869093
    },
    {
        "content": "<p>although you can always define a very general type and then narrow it down from inside a definition, i.e. defining a particular subtype of sigma of W type of whatever rather than writing a new inductive type</p>",
        "id": 133909849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536869121
    }
]