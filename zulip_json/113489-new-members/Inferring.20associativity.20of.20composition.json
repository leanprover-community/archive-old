[
    {
        "content": "<p>I'm trying to understand how instances are inferred for composition of functions or linear maps. Why does the first example work, but the second one fails?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_associative</span><span class=\"bp\">.</span><span class=\"n\">assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"c1\">-- does not work, cannot find instance for is_associative</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">is_associative</span><span class=\"bp\">.</span><span class=\"n\">assoc</span> <span class=\"bp\">_</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201182609,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592418841
    },
    {
        "content": "<p>From <code>set_option trace.class_instances true</code>, we can see that it derives <code>is_associative</code> from the <code>monoid</code> instance on <code>linear_map</code>, but that only works for specific linear maps, from a semimodule <code>M</code> to <code>M</code> itself. In the first example, the expected type gives the elaborator enough information to finish the typeclass search. Passing the term as an argument to <code>rw</code> doesn't give it an expected type, so there are not enough constraints to find the <code>monoid</code> instance. If you help the typeclass search by writing <code>rw @is_associative.assoc (linear_map R (n → R) (n → R)) linear_map.comp (by apply_instance)</code>, it does have enough information to succeed.</p>",
        "id": 201247385,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1592473713
    }
]