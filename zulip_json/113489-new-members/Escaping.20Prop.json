[
    {
        "content": "<p>Say we have the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}))</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What this function is supposed to do is:</p>\n<p>* if <code>s = ∅</code>, return <code>none</code><br>\n  * if <code>s = {n}</code>, return <code>n</code></p>\n<p>We know that one of these conditions holds, by virtue of <code>h</code>.<br>\nHow can this behaviour be expressed in Lean?</p>\n<p>My first attempt was to do this by elimination on <code>h</code>, but that only allows me to return <code>Prop</code>s. <br>\nI feel like <code>classical</code> must play a role in order to extract <code>n</code> from <code>h</code>, but I don't know how.</p>",
        "id": 238912059,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1621098691
    },
    {
        "content": "<p>The way to do what you ask is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> for a well-chosen predicate <code>p</code> (basically the predicate you wrote in words).</p>\n<p>If you care about computability/constructivity at all, you will want to reformulate the type of <code>f</code>.</p>",
        "id": 238912298,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621098943
    },
    {
        "content": "<p>Unrelated, but I would just ask for <code>exists n, s = {n}</code> instead of asking for the uniqueness as well. Because uniqueness is automatic, so it will quickly become boring to prove it every time you need to provide <code>h</code>.</p>",
        "id": 238912538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621099198
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton\">docs#set.subsingleton</a> ?</p>",
        "id": 238918465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621105254
    },
    {
        "content": "<p>Apparently we do, so perhaps we should have set.subsingleton.rec_on?</p>",
        "id": 238918608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621105390
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton.induction_on\">docs#set.subsingleton.induction_on</a></p>",
        "id": 238918681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621105448
    },
    {
        "content": "<p>Yes but that's only to Prop</p>",
        "id": 238918693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621105463
    },
    {
        "content": "<p>Ah</p>",
        "id": 238918695,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621105471
    },
    {
        "content": "<p>Here's some code for the original question, in case it helps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S.subsingleton</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.eq_empty_or_singleton.by_cases</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">classical.some</span> <span class=\"n\">hh</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 238919194,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621106003
    },
    {
        "content": "<p>Oh so it seems we do have the recursor :-)</p>",
        "id": 238927554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621115160
    },
    {
        "content": "<p>Does something like <code>subsingleton</code> exist for <code>finset</code>, too? <br>\nI'm using <code>.card ≤ 1</code> right now, but that doesn't come with <code>.eq_empty_or_singleton</code>.</p>",
        "id": 240577839,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622192321
    },
    {
        "content": "<p>In other words, is there a way to get the unique element out of a <code>finset</code> with <code>.card ≤ 1</code>?</p>",
        "id": 240578634,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622192856
    },
    {
        "content": "<p>You mean card = 1, right? The answer will be yes because surely this is the point of finsets.</p>",
        "id": 240579675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622193543
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq_one\">docs#finset.card_eq_one</a></p>",
        "id": 240579803,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622193616
    },
    {
        "content": "<p>No, I mean<code>.card ≤ 1</code>.<br>\nFor a <code>finset X</code> with <code>.card ≤ 1</code> I would like to get an instance of <code>option X</code>.</p>",
        "id": 240579811,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622193626
    },
    {
        "content": "<p>Also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one\">docs#finset.card_le_one</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one_iff\">docs#finset.card_le_one_iff</a> exist (and they're both iffs)</p>",
        "id": 240579892,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622193680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Escaping.20Prop/near/240579892\">said</a>:</p>\n<blockquote>\n<p>Also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one\">docs#finset.card_le_one</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one_iff\">docs#finset.card_le_one_iff</a> exist (and they're both iffs)</p>\n</blockquote>\n<p>The problem is that I don't understand how to use these to actually get the instance out of the finset.<br>\nI feel like I would need a theorem that contains <code>∃</code>.</p>",
        "id": 240580044,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622193769
    },
    {
        "content": "<p>You want to do this constructively, presumably? Classically you can just use <code>classical.some</code></p>",
        "id": 240580196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622193855
    },
    {
        "content": "<p>No, non-constructively is perfectly fine.</p>",
        "id": 240580357,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622193946
    },
    {
        "content": "<p>Is this for a definition or in a proof?</p>",
        "id": 240580426,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622193971
    },
    {
        "content": "<p>for a definition</p>",
        "id": 240580448,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622193979
    },
    {
        "content": "<p>Then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> could help</p>",
        "id": 240580512,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622194033
    },
    {
        "content": "<p>For that I need an <code>∃</code>-proof though. <br>\nAnd <code>f.card ≤ 1</code> is equivalent to <code>f = ∅ ∨ (∃! x, {x} = f)</code>, but I guess mathlib doesn't have a lemma for that.</p>",
        "id": 240580683,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622194164
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_one_iff_subset_singleton\">docs#finset.card_le_one_iff_subset_singleton</a>?</p>",
        "id": 240580908,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622194323
    },
    {
        "content": "<p>Cool! Now I just need to figure out how to convert <code>f ⊆ {x}</code> into <code>f = ∅ ∨ (∃! x, {x} = f)</code>.</p>",
        "id": 240581007,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622194409
    },
    {
        "content": "<p>Which should be possible with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton.mono\">docs#set.subsingleton.mono</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton_singleton\">docs#set.subsingleton_singleton</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton.eq_empty_or_singleton\">docs#set.subsingleton.eq_empty_or_singleton</a></p>",
        "id": 240581174,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1622194517
    },
    {
        "content": "<p>You can use finset.find (can't remember the exact name atm) , which is computable</p>",
        "id": 240602016,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622207721
    }
]