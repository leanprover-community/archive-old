[
    {
        "content": "<p>I'm trying to follow up on <span class=\"user-mention\" data-user-id=\"482773\">@Jakub Kądziołka</span> 's suggestion. I guess the way to go is to first define a helper function looking roughly as follows.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.map_with_membership_help</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">list.is_suffix_of</span> <span class=\"n\">l₁</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>where <code>l₁</code>is a suffix of <code>l</code> and the mapping is done on <code>l₁</code>. To implement this, I was looking for a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.mem_of_suffix</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">list.is_suffix_of</span> <span class=\"n\">l₁</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>in mathlib, but without success so far...</p>",
        "id": 275177831,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647209538
    },
    {
        "content": "<p>convert the list to a finset of naturals and then just make the finset of primes as the pullback of the finset of naturals.</p>",
        "id": 275177927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647209683
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kd\">def</span> <span class=\"n\">prime_factors_as_finset_of_primes</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat.primes</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.to_finset</span> <span class=\"o\">(</span><span class=\"n\">a.nat_abs.factors.attach.map</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.prime_of_mem_factors</span> <span class=\"n\">a.2</span><span class=\"o\">⟩))</span>\n</code></pre></div>",
        "id": 275178011,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647209809
    },
    {
        "content": "<p>Maybe the missing piece here was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.attach\">docs#list.attach</a>, which maps a list of elements to the list of subtypes of the original type only containing things in the list.</p>",
        "id": 275178048,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647209878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Ah OK, this is exactly what I was looking for. Thanks!</p>",
        "id": 275178107,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647209938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 275178164,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647210007
    },
    {
        "content": "<p>Do we have pmap for finset?</p>",
        "id": 275185849,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647221258
    },
    {
        "content": "<p>We have finset.attach iirc</p>",
        "id": 275185854,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647221268
    },
    {
        "content": "<p>On a related note, do we have the analog of <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators/multiset.html#multiset.prod_induction\">multiset.prod_induction</a> for <code>list</code>s?</p>",
        "id": 275215350,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647252750
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.foldr_rec_on\">docs#list.foldr_rec_on</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.foldl_rec_on\">docs#list.foldl_rec_on</a>; and of course <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod\">docs#list.prod</a> is defined in terms of foldl</p>",
        "id": 275217345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647253877
    },
    {
        "content": "<p>I hadn't done the cons case for foldl, just for foldr</p>",
        "id": 275217723,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647254076
    },
    {
        "content": "<p>But you can phrase it in terms of foldr even though it's defined in terms of foldl, as long as your multiplication is commutative, doesn't even have to be commutative over the whole domain, just even over the elements of the list is sufficient</p>",
        "id": 275217999,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647254273
    },
    {
        "content": "<p>OK, I'll look into that.</p>",
        "id": 275220894,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647255923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as unresolved.</p>",
        "id": 275236120,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647265035
    },
    {
        "content": "<p>Coming back to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> 's solution above, when I try to use <code>prime_factors_as_finset_of_primes</code>, I'm running into problems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime_factors_as_finset_of_primes</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat.primes</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.to_finset</span> <span class=\"o\">(</span><span class=\"n\">a.nat_abs.factors.attach.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat.prime_of_mem_factors</span> <span class=\"n\">p.2</span><span class=\"o\">⟩))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_factors_of_two</span> <span class=\"o\">:</span> <span class=\"n\">prime_factors_as_finset_of_primes</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">{⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">⟩}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs.factors</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">prime_factors_as_finset_of_primes</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- does not work</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get a <code>motive is not type correct</code> error message, and it looks like <code>attach</code> is causing this problem. How do I get around that?</p>",
        "id": 275236638,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647265322
    },
    {
        "content": "<p>Does <code>simp_rw [h]</code> work? The problem is indeed that the type of <code>s.attach</code> depends on <code>s</code>.</p>",
        "id": 275237082,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1647265553
    },
    {
        "content": "<p><code>simp</code> (and <code>simp_rw</code>) can usually deal with these type dependencies.</p>",
        "id": 275237151,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1647265574
    },
    {
        "content": "<p><code>simp [h]</code> and <code>simp_rw [h]</code>produce <code>simplify tactic failed to simplify</code>.</p>",
        "id": 275237287,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647265637
    },
    {
        "content": "<p>I suggest this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime_factors_as_finset_of_primes</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat.primes</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a.nat_abs.factors.pmap</span> <span class=\"n\">subtype.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nat.prime_of_mem_factors</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prime_factors_of_two</span> <span class=\"o\">:</span> <span class=\"n\">prime_factors_as_finset_of_primes</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">{⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">⟩}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs.factors</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prime_factors_as_finset_of_primes</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275237591,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647265763
    },
    {
        "content": "<p>Which is almost identical to what you had, except I used <code>list.pmap</code> instead of <code>list.attach</code> and <code>list.map</code></p>",
        "id": 275237984,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647265940
    },
    {
        "content": "<p>Thanks! That looks good so far.</p>",
        "id": 275238371,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647266121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 275240686,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647267028
    }
]