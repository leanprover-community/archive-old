[
    {
        "content": "<p>I am reading chapter 5.2 of TPIL.  Every example of <code>revert</code> is redundant.  For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is ⊢ ∀ (x y : ℕ), x = y → y = x</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>can be reduced to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Can you think of any tactic-mode proofs that include an essential/compelling use of <code>revert</code>?</p>",
        "id": 218374195,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606789981
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- let's prove associativity without using associativity</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">m.succ</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218374738,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606790652
    },
    {
        "content": "<p>You might say, well that's just <code>induction m with m hm generalizing n</code> but that's exactly what the <code>generalizing n</code> part does, figures out what and how far do we need to <code>revert</code> and then <code>intro</code>.</p>",
        "id": 218374763,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606790699
    },
    {
        "content": "<p>The first example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is ⊢ ∀ (x : ℕ), x = x</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is y : ℕ ⊢ y = y</span>\n  <span class=\"n\">reflexivity</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> is mathematically redundant yes, but is demonstrating that revert can be used to rename variables.</p>",
        "id": 218374830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1606790776
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">m.succ</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- here we have lots of extra variables that may or may not have been used in other hypotheses</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- notice that we don't have to intro anything, not `n` nor any of the extraneous `k l x y z`</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- notice that we _do_ have to intro `n`, since it was generalized,</span>\n    <span class=\"c1\">-- but not any of the extraneous `k l x y z`</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">m.succ</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- here we have lots of extra variables, some which are used in other hypotheses</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- notice that we don't have to intro anything, not `n` nor any of the extraneous `k l x y z`</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- notice that we _do_ have to intro `n`, since it was generalized,</span>\n    <span class=\"c1\">-- but not any of the extraneous `k l x y z`</span>\n    <span class=\"c1\">-- and now our induction hypothesis is broken because of the blocking `h`</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"c1\">-- won't work</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">succ_add</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218375050,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606791099
    }
]