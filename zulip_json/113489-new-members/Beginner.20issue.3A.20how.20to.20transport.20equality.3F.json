[
    {
        "content": "<p>Hello! I'm a brand-new Lean user, coming in with some experience using Agda. I was wondering if there's a function in Lean/mathlib that works analogously to the <code>transport</code> function from Homotopy Type Theory, which, given a type family <code>P</code> and an equality <code>p : x = y</code>, allows you to produce an element of <code>P y</code> from an element of <code>P x</code>. If not, what kind of construction would you use to do \"substitution\" of two quantities that have been proven equal?</p>\n<p>For more context, here's what I'm trying to prove. Following the vein of how a \"closure operator\" is defined in mathlib, I've written my own definition of an \"interior operator\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">interior_operator</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_interior'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">idempotent'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I am trying to prove that for any interior operator <code>i</code> and any closure operator <code>c</code>, we have that <code>i ∘ c ∘ i = i ∘ c ∘ i ∘ c ∘ i</code> (i.e. these two functions take on the same values at all points). This is a generalization of an interesting theorem from topology. My plan is to prove this using a \"sandwich\" argument, i.e. by proving that <code>i ∘ c ∘ i x &lt;= i ∘ c ∘ i ∘ c ∘ i x</code> and <code>i ∘ c ∘ i x &gt;= i ∘ c ∘ i ∘ c ∘ i x</code> for all values of <code>x</code>. Right now I'm just working on the first inequality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">closure_operator</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">interior_operator</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n             <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I am able to show that <code>i ∘ c ∘ i ∘ i x &lt;= i ∘ c ∘ i ∘ c ∘ i x</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">i.to_order_hom.monotone</span> <span class=\"o\">(</span><span class=\"n\">c.to_order_hom.monotone</span> <span class=\"o\">(</span><span class=\"n\">i.to_order_hom.monotone</span> <span class=\"o\">(</span><span class=\"n\">c.le_closure'</span> <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"n\">x</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>and now I would like to use the fact that <code>i ∘ i x</code> is always equal to <code>i x</code> to complete the proof. This is where I need the aforementioned transport-type argument. If I had a function <code>transport</code> that worked analogously to transport, I might do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">transport</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">i.idempotent'</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">i.to_order_hom.monotone</span> <span class=\"o\">(</span><span class=\"n\">c.to_order_hom.monotone</span> <span class=\"o\">(</span><span class=\"n\">i.to_order_hom.monotone</span> <span class=\"o\">(</span><span class=\"n\">c.le_closure'</span> <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"n\">x</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>Any ideas how to accomplish this?</p>\n<p>Also, I know this code is probably hideous - I'm pretty much in the dark about any kind of shortcuts or best-practices that are usually used to make Lean code cleaner/less verbose since I kind of just jumped in the deep end with this proof. Any advice would be much appreciated. :-)</p>",
        "id": 305220570,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666293298
    },
    {
        "content": "<p>Can you please provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> illustrating your issue? It's a bit hard to piece together where you're running into issues with the code fragments you posted.</p>",
        "id": 305221099,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666293516
    },
    {
        "content": "<p>Sure, sorry about that. Here's what I have right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.hom.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">interior_operator</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_interior'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">idempotent'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">closure_operator</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">interior_operator</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n             <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">c.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">i.to_fun</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n           <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 305221688,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666293746
    },
    {
        "content": "<p>I've just gotten rid of some of the unnecessary stuff</p>",
        "id": 305221887,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666293820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557192\">@Franklin Pezzuti Dyer</span> I assume this involves more than just the <code>rewrite</code> tactic?</p>",
        "id": 305222034,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666293859
    },
    {
        "content": "<p>Also note that I'm unhappy with the state <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a> is in. You would have more success using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_insertion\">docs#galois_insertion</a> directly, and probably the lemma there already exists.</p>",
        "id": 305222036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666293859
    },
    {
        "content": "<p>you might just be looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.subst\">docs#eq.subst</a></p>",
        "id": 305222202,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666293933
    },
    {
        "content": "<p>ahh, yep, that is exactly what I want. It looks like the type signature of eq.subst is the same as transport pretty much! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 305222355,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666293979
    },
    {
        "content": "<p>hmm, I have never heard of a galois insertion, but looking at the docs, I get the impression that a galois insertion is something stronger than just an arbitrary closure operation + arbitrary interior operator? or does every pair of closure operator + interior operator give rise to a galois insertion?</p>",
        "id": 305222605,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666294074
    },
    {
        "content": "<p>But I don't see where you want to transport anything in your proof here...</p>",
        "id": 305222617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666294079
    },
    {
        "content": "<p>No, a closure operator is exactly the same as a Galois insertion to a subtype (of closed elements) and an interior operator is the same as a Galois coinsertion to a subtype (of open elements).</p>",
        "id": 305223015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666294211
    },
    {
        "content": "<p>once I get the inequality <code>i (c (i (i x))) &lt;= i (c (i (c (i x))))</code>, I want to transport along the equality <code>i (i x) = i x</code> to yield the inequality <code>i (c (i x)) &lt;= i (c (i (c (i x))))</code></p>",
        "id": 305223024,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666294219
    },
    {
        "content": "<p>Note that <code>i (i x)</code> and <code>i x</code> are <em>terms</em> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>. No transport necessary (in Lean)</p>",
        "id": 305223131,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666294274
    },
    {
        "content": "<p>My plan is to now have <code>closure_operator</code> properly be a specialisation of <code>galois_insertion</code> to a subtype, rather than the half-baked mess I made of it a year ago.</p>",
        "id": 305223132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666294275
    },
    {
        "content": "<p>hmm. if no transport is needed, how would one deduce <code>i (c (i x)) &lt;= i (c (i (c (i x))))</code> from <code>i (c (i (i x))) &lt;= i (c (i (c (i x))))</code> otherwise?</p>",
        "id": 305224100,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666294680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> it sounds like he wants to rewrite a Prop using an equality... wouldn't that be necessary in some cases?</p>",
        "id": 305224177,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666294697
    },
    {
        "content": "<p>In the original question, the context was where <code>P</code> is a type family, and it seemed to me that you wanted to identify the <em>types</em> <code>P x</code> and <code>P y</code> when <code>x = y</code>. This is what I usually think of as \"transport\". In this case, you just have terms of a type (the type is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>) and a proof that the two terms are equal. You can just rewrite with that equality.</p>",
        "id": 305224414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666294802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557192\">@Franklin Pezzuti Dyer</span> FYI there's a special notation for using <code>eq.subst</code>: <code>▸</code></p>",
        "id": 305224422,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666294803
    },
    {
        "content": "<p>That's why I said that you don't need to transport, because you don't need to use any identification of distinct types.</p>",
        "id": 305224505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666294828
    },
    {
        "content": "<p>that's just an infix version?</p>",
        "id": 305224507,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666294829
    },
    {
        "content": "<p>yep</p>",
        "id": 305224516,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666294834
    },
    {
        "content": "<p>and if you're in tactic mode, you can use the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rw%20/%20rewrite\"><code>rewrite</code></a> tactic (a.k.a. <code>rw</code>)</p>",
        "id": 305224599,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666294862
    },
    {
        "content": "<p>oh I see what you mean. from my messing around with HoTT in Agda I know this by the name <code>ap P</code></p>",
        "id": 305226060,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666295447
    },
    {
        "content": "<p>sorry, referring back to Adam's comment, it took a sec for me to digest heh</p>",
        "id": 305226144,
        "sender_full_name": "Franklin Pezzuti Dyer",
        "timestamp": 1666295490
    }
]