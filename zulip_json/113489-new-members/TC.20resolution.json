[
    {
        "content": "<p>I'm trying to define and experiment with graded rings and I have a few issues with type classes. Here's my code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">direct_sum</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">graded_ring</span> <span class=\"kn\">extends</span> <span class=\"n\">ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">groups</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"bp\">+</span> <span class=\"n\">direct_sum</span> <span class=\"n\">M</span> <span class=\"n\">pieces</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">pieces</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">pieces</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">pieces</span> <span class=\"n\">m</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_respects_grading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">m&#39;</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">pieces</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pieces</span> <span class=\"n\">m&#39;</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">pieces</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m&#39;</span><span class=\"o\">),</span> <span class=\"n\">of</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">of</span> <span class=\"n\">m&#39;</span> <span class=\"n\">r&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m&#39;</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">graded_ring</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">graded_ring</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>First, I don't understand why the <code>ring</code> instance of <code>polynomial</code> isn't found. If I make it implicit, the search tries increasingly complicated versions of  <code>dfinsupp.add_monoid</code> before giving up. Is there a nicer way to do this, ideally so that I can use the record syntax? Second, is there a nicer way to write the commutative group instance of <code>α</code>?</p>",
        "id": 206667977,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597218621
    },
    {
        "content": "<p>There's a rule that you shouldn't use <code>extend</code> when adding more data to a class, if you need to have more parameters than the thing you're extending.</p>",
        "id": 206671314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597221487
    },
    {
        "content": "<p>So I'd suggest you want to substantially reformulate this.</p>",
        "id": 206671332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597221509
    },
    {
        "content": "<p>These rules are extremely hard to find unless you're a regular here.</p>",
        "id": 206671620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597221742
    },
    {
        "content": "<p>You just get people like you, Reid or Mario saying \"oh this is an antipattern\" occasionally</p>",
        "id": 206671660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597221777
    },
    {
        "content": "<p>What would be really nice would be a resource with some simple bad classes and perhaps not an explanation of why they're bad but at least a description of the rules of thumb to follow. I don't know these rules at all. I am still really bad at making definitions in Lean which is why I'm making so much fuss on another thread about exactly what the definition of yet another concept of finiteness / cardinality should be.</p>",
        "id": 206671810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597221899
    },
    {
        "content": "<p>I think the problem is just that it introduces a \"bad instance\", because now whenever Lean wants to check if something is a ring, is has to check if it is a graded ring, and suddenly there's a metavariable for the type <code>M</code> introduced into the typeclass search problem.</p>",
        "id": 206671846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597221919
    },
    {
        "content": "<p>Yeah I'm sure that if you actually understand the typeclass system (which I certainly don't) then it's all obvious. The problem is that if a mathematician beginner comes along they can write something which looks completely mathematically reasonable but is somehow impossible to use because of some issue regarding <code>[foo X]</code> v <code>extends foo X</code></p>",
        "id": 206671956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597221989
    },
    {
        "content": "<p>or some issue regarding universe parameters in the definition</p>",
        "id": 206671983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597222011
    },
    {
        "content": "<p>or some issue regarding something having a different number of variables to something else</p>",
        "id": 206672008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597222025
    },
    {
        "content": "<p>or some other issue -- these things are too numerous to mention. Classes are extremely well understood now, and the \"gotchas\" are all known to the experts, but whenever I want to make a new definition in Lean I run it past the Zulip chat before I do anything with it at all because I don't know all the pitfalls</p>",
        "id": 206672129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597222107
    },
    {
        "content": "<p>Ah, now that I know what I'm looking for, I found the loop <code>ring -&gt; graded_ring -&gt; monoid (for M) -&gt; ... -&gt; ring</code>. I've looked at modules, because they should have the same issue, but the only thing I see is <code>set_option default_priority 100</code>. Does this make the priority for the classes there very low?</p>",
        "id": 206684147,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597232892
    },
    {
        "content": "<p>I don't think <code>module</code> is comparable, because it is not using <code>extends</code> like you are.</p>",
        "id": 206684301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597233085
    },
    {
        "content": "<p>I would guess that you just want an additional typeclass, so you write <code>[ring R] [graded_ring R]</code> to summon one.</p>",
        "id": 206684326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597233119
    },
    {
        "content": "<p>You might also look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.graded_object/src\">src#category_theory.graded_object</a> for the bundled version.</p>",
        "id": 206684379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597233140
    },
    {
        "content": "<p>Thanks, that helped!</p>",
        "id": 206685279,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597233883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/TC.20resolution/near/206671810\">said</a>:</p>\n<blockquote>\n<p>What would be really nice would be a resource with some simple bad classes and perhaps not an explanation of why they're bad but at least a description of the rules of thumb to follow. I don't know these rules at all. I am still really bad at making definitions in Lean which is why I'm making so much fuss on another thread about exactly what the definition of yet another concept of finiteness / cardinality should be.</p>\n</blockquote>\n<p>I guess some of these rules have been implemented in code. Maybe the document you want starts out as docs for the linter?</p>",
        "id": 206760865,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597271777
    }
]