[
    {
        "content": "<p>Hi there! I'm learning lean and trying to understand coercions between N and Z. </p>\n<p>For example I'd like to prove </p>\n<p>lemma abx (a b: ℕ ) (x: ℤ ): ↑a = ↑b * x -&gt; b ∣ a</p>\n<p>and I'd like to be able to state</p>\n<p>lemma an (a: ℕ ): (↑ a).nat_abs = a</p>\n<p>without getting some sort of strange error. </p>\n<p>Any suggestions?</p>",
        "id": 290715583,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1658719273
    },
    {
        "content": "<p>Lean needs some hint about what the target type for a coercion is to be able to use dot notation. <code>(↑ a : ℤ).nat_abs</code> should work.  (Formatting hint: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>)</p>",
        "id": 290715942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658719688
    },
    {
        "content": "<p>Another way to write this is as <code>int.nat_abs a</code> since that's what the dot notation resolves to and since Lean auto-inserts coercions.</p>",
        "id": 290716126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658719996
    },
    {
        "content": "<p>Here's a proof of your lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abx</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">):</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.mul_zero</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">int.zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_eq_zero.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_succ_pos</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b.succ</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_succ_pos</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_mul_left</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">can_lift.prf</span> <span class=\"n\">x</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">int.of_nat.inj</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290716882,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658721084
    },
    {
        "content": "<p>It seems likely that a nicer proof should be possible.</p>",
        "id": 290716888,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658721105
    },
    {
        "content": "<p>This one is almost in the library (I just found it yesterday):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abx</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">):</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">int.coe_nat_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290717120,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658721456
    }
]