[
    {
        "content": "<p>hey y'all, looking at the implementation of <code>list.nth_le</code>, and i was confused about how the definition works</p>",
        "id": 187009258,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580405017
    },
    {
        "content": "<p>ref: <a href=\"https://github.com/leanprover/lean/blob/master/library/init/data/list/basic.lean#L90-L93\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/data/list/basic.lean#L90-L93\">https://github.com/leanprover/lean/blob/master/library/init/data/list/basic.lean#L90-L93</a></p>\n<div class=\"codehilite\"><pre><span></span>@[simp] def nth_le : Π (l : list α) (n), n &lt; l.length → α\n| []       n     h := absurd h (not_lt_zero n)\n| (a :: l) 0     h := a\n| (a :: l) (n+1) h := nth_le l n (le_of_succ_le_succ h)\n</pre></div>",
        "id": 187009261,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580405020
    },
    {
        "content": "<p>in particular, how can it use <code>le_of_succ_le_succ</code> on <code>h</code> when <code>h</code> is defining a strict inequality? i'm trying to replicate similar behavior but Lean is complaining about the differences in equality</p>",
        "id": 187009369,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580405069
    },
    {
        "content": "<p>On nat, <code>a &lt; b</code> is defined to mean <code>a + 1 &lt;= b</code></p>",
        "id": 187009391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580405089
    },
    {
        "content": "<p>so this is a bit of a dirty hack</p>",
        "id": 187009398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580405098
    },
    {
        "content": "<p><code>example (a b : ℕ) : a &lt; b ↔ a + 1 ≤ b := iff.rfl</code></p>",
        "id": 187009446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580405138
    },
    {
        "content": "<p>hahaha oh no that is definitely a dirty hack</p>",
        "id": 187009467,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580405154
    },
    {
        "content": "<p>For more readability they should also apply <code>a + 1 &lt;= b -&gt; a &lt; b</code> but this theorem might not even be in the library because it's true by definition :-/</p>",
        "id": 187009545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580405187
    },
    {
        "content": "<p>maybe <code>nat.lt_of_succ_le</code>?</p>",
        "id": 187009578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580405214
    },
    {
        "content": "<p><code>lemma lt_of_succ_le {a b : ℕ} (h : succ a ≤ b) : a &lt; b := h</code> -- from core.</p>",
        "id": 187009624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580405254
    },
    {
        "content": "<p>i'll just provide a more explicit proof--i'm rewriting some code for the purposes of a presentation on why SWEs should like dependent typing so it's better if it's more explicit</p>",
        "id": 187010081,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580405593
    },
    {
        "content": "<p>Note that the core library already has a lemma called <code>nat.lt_of_succ_lt_succ</code> (see <a href=\"https://github.com/leanprover-community/lean/blob/dacb70b83853b23b2fc20afdc4d5888cee0d4363/library/init/data/nat/lemmas.lean#L210-L211\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/dacb70b83853b23b2fc20afdc4d5888cee0d4363/library/init/data/nat/lemmas.lean#L210-L211\">this link</a>, where it's just defined as a synonym for <code>le_of_succ_le_succ</code>, but with the right type annotation)</p>",
        "id": 187177723,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1580593211
    }
]