[
    {
        "content": "<p>Hi, all! How do I define the positive integers in lean? I want to introduce the equivalent of<br>\n<code>x, y \\in \\mathbb{Z}^+</code>in lean...</p>\n<p>resolved! i just used (x, y : \\N) and (hpos : x &gt; 0) same with y</p>",
        "id": 320035049,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673152828
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs#pnat</a></p>",
        "id": 320037604,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673155353
    },
    {
        "content": "<p>But sometimes what you're doing with <code>(x : \\N) (hp : x &gt; 0)</code> works just as well</p>",
        "id": 320037629,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673155408
    },
    {
        "content": "<p>thanks-</p>",
        "id": 320037885,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673155723
    },
    {
        "content": "<p>right so i ran into another funny situation.. is it possible to introduce a new variable k = x^3 + y^3? i don't think lean's letting me do that. can't find where to do it in the documentation either</p>",
        "id": 320039602,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673157290
    },
    {
        "content": "<p>trying to introduce it in an <code>example</code> environment, but it's not happening :(</p>",
        "id": 320039824,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673157523
    },
    {
        "content": "<p>you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320041948,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673159656
    },
    {
        "content": "<p>... i should've known... thanks again</p>",
        "id": 320043174,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673160977
    },
    {
        "content": "<p>btw <code>let</code> is different from <code>have</code> in that it retains the definition, while <code>have</code> is for Props (and so definition irrelevant). One neat trick is that is you're using an IDE, you can hover over the keywords <code>let</code>, <code>have</code>, or any other tactic to see documentation on what it does</p>",
        "id": 320043313,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1673161139
    },
    {
        "content": "<p><code>set k :) x^3 + y^3 with hk</code> is also useful to know.</p>",
        "id": 320047805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673165359
    },
    {
        "content": "<p><code>:=</code> not <code>:)</code> :)</p>",
        "id": 320076361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673184490
    },
    {
        "content": "<p><code>generalizing hk : x^3 + y^3 = k</code> may be useful if you have <code>x^3 + y^3</code> in the goal statement or if you plan to use <code>rw</code>, <code>subst</code> or <code>induction</code> later in the proof (with <code>let</code>/<code>set</code> you may get type errors).</p>",
        "id": 320085092,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1673189426
    },
    {
        "content": "<p>I use <code>(x_pos : x &gt; 0)</code> all the time. It isn't necessary to express positivity by a data type.</p>",
        "id": 320180375,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1673256769
    }
]