[
    {
        "content": "<p>Is there some way of getting lean to show what lemmas simp used in a particular line? I added an include in my file and suddenly a lot of my simps don't do what they used to. I want to be able to see which lemmas it is now having problems with.</p>",
        "id": 130969966,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1533551452
    },
    {
        "content": "<p><code>set_option trace.simplify.rewrite true</code></p>",
        "id": 130970048,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533551536
    },
    {
        "content": "<p>see my post from just now about \\u m * n :-)</p>",
        "id": 130970060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533551566
    },
    {
        "content": "<p>you said \"just click on <code>simp</code> and see\" but I don't know what you mean by that</p>",
        "id": 130970090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533551628
    },
    {
        "content": "<p>But that is slightly surprising. It might be that your include contained a lemma tagged <code>@[simp]</code> which is now being applied when it wasn't before. If you can locate the lemma then...I'm not sure you can untag it actually, but you can stop <code>simp</code> from using it and then hopefully sanity will be restored</p>",
        "id": 130970092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533551633
    },
    {
        "content": "<p>Oh -- I'd put the <code>set_option</code> earlier</p>",
        "id": 130970096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533551642
    },
    {
        "content": "<p>you can only locally untag a simp lemma</p>",
        "id": 130970153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533551680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  thanks</p>",
        "id": 130970368,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1533551969
    },
    {
        "content": "<p>The offending include file is one of my own. So I tried untagging all of the simp lemmas in the source file but this did not solve the problem</p>",
        "id": 130970448,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1533552055
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md#when-it-is-unadvisable-to-use-simp\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md#when-it-is-unadvisable-to-use-simp\">https://github.com/leanprover/mathlib/blob/master/docs/extras/simp.md#when-it-is-unadvisable-to-use-simp</a></p>",
        "id": 130970698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533552415
    },
    {
        "content": "<p>If you're using <code>simp</code> in the middle of a proof, then you're asking for trouble. You should only use <code>simp</code> to close a goal. Although it's kind of annoying, if your goal is <code>A</code> and then <code>simp</code> turns it into <code>B</code>, you're supposed to write <code>suffices : B, simpa using this</code> or <code>simp [this]</code> or <code>simp!</code> or some other random incantation until <code>simp</code> eventually is convinced that it can prove that <code>B</code> implies <code>A</code>, and then go on. This makes imports far less likely to break code.</p>",
        "id": 130970809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533552551
    }
]