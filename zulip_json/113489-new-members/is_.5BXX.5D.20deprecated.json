[
    {
        "content": "<p>Hi! I just realized that there was many function deprecated like <code>is_subring</code>, <code>is_subgroup</code>, <code>is_add_monoid</code>, etc. What would be then the correct way to express a theorem like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Zd</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|∃</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_th</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">Zd</span> <span class=\"n\">d</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240033639,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621852836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Zd</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n  <span class=\"c1\">-- add fields to make the red squiggles go away</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 240034273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621853260
    },
    {
        "content": "<p>You might be interested in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zsqrtd.to_real\">docs#zsqrtd.to_real</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.range\">docs#ring_hom.range</a> if you were not already aware of them.</p>",
        "id": 240034366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621853312
    },
    {
        "content": "<p>In VSCode, you can also write  <code>def Zd (d:ℕ) : subring ℝ := _</code>, click the light bulb and select \"Generate a skeleton...\" in the menu.</p>",
        "id": 240034445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621853399
    },
    {
        "content": "<p>Thanks a lot, this is really helpful  ! Independently of this particular example, I wanted to have a theorem that says <br>\nTheorem : \" G is a subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>\" what should I use instead of is_subring (since its apparently deprecated) ?</p>",
        "id": 240041506,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621857792
    },
    {
        "content": "<p>This might be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. There are two ways to make the statement you are suggesting:</p>\n<ul>\n<li><code>G</code>, a specific <code>set ℝ</code> defined elsewhere, is a subring</li>\n<li>Define <code>G</code> as a specific <code>subring ℝ</code></li>\n</ul>\n<p>Is the any particular reason you care about the difference?</p>",
        "id": 240041802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621857975
    },
    {
        "content": "<p>In Lean, there is a type <code>subring \\R</code> of subrings of the reals, and a subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is a term of that type. In particular, defining a subring is a definition. If you have already defined a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> then that's a term of type <code>set \\R</code> which is a different type; you still have to make a definition. To make the definition you have to prove a theorem (G is closed under +,-,*,0,1 or whatever) but it's still a definition.</p>",
        "id": 240042130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621858199
    },
    {
        "content": "<p>If for whatever reason you do have a definition of <code>G : set ℝ</code> that you can't change, a typical approach would be to define a new <code>G_subring</code>, and then prove the two are equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">G_subring</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>  <span class=\"c1\">-- generated using the approach Patrick describes</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">G_subring_eq_G</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">G_subring</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 240042507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621858417
    },
    {
        "content": "<p>OK thanks !  Yes I agree with the fact that there are two ways to make the statement. I see how to do the second one and indeed I was trying to express the first one. And I agree of course that I still have to make a definition. Is that the reason why is_subring / is_group and so on were deprecated ?</p>",
        "id": 240043364,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621858924
    },
    {
        "content": "<p>Then if I understood correctly the last answer of <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, if I wanted to write a simple undergrad exercice in lean on the form \"Show that G (defined earlier) is a subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>\" the proper way to express the exercise in Lean would say \"Show that there exists <code>G_  : subring \\br</code> such that <code>↑G_ = G</code>\".</p>",
        "id": 240043418,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621858944
    },
    {
        "content": "<p>is_subring can still be used, but it shouldn't be a class; this is a design decision and the reasons for it are complex, one of them being that <code>subring</code> allows you to use dot notation, e.g. like <code>A.zero_mem</code> is the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">0\\in A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 240043515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621859006
    },
    {
        "content": "<p>As for the proper way to express an exercise, you should write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Yes, what you say works, but when I do this stuff with my undergraduates I just write stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">G_subring</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"bp\">\\</span><span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n   <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and get the students to fill in the sorrys. I don't feel bound to attempt to phrase the question in exactly the way it has been phrased in a book, I would rather write more idiomatic Lean code which has the same underlying meaning.</p>",
        "id": 240043740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621859154
    },
    {
        "content": "<p>Ok, thanks a lot for the helpful answers (as always) !</p>",
        "id": 240044279,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1621859475
    }
]