[
    {
        "content": "<p>I was doing a kata on codewars and meet a problem of  this kind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">mat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">x.a</span><span class=\"bp\">=</span><span class=\"n\">y.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"n\">x.b</span><span class=\"bp\">=</span><span class=\"n\">y.b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span><span class=\"n\">x.c</span><span class=\"bp\">=</span><span class=\"n\">y.c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span><span class=\"o\">:</span><span class=\"n\">x.d</span><span class=\"bp\">=</span><span class=\"n\">y.d</span><span class=\"o\">):</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">:=</span><span class=\"kd\">by</span><span class=\"o\">{</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"c1\">-- no applicable extensionality rule found for mat</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The definition of mat is preloaded so I can't change it, what do I do to prove this obvious fact</p>",
        "id": 279901932,
        "sender_full_name": "Luoyi",
        "timestamp": 1650683287
    },
    {
        "content": "<p>Please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">mat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x.a</span> <span class=\"bp\">=</span> <span class=\"n\">y.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x.b</span> <span class=\"bp\">=</span> <span class=\"n\">y.b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x.c</span> <span class=\"bp\">=</span> <span class=\"n\">y.c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x.d</span> <span class=\"bp\">=</span> <span class=\"n\">y.d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">congr'</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>congr'</code> can be replaced by <code>congr, exacts [h1, h2, h3, h4]</code> when not importing <code>tactic</code>.</p>",
        "id": 279902245,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650683697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421852\">Luoyi</span> has marked this topic as resolved.</p>",
        "id": 279902486,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650684039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20proof.20structure.20equality/near/279902245\">said</a>:</p>\n<blockquote>\n<p>Please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">mat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x.a</span> <span class=\"bp\">=</span> <span class=\"n\">y.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x.b</span> <span class=\"bp\">=</span> <span class=\"n\">y.b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x.c</span> <span class=\"bp\">=</span> <span class=\"n\">y.c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x.d</span> <span class=\"bp\">=</span> <span class=\"n\">y.d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">congr'</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>congr'</code> can be replaced by <code>congr, exacts [h1, h2, h3, h4]</code> when not importing <code>tactic</code>.</p>\n</blockquote>\n<p>Thank you very much!</p>",
        "id": 279902519,
        "sender_full_name": "Luoyi",
        "timestamp": 1650684111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421852\">@Luoyi</span> If you want to use <code>ext</code>, you can create an <code>ext</code> lemma automatically using the <code>ext</code> attribute.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">mat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span><span class=\"n\">x.a</span><span class=\"bp\">=</span><span class=\"n\">y.a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"n\">x.b</span><span class=\"bp\">=</span><span class=\"n\">y.b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span><span class=\"n\">x.c</span><span class=\"bp\">=</span><span class=\"n\">y.c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span><span class=\"o\">:</span><span class=\"n\">x.d</span><span class=\"bp\">=</span><span class=\"n\">y.d</span><span class=\"o\">):</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">:=</span><span class=\"kd\">by</span><span class=\"o\">{</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- creates four goals</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>However, this is sort of cheating since the <code>example</code> is actually equivalent to the lemma the <code>ext</code> attribute generates.</p>",
        "id": 279906422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650689910
    },
    {
        "content": "<p>you can also apply the <code>ext</code> attribute after the fact like <code>attribute [ext] mat</code>, if you can't change the code of <code>structure mat</code> itself</p>",
        "id": 279961052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650773589
    }
]