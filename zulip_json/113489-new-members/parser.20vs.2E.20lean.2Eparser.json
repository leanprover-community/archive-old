[
    {
        "content": "<p>I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">ghrunner</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive.lean</span><span class=\"o\">:</span><span class=\"mi\">198</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span>\n<span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n  <span class=\"n\">lean.parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">ghrunner</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">interactive.lean</span><span class=\"o\">:</span><span class=\"mi\">198</span><span class=\"o\">:</span><span class=\"mi\">48</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">basic</span> <span class=\"n\">overload</span> <span class=\"n\">resolution</span> <span class=\"n\">where</span> <span class=\"n\">arguments</span> <span class=\"n\">are</span> <span class=\"n\">elaborated</span> <span class=\"n\">without</span> <span class=\"n\">any</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">because</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">available</span>\n</code></pre></div>\n<p>after what seems local and innocent changes in <code>to_additive</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13330\">https://github.com/leanprover-community/mathlib/pull/13330</a>. How could I have broken that?</p>",
        "id": 278515037,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1649660849
    }
]