[
    {
        "content": "<p>It seems for the mutually recursive function below, Lean cannot find the well founded relation.  How can I specify the relation?</p>\n<p>inductive Value : Type<br>\n| NatValue : ℕ -&gt; Value<br>\n| ListValue : list Value -&gt; Value<br>\n| NoValue : Value</p>\n<p>mutual def findRecord, findRecordHelper<br>\nwith findRecord : ℕ → Value → (list Value)<br>\n| l (Value.ListValue ((Value.NatValue x)::r)) :=<br>\n                 if beq_nat x l then<br>\n                     ((Value.NatValue x)::r)<br>\n                 else findRecordHelper x r<br>\n| _ _ := list.nil<br>\nwith findRecordHelper : ℕ → (list Value) → (list Value)<br>\n| _ list.nil := list.nil<br>\n| v (f::r) := match findRecord v f with<br>\n              | list.nil := findRecordHelper v r<br>\n              | x        := x<br>\n              end.</p>",
        "id": 129479543,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531323878
    },
    {
        "content": "<p>Do you know about the triple back tick thing? It makes code much easier to read</p>",
        "id": 129479933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531324265
    },
    {
        "content": "<p><code> ```lean </code> at the beginning and <code> ``` </code> at the end</p>",
        "id": 129479954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531324287
    },
    {
        "content": "<p>Here it is with the triple back thing.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">NatValue</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span>\n<span class=\"bp\">|</span> <span class=\"n\">ListValue</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Value</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Value</span>\n<span class=\"bp\">|</span> <span class=\"n\">NoValue</span> <span class=\"o\">:</span> <span class=\"n\">Value</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">findRecord</span><span class=\"o\">,</span> <span class=\"n\">findRecordHelper</span>\n<span class=\"k\">with</span> <span class=\"n\">findRecord</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Value</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">Value</span><span class=\"bp\">.</span><span class=\"n\">ListValue</span> <span class=\"o\">((</span><span class=\"n\">Value</span><span class=\"bp\">.</span><span class=\"n\">NatValue</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">beq_nat</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"k\">then</span>\n<span class=\"o\">((</span><span class=\"n\">Value</span><span class=\"bp\">.</span><span class=\"n\">NatValue</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"k\">else</span> <span class=\"n\">findRecordHelper</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"k\">with</span> <span class=\"n\">findRecordHelper</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">Value</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">Value</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">findRecord</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">findRecordHelper</span> <span class=\"n\">v</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kn\">end</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 129480038,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531324335
    }
]