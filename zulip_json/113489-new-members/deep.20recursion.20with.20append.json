[
    {
        "content": "<p>never mind why I want to know the result of gluing all these strings together, but</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"s2\">&quot;~&quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"s2\">&quot;∃&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"s2\">&quot;S&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;=&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>this gives <code>deep recursion was detected at 'replace' (potential solution: increase stack space in your system)</code> locally (and in the browser it just seems to run forever)</p>\n<p>Even just <code>#reduce \"~\" ++ (\"∃\")</code> doesn't finish in the browser for me.</p>",
        "id": 201165782,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592411204
    },
    {
        "content": "<p>I think <code>#reduce</code> with characters is super slow. Would <code>#eval</code> work for you?</p>",
        "id": 201166048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592411331
    },
    {
        "content": "<p>A character is something like a natural number plus a proof that it lies in the range of valid Unicode characters</p>",
        "id": 201166123,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592411380
    },
    {
        "content": "<p>I've run into surprisingly different behavior with <code>#eval</code> and <code>#reduce</code>. <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  I remember you saying you got a noticeable speedup when you allocated more processing power to Lean on your drive . Could this be a useful simple way to test that?</p>",
        "id": 201176493,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592416074
    },
    {
        "content": "<p><code>#reduce</code> and <code>#eval</code> are completely different. See the discussion here: <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 201177678,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592416595
    },
    {
        "content": "<p>i don't see a reason why <code>#reduce</code> should be memory-limited. things that spawn a bunch of parallel processes might be faster with more memory, if memory was limiting the number of processes running in parallel</p>",
        "id": 201178770,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592417063
    },
    {
        "content": "<p><code>#eval</code> is great, but now what I want is to establish that <code>\"~\" ++ (\"∃\" ++ \"a\" ++ \":\" ++ (\"S\" ++ \"a\" ++ \"=\" ++ \"0\")) = \"~∃a:Sa=0\"</code>. Apparently <code>refl</code> is like reduce, not like eval</p>",
        "id": 201197090,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592426240
    },
    {
        "content": "<p><code>simp</code></p>",
        "id": 201197252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592426305
    },
    {
        "content": "<p><code>simp</code> doesn't work most likely because we don't have many lemmas about <code>string</code>.</p>",
        "id": 201197621,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592426489
    },
    {
        "content": "<p>I'm trying to write those lemmas myself now ... I don't know that I can do it without access to <code>string_imp</code>.</p>",
        "id": 201198524,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592426983
    },
    {
        "content": "<p>Oh, actually this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;~&quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"s2\">&quot;∃&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"s2\">&quot;S&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;=&quot;</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;~∃a:Sa=0&quot;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">to_list_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">[</span><span class=\"err\">&#39;</span><span class=\"bp\">~</span><span class=\"err\">&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"bp\">∃</span><span class=\"err\">&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"o\">:</span><span class=\"err\">&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"n\">S&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"bp\">=</span><span class=\"err\">&#39;</span><span class=\"o\">,</span><span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"err\">&#39;</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201198554,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592426997
    },
    {
        "content": "<p>I don't have <code>string.to_list_inj</code></p>",
        "id": 201198816,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592427084
    },
    {
        "content": "<p>What version of Lean / mathlib are you using? The lemma was added about 2 years ago: <a href=\"https://github.com/leanprover-community/mathlib/commit/a30b7c773db17cf7d1b551ba0f24645079296628#diff-6ab0314160d20014ac5f2e53531740b1R57\">https://github.com/leanprover-community/mathlib/commit/a30b7c773db17cf7d1b551ba0f24645079296628#diff-6ab0314160d20014ac5f2e53531740b1R57</a></p>",
        "id": 201199499,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592427424
    },
    {
        "content": "<p>Clearly we need a <code>norm_str</code> tactic</p>",
        "id": 201199589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592427480
    },
    {
        "content": "<p><em>facepalm</em> I was working in a scratch <code>.lean</code> file with no mathlib installed, silly mistake</p>",
        "id": 201199686,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592427520
    },
    {
        "content": "<p>If you don't want all of mathlib, you can also just copy and paste the theorem into your file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">string</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">to_list_inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">},</span> <span class=\"n\">to_list</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">to_list</span> <span class=\"n\">s₂</span> <span class=\"bp\">↔</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">s₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">s₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">string</span>\n</code></pre></div>",
        "id": 201199820,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592427598
    },
    {
        "content": "<p>Why doesn't <code>unfold string.to_list</code> manage to unfold <code>\"~\".to_list</code>?</p>",
        "id": 201202175,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592428838
    },
    {
        "content": "<p><code>string</code> has a private implementation, which is somewhat unusual for a lean data structure</p>",
        "id": 201204284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592430015
    }
]