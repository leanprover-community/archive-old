[
    {
        "content": "<p>I was experimenting with lambda reductions.  Can someone help me complete the following theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What should replace the \"sorry\"?</p>",
        "id": 129679786,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531610759
    },
    {
        "content": "<p>here's a proof:</p>\n<div class=\"codehilite\"><pre><span></span>theorem testit: (∃ x, ((λ (f : (ℕ → ℕ)), (λ (x:ℕ), (f x)+(f x)))\n                         (λ (x:ℕ), x+1)) x = 1) → 3=4 :=\nbegin\n    intro, cases a,\n    dsimp at a_h,\n    rw [add_assoc, add_left_comm 1] at a_h,\n    cases a_h\nend\n</pre></div>",
        "id": 129680026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531611303
    },
    {
        "content": "<p>Here's a more fleshed-out argument:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- name the hypotheses</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- we&#39;re going to prove by contradiction</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- instead of dsimp do the definitional rewrite yourself</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">add_assoc</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- Hn now n + 1 + n + 1 = 1</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">add_right_comm</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- Hn now (n + n) + 1 + 1 = 1</span>\n    <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- H₂ now (n+n)+1=0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"bp\">_</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129696201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531648904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">x</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">testit&#39;</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">testit&#39;&#39;</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129696426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531649486
    },
    {
        "content": "<p>Now let's go for a more mathlib version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- name the hypotheses</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span> <span class=\"c1\">-- we&#39;re going to prove by contradiction</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- instead of dsimp do the definitional rewrite yourself</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">Hn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">Hn</span><span class=\"o\">,</span> <span class=\"c1\">-- H₂ now 2*n+1=0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"bp\">_</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 129696429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531649493
    },
    {
        "content": "<p>I believe my last version would be the mathlib version :P</p>",
        "id": 129696430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531649512
    },
    {
        "content": "<p>I meant using mathlib tactics. Note the use of <code>rintro</code> to squash Kevin's first two lines into one, and the use of <code>ring</code> for the computation</p>",
        "id": 129696469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531649552
    },
    {
        "content": "<p>obfuscated version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit&#39;&#39;</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 129696475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531649588
    },
    {
        "content": "<p>I also replaced <code>exfalso</code> by <code>by_contradiction</code>. Here it buys you nothing but it's more powerful in general, so let's remember that one.</p>",
        "id": 129696476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531649588
    },
    {
        "content": "<p>I prefer:</p>\n<div class=\"codehilite\"><pre><span></span>theorem testit&#39;&#39;: (∃ x, ((λ (f : (ℕ → ℕ)), (λ (x:ℕ), (f x)+(f x)))\n                         (λ (x:ℕ), x+1)) x = 1) → 3=4\n| ⟨0, h⟩ := by cases h\n</pre></div>",
        "id": 129696584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531649819
    },
    {
        "content": "<p>nice</p>",
        "id": 129696589,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531649857
    },
    {
        "content": "<p>the match against <code>0</code> at the beginning is clever</p>",
        "id": 129696590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531649859
    },
    {
        "content": "<p>(but of course none of these is the mathlib version because the statement is ridiculous)</p>",
        "id": 129696631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531649915
    },
    {
        "content": "<p>Again, my \"mathlib version\" story was only about rewriting Kevin's proof in the same spirit but using more mathlib power</p>",
        "id": 129696640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531649963
    },
    {
        "content": "<p>Anyway, hopefully Ken will be able to learn many things from this discussion</p>",
        "id": 129696642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531649984
    },
    {
        "content": "<p>I think lean golf is a nice way to learn new tricks, although its actual applicability is debatable</p>",
        "id": 129696702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531650015
    },
    {
        "content": "<p>Actually I'd like to be sure I understand your trick. You let the equation compiler do the job of checking that 0 is the only possibility for x, right?</p>",
        "id": 129696706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531650049
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 129696717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531650121
    },
    {
        "content": "<p>Right. The equation compiler figures out a sequence of case splits that produce the cases that I give. Since I wrote <code>0</code> instead of <code>n</code> for the first thing, it deduces that we have a case split on the nat, but that requires a second branch, for <code>&lt;succ n, h&gt;</code>. But here <code>h</code> has a type like <code>succ stuff = 0</code>, so it does a second case split on <code>h</code> and deduces that this case is impossible</p>",
        "id": 129696756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531650168
    },
    {
        "content": "<p>Ok, this is what I thought. Well done, equation compiler!</p>",
        "id": 129696763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531650216
    },
    {
        "content": "<p>I like to take advantage of this for doing things like pattern matching on <code>l : list A</code> and <code>h : length l = 2</code> and only providing a case for <code>[a, b], _</code></p>",
        "id": 129696803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531650274
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 129696805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531650298
    },
    {
        "content": "<p>I like the way that the title of this thread was once a bit of an overstatement but has now become true. Something here for everyone now :-)</p>",
        "id": 129696815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531650360
    },
    {
        "content": "<blockquote>\n<p>Actually I'd like to be sure I understand your trick. </p>\n</blockquote>\n<p>I'm still struggling with the <code>cases a_h</code> line in the very first proof <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n<p><code>cases</code> seems to be much more powerful than I'd realised. Applied to <code>n + (n + (1 + 1)) = 1</code> it realises that both nats are <code>succ (something)</code> so reduces to <code>succ (n+n)=0</code> and then tries again, realises that the nats are made with different constructors this time, and solves the goal. At least that's my understanding of what's going on.</p>",
        "id": 129697094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651023
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">H</span>\n</pre></div>\n\n\n</blockquote>\n<p>You lose a point for proof instability</p>",
        "id": 129697236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651334
    },
    {
        "content": "<p>When Leo removes <code>add_assoc</code> from simp you're in trouble</p>",
        "id": 129697237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651354
    },
    {
        "content": "<p>you sound like Mario</p>",
        "id": 129697238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531651364
    },
    {
        "content": "<p>I'm practising.</p>",
        "id": 129697240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">injections</span>\n</pre></div>",
        "id": 129697246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531651426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">testit4</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">injections</span>\n</pre></div>",
        "id": 129697293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651521
    },
    {
        "content": "<p>yes, <code>cases</code> basically has <code>injection</code> built in</p>",
        "id": 129697294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531651527
    },
    {
        "content": "<p>I don't think I'd internalised that before.</p>",
        "id": 129697296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651539
    },
    {
        "content": "<p>That's what makes doing cases on an inductive predicate so powerful (like Coq's <code>inversion</code> tactic)</p>",
        "id": 129697336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531651573
    },
    {
        "content": "<p>because it can skip all the cases where the indices don't match up</p>",
        "id": 129697339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531651619
    },
    {
        "content": "<p>That's funny, because last week my son discovered this. IIRC <code>inversion</code> is introduced in Software Foundations well after <code>cases</code> and in Lean you can just do cases anyway. I think that when I did those exercises in Lean myself I was still at the \"let's try <code>cases;simp</code> and see if it works\" stage.</p>",
        "id": 129697344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651664
    },
    {
        "content": "<p>In my experiments trying to understand <code>cases</code> on <code>eq</code> I found that it could be used to do a rewrite for either the left or the right hand side (<code>cases a = blah</code> and <code>cases blah = a</code> both remove <code>a</code> and substitute <code>blah</code> everywhere). The only disconcerting thing is that the order of the hypotheses gets randomised a bit (presumably because they're reverted and then unreverted under the hood or something)</p>",
        "id": 129697434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531651827
    }
]