[
    {
        "content": "<p>Is scoping the only difference between constants and variables in Lean?</p>",
        "id": 161610316,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553482539
    },
    {
        "content": "<p>constants are axioms while variables is just a shorthand to insert \"forall\" in the following theorems</p>",
        "id": 161610380,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553482633
    },
    {
        "content": "<p>so for example <code>classical.choice</code> is a constant</p>",
        "id": 161610384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553482648
    },
    {
        "content": "<p>\"forall\" as an assumed hypothesis in all the following theorems?</p>",
        "id": 161610518,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553482831
    },
    {
        "content": "<p>I guess I'm not certain how that differs from an axiom.</p>",
        "id": 161610586,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553482954
    },
    {
        "content": "<p>I have struggled explaining it before, but I guess I'll still try</p>",
        "id": 161610687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483132
    },
    {
        "content": "<p><code>constant</code> never goes out of scope, it's as permanent as a <code>def</code></p>",
        "id": 161610741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553483173
    },
    {
        "content": "<p><code>def f : nat -&gt; nat := fun x, x+1</code> is the same as:</p>\n<div class=\"codehilite\"><pre><span></span>variable (n : nat)\ndef f : nat := n + 1\n</pre></div>",
        "id": 161610745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483196
    },
    {
        "content": "<p>but if you do:</p>\n<div class=\"codehilite\"><pre><span></span>constant n : nat\ndef g : nat := n + 1\n</pre></div>\n\n\n<p>then you're declaring a constant <code>n</code> and <code>g</code> is now a natural number, not a function</p>",
        "id": 161610767,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483248
    },
    {
        "content": "<p><code>f 3</code> evaluates to <code>4</code> while <code>g 3</code> is a type mismatch because the type of <code>g</code> is <code>nat</code></p>",
        "id": 161610770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483277
    },
    {
        "content": "<p><code>f (f n)</code> works but <code>g (g n)</code> doesn't make sense</p>",
        "id": 161610817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553483299
    },
    {
        "content": "<p><code>g n</code> doesn't make sense to start with?</p>",
        "id": 161610821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483324
    },
    {
        "content": "<p>My point being that there is no analog of <code>f (f n)</code> for <code>g</code></p>",
        "id": 161610835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553483356
    },
    {
        "content": "<p>you can't substitute for a constant</p>",
        "id": 161610838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553483365
    },
    {
        "content": "<p>So it is like constants and variables in C? I.e. const float pi = 3.14, versus int x = 0. pi can never take a different value, but x can?</p>",
        "id": 161611159,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553483809
    },
    {
        "content": "<p>well Lean is a functional programming language like Haskell, unlike the more conventional programming languages (C, Java, Python) which are imperative languages</p>",
        "id": 161611231,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483891
    },
    {
        "content": "<p>but Lean <code>constant</code> would be C <code>const</code> with a \"secret\" value</p>",
        "id": 161611244,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483932
    },
    {
        "content": "<p>where <code>variable</code> is just the input to functions</p>",
        "id": 161611246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553483939
    },
    {
        "content": "<p>I think I kind of see. I started reading a tutorial on Haskell earlier this week. Does it have something similar that I will run across?</p>",
        "id": 161611706,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553484506
    },
    {
        "content": "<p>I don't know Haskell but I don't think so</p>",
        "id": 161611797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553484632
    },
    {
        "content": "<p>Is a variable the same as a variable in the lambda calculus?</p>",
        "id": 161612040,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553485055
    },
    {
        "content": "<p>yes</p>",
        "id": 161612090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553485094
    },
    {
        "content": "<p>Ah. I have not gotten to the typed lambda calculus yet. Will I see constants there?</p>",
        "id": 161612111,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553485151
    },
    {
        "content": "<p>Constants are like Haskell compiler intrinsic functions</p>",
        "id": 161612181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553485318
    },
    {
        "content": "<p>they are functions, you can see that they have been declared as such, but you can't see the definition</p>",
        "id": 161612226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553485341
    },
    {
        "content": "<p>Haskell doesn't really have an equivalent to the <code>variables</code> command. Scopes are handled differently in Haskell - you can think of the whole program as being in a single shared scopes where all your definitions are like <code>let</code> bindings. Lean is not like that - there are no variable scopes that span multiple definitions</p>",
        "id": 161612313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553485519
    },
    {
        "content": "<p>I guess I haven't gotten that far yet.</p>",
        "id": 161612451,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553485738
    },
    {
        "content": "<p>Are constants the same as the \"term constants\" mentioned here: <a href=\"https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus\">https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus</a></p>",
        "id": 161612473,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553485792
    },
    {
        "content": "<p>yes</p>",
        "id": 161615236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553490684
    },
    {
        "content": "<p>Thank you</p>",
        "id": 161615376,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1553490934
    },
    {
        "content": "<p>One other difference is that users are hugely discouraged from ever using constants ever. I'm not sure there's a single one in mathlib. But there are variables everywhere</p>",
        "id": 161619630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553497689
    },
    {
        "content": "<p>Hi guys! I wanted to be clear on the idea of constants and variables..<br>\nIs it correct to map the notion of <code>constants</code> to existential quantifiers (or something arbitrary?) and the <code>variables</code> to universal quantifiers?<br>\nI am sensing this notion from the type of the theorems below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">t1</span> <span class=\"c1\">-- t1 : p → q → p</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1'</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">t1'</span> <span class=\"c1\">--t1' : ∀ (p q : Prop), p → q → p</span>\n</code></pre></div>\n<p>Let me know if I am right!</p>",
        "id": 256733585,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1633697031
    }
]