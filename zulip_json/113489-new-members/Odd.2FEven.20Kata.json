[
    {
        "content": "<p>Hi. I'm trying to do the following training kata.</p>\n<p><a href=\"https://www.codewars.com/kata/5e998b42dcf07b0001581def/train/lean\">https://www.codewars.com/kata/5e998b42dcf07b0001581def/train/lean</a></p>\n<p>I've managed to do the basic and addition sections fine, but the multiplication section feels hard given that I don't actually have (I think) any of the regular natural number theorems: in particular I don't think I have the distributive law. So I can't see how to proceed. Can anyone assist?</p>",
        "id": 216596517,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605265705
    },
    {
        "content": "<p>This Kata was originally written a while ago, back when the <code>nat</code> stuff was still in Core Lean. Now it is in mathlib but the imports of the kata have not been changed to keep up.</p>\n<p>If you <code>import data.nat.basic</code> at the top of the file it should work.</p>\n<p>(I wrote the Kata but I haven't been active on Codewars in a while, but this does bring up a good point about katas which aren't 'broken', since the Preloaded/Solution files still check, but the expected lemmas are not there anymore).</p>",
        "id": 216597065,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605266130
    },
    {
        "content": "<p>Thank you! I did wonder...</p>\n<p>Incidentally my approach generally has been to do an induction tactic on the evenness hypothesis, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">odd_add_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">plus_one_even</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">even_ss</span> <span class=\"n\">even_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">even_ss</span> <span class=\"n\">plus_one_even</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This has worked pretty well, but I wasn't sure if this was the intended approach!</p>",
        "id": 216597173,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266235
    },
    {
        "content": "<p>Yeah that's pretty much the expected approach.</p>",
        "id": 216597314,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605266328
    },
    {
        "content": "<p>Hmm - it seems inserting <code>import data.nat.basic</code> at the top has broken all my existing proofs...</p>",
        "id": 216597435,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266439
    },
    {
        "content": "<p>Possibly because it then does something different when I do the induction?</p>",
        "id": 216597449,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266458
    },
    {
        "content": "<p>That's very strange, and I can't seem to reproduce that error. I don't think <code>induction</code> should do anything different.</p>",
        "id": 216597599,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605266598
    },
    {
        "content": "<p>Here is I think a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_ss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_one</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_ss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">odd</span> <span class=\"n\">even</span>\n\n<span class=\"c1\">-- Getting Started</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_add_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">plus_one_odd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">odd_one</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">odd_ss</span> <span class=\"n\">plus_one_odd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216597726,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266695
    },
    {
        "content": "<p>With the first line, the proof doesn't work: my tactic state is as follows after the induction line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nhn_w</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hn_h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">hn_w</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 216597754,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266723
    },
    {
        "content": "<p>Without it, it is like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">even.even_zero</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">even.even_ss</span>\n<span class=\"n\">nhn_n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hn_ᾰ</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">hn_n</span>\n<span class=\"n\">plus_one_odd</span><span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">hn_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">hn_n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 216597783,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266748
    },
    {
        "content": "<p>I think it might be using some kind of odd and even definition from import data.nat.basic?</p>",
        "id": 216597858,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266792
    },
    {
        "content": "<p>Rather than the inductive definition in the file.</p>",
        "id": 216597865,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605266801
    },
    {
        "content": "<p>Yeah, there is a definition for odd and even now in the root namespace. I tested on Codewars, which is still on 3.20, which was why I didn't get any errors on there. I guess this is one of the cases where the Lean version mismatch between your local install of Lean and Codewars is kind of an issue... Not sure when/if Lean on Codewars will be updated anytime soon, since I haven't really kept up with what is happening on there,</p>",
        "id": 216598066,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605266956
    },
    {
        "content": "<p>Yeah, I'm working in VSCode (because I don't think you get the same functionality on Codewars!) Hmm: I suppose a way of solving this would be just to rename odd and even to my_odd and my_even?</p>",
        "id": 216598170,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605267022
    },
    {
        "content": "<p>Yeah, that will become an issue the next time Codewars updates their version of Lean. In the meantime, I guess you can put the contents of that file in a namespace (but remember to not have the namespace when submitting) and it'd work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_ss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_one</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_ss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">odd</span> <span class=\"n\">even</span>\n\n<span class=\"c1\">-- Getting Started</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">even_add_one</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">plus_one_odd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">odd_one</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">odd_ss</span> <span class=\"n\">plus_one_odd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 216598531,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605267253
    },
    {
        "content": "<p>Grand, thanks (I don't really understand how namespaces work...)</p>",
        "id": 216602471,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605269817
    },
    {
        "content": "<p>Done! Thanks for help.</p>",
        "id": 216603625,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605270731
    }
]