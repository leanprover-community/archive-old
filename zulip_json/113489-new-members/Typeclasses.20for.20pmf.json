[
    {
        "content": "<p>Hello, I am Joey Lupo, an MSc student at the University of Edinburgh. For my specific question, skip to the MWE a the end.</p>\n<p>First a quick intro to let somebody else know what I am doing. For my MSc thesis under the supervision of Prof. Paul Jackson, I am trying to write a simple framework in Lean for formalizing cryptographic protocols. The work is most similar to two previous developments in Coq: David Nowak's 2007 paper \"A framework for game-based security proofs\" (found at <a href=\"https://www.cristal.univ-lille.fr/~nowakd/cryptogames/\">https://www.cristal.univ-lille.fr/~nowakd/cryptogames/</a>) and Adam Petcher's 2015 \"The Foundational Cryptographic Framework\" (found at <a href=\"https://github.com/adampetcher/fcf\">https://github.com/adampetcher/fcf</a>). The one-sentence summary is to model an attacker's advantage in breaking a given cryptographic protocol as a probability over a distribution, model our hardness assumption as a probability over a distribution, and then prove these two probabilities are negligibly close. </p>\n<p>Okay, in writing these proofs, we need some probabilistic framework to write our definitions. For example, in Nowak, the decisional Diffie-Hellman hardness assumption is written as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Definition</span> <span class=\"n\">DDH</span> <span class=\"o\">(</span><span class=\"n\">epsilon</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">forall</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">G</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">G</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Distrib.T</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n  <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eqb</span> <span class=\"n\">b</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">epsilon</span>\n  <span class=\"o\">(</span>\n    <span class=\"n\">x</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">seqNE</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">;</span>\n    <span class=\"n\">y</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">seqNE</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">;</span>\n    <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span>\n    <span class=\"n\">x</span> <span class=\"bp\">&lt;$</span> <span class=\"o\">(</span><span class=\"n\">seqNE</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">;</span>\n    <span class=\"n\">y</span> <span class=\"bp\">&lt;$</span> <span class=\"o\">(</span><span class=\"n\">seqNE</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">;</span>\n    <span class=\"n\">z</span> <span class=\"bp\">&lt;$</span> <span class=\"o\">(</span><span class=\"n\">seqNE</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">order</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">;</span>\n    <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>The <code>x &lt;$ f; g</code> idiom is the mondadic bind operation for probability distributions (viewing probability distributions as a (Giry) monad). Since we only need distributions over finite sets (e.g. bitvectors in <code>{0,1}^n</code> or group elements of <code>\\Z_q</code>), I have been trying to use the probability mass function file at</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/probability_mass_function.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/measure_theory/probability_mass_function.lean</a></p>\n<p>which has already handled the bind and return (or pure in this file) which define the relevant monad. However, in trying to leverage Lean's <code>do</code> notation for monads, I have run into an issue with typeclasses in that the <code>pmf</code> object defined in the probability math function file is not an <code>instance</code> of the <code>monad</code> typeclass. Here is a MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.probability_mass_function</span>\n\n<span class=\"c1\">--instance : monad (pmf) := sorry</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">pa</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I am having trouble figuring out how to point Lean to the relevant methods to prove that <code>pmf</code> satisfies a monad. I am having similar troubles with typeclasses in defining a <code>pmf</code> over <code>bitvec</code>'s of length <code>n</code> but I can make a later post specific to that issue.</p>",
        "id": 244274203,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624970823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"415873\">@Joey Lupo</span> Welcome! I'm not an expert on this topic, but are you having trouble to fill in the <code>sorry</code> that you commented?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">pmf</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 244275877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624971583
    },
    {
        "content": "<p>Yes, not sure exactly how to do an \"instance proof.\"</p>",
        "id": 244277252,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624972141
    },
    {
        "content": "<p>If you type a <code>_</code>, you will get a lightbulb (assuming you are editing in VScode).</p>",
        "id": 244277309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624972167
    },
    {
        "content": "<p>If you click on the <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> you can choose something like \"Generate skeleton for structure\"</p>",
        "id": 244277335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624972183
    },
    {
        "content": "<p>Some more detail, you'll likely also want to prove that whatever instance you provide for monad is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_monad\">docs#is_lawful_monad</a></p>",
        "id": 244277580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624972290
    },
    {
        "content": "<p>Where the skeleton will ask for more fields than you need. To prove the monad portion of lawfulness, you only need to prove pure_bind and bind_assoc</p>",
        "id": 244277808,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624972385
    },
    {
        "content": "<p>Thank you for the <code>_</code>  + <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> tip, Johan, I did not know about that in VSCode. So that has given me the outline. It looks like I'll have to dig a little more into the pmf file/type universe system than I had hoped. I was (optimistically) hoping to be able to just point to the already defined pmf.bind and pmf.pure as my \"instance proof.\"</p>",
        "id": 244280285,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624973389
    },
    {
        "content": "<p>What's the issue with using the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pmf.bind\">docs#pmf.bind</a> and the like for the instance proof?</p>",
        "id": 244285785,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624975448
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.probability_mass_function</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">pmf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pmf.pure</span><span class=\"o\">,</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pmf.bind</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_lawful_functor</span> <span class=\"n\">pmf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pmf.map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pmf.map_comp</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_lawful_monad</span> <span class=\"n\">pmf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pmf.pure_bind</span><span class=\"o\">,</span>\n  <span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pmf.bind_bind</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">pa</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 244301027,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624980773
    },
    {
        "content": "<p>Yea, using the existing <code>pmf.bind</code> is exactly what I was trying to do.  I was running into difficulty with explicit vs. implicit parameters of <code>pmf</code> vs. what the typeclass was expecting, and see that we have similar solutions: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">pmf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pmf.pure</span><span class=\"o\">,</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pmf.bind</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 244330233,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624993148
    },
    {
        "content": "<p>Thank you for the quick response though <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>.</p>",
        "id": 244331027,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624993466
    },
    {
        "content": "<p>These instances should probably be PR'd, right?</p>",
        "id": 244334477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624994976
    },
    {
        "content": "<p>The whole file can be probably updated to use things like <code>function.support</code>, etc.</p>",
        "id": 244335061,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624995224
    },
    {
        "content": "<p>Side note: what is the general protocol for asking questions about Lean which might require a one or two line answer? Is there a particular stream or thread for simple questions, or is it fine to just start a new thread in #general?</p>",
        "id": 244335585,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624995442
    },
    {
        "content": "<p>i.e. something that an experienced user would be able to look at and immediately know the issue because they have come across it or similar before, whereas it might take a new user several hours to figure out (e.g. the <code>@pmf.bind</code> or <code>\\lambda _, pmf.bind </code> working and <code>pmf.bind</code> not working).</p>",
        "id": 244336010,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1624995627
    },
    {
        "content": "<p>there used to be a thread for this, but people often make bad estimates about the length of the answer thread so it got pretty noisy. Just make a new topic, they are not very heavyweight</p>",
        "id": 244336253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624995740
    }
]