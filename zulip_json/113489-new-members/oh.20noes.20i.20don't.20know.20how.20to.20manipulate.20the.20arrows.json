[
    {
        "content": "<p>this problem looks somewhat tractable... until i read the formalized statement <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <a href=\"https://do.proof.in.tum.de/competitions/contest/13/tasks/2/\">https://do.proof.in.tum.de/competitions/contest/13/tasks/2/</a></p>\n<p>oh noes i can see some weird symbols and when i ctrl click on them i see weird definitions and i have absolutely no idea how to manipulate them</p>",
        "id": 244098741,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624850994
    },
    {
        "content": "<p>it seems that the proof is already in mathlib (extend_function_of_lt) but i have no idea what the theorem states</p>",
        "id": 244111563,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624866443
    },
    {
        "content": "<p>Do you mean the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↪</mo></mrow><annotation encoding=\"application/x-tex\">\\hookrightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↪</span></span></span></span> arrows?</p>",
        "id": 244111677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624866511
    },
    {
        "content": "<p>Those are <code>embedding</code>s: a function, together with a proof that it is injective.</p>",
        "id": 244111694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624866529
    },
    {
        "content": "<p><code>↥</code>, <code>↑</code> and <code>↪</code>. So... <code>↪</code> is a structure that bundles a function with a proof, <code>↥</code> coerces a predicate to a type and <code>↑</code> coerces a <code>finset</code> to a <code>set</code>, and a <code>set</code> is a predicate. That's all I know.</p>",
        "id": 244112104,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624866831
    },
    {
        "content": "<p>Looks good to me</p>",
        "id": 244112155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624866854
    },
    {
        "content": "<p>If you have a question then perhaps you should ask it explicitly rather than just throwing around a link and complaining about stuff which you don't understand but which others probably do.</p>",
        "id": 244112194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624866898
    },
    {
        "content": "<p>I do agree that it's interesting that the second Lean version in the resources has a lot more funky arrows than the first one :-)</p>",
        "id": 244112334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624866986
    },
    {
        "content": "<p>not a lot lol, like there are only 2 more arrows <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<p>hmm so to deal with the arrows i should just like... try to unfold them? i mean the <code>↥</code> and the <code>↑</code><br>\nthis is what i got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">goal_injective</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">set.restrict</span> <span class=\"n\">h</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coe_sort</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coe</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lift_t</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">--</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244113242,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624867659
    },
    {
        "content": "<p>like i'm really confused i don't know where to start <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 244113322,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624867690
    },
    {
        "content": "<p>Yeah, unfolding is never the right thing to do basically. However it is a very good way of learning about definitional equality, I used to do it a lot. Nowadays I look at problems like this from the top down -- instead of trying to manipulate the things I'm given, I ask myself what the actual proof is that I want to formalise first.</p>\n<p>Rather than unfolding, you might want to instead ask yourself what you want from an injective map, e.g. you might want to get the underlying map, and the proof that it's injective. Similarly you might ask what you want from a coercion from finsets to sets to types, probably you just want some dictionary which can take you from an element of one to an element of the other, for example. Unfolding won't give this (at least not easily). Here you should be using the API.</p>",
        "id": 244113596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624867900
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244115348,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624869061
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244115404,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624869117
    }
]