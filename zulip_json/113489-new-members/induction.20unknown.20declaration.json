[
    {
        "content": "<p>I am (again) trying to use my own induction rules. Oddly,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">w</span> <span class=\"n\">using</span> <span class=\"n\">neword.cons_induction</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>simply says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">neword.cons_induction'</span>\n</code></pre></div>\n<p>although that is certainly a known declaration; tactics like <code>refine</code> find it just fine.</p>\n<p>Any quick ideas? (Iâ€™ll just use <code>refine</code> manually for now)</p>",
        "id": 272700100,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645456124
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 272706733,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645459326
    },
    {
        "content": "<p>\"using\" needs a fully qualified name. So it's probably something like \"free_group.neword.cons_induction\"</p>",
        "id": 272707375,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645459645
    }
]