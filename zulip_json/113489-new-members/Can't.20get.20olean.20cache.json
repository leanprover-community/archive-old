[
    {
        "content": "<p>I seem to be having some trouble creating a new project using the current version of mathlib. I used <code>leanproject new xxx</code>, which gave me a new directory <code>xxx</code> with all the source .lean files in <code>_target/deps/mathlib/</code>, but the <code>src/</code> directory, where .olean files are supposed to be, is entirely empty. When I ran <code>leanproject get-cache</code> or <code>get-mathlib-cache</code>, the <code>src/</code> directory doesn't get populated. In fact, it downloads <code>fd48ac55697cadbf777009e95b963aa142310a84.tar.xz</code> into <code>~/.mathlib/</code>. When I unpack it, it actually has all the .olean files of an older version of mathlib (it doesn't have <code>algebra/monoid_algebra/basic.olean</code>).</p>\n<p>What's going on, and how can I continue?</p>",
        "id": 252063653,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630833945
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 252063833,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630834134
    },
    {
        "content": "<p>I could just run <code>leanproject build</code> under <code>_target/deps/mathlib/</code> but I'm trying to avoid needlessly torturing my computer</p>",
        "id": 252063939,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630834278
    },
    {
        "content": "<p>if you want to work on mathlib itself, you shouldn't make a new project, but instead clone mathlib using <code>leanproject get mathlib</code></p>",
        "id": 252064063,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630834427
    },
    {
        "content": "<p>if you're working on a new project this is as intended, mathlib is only in the deps (and it should unpack the oleans there after getting them) and then you can just import + use in your project</p>",
        "id": 252064121,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630834477
    },
    {
        "content": "<p>I just did <code>leanproject get mathlib</code>, which gave me all the <code>.lean</code> and <code>.olean</code> files under <code>src/</code>. Will Lean know to prioritise the use of <code>.olean</code> files when parsing new files under <code>src/</code>? I created a <code>test.lean</code>, but even the import line is taking forever to parse.</p>",
        "id": 252065099,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630835721
    },
    {
        "content": "<p>And it eventually fails with <code>excessive memory consumption</code></p>",
        "id": 252065199,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630835828
    },
    {
        "content": "<p>oh, did you restart the lean server after getting the cache?</p>",
        "id": 252065813,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630836526
    },
    {
        "content": "<p>No. How do I do that</p>",
        "id": 252065820,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630836537
    },
    {
        "content": "<p>Exit VS code and restart it</p>",
        "id": 252065854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630836597
    },
    {
        "content": "<p>Hmm I've done that multiple times</p>",
        "id": 252065898,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630836607
    },
    {
        "content": "<p>All I wanted to do is to update my version of mathlib but the process I went through the first time doesn't seem to yield the same results this time</p>",
        "id": 252066014,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630836755
    },
    {
        "content": "<p>Namely, using <code>leanproject new</code> to get mathlib, etc</p>",
        "id": 252066032,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630836777
    },
    {
        "content": "<p>I've also upgraded Lean from 3.30 to 3.32. Does that somehow change things?</p>",
        "id": 252066065,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630836839
    },
    {
        "content": "<p>I'm confused; are you trying to <em>work on</em> mathlib, or <em>use</em> mathlib in a different project?</p>",
        "id": 252066914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630837762
    },
    {
        "content": "<p>I'm trying to work on mathlib</p>",
        "id": 252067430,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630838348
    },
    {
        "content": "<p>I now have all the lean and olean files all under <code>src/</code>, but the difficulty seems to be <code>excessive memory consumption</code> when I try to <code>import topology.basic</code>, for example</p>",
        "id": 252067671,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630838602
    },
    {
        "content": "<p>so for me, typing this into the terminal works out of the box:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ leanproject get mathlib\n<span class=\"o\">(</span>git stuff<span class=\"o\">)</span>\n<span class=\"o\">(</span>leanproject progressbar<span class=\"o\">)</span>\n$ code mathlib\n</code></pre></div>\n<p>trust the project, and then make a new file with the Lean extension, and <code>import topology.basic</code>. What happens if you try exactly those steps?</p>",
        "id": 252067769,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630838714
    },
    {
        "content": "<p>If you want to get your mathlib project working, change into the root directory of your local clone and type <code>leanproject get-cache</code>. Then restart VS Code.</p>",
        "id": 252067786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630838743
    },
    {
        "content": "<p>Or, if you've not made any local changes yet, nuke your clone and do what Eric suggests</p>",
        "id": 252067845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630838783
    },
    {
        "content": "<p>I did exactly what Eric suggested, which gives this output in the terminal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Cloning</span> <span class=\"k\">from</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib.git</span>\n<span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Found</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n</code></pre></div>",
        "id": 252068285,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839246
    },
    {
        "content": "<p>Then, I opened VSCode anew, created a new file under <code>src/</code> called <code>test.lean</code>, typed <code>import topology.basic</code>. The result is my laptop fan taking off and an eventual <code>excessive memory consumption</code> after several mins</p>",
        "id": 252068341,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839325
    },
    {
        "content": "<p>the <code>code</code> command should've opened vscode itself; did that not work? also, you used \"open folder\" right?</p>",
        "id": 252068400,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630839374
    },
    {
        "content": "<p>I'm on mac, so I don't have <code>code</code> in terminal</p>",
        "id": 252068409,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839392
    },
    {
        "content": "<p>But I opened VSCode and opened the mathlib folder</p>",
        "id": 252068422,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839408
    },
    {
        "content": "<p>(After quitting it entirely)</p>",
        "id": 252068436,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839430
    },
    {
        "content": "<p>m1 mac or normal mac? iirc there's some special instructions fir m1s somewhere</p>",
        "id": 252068437,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630839430
    },
    {
        "content": "<p>Intel mac</p>",
        "id": 252068444,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839443
    },
    {
        "content": "<p>My other folder named <code>mathlib_old</code> created a couple months ago is still working fine</p>",
        "id": 252068545,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839558
    },
    {
        "content": "<p>hmm, I don't want you to break your only working mathlib but I'm otherwise out of ideas. two things; does <code>elan</code> as a command work? and also, could you maybe try copying that folder somewhere and running <code>leanproject up</code> on the clone, and see if that works?</p>",
        "id": 252068708,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630839695
    },
    {
        "content": "<p>Yes, elan works</p>",
        "id": 252068713,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839706
    },
    {
        "content": "<p>because you said you upgradede lean but that usually happens transparently for us through elan</p>",
        "id": 252068793,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630839773
    },
    {
        "content": "<p>Couldn't pull from a relevant git remote. You may try to git pull manually and then run <code>leanproject get-cache</code></p>",
        "id": 252068808,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839801
    },
    {
        "content": "<p><code>git remote -v</code>?</p>",
        "id": 252068819,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630839820
    },
    {
        "content": "<p>Nothing comes out of git remote -v</p>",
        "id": 252068883,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839856
    },
    {
        "content": "<p>My working <code>mathlib_old</code> was created by <code>leanproject new</code></p>",
        "id": 252068925,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839914
    },
    {
        "content": "<p>And it gives me a <code>src/</code> directory containing only the <code>.olean</code> files, while <code>_target/deps/mathlib/</code> contains only the <code>.lean</code> files</p>",
        "id": 252069010,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630839989
    },
    {
        "content": "<p>This time, however, <code>leanproject new</code> gave me a <code>_target/deps/mathlib/</code> containing <code>.olean</code> AND <code>.lean</code> files, while the <code>src/</code> directory is empty</p>",
        "id": 252069032,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630840029
    },
    {
        "content": "<p>the second is the standard setup, the fact that the first works at all is weird to me</p>",
        "id": 252069045,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630840050
    },
    {
        "content": "<p>Hmm. All I did was use the recommended commands both times.</p>",
        "id": 252069356,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630840410
    },
    {
        "content": "<p>Another difference I found was that the old one's <code>leanpkg.path</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">builtin_path</span>\n<span class=\"n\">path</span> <span class=\"bp\">./</span><span class=\"n\">src</span>\n</code></pre></div>\n<p>while the new one's is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">builtin_path</span>\n<span class=\"n\">path</span> <span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span>\n<span class=\"n\">path</span> <span class=\"bp\">./</span><span class=\"n\">src</span>\n</code></pre></div>",
        "id": 252069415,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630840470
    },
    {
        "content": "<p>The old one was <code>lean 3.30.0</code> while new one is <code>lean 3.32.1</code>, if that's relevant at all</p>",
        "id": 252069457,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630840556
    },
    {
        "content": "<p>And I used elan to upgrade lean from 3.30 to 3.32</p>",
        "id": 252069516,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630840587
    },
    {
        "content": "<p>I've got to go now, but I'll come back to finish debugging this. Thanks for your help!</p>",
        "id": 252069533,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630840617
    },
    {
        "content": "<p>If you're working on mathlib itself there should be no <code>.target/deps/mathlib</code> folder</p>",
        "id": 252072805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630844296
    },
    {
        "content": "<p>You're right. My <code>leanproject get mathlib</code> result only has everything within the <code>src/</code> directory, but the problem is, <code>import whatever</code> takes forever and ends in <code>excessive memory consumption</code>. I saw <span class=\"user-mention\" data-user-id=\"214520\">@Christopher Upshaw</span>'s thread above titled \"mathlib hanging\". Maybe that's relevant?</p>",
        "id": 252111101,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630886672
    },
    {
        "content": "<p>You should never be using <code>elan</code> directly at all. It doesn't really make sense to say \"I used elan to upgrade lean\" -- the version of lean used is determined by the nearest leanpkg.toml file, one does not have a specific version of lean installed on one's system, one typically has many versions of lean installed, and the system, not the user  chooses which one to use.</p>\n<p>Let's start again. Go to a place with no mathlib subdirectory. Type <code>leanproject get mathlib</code>. Now change into the new mathlib subdirectory which just appeared and type <code>lean --make src</code>. Does this command terminate after a few seconds with no output? If so, it's working. If not, your installation is broken in an interesting way (you have managed to corrupt your lean set-up somehow) and it will be quite a bore to debug it via chat.</p>",
        "id": 252111473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630887152
    },
    {
        "content": "<p>Thanks for explaining. <code>lean --make src</code> seems to be compiling through everything with no end in sight, so I guess my install is broken :(</p>",
        "id": 252112477,
        "sender_full_name": "Winston Yin",
        "timestamp": 1630888380
    }
]