[
    {
        "content": "<p>Hello all, I am trying to learn lean by working on some binary relations. </p>\n<p>I have defined a strict relation like this:<br>\n<code>def S (a b : A) : Prop := R a b ∧ ¬ R b a</code></p>\n<p>I was able to prove that S is irreflexive. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The Strict Relation is Irreflexive -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">irreflS</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">--add object x to the context</span>\n<span class=\"k\">assume</span> <span class=\"n\">sxx</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">--assume the opposite to derive a contradsiction</span>\n<span class=\"k\">have</span> <span class=\"n\">nrxx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.right</span> <span class=\"n\">sxx</span><span class=\"o\">,</span> <span class=\"c1\">--get the ¬ x≿x from the definition of ≻</span>\n<span class=\"k\">have</span> <span class=\"n\">rxx</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.left</span> <span class=\"n\">sxx</span><span class=\"o\">,</span> <span class=\"c1\">--get the x≿x from the definition of ≻</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nrxx</span> <span class=\"n\">rxx</span><span class=\"o\">,</span> <span class=\"c1\">--show the contradiction</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am having trouble starting on proving that the relation is incomplete, which I have defined this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">incomplete</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to prove this by showing that <code>¬ S x x</code> but I can't seem to introduce <code>x</code>. Is my issue that I have not defined what set these relations are on so that there might not be such an <code>x</code>?</p>\n<p>Here is my complete code:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>section\n\nparameters {A : Type} {R : A → A → Prop}\n\n/- Defininig Complete Relations -/\ndef complete (R : A → A → Prop) : Prop :=\n∀ x y, R x y ∨ R y x\n\n/- Defininig Complete Relations -/\ndef incomplete (R : A → A → Prop) : Prop :=\n∃ x y, ¬ (R x y ∨ R y x)\n\ndef rational (R : A → A → Prop) : Prop :=\ncomplete R ∧ reflexive R ∧ transitive R\n\n/- R is a relexive, complete, transitive relation -/\nparameter (rationalR : rational R)\n\n/- Defininig S the Strict Preference Relation-/\ndef S (a b : A) : Prop := R a b ∧ ¬ R b a\n\n/-###################################-/\n/- Properties of the Strict Relation-/\n/-#################################-/\n\n/- Include the preference relations properties in proofs. -/\ninclude rationalR\n\n/- The Strict Relation is Irreflexive -/\ntheorem irreflS : irreflexive S :=\nbegin\nassume x, --add object x to the context\nassume sxx : S x x, --assume the opposite to derive a contradsiction\nhave nrxx : ¬ R x x, from and.right sxx, --get the ¬ x≿x from the definition of ≻\nhave rxx : R x x, from and.left sxx, --get the x≿x from the definition of ≻\nshow false, from nrxx rxx, --show the contradiction\nend\n\n/- The Strict Relation is Incomplete -/\ntheorem incompS : incomplete S :=\nbegin\nassume x,       /-Now I&#39;m lost -/\n\nend\n\nend\n</code></pre></div>\n</div></div>",
        "id": 281353270,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651781760
    },
    {
        "content": "<p>(note you can use triple <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> for multiline code)</p>",
        "id": 281353637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651781920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"498890\">Greg Leo</span> has marked this topic as resolved.</p>",
        "id": 281353813,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651782007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"498890\">Greg Leo</span> has marked this topic as unresolved.</p>",
        "id": 281353834,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651782022
    },
    {
        "content": "<p>Thanks. That looks nicer.</p>",
        "id": 281353890,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651782068
    },
    {
        "content": "<p>Are you trying to prove <code>incomplete S</code>? It helps if you phrase your question to include the statement you don't know how to prove</p>",
        "id": 281354185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782224
    },
    {
        "content": "<p>Yes. I have added my full code to the first message to show where I am. <code>incomplete S</code> is where I can't get started.</p>",
        "id": 281354309,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651782265
    },
    {
        "content": "<p><code> ``` </code> works in spoilers too (but you have to use <code> ````spoiler </code> with four backticks not three; and you have to use <code> ```lean </code> explicitly)</p>",
        "id": 281354398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782315
    },
    {
        "content": "<p>I think your problem is going to be that the statement is false</p>",
        "id": 281354531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782383
    },
    {
        "content": "<p>Consider <code>A = empty</code></p>",
        "id": 281354554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782396
    },
    {
        "content": "<p>Yes, that's sort of what I was suspecting.</p>",
        "id": 281354609,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651782428
    },
    {
        "content": "<p>Ok, I think I was able to restate the theorem.</p>",
        "id": 281354811,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651782539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">incompS</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">incomplete</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281354829,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651782550
    },
    {
        "content": "<p>That would be better written as <code>theorem incompS [nonempty A] : incomplete S</code></p>",
        "id": 281354997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782644
    },
    {
        "content": "<p>Which tells lean to find a proof that A is nonempty automatically</p>",
        "id": 281355044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782666
    },
    {
        "content": "<p>But the statement looks true either way now</p>",
        "id": 281355064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651782675
    },
    {
        "content": "<p>Ok, I have changed it to your way. I will have to read about that.</p>",
        "id": 281355999,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651783146
    },
    {
        "content": "<p>I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">rationalR</span><span class=\"o\">:</span> <span class=\"n\">rational</span> <span class=\"n\">R</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">A</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">incomplete</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 281356020,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651783160
    },
    {
        "content": "<p>still having trouble introducing that x to the context.</p>",
        "id": 281356047,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651783181
    },
    {
        "content": "<p>Getting now \"assume tactic failed, Pi/let expression expected\" when I <code>assume x</code></p>",
        "id": 281356154,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651783224
    },
    {
        "content": "<p>Probably you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#inhabit\">tactic#inhabit</a></p>",
        "id": 281356656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651783482
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 281360891,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651785680
    },
    {
        "content": "<p>I have so much to learn.</p>",
        "id": 281360901,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651785687
    },
    {
        "content": "<p>Your approach with <code>assume x</code> would have worked if you just used <code>A</code> instead of <code>nonempty A</code>, which contains the same content mathematically; it's just less convenient as a lemma</p>",
        "id": 281361248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651785879
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">incompS</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">incomplete</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">inhabit</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281385663,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651807669
    },
    {
        "content": "<p>Hello everyone, I am new to LEAN.<br>\nDoes anybody know if there are any papers on verification of LEAN itself?<br>\nI mean can prove that code of LEAN is correct?<br>\nThank you for any directions</p>",
        "id": 281406014,
        "sender_full_name": "Ratmir Mugattarov",
        "timestamp": 1651824178
    },
    {
        "content": "<p>Thanks for the tip <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span></p>",
        "id": 281431527,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651840531
    },
    {
        "content": "<p>I tried exactly that: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">incompS</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">A</span><span class=\"o\">]:</span> <span class=\"n\">incomplete</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">inhabit</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">],</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">goal</span> <span class=\"k\">with</span> <span class=\"n\">default</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">rationalR</span> <span class=\"o\">:</span> <span class=\"n\">rational</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">incomplete</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 281436397,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651842834
    },
    {
        "content": "<p>Have you changed the definition of <code>incomplete</code> in the meantime? What error do you get if you replace <code>use [default, default]</code> with <code>refine ⟨default, default, _⟩</code> ?</p>",
        "id": 281443261,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651846042
    },
    {
        "content": "<p>Or maybe <code>refine ⟨⟨default, default, _⟩⟩</code> ?</p>",
        "id": 281444385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651846540
    },
    {
        "content": "<p>In both cases a bunch of “invalid expression”, “invalid begin-end expression , expected”</p>",
        "id": 281448557,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651848033
    },
    {
        "content": "<p>I’ll paste in the full thing shortly</p>",
        "id": 281448658,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651848063
    },
    {
        "content": "<p>I haven’t changed the definition. Still the same one from the code in my original post.</p>",
        "id": 281448752,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651848092
    },
    {
        "content": "<p>Maybe you are missing <code>import tactic</code> at the beginning of the file (although <code>inhabit</code> would fail in that case). What is your Lean and mathlib version?</p>",
        "id": 281450086,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651848558
    },
    {
        "content": "<p>Have import tactic. Just used elan to update from 3.35.1 to 3.42.1</p>",
        "id": 281453599,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651850078
    },
    {
        "content": "<p>Let me see about updateing mathlib.</p>",
        "id": 281453672,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651850113
    },
    {
        "content": "<p>Ok, upgraded my leanproject to latest mthlib</p>",
        "id": 281454550,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651850552
    },
    {
        "content": "<p>Ok, here's the state of my file.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>import tactic\n\nsection\n\nparameters {A : Type} {R : A → A → Prop}\n\n/- Defininig Complete Relations -/\ndef complete (R : A → A → Prop) : Prop :=\n∀ x y, R x y ∨ R y x\n\n/- Defininig Complete Relations -/\ndef incomplete (R : A → A → Prop) : Prop :=\n∃ x y, ¬ (R x y ∨ R y x)\n\ndef rational (R : A → A → Prop) : Prop :=\ncomplete R ∧ reflexive R ∧ transitive R\n\n/- R is a relexive, complete, transitive relation -/\nparameter (rationalR : rational R)\n\n/- Defininig S the Strict Preference Relation-/\ndef S (a b : A) : Prop := R a b ∧ ¬ R b a\n\n/-###################################-/\n/- Properties of the Strict Relation-/\n/-#################################-/\n\n/- Include the preference relations properties in proofs. -/\ninclude rationalR\n\n/- The Strict Relation is Irreflexive -/\ntheorem irreflS : irreflexive S :=\nbegin\nassume x, --add object x to the context\nassume sxx : S x x, --assume the opposite to derive a contradsiction\nhave nrxx : ¬ R x x, from and.right sxx, --get the ¬ x≿x from the definition of ≻\nhave rxx : R x x, from and.left sxx, --get the x≿x from the definition of ≻\nshow false, from nrxx rxx, --show the contradiction\nend\n\n/- The Strict Relation is Incomplete -/\ntheorem incompS [nonempty A]: incomplete S :=\nbegin\ninhabit A,\nrefine ⟨default, default, _⟩,\nsimp [S],\nend\n\n\n\nend\n</code></pre></div>\n</div></div>",
        "id": 281455140,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651850816
    },
    {
        "content": "<p>My error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"n\">default</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">default</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">rationalR</span> <span class=\"o\">:</span> <span class=\"n\">rational</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">incomplete</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 281455188,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651850844
    },
    {
        "content": "<p>Seems like you're still using an outdated version of Lean. The parameter of <code>inhabited.default</code> was changed to implicit in version 3.37, but you still have it explicit. What does <code>#reduce lean.version</code> show?</p>",
        "id": 281463636,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651855004
    },
    {
        "content": "<p>Indeed, it shows an old version.</p>",
        "id": 281464712,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651855594
    },
    {
        "content": "<p>3 35 1</p>",
        "id": 281464740,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651855607
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">stable</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281464822,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651855654
    },
    {
        "content": "<p>That's my elan output</p>",
        "id": 281464830,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651855661
    },
    {
        "content": "<p>Ok I see. I need to change the active toolchain</p>",
        "id": 281465158,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651855828
    },
    {
        "content": "<p>Manually updated that in the .toml</p>",
        "id": 281465457,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651855991
    },
    {
        "content": "<p>having some import issues now</p>",
        "id": 281466810,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651856592
    },
    {
        "content": "<p><code>import tactic</code> gets me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">tacti</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">tacti</span>\n</code></pre></div>",
        "id": 281466883,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651856641
    },
    {
        "content": "<p><code>import tactic.basic</code> gets me a load of <code>imported file '...' uses sorry</code></p>",
        "id": 281466993,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651856686
    },
    {
        "content": "<p>Using <code>import tactic</code> and then restarted vs code. Now my infoview is just showing <code>Loading...</code></p>",
        "id": 281467370,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651856886
    },
    {
        "content": "<p><code>leanproject upgrade-mathlib</code> seemed to clear that up</p>",
        "id": 281468475,
        "sender_full_name": "Greg Leo",
        "timestamp": 1651857464
    }
]