[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def prod {F G : Type}(f : F → G → G) (g : G → G → G):\n       Π {n : ℕ},\n       vector G (n + 1) →\n       vector F (n + 1) → G\n      | .(0) (h :: _) (m :: _) :=  f m h\n      | .(n + 1)(vector.cons h hs) (vector.cons m ms) :=\n           g (f m h) (prod hs ms)\n</pre></div>",
        "id": 183520743,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1576473937
    },
    {
        "content": "<p>Could some one please tell me what to change in this code to let Lean accept this definition?</p>",
        "id": 183520796,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1576473988
    },
    {
        "content": "<p>What definition of vector do you use?</p>",
        "id": 183525814,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576482488
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">):</span>\n       <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span>\n       <span class=\"n\">vector</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n       <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">ms</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">h</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">ms</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n           <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">hs</span> <span class=\"n\">ms</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>",
        "id": 183525883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576482608
    },
    {
        "content": "<p>The definition in mathlib is like </p>\n<div class=\"codehilite\"><pre><span></span>def vector (α : Type u) (n : ℕ) := { l : list α // l.length = n }\n</pre></div>",
        "id": 183525970,
        "sender_full_name": "YH",
        "timestamp": 1576482769
    },
    {
        "content": "<p>I was wondering why this was the choice of vector earlier today. Still curious.</p>",
        "id": 183525986,
        "sender_full_name": "YH",
        "timestamp": 1576482816
    },
    {
        "content": "<p>I think that mathlib somewhere has the recursive definition. Is it vector2 or vector3 or something?</p>",
        "id": 183529305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576486296
    },
    {
        "content": "<p>There's also a recursive definition of <code>fin</code> somewhere. I guess the definition of <code>vector</code> is in core Lean not mathlib, so there's not much we can do about it.</p>",
        "id": 183529471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576486384
    },
    {
        "content": "<p><code>vector3</code> seems to be in <code>number_theory/dioph</code> of all places, and uses <code>fin2</code> from the same file.</p>",
        "id": 183529580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576486449
    },
    {
        "content": "<blockquote>\n<p>What definition of vector do you use?</p>\n</blockquote>\n<p>Thanks for reply <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> .  Long time and nice to see your message :). <br>\nI have import bunch of libraries, and I do not know which one is importing the vector <br>\nimport data.fintype data.nat.basic<br>\n               data.zmod.basic algebra.group_power<br>\n               tactic.omega</p>",
        "id": 183539541,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1576494645
    },
    {
        "content": "<blockquote>\n<p>The definition in mathlib is like </p>\n</blockquote>\n<p>def vector (α : Type u) (n : ℕ) := { l : list α // l.length = n }</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>\n\n\n<p>If I understood this data type (it is a pair where the first one is list and second one is the length of list), then I can answer you from Coq perspective. In Coq, it is very difficult to work with length indexed vector datatype, so sometimes people encode the vectors in this way.  This encoding makes life easier when dealing with vectors, but I am not sure why some one would adopt this approach for Lean.</p>",
        "id": 183540591,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1576495688
    },
    {
        "content": "<p>We have both approaches.</p>",
        "id": 183540751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576495901
    },
    {
        "content": "<p>The other is called vector3 for some reason.</p>",
        "id": 183540760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576495914
    }
]