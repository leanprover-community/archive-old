[
    {
        "content": "<p>I want to define a procedure for generating fresh names like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fresh_help</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span>\n   <span class=\"k\">have</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊂</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_ssubset</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n   <span class=\"n\">fresh_help</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span> <span class=\"n\">string</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n\n<span class=\"c1\">-- | Find a fresh name that is close to x</span>\n<span class=\"n\">def</span> <span class=\"n\">fresh</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fresh_help</span> <span class=\"o\">(</span><span class=\"n\">free_vars</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>However, lean can't find the 'have' for the well-foundedness:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">anton</span><span class=\"bp\">/</span><span class=\"n\">orga</span><span class=\"bp\">/</span><span class=\"n\">coc</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">CoC</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">103</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_lt</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">string</span><span class=\"o\">))))</span>\n       <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"k\">match</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">fresh_help</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊂</span> <span class=\"n\">s</span>\n<span class=\"err\">⊢</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊂</span> <span class=\"n\">s</span>\n</pre></div>\n\n\n<p>Do you know how I can fix this?</p>",
        "id": 188290463,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581785702
    },
    {
        "content": "<p>Also, the lean checker seems to be unhappy with it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fresh</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">star</span><span class=\"o\">)</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">fresh</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">free</span> <span class=\"s2\">&quot;x&quot;</span><span class=\"o\">)</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"c1\">-- works: &quot;x0&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fresh</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">free</span> <span class=\"s2\">&quot;x&quot;</span><span class=\"o\">)</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;x0&quot;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch</span>\n</pre></div>\n\n\n<p>If I use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">es</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span> <span class=\"n\">string</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]</span>\n  <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">wf_tacs</span><span class=\"bp\">.</span><span class=\"n\">rel_tac</span> <span class=\"n\">e</span> <span class=\"n\">es</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I get \"tactic failed, there are no goals to be solved\" which seems better?</p>",
        "id": 188319359,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581845190
    },
    {
        "content": "<p>This seems to work for me</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fresh_help</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span>\n   <span class=\"k\">have</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊂</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase_ssubset</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n   <span class=\"n\">fresh_help</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span> <span class=\"n\">string</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I have no idea why specifying <code>dec_tac</code> explicitly helps here. I thought that <code>assumption</code> was the default tactic for proving well-foundedness.</p>",
        "id": 188408469,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581975818
    },
    {
        "content": "<p>The default tactic is unfortunately not <code>assumption</code>. It is an ad hoc tactic that uses the simplifier with stuff about sizeof and natural numbers, and while I think it uses the context, it does not try <code>assumption</code> first as it should</p>",
        "id": 188421272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581996534
    },
    {
        "content": "<p>I almost always specify <code>dec_tac := `[assumption]</code> for a manual well foundedness proof</p>",
        "id": 188421277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581996573
    }
]