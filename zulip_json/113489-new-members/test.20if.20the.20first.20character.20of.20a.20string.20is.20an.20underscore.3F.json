[
    {
        "content": "<p>I need to filter a big list of <code>name</code>s, discarding all those whose last component starts with an underscore.</p>",
        "id": 160050472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551827820
    },
    {
        "content": "<p>(Throw out all the auto-generated lemmas from the pattern matcher, etc.)</p>",
        "id": 160050488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551827838
    },
    {
        "content": "<p>I can use <code>(to_string n.components.ilast).to_list.head ≠ '_'</code>, but apparently on the scale I'm working this is slow.</p>",
        "id": 160050496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551827857
    },
    {
        "content": "<p>That sounds like something that should exist in <code>tactic.basic</code></p>",
        "id": 160050499,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1551827860
    },
    {
        "content": "<p>A better way of getting the last component is <code>(name.update_prefix </code>_ n).to_string`</p>",
        "id": 160050587,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1551827931
    },
    {
        "content": "<p><code>name.is_internal</code>?</p>",
        "id": 160050615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551827957
    },
    {
        "content": "<p>I guess I need to read the C++ to find out what <code>name.is_internal</code> actually does. :-)</p>",
        "id": 160050753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828069
    },
    {
        "content": "<p>I'll experiment, instead.</p>",
        "id": 160050754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828073
    },
    {
        "content": "<p>I think it's exactly what you said</p>",
        "id": 160050776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551828107
    },
    {
        "content": "<p>Great.</p>",
        "id": 160050781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828112
    },
    {
        "content": "<p>Any tricks for throwing out all private names? Currently I just do <code>n.components.head ≠ \"_private\"</code></p>",
        "id": 160050835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828132
    },
    {
        "content": "<p>you should probably not go via <code>components</code> like that</p>",
        "id": 160050856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551828161
    },
    {
        "content": "<p>Ok. I'll write my own <code>name.is_private</code> by pattern matching?</p>",
        "id": 160050893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828209
    },
    {
        "content": "<p>You could define a function for <code>n.components.head</code> and then check that it equals <code>\"_private\"</code></p>",
        "id": 160050914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551828240
    },
    {
        "content": "<p>What should the function for <code>n.components.head</code> be called?</p>",
        "id": 160050987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828290
    },
    {
        "content": "<p><code>head</code></p>",
        "id": 160051014,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1551828318
    },
    {
        "content": "<p>What is <code>name.mk_numeral</code>, anyway?</p>",
        "id": 160051232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828517
    },
    {
        "content": "<p>it's an internal thing, you won't see it except in unique names for variables I think</p>",
        "id": 160051503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551828744
    },
    {
        "content": "<p>Are names like <code>cases_on</code> and <code>inj_arrow</code> going to count as internal names?</p>",
        "id": 160051620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551828856
    },
    {
        "content": "<p>no, I think it's literally what you said</p>",
        "id": 160051643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551828884
    },
    {
        "content": "<p>it just checks for an initial underscore</p>",
        "id": 160051652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551828892
    }
]