[
    {
        "content": "<p>Hi all, I am working through Kevin's course and I don't understand the meaning of the angle brackets -- what is their significance in a statement like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"bp\">\\&lt;</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"bp\">\\&gt;</span>\n</code></pre></div>",
        "id": 264183449,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638982026
    },
    {
        "content": "<p>If you change <code>rintros \\&lt; hA, hB\\&gt;</code> to <code>intro X</code> then you'll be able to see the type of <code>X</code>.</p>",
        "id": 264183595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982090
    },
    {
        "content": "<p>It's used to destructure a tuple-like type. In this case your goal is probably something like <code>A /\\ B -&gt; C</code> and that line will change it to <code>hA : A, hB : B |- C</code></p>",
        "id": 264183638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638982104
    },
    {
        "content": "<p>And what will be happening is that to make a term of type X you'll need to give two other terms. For example, as Mario says, if the type of <code>X</code> is <code>A \\and B</code> then to give a term of this type is to give a proof of A and a proof of B, and you can get those terms with <code>cases X with hA hB</code>. <code>rintro</code> is just doing the <code>intro</code> and the <code>cases</code> all at once.</p>",
        "id": 264183764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  A B C: Prop</span>\n<span class=\"cm\">  hA : A</span>\n<span class=\"cm\">  hB : B</span>\n<span class=\"cm\">  ⊢ C</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  A B C: Prop</span>\n<span class=\"cm\">  hA : A</span>\n<span class=\"cm\">  hB : B</span>\n<span class=\"cm\">  ⊢ C</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264184154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638982309
    }
]