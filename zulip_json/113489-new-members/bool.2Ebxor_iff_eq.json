[
    {
        "content": "<p>In data.bool, there is a lemma <code>bool.bxor_iff_ne</code> which states that <code>bxor x y = bool.tt ↔ x ≠ y</code> for all x, y; however, there doesn't seem to be <code>bool.bxor_iff_eq</code> stating that <code>bxor x y = bool.ff ↔ x = y</code>. Did I miss something?</p>",
        "id": 200416817,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1591796297
    },
    {
        "content": "<p>I'm not too surprised that <code>bool</code> misses lemmas. Either you're proving stuff and work with <code>Prop</code> or you're programming  and work with <code>bool</code> without needing lemmas.</p>",
        "id": 200417132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591796477
    },
    {
        "content": "<p>I would rather see this lemma proven by rewriting <code>bxor x y = bool.ff</code> to <code>\\neg \\u (bxor x y)</code> and from there to <code>\\neg (x != y)</code> and then <code>x = y</code></p>",
        "id": 200417392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591796625
    },
    {
        "content": "<p>in short, make everything a prop as soon as possible</p>",
        "id": 200417458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591796648
    },
    {
        "content": "<p>Also, every theorem about <code>bool</code> can be proven by dec_trivial</p>",
        "id": 200417482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591796668
    },
    {
        "content": "<p>by <code>\\neg</code> you mean <code>\\not</code>, right?</p>",
        "id": 200417501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591796677
    },
    {
        "content": "<p>yes</p>",
        "id": 200417502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591796681
    },
    {
        "content": "<p>they both work</p>",
        "id": 200417534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591796702
    },
    {
        "content": "<p>it's also the actual LaTeX AFAIR so that's what my fingers know</p>",
        "id": 200417675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591796767
    },
    {
        "content": "<p>Oh I see, they both triggered the same unicode translation. I though that you were saying <code>-tt</code> works.</p>",
        "id": 200418000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591796939
    },
    {
        "content": "<p>It's a bit unfortunate since neg is lemma names means something completely different.</p>",
        "id": 200418046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591796962
    },
    {
        "content": "<p>why would you need a unicode hotkey for <code>-</code>?</p>",
        "id": 200418331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591797093
    },
    {
        "content": "<p>unless you are on a non-english keyboard that makes <code>-</code> hard to hit</p>",
        "id": 200418365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591797110
    },
    {
        "content": "<p>No idea.</p>",
        "id": 200418882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591797345
    },
    {
        "content": "<p>Why would you need a unicode hotkey for \\not that would be anything other than \\not or \\non</p>",
        "id": 200418999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591797383
    },
    {
        "content": "<p>vscode says I could just use <code>\\n</code></p>",
        "id": 200419370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591797552
    },
    {
        "content": "<p>which neatly avoids the abbreviation question</p>",
        "id": 200419416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591797584
    }
]