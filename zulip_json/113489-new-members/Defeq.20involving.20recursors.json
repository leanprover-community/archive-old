[
    {
        "content": "<p>Suppose I have an auxiliary function for efficiently computing the nth Fibonacci number as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">parity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">(</span><span class=\"n\">gas</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">gas</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">gas&#39;</span> <span class=\"n\">fib2_gas&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">fib2_gas&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n        <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>Now suppose we have natural numbers <code>gas'</code> and <code>n</code>. What would be a partially reduced expression that <code>fib2 (succ gas') (succ n)</code> is defeq to? In particular, I thought it would be defeq to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>but apparently not.</p>\n<p>(I'm in the middle of a proof involving <code>fib2</code> and would like to partially reduce the goal to a state where I can rewrite based on an inductive hypothesis)</p>",
        "id": 193718723,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586707326
    },
    {
        "content": "<p>what does <code>gas</code> stand for?</p>",
        "id": 193719306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586708390
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">gas&#39;</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">H :</span>\n<span class=\"cm\">  prod.cases_on (fib2 gas&#39; (succ n / 2))</span>\n<span class=\"cm\">      (λ (a b : ℕ),</span>\n<span class=\"cm\">         have c : ℕ, from a * (2 * b - a),</span>\n<span class=\"cm\">         have d : ℕ, from a * a + b * b,</span>\n<span class=\"cm\">         cond (to_bool (even (succ n))) (c, d) (d, c + d)) =</span>\n<span class=\"cm\">    (0, 0)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193719510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586708659
    },
    {
        "content": "<p>I think your expression is correct</p>",
        "id": 193719522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586708697
    },
    {
        "content": "<p>maybe you didn't specify the types enough</p>",
        "id": 193719538,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586708717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193719306\" title=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193719306\">said</a>:</p>\n<blockquote>\n<p>what does <code>gas</code> stand for?</p>\n</blockquote>\n<p>It's a cheap way of ensuring that a non-primitive recursive function eventually terminates, by converting a potentially non-trivial induction / recursion into induction / recursion on a natural number. IMO the concept is pretty well explained in <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/ImpCEvalFun.html#lab383\" title=\"https://softwarefoundations.cis.upenn.edu/lf-current/ImpCEvalFun.html#lab383\">A Step-Indexed Evaluator</a>, you may wish to take a look there.</p>",
        "id": 193746620,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586755959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193719510\" title=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193719510\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">gas&#39;</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">H :</span>\n<span class=\"cm\">  prod.cases_on (fib2 gas&#39; (succ n / 2))</span>\n<span class=\"cm\">      (λ (a b : ℕ),</span>\n<span class=\"cm\">         have c : ℕ, from a * (2 * b - a),</span>\n<span class=\"cm\">         have d : ℕ, from a * a + b * b,</span>\n<span class=\"cm\">         cond (to_bool (even (succ n))) (c, d) (d, c + d)) =</span>\n<span class=\"cm\">    (0, 0)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>Thanks, I don't think I tried <code>change</code> (I was using <code>show</code>). I'll take another stab at it now.</p>",
        "id": 193746635,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586756001
    },
    {
        "content": "<p>I thought it was an acronym lol</p>",
        "id": 193746638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756028
    },
    {
        "content": "<p>oh btw you don't need <code>gas</code> because Lean has better recursion than Coq! :D</p>",
        "id": 193746704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.2Estrong_rec_on_beta/near/193720750\" title=\"#narrow/stream/113489-new-members/topic/nat.2Estrong_rec_on_beta/near/193720750\">said</a>:</p>\n<blockquote>\n<p>I think the <code>#eval</code> times are an example of why Lean is so much better than Coq. Coq can't compile well-founded recursion nicely like Lean I heard.</p>\n</blockquote>",
        "id": 193746720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756131
    },
    {
        "content": "<p><code>gas</code> is such a Coq thing</p>",
        "id": 193746722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756143
    },
    {
        "content": "<p>To be fair, there's an Equations library in Coq which somewhat resembles Lean's equation compiler, but I'm not sure if there's anything it can't do that Lean's equation compiler can do (or vice versa).</p>",
        "id": 193746865,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586756313
    },
    {
        "content": "<p>you still might want to use <code>gas</code> or <code>fuel</code>. Sometimes you're too lazy to give a proof of well-foundedness, and if you know an upper bound for how many ops an algorithm will take, it's useful then without having to go <code>meta</code></p>",
        "id": 193746881,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586756369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">parity</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- fib2 n = (fib n, fib (n+1)) -/</span>\n<span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_self</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">fib2</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">fib2</span>\n<span class=\"c1\">-- [(0, 1), (1, 1), (1, 2), (2, 3), (3, 5), (5, 8), (8, 13), (13, 21), (21, 34), (34, 55)]</span>\n</pre></div>",
        "id": 193747158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span></p>",
        "id": 193747161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this O(n*log n)?</p>",
        "id": 193747204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586756899
    },
    {
        "content": "<p>relative to what?</p>",
        "id": 193747217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586756932
    },
    {
        "content": "<p>you can use <code>n@(_+1)</code> by the way to avoid having to say <code>n+1</code> all the time</p>",
        "id": 193747230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586756980
    },
    {
        "content": "<p><code>nat.bodd</code> is probably expensive to compute in the VM because it doesn't have a special implementation</p>",
        "id": 193747277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586757040
    },
    {
        "content": "<p>I think you can get an asymptotically optimal implementation if you use <code>nat.binary_rec_on</code></p>",
        "id": 193747285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586757114
    },
    {
        "content": "<p>hmm</p>",
        "id": 193747327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586757169
    },
    {
        "content": "<p>I really wish we had a better way to do this kind of thing where you don't have to pick between efficient in the VM and efficient in the kernel</p>",
        "id": 193747369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586757245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193746635\" title=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193746635\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193719510\" title=\"#narrow/stream/113489-new-members/topic/Defeq.20involving.20recursors/near/193719510\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">gas&#39;</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">fib2</span> <span class=\"n\">gas&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">H :</span>\n<span class=\"cm\">  prod.cases_on (fib2 gas&#39; (succ n / 2))</span>\n<span class=\"cm\">      (λ (a b : ℕ),</span>\n<span class=\"cm\">         have c : ℕ, from a * (2 * b - a),</span>\n<span class=\"cm\">         have d : ℕ, from a * a + b * b,</span>\n<span class=\"cm\">         cond (to_bool (even (succ n))) (c, d) (d, c + d)) =</span>\n<span class=\"cm\">    (0, 0)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>Thanks, I don't think I tried <code>change</code> (I was using <code>show</code>). I'll take another stab at it now.</p>\n</blockquote>\n<p>It worked! Thanks Kenny!</p>",
        "id": 193747378,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586757336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I have noticed that in Coq if you use change, the expression must not contain holes that can only be filled in relative to the goal; is this better or worse?</p>",
        "id": 193747491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586757516
    },
    {
        "content": "<p>I suppose this can make things faster</p>",
        "id": 193747493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586757529
    },
    {
        "content": "<p>because you don’t spend time unifying with the goal</p>",
        "id": 193747503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586757556
    },
    {
        "content": "<p>I don't really know what else those holes would be good for</p>",
        "id": 193747504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586757556
    },
    {
        "content": "<p>so it seems strictly worse to me</p>",
        "id": 193747507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586757570
    },
    {
        "content": "<p>you can always write a term without holes if you want</p>",
        "id": 193747512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586757587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span> what are holes in Coq used for?</p>",
        "id": 193747581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586757704
    },
    {
        "content": "<p>For inferring implicit parameters like in Lean? BTW I don't think I have heard of the <code>change</code> tactic in Coq - is it the same as in Lean?</p>",
        "id": 193747701,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586757937
    },
    {
        "content": "<p>yeah</p>",
        "id": 193747748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586757975
    }
]