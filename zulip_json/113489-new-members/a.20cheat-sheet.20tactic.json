[
    {
        "content": "<p>I was trying to write a simple tactic, to automatically apply the instructions in the \"cheat sheet\" - <a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a> - and running into some parts I couldn't figure out. So far I have a tactic that applies <code>intro1</code> as much as possible and a couple other bits:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cheat_once</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">intro1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">contradiction</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"no cheat-sheet tactic matches\"</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cheat</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">cheat_once</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">cheat</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n\n<p>I am working on the next step, to run <code>cases</code> on any of the hypotheses that are <code>∃ ∨ ∧</code> expressions. My instinct was, ok I should loop over all the hypotheses, check if they are <code>∃ ∨ ∧</code> expressions, and if so then apply cases to that hypothesis. So, questions:</p>\n<ul>\n<li>\n<p>Is this a reasonable strategy?</p>\n</li>\n<li>\n<p>Is looping over all the hypotheses something best done by inspecting the <code>local_context</code>? There are a bunch of undocumented functions in <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/meta/local_context.html#local_context\">https://leanprover-community.github.io/mathlib_docs/core/init/meta/local_context.html#local_context</a> and I suspect I should use one of them but a pointer would be helpful.</p>\n</li>\n<li>\n<p>I can imagine checking if something's a <code>∃ ∨ ∧</code> expression by constructing an example one and then seeing if it unifies against the hypothesis. That seems really roundabout, though - I feel like I want to be writing something like <code>if expr.root_operation == </code>∃`. What's a nice way to do this?</p>\n</li>\n</ul>",
        "id": 213853763,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603146119
    },
    {
        "content": "<p>Have a look at the <code>auto_cases</code> tactic, which does something similar to what you're looking for.</p>",
        "id": 213854987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603146879
    },
    {
        "content": "<p>ok, very informative tactic. so basically yes <code>local_context</code> is the way to go, no don't use any methods just use it straight, and \"unification\" isn't really the way to think about it but rather to use the language's built-in matching stuff.</p>",
        "id": 213855684,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603147383
    },
    {
        "content": "<p>so when it looks through <code>local_context</code>, a bunch of those things are just variables like <code>x</code> and <code>y</code> or whatever. but I only want to be looking for hypotheses. I guess to Lean those things are basically the same, they are both local constants, even though some of them are hypotheses and some of them are unbound variables (or is that the right term?) ? should I just be ignoring this distinction because the matching stuff will filter that out anyway?</p>",
        "id": 213856285,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603147808
    },
    {
        "content": "<p>OK cool, i got it working like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">can_cases</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>           <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"cannot cases this expr\"</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cases_or_fail</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n<span class=\"n\">can_cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">tactic.cases</span> <span class=\"n\">hyp</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span>\n\n<span class=\"c1\">-- Run cases on the first thing possible</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cases_first</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">::</span> <span class=\"n\">Es</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cases_or_fail</span> <span class=\"n\">E</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">cases_first</span> <span class=\"n\">Es</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"cases doesn't apply to anything in the local context\"</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cases_once</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">lc</span> <span class=\"bp\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n<span class=\"n\">cases_first</span> <span class=\"n\">lc</span>\n</code></pre></div>",
        "id": 213859532,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603150336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/a.20cheat-sheet.20tactic/near/213856285\">said</a>:</p>\n<blockquote>\n<p>so when it looks through <code>local_context</code>, a bunch of those things are just variables like <code>x</code> and <code>y</code> or whatever. but I only want to be looking for hypotheses. I guess to Lean those things are basically the same, they are both local constants, even though some of them are hypotheses and some of them are unbound variables (or is that the right term?) ? should I just be ignoring this distinction because the matching stuff will filter that out anyway?</p>\n</blockquote>\n<p><code>local_context</code> returns a list of local constants, so they should <em>all</em> just be variables like <code>x</code>, <code>y</code>, <code>h</code>. DTT doesn't distinguish between hypotheses and variables of other types, it's all just variables whose types may depend on other (earlier) variables. So you usually want to use <code>t &lt;- infer_type h</code> to get the type of the variables in the context, and then by looking at that you can figure out more information about what kind of thing it is. Specifically, if you want to know whether it is a hypothesis or a variable of some other kind, you should check if <code>infer_type t</code> returns <code>Prop</code> (which is what <code>is_prop t</code> does), or equivalently use <code>is_proof h</code>, which just calls <code>t &lt;- infer_type h, is_prop t</code>.</p>",
        "id": 213866599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603157014
    },
    {
        "content": "<p>okay that makes sense. <code>infer_type</code> is defined in the c++ kernel I guess, that is why there's no real code at <a href=\"https://github.com/leanprover-community/lean/blob/cc72964/library/init/meta/tactic.lean#L418\">https://github.com/leanprover-community/lean/blob/cc72964/library/init/meta/tactic.lean#L418</a> ?</p>",
        "id": 213941255,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603209978
    },
    {
        "content": "<p>Right, all the <code>meta constants</code> in this and similar files have an implementation magically provided by the C++ code</p>",
        "id": 213941432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603210061
    }
]