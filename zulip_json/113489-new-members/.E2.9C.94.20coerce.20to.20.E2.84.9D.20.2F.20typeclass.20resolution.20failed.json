[
    {
        "content": "<p>In this example Lean tries to find an instance of has_abs ℕ. I think it doesn't know that ↑n is meant to be a real number.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|↑</span><span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is simplified but I  have some <code>|↑n|</code>s in a bigger lemma about sequences, with the same problem. It works if I replace <code>|↑n|</code> by <code>@abs ℝ (@has_neg.to_has_abs _ _ _) (↑n)</code>.</p>",
        "id": 285385047,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654692436
    },
    {
        "content": "<p>You should use <code>(n : ℝ)</code> rather than <code>↑n</code> in this situation (in fact I'd recommend always doing this, and being explicit about which coercion you need).</p>",
        "id": 285385333,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654692566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501306\">Bart Michels</span> has marked this topic as resolved.</p>",
        "id": 285385518,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654692653
    }
]