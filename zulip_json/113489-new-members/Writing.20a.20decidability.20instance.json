[
    {
        "content": "<p>Hello, I have another question on the model theory project I am working on. I have defined the notion of truth in a structure and I am trying to write a decidable instance for certain cases. For example, I want a formula with just equality to be decidable if the equality relation in the universe the structure maps to is decidable, I want an and formula to be decidable if each of the component formulas are decidable, etc. I tried to figure this out for a while but I am stuck on the first case. Can someone help me with writing an instance of decidabile?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span>          <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span>         <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>          <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span>         <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">v</span> <span class=\"bp\">`</span>    <span class=\"o\">:=</span> <span class=\"n\">term.var</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">v‚ÇÄ</span> <span class=\"bp\">`</span>   <span class=\"o\">:=</span> <span class=\"n\">term.var</span> <span class=\"mi\">0</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"bp\">`</span>   <span class=\"o\">:=</span> <span class=\"n\">term.var</span> <span class=\"mi\">1</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"bp\">`</span>   <span class=\"o\">:=</span> <span class=\"n\">term.var</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">‚âÉ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">88</span>   <span class=\"o\">:=</span> <span class=\"n\">formula.eq</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">`</span> <span class=\"bp\">‚àº</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">formula.neg</span>\n<span class=\"kd\">infix</span>  <span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span>  <span class=\"o\">:=</span> <span class=\"n\">formula.or</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Def 1.6.1. An L-structure -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Structure</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">},</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">},</span> <span class=\"n\">L.relations</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">ùî∏</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- Variable assignment function into A -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">var_assign</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- x-modification of the assignment function s -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">modification_of</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">s</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span><span class=\"n\">a</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">modification_of</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">a</span>\n\n<span class=\"sd\">/-- Term assignment function -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">term_assign</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span>\n\n<span class=\"sd\">/-- The term assignment function induced by s -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term_assign</span> <span class=\"n\">L</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span>                 <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">fsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"bp\">ùî∏.</span><span class=\"n\">functions</span> <span class=\"n\">fsymb</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">term_assign_of_s</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">term_assign_of_s</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"sd\">/-- A structure ùî∏ satifies formula œÜ with assignment s -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">satisfies_with_assignment</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span> <span class=\"n\">L</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t‚ÇÅ</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">t‚ÇÇ</span><span class=\"o\">)</span>           <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t‚ÇÇ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">rsymb</span> <span class=\"n\">args</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"bp\">ùî∏.</span><span class=\"n\">relations</span> <span class=\"n\">rsymb</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">‚àº</span><span class=\"n\">œÜ‚ÇÅ</span>                 <span class=\"o\">:=</span> <span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">s</span> <span class=\"n\">œÜ‚ÇÅ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">œÜ‚ÇÅ</span> <span class=\"n\">or</span> <span class=\"n\">œÜ‚ÇÇ</span><span class=\"o\">)</span>          <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">s</span> <span class=\"n\">œÜ‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">s</span> <span class=\"n\">œÜ‚ÇÇ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"n\">n</span> <span class=\"n\">œÜ‚ÇÅ</span><span class=\"o\">)</span>          <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">satisfies_with_assignment</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"n\">œÜ‚ÇÅ</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">ùî∏`</span> <span class=\"bp\">‚ä®</span> <span class=\"bp\">`</span><span class=\"n\">œÜ</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">s</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span> <span class=\"n\">œÜ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- How to write a deciable instance?</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÄ</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 255962154,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633278228
    },
    {
        "content": "<p>In this case, simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">v‚ÇÄ</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">satisfies_with_assignment</span><span class=\"o\">,</span>\n<span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works</p>",
        "id": 255968754,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633284680
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 255969434,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633285370
    },
    {
        "content": "<p>How would I handle the other cases? For example the not case</p>",
        "id": 255969469,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633285413
    },
    {
        "content": "<p>Specifically I'm not sure where the place the decidable instance for œÜ</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">ùî∏`</span> <span class=\"bp\">‚ä®</span> <span class=\"bp\">`</span><span class=\"n\">œÜ</span><span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span> <span class=\"n\">œÜ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">ùî∏</span> <span class=\"bp\">‚ä®</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">v</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">satisfies_with_assignment</span><span class=\"o\">,</span>\n<span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">œÜ</span><span class=\"o\">]</span> <span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">L</span> <span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">ùî∏</span> <span class=\"bp\">‚ä®</span> <span class=\"bp\">‚àº</span><span class=\"n\">œÜ</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">satisfies_with_assignment</span><span class=\"o\">,</span>\n<span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255969646,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633285577
    },
    {
        "content": "<p>Is this what you are looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">ùî∏`</span> <span class=\"bp\">‚ä®</span> <span class=\"bp\">`</span><span class=\"n\">œÜ</span><span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"n\">satisfies_with_assignment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">ùî∏</span> <span class=\"n\">s</span> <span class=\"n\">œÜ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">var_assign</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">eq_decidable</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">ùî∏</span> <span class=\"bp\">‚ä®</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">‚âÉ</span> <span class=\"n\">v</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">satisfies_with_assignment</span><span class=\"o\">,</span>\n<span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">not_decidable</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">ùî∏</span> <span class=\"bp\">‚ä®</span> <span class=\"n\">œÜ</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">ùî∏</span> <span class=\"bp\">‚ä®</span> <span class=\"bp\">‚àº</span><span class=\"n\">œÜ</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">satisfies_with_assignment</span><span class=\"o\">,</span>\n<span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't really know the mathematical background of what you are trying to do so I'm not sure if this is what you want for your application</p>",
        "id": 255969849,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633285799
    },
    {
        "content": "<p>Yes that's perfect thank you</p>",
        "id": 255970603,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633286529
    },
    {
        "content": "<p>Another question I am having, I want to type #eval so that I can view the proposition that gets computed by satisfies_with_assignment, but Lean says that the result doesn't have an instance of has_repr. How can I use #eval to see the Prop that gets computed?</p>",
        "id": 255971322,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633287170
    },
    {
        "content": "<p>Give it an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_repr\">docs#has_repr</a> instance!</p>",
        "id": 255976758,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633292222
    },
    {
        "content": "<p>The problem here is that you haven't told Lean how to print your terms. So tell Lean that and it will happily comply.</p>",
        "id": 255976780,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633292257
    },
    {
        "content": "<p><del>I don't think you'll be able to provide a useful instance.</del> (whoops, ignore that) See <a href=\"#narrow/stream/113488-general/topic/pp.20hack.20for.20.60.23eval.60.20on.20Props/near/243768489\">this related thread</a>.</p>",
        "id": 255976865,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1633292330
    },
    {
        "content": "<p>I think you're wrong on that one, Bryan.</p>",
        "id": 255977084,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633292524
    },
    {
        "content": "<p>Yeah, I misread. Sorry!</p>",
        "id": 255977111,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1633292551
    },
    {
        "content": "<p>Sure we can't get a useful has_repr on <code>satisfies_with_assignment</code>, but we can define <code>satisfies_with_assignment_string</code> that does the same but \"with words\".</p>",
        "id": 255977128,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633292573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Writing.20a.20decidability.20instance/near/255977111\">said</a>:</p>\n<blockquote>\n<p>Yeah, I misread. Sorry!</p>\n</blockquote>\n<p>Oh wait what are you refering to? The thread you pointed to seems pretty relevant.</p>",
        "id": 255977176,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1633292633
    },
    {
        "content": "<p>I was only referring to my claim \"I don't think you'll be able to provide a useful instance.\"</p>",
        "id": 255977273,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1633292716
    },
    {
        "content": "<p>I'm not sure I'm understanding completely. From that thread what I've gathered is that I can't write a has_repr instance for Prop because it is a Sort? But I could write satisfies_with_assignment_string that would do what exactly?</p>",
        "id": 255984185,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633299609
    },
    {
        "content": "<p>I think you want #reduce and not #eval</p>",
        "id": 255988086,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633303965
    },
    {
        "content": "<p>Yes, reduce did what I was looking for!</p>",
        "id": 255991079,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1633307232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438167\">Nick Pilotti</span> <a href=\"#narrow/stream/113489-new-members/topic/Writing.20a.20decidability.20instance/near/255971322\">said</a>:</p>\n<blockquote>\n<p>Another question I am having, I want to type #eval so that I can view the proposition that gets computed by satisfies_with_assignment, but Lean says that the result doesn't have an instance of has_repr. How can I use #eval to see the Prop that gets computed?</p>\n</blockquote>\n<p>I am precisely asking myself the same question today! Did you get an answer?</p>",
        "id": 265133481,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639649170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> <code>Prop</code>s don't get computed, so there's nothing to print out with <code>#eval</code> (the link above to the related thread mentions how the VM represents them as 0).  Are you able to use <code>#reduce</code>?</p>",
        "id": 265134646,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639649814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Writing.20a.20decidability.20instance/near/265134646\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <code>Prop</code>s don't get computed, so there's nothing to print out with <code>#eval</code> (the link above to the related thread mentions how the VM represents them as 0).  Are you able to use <code>#reduce</code>?</p>\n</blockquote>\n<p>Yes, but it says nothing about the ‚Äútruth value‚Äù of the Prop.  I didn't find a conversion to <code>bool</code> but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- prints 0</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">list.sorted</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c1\">-- prints 1</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">list.sorted</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265134996,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639650020
    },
    {
        "content": "<p>By the way, it seems that Lean can pretty much compute by itself the valididity of such an expression. How can one make use of this ability in a proof, without having to resort to a <code>simp</code> that uses of a lot <code>bit1_lt_bit1</code> and so on‚Ä¶ ?</p>",
        "id": 265135241,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639650186
    },
    {
        "content": "<p>Is <code>dec_trivial</code> what you want?</p>",
        "id": 265135377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639650244
    },
    {
        "content": "<p>(Note that <code>(Œª (a b : ‚Ñï), (a&lt;b))</code> can also be written as <code>(&lt;)</code>.)</p>",
        "id": 265135457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639650302
    },
    {
        "content": "<p>What I mean is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>should hopefully \"just work\"</p>",
        "id": 265135604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639650390
    },
    {
        "content": "<blockquote>\n<p>I didn't find a conversion to <code>bool</code></p>\n</blockquote>\n<p>Let Goedel know when you do!</p>",
        "id": 265136212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639650747
    },
    {
        "content": "<p>The way you do the conversion to <code>bool</code> is a plain coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">list.sorted</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">list.sorted</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(This is using <code>decidable</code> instances.)</p>",
        "id": 265137546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639651444
    },
    {
        "content": "<p>I just checked, and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list.sorted</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">29</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>does indeed work</p>",
        "id": 265137919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639651658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Writing.20a.20decidability.20instance/near/265136212\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I didn't find a conversion to <code>bool</code></p>\n</blockquote>\n<p>Let Goedel know when you do!</p>\n</blockquote>\n<p>OK, then  there must be something I don't understand about <code>Prop</code> in Lean. <code>Prop.fintype</code> says there are only two possible <code>Prop</code>s, <code>true</code> and <code>false</code>, so‚Ä¶</p>",
        "id": 265140685,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639653158
    },
    {
        "content": "<p>Ah, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Prop.fintype\">docs#Prop.fintype</a> <del>is noncomputable!</del> doesn't tell you how to check whether the prop you have is the true one or the false one. It's just a restatement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.em\">docs#classical.em</a></p>",
        "id": 265140827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639653244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/Writing.20a.20decidability.20instance/near/265140685\">said</a>:</p>\n<blockquote>\n<p>OK, then  there must be something I don't understand about <code>Prop</code> in Lean. <code>Prop.fintype</code> says there are only two possible <code>Prop</code>s, <code>true</code> and <code>false</code>, so‚Ä¶</p>\n</blockquote>\n<p>So why do we bother writing proofs? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265141590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639653727
    },
    {
        "content": "<p>OK, now I understand what you meant this morning. <br>\nIn my case, I was working with lists, and it is clear that the definition of list.sorted corresponds to an algorithm.  If the list is explicitly filled with explicit elements, what I expect is probably a tactic that automatically fills in the details.</p>",
        "id": 265172131,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639668505
    },
    {
        "content": "<p><code>dec_trivial</code> runs the algorithm</p>",
        "id": 265187461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639674824
    },
    {
        "content": "<p>when I started working on Lean proof assistant on visual studio code, I have followed the instructions on Lean webstie but after all of tips the lean Infoviewer didn't show any thing just \"Waiting for Lean server to start...\" where is the problem <a href=\"/user_uploads/3121/S9w8vBXAZvInOp3jsYeQhrvC/Capture.PNG\">Capture.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/S9w8vBXAZvInOp3jsYeQhrvC/Capture.PNG\" title=\"Capture.PNG\"><img src=\"/user_uploads/3121/S9w8vBXAZvInOp3jsYeQhrvC/Capture.PNG\"></a></div>",
        "id": 265222774,
        "sender_full_name": "Ali Alamen",
        "timestamp": 1639690523
    }
]