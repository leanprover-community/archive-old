[
    {
        "content": "<p>some basic calculus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">is_limit</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">L</span>\n</code></pre></div>\n<p>fails on <code>f ∘ a</code>: <code>type mismatch at application is_limit f, term f has type ℝ → ℝ but is expected to have type ℕ → ℝ</code></p>",
        "id": 320363070,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673313936
    },
    {
        "content": "<p><code>is_limit</code> is the definition of a limit of a sequence, not the limit of a function as you approach a point.</p>",
        "id": 320363176,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673313983
    },
    {
        "content": "<p><code>ℕ → ℝ</code> is the type of real sequences, and <code>ℝ → ℝ</code> is the type of real-valued functions on the real line.</p>",
        "id": 320363195,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673313999
    },
    {
        "content": "<p>I am trying to apply is_limit to the sequence <code>f a</code></p>",
        "id": 320363236,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673314037
    },
    {
        "content": "<p>Ah, you're using the sequence definition of continuity, I see.</p>",
        "id": 320363251,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673314052
    },
    {
        "content": "<p>I think you need to parenthesise <code>f ∘ a</code>.</p>",
        "id": 320363272,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673314066
    },
    {
        "content": "<p>I think the correct RHS is <code>is_limit a L → is_limit (f ∘ a) (f L)</code>.</p>",
        "id": 320363387,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673314129
    },
    {
        "content": "<p>ok yep <code>def is_continuous (f: ℝ → ℝ) := ∀ x: ℝ, ∀ a: ℕ → ℝ, ∀ L: ℝ, is_limit a L → is_limit (f ∘ a) (f L)</code> worked. finally understand how multiple arguments work! lol</p>",
        "id": 320363430,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673314166
    },
    {
        "content": "<p>Function application \"binds tighter\" than basically anything else. <code>a b &lt;op&gt; c d</code> is always parsed <code>(a b) &lt;op&gt; (c d)</code>.</p>",
        "id": 320363561,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673314231
    }
]