[
    {
        "content": "<p>I am confused. Does my example hold?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span>\n    <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">a.join</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286342917,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1655381223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.join</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">$</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"n\">l.join.filter_map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.filter_map_append</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286343846,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655381805
    },
    {
        "content": "<p>Don't we want to add it to mathlib alongside with the following theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">map_join</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">join</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">join</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">map_append</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 286358049,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1655388827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 286358055,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655388832
    },
    {
        "content": "<p>I don't know if the direction of those lemmas is right or whether they should be simp, but we should certainly have them in some form</p>",
        "id": 286374285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655395111
    },
    {
        "content": "<p>I am sorry for using a wrong word. The theorem <code>map_join</code> already exists in mathlib. I would like to add only one new theorem.</p>",
        "id": 286391098,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1655402777
    },
    {
        "content": "<p>Lemme PR it.</p>",
        "id": 286393691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1655404023
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14777\">https://github.com/leanprover-community/mathlib/pull/14777</a></p>",
        "id": 286397116,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1655405482
    },
    {
        "content": "<p>Should I move it to <code>data/list/join</code> as suggested?</p>",
        "id": 286726394,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1655667619
    }
]