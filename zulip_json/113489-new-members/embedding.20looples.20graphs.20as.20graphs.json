[
    {
        "content": "<p>Hello everyone,<br>\nIs it possible to embed directed loopless graphs in directed graphs such that I can use Def only made for directed graphs for the loopless ones as well? For directed graphs I already got a bunch of stuff..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_loopless_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any help is appreciated.</p>",
        "id": 320474956,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1673363889
    },
    {
        "content": "<p>You can construct the function from <code>directed_loopless_simple_graph V</code> to <code>directed_simple_graph V</code>, and show it is injective. It could be useful to mark it as a coercion, so you can use directed simple graph definitions for directed loopless simple graphs.</p>",
        "id": 320475536,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673364011
    },
    {
        "content": "<p>You can get that function easily by using the <code>extends</code> keyword:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_loopless_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This defines <code>directed_loopless_simple_graph.to_directed_simple_graph</code>. Furthermore, if you have <code>G : directed_loopless_simple_graph V</code> and write <code>G.adj</code> it will automatically insert this function for you.</p>",
        "id": 320476585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673364219
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 320478033,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1673364576
    },
    {
        "content": "<p>Lean 3 supports \"generalized field notation\", which means this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_loopless_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">directed_simple_graph.edge_set</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">G.adj</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">directed_loopless_simple_graph.diag_not_mem</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_loopless_simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ⊢ (v, v) ∉ G.to_directed_simple_graph.edge_set</span>\n  <span class=\"n\">exact</span> <span class=\"n\">G.loopless</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320478107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673364596
    },
    {
        "content": "<p>the only real limitation is that you have to look at terms like <code>G.to_directed_simple_graph.edge_set</code> in the goal view.</p>",
        "id": 320478280,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673364634
    },
    {
        "content": "<p>The way it works is that when you write <code>G.edge_set</code>, it first looks at the namespace associated to the type for <code>G</code>, then it looks at its parent, and its parent, and so on until it finds something called <code>edge_set</code> in that namespace.</p>",
        "id": 320478359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673364662
    },
    {
        "content": "<p>Then it inserts <code>G</code> (or a projection to a parent structure) as the first argument of the correct type.</p>",
        "id": 320478585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673364724
    },
    {
        "content": "<p>Ah I see, thats useful to understand. I am just getting started <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 320480007,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1673365148
    },
    {
        "content": "<p>What <code>@[ext]</code> does?</p>",
        "id": 320753956,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673457172
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ext\">attr#ext</a> on a structure automatically creates an \"ext\" lemma for you. With the above example, try <code>#print directed_simple_graph.ext</code> after the structure to see what it made.</p>",
        "id": 320759065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673458704
    },
    {
        "content": "<p>To add a bit more, \"ext\" is short for \"extensionality\". In lean's type theory, objects are considered equal if they were made from the same components. So to prove that two directed simple graphs are the same, it suffices to prove that their adjacency matrices coincide - this proof would use the <code>ext</code> lemma. You can invoke this reasoning in proofs by using the <code>ext</code> tactic,</p>",
        "id": 320828853,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673487358
    }
]