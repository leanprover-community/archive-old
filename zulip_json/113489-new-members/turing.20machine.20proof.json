[
    {
        "content": "<p>Hi all! I'm learning Lean, and playing around with <code>computability.turing_machine</code></p>\n<p>I made the simplest possible machine <code>M1</code> which just immediately halts (i.e. returns <code>none</code>).</p>\n<p>It was easy for me to prove the theorem <code>M1_halts_immediately</code> that it halts after a single call to <code>step</code>, but I'd also like to prove the theorem <code>M1_halts</code> that the higher-level <code>eval</code> also halts, since I want to play with more complicated machines next.</p>\n<p>Anyway here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.turing_machine</span>\n\n<span class=\"kd\">inductive</span> <span class=\"bp\">Λ</span> <span class=\"c1\">-- states</span>\n<span class=\"bp\">|</span> <span class=\"n\">initial</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"kd\">instance</span> <span class=\"bp\">Λ.</span><span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">initial</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"bp\">Γ</span> <span class=\"c1\">-- symbols</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span>\n<span class=\"kd\">instance</span> <span class=\"bp\">Γ.</span><span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">Γ.</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- initial state and empty tape:</span>\n<span class=\"kd\">def</span> <span class=\"n\">initial_cfg</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"n\">turing.TM0.init</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- machine that halts immediately:</span>\n<span class=\"kd\">def</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M1_halts_immediately</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.step</span> <span class=\"n\">M1</span> <span class=\"n\">initial_cfg</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M1_halts</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M1</span> <span class=\"o\">[]</span> <span class=\"bp\">≠</span> <span class=\"n\">part.none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How can I replace the <code>sorry</code> at the end? I have no idea what tactics are relevant here.</p>\n<p>And am I even trying to prove the correct statement? I also considered <code>∃ x, turing.TM0.eval M1 [] = part.some x</code></p>",
        "id": 259147004,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1635275706
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/turing.TM0.eval\">docs#turing.TM0.eval</a> is implemented on top of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/turing.eval\">docs#turing.eval</a> which uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.fix\">docs#pfun.fix</a> and I have no idea what tactics can run/reduce <code>pfun.fix</code> to get to a <code>part.some</code> result)</p>",
        "id": 259147809,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1635276137
    },
    {
        "content": "<p>The main theorem for proving things about <code>pfun.fix</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.mem_fix_iff\">docs#pfun.mem_fix_iff</a></p>",
        "id": 259148977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635276695
    },
    {
        "content": "<p>at least for \"positive\" statements, i.e. \"this program halts and returns x\". For negative statements you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.fix_induction\">docs#pfun.fix_induction</a></p>",
        "id": 259149073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635276729
    },
    {
        "content": "<p>okay thanks, I'll try that!</p>",
        "id": 259150433,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1635277382
    },
    {
        "content": "<p>Here's one way to state and prove the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">M1_halts</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M1</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">turing.TM0.eval</span><span class=\"o\">,</span> <span class=\"n\">part.map_dom</span><span class=\"o\">,</span> <span class=\"n\">part.dom_iff_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">turing.mem_eval</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">relation.refl_trans_gen.refl</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259151095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635277678
    },
    {
        "content": "<p>oh awesome, I think this will teach me a lot.</p>\n<p>so is the theorem<code>(…).dom</code> saying that the partial function has a non-empty domain, and thus halts?</p>",
        "id": 259151611,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1635277923
    },
    {
        "content": "<p><code>part A</code> is actually a \"partial value\", kind of like a partial function but over just one point. So if <code>p : part A</code> then <code>p.dom</code> is a proposition that says whether the value exists, and <code>p.get : p.dom -&gt; A</code> is either the empty function or a function on a singleton returning a single value of type <code>A</code></p>",
        "id": 259153030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635278489
    },
    {
        "content": "<p>So <code>turing.TM0.eval M1 []</code> is \"the value that results from executing M1 on <code>[]</code>, if it exists\", and <code>(turing.TM0.eval M1 []).dom</code> is asserting that the value exists, i.e. the machine halts</p>",
        "id": 259153187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635278543
    },
    {
        "content": "<p>A partial function <code>A -&gt;. B</code> is defined as <code>A -&gt; part B</code></p>",
        "id": 259153343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635278615
    },
    {
        "content": "<p>ah okay got it, that makes sense</p>",
        "id": 259153624,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1635278730
    },
    {
        "content": "<p>Hello all! I am new to Lean and am currently following the tutorials from the theorem proving in lean 3, are there any published solutions with the questions?</p>",
        "id": 259159174,
        "sender_full_name": "YJ",
        "timestamp": 1635281561
    },
    {
        "content": "<p>You're in the wrong thread (hint: start a new one) but the answer to your question is that as far as I know there aren't; however if you're stuck on something you could ask in a new thread in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a></p>",
        "id": 259161896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635282574
    },
    {
        "content": "<p>I did a bit more with this recently, including proving that a simple looping machine <em>doesn't</em> halt which was more fun than proving that things do halt :p</p>\n<p>However, I was only able to do that using an alternative formulation of halting, which I'm pretty sure is equivalent to what we used earlier in this thread, but now I would like to prove that it is!</p>\n<p>Specifically, the two definitions of halting which I want to prove are equivalent are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">halts</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">halts'''</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>(<code>multistep M n</code> just steps the machine <code>n</code> times—I'll include the full code below.)</p>",
        "id": 263181982,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638294527
    },
    {
        "content": "<p>In the following code, I started an attempt at the proof <code>halts_iff'''</code>, where the <code>sorry</code> statements are. Based on <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s tips above, I'm guessing I need to do something with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.mem_fix_iff\">docs#pfun.mem_fix_iff</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun.fix_induction\">docs#pfun.fix_induction</a> ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.turing_machine</span>\n\n<span class=\"kd\">inductive</span> <span class=\"bp\">Λ</span> <span class=\"c1\">-- states</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"kd\">instance</span> <span class=\"bp\">Λ.</span><span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"bp\">Γ</span> <span class=\"c1\">-- symbols</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span>\n<span class=\"kd\">instance</span> <span class=\"bp\">Γ.</span><span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">Γ.</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- initial state and empty tape:</span>\n<span class=\"kd\">def</span> <span class=\"n\">cfg₀</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"n\">turing.TM0.init</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- chainable step function:</span>\n<span class=\"kd\">def</span> <span class=\"n\">step'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">x.bind</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.step</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multistep</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.repeat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">step'</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">multistep_none_add</span> <span class=\"o\">{</span><span class=\"n\">cfg</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">cfg</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">cfg</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multistep</span><span class=\"o\">,</span> <span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.repeat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">multistep</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">multistep_none_ge</span> <span class=\"o\">{</span><span class=\"n\">cfg</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">cfg</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"n\">cfg</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.add_sub_of_le</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">multistep_none_add</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- equivalent definitions of halting:</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">halts</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">cfg₀</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">halts'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">dom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">halts''</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[]</span> <span class=\"bp\">≠</span> <span class=\"n\">part.none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">halts'''</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">halts'_iff''</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">halts'</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">halts''</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">halts''</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">part.eq_none_iff'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">halts'</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_not.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">halts''_iff'''</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">halts''</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">halts'''</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">part.ne_none_iff</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">halts_iff'''</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">halts</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">halts'''</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">halts</span><span class=\"o\">,</span> <span class=\"n\">halts'''</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- machine that halts immediately:</span>\n<span class=\"kd\">def</span> <span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₁_halts_immediately</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.step</span> <span class=\"n\">M₁</span> <span class=\"n\">cfg₀</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₁_halts</span> <span class=\"o\">:</span> <span class=\"n\">halts</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₁_halts'</span> <span class=\"o\">:</span> <span class=\"n\">halts'</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">halts'</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.eval</span><span class=\"o\">,</span> <span class=\"n\">part.map_dom</span><span class=\"o\">,</span> <span class=\"n\">part.dom_iff_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">turing.mem_eval</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">relation.refl_trans_gen.refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₁_halts''</span> <span class=\"o\">:</span> <span class=\"n\">halts''</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">halts'_iff''.mp</span> <span class=\"n\">M₁_halts'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₁_halts'''</span> <span class=\"o\">:</span> <span class=\"n\">halts'''</span> <span class=\"n\">M₁</span> <span class=\"o\">:=</span>\n<span class=\"n\">halts''_iff'''.mp</span> <span class=\"n\">M₁_halts''</span>\n\n\n<span class=\"c1\">-- machine that goes A → B → halt:</span>\n<span class=\"kd\">def</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Λ.</span><span class=\"n\">A</span> <span class=\"n\">symbol</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.stmt.write</span> <span class=\"n\">symbol</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₂_halts</span> <span class=\"o\">:</span> <span class=\"n\">halts</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₂_halts'</span> <span class=\"o\">:</span> <span class=\"n\">halts'</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">halts'</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.eval</span><span class=\"o\">,</span> <span class=\"n\">part.map_dom</span><span class=\"o\">,</span> <span class=\"n\">part.dom_iff_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">turing.TM0.cfg.mk</span> <span class=\"bp\">Λ.</span><span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">turing.tape.mk₁</span> <span class=\"o\">[]),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">turing.mem_eval</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- machine that loops A → B → A → B → ⋯:</span>\n<span class=\"kd\">def</span> <span class=\"n\">M₃</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Λ.</span><span class=\"n\">A</span> <span class=\"n\">symbol</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.stmt.write</span> <span class=\"n\">symbol</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Λ.</span><span class=\"n\">B</span> <span class=\"n\">symbol</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.stmt.write</span> <span class=\"n\">symbol</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">M₃_AB_only</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">tape</span><span class=\"o\">,</span>\n  <span class=\"n\">multistep</span> <span class=\"n\">M₃</span> <span class=\"n\">n</span> <span class=\"n\">cfg₀</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">tape</span><span class=\"o\">⟩</span> <span class=\"bp\">∨</span> <span class=\"n\">multistep</span> <span class=\"n\">M₃</span> <span class=\"n\">n</span> <span class=\"n\">cfg₀</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">tape</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">tape_n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multistep</span><span class=\"o\">,</span> <span class=\"n\">nat.repeat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">multistep</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">step'</span><span class=\"o\">,</span> <span class=\"n\">option.bind</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.step</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multistep</span><span class=\"o\">,</span> <span class=\"n\">nat.repeat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">multistep</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">step'</span><span class=\"o\">,</span> <span class=\"n\">option.bind</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.step</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">M₃_not_halts</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">halts</span> <span class=\"n\">M₃</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">M₃_AB_only</span> <span class=\"k\">with</span> <span class=\"n\">tape</span> <span class=\"n\">h_tape</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_tape</span><span class=\"bp\">;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h_tape</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">option.no_confusion</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(There's also an unfinished proof <code>M₂_halts'</code> of a machine halting in two steps, just because I felt like I should be able to figure it out after proving <code>M₁_halts'</code> that a machine halts in one step, but I couldn't… am curious to learn what I'm missing)</p>",
        "id": 263182006,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638294540
    },
    {
        "content": "<p>Sorry this is a bit long, any tips appreciated!</p>",
        "id": 263182048,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638294560
    },
    {
        "content": "<p>Here's a much more concise version of what I'm trying to prove in case anyone has some tips:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.turing_machine</span>\n\n<span class=\"kd\">inductive</span> <span class=\"bp\">Λ</span> <span class=\"c1\">-- states</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span>\n<span class=\"kd\">instance</span> <span class=\"bp\">Λ.</span><span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">Λ.</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"bp\">Γ</span> <span class=\"c1\">-- symbols</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span>\n<span class=\"kd\">instance</span> <span class=\"bp\">Γ.</span><span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">Γ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">Γ.</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- initial state and empty tape:</span>\n<span class=\"kd\">def</span> <span class=\"n\">cfg₀</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"n\">turing.TM0.init</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- chainable step function (since both its input and output have the same option type):</span>\n<span class=\"kd\">def</span> <span class=\"n\">step'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">x.bind</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.step</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- step a given number of times:</span>\n<span class=\"kd\">def</span> <span class=\"n\">multistep</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.repeat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">step'</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- I'm trying to prove this:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">cfg₀</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- or this if it's easier, since I've already proven (turing.TM0.eval M []).dom ↔ (∃ x, turing.TM0.eval M [] = part.some x)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"n\">cfg₀</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 263352917,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638390403
    },
    {
        "content": "<p>Sorry, I forgot to respond to this one. I made some minor tweaks but it's essentially the same theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multistep</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.machine</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.cfg</span> <span class=\"bp\">Γ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.iterate</span> <span class=\"o\">(</span><span class=\"n\">step'</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">multistep</span> <span class=\"n\">M</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">cfg₀</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">turing.TM0.eval</span> <span class=\"n\">M</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">turing.TM0.eval</span><span class=\"o\">,</span> <span class=\"n\">cfg₀</span><span class=\"o\">,</span> <span class=\"n\">multistep</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.init</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">e</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.iterate</span><span class=\"o\">,</span> <span class=\"n\">step'</span><span class=\"o\">,</span> <span class=\"n\">option.bind</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.step</span> <span class=\"n\">M</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">e'</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">part.dom_iff_mem.2</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">turing.mem_eval.2</span> <span class=\"o\">⟨</span><span class=\"n\">relation.refl_trans_gen.refl</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">turing.reaches_eval</span> <span class=\"o\">(</span><span class=\"n\">relation.refl_trans_gen.single</span> <span class=\"n\">e'</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">part.dom_iff_mem.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">turing.eval_induction</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">turing.TM0.step</span> <span class=\"n\">M</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.iterate</span><span class=\"o\">,</span> <span class=\"n\">step'</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]⟩</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">turing.reaches_eval</span> <span class=\"o\">(</span><span class=\"n\">relation.refl_trans_gen.single</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263357558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638392658
    },
    {
        "content": "<p>Oh awesome, thanks as always <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>!</p>\n<p>I'll step through this and likely learn quite a few things</p>",
        "id": 263358585,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638393256
    },
    {
        "content": "<p>oh and good call on <code>nat.iterate</code>, I didn't know about that</p>",
        "id": 263359458,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1638393758
    }
]