[
    {
        "content": "<p>I have some lemma where I want to take the opposite function, but it seems like it does not work, at least for <code>N → R</code>, here's some MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">negative_sets</span>\n\n<span class=\"n\">def</span> <span class=\"n\">negative_set</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cv</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n<span class=\"n\">def</span> <span class=\"n\">accu_point</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">cv</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- where is it?</span>\n<span class=\"c\">/-</span><span class=\"cm\">instance seq.neg : has_neg (ℕ → ℝ) := {</span>\n<span class=\"cm\">  neg := λ x, (λ n, - x n)</span>\n<span class=\"cm\">}-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">negative_set</span><span class=\"bp\">.</span><span class=\"n\">adhere_ens_iff</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span>\n  <span class=\"n\">accu_point</span> <span class=\"n\">S</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">accu_point</span> <span class=\"o\">(</span><span class=\"n\">negative_set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">adh</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">accu_point</span> <span class=\"n\">at</span> <span class=\"n\">adh</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">adh</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">negative_sets</span>\n</pre></div>\n\n\n<p>I can trivially provide the instance, but maybe I'm missing something.</p>",
        "id": 192918789,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586022017
    },
    {
        "content": "<p>Also, I'm not sure \"negative sets\" should be something part of mathlib or not. It's somewhat useful, maybe it can be really a lot more useful for convex analysis, but unsure.</p>",
        "id": 192918812,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586022068
    },
    {
        "content": "<p>I agree that it's useful but unfortunately <code>-S</code> already means \"the stuff not in S\"</p>",
        "id": 192919336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586022810
    },
    {
        "content": "<p>I'm not talking about -X for <code>X: set Y</code> but rather <code>-x</code> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">x : \\mathbb{N} \\to \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></p>",
        "id": 192919412,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586022931
    },
    {
        "content": "<p>isn't this already a ring?</p>",
        "id": 192919418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586022945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How could I check this fact?</p>",
        "id": 192919465,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586022967
    },
    {
        "content": "<p>you will need the right import. Probably algebra.pi_instances</p>",
        "id": 192919483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586023020
    },
    {
        "content": "<p>Indeed, that was it.</p>",
        "id": 192919496,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586023040
    },
    {
        "content": "<p>I don't know how someone who doesn't know where stuff in mathlib is can find this instance. I think there's a way of importing all of mathlib somehow? Sometimes people write <code>import all</code> but they have to run some script beforehand I think</p>",
        "id": 192919591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586023139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> If the doc implemented a search based on types, I could have typed <code>has_neg</code> and see all instances of <code>has_neg</code> across mathlib, but search is not that advanced currently.</p>",
        "id": 192919788,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586023374
    },
    {
        "content": "<p>Usually this won't even help, because nobody actually wrote a <code>has_neg</code> instance, they wrote a <code>ring</code> instance instead.</p>",
        "id": 192919869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586023472
    },
    {
        "content": "<p>In the case of pi_instances in particular it probably does work.</p>",
        "id": 192919894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586023489
    },
    {
        "content": "<p>You can search for all instances of a class using <code>#print instances has_neg</code></p>",
        "id": 192920084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586023714
    },
    {
        "content": "<p>In Haskell you have to write out all the instances of parent classes explicitly, which has the side effect that they're easier to index/find.</p>",
        "id": 192920086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586023717
    },
    {
        "content": "<p>however one of those instances will be <code>add_group.has_neg</code> and you will have to follow that thread to find all the others</p>",
        "id": 192920105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586023754
    },
    {
        "content": "<p>and if you are wondering \"why isn't there a way to print them all out recursively\", that's called tracing the type class search</p>",
        "id": 192920177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586023837
    },
    {
        "content": "<p>It might be useful to have a way to only follow all the instances coming from <code>extends</code>, though</p>",
        "id": 192920286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586024008
    },
    {
        "content": "<p>that should at least be a finite list</p>",
        "id": 192920347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586024050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192920177\" title=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192920177\">said</a>:</p>\n<blockquote>\n<p>and if you are wondering \"why isn't there a way to print them all out recursively\", that's called tracing the type class search</p>\n</blockquote>\n<p>How hard would it be to make Lean output some metadata about typeclasses search (as JSON or whatever makes sense)?</p>",
        "id": 192927893,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586035849
    },
    {
        "content": "<p>You can just turn the trace on</p>",
        "id": 192927917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586035873
    },
    {
        "content": "<p>I can never remember how to do it, it tells you if typeclass inference fails in a certain way. It's not, but it's something like, <code>set_option trace.class_inference true</code></p>",
        "id": 192927969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586035925
    },
    {
        "content": "<p><code>set_option trace.class_instances true</code></p>",
        "id": 192927974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586035945
    },
    {
        "content": "<p>Oh okay, I was more asking from a documentation standpoint, as we have Ctrl + P + \"#\" to search for lemmas/etc, I was wondering how hard would it be to have something to search for instances in VSCode</p>",
        "id": 192927986,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586035992
    },
    {
        "content": "<p>I am unclear what you're asking. Which instances do you want to search for? Everything <code>apply_instance</code> knows about or the ones used to solve one particular search?</p>",
        "id": 192928040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586036099
    },
    {
        "content": "<p><code>#print instances</code> for the former, and turn the trace on for the latter.</p>",
        "id": 192928055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586036137
    },
    {
        "content": "<p>If we reconsider the previous context where <code>pi_instances</code> were not imported, i.e. not available in the file.</p>\n<p>Would <code>#print instances</code> or the tracing find them?</p>",
        "id": 192928096,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586036178
    },
    {
        "content": "<p>My point was basically, it could be interesting to have something which search over all files, including not imported ones. Or to bake this kind of tracing search statically in the mathlib docs.</p>",
        "id": 192928104,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586036205
    },
    {
        "content": "<p>If you haven't imported a file then for sure <code>#print</code> and traces won't find the instances in that file.</p>",
        "id": 192928120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586036269
    },
    {
        "content": "<p>Below each class definition, the docs show all the instances that are defined in mathlib, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/core.html#has_neg\" title=\"https://leanprover-community.github.io/mathlib_docs/core/init/core.html#has_neg\">has_neg</a>; click on \"Instances\".</p>",
        "id": 192928179,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586036360
    },
    {
        "content": "<p>I see <code>pi.has_neg</code> in that list, and clicking on it leads <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/pi_instances.html#pi.has_neg\" title=\"https://leanprover-community.github.io/mathlib_docs/algebra/pi_instances.html#pi.has_neg\">here</a>.</p>",
        "id": 192928228,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586036425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192928179\" title=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192928179\">said</a>:</p>\n<blockquote>\n<p>Below each class definition, the docs show all the instances that are defined in mathlib, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/core.html#has_neg\" title=\"https://leanprover-community.github.io/mathlib_docs/core/init/core.html#has_neg\">has_neg</a>; click on \"Instances\".</p>\n</blockquote>\n<p>It is just it's not obvious that <code>pi.has_neg</code> is the one I'm looking for.</p>",
        "id": 192928239,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586036452
    },
    {
        "content": "<p>If you know that a function is a pi type then it's more obvious</p>",
        "id": 192928249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586036470
    },
    {
        "content": "<p>In this case, right</p>",
        "id": 192928267,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586036483
    },
    {
        "content": "<p>and I would venture that this is one of the most obscure examples</p>",
        "id": 192928271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586036498
    },
    {
        "content": "<p>Hahaha, most likely</p>",
        "id": 192928308,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586036523
    },
    {
        "content": "<p>We could probably display the types of those instances. Please open an issue on <a href=\"https://github.com/leanprover-community/doc-gen/\" title=\"https://github.com/leanprover-community/doc-gen/\">doc-gen</a> so we don't forget.</p>",
        "id": 192928312,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586036525
    },
    {
        "content": "<p>But note no <code>real.has_neg</code></p>",
        "id": 192928322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586036578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192928322\" title=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192928322\">said</a>:</p>\n<blockquote>\n<p>But note no <code>real.has_neg</code></p>\n</blockquote>\n<p>It comes from <code>add_group.has_neg</code>, I suppose?</p>",
        "id": 192928333,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586036604
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 192928819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586037323
    },
    {
        "content": "<p>Note that there is <code>rat.has_neg</code> though. What I'm saying is that the results are in some sense random.</p>",
        "id": 192949449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586077248
    },
    {
        "content": "<p><del> Is this a defined-in-core vs defined-in-mathlib thing? </del> No, they're both defined in mathlib.</p>",
        "id": 192963233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586098644
    },
    {
        "content": "<p>No, it's just optional whether to define (for example) <code>has_neg</code> and <code>ring</code> simultaneously or separately. I wouldn't expect there to be much logic to it.</p>",
        "id": 192963490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586099073
    },
    {
        "content": "<p>One reason to define them separately might be that you want to talk about <code>-x</code> and prove lemmas about it before going on to define the ring structure.</p>",
        "id": 192963500,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586099094
    },
    {
        "content": "<p>I didn't look to see if that is actually the case for <code>rat</code> though.</p>",
        "id": 192963516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586099107
    },
    {
        "content": "<p>It looks like in both cases <code>has_neg</code> is defined and used before the <code>ring</code> instance is assembled, however with reals it's done at the level of Cauchy sequences, e.g. there's a <a href=\"https://github.com/leanprover-community/mathlib/blob/66f30901d1b065a68c4545455c79aba7fb37a71a/src/data/real/cau_seq_completion.lean#L47\" title=\"https://github.com/leanprover-community/mathlib/blob/66f30901d1b065a68c4545455c79aba7fb37a71a/src/data/real/cau_seq_completion.lean#L47\"><code>has_neg Cauchy</code></a> instance.</p>",
        "id": 192963918,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586099702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192963918\" title=\"#narrow/stream/113489-new-members/topic/has_neg.20for.20X.20.E2.86.92.20Y.20where.20Y.20has_neg.3F/near/192963918\">said</a>:</p>\n<blockquote>\n<p>It looks like in both cases <code>has_neg</code> is defined and used before the <code>ring</code> instance is assembled, however with reals it's done at the level of Cauchy sequences, e.g. there's a <a href=\"https://github.com/leanprover-community/mathlib/blob/66f30901d1b065a68c4545455c79aba7fb37a71a/src/data/real/cau_seq_completion.lean#L47\" title=\"https://github.com/leanprover-community/mathlib/blob/66f30901d1b065a68c4545455c79aba7fb37a71a/src/data/real/cau_seq_completion.lean#L47\"><code>has_neg Cauchy</code></a> instance.</p>\n</blockquote>\n<p>Wouldn't this be derived by quotient properties over rings?</p>",
        "id": 192964003,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586099786
    },
    {
        "content": "<p>Yes, it looks like that is how it's defined.</p>",
        "id": 192964081,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586099893
    }
]