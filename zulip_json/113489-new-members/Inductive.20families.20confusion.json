[
    {
        "content": "<p>Hello, I'm trying to figure out how inductive definitions work in Lean, but I think my question may be about a more general theoretical confusion about them.<br>\nIn TPL, chapter 7, section 7, inductive families are introduced. What i can't figure out is the difference with a simpler inductive definition. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span>                              <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why isn't alpha considered an index? Why the definition is not something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">:</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span>  <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>The same is valid for lists, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n</code></pre></div>\n<p>why the type α of the list is not part of the indexes? Aren't we declaring a family of inductive types ranging on α?</p>",
        "id": 274529585,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1646739737
    },
    {
        "content": "<p>here, for each <code>\\a</code> you have a separate inductive type. indices may change within the recursion</p>",
        "id": 274530762,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646740467
    },
    {
        "content": "<p>Indices indeed generalise parameters, so you could only use indices when defining your inductive types. An inductive type with parameters is isomorphic -- and therefore morally equal -- to the same inductive type with indices. However, indices give a less convenient recursor and I believe tactics which wrap the recursor, particularly <code>induction</code>, may work less well. So it's a good idea to use parameters where possible.</p>",
        "id": 274531331,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646740814
    },
    {
        "content": "<blockquote>\n<p>So it's a good idea to use parameters where possible</p>\n</blockquote>\n<p>So, accordingly with what <span class=\"user-mention\" data-user-id=\"482773\">@Jakub Kądziołka</span>  said, it would be a good practice to use a parameter every time I do not need to change the index in recursion?</p>",
        "id": 274533984,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1646742627
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 274534202,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646742788
    }
]