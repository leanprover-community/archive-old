[
    {
        "content": "<p>What are ways to speed up the interactive lean parser in VS Code?  I often have a situation where the program takes minutes to check if my code works. In the case I just have I have edited a file that was already part of mathlib (<code>category/arrows.lean</code>). That file does compile and the lean infoview is reasonably quick to update. However, another file that builds upon <code>arrows.lean</code> is extremely slowly / not at all reacting in the infoview. Thanks!</p>",
        "id": 231864403,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616701335
    },
    {
        "content": "<p>Have you done <code>lean --make your/path/to/target.lean</code>? That will compile oleans for that file and all dependencies</p>",
        "id": 231864768,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616701485
    },
    {
        "content": "<p>No, I have not. Do I need to do that regularly?</p>",
        "id": 231865114,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616701610
    },
    {
        "content": "<p>By <code>your/path/to/target.lean/</code> you mean the git repo folder containing the mathlib copy? (I am working in a copy of mathlib).</p>",
        "id": 231865505,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616701759
    },
    {
        "content": "<p>Oleans can help. If you're working on a branch of mathlib, then you can make your change to an existing file, push, wait a couple hours, and then do <code>leanproject get-cache</code></p>",
        "id": 231867691,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616702713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> Yeah, if there are 10 files between <code>arrows.lean</code> and the file you work on, Lean has to do a lot of work in between.</p>",
        "id": 231867909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616702795
    },
    {
        "content": "<p>So it makes sense to recompile before resuming work on your file</p>",
        "id": 231867972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616702822
    },
    {
        "content": "<p>If you ever edit <code>logic.basic</code> you will have the joy of waiting for 2 hours before mathlib is recompiled <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 231868028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616702849
    },
    {
        "content": "<p>Unless you use <code>lean --old</code></p>",
        "id": 231868139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616702894
    },
    {
        "content": "<p>With <code>--old</code> Lean will assume that your changes to <code>logic/basic</code> don't affect the files you did not edit.</p>",
        "id": 231868327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616702982
    },
    {
        "content": "<p>Of course, this doesn't work if you <em>change</em> the type of a def/lemma.</p>",
        "id": 231868412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616703008
    },
    {
        "content": "<p>(as opposed to adding new defs/lemmas)</p>",
        "id": 231868480,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616703033
    },
    {
        "content": "<p>Ah, that is good. In my case I just added a def to <code>arrow.lean</code>, which wouldn't affect anything else. So, I run <code>lean --old</code> in the terminal once and then this will do it?</p>",
        "id": 231868528,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616703049
    },
    {
        "content": "<p>No, you need to pass <code>--old</code> argument to the lean server process.</p>",
        "id": 231869024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616703247
    },
    {
        "content": "<p>This should be somewhere in the lean extension settings (I'm using Emacs, so can't help with the details).</p>",
        "id": 231869086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616703285
    },
    {
        "content": "<p>In VS Code, you'd add <code>--old</code> to the box under \"Extra command-line options for the Lean server\" in the extension settings.</p>",
        "id": 231870940,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616704115
    },
    {
        "content": "<p>I'd advise not getting too complicated with <code>lean --old</code>. If you're plugged into power, just leave <code>lean --make current_work.lean</code> buzzing along in a terminal...</p>",
        "id": 231881786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616708980
    },
    {
        "content": "<p>I always pass <code>--old</code> to lean server and run <code>lean --make current_work.lean</code> from time to time.</p>",
        "id": 231890276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616713589
    },
    {
        "content": "<p>Maybe I should try this more!</p>",
        "id": 231897427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616718660
    }
]