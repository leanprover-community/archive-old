[
    {
        "content": "<p>Is it possible to use <code>mutual inductive</code> where one branch is a type and the other is a <code>def</code>? Or does that question not make sense?</p>",
        "id": 202086075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593176375
    },
    {
        "content": "<p>More the latter, but can you post an example of what you'd like to do?</p>",
        "id": 202086368,
        "sender_full_name": "Chris B",
        "timestamp": 1593176543
    },
    {
        "content": "<p>I know for sure this is possible in Agda, but Lean's <code>mutual</code> syntax seems less flexible in these examples: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion</a></p>",
        "id": 202086406,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593176568
    },
    {
        "content": "<p>The Agda docs have a TypeCode/Interpretation example: <a href=\"https://agda.readthedocs.io/en/v2.6.1/language/mutual-recursion.html#mutual-recursion\">https://agda.readthedocs.io/en/v2.6.1/language/mutual-recursion.html#mutual-recursion</a></p>",
        "id": 202086516,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593176623
    },
    {
        "content": "<p>Here's my best attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">blade_new</span><span class=\"o\">,</span> <span class=\"n\">blade_is_perp</span>\n<span class=\"k\">with</span> <span class=\"n\">blade</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">scalar</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span> <span class=\"bp\">→</span> <span class=\"n\">blade_new</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">vector</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">→</span> <span class=\"n\">blade</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- takes a vector, n+1 blade, and a proof that the vector and n+1 blade are perpendicular</span>\n<span class=\"bp\">|</span> <span class=\"n\">graded</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">blade_new</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">blade_is_perp</span> <span class=\"n\">v</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">blade_new</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- a proof of perpendicularity is either</span>\n<span class=\"k\">with</span> <span class=\"n\">blade_is_perp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span>  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">blade_new</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- a proof that `v` is perpendicular to the sole element of `blade_new.vector`</span>\n<span class=\"c1\">-- a proof that both:</span>\n<span class=\"c1\">--   `v` is perpendicular to the v argument of `blade_new.graded`</span>\n<span class=\"c1\">--   `v` is perpendicular to the b argument of `blade_new.graded`</span>\n</code></pre></div>",
        "id": 202086857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593176791
    },
    {
        "content": "<p>I'm not really sure how to write the type of <code>blade_is_perp</code></p>",
        "id": 202087023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593176898
    },
    {
        "content": "<p>This makes sense (it's called induction-recursion) but Lean doesn't support it.</p>",
        "id": 202087037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593176908
    },
    {
        "content": "<p>(are <code>blade</code> and <code>blade_new</code> supposed to be the same thing?)</p>",
        "id": 202087270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593177069
    },
    {
        "content": "<p>I suppose a perhaps simpler example of my problem is constructing a list along with a proof that a relation is satisfied between every pair of elements</p>",
        "id": 202087272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593177070
    },
    {
        "content": "<p>You can emulate induction-recursion in Lean in various ways, but the easiest to work with in a case like this will just be to build it directly as <code>{l : list A // l.pairwise r}</code> -- or whatever the actual name is.</p>",
        "id": 202087337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593177122
    },
    {
        "content": "<p>Kind of a reiteration of what he said, but often you can state the definition you want in a more general way than you actually plan to use it, then declare the inductive such that it uses the specialized form of the definition. Mario Carneiro helped me with similar solution a little while back, where <code>IFunc</code> gets declared with a type parameter (A) that then gets filled in as the inductive : <a href=\"#narrow/stream/113488-general/topic/Lea%28r%29n.20you.20a.20scheme/near/190326502\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lea%28r%29n.20you.20a.20scheme/near/190326502</a></p>",
        "id": 202088163,
        "sender_full_name": "Chris B",
        "timestamp": 1593177574
    },
    {
        "content": "<p>To be honest, I've always had the impression that people interested in those things should play with Agda instead of Lean. This part part of Lean seems broken and completely orthogonal to what works great in Lean.</p>",
        "id": 202089530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593178213
    },
    {
        "content": "<p>In this case the \"workaround\" of using a list + separately defined property is also more convenient in practice anyways.</p>",
        "id": 202090259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593178566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, is it generally better to reuse existing inductive types like list instead of defining my own?</p>",
        "id": 202092750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593179610
    },
    {
        "content": "<p>Depends on what you want to do. If you reuse stuff, you can also reuse a lot of lemmas.</p>",
        "id": 202092905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593179676
    },
    {
        "content": "<p>And sometimes \"a lot\" means &gt; 4000 lines of code.</p>",
        "id": 202092931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593179691
    },
    {
        "content": "<p>And can I use <code>pairwise</code> on <code>vector</code> instead of <code>list</code>?</p>",
        "id": 202093034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593179741
    },
    {
        "content": "<p>Well, a <code>vector</code> is defined in terms of lists, so \"yes\".</p>",
        "id": 202093324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593179877
    },
    {
        "content": "<p>you could easily make vector.pairwise</p>",
        "id": 202093413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593179895
    },
    {
        "content": "<p>But you might need to extract the listy part out of the vector</p>",
        "id": 202093422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593179898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>: I don't fully understand the syntax you have, mind giving me a really simple <code>#check</code> command that I can put that into?</p>",
        "id": 202093912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">//</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>is giving me \"invalid expression\"</p>",
        "id": 202094078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180156
    },
    {
        "content": "<p>you have two l's?</p>",
        "id": 202094145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593180185
    },
    {
        "content": "<p><code>{}</code>, not <code>()</code></p>",
        "id": 202094191,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593180203
    },
    {
        "content": "<p><code>#check {l : list ℕ // l.pairwise eq}</code></p>",
        "id": 202094238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593180231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Can we rip <code>parameter</code> out of core? [/joking]</p>",
        "id": 202094320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593180252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> (Note that parameters will be gone in lean 4.)</p>",
        "id": 202094386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593180286
    },
    {
        "content": "<p>In general, it's advised to use <code>variables</code> instead.</p>",
        "id": 202094425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593180308
    },
    {
        "content": "<p>Oh, I assumed the <code>{}</code> was an argument declaration like <code>()</code></p>",
        "id": 202095142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180625
    },
    {
        "content": "<p>But here it's part of the type itself. I haven't seen this type of <code>Type</code> before - is there somewhere in the docs I can read about the syntax?</p>",
        "id": 202095190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180659
    },
    {
        "content": "<p>It's notation for <code>subtype</code></p>",
        "id": 202095240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593180682
    },
    {
        "content": "<p>You could also just make a custom structure.</p>",
        "id": 202095303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593180711
    },
    {
        "content": "<p>Reuse of list lemmas is one advantage, but this style is also just easier to work with than a fancy inductive-recursive definition, at least when the inductive-recursive definition isn't buying you any additional expressive power.</p>",
        "id": 202095412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593180748
    },
    {
        "content": "<p>I'm not sure it's easy to see the <code>{x : X // p x}</code> notation for <code>@subtype X p</code> defined in Lean, it might be baked in somehow?</p>",
        "id": 202095461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593180777
    },
    {
        "content": "<p>For example, you can replace the list by a propositionally equal one and then transport the proof of the property without having to rebuild the entire inductive structure.</p>",
        "id": 202095543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593180818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Multually.20defined.20inductive.20type.20and.20function/near/202093422\">said</a>:</p>\n<blockquote>\n<p>But you might need to extract the listy part out of the vector</p>\n</blockquote>\n<p>How do I do that?</p>",
        "id": 202095556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180826
    },
    {
        "content": "<p><code>(v : list ℕ)</code> didn't work, so I guess there's no <code>coe</code> defined?</p>",
        "id": 202095633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180850
    },
    {
        "content": "<p>There is for <code>subtype</code> itself, but if you introduced a <code>def</code> for it then there isn't for your <code>def</code>.</p>",
        "id": 202095773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593180935
    },
    {
        "content": "<p><code>v.val</code> or <code>v.1</code> or add a <code>has_coe</code> instance defined to be one of these.</p>",
        "id": 202095800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593180950
    },
    {
        "content": "<p>Is there any way to get autocomplete to help me there?</p>",
        "id": 202095892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180977
    },
    {
        "content": "<p>Hitting tab after the dot gave me a massive list</p>",
        "id": 202095912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593180989
    },
    {
        "content": "<p>Yes, define your own structure instead of reusing <code>subtype</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 202095933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593181002
    },
    {
        "content": "<p>Otherwise, there is nothing for autocomplete to know (it isn't smart enough to unfold definitions).</p>",
        "id": 202095966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593181019
    },
    {
        "content": "<p>What is the structure equivalent to <code>{x : X // p x}</code>?</p>",
        "id": 202096027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593181054
    },
    {
        "content": "<p>subtype p</p>",
        "id": 202096061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593181071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202096138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593181094
    },
    {
        "content": "<p>(modulo typos)</p>",
        "id": 202096152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593181098
    },
    {
        "content": "<p>Thanks, that now seems obvious</p>",
        "id": 202096176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593181110
    },
    {
        "content": "<p>I was trying to work out how I could constrain the <code>l</code> field</p>",
        "id": 202096231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593181137
    },
    {
        "content": "<p>oh you mean rolling your own?</p>",
        "id": 202096275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593181151
    },
    {
        "content": "<p>the joys of dependent types</p>",
        "id": 202096283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593181155
    },
    {
        "content": "<p>But obviously that's not necessary, if you pass an l that doesn't satisfy the pairwise requirement, then you just get stuck producing a <code>p</code></p>",
        "id": 202096288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593181157
    },
    {
        "content": "<p>This is the actual definition of <code>subtype</code> in Lean for reference: <a href=\"https://github.com/leanprover-community/lean/blob/de6c873a57fda86c20dc93f4660ab257ef8e8995/library/init/core.lean#L270-L271\">https://github.com/leanprover-community/lean/blob/de6c873a57fda86c20dc93f4660ab257ef8e8995/library/init/core.lean#L270-L271</a></p>",
        "id": 202096304,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593181168
    },
    {
        "content": "<p>By the way, note that <code>vector</code> is defined in the Lean core library as a subtype and not an inductive family indexed on <code>nat</code>, even though Lean supports those just fine, for the same reason: it's easier to use.</p>",
        "id": 202100368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593183138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Why are you actually interested in lists of which all elements are pairwise equal? They don't seem very interesting to me...</p>",
        "id": 202101981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593183880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>: That was a contrived example, what I actually care about is list where elements have a pairwise dot product of zero</p>",
        "id": 202177559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593251088
    },
    {
        "content": "<p>Ok, that sounds a lot more interesting <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 202177655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251257
    }
]