[
    {
        "content": "<p>The following results don't seem to be in mathlib. Is this ok to PR?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">rat</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mk_num_denom_eq</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rat.mk</span> <span class=\"n\">r.num</span> <span class=\"bp\">↑</span><span class=\"n\">r.denom</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n <span class=\"n\">rat.mk_pnat_eq</span> <span class=\"n\">r.num</span> <span class=\"n\">r.denom</span> <span class=\"n\">r.pos</span> <span class=\"bp\">▸</span> <span class=\"n\">rat.mk_pnat_pnat_denom_eq</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">div_mk_div_cancel_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">rat.mk</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rat.mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rat.div_mk_div_cancel_left</span> <span class=\"n\">c0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">pow_def</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">rat.mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">rat.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rat.mul_def</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">i</span> <span class=\"n\">b0</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_same_denom</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">rat.mk</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">rat.mk</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">num</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">fin.sum_univ_one</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">fin.sum_univ_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i.succ</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">rat.add_mk</span><span class=\"o\">},</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">rat</span>\n</code></pre></div>",
        "id": 292232701,
        "sender_full_name": "Way Yan",
        "timestamp": 1659760448
    },
    {
        "content": "<p>These results seem fairly useful, you should PR them! Did you look at the <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> guide yet? You should try and follow that advice where possible.<br>\nSome comments:</p>\n<ul>\n<li><code>mk_num_denom_eq</code> is the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.num_denom\">docs#rat.num_denom</a> apart from the implicitness of <code>r</code></li>\n<li><code>div_mk_div_cancel_right</code> likely won't work well as a simp lemma as the condition <code>c \\ne 0</code> likely isn't provable by simp (you can check this sort of thing by typing <code>#simp (rat.mk 1 2) ^ 2</code> to see that your simp lemma pow_def is also not working)</li>\n<li><code>pow_def</code> doesn't need <code>b \\ne 0</code> as an extra condition, you can prove it in both cases with</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">by_cases</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">b0</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>at the start of the proof</p>\n<ul>\n<li><code>div_mk_div_cancel_right</code> should be called <code>rat.mk_mul_mul_cancel</code> maybe?</li>\n<li><code>sum_same_denom</code> should use <code>begin... end</code> rather than <code>by {}</code> as the proof is long.</li>\n<li><code>sum_same_denom</code> should be called something like <code>rat.sum_mk_left_eq</code></li>\n<li><code>sum_same_denom</code> should probably be generalised to more general finsets than just <code>univ</code> in <code>fin (n+1)</code> (I guess any finset is fine?)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sum_mk_left_eq</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">S.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">rat.mk</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">rat.mk</span> <span class=\"o\">(</span><span class=\"n\">S.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">num</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">S</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">S</span> <span class=\"n\">ha</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_insert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rat.add_mk</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292235749,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659765355
    },
    {
        "content": "<p>Thanks for the feedback! I'll take a look at the <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> guide</p>",
        "id": 292236450,
        "sender_full_name": "Way Yan",
        "timestamp": 1659766207
    },
    {
        "content": "<p>Wow I somehow missed <code>rat.num_denom</code> even though I combed through that page multiple times</p>",
        "id": 292236524,
        "sender_full_name": "Way Yan",
        "timestamp": 1659766324
    },
    {
        "content": "<p>I used <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a> to find it, as I had a feeling it should already exist</p>",
        "id": 292236542,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659766370
    },
    {
        "content": "<p>btw regarding <code>div_mk_div_cancel_right</code>, I named it as such to be consistent with the existing result <code>rat.div_mk_div_cancel_left</code></p>",
        "id": 292244557,
        "sender_full_name": "Way Yan",
        "timestamp": 1659778383
    },
    {
        "content": "<p>also, I'm not sure how to get induction to work for arbitrary finsets (I'm guessing you're supposed to use <code>finset.card</code>)</p>",
        "id": 292245377,
        "sender_full_name": "Way Yan",
        "timestamp": 1659779467
    },
    {
        "content": "<p>Or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.induction_on\">docs#finset.induction_on</a>?</p>",
        "id": 292245481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659779622
    },
    {
        "content": "<p>Did you see I put a proof at the end of the message?</p>",
        "id": 292262907,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659798319
    },
    {
        "content": "<p>oops, I missed that part</p>",
        "id": 292292653,
        "sender_full_name": "Way Yan",
        "timestamp": 1659840693
    },
    {
        "content": "<p>So this is what I have now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.fin</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">rat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">rat</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">div_mk_div_cancel_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/.</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/.</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rat.div_mk_div_cancel_left</span> <span class=\"n\">c0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_def</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/.</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/.</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">b0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rat.mul_def</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">i</span> <span class=\"n\">b0</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_mk_left_eq</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/.</span> <span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">num</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/.</span> <span class=\"n\">denom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">S</span> <span class=\"n\">using</span> <span class=\"n\">finset.induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">S</span> <span class=\"n\">ha</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_insert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_insert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rat.add_mk</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">rat</span>\n</code></pre></div>",
        "id": 292293043,
        "sender_full_name": "Way Yan",
        "timestamp": 1659841079
    },
    {
        "content": "<p>What's the motivation for these lemmas? I would say you should basically never use <code>/.</code> (prefer <code>/</code>)</p>",
        "id": 292293330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659841405
    },
    {
        "content": "<p><code>/.</code> is the notation used for <code>rat.mk</code> (as mentioned <a href=\"https://leanprover-community.github.io/mathlib_docs/data/rat/defs.html#notations\">here</a>)</p>",
        "id": 292295776,
        "sender_full_name": "Way Yan",
        "timestamp": 1659844727
    },
    {
        "content": "<p>I needed those lemmas while formalising a simple theorem</p>",
        "id": 292295832,
        "sender_full_name": "Way Yan",
        "timestamp": 1659844809
    },
    {
        "content": "<p>That doesn't really answer the question. <code>/.</code> is an implementation detail of <code>rat</code>, you shouldn't need to use it directly</p>",
        "id": 292296729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659845995
    },
    {
        "content": "<p>I'm a little confused now. What should I use then, given that I also used <code>rat.mk</code> earlier on?</p>",
        "id": 292297423,
        "sender_full_name": "Way Yan",
        "timestamp": 1659846943
    },
    {
        "content": "<p>Why are you using <code>rat.mk</code> / <code>/.</code> at all?</p>",
        "id": 292297560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659847092
    },
    {
        "content": "<p>all your theorems make direct reference to it so it's not clear what lead you down this path</p>",
        "id": 292297565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659847133
    },
    {
        "content": "<p>For context, I was trying to prove that if some rational <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>=</mo><mi>p</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">r=p/q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> (with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p,q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> coprime) is a root of a degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> monic polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> with integer coefficients, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">q=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>. I wanted to perform the computation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi><msup><mo stretchy=\"false\">)</mo><mi>i</mi></msup><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>i</mi></msup><mi mathvariant=\"normal\">/</mi><msup><mi>q</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msup><mi>p</mi><mi>i</mi></msup><msup><mi>q</mi><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow></msup><mi mathvariant=\"normal\">/</mi><msup><mi>q</mi><mi>n</mi></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msup><mi>p</mi><mi>i</mi></msup><msup><mi>q</mi><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi>q</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">p(r) = \\sum_i a_i(p/q)^i = \\sum_i a_i(p^i/q^i) = \\sum_i a_ip^iq^{n-i}/q^n = (\\sum_i a_ip^iq^{n-i})/q^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, and for that I needed all three lemmas.</p>",
        "id": 292298216,
        "sender_full_name": "Way Yan",
        "timestamp": 1659847932
    },
    {
        "content": "<p>What happens if you just use <code>/</code> instead of <code>/.</code>?</p>",
        "id": 292298492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659848317
    },
    {
        "content": "<p>all those steps seem like they wouldn't care if it was <code>/</code></p>",
        "id": 292298514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659848339
    },
    {
        "content": "<p>The proof breaks sadly</p>",
        "id": 292298526,
        "sender_full_name": "Way Yan",
        "timestamp": 1659848374
    },
    {
        "content": "<p>Besides the question about <code>/.</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/denoms_clearable_nat_degree\">docs#denoms_clearable_nat_degree</a> might be useful.</p>",
        "id": 292298551,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659848402
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.num_div_denom\">docs#rat.num_div_denom</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.num_denom\">docs#rat.num_denom</a></p>",
        "id": 292298589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659848423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456240\">Way Yan</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20easy.20rat.20lemmas/near/292298526\">said</a>:</p>\n<blockquote>\n<p>The proof breaks sadly</p>\n</blockquote>\n<p>be more specific</p>",
        "id": 292298615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659848450
    },
    {
        "content": "<p>Ok I'll try that</p>",
        "id": 292298644,
        "sender_full_name": "Way Yan",
        "timestamp": 1659848472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20easy.20rat.20lemmas/near/292298615\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"456240\">Way Yan</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20easy.20rat.20lemmas/near/292298526\">said</a>:</p>\n<blockquote>\n<p>The proof breaks sadly</p>\n</blockquote>\n<p>be more specific</p>\n</blockquote>\n<p>For example in the proof of <code>rat.div_mk_div_cancel_right</code>, the call to <code>rat.div_mk_div_cancel_left</code> breaks. But I guess I could fix that</p>",
        "id": 292298730,
        "sender_full_name": "Way Yan",
        "timestamp": 1659848612
    },
    {
        "content": "<p>of course you won't be using exactly the same lemmas; the question is whether analogous lemmas do or should exist</p>",
        "id": 292298782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659848671
    },
    {
        "content": "<p>I suspect that what Mario is hinting at is that you should go to the first time that <code>/.</code> appeared in your argument and make it not appear instead.</p>",
        "id": 292298786,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659848677
    },
    {
        "content": "<p>Ok will try that</p>",
        "id": 292298819,
        "sender_full_name": "Way Yan",
        "timestamp": 1659848720
    },
    {
        "content": "<p>(and then keep making it not appear!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 292298820,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659848731
    },
    {
        "content": "<p>Can I ask what's the difference between <code>/</code> and <code>/.</code> then?</p>",
        "id": 292298903,
        "sender_full_name": "Way Yan",
        "timestamp": 1659848806
    },
    {
        "content": "<p><code>/.</code> is used in the implementation of rationals, but you're meant to interact with rationals using <code>/</code>, at least that's my understanding</p>",
        "id": 292298990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659848926
    },
    {
        "content": "<p>For example, <code>(num x / denom : ℚ)</code> will give you a rational</p>",
        "id": 292299110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659849097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456240\">@Way Yan</span> there might be lots of ways to state one mathematical theorem in Lean. But there will probably be a \"preferred\" way, and the reason to use the preferred way is that this will use the functions about which there will be lots of useful lemmas. It's a bit of an art figuring out the \"preferred\" way, often people do it by reading the source code to find out eg simp normal forms and so on (or just by asking and learning from example). This sort of way of thinking completely passed me by when I was learning lean and it only all dawned on me later. For example <code>nat.succ</code> is really important for early development of naturals, but the moment you've got things going you'd be much better off using <code>x+1</code> because then the <code>ring</code> tactic will work. <code>rat.mk</code> falls into the same category.</p>",
        "id": 292309174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659863806
    },
    {
        "content": "<p>Ideally, they could find out from the documentation, too</p>",
        "id": 292318749,
        "sender_full_name": "Reid Barton",
        "timestamp": 1659877430
    }
]