[
    {
        "content": "<p>Is there a notion of a (totally) ordered set in Mathlib?<br>\nI'm not a mathematician, so I basically think of this as a list without duplicates. But I'm guessing a more mathy version would be a set together with a linear order (?).</p>",
        "id": 245989031,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626282282
    },
    {
        "content": "<p>A list such that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sorted\">docs#list.sorted</a></p>",
        "id": 245989153,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626282337
    },
    {
        "content": "<p>or you can encode it using a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_embedding\">docs#order_embedding</a></p>",
        "id": 245989246,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626282378
    },
    {
        "content": "<p>or just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a></p>",
        "id": 245990180,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626282817
    },
    {
        "content": "<p>Oh, turns out I actually do only need a partial order <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 245990196,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626282824
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order\">docs#partial_order</a></p>",
        "id": 245990253,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626282842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I'm not sure if I can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order\">docs#partial_order</a> for my use case.<br>\nI'm trying to define a proposition that defines when an ordered set is a topological ordering over a graph:<br>\nCurrently, instead of using \"ordered set\", I use a <code>list</code> and also force it to be nodup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.is_topo_over</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.nodup</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l.index_of</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245990972,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626283117
    },
    {
        "content": "<p>Imports?</p>",
        "id": 245991067,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626283170
    },
    {
        "content": "<p>This should be sufficient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.is_topo_over</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.nodup</span> <span class=\"bp\">∧</span> <span class=\"n\">l.pairwise</span> <span class=\"n\">g.has_path_from_to</span>\n</code></pre></div>",
        "id": 245991341,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626283280
    },
    {
        "content": "<p>I guess this would be an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unimportant</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">graph.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">g.unimportant</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.is_topo_over</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.nodup</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">∈</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l.index_of</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245991415,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626283319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Ordered.20set/near/245991341\">said</a>:</p>\n<blockquote>\n<p>This should be sufficient:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.is_topo_over</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.nodup</span> <span class=\"bp\">∧</span> <span class=\"n\">l.pairwise</span> <span class=\"n\">g.has_path_from_to</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So <code>list</code> with <code>nodup</code> is basically the notion of ordered set?</p>",
        "id": 245991586,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626283386
    },
    {
        "content": "<p>that's a finite ordered set</p>",
        "id": 245991649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626283421
    },
    {
        "content": "<p>Yes, I forgot the finite part.</p>",
        "id": 245991754,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626283460
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.nodup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unimportant</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">graph.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">g.unimportant</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.is_topo_over</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.nodup</span> <span class=\"bp\">∧</span> <span class=\"n\">l.pairwise</span> <span class=\"n\">g.has_path_from_to</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ho</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.is_topo_over</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pairwise_iff_nth_le.mp</span> <span class=\"n\">h.right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ho</span>\n</code></pre></div>",
        "id": 245992121,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626283635
    },
    {
        "content": "<p>Have you proved that <code>g.has_path_from_to</code> gives a partial order instance on <code>ι</code>?  If so, Yakov's code can be written as something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.is_topo_over</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">ι</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">l.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245992194,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626283677
    },
    {
        "content": "<p>It gives a partial order instance on the subtype given by elements of l</p>",
        "id": 245992280,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626283704
    },
    {
        "content": "<p>Because when you have a preorder (defined using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span>), mathlib automatically makes the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span></span></span></span> relation for you: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder.to_has_lt\">docs#preorder.to_has_lt</a></p>",
        "id": 245992405,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626283771
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">graph.induced_order</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∨</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 245992630,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626283862
    },
    {
        "content": "<p>I don't understand how ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">l.pairwise</span> <span class=\"n\">g.has_path_from_to</span>\n</code></pre></div>\n<p>... is the same as ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l.index_of</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The docs for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise\">docs#list.pairwise</a> state that \"<code>pairwise R l</code> means that all the elements with earlier indexes are <code>R</code>-related to all the elements with later indexes.\" But in the <code>∀</code>-based definition, <code>i</code> having a smaller index than <code>i'</code> doesn't necessarily mean that there's a path from <code>i</code> to <code>i'</code> (I think). It's rather the other way around.</p>",
        "id": 245992708,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626283898
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise_iff_nth_le\">docs#list.pairwise_iff_nth_le</a> is precisely what your <code>index_of</code> based statement implies.</p>",
        "id": 245992846,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626283942
    },
    {
        "content": "<p><code>index_of</code> is an iso iff the list is nodup. So I'd just use <code>pairwise</code> for your Prop def, and require <code>nodup</code> when you're proving things about it.</p>",
        "id": 245993071,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626284034
    },
    {
        "content": "<p>Hm, I still don't see the equivalence of the two definitions. I'll try to find a counterexample.</p>",
        "id": 245993432,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626284181
    },
    {
        "content": "<p>I see the issue here. You said <code>∀ i i' ∈ nat</code> while I am saying <code>∀ i i' ∈ l</code>.</p>",
        "id": 245993521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626284222
    },
    {
        "content": "<p>Oh that's just a typo ^^'</p>",
        "id": 245993558,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626284241
    },
    {
        "content": "<p>Do you agree that if <code>l.index_of i = n</code> then <code>l.nth n = some i</code>?</p>",
        "id": 245993756,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626284320
    },
    {
        "content": "<p>Yes :)</p>",
        "id": 245993827,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626284354
    },
    {
        "content": "<p>So we can just refer to the elements of <code>l</code> using <code>l.nth_le</code>. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise_iff_nth_le\">docs#list.pairwise_iff_nth_le</a> states that if a list is <code>pairwise R</code>, then <code>R (nth_le n _) (nth_le m _)</code> for <code>n &lt; m</code>. That means that for all elements <code>x y</code> in <code>l</code>, <code>R x y</code> if <code>x</code> comes before <code>y</code> in <code>l</code>.</p>",
        "id": 245994033,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626284437
    },
    {
        "content": "<p>As a counterexample: Let's assume <code>g : graph</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g.has_path_from_to</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span>\n<span class=\"n\">g.has_path_from_to</span> <span class=\"mi\">10</span> <span class=\"mi\">30</span>\n</code></pre></div>\n<p>Then by the <code>∀</code>-based definition both <code>[10, 20, 30]</code> and <code>[10, 30, 20]</code> are topos over <code>g</code>.<br>\nBut by the <code>pairwise</code>-based definition there is no topo over <code>g</code>.<br>\nIs this right?</p>",
        "id": 245994370,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626284591
    },
    {
        "content": "<p>Is your path transitive?</p>",
        "id": 245994548,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626284671
    },
    {
        "content": "<p>Yes, but the edges are directed :D <br>\nI.e. <code>g.has_path_from_to x y</code> doesn't imply <code>g.has_path_from_to y x</code>.</p>",
        "id": 245994586,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626284691
    },
    {
        "content": "<p><code>[10, 20, 30].pairwise R</code> means <code>10 R 20, 10 R 30, 20 R 30</code>. <code>pairwise</code> makes no requirement or statement about whether <code>R</code> is symmetric or not.</p>",
        "id": 245994919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626284863
    },
    {
        "content": "<p>Yes exactly, but in the case of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g.has_path_from_to</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span>\n<span class=\"n\">g.has_path_from_to</span> <span class=\"mi\">10</span> <span class=\"mi\">30</span>\n</code></pre></div>\n<p>The <code>20 R 30</code> part isn't true, but <code>[10, 20, 30]</code> should be valid.</p>",
        "id": 245995190,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626284991
    },
    {
        "content": "<p>Aha, I see, I had the implication the wrong way.</p>",
        "id": 245995368,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626285048
    },
    {
        "content": "<p>Thanks for taking the time anyway. Very much appreciated! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 245995478,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626285099
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_preorder\">docs#is_preorder</a>, when your operate on the subtype of elements of <code>l</code>?</p>",
        "id": 245995682,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626285188
    },
    {
        "content": "<p>or I guess even strong, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_partial_order\">docs#is_partial_order</a>?</p>",
        "id": 245995745,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626285217
    },
    {
        "content": "<p>I think again I have the implication wrong. So I think what you had originally is good, but should use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 245996508,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626285540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Ordered.20set/near/245996508\">said</a>:</p>\n<blockquote>\n<p>I think again I have the implication wrong. So I think what you had originally is good, but should use</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What's the benefit of ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">m</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>... over ...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l.index_of</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245998440,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626286457
    },
    {
        "content": "<p>The index_of version will be only useful if the list is nodup. Plus there are many more lemmas about <code>nth_le</code> than <code>index_of</code></p>",
        "id": 245998760,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626286623
    },
    {
        "content": "<p>The contravariant version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relator.lift_fun\">docs#relator.lift_fun</a> would be useful here</p>",
        "id": 246000018,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626287214
    },
    {
        "content": "<p>In the meantime, a convoluted way to say something about your list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">j</span> <span class=\"n\">j.is_lt</span><span class=\"o\">))</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">))</span> <span class=\"n\">id</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 246000508,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626287444
    },
    {
        "content": "<p>Your phrasing was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">g.has_path_from_to</span> <span class=\"bp\">⇒</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">list.index_of</span> <span class=\"n\">i</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">list.index_of</span> <span class=\"n\">i</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246001106,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626287750
    },
    {
        "content": "<p>It's too bad that <code>l.index_of</code> is inferred to do the wrong thing.</p>",
        "id": 246001127,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626287762
    }
]