[
    {
        "content": "<p>If have the state</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">to_bool</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n\n\n<p>is there some step to finish off this proof?</p>\n<p>I'm somewhat unclear what the type of <code>h</code> is exactly. All I really know is it has to do with coercions, but  what I've read hasn't provided an obvious answer and I'm still a bit unclear on the topic.</p>\n<p>I can try and work out a minimal example of how I ended up in this state if that would help (or if it seems like I've done something disastrous to wind up here, I can reformulate this to ask more generally about the problem I'm working on) . Sorry, still very new to this. </p>\n<p>Thanks!</p>",
        "id": 204378486,
        "sender_full_name": "Patrick O'Melveny",
        "timestamp": 1595207263
    },
    {
        "content": "<p>A minimal example would help for sure. You can try <code>unfold_coes at h</code> also</p>",
        "id": 204378661,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595207553
    },
    {
        "content": "<p><code>assumption_mod_cast</code> may do it, <code>norm_cast at h</code> may be interesting for the same reason</p>",
        "id": 204378804,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595207764
    },
    {
        "content": "<p>Your example doesn't have to be super minimal in order to be helpful; it's not much harder to execute and read the error state in 50 lines of code than 10</p>",
        "id": 204378815,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595207837
    },
    {
        "content": "<p>Sorry, it was actually pretty easy to get a mwe, please see:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">peano</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">peano</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">peano</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">peano</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">peano</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_positive</span> <span class=\"o\">:</span> <span class=\"n\">peano</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_is_not_positive</span> <span class=\"o\">:</span> <span class=\"n\">is_positive</span><span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_positive</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204379409,
        "sender_full_name": "Patrick O'Melveny",
        "timestamp": 1595208956
    },
    {
        "content": "<p>You probably want <code>Prop</code> rather than <code>bool</code>, or at least <code>tt</code>/<code>ff</code> rather than <code>true</code>/<code>false</code></p>",
        "id": 204379463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595209023
    },
    {
        "content": "<p>and <code>simpa using h</code> (or <code>simp at h, exact h</code>) will finish from there.</p>",
        "id": 204379469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595209052
    },
    {
        "content": "<p>anyways, in this situation <code>cases h</code> will work</p>",
        "id": 204379470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595209059
    },
    {
        "content": "<p>(but: what Reid said)</p>",
        "id": 204379475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595209064
    },
    {
        "content": "<p>Oh yeah, I see <code>Prop</code> was the way to go. Thank you!</p>",
        "id": 204379519,
        "sender_full_name": "Patrick O'Melveny",
        "timestamp": 1595209125
    },
    {
        "content": "<p>bool is for computation</p>",
        "id": 204379804,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595209612
    },
    {
        "content": "<p>I do tend to forget I'm not actually doing computation sometimes :) hopefully with some more practice</p>",
        "id": 204380361,
        "sender_full_name": "Patrick O'Melveny",
        "timestamp": 1595210503
    }
]