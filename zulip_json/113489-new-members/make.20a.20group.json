[
    {
        "content": "<p>Hello, </p>\n<p>I try to construct a group, and i have a problem i don't understand what i have to do :D </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">## This is the groupe AGL_1(R) : x ↦  ax + b invertible i.e with a inveritible !  The goal is to make</span>\n<span class=\"cm\">## into a groupe for composition !</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>  <span class=\"n\">mk</span> <span class=\"o\">{}</span> <span class=\"bp\">::</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">agl_1</span>\n<span class=\"kn\">section</span>\n  <span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"n\">def</span> <span class=\"n\">one</span>  <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span> <span class=\"kn\">end</span><span class=\"o\">}</span>\n    <span class=\"kn\">instance</span>  <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_eq_of_one</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_map&#39;</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">,</span><span class=\"n\">y1</span><span class=\"o\">,</span><span class=\"n\">certif_1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">a2</span><span class=\"o\">,</span><span class=\"n\">b2</span><span class=\"o\">,</span><span class=\"n\">y2</span><span class=\"o\">,</span><span class=\"n\">certif_2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">certif_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span>  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"n\">y2</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span>  <span class=\"n\">mul_assoc</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">y2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">certif_2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">certif_1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">b2</span> <span class=\"bp\">+</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y2</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span> <span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">certif_</span><span class=\"o\">},</span>\n <span class=\"kn\">end</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mul_map&#39;</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">certif</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"kn\">end</span> <span class=\"o\">}</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">mul_inv</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Rotation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span>   <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">certif</span><span class=\"o\">},</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul_one&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span><span class=\"n\">b1</span><span class=\"o\">,</span><span class=\"n\">y1</span><span class=\"o\">,</span><span class=\"n\">certif_1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">begin</span>  <span class=\"c1\">--- i thinck it&#39;s ok g * 1 cause has_instance mul !</span>\n    <span class=\"k\">have</span> <span class=\"n\">certif_a</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">certif_b</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span><span class=\"n\">zero_add</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">certif_y</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span> <span class=\"bp\">=</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">one_mul</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span>  <span class=\"n\">certif_certif</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span><span class=\"n\">one_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">---  I don&#39;t know what i have to do :D</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">agl_1</span>\n</pre></div>",
        "id": 191357562,
        "sender_full_name": "orlando",
        "timestamp": 1584812696
    },
    {
        "content": "<p>You could just ask for a: units R</p>",
        "id": 191357639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812786
    },
    {
        "content": "<p>Yes !</p>",
        "id": 191357672,
        "sender_full_name": "orlando",
        "timestamp": 1584812829
    },
    {
        "content": "<p>In your definition</p>",
        "id": 191357680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812841
    },
    {
        "content": "<p>I'm not at a computer right now, what is the goal you're stuck on?</p>",
        "id": 191357707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812873
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">fun_match</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">y1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">certif_1</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">certif_a</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n<span class=\"n\">certif_b</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span><span class=\"o\">,</span>\n<span class=\"n\">certif_y</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span> <span class=\"bp\">=</span> <span class=\"n\">y1</span><span class=\"o\">,</span>\n<span class=\"n\">certif_certif</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">y1</span>\n<span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">certif_1</span><span class=\"o\">}</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y1</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">certif_1</span><span class=\"o\">}</span>         <span class=\"bp\">&lt;&lt;</span> <span class=\"c1\">--- Here Kevin,</span>\n</pre></div>",
        "id": 191357782,
        "sender_full_name": "orlando",
        "timestamp": 1584812926
    },
    {
        "content": "<p>You know that all these basic ring theory equalities can be proved with the <code>ring</code> tactic?</p>",
        "id": 191357784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812930
    },
    {
        "content": "<p>You need to prove an <code>ext</code> lemma for your structure</p>",
        "id": 191357822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812978
    },
    {
        "content": "<p>I am on my phone at the minute so it's difficult for me to give precise links but take a look at data.conplex.basic in mathlib</p>",
        "id": 191357895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813017
    },
    {
        "content": "<p>For ring : Yes i know but here calculus are not too complicated so i do by hand for fun ! </p>\n<p>Ah ok, ext is the equality of two elements of the structure !</p>",
        "id": 191357905,
        "sender_full_name": "orlando",
        "timestamp": 1584813032
    },
    {
        "content": "<p>If my memory is correct, very soon after the definition of a complex number they prove that if two complex numbers have the same real and imaginary part then they are equal</p>",
        "id": 191357932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813063
    },
    {
        "content": "<p>If you apply the ext lemma then you will immediately get a bunch of trivial goals</p>",
        "id": 191357948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813099
    },
    {
        "content": "<p>Your memory is good ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">},</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">zr</span><span class=\"o\">,</span> <span class=\"n\">zi</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 191358006,
        "sender_full_name": "orlando",
        "timestamp": 1584813130
    },
    {
        "content": "<p>Take a look at the ext lemma for <code>units</code>. There is something interesting going on there</p>",
        "id": 191358012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813146
    },
    {
        "content": "<p>If you find the definition of units in mathlib it is probably one of the first lemmas afterwards</p>",
        "id": 191358026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813169
    },
    {
        "content": "<p>The interesting thing here is that you only need some of the structure fields to be equal in order to reduce that the terms are equal</p>",
        "id": 191358051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813217
    },
    {
        "content": "<p>A term of type <code>units R</code> is a and b and a proof that ab=1 and a proof that ba=1</p>",
        "id": 191358104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813266
    },
    {
        "content": "<p>But if two units have the same a, they are the same :-)</p>",
        "id": 191358109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813282
    },
    {
        "content": "<p>Your namespace is agl_1 but your structure is AGL_1</p>",
        "id": 191358230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813390
    },
    {
        "content": "<p>If you make them the same, then you will have access to \"dot notation\"</p>",
        "id": 191358255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813440
    },
    {
        "content": "<p><code>begin exact X end</code> can just be shortened to <code>X</code></p>",
        "id": 191358347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584813550
    },
    {
        "content": "<p>Yes i'm ok for the interesting thing ! </p>\n<p>For the shortened : the problem is if i don't write begin  ...  end, i d'ont see the goal in lean so i always start with begin end  !</p>",
        "id": 191359227,
        "sender_full_name": "orlando",
        "timestamp": 1584814546
    },
    {
        "content": "<p>Yes sure, but after you write <code>begin exact mul_one 1 end</code> you can just change it to <code> mul_one 1</code> :-)</p>",
        "id": 191359530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584814982
    },
    {
        "content": "<p><code>begin end</code> and <code>by</code>  turns Lean from term mode into tactic mode; <code>exact</code> turns Lean from tactic mode into term mode.</p>",
        "id": 191359537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815024
    },
    {
        "content": "<p>Orlando, you need the first lemma after the definition to be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">x_a</span> <span class=\"bp\">=</span> <span class=\"n\">y_a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">x_certif</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">y_y</span> <span class=\"n\">at</span> <span class=\"n\">x_certif</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">y_y</span><span class=\"o\">,</span> <span class=\"n\">y_certif</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_certif</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191359643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815207
    },
    {
        "content": "<p>Then, each time you need to prove equality of two elements of <code>AGL_1 R</code> you'll be able to use the <code>ext</code> tactic.</p>",
        "id": 191359657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815240
    },
    {
        "content": "<p>Next you need to get rid of <code>parameter</code>. There is a very simple rule deciding whether you want <code>variables</code> or <code>parameters</code>: you want <code>variables</code>.</p>",
        "id": 191359714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815282
    },
    {
        "content": "<p>Then your multiplication definition is wrong, for a very subtle reason. Using pattern matching from the beginning, you won't get that <code>(x*y).a = x.a*y.a</code> <em>by definition</em> (in the very specific type theory sense of this word). This is will bring hell on you.</p>",
        "id": 191359753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815394
    },
    {
        "content": "<p>By \"wrong\" Patricks means that <em>mathematically</em> it is correct, but if two things are equal because of a theorem, this is far less convenient than if they are equal by definition.</p>",
        "id": 191359830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815511
    },
    {
        "content": "<p>hum ,it's because i put   <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">y_2 y_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ?</p>",
        "id": 191359966,
        "sender_full_name": "orlando",
        "timestamp": 1584815680
    },
    {
        "content": "<p>No, it's because of your angle bracket pattern matching.</p>",
        "id": 191359990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815753
    },
    {
        "content": "<p>I cleaned up the beginning:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">## This is the groupe AGL_1(R) : x ↦  ax + b invertible i.e with a inveritible !  The goal is to make</span>\n<span class=\"cm\">## into a groupe for composition !</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">agl_1</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">x_a</span> <span class=\"bp\">=</span> <span class=\"n\">y_a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">x_certif</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">y_y</span> <span class=\"n\">at</span> <span class=\"n\">x_certif</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">y_y</span><span class=\"o\">,</span> <span class=\"n\">y_certif</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_certif</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">one</span>  <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span>  <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_eq_of_one</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_map&#39;</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"o\">,</span>\n  <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span> <span class=\"c1\">-- too lazy to retype the proof with dot notations</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">agl_1</span><span class=\"bp\">.</span><span class=\"n\">mul_map&#39;</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">certif</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span><span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">,</span>\n  <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">certif</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">agl_1</span><span class=\"bp\">.</span><span class=\"n\">mul_inv</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Rotation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span>   <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">certif</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul_one&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">agl_1</span>\n</pre></div>",
        "id": 191360034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815769
    },
    {
        "content": "<p>My advice is to very carefully compare, line by line, with your version. There are many small tricks to learn here.</p>",
        "id": 191360045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815794
    },
    {
        "content": "<p>I'm not saying anything about your global strategy, only locally cleaning things.</p>",
        "id": 191360050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584815817
    },
    {
        "content": "<p>Ok Patrick ! Thx !!!</p>",
        "id": 191360054,
        "sender_full_name": "orlando",
        "timestamp": 1584815823
    },
    {
        "content": "<p>For technical reasons, <code>λ ⟨a1,b1,y1,certif_1⟩ ...</code> is almost never right. I'm talking about <code>mul_map'</code>. Mathematically what you and Patrick did is the same, but Patrick's version is better for Lean for computer-science reasons.</p>",
        "id": 191360345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816247
    },
    {
        "content": "<p>Ok if a understand, i need to use a.a a.b a.y etc and not bracket !</p>",
        "id": 191360369,
        "sender_full_name": "orlando",
        "timestamp": 1584816317
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_map&#39;</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"o\">,</span>\n  <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n        <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I filled in a sorry in a fairly efficient way</p>",
        "id": 191360448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270476\">orlando</span> <a href=\"#narrow/stream/113489-new-members/topic/make.20a.20group/near/191360369\" title=\"#narrow/stream/113489-new-members/topic/make.20a.20group/near/191360369\">said</a>:</p>\n<blockquote>\n<p>Ok if a understand, i need to use a.a a.b a.y etc and not bracket !</p>\n</blockquote>\n<p>In your definitions, it is better.</p>",
        "id": 191360467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℂ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">complex</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">},</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">zr</span><span class=\"o\">,</span> <span class=\"n\">zi</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_bad</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">y1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_good</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"n\">w</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">bad</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">100</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">add_bad</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_bad_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- what now?</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">a_re</span> <span class=\"bp\">+</span> <span class=\"n\">b_re</span> <span class=\"bp\">+</span> <span class=\"n\">c_re</span> <span class=\"bp\">=</span> <span class=\"n\">a_re</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b_re</span> <span class=\"bp\">+</span> <span class=\"n\">c_re</span><span class=\"o\">),</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">a_im</span> <span class=\"bp\">+</span> <span class=\"n\">b_im</span> <span class=\"bp\">+</span> <span class=\"n\">c_im</span> <span class=\"bp\">=</span> <span class=\"n\">a_im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b_im</span> <span class=\"bp\">+</span> <span class=\"n\">c_im</span><span class=\"o\">),</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">bad</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">good</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">100000</span><span class=\"o\">]</span> <span class=\"c1\">-- new addition will be used instead of old one</span>\n<span class=\"kn\">instance</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_good_add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">add_good</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_good_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">),</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">),</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">good</span>\n</pre></div>\n\n\n<p>There is one simple reason why using dot is better than using bracket: I don't have to do <code>cases</code> lots of times in my proofs.</p>",
        "id": 191361092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584817348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270476\">orlando</span> <a href=\"#narrow/stream/113489-new-members/topic/make.20a.20group/near/191359227\" title=\"#narrow/stream/113489-new-members/topic/make.20a.20group/near/191359227\">said</a>:</p>\n<blockquote>\n<p>Yes i'm ok for the interesting thing ! </p>\n<p>For the shortened : the problem is if i don't write begin  ...  end, i d'ont see the goal in lean so i always start with begin end  !</p>\n</blockquote>\n<p>If you write <code>:= _</code>, then you can see the goal if you put your cursor on the <code>_</code>. This is a way to write things without <code>begin ... end</code>. Just always keep a <code>_</code> to the right of your cursor.</p>",
        "id": 191361122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584817423
    },
    {
        "content": "<p>In fact with the good addition I can just do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_good_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">add_assoc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191361129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584817438
    },
    {
        "content": "<p>and this is very close to a way a mathematician thinks about the proof: \"suffices to check on real and imaginary parts, where it follows from associativity of addition on the reals\"</p>",
        "id": 191361202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584817515
    },
    {
        "content": "<p>I do the associativity <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">## This is the groupe AGL_1(R) : x ↦  ax + b invertible i.e with a inveritible !  The goal is to make</span>\n<span class=\"cm\">## into a groupe for composition !</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certif</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AGL_1</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">g1</span> <span class=\"bp\">=</span> <span class=\"n\">g2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span><span class=\"o\">,</span> <span class=\"c1\">--- it&#39;s ok ? just don&#39;t use Bracket ?</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g1</span><span class=\"o\">,</span>                                         <span class=\"c1\">---  difficult i have to analyse !</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g2</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">g1_a</span> <span class=\"bp\">=</span> <span class=\"n\">g2_a</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">g1_certif</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">g2_y</span> <span class=\"n\">at</span> <span class=\"n\">g1_certif</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">g2_y</span><span class=\"o\">,</span> <span class=\"n\">g2_certif</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g1_certif</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span>  <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span>  <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_eq_of_one</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_map&#39;</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g1</span> <span class=\"n\">g2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"o\">,</span>\n  <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">y</span><span class=\"o\">),</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">certif</span><span class=\"o\">,</span><span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">certif</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">one_mul</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">AGL_1</span><span class=\"bp\">.</span><span class=\"n\">mul_map&#39;</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">a_comp</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"o\">:=</span>  <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">b_comp</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">certif</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>    <span class=\"c1\">--- change here ?</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span><span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">,</span>\n  <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">certif</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">AGL_1</span><span class=\"bp\">.</span><span class=\"n\">mul_inv</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Rotation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span>   <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AGL_1</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">certif</span> <span class=\"o\">:=</span> <span class=\"n\">certif</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul_one&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">mul_assoc&#39;</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"n\">g3</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g3</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g2</span> <span class=\"bp\">*</span> <span class=\"n\">g3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a_comp</span><span class=\"o\">,</span><span class=\"n\">a_comp</span><span class=\"o\">,</span>  <span class=\"n\">a_comp</span> <span class=\"n\">g1</span> <span class=\"o\">(</span><span class=\"n\">g2</span> <span class=\"bp\">*</span><span class=\"n\">g3</span><span class=\"o\">),</span> <span class=\"n\">a_comp</span> <span class=\"n\">g2</span> <span class=\"n\">g3</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">b_comp</span><span class=\"o\">,</span><span class=\"n\">a_comp</span><span class=\"o\">,</span><span class=\"n\">b_comp</span><span class=\"o\">,</span><span class=\"n\">b_comp</span><span class=\"o\">,</span><span class=\"n\">b_comp</span><span class=\"o\">],</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">AGL_1</span>\n</pre></div>",
        "id": 191363643,
        "sender_full_name": "orlando",
        "timestamp": 1584821448
    },
    {
        "content": "<p>I didn't notice earlier, but you have definitions that should be lemmas.</p>",
        "id": 191364472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584822808
    },
    {
        "content": "<p>I think <code>a_comp</code> and <code>b_comp</code> should be simp lemmas. See if you can train simp to solve some of these things. And you should now make a group instance for your structure I guess</p>",
        "id": 191364473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584822825
    },
    {
        "content": "<p>Going a bit along the Kevin-like automation path can be a fun path too. Have a look at:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">one_a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">one_b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">a_comp</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"o\">:=</span>  <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">b_comp</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">g1</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">AGL_ring</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_a</span><span class=\"o\">,</span> <span class=\"n\">one_b</span><span class=\"o\">,</span> <span class=\"n\">a_comp</span><span class=\"o\">,</span> <span class=\"n\">b_comp</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_interactive</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">AGL_ring</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_one&#39;</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">AGL_ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_assoc&#39;</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"n\">g3</span> <span class=\"o\">:</span> <span class=\"n\">AGL_1</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">g2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g3</span> <span class=\"bp\">=</span> <span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g2</span> <span class=\"bp\">*</span> <span class=\"n\">g3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">AGL_ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191364753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584823249
    },
    {
        "content": "<p>Note you can write <code>by ext ; AGL_ring</code> to save some space.</p>",
        "id": 191365989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584825232
    }
]