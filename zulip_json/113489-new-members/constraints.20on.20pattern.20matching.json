[
    {
        "content": "<p>Hi all,</p>\n<p>Is there a way to apply additional propositional constraints on pattern matching? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">finMat</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>How should I replace the <code>if ... then .. else</code> part with actual Lean code?</p>\n<p>Thanks!</p>",
        "id": 266907552,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1641370198
    },
    {
        "content": "<p>I think Lean has <code>if...then...else</code>?</p>",
        "id": 266907908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641370522
    },
    {
        "content": "<p>Maybe you'll consider <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite\">docs#ite</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dite\">docs#dite</a> actual Lean code?</p>",
        "id": 266907993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641370587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/constraints.20on.20pattern.20matching/near/266907908\">said</a>:</p>\n<blockquote>\n<p>I think Lean has <code>if...then...else</code>?</p>\n</blockquote>\n<p>Lol thanks <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> that was unexpected</p>",
        "id": 266908120,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1641370713
    },
    {
        "content": "<p>By the way, the below definition fail with <code>polyId is noncomputable</code>, may I ask what exactly does <code>noncomputable</code> mean? I vaguely think it's connected with axiom of choice ... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">finPolyMat</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">polyId</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">finPolyMat</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 266908465,
        "sender_full_name": "Shi Zhengyu",
        "timestamp": 1641370974
    },
    {
        "content": "<p>It means Lean can't generate bytecode (aka computation instructions) for it. So you can't run the code but you can still prove stuff about it.</p>",
        "id": 266908961,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641371235
    },
    {
        "content": "<p>Given that Lean can generate bytecode for all axioms except the axiom of choice (and <code>sorry</code> but you won't use it in final code), noncomputability is indeed linked to using the axiom of choice.</p>",
        "id": 266909064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641371304
    }
]