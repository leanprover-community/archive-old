[
    {
        "content": "<p>By failing to search sufficiently I accidentally re-proved a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.prod_add_index\">docs#finsupp.prod_add_index</a>.  My version differs by: </p>\n<ul>\n<li>requiring only <code>[add_zero_class M]</code> rather than <code>[add_comm_monoid M]</code></li>\n<li>requiring only <code>h_zero : ∀ a ∈ f.support ∪ g.support, h a 0 = 1</code> rather than <code>h_zero : ∀a, h a 0 = 1</code></li>\n<li>(also, the proof is about 30% shorter)</li>\n</ul>\n<p>Is this variant something worth having in mathlib?  If so, what would be a good name for it?  (We already have one variant called <code>prod_add_index'</code>).  </p>\n<p>For my current purposes I could use the original <code>prod_add_index</code> perfectly happily, so it doesn't much matter if this variant is too small a change to be worth including.</p>",
        "id": 267461070,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641831611
    },
    {
        "content": "<p>It seems like your version strictly dominates the current one, so you could substitute it! However, I'm wondering how you can do without commutativity.</p>",
        "id": 267461559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641831828
    },
    {
        "content": "<p>Here's the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_add_index''</span> <span class=\"o\">[</span><span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span> <span class=\"bp\">∪</span> <span class=\"n\">g.support</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f.prod</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g.prod</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp.prod_of_support_subset</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">subset_union_left</span> <span class=\"n\">_</span> <span class=\"n\">g.support</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">h_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">finsupp.prod_of_support_subset</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">subset_union_right</span> <span class=\"n\">f.support</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">h_zero</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span><span class=\"n\">finset.prod_mul_distrib</span><span class=\"o\">,</span>\n      <span class=\"n\">finsupp.prod_of_support_subset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">finsupp.support_add</span> <span class=\"n\">h</span> <span class=\"n\">h_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finset.prod_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">h_add</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267463002,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641832411
    },
    {
        "content": "<p>Is there any reason to worry that this version might break the <code>@[to_additive]</code> that the current version has?  (I still don't have a good sense of how that particular magic works.)</p>",
        "id": 267463346,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641832553
    },
    {
        "content": "<p>I guess the easiest way to find out is to try it and see what falls over!</p>",
        "id": 267463610,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641832638
    },
    {
        "content": "<p>can you post a full mwe? i seem to get no union instance on finset, which is odd to me</p>",
        "id": 267463821,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641832701
    },
    {
        "content": "<p>oh, decidable_eq \\a</p>",
        "id": 267463871,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641832719
    },
    {
        "content": "<p>yeah, <code>to_additive</code> works fine! the way <code>to_additive</code> works is that it replaces the multiplicative version of every proof  in the full actual proof term with the additive version - in particular, it doesn't mess with tactics, which means that it is usually very stable</p>",
        "id": 267464875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641833069
    },
    {
        "content": "<p>Hmm, in a mwe I'm getting the same complaint of no <code>has_union (finset α)</code>, but it works fine in place in <code>data/finsupp/basic</code>.  The output of <code>#where</code> just before the theorem statement doesn't include <code>decidable_eq α</code>.</p>",
        "id": 267465688,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641833394
    },
    {
        "content": "<p>finsupp has <code>open_locale classical</code> on, which I forgot at the time</p>",
        "id": 267466332,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641833621
    },
    {
        "content": "<p>the theory is like in some ways decidable but at the time it was thought mathematicians didn't want to bother with it</p>",
        "id": 267466414,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641833644
    },
    {
        "content": "<p>Ah, that's what I missed.</p>",
        "id": 267466417,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641833644
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11353\">#11353</a></p>",
        "id": 267466484,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641833672
    },
    {
        "content": "<p>So if I wanted to replace the original <code>finsupp.prod_add_index</code> with this new version I should (a) find all instances of the original (in this file and elsewhere), (b) replace them with my new <code>prod_add_index''</code> and fix the proofs as required, and then finally (c) rename throughout — is that right?</p>",
        "id": 267467276,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641833947
    },
    {
        "content": "<p>i'd just overwrite the old <code>prod_add_index</code> and look for each time it's mentioned; it should be pretty painless to do this refactor</p>",
        "id": 267467943,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641834168
    },
    {
        "content": "<p>maybe the unused arguments linter will go off at some point after because some other lemmas only depended on some things for this lemma, and so on</p>",
        "id": 267468003,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641834192
    },
    {
        "content": "<p>Hmm, I'm following the more cautious path that I outlined above and I'm already running into trouble at the first use.  </p>\n<p>In <code>prod_finset_sum_index</code> I've changed </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod_add_index</span> <span class=\"n\">h_zero</span> <span class=\"n\">h_add</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod_add_index''</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h_add</span>\n</code></pre></div>\n<p>This works to prove the lemma as stated, but <code>@[to_additive]</code> is raising a complaint.  (If I comment out <code>@[to_additive]</code> and put <code>#exit</code> immediately after the lemma, everything is fine.)</p>",
        "id": 267470085,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641835197
    },
    {
        "content": "<p>Specifically: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span> <span class=\"bp\">...</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">_inst_2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">comm_monoid</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 267470223,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641835259
    },
    {
        "content": "<p>You'll also need to apply <code>@[to_additive]</code> to proad_add_index'' if a proof using it has to_additive applied</p>",
        "id": 267471680,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641835941
    },
    {
        "content": "<p>Most of the time you see a to_additive error like that its just because one of the things used in the proof needs to_additivizing too</p>",
        "id": 267471803,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641835992
    },
    {
        "content": "<p>Stepping through the 3-step process outlined above, I've now replaced every use of <code>prod_add_index</code> with my new <code>prod_add_index''</code> (and similarly for <code>sum_add_index</code>).  In some places this replacement has gone through with no problems.  However, in some places I've needed to change something of the form <code>prod_add_index h1 h2</code> to the more verbose <code>prod_add_index'' (λ a ha, h1 a) h2</code> (where <code>h1 : ∀a, h a 0 = 1</code> and my new variant wants <code>h_zero : ∀ a ∈ f.support ∪ g.support, h a 0 = 1</code>).  </p>\n<p>Is there a nicer way to do this?  Or should I just keep the original variant of <code>prod_add_index</code> as an alternative (proved as a one-liner in terms of <code>prod_add_index''</code>) and then in each case use whichever version is more convenient?</p>",
        "id": 268150097,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642285078
    },
    {
        "content": "<p>Often that means a downstream lemma could also have its hypotheses weakened</p>",
        "id": 268153635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642290140
    },
    {
        "content": "<p>Can you link to some examples of where that happens?</p>",
        "id": 268153639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642290168
    },
    {
        "content": "<p>That's an interesting idea, thanks!</p>",
        "id": 268189074,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642344170
    },
    {
        "content": "<p>Searching through the Files changed page of <a href=\"https://github.com/leanprover-community/mathlib/pull/11353\">#11353</a> for the search term <code>add_index'' (λ</code> gives 9 matches.  For most of these I don't see a natural choice of a subset to which <code>a</code> could be restricted, or else it doesn't look useful to do so.</p>",
        "id": 268189159,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642344280
    },
    {
        "content": "<p>Is there something useful that could be done with <code>polynomial.sum_add_index</code> in <code>data/polynomial/basic</code>?</p>",
        "id": 268189181,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642344337
    },
    {
        "content": "<p>Oh, I suppose another separate thing I could look into would be weakening the requirement of <code>[add_comm_monoid M]</code> (used in the original) to <code>[add_zero_class M]</code>.</p>",
        "id": 268189438,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642344658
    },
    {
        "content": "<p>After a long delay I think this is ready for review (<a href=\"https://github.com/leanprover-community/mathlib/pull/11353\">#11353</a>).  I ended up replacing <code>prod_add_index</code> with the new version with weaker premises, and keeping the original as <code>prod_add_index'</code>.  Most of the other edits are places where it was more convenient to keep using the old (now renamed) lemma.</p>",
        "id": 271980443,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644934973
    },
    {
        "content": "<p>This probably ended up being more work that it was worth.  I should have followed <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>'s advice and just replaced the lemma and fixed whatever broke, rather than trying to carefully manage the change-over.</p>",
        "id": 271980812,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644935098
    }
]