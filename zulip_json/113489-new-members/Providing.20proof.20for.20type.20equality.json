[
    {
        "content": "<p>Continuing with TPIL exercises. I couldn't find in the documentation the way to provide proof of <code>add_comm, add_assoc</code> to fix the error I get from my definitions.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">xs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">niverse</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">nil</span>        <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"n\">ts</span><span class=\"o\">)</span>    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">ts</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"mi\">0</span>     <span class=\"n\">nil</span>     <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"n\">xs</span>      <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span>     <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>      <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">xs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">vector</span>\n</code></pre></div>",
        "id": 199908154,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591377631
    },
    {
        "content": "<p>I guess changing <code>| n    (1+m) ....</code> works. Nope, that doesn't.</p>",
        "id": 199908274,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591377699
    },
    {
        "content": "<p>This works, but I am not sure how to avoid tactic mode for it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"mi\">0</span>     <span class=\"n\">nil</span>     <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"n\">xs</span>      <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span>     <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>      <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">xs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199909496,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591378374
    },
    {
        "content": "<p>Avoid the extra case distinction (the first case is redundant), then induct on whichever list matches the variable that <code>+</code> inducts on.</p>",
        "id": 199909652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591378462
    },
    {
        "content": "<p>I'm not sure what you mean by <code>the variable that + inducts on</code>. If I induct on <code>n</code>, then I have to prove that <code>vector (0+m) ~ vector m</code>, and if I induct on <code>m</code>, I have to prove that <code>vector (n + (m + 1)) ~ vector (n + 1 + m)</code></p>",
        "id": 199911243,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591379377
    },
    {
        "content": "<p>The TPIL exercise hints that I'll need an auxiliary function to define <code>append</code>, so it seemed to me that <code>extend</code> would be the auxiliary. But I guess I could define <code>append (x::xs) ys = x::(append xs ys)</code>, which doesn't use extend. Still needs something to prove the type equality.</p>",
        "id": 199911419,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591379469
    },
    {
        "content": "<p>Oh, your definition is also backwards (doesn't match <code>+</code>).</p>",
        "id": 199911443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Providing.20proof.20for.20type.20equality/near/199911419\">said</a>:</p>\n<blockquote>\n<p>But I guess I could define <code>append (x::xs) ys = x::(append xs ys)</code></p>\n</blockquote>\n<p>Yes, I assumed you were doing this without looking closely.</p>",
        "id": 199911482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379509
    },
    {
        "content": "<p>I might be confused about this, since I never remember how <code>+</code> is defined.</p>",
        "id": 199911683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379611
    },
    {
        "content": "<p>Well, you just take <code>a</code> apples, and then <code>b</code> apples, and you put them together, and then you have <code>a + b</code> apples.</p>",
        "id": 199911792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591379659
    },
    {
        "content": "<p>This works, but now I wonder what the auxiliary function was:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">m</span>     <span class=\"n\">nil</span>     <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199911859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591379697
    },
    {
        "content": "<p>I can see how my original definition was O(n^2).</p>",
        "id": 199911909,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591379722
    },
    {
        "content": "<p>I guess the point is you end up with <code>m+n</code> this way, not the more obvious <code>n+m</code>. Maybe your original approach was correct. Why do you say you have to prove <code>vector (n + (m + 1)) ~ vector (n + 1 + m)</code>?</p>",
        "id": 199912136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379817
    },
    {
        "content": "<p>it looks like you would have to prove <code>n + (m + 1) = (n + m) + 1</code>, but that one is by definition</p>",
        "id": 199912174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379838
    },
    {
        "content": "<p>Ohhh your definition is still wrong, in another way.</p>",
        "id": 199912196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379852
    },
    {
        "content": "<p>Well, not wrong, but not adapted to the type you want to give it.</p>",
        "id": 199912217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379862
    },
    {
        "content": "<p>If you want to get <code>vector α n -&gt; vector α m -&gt; vector α (n+m)</code>, then you should think about the definition of <code>n+m</code> and how you can make a recursive definition that matches it. You do need <code>extend</code>.</p>",
        "id": 199912471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591379974
    },
    {
        "content": "<p>The definition of <code>n+m</code> is <code>succ ^ m (n)</code>. So I need to extend <code>xs</code> <code>m</code> times.</p>",
        "id": 199922563,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591384921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Providing.20proof.20for.20type.20equality/near/199912217\">said</a>:</p>\n<blockquote>\n<p>Well, not wrong, but not adapted to the type you want to give it.</p>\n</blockquote>\n<p>You're talking about the definition of <code>append</code> that uses <code>extend</code>, correct?</p>",
        "id": 199923978,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591385717
    },
    {
        "content": "<p>I think I am making this more complicated than necessary. Using a combo of reverse and extend lets me keep <code>n -&gt; m -&gt; (n+m)</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">nil</span>        <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"n\">ts</span><span class=\"o\">)</span>    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">ts</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">m</span>     <span class=\"n\">nil</span>     <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">ys</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>     <span class=\"n\">xs</span>     <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>     <span class=\"n\">ys</span>  <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">reverse</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">append&#39;</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199924670,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591386103
    },
    {
        "content": "<p>In any case, let's say I have a wrong definition for <code>append</code> like the following (even though I don't see what's obviously wrong):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>     <span class=\"n\">xs</span>     <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>     <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">append&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">xs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n<span class=\"c1\">-- equation type mismatch, term</span>\n<span class=\"c1\">--   append&#39;&#39; (extend xs y) ys</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   vector α (n + 1 + m)</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   vector α (n + (m + 1))</span>\n</code></pre></div>\n\n\n<p>Right now I get an error. I can prove the type equality in tactic mode. How would one do this in the equation compiler?</p>",
        "id": 200002618,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591495359
    },
    {
        "content": "<p>the equation compiler itself won't help, but you can use <code>cast</code> to coerce the value across the type equality</p>",
        "id": 200002632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591495410
    },
    {
        "content": "<p>or <code>\\t</code></p>",
        "id": 200002634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591495427
    },
    {
        "content": "<p>Usually if you need to do this <code>rw</code> is more reliable though</p>",
        "id": 200002672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591495446
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>     <span class=\"n\">xs</span>     <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>     <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add_eq_succ_add</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">append&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">xs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ys</span>\n</code></pre></div>",
        "id": 200002746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591495620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>     <span class=\"n\">xs</span>     <span class=\"n\">nil</span>     <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>     <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_add_eq_succ_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">append&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">xs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200002753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591495657
    },
    {
        "content": "<p>That said, these are the foothills of DTT hell so you should really consider other options that don't involve <code>cast</code> or equivalent mechanisms if you can at all avoid it</p>",
        "id": 200002817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591495766
    }
]