[
    {
        "content": "<p>I am new to lean .Who can tell me an example , in which we  input two matrices and multiply them using standard library  as in python ? A=Matrix([[1,2],[3,4]]),B=Matrix ([[1,1],[0,0]]),A*B=? in lean .Thanks !</p>",
        "id": 242761081,
        "sender_full_name": "li sheng",
        "timestamp": 1623774623
    },
    {
        "content": "<p>Is there anyone who will give me  an example of matrix multiplication ? Input two specific matrices and multiply them. Thanks!</p>",
        "id": 242762599,
        "sender_full_name": "li sheng",
        "timestamp": 1623775303
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul\">docs#matrix.mul</a></p>",
        "id": 242762845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623775383
    },
    {
        "content": "<p>Aka <code>M ⬝ N</code></p>",
        "id": 242762891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623775402
    },
    {
        "content": "<p>Is there anyone who will give me  an example of matrix multiplication ? Input two specific matrices and multiply them. Thanks!</p>",
        "id": 242763036,
        "sender_full_name": "li sheng",
        "timestamp": 1623775453
    },
    {
        "content": "<p>If you're brand new to lean that might not help all that much - if so, can you elaborate on your question a little?</p>",
        "id": 242763412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623775629
    },
    {
        "content": "<p>Oh i see there's a copy of this thread in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> - can an admin move this one?</p>",
        "id": 242763592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623775697
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Matrix.20operations\">#general &gt; Matrix operations</a> by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span></p>",
        "id": 242763655,
        "sender_full_name": "Notification Bot",
        "timestamp": 1623775731
    },
    {
        "content": "<p>The matrix library is not optimized for these purposes, but you can do a bit of computing with them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"c1\">-- There's no `repr` defined for matrices, so the following line outputs a big pile of unreadable syntax.</span>\n<span class=\"c1\">-- #eval ((![![1, 2], ![3, 4]] ⬝ ![![1, -3], ![-2, 4]]) : matrix _ _ ℤ)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -3</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 5</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -5</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 7</span>\n</code></pre></div>",
        "id": 242765455,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623776574
    },
    {
        "content": "<p>You can fix the \"no <code>has_repr</code>\" issue as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">repr</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"s2\">\"![\"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">string.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">((</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))))</span> <span class=\"bp\">++</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- ![![-3, 5], ![-5, 7]]</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -3</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 5</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -5</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">⬝</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]])</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 7</span>\n</code></pre></div>",
        "id": 242766110,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623776849
    },
    {
        "content": "<p>This looks ugly! I think there should have a better one in lean.</p>",
        "id": 242766391,
        "sender_full_name": "li sheng",
        "timestamp": 1623776965
    },
    {
        "content": "<p>Can we add those <code>has_repr</code> to data/matrix/notation.lean?</p>",
        "id": 242766395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623776968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418446\">li sheng</span> <a href=\"#narrow/stream/113489-new-members/topic/Matrix.20operations/near/242766391\">said</a>:</p>\n<blockquote>\n<p>This looks ugly! I think there should have a better one in lean.</p>\n</blockquote>\n<p>Feel free to implement your own if you think it's ugly! Just replace the <code>(infer_instance : has_repr (fin m → fin n → α))</code> line with <code>{ repr := λ M, your_string_goes_here }</code> and have fun :)</p>",
        "id": 242766686,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623777083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Matrix.20operations/near/242766395\">said</a>:</p>\n<blockquote>\n<p>Can we add those <code>has_repr</code> to data/matrix/notation.lean?</p>\n</blockquote>\n<p>Sure, I'll make a PR after dinner!</p>",
        "id": 242766726,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623777101
    },
    {
        "content": "<p><code>!![a, b; c, d]</code> might be a slightly less ugly notation for matrices, inspired by Matlab. I don't know how hard it is to tell lean how to use that.</p>",
        "id": 242767054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623777239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Thank you for your solution,I will try it and find other solutions!</p>",
        "id": 242767540,
        "sender_full_name": "li sheng",
        "timestamp": 1623777474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"418446\">@li sheng</span>, what specifically is it you find ugly?</p>",
        "id": 242768841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623777943
    },
    {
        "content": "<p>What would you like to be able to write instead?</p>",
        "id": 242768942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623777968
    },
    {
        "content": "<p>I want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul\">docs#matrix.mul</a>! !![1,2;3,4] looks nice !</p>",
        "id": 242770539,
        "sender_full_name": "li sheng",
        "timestamp": 1623778572
    },
    {
        "content": "<p>The snippets above use <code>matrix.mul</code> already.</p>",
        "id": 242770929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623778748
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul\">docs#matrix.mul</a> provides us with plenty of functions,we can \"encapsulate\" them for convenient computations.</p>",
        "id": 242771395,
        "sender_full_name": "li sheng",
        "timestamp": 1623778926
    },
    {
        "content": "<p>The nice thing about the current matrix notation is that it supports 1, 2, 3,... dimensional \"matrices\".</p>",
        "id": 242771440,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623778953
    },
    {
        "content": "<p>Semicolons limit you to 2D</p>",
        "id": 242771520,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623778991
    },
    {
        "content": "<p>I suggested <code>!!</code> because it doesn't rule out the existing notation</p>",
        "id": 242775619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623780812
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/issues/7953\">#7953</a>.</p>",
        "id": 242780904,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623782957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418446\">li sheng</span> <a href=\"#narrow/stream/113489-new-members/topic/Matrix.20operations/near/242761081\">said</a>:</p>\n<blockquote>\n<p>I am new to lean .Who can tell me an example , in which we  input two matrices and multiply them using standard library  as in python ? A=Matrix([[1,2],[3,4]]),B=Matrix ([[1,1],[0,0]]),A*B=? in lean .Thanks !</p>\n</blockquote>\n<p>I'm afraid you'll be very disappointed by Lean if this is your first question. In an ideal world, a proof assistant would be able to do everything a computer algebra system such as Sage is doing and then add proofs on top of that. Unfortunately we are <em>very</em> far away from this. Up to now these are almost disjoint worlds. Use Sage for computations and Lean for proofs.</p>",
        "id": 242785715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623784980
    },
    {
        "content": "<p>Yes -- Lean is not a good \"computer\" at the minute -- it is designed to prove theorems, not do computations.</p>",
        "id": 242806325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623795058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Matrix.20operations/near/242767054\">said</a>:</p>\n<blockquote>\n<p><code>!![a, b; c, d]</code> might be a slightly less ugly notation for matrices, inspired by Matlab. I don't know how hard it is to tell lean how to use that.</p>\n</blockquote>\n<p>I implemented <code>!ₘ[1, 2; 3, 4]</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/14665\">#14665</a></p>",
        "id": 285653628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654854712
    },
    {
        "content": "<p>This PR has now split into <a href=\"https://github.com/leanprover-community/mathlib/pull/14991\">#14991</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/14992\">#14992</a>, which respectively add <code>!![a, b; c, d]</code> notation (without the type cast) and type casting  as <code>matrix.of ![![a, b], ![b, c]]</code> (without the <code>!!</code> notation). I'll fix the conflicts in whichever one doesn't go in first.</p>",
        "id": 288552492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657037320
    }
]