[
    {
        "content": "<p>How do I most easily summon the instance giving lexicographic ordering on a tuple? I want <code>has_le (ℕ × ℕ × ℕ)</code>.</p>",
        "id": 159827209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551581591
    },
    {
        "content": "<p>Do we not have <code>preorder (A \\times B)</code> given <code>preorder A</code> and <code>preorder B</code>? I'm having trouble finding it.</p>",
        "id": 159830402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551587129
    },
    {
        "content": "<p>I guess (a) preorder is a class and (b) there is probably more than one kind of preorder on A x B that one might want to consider in general, so maybe putting one in mathlib is a dangerous game :-) OTOH wasn't there a thread about this one where Sebastian posted a one-liner just saying \"oops\" with a link to a howler in core Lean? Maybe that was a preorder on list X given a preorder on X though.</p>",
        "id": 159839590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551604315
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/string_lt.20doesn't.20match.20its.20spec/near/128392824\" title=\"#narrow/stream/113488-general/topic/string_lt.20doesn't.20match.20its.20spec/near/128392824\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/string_lt.20doesn't.20match.20its.20spec/near/128392824</a> yeah it was lists.</p>",
        "id": 159839644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551604391
    },
    {
        "content": "<p>I think the only lexicographic order in core is on <code>psigma</code> and not pairs: <code>psigma.lex</code> <a href=\"https://github.com/leanprover/lean/blob/cbd2b6686ddb566028f5830490fe55c0b3a9a4cb/library/init/data/sigma/lex.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/cbd2b6686ddb566028f5830490fe55c0b3a9a4cb/library/init/data/sigma/lex.lean\">https://github.com/leanprover/lean/blob/cbd2b6686ddb566028f5830490fe55c0b3a9a4cb/library/init/data/sigma/lex.lean</a></p>",
        "id": 159840010,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1551605049
    },
    {
        "content": "<p>preorder on product:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/fb8001d6fd786a67e01d022241f01b7017ae0825/src/order/basic.lean#L217\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/fb8001d6fd786a67e01d022241f01b7017ae0825/src/order/basic.lean#L217\">https://github.com/leanprover-community/mathlib/blob/fb8001d6fd786a67e01d022241f01b7017ae0825/src/order/basic.lean#L217</a></p>",
        "id": 159840304,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551605674
    },
    {
        "content": "<p>(found with <code>grep -r \"instance.*preorder\" .</code>)</p>",
        "id": 159840370,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551605784
    },
    {
        "content": "<p>Ok, so it seems the lexicographic orderings are not there. And yes, as Kevin says, there shouldn't be a global instance for them.</p>",
        "id": 159840373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551605807
    },
    {
        "content": "<p>Nevertheless, it seems like they should be made available in mathlib?</p>",
        "id": 159840376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551605821
    },
    {
        "content": "<p>I've since implemented it this afternoon, so I can PR it if desired.</p>",
        "id": 159840390,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551605848
    },
    {
        "content": "<p>of course we have lexicographic ordering, what are you talking about</p>",
        "id": 159840574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606215
    },
    {
        "content": "<p>Where is it?</p>",
        "id": 159840579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551606236
    },
    {
        "content": "<p>It's in core</p>",
        "id": 159840620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606248
    },
    {
        "content": "<p><code>prod.lex</code></p>",
        "id": 159840623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606250
    },
    {
        "content": "<p>That's a good name for it</p>",
        "id": 159840624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551606262
    },
    {
        "content": "<p>Are you talking about the one in <code>wf.lean</code>?</p>",
        "id": 159840691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551606368
    },
    {
        "content": "<p>yes</p>",
        "id": 159840693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606375
    },
    {
        "content": "<p>there's not even a proof that it's a preorder?</p>",
        "id": 159840699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551606393
    },
    {
        "content": "<p>I think we want a bit more than that. :-)</p>",
        "id": 159840722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551606459
    },
    {
        "content": "<p>you can be sure that it's there because <code>ordinal</code> uses it</p>",
        "id": 159840785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606542
    },
    {
        "content": "<p>it's <code>prod.lex.is_well_order</code> in <code>order.basic</code></p>",
        "id": 159840796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606581
    },
    {
        "content": "<p>(sadly it uses the other hierarchy)</p>",
        "id": 159840800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606588
    },
    {
        "content": "<p>Currently searching for the word \"lexicographic\" in mathlib points to well_founded_recursion.md, and data/list/basic.lean.</p>",
        "id": 159840867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551606678
    },
    {
        "content": "<p>I'll add it to my list of things for students to do, I guess.</p>",
        "id": 159840872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551606693
    },
    {
        "content": "<p><code>lex</code>.</p>",
        "id": 159840873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551606703
    },
    {
        "content": "<p>Knowing you need to search for arbitrarily chosen prefixes of standard mathematical terms is not really good enough. Finding stuff in mathlib is ridiculously difficult already.</p>",
        "id": 159840945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551606795
    },
    {
        "content": "<p>There's a very handy feature of Isabelle to find stuff, as follows. If you type a lemma, then it will search (asynchronously, so it will not slow everything down) if there is a lemma in the library that matches the statement (up to reordering of the variables), and if so it will tell you the name of the statement. </p>\n<p>A similar handy tactic in Lean, say <code>search_library</code>, would try to apply all the lemmas in the library to the current goal and close all of their premises using <code>assumption</code>, and if it works apply this lemma and tell you its name in the trace output. So, if you don't remember the name of the lemma saying that <code>n &lt; m &lt;-&gt; n.succ &lt;= m</code>on nat, then just type this statement as a <code>have:</code>in your proof, call <code>search_library</code> and get the name. As I don't know anything about tactics, I don't know if it would be easy to implement, and how slow it would be...</p>",
        "id": 159841785,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551608186
    },
    {
        "content": "<p><code>tactic.find</code></p>",
        "id": 159841854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551608325
    },
    {
        "content": "<p><code>find</code> is ridiculously slow, so I guess anything smarter would be insufferably slow (in Lean 3 at least)</p>",
        "id": 159841867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551608387
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/issues/629\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/629\">find doesn't work very well</a></p>",
        "id": 159842336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551609138
    },
    {
        "content": "<p>I am working on <code>search_library</code> right this second. (aka <code>back</code>) No promises that it will actually be fast enough to run on the whole library :-)</p>",
        "id": 159842492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551609387
    },
    {
        "content": "<p>Fancier search tools would obviously be welcome, but I also think that it should be more standard practice to add relevant keywords as comments in mathlib so that a straightforward grep will find them.  Perhaps there should be a structured syntax for this, like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\"> - @keywords: lexicographic order, dictionary order</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 159845695,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1551614691
    },
    {
        "content": "<p>I'm not sure that the structured syntax adds anything, but just piles of greppable text all through mathlib would be amazing. :-)</p>",
        "id": 159864925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551647379
    }
]