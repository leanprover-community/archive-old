[
    {
        "content": "<p>The following usage of <code>library_search</code> doesn't give me a hit. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">library_search</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Shouldn't this give me a hit? (I know I can just use linarith btw)</p>",
        "id": 202856737,
        "sender_full_name": "Chris M",
        "timestamp": 1593838937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> I'm not surprised that there isn't a lemma in the library that would close that in one go.</p>",
        "id": 202856798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593839047
    },
    {
        "content": "<p>I don't have a computer nearby --- could you say what you were expecting it to find?</p>",
        "id": 202856801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593839064
    },
    {
        "content": "<p>What are a and b here? (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 202856804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593839085
    },
    {
        "content": "<p>It does seem pretty plausible that library_search could prove h4 from h3, so we should track down what's going on here.</p>",
        "id": 202856821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593839143
    },
    {
        "content": "<p>I was expecting to find a lemma that says something like,  dividing a positive number by a positive number gives a positive number.</p>",
        "id": 202856864,
        "sender_full_name": "Chris M",
        "timestamp": 1593839185
    },
    {
        "content": "<p>That's probably <code>div_nonneg</code></p>",
        "id": 202857136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593839873
    },
    {
        "content": "<p>But it doesn't know that the two numbers that you are dividing are nonnegative... you'll need additional lemmas for that. And such reasoning is beyond what <code>library_search</code> can do.</p>",
        "id": 202857175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593839916
    },
    {
        "content": "<p>Maybe <code>suggest</code> would help...</p>",
        "id": 202857178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593839923
    },
    {
        "content": "<p>doesn't <code>h3</code> show that the numerator is nonnegative? I'd guess that lean already knows that 2 is nonnegative?</p>",
        "id": 202857188,
        "sender_full_name": "Chris M",
        "timestamp": 1593839979
    },
    {
        "content": "<p>Yup, it does.</p>",
        "id": 202857233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840032
    },
    {
        "content": "<p>Actually this also doesn't find a solution:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">two_pos</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">library_search</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202857234,
        "sender_full_name": "Chris M",
        "timestamp": 1593840033
    },
    {
        "content": "<p>And if you replace <code>h5</code> with <code>≥</code>? (Proof <code>norm_num</code>)</p>",
        "id": 202857242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840070
    },
    {
        "content": "<p>No doesn't work either</p>",
        "id": 202857248,
        "sender_full_name": "Chris M",
        "timestamp": 1593840106
    },
    {
        "content": "<p>Maybe you need to swap all the inequalities. Very disappointingly, lean is not so good at <code>≥</code> and prefers <code>≤</code>.</p>",
        "id": 202857249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840118
    },
    {
        "content": "<p>Ok, if it still doesn't work, then we are missing some lemma.</p>",
        "id": 202857291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840133
    },
    {
        "content": "<p>Can you find <code>div_nonneg</code> manually, or are you missing an import? I would guess that importing the reals should be enough.</p>",
        "id": 202857296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840162
    },
    {
        "content": "<p>I think <code>have h5: (0 &lt; 2) , {exact two_pos},</code> is interpreting <code>0</code> and <code>2</code> as natural numbers.</p>",
        "id": 202857395,
        "sender_full_name": "Chris M",
        "timestamp": 1593840409
    },
    {
        "content": "<p><code>div_nonneg</code> gives me a type error</p>",
        "id": 202857401,
        "sender_full_name": "Chris M",
        "timestamp": 1593840436
    },
    {
        "content": "<p>How do I typecast them as <code>\\R</code>?</p>",
        "id": 202857405,
        "sender_full_name": "Chris M",
        "timestamp": 1593840462
    },
    {
        "content": "<p>Aah, good point, you need to write <code>(0 : real)</code></p>",
        "id": 202857406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840463
    },
    {
        "content": "<p>(It will then understand that you mean the same for <code>2</code></p>",
        "id": 202857411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/should.20.60library_search.60.20work.20here.3F/near/202857401\">said</a>:</p>\n<blockquote>\n<p><code>div_nonneg</code> gives me a type error</p>\n</blockquote>\n<p>What kind of error?</p>",
        "id": 202857450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840486
    },
    {
        "content": "<p><code>have h5: (0 : real &lt; 2) , {sorry},</code> gives me </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_add</span> <span class=\"kt\">Type</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 202857454,
        "sender_full_name": "Chris M",
        "timestamp": 1593840517
    },
    {
        "content": "<p>same for <code>0 : \\R</code></p>",
        "id": 202857464,
        "sender_full_name": "Chris M",
        "timestamp": 1593840541
    },
    {
        "content": "<p><code>(0 &lt; \\R) &lt; 2</code></p>",
        "id": 202857474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840574
    },
    {
        "content": "<p>I think you have the parens slightly differently</p>",
        "id": 202857475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840585
    },
    {
        "content": "<p>oh got it</p>",
        "id": 202857476,
        "sender_full_name": "Chris M",
        "timestamp": 1593840593
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">two_pos</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">library_search</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202857525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840644
    },
    {
        "content": "<p>Ok the whole thing works now. <br>\nThough maybe surprising that library_search isn't able to know by itself that 2 is a positive real number?</p>",
        "id": 202857527,
        "sender_full_name": "Chris M",
        "timestamp": 1593840658
    },
    {
        "content": "<p>It doesn't work without h5</p>",
        "id": 202857531,
        "sender_full_name": "Chris M",
        "timestamp": 1593840674
    },
    {
        "content": "<p>Sure, it doesn't. <code>library_search</code> does exactly what it's name says. It searches through the library for a lemma that closes the goal <em>directly</em>.</p>",
        "id": 202857539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840711
    },
    {
        "content": "<p>It cannot proof any of the hypotheses for the lemma</p>",
        "id": 202857578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593840725
    },
    {
        "content": "<p>Ok makes sense. Thanks for the help!</p>",
        "id": 202857592,
        "sender_full_name": "Chris M",
        "timestamp": 1593840795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> There is work on a tactic <code>back</code> that would try to do recursive backwards reasoning. But as you can imagine, it's delicate, because you quickly get a combinatorial explosion.</p>",
        "id": 202858916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593843247
    },
    {
        "content": "<p>What happens if you use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\ge</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span></span></span></span> in your statements? To avoid duplicating all lemmas, everything is normally stated in mathlib using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span>.</p>",
        "id": 202861719,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593847955
    },
    {
        "content": "<p>The code that I posted above works... <code>library_search</code> finds <code>div_nonneg</code> as expected.</p>",
        "id": 202861999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593848429
    }
]