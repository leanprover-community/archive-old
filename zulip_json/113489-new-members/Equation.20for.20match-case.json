[
    {
        "content": "<p>Is there way to fill this hole (similar to coq's match-return)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">case1</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">case1</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147352744,
        "sender_full_name": "Erika",
        "timestamp": 1541742614
    },
    {
        "content": "<p>It's not built in to the <code>match</code> syntax, but there is a tactic for this, <code>cases</code></p>",
        "id": 147353395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541743865
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cases h : f x with y,\n{ -- case1 y\n  exact g x y h, }\n</pre></div>",
        "id": 147353401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541743902
    },
    {
        "content": "<p>ooh, that's good to know, I also noticed that <code>refine</code> will not make goals for <code>_</code> within a match arm</p>",
        "id": 147353467,
        "sender_full_name": "Erika",
        "timestamp": 1541744038
    },
    {
        "content": "<p>Lean does have match-return as well, but you have to handhold it a bit to get this goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">case1</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">case1</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147353504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744043
    },
    {
        "content": "<p>ah, I see, this is acceptable too</p>",
        "id": 147353510,
        "sender_full_name": "Erika",
        "timestamp": 1541744061
    },
    {
        "content": "<p>I'm not sure I know what you mean by not making goals for <code>_</code></p>",
        "id": 147353526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744117
    },
    {
        "content": "<p>refine will make goals for anything it can't infer</p>",
        "id": 147353529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744130
    },
    {
        "content": "<p>oh, maybe you mean <code>match</code> blocks refine because it uses the equation compiler (so it is typechecking in a different context, for a standalone definition)</p>",
        "id": 147353575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"kn\">end</span><span class=\"o\">),</span> <span class=\"c1\">-- error for _, instead of new goal</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147353590,
        "sender_full_name": "Erika",
        "timestamp": 1541744195
    },
    {
        "content": "<p>right</p>",
        "id": 147353592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744201
    },
    {
        "content": "<p>same happens when you use <code>let &lt;...&gt; = e1 in e2</code></p>",
        "id": 147353593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744202
    },
    {
        "content": "<p>thanks for the help</p>",
        "id": 147353604,
        "sender_full_name": "Erika",
        "timestamp": 1541744234
    },
    {
        "content": "<p>you can still use tactics in there, but you have to make a separate begin-end block</p>",
        "id": 147353611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744265
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"bp\">...</span>\n  <span class=\"kn\">end</span> <span class=\"kn\">end</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147353653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541744296
    }
]