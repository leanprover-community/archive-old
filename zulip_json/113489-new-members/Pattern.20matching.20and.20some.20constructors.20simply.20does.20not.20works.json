[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Lemon</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pure</span>    <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span>     <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">satisfy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">String</span>\n\n<span class=\"c1\">-- tactic 'cases' failed, nested error:</span>\n<span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n<span class=\"c1\">--  Int = String</span>\n<span class=\"c1\">-- at case Lemon.satisfy after processing</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lemon.pure</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lemon.seq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Why can't I do that? I tried with casesOn but for some reason the first functions does not unifies with Int so I simply cant remove the value from inside of the pure!</p>\n<p>If the result type in the data constructor is different from a type variable, it always fail in a pattern match :\\</p>",
        "id": 287319796,
        "sender_full_name": "Felipe GS",
        "timestamp": 1656070643
    },
    {
        "content": "<p><code>Int</code> could be equal to <code>String</code> so Lean cannot eliminate the possibility of <code>Lemon.satisfy</code>.</p>",
        "id": 287320135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656070849
    },
    {
        "content": "<p>If you are coming from Haskell, then this will look strange</p>",
        "id": 287320142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656070858
    },
    {
        "content": "<p>So.. how should I rewrite this code to make something like that work? I think that <code>Lemon.satisfy</code> is useful so I cannot simply remove this constructor :\\</p>",
        "id": 287320591,
        "sender_full_name": "Felipe GS",
        "timestamp": 1656071239
    },
    {
        "content": "<p>Why not just return 37 in the <code>satisfy</code> case?</p>",
        "id": 287321108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656071630
    },
    {
        "content": "<p>I guess in a real interpreter you will have to handle all possible type indices anyways (for <code>seq</code>), like <code>Lemon a -&gt; a</code>, so this issue won't come up</p>",
        "id": 287322013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656072258
    },
    {
        "content": "<p>Yeah but I'm trying to make a function to optimize the ast so <code>seq (pure f) (pure x)</code> becomes <code>pure (f x)</code> but I cannot pattern match on the first  constructor  because the type is <code>Lemon (u -&gt; t)</code> (When I add another constructor <code>| empty : Lemon Unit</code>)</p>",
        "id": 287322232,
        "sender_full_name": "Felipe GS",
        "timestamp": 1656072416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Pattern.20matching.20and.20some.20constructors.20simply.20does.20not.20works/near/287321108\">said</a>:</p>\n<blockquote>\n<p>Why not just return 37 in the <code>satisfy</code> case?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"sd\">/--</span>\n<span class=\"sd\">  type mismatch</span>\n<span class=\"sd\">    Lemon.satisfy x</span>\n<span class=\"sd\">  has type</span>\n<span class=\"sd\">    Lemon String : Type 1</span>\n<span class=\"sd\">  but is expected to have type</span>\n<span class=\"sd\">    Lemon Int : Type 1</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lemon.seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lemon.pure</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lemon.satisfy</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 287322424,
        "sender_full_name": "Felipe GS",
        "timestamp": 1656072552
    },
    {
        "content": "<p>Not sure how smart the equation compiler is on this sort of thing. This works at least:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lemon.seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lemon.pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Lemon.satisfy</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test'</span> <span class=\"n\">x</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 287323344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656073200
    },
    {
        "content": "<p>I would need a real example to give a real suggestion.</p>",
        "id": 287323421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656073228
    },
    {
        "content": "<p>A silly suggestion: If you really wanted to, you could add an axiom saying <code>Int</code> and <code>String</code> are distinct (which is certainly consistent) and then use <code>False.elim</code> in the \"impossible\" case.</p>",
        "id": 287323595,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656073345
    },
    {
        "content": "<p>How should I fix that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Lemon</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pure</span>    <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span>     <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">satisfy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span>   <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">Unit</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">tactic 'cases' failed, nested error:</span>\n<span class=\"sd\">dependent elimination failed, failed to solve equation</span>\n<span class=\"sd\">  (u✝ → α) = String</span>\n<span class=\"sd\">at case Lemon.satisfy after processing</span>\n<span class=\"sd\">  (@Lemon.seq _ _ _ (@Lemon.pure _ _))</span>\n<span class=\"sd\">the dependent pattern matcher can solve the following kinds of equations</span>\n<span class=\"sd\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">opt</span> <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lemon.seq</span> <span class=\"o\">(</span><span class=\"n\">Lemon.pure</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lemon.pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lemon.pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 287323822,
        "sender_full_name": "Felipe GS",
        "timestamp": 1656073491
    },
    {
        "content": "<p>I think the equation compiler just doesn't know how to handle this situation (yet?). Here is one way to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Lemon</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pure</span>    <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span>     <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">satisfy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span>   <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">opt</span> <span class=\"o\">:</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Lemon</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lemon.seq</span> <span class=\"o\">(</span><span class=\"n\">Lemon.pure</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lemon.pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lemon.pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 287324671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656074034
    },
    {
        "content": "<p>If you need to know <code>a = String</code> in some other case, you can pass in an equality hypothesis like in <code>test'</code></p>",
        "id": 287324767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656074092
    }
]