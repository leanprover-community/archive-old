[
    {
        "content": "<p>I feel there should be an easy way to create element of type <code>fin 0</code>, since there's only one such function. How to do it?</p>",
        "id": 219143670,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607378009
    },
    {
        "content": "<p>In fact, there are zero such terms, so it is impossible to construct such an \"element\".</p>",
        "id": 219143794,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607378070
    },
    {
        "content": "<p>If you somehow did have an <code>i : fin 0</code>, then that can be used to produce a proof of <code>false</code>.</p>",
        "id": 219143844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607378097
    },
    {
        "content": "<p>As Yakov explains, <code>fin 0</code> is an empty type, but the unique function out of it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_zero_elim\">docs#fin_zero_elim</a>.</p>",
        "id": 219143873,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607378109
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.elim0\">docs#fin.elim0</a> is the same.</p>",
        "id": 219144252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607378313
    },
    {
        "content": "<p>Oh no, I was trying to use <code>fin n -&gt; T</code> in my inductively defined type, since I cannot use <code>vector T n</code> in an inductive definition as it violates positivity constraints.</p>\n<p>How would I do it in inductive type then?</p>",
        "id": 219144283,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607378333
    },
    {
        "content": "<p>There's a function <code>fin 0 -&gt; T</code>. What are you worried about?</p>",
        "id": 219144375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607378395
    },
    {
        "content": "<p>Oh right, I guess although <code>fin 0</code> cannot be constructed, <code>fin 0 -&gt; T</code> can be constructed? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 219144872,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607378625
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin.elim0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think in most cases you should be able to use <code>fin.elim0</code> or <code>fin_zero_elim</code> without making the function type explicit.</p>",
        "id": 219145373,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607378875
    },
    {
        "content": "<p>Note that if T is not empty, you can use the simpler <code>(λ _ : fin 0,  some_t)</code></p>",
        "id": 219146337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607379281
    }
]