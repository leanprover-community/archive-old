[
    {
        "content": "<p>Given a term <code>f : fin n → ℕ</code>, how do I formalise the notion that <code>f</code> is strictly increasing? I tried something of the form <code>∀ k, k &lt; n →  ...</code>, but I have trouble converting <code>k</code> into a term of type <code>fin n</code>.</p>",
        "id": 262551552,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637736593
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strictly_increasing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k₁</span> <span class=\"n\">k₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">k₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n<span class=\"n\">k₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Untested, since it wasn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 262552198,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637737253
    },
    {
        "content": "<p>ah right that works, thanks</p>",
        "id": 262552465,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637737529
    },
    {
        "content": "<p>That's very cumbersome in a few ways! First, no need to quantify over natural numbers: <code>fin n</code> itself already has a <code>&lt;</code> operation. Perhaps look at mathlib's existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_embedding\">docs#order_embedding</a>.</p>",
        "id": 262553361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637738445
    },
    {
        "content": "<p>Or just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono\">docs#strict_mono</a>.</p>",
        "id": 262553453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637738536
    },
    {
        "content": "<p>But if you want to \"do it yourself\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strictly_increasing</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">k₁</span> <span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">k₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">k₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">k₂</span>\n</code></pre></div>\n<p>should be all you need.</p>",
        "id": 262553520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637738633
    },
    {
        "content": "<p>Ah that's useful to know. Let me elaborate on my original question though. The condition I'm formalising is actually stronger than strictly increasing: namely <code>f k.succ &gt; f k + 1</code> for all <code>k</code>. What would be the idiomatic way to write this?</p>",
        "id": 262554995,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637740177
    },
    {
        "content": "<p>Why not write it like that? The only thing you need to know about <code>fin</code> addition is that it's circling around (and we might at some point make it saturating instead), so in your case you must avoid <code>n - 1 + 1 = 0</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 262560081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637743874
    },
    {
        "content": "<p>I tried your example, but Lean gives a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm aware that the error goes away if I replace <code>fin n</code> with <code>fin n.succ</code>, but is there a better way to go about it?</p>",
        "id": 262566396,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637747455
    },
    {
        "content": "<p>You somehow need to write down a definition that works for <code>fin 0</code> (which is empty).</p>",
        "id": 262566658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637747621
    },
    {
        "content": "<p>Doing this in a unified way seems not so straightforward</p>",
        "id": 262566825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637747714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Does <code>fin n</code> already have a <code>succ : fin n → fin n</code>?</p>",
        "id": 262566873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637747745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Strictly.20increasing.20finite.20sequence/near/262566658\">said</a>:</p>\n<blockquote>\n<p>You somehow need to write down a definition that works for <code>fin 0</code> (which is empty).</p>\n</blockquote>\n<p>Ah I think I'll try this out then</p>",
        "id": 262567848,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637748282
    },
    {
        "content": "<p>No idea, but there's no <code>succ_order</code> instance at least.</p>",
        "id": 262568089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637748439
    },
    {
        "content": "<p>You could use Scott's definition but add <code>+ 1</code> to the right hand side, since that's equivalent to what you want</p>",
        "id": 262581612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637757117
    },
    {
        "content": "<p>I wouldn't recommend using <code>+</code> on <code>fin</code>.</p>",
        "id": 262581652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637757124
    },
    {
        "content": "<p>Hopefully it's ok for me to post this since it's a continuation of the previous question.<br>\nWhat I'm trying to do is to prove Zeckendorf's theorem, and here's the code I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zeckendorf_rep</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">kpos</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kpos</span><span class=\"o\">⟩</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_zeckendorf_rep</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kpos</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">is_zeckendorf_rep</span> <span class=\"n\">kpos</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">nat.fib</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zeckendorf_existence</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">has_zeckendorf_rep</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262663660,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637811208
    },
    {
        "content": "<p>But on the line with <code>apply nat.strong_induction_on</code>, Lean throws a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">has_zeckendorf_rep</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>",
        "id": 262663691,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637811244
    },
    {
        "content": "<p>This puzzles me, because there was no error when I removed the disjunction. So how do I get Lean to recognise the disjunction as a single proposition?</p>",
        "id": 262663722,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637811303
    },
    {
        "content": "<p>I could move the <code>n = 0</code> condition into <code>has_zeckendorf_rep</code>, but I find that to be a hacky solution.</p>",
        "id": 262663929,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637811587
    },
    {
        "content": "<p>Lean can't guess what you're inducting on. <code>apply nat.strong_induction_on n</code> works.</p>",
        "id": 262684554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637833333
    },
    {
        "content": "<p>Ah I see, thanks</p>",
        "id": 262696890,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637841260
    },
    {
        "content": "<p>I finally managed to formalise the existence part of Zeckendorf's theorem, so I thought I'd share here. I still don't know much about Lean so the proof is probably quite inefficient...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.order</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">nat</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zeckendorf_rep</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">kpos</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">kpos</span><span class=\"o\">⟩</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_zeckendorf_rep</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kpos</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">is_zeckendorf_rep</span> <span class=\"n\">kpos</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trivial_rep_is_zeckendorf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zeckendorf_rep</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hm0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fin.eq_zero</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fin.eq_zero</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hn0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hmn</span><span class=\"o\">)</span> <span class=\"n\">hm0</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_three</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fib_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_last_of_not_lt</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k.succ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬↑</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">fin.is_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_gt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_inv_strict_mono</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt.mpr</span> <span class=\"o\">(</span><span class=\"n\">fib_mono</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">h1</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zeckendorf_existence</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">has_zeckendorf_rep</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- Trivial cases</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">n_eq_0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n\n  <span class=\"n\">by_cases</span> <span class=\"n\">n_eq_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)],</span> <span class=\"c1\">-- 1 = fib 2</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trivial_rep_is_zeckendorf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.sum_unique</span><span class=\"o\">,</span> <span class=\"n\">n_eq_1</span><span class=\"o\">,</span> <span class=\"n\">fib_two</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">by_cases</span> <span class=\"n\">n_eq_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)],</span> <span class=\"c1\">-- 2 = fib 3</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trivial_rep_is_zeckendorf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.sum_unique</span><span class=\"o\">,</span> <span class=\"n\">n_eq_2</span><span class=\"o\">,</span> <span class=\"n\">fib_three</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- Induction step</span>\n  <span class=\"k\">have</span> <span class=\"n\">n_ge_2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">n_eq_2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_le_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">n_eq_1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_le_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">pos_iff_ne_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">n_eq_0</span> <span class=\"n\">n_eq_1</span> <span class=\"n\">n_eq_2</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">fibs</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">hfibs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- F = fib l is the greatest Fibonacci number ≤ n</span>\n  <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_greatest</span> <span class=\"n\">fibs</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">hF</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">two_le_F</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">nat.le_find_greatest</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">n_ge_2</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">fib_three</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">one_le_of_lt</span> <span class=\"n\">n_ge_2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">fib_one</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">F_fib</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_greatest_spec</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">F_fib</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">l_gt_1</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">fib_mono</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hfibs</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hF</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">not_lt.mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">succ_le_iff.mp</span> <span class=\"n\">two_le_F</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">nF_lt_n</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">F</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">nat.sub_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">le_of_succ_le</span> <span class=\"n\">two_le_F</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pos_of_gt</span> <span class=\"n\">n_ge_2</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">F_le_n</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_greatest_le</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnF</span> <span class=\"o\">:=</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">nF_lt_n</span><span class=\"o\">,</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">hnF</span> <span class=\"k\">with</span> <span class=\"n\">nF0</span> <span class=\"n\">hnF</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- n = F is a Fibonacci number, thus has trivial Zeckendorf representation</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">n_eq_F</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n      <span class=\"n\">nat.le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">nat.le_of_sub_eq_zero</span> <span class=\"n\">nF0</span><span class=\"o\">)</span> <span class=\"n\">F_le_n</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">nF_lt_n</span> <span class=\"n\">nF0</span><span class=\"o\">,</span>\n\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trivial_rep_is_zeckendorf</span> <span class=\"n\">_</span> <span class=\"n\">l_gt_1</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fintype.sum_unique</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n_eq_F</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- Otherwise, add F to the Zeckendorf representation of n - F</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hnF</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">kpos</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f0</span><span class=\"o\">,</span> <span class=\"n\">frest</span><span class=\"o\">⟩,</span> <span class=\"n\">fsum</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">k.succ</span><span class=\"o\">,</span> <span class=\"n\">succ_pos</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k.succ</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i.cast_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">l</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- This is indeed a Zeckendorf representation</span>\n    <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">f0</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m'</span> <span class=\"n\">n'</span> <span class=\"n\">hmn'</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">n'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m'</span> <span class=\"n\">at</span> <span class=\"n\">hmn'</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n        <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n\n        <span class=\"c1\">-- n &lt; m &lt; k → use the hypothesis</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">frest</span><span class=\"o\">,</span>\n          <span class=\"n\">change</span> <span class=\"n\">n'.cast_lt</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m'.cast_lt</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n          <span class=\"n\">rwa</span> <span class=\"n\">fin.lt_iff_coe_lt_coe</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">hmn'</span> <span class=\"o\">},</span>\n\n        <span class=\"c1\">-- m &gt; n, m &lt; k = n → contradiction</span>\n        <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">fin.lt_iff_coe_lt_coe</span> <span class=\"n\">at</span> <span class=\"n\">hmn'</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬↑</span><span class=\"n\">n'</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">m'</span> <span class=\"o\">:=</span> <span class=\"n\">nat.lt_asymm</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_of_lt_of_le</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">h2</span><span class=\"o\">)),</span>\n          <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">hmn'</span> <span class=\"o\">},</span>\n\n        <span class=\"c1\">-- n &lt; k = m → the interesting case</span>\n        <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">F</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n          <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.add_le_to_le_sub</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">F_le_n</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hF</span><span class=\"o\">,</span> <span class=\"n\">hfibs</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">l_sub_add</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">l_gt_1</span><span class=\"o\">),</span>\n            <span class=\"n\">conv_lhs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">l_sub_add</span> <span class=\"o\">},</span>\n            <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fib_succ_succ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">change</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">succ_inj'.mpr</span> <span class=\"n\">l_sub_add</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">contra</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"n\">l.succ</span> <span class=\"bp\">≤</span> <span class=\"n\">nat.find_greatest</span> <span class=\"n\">fibs</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n              <span class=\"n\">nat.le_find_greatest</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"n\">l.succ</span><span class=\"o\">),</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hfibs</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">l_gt_1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n            <span class=\"n\">replace</span> <span class=\"n\">contra</span> <span class=\"o\">:=</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">contra</span> <span class=\"o\">(</span><span class=\"n\">fib_add_two_strict_mono</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">},</span>\n\n          <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n'.cast_lt</span> <span class=\"n\">h3</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n          <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n'.cast_lt</span> <span class=\"n\">h3</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n            <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fsum</span><span class=\"o\">,</span>\n            <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n'.cast_lt</span> <span class=\"n\">h3</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"n\">finset.single_le_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi_univ</span><span class=\"o\">,</span>\n              <span class=\"n\">change</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n            <span class=\"n\">apply</span> <span class=\"n\">finset.mem_univ</span> <span class=\"o\">},</span>\n\n          <span class=\"n\">replace</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">fib_inv_strict_mono</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">lt_tsub_iff_right.mp</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n\n        <span class=\"c1\">-- m &gt; n, m = k, n = k → contradiction</span>\n        <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n          <span class=\"n\">replace</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">eq_last_of_not_lt</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n          <span class=\"n\">replace</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">eq_last_of_not_lt</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">fin.lt_iff_coe_lt_coe</span> <span class=\"n\">at</span> <span class=\"n\">hmn'</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmn'</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">nat.lt_asymm</span> <span class=\"n\">hmn'</span> <span class=\"n\">hmn'</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n\n    <span class=\"c1\">-- It sums up to n</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">F_le_n</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">fsum</span><span class=\"o\">,</span> <span class=\"n\">hF</span><span class=\"o\">,</span> <span class=\"n\">hfibs</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">fin.sum_univ_cast_succ</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">sum_eq_of_eqs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hbd</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">sum_eq_of_eqs</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">fintype.sum_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv.cast</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">fin.is_lt</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">irrefl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262760933,
        "sender_full_name": "Way Yan Win",
        "timestamp": 1637903988
    },
    {
        "content": "<p>Congrats on finishing a non-trivial Lean proof! Enjoy the dopamine rush (-;</p>",
        "id": 262762628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637906333
    }
]