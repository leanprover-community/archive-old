[
    {
        "content": "<p>Good evening! I am new to Lean and I have a question about a phenomenon that is not well documented online.<br>\nI have noticed that  some times, the rewrite command replaces multiple occurrence of the pattern found. In particular,  in the Mathematics in Lean book, I found:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>import algebra.ring\nnamespace my_ring\nvariables <span class=\"o\">{</span>R : Type*<span class=\"o\">}</span> <span class=\"o\">[</span>ring R<span class=\"o\">]</span>\n\ntheorem add_neg_cancel_right <span class=\"o\">(</span>a b : R<span class=\"o\">)</span> : <span class=\"o\">(</span>a + b<span class=\"o\">)</span> + -b <span class=\"o\">=</span> a :<span class=\"o\">=</span>\nby rw <span class=\"o\">[</span>add_assoc, add_right_neg, add_comm, zero_add<span class=\"o\">]</span>\n\ntheorem add_right_cancel <span class=\"o\">{</span>a b c : R<span class=\"o\">}</span> <span class=\"o\">(</span>h : a + <span class=\"nv\">b</span> <span class=\"o\">=</span> c + b<span class=\"o\">)</span> : <span class=\"nv\">a</span> <span class=\"o\">=</span> c :<span class=\"o\">=</span>\n   calc\n    <span class=\"nv\">a</span>\n      <span class=\"o\">=</span> <span class=\"o\">(</span>a + b<span class=\"o\">)</span> + -b : by rw <span class=\"o\">[</span>← add_neg_cancel_right<span class=\"o\">]</span>\n  ... <span class=\"o\">=</span> <span class=\"o\">(</span>c + b<span class=\"o\">)</span> + -b : by rw <span class=\"o\">[</span>← h<span class=\"o\">]</span>\n  ... <span class=\"o\">=</span>  c           : by rw <span class=\"o\">[</span>add_assoc, add_comm b, add_left_neg, add_comm, zero_add<span class=\"o\">]</span>\n-- END\n\nend my_ring\n</code></pre></div>\n<p>I want to replace 'a' by '(a + b) + -b' only on the left side, but Lean did both sides for me, which is not what I wanted... Could someone help me with this?</p>",
        "id": 221095166,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609193512
    },
    {
        "content": "<p>You're looking for <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 221095241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609193556
    },
    {
        "content": "<p>(I'm talking about your Zulip issue first)</p>",
        "id": 221095252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609193572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20sometimes.20substitute.20both.20sides.20of.20the.20equation/near/221095241\">said</a>:</p>\n<blockquote>\n<p>You're looking for <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n</blockquote>\n<p>I got it! Thanks!</p>",
        "id": 221095273,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609193601
    },
    {
        "content": "<p><code>rw</code> will replace every occurrence of a <em>single</em> pattern.</p>",
        "id": 221095348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609193656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20sometimes.20substitute.20both.20sides.20of.20the.20equation/near/221095348\">said</a>:</p>\n<blockquote>\n<p><code>rw</code> will replace every occurrence of a <em>single</em> pattern.</p>\n</blockquote>\n<p>I also observe that Lean replaces all patterns (some are very complex)</p>\n<p>Is there a way to specify only the first or second pattern, or left/right side?</p>",
        "id": 221095509,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609193818
    },
    {
        "content": "<p>One possible answer is <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 221095528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609193848
    },
    {
        "content": "<p>There are simpler answers for simpler cases but that one is the most flexible one.</p>",
        "id": 221095541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609193872
    },
    {
        "content": "<p>I don't understand your example, it seems to have independent issues.</p>",
        "id": 221095614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609193926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20sometimes.20substitute.20both.20sides.20of.20the.20equation/near/221095614\">said</a>:</p>\n<blockquote>\n<p>I don't understand your example, it seems to have independent issues.</p>\n</blockquote>\n<p>Professor Massot, are you referring to the example code that I posted?</p>",
        "id": 221095722,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609194026
    },
    {
        "content": "<p>Yes. I think the issue is your <code>rw [← add_neg_cancel_right]</code> has no way to infer who is <code>b</code>.</p>",
        "id": 221095769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609194110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20sometimes.20substitute.20both.20sides.20of.20the.20equation/near/221095769\">said</a>:</p>\n<blockquote>\n<p>Yes. I think the issue is your <code>rw [← add_neg_cancel_right]</code> has no way to infer who is <code>b</code>.</p>\n</blockquote>\n<p>I have updated again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">my_ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_neg_cancel_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n   <span class=\"k\">calc</span>\n    <span class=\"n\">a</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_neg_cancel_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"n\">c</span>           <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n<span class=\"c1\">-- END</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_ring</span>\n</code></pre></div>",
        "id": 221095875,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609194213
    },
    {
        "content": "<p>If I change the code back to </p>\n<p><code>rw [add_neg_cancel_right a b]</code></p>\n<p>then it works very well, it just substituted my right hand side :)</p>",
        "id": 221095963,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609194283
    },
    {
        "content": "<p>Ok, here you see the announced behavior. Given <code>rw [← add_neg_cancel_right a b]</code> goes looking for the pattern <code>a</code>. It sees it twice (one on each side), hence it rewrites twice. You can fix this by using <code>conv_lhs { rw [← add_neg_cancel_right a b] }</code> to go only to the left-hand side.</p>",
        "id": 221096087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609194410
    },
    {
        "content": "<p>Thank you for your answer, Professor Massot! I will try that and also read the link that you sent!</p>",
        "id": 221096121,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609194462
    },
    {
        "content": "<p>or <code>conv { to_lhs, rw ← add_neg_cancel_right a b }</code> or many other variations.</p>",
        "id": 221096171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609194487
    },
    {
        "content": "<p>You are using bash syntax highlighting btw, you can just write <code> ``` </code> with no language specifier and it will default to \"lean\"</p>",
        "id": 221096190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609194522
    },
    {
        "content": "<p>Btw, is there an advantage to having lean syntax? Can we just run it on the server... I am just wondering</p>",
        "id": 221096416,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609194739
    },
    {
        "content": "<p>Yes you can.</p>",
        "id": 221096444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609194782
    },
    {
        "content": "<p>Try to switch to lean syntax and you'll get a new icon on the upper-right corner of your code area.</p>",
        "id": 221096469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609194806
    },
    {
        "content": "<p>Of course this will work only if the Lean snippet is autonomous.</p>",
        "id": 221096483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609194830
    },
    {
        "content": "<p>Thank you for telling me that. I will start posting self-contained codes from now on.</p>",
        "id": 221096765,
        "sender_full_name": "Trung Tran",
        "timestamp": 1609195107
    },
    {
        "content": "<p>The important point is to post self-contained code  in the first message of a thread, because it makes it much easier to help you, as explained in <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. The Lean javascript version is mostly a nice bonus.</p>",
        "id": 221096857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609195212
    }
]