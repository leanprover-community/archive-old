[
    {
        "content": "<p>I want a function that takes an ordered pair of natural numbers and returns their sum.  Why is this wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mysum</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.2</span>\n</code></pre></div>",
        "id": 264209562,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638992696
    },
    {
        "content": "<p>Looks right to me</p>",
        "id": 264209670,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638992758
    },
    {
        "content": "<p>function expected at<br>\n  x.snd<br>\nterm has type<br>\n  ℕ<br>\nAdditional information:<br>\n/home/jet08013/GitHub/formalising-mathematics/src/experiments.lean:26:34: context: switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message<br>\n  too many arguments</p>",
        "id": 264209857,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638992833
    },
    {
        "content": "<p>Sounds like there is something below the line which interferes</p>",
        "id": 264209900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638992857
    },
    {
        "content": "<p>Maybe I'm invoking it incorrectly?  How should I call this function?</p>",
        "id": 264210043,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638992913
    },
    {
        "content": "<p>I'm an idiot. I forgot #eval and just wrote ff(2,3) below it....</p>",
        "id": 264210383,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1638993058
    },
    {
        "content": "<p>In case something like this happens again, note that you can always write a <code>.</code> or <code>#exit</code> on the line below your lemma to make sure Lean doesn't only looks at line <code>n</code> that you care about and doesn't get confused by whatever is written on line <code>n+1</code> and onwards.</p>",
        "id": 264211189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638993375
    }
]