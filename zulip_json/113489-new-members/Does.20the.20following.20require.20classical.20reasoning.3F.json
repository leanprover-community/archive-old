[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It certainly seems natural to think about the cases of <code>r</code> true vs false separately.  In fact, the witness we need depends on the truth value of <code>r</code>.  But that doesn't quite seem like a proof to me.</p>\n<p>Does the equivalence <code>(p → q) ↔ (¬ p ∨ q)</code> require classical reasoning?  If I could convert the implication into the <code>or</code>, then I could use <code>or.elim</code> and not have to use classical (I think).</p>",
        "id": 284821542,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654215819
    },
    {
        "content": "<p>It sure smells like it's classical, but I don't know/worry enough about non-classical logic to be sure :)</p>",
        "id": 284845408,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654241633
    },
    {
        "content": "<p>Pretty sure this is a weak version of the axiom of choice, actually.</p>",
        "id": 284845765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654241948
    },
    {
        "content": "<p><code>(p → q) ↔ (¬ p ∨ q)</code> is classical, because as a special case it gives <code>(¬ p ∨ p)</code>.</p>",
        "id": 284878247,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654262876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113489-new-members/topic/Does.20the.20following.20require.20classical.20reasoning.3F/near/284878247\">said</a>:</p>\n<blockquote>\n<p><code>(p → q) ↔ (¬ p ∨ q)</code> is classical, because as a special case it gives <code>(¬ p ∨ p)</code>.</p>\n</blockquote>\n<p>Ah good point!</p>",
        "id": 284878754,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654263097
    },
    {
        "content": "<p>Thinking constructively about the example: the LHS says \"from <code>r</code> we can produce an <code>x</code> and a proof of <code>p x</code>\", while the RHS says \"we can produce an <code>x</code>, and with <code>r</code> we can prove <code>p x</code>\".  But in general we can't produce a term of an arbitrary type — let alone produce one that will turn out to have some particular nice property — so the RHS is stronger than the LHS and so the implication fails.</p>",
        "id": 284878889,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654263169
    },
    {
        "content": "<p>For example, if <code>r</code> is <code>false</code> and <code>α</code> is empty then the LHS holds trivially but the RHS doesn't hold.</p>",
        "id": 284879095,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1654263266
    },
    {
        "content": "<p>We're also given <code>a : α</code>. But it might not satisfy <code>p</code>.</p>",
        "id": 284879210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654263318
    },
    {
        "content": "<p>I think it is equivalent to LEM.</p>",
        "id": 284879230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654263324
    },
    {
        "content": "<p>Proof below</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">martin</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">martin</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">T.rec</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">p</span> <span class=\"n\">T.ff</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">T.tt</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">b</span> <span class=\"n\">hp</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 284880681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654263986
    },
    {
        "content": "<p>hehe, not to be confused with the other <a href=\"https://en.wikipedia.org/wiki/Martin%27s_axiom\">Martin's axiom</a></p>",
        "id": 284965788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654329944
    }
]