[
    {
        "content": "<p>Hi,</p>\n<p>I have defined a usually-two-element subgroup C2 of zmod n:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">}),</span> <span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">}),</span> <span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>(I hope that this definition is correct. VSCode is not helping me in providing the context while writing this bit).</p>\n<p>I want to prove that, if m &gt; 2, then C2 (m) has size 2:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">one_neq_minus_one</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span>  <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">two_torsion_subgroup_has_two_elements</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span>  <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I know how to prove the first lemma, I just want to prove the second one (which has no mathematical content, given the definition of C2 and the first lemma). Any hints?</p>\n<p>Aside: I know that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has twitched about finset, fincard,... and what I took of it is that it was a moving target mess. Is this still the case, or there have been any changes in mathlib?</p>",
        "id": 208845267,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1599061637
    },
    {
        "content": "<p>the strategy should be something like</p>\n<ul>\n<li><code>fintype.card s = finset.card s</code></li>\n<li>if <code>x \\notin s</code> then <code>finset.card (insert x s) = finset.card s + 1</code></li>\n<li>if <code>x \\ne y</code> then <code>x \\notin {y}</code></li>\n</ul>",
        "id": 208845561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599061753
    },
    {
        "content": "<p>There may also be some existing lemmas to shortcut the last steps</p>",
        "id": 208845599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599061768
    },
    {
        "content": "<p>I don't know how to write the first in Lean ( <code>finset.card C2(p^r)</code> does not typecheck)...</p>",
        "id": 208847880,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1599062590
    },
    {
        "content": "<p>Done! Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> ! It took me a while to see how these three statements would help me, but it was a neat exercise.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">two_torsion_subgroup_has_two_elements</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">C2</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"bp\">;</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n            <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">C2_mem</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">},</span>\n            <span class=\"n\">finish</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_of_subtype</span> <span class=\"n\">S</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"o\">(</span><span class=\"n\">units</span><span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">))),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">T</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">T</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_of_not_mem</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">)},</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_singleton</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h2</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_neq_minus_one</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">S&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"mi\">1</span> <span class=\"n\">S&#39;</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208859735,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1599067965
    },
    {
        "content": "<p>Not sure how you defined the <code>fintype</code> instance on <code>C2</code>. What's the <code>unfreeze</code> step for?</p>",
        "id": 208864980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599070410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254058\">Marc Masdeu</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20that.20C2.20inside.20Z.2Fn.20has.20size.202/near/208845267\">said</a>:</p>\n<blockquote>\n<p>(I hope that this definition is correct. VSCode is not helping me in providing the context while writing this bit).</p>\n</blockquote>\n<p>When you're writing strutures and want more context, you can:</p>\n<ul>\n<li>use an <code>_</code>, and Lean will show you the expected type at that position</li>\n<li>use <code>begin ... end</code> to define a field, and you'll have the usual goal view. Usually once you've worked out what you're doing you'll want to \"golf\" this back to a term, if possible (at least for data fields)</li>\n<li>you can also build structures entirely inside tactic mode, using <code>refine_struct { .. }</code> or indeed just <code>fsplit</code> (again, you may want to golf)</li>\n<li>there is a hole command (type <code>{| |}</code>, and click on the light bulb) which can provide a \"skeleton\" for a structure definition, writing out the names of the fields you need to provide</li>\n</ul>",
        "id": 208916580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599103599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20that.20C2.20inside.20Z.2Fn.20has.20size.202/near/208916580\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"254058\">Marc Masdeu</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20that.20C2.20inside.20Z.2Fn.20has.20size.202/near/208845267\">said</a>:</p>\n<blockquote>\n<p>(I hope that this definition is correct. VSCode is not helping me in providing the context while writing this bit).</p>\n</blockquote>\n<ul>\n<li>there is a hole command (type <code>{| |}</code>, and click on the light bulb) which can provide a \"skeleton\" for a structure definition, writing out the names of the fields you need to provide</li>\n</ul>\n</blockquote>\n<p>The hole command also works with <code>_</code> nowadays, so you can combine this point with the first point.</p>",
        "id": 208918834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599106207
    }
]