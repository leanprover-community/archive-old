[
    {
        "content": "<p>I'm trying to get decidable surjectivity to work, over fintypes with provided <code>decidable_eq</code> instances. I think I am misunderstanding something about how decidability is inferred. Here is mwe.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">playfield</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">playfield</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">ix</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">∃!</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">pos</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">ix</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">playfield</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">playfield</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">occupied_positions'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">pos</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">M.occupied_positions'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">coe_occ_t</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">M.occupied_positions'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">subtype.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">occupied_positions</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">M.occupied_positions'</span> <span class=\"bp\">//</span> <span class=\"n\">option.get</span> <span class=\"n\">pos.property</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">M.occupied_positions'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">coe_occ_trans</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">M.occupied_positions</span> <span class=\"n\">M.occupied_positions'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">pos.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"n\">pos'</span> <span class=\"o\">:</span> <span class=\"n\">M.occupied_positions</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">index_at</span> <span class=\"o\">:=</span> <span class=\"n\">option.get</span> <span class=\"n\">pos.val.property</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">M.index_at</span> <span class=\"n\">pos</span> <span class=\"bp\">=</span> <span class=\"n\">ix</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">function.surjective</span> <span class=\"n\">M.index_at</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">playfield</span>\n</code></pre></div>",
        "id": 210914413,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600800394
    },
    {
        "content": "<p>I'm not sure how to make the definitions work for the sorry at the end.</p>",
        "id": 210914450,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600800419
    },
    {
        "content": "<p>Relatedly, if anyone has suggestions for how to avoid the double subtype here, that'd be great too.</p>",
        "id": 210914496,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600800443
    },
    {
        "content": "<p>I'd like to avoid using <code>classical</code> because the idea is to prove things about explicit <code>playfield</code>s using <code>dec_trivial</code>.</p>",
        "id": 210914635,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600800500
    },
    {
        "content": "<p>I think you're missing some <code>fintype</code> instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">function.surjective</span> <span class=\"n\">M.index_at</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.decidable_surjective_fintype</span> <span class=\"n\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">m n ι : Type,</span>\n<span class=\"cm\">M : playfield m n ι,</span>\n<span class=\"cm\">_inst_1 : decidable_eq m,</span>\n<span class=\"cm\">_inst_2 : decidable_eq n,</span>\n<span class=\"cm\">_inst_3 : decidable_eq ι</span>\n<span class=\"cm\">⊢ fintype ι</span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">m n ι : Type,</span>\n<span class=\"cm\">M : playfield m n ι,</span>\n<span class=\"cm\">_inst_1 : decidable_eq m,</span>\n<span class=\"cm\">_inst_2 : decidable_eq n,</span>\n<span class=\"cm\">_inst_3 : decidable_eq ι</span>\n<span class=\"cm\">⊢ fintype M.occupied_positions</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 210918365,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1600802241
    },
    {
        "content": "<p>Ah, makes sense!</p>",
        "id": 210918575,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600802352
    },
    {
        "content": "<p>I don't think there is a smarter generic decision algorithm than \"enumerate <code>y : Y</code>, enumerate <code>x : X</code>, if<code>f x = y</code> continue with next <code>y</code>\".</p>",
        "id": 210918594,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1600802363
    },
    {
        "content": "<p>OK, so this will preclude me from using infinite boards. That's alright for now.</p>",
        "id": 210918875,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600802503
    }
]