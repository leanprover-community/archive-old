[
    {
        "content": "<p>I have the following lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_left_inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">injective</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Which is about the following definition in <code>data.equiv.mul_add.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_units</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span>\n</code></pre></div>\n\n\n<p>Which references from the same file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mul_left</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">perm</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel_left</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>My natural inclination is to expand definitions and introduce variables, so I applied intros. The tactic state after <code>intros</code> is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">a₁a₂</span><span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"n\">a₂</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n</code></pre></div>\n\n\n<p>If I apply <code>unfold equiv.mul_left at a</code> I get the tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">a₁a₂</span><span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n</code></pre></div>\n\n\n<p>I'm not sure how to move on from this. What I just want to say is \"unfold the application of<code>mul_left</code> to a1 and a2, getting rid of all the coercions, to get the goal <code>forall x,  a1 * x = a2 * x \\to a1 = a2</code>\". I'm not sure how to do that.</p>",
        "id": 209160880,
        "sender_full_name": "Chris M",
        "timestamp": 1599279674
    },
    {
        "content": "<p><code>a</code> here is an equation between functions, right?</p>",
        "id": 209161760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599281635
    },
    {
        "content": "<p>so you could <code>replace a := congr_fun a</code></p>",
        "id": 209161803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599281669
    },
    {
        "content": "<p>It gives me </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">congr_fun</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n</code></pre></div>",
        "id": 209207064,
        "sender_full_name": "Chris M",
        "timestamp": 1599363242
    },
    {
        "content": "<p>Oh, the problem is that <code>mul_left</code> is producing a <code>perm</code>, not a function, so it's not something we can feed into <code>congr_fun</code>.</p>",
        "id": 209208781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599366776
    },
    {
        "content": "<p>Instead, if you find the function that turns <code>perm</code> into a function (or write a lambda containing a coercion, perhaps), you can use <code>congr_arg F a</code>, and <em>then</em> feed that into <code>congr_fun</code>.</p>",
        "id": 209208830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599366855
    },
    {
        "content": "<p>(Let us know if that is too cryptic! :-)</p>",
        "id": 209208832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599366865
    },
    {
        "content": "<p>Or maybe there is a <code>perm.ext_iff</code>, that you could rewrite with?</p>",
        "id": 209209589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599368404
    },
    {
        "content": "<p>If it isn't there, it should be created.</p>",
        "id": 209209595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599368415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , do you mean something like this: <code>lemma perm.ext_iff {σ τ :equiv.perm α} : σ = τ ↔ ∀ x, σ.to_fun x = τ.to_fun x := sorry</code></p>",
        "id": 209254037,
        "sender_full_name": "Chris M",
        "timestamp": 1599449234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , if you have a perm <code>t</code>, then <code>t.to_fun</code> should give you the function, right? <code>to_fun</code> is the field defined in the <code>perm</code> structure. But I don't see how to use this.</p>\n<p>(Btw random question, why isn't <code>perm</code> a typeclass instead of a structure? <code>perm</code> is defined as <code>@[reducible] def perm (α : Sort*) := equiv α α</code>, where <code>equiv</code> is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">inhabited</span><span class=\"o\">]</span>\n<span class=\"kn\">structure</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span>   <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span>  <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">right_inverse</span> <span class=\"n\">inv_fun</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209254156,
        "sender_full_name": "Chris M",
        "timestamp": 1599449470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209254037\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> , do you mean something like this: <code>lemma perm.ext_iff {σ τ :equiv.perm α} : σ = τ ↔ ∀ x, σ.to_fun x = τ.to_fun x := sorry</code></p>\n</blockquote>\n<p>Yes, but you should leave out the <code>.to_fun</code> part out of the syntax. Lean will then automatically coerce the <code>perm</code> to a function, and since the rest of the library expects these coercions, you will have an easier time. (E.g., <code>rw</code> with some lemma will not work if you have <code>.to_fun</code> instead of the coercion.)</p>",
        "id": 209255614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599452036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> About \"why isn't it a typeclass instead of a structure?\"</p>\n<p>If you have <code>class foo (X : Type) := sorry</code>, then the way the system works is that you are only allowed to have 1 <code>instance quux : foo X</code> per type <code>X</code>. If you have more than one, you'll get into trouble. Since most types have more than one permutation, <code>perm</code> shouldn't be a class, but just a structure.</p>",
        "id": 209255763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599452204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209255614\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209254037\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> , do you mean something like this: <code>lemma perm.ext_iff {σ τ :equiv.perm α} : σ = τ ↔ ∀ x, σ.to_fun x = τ.to_fun x := sorry</code></p>\n</blockquote>\n<p>Yes, but you should leave out the <code>.to_fun</code> part out of the syntax. Lean will then automatically coerce the <code>perm</code> to a function, and since the rest of the library expects these coercions, you will have an easier time. (E.g., <code>rw</code> with some lemma will not work if you have <code>.to_fun</code> instead of the coercion.)</p>\n</blockquote>\n<p>I've added a PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/4067\">https://github.com/leanprover-community/mathlib/pull/4067</a></p>",
        "id": 209342999,
        "sender_full_name": "Chris M",
        "timestamp": 1599536153
    },
    {
        "content": "<p>Btw what  I did for this is go through the entire sequence of \"making a PR\" in this link <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>. i.e. I downloaded an entire new copy of mathlib just for this two line change. Is that the right way to do it?</p>",
        "id": 209343119,
        "sender_full_name": "Chris M",
        "timestamp": 1599536292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209208830\">said</a>:</p>\n<blockquote>\n<p>Instead, if you find the function that turns <code>perm</code> into a function (or write a lambda containing a coercion, perhaps), you can use <code>congr_arg F a</code>, and <em>then</em> feed that into <code>congr_fun</code>.</p>\n</blockquote>\n<p>I'm not sure if this is what you mean, but when I do this : <code>replace a:= (congr_fun congr_arg (fun t:perm G, t.to_fun) a)</code>, it gives me an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">congr_fun</span> <span class=\"n\">congr_arg</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">congr_arg</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n</code></pre></div>\n\n\n<p>(Note that I just mindlessly executed what you suggested, since I don't really understand the idea of this)</p>",
        "id": 209343296,
        "sender_full_name": "Chris M",
        "timestamp": 1599536570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209343119\">said</a>:</p>\n<blockquote>\n<p>Btw what  I did for this is go through the entire sequence of \"making a PR\" in this link <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a>. i.e. I downloaded an entire new copy of mathlib just for this two line change. Is that the right way to do it?</p>\n</blockquote>\n<p>If you use <code>leanproject</code> then downloading such a copy is rather cheap (and you can remove it when the PR is merged).<br>\nBut you certainly don't <em>have</em> to do it that way. What's written there, is for people who don't have much experience with <code>git</code>.<br>\nIf you know your way around <code>git</code>, feel free to diverge from that path (-;</p>",
        "id": 209345781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599540895
    },
    {
        "content": "<p>In principal, you can do everything you want with a single clone of mathlib, using git branches, etc...</p>",
        "id": 209345794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599540921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209345794\">said</a>:</p>\n<blockquote>\n<p>In principal, you can do everything you want with a single clone of mathlib, using git branches, etc...</p>\n</blockquote>\n<p>What's the right way to deal with all the oleans? (When things go wrong, I commit my work, checkout master, <code>leanproject get-mathlib-cache</code>, then checkout my branch again.)</p>",
        "id": 209346010,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599541244
    },
    {
        "content": "<p>\"When things go wrong, ...\"<br>\nExactly for this reason I have something like 35 mathlib clones (-;</p>",
        "id": 209346026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541309
    },
    {
        "content": "<p>But there are git hooks (see <code>leanproject help</code>) that will save olean cache whenever you switch branches</p>",
        "id": 209346073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541332
    },
    {
        "content": "<p>(And restore the local cache when you switch back to a branch</p>",
        "id": 209346078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541344
    },
    {
        "content": "<p>Anyway, I don't use those. I just use the \"one-clone-per-branch\" strategy. (And for small PR, I break this rule.)</p>",
        "id": 209346090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541403
    },
    {
        "content": "<p>What goes wrong in particular is when I merge master, so then my oleans are stale and <code>lean</code> wants to recompile everything.  This dance seems to work out, but I was mostly guessing...</p>",
        "id": 209346222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599541569
    },
    {
        "content": "<p>Yup, I know what you mean <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 209346234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541615
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>git merge master\ngit checkout master\nleanproject get-cache\ngit checkout -\n</code></pre></div>",
        "id": 209346240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541635
    },
    {
        "content": "<p>(I still dream of hashing each lean file + the hashes of its imports, and a distributed cache of olean indexed by these hashes...)</p>",
        "id": 209347034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599542774
    },
    {
        "content": "<p>Oh that would be far less expensive in terms of storage I guess</p>",
        "id": 209348485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599545051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/simple.20proof.20with.20coercions/near/209208830\">said</a>:</p>\n<blockquote>\n<p>Instead, if you find the function that turns <code>perm</code> into a function (or write a lambda containing a coercion, perhaps), you can use <code>congr_arg F a</code>, and <em>then</em> feed that into <code>congr_fun</code>.</p>\n</blockquote>\n<p>I'm not sure if this is what you mean, but when I do this : <code>replace a:= (congr_fun congr_arg (fun t:perm G, t.to_fun) a)</code>, it gives me an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">congr_fun</span> <span class=\"n\">congr_arg</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">congr_arg</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">to_units</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_left</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n</code></pre></div>\n\n\n<p>(Note that I just mindlessly executed what you suggested, since I don't really understand the idea of this)</p>",
        "id": 209592260,
        "sender_full_name": "Chris M",
        "timestamp": 1599707889
    },
    {
        "content": "<p>Look at and understand the error</p>",
        "id": 209600214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599719414
    }
]