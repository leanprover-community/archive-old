[
    {
        "content": "<p>I've defined a way to construct a cyclic permutation, and would like to automatically prove the <code>nodup</code> of my cycle via <code>tactic.exact_dec_trivial</code>. But the way I've defined <code>cycle.perm</code> below means that in usage, I need to include a <code>_</code> for the auto_param. Is there a way to make it implicit?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.rotate</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.erase_dup</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_rotated</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">l.rotate</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l'</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"n\">is_rotated</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_rotated.setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">is_rotated</span><span class=\"o\">,</span> <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_rotated.perm</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists.elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hl</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">rotate_perm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_rotated.nodup_iff</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">nodup</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.perm.nodup_iff</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">form_perm</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">equiv.swap</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">l.rotate</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">tail.prod</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">form_perm_eq_of_is_rotated</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">form_perm</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">form_perm</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cycle</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_rotated.setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cycle</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">quot.mk</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nodup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot.lift_on</span> <span class=\"n\">s</span> <span class=\"n\">nodup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l₂</span><span class=\"o\">),</span> <span class=\"n\">propext</span> <span class=\"bp\">$</span> <span class=\"n\">e.nodup_iff</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nodup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot.rec_on_subsingleton</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">list.nodup_decidable</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm_aux</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quot.hrec_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">form_perm</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"n\">l₂</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_rotated.nodup_iff</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">heq_of_eq</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">form_perm_eq_of_is_rotated</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">}</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perm</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"n\">s</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.perm_aux</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cycle</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">perm</span> <span class=\"n\">_</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 234431102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618366661
    },
    {
        "content": "<p>Auto params have to be the last argument, so if you pass additional things after them you need the <code>_</code></p>",
        "id": 234431764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618367194
    },
    {
        "content": "<p>It should still trigger the tactic though</p>",
        "id": 234431797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618367227
    },
    {
        "content": "<p>So auto_param will never work cleanly with things that have a <code>coe_fn</code></p>",
        "id": 234431830,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618367260
    },
    {
        "content": "<p>Yeah, doing <code>_</code> triggers is fine</p>",
        "id": 234431844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618367281
    },
    {
        "content": "<p>You might be able to add <code>coe_fn</code> or a type ascription to split it into two applications, but that won't be shorter than what you have</p>",
        "id": 234431901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618367305
    },
    {
        "content": "<p>And why does something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nodup</span> <span class=\"n\">s</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.perm_aux</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>complain about ill-formed expressions? Is the <code>. tactic</code> syntax only allowed in explicit args?</p>",
        "id": 234432055,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618367481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> yes, as far as I'm aware, <code>h</code> needs to be explicit</p>",
        "id": 234441182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618376200
    },
    {
        "content": "<p><code>. tactic.*</code> makes the argument pseudo-implicit. If it's already implicit, how should Lean know whether you want it to deduce the argument by looking at the types, or by applying the tactic?</p>",
        "id": 234442700,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618377690
    }
]