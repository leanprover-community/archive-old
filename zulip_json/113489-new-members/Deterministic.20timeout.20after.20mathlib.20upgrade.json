[
    {
        "content": "<p>I have done a massive upgrade of mathlib yesterday on <a href=\"https://github.com/leanprover-community/mathlib/tree/acl-Wielandt\">branch#acl-Wielandt</a>, and many things that used to work ended up with a <em>Deterministic timeout</em>. I can't understand what happened. <br>\nI could arrange some stuff by splitting it into smaller lemmas, but now I'm stuck at the 3-line proof  of <code>is_maximal_stab'_temp </code>(see <a href=\"https://github.com/leanprover-community/mathlib/blob/ba7beaa6083cacd48a6878a8bd7d25464c285df6/acl-sandbox/group_theory/jordan/alternating-iwasawa.lean#L140\">https://github.com/leanprover-community/mathlib/blob/ba7beaa6083cacd48a6878a8bd7d25464c285df6/acl-sandbox/group_theory/jordan/alternating-iwasawa.lean#L140</a>) can't compile. Unfortunately, I don't see how to do a MWE.</p>\n<p>This stuff used a lot of <code>fintype</code>. May this deterministic timeout  be related to the introduction of <code>finite</code> ?</p>",
        "id": 295171595,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1661410364
    },
    {
        "content": "<p>I can give it a try.</p>",
        "id": 295173688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661411640
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 295176382,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1661413131
    },
    {
        "content": "<p>(I am willing to use <code>finite</code>, if needed, but a lot of stuff still relies on <code>fintype</code>…)</p>",
        "id": 295176444,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1661413162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Deterministic.20timeout.20after.20mathlib.20upgrade/near/295173688\">said</a>:</p>\n<blockquote>\n<p>I can give it a try.</p>\n</blockquote>\n<p>I haven't the impression to have done anything, but reboot the computer, and it seems to work better… Sorcery…</p>",
        "id": 295208215,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1661427008
    },
    {
        "content": "<p>Problem solved, although it will require a better understanding of what happens.<br>\nIt was apparently due to Lean being confused between an explicit instance of <code>[decidable_eq α]</code> and another one computed via classical.</p>\n<p>(The whole theory of permutations requires <code>decidable_eq α</code> on the type <code>α</code>, and this seems to be incompatible with what the classical Linter urges me to do…)</p>",
        "id": 295924886,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1661786667
    },
    {
        "content": "<p>Never <code>open_locale classical</code>, it's mostly deprecated.</p>",
        "id": 295950840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661791134
    },
    {
        "content": "<p>Thanks for the advice!</p>",
        "id": 296047108,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1661843426
    },
    {
        "content": "<blockquote>\n<p>Never open_locale classical, it's mostly deprecated.</p>\n</blockquote>\n<p>Has something changed recently to make it unnecessary, e.g. when dealing with lists or finsets of noncomputable objects?</p>",
        "id": 296084682,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1661860325
    },
    {
        "content": "<p>I wouldn't be as dogmatic as Kevin, but recently Eric fixed the priorities of the classical instances so that <code>classical</code> and <code>open_locale classical</code> aren't synonym of rapid death. In particular, it's now much easier to mix decidable and classical stuff, so <code>open_locale classical</code> is less useful (in the sense that it was a way to avoid that mixing).</p>",
        "id": 296084938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661860451
    }
]