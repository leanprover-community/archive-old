[
    {
        "content": "<p>How can I introduce new constants and propositions? For example, how to set x=5 or use h to name a proposition x=y (without claiming h is true or false)?</p>",
        "id": 240036468,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621854590
    },
    {
        "content": "<p>Can you give a more concrete example of what you mean? In a tactic proof you can write <code>let x  := 5</code> or <code>let h := x=y</code> but I'm not sure if that's what you mean.</p>",
        "id": 240036577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621854671
    },
    {
        "content": "<p>Here is a silly example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">:=</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span><span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then I got state: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">g</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>In the first goal, why did I get <code>h:g</code> instead of <code>h: y=x</code>. Can I somehow change h to <code>h: y=x</code>?</p>",
        "id": 240037495,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621855258
    },
    {
        "content": "<p>Enclose code in <code> ``` </code> triple back ticks (on their own lines)</p>",
        "id": 240037561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621855298
    },
    {
        "content": "<p><code>g</code> is defined to be the <em>type</em>, <code>y = x</code>, i.e. the true-false <em>statement</em> \"y = x\". We don't care if this is true or false, we're just defining the mathematical statement.</p>",
        "id": 240037749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621855414
    },
    {
        "content": "<p><code>g</code> is defined to be <code>y = x</code>, and the answer to \"why did I get <code>h : g</code> is \"because you did cases on <code>g</code>\". You can indeed change <code>h</code> to <code>h : y = x</code> using the <code>change</code> tactic. Try <code>change y = x at h</code></p>",
        "id": 240037894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621855506
    },
    {
        "content": "<p>Alternatively if you used <code>set g := y = x with hg</code> then you could <code>rw hg at h</code></p>",
        "id": 240038215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621855700
    },
    {
        "content": "<p>Thank you very much, Kevin!<br>\nIf I change the code to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">:=</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span><span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How can I close the first goal <code>⊢ y=5</code>?</p>",
        "id": 240038492,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621855918
    },
    {
        "content": "<p>I got it myself. I think<code>refl</code> does the job.</p>",
        "id": 240039007,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621856212
    },
    {
        "content": "<p>Yes, <code>let</code> is definitional. <code>y = 5</code> is true by definition of <code>y</code>, and <code>refl</code> closes goals of the form <code>A = B</code> if <code>A</code> and <code>B</code> have the same definition.</p>",
        "id": 240039139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621856287
    },
    {
        "content": "<p>This is why you can prove <code>n + 0 = n</code> by <code>refl</code> if <code>n</code> is a natural number, but you can't prove <code>0 + n = n</code> by <code>refl</code>.</p>",
        "id": 240039181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621856314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <br>\nIn the following example, how to introduce a new y in <code>\\R</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240045304,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621860098
    },
    {
        "content": "<p>Why would you want to introduce a variable without a definition?</p>",
        "id": 240045352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860123
    },
    {
        "content": "<p>I'm not sure this is ever the correct logical next step in a proof.</p>",
        "id": 240045408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860149
    },
    {
        "content": "<p>I suspect that any time you think you're doing that, you're just in the process of making a definition which you haven't spotted yet.</p>",
        "id": 240045475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860206
    },
    {
        "content": "<p>If you really want a variable without a definition, you can put it before the colon in the statement of the example. But you can see that it won't do you any good.</p>",
        "id": 240045535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860243
    },
    {
        "content": "<p>Or you could do <code>have y : \\R := 37</code> and because you used <code>have</code> not <code>let</code>, Lean will forget the value of <code>y</code> in the sense that it won't tell you what it is, even though secretly it will still be 37.</p>",
        "id": 240045643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860298
    },
    {
        "content": "<p>The reason I am interested in this is that in many math proofs, we start with something like \"fix an arbitrary y in some set...\"</p>",
        "id": 240045647,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621860300
    },
    {
        "content": "<p>Is that set non-empty?</p>",
        "id": 240045677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860315
    },
    {
        "content": "<p>non-empty like R</p>",
        "id": 240045710,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621860334
    },
    {
        "content": "<p>R is not a set in Lean</p>",
        "id": 240045727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860342
    },
    {
        "content": "<p>But if you have a type and a proof that it's nonempty, then you can choose an element of this type.</p>",
        "id": 240045809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/introduce.20new.20constants.20and.20propositions/near/240045647\">said</a>:</p>\n<blockquote>\n<p>The reason I am interested in this is that in many math proofs, we start with something like \"fix an arbitrary y in some set...\"</p>\n</blockquote>\n<p>This is an appealing-sounding belief, in the sense that it <em>sounds</em> like the kind of thing that one might do and which might be helpful, but it's not helpful for proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> so it might be worth coming back to this conversation only when you've found a situation where it <em>is</em> helpful.</p>",
        "id": 240045934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860457
    },
    {
        "content": "<p>In your case, you want to choose an arbitrary real number, and so as I say the way to do this is <code>have y : \\R := 37</code>. Then <code>y</code> will be 37 but you will not be able to access this proof, so as far as you are concerned <code>y</code> is an arbitrary real number.</p>",
        "id": 240046048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860518
    },
    {
        "content": "<p>If you don't like that, then you surely like the fact that you are not allowed to choose a random term of a type until you have proved that the type is nonempty. Without that hypothesis you would be able to prove false things. So before you can choose a random element of the real numbers, I would like you to supply me with a proof that the real numbers are nonempty. And the moment you name a real number I will let that be <code>y</code> but I won't tell you that this is what I did.</p>",
        "id": 240046165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860604
    },
    {
        "content": "<p>This sounds odd to you perhaps, but this is because you are working under the hypothesis that you are pretty sure that sometimes mathematicians say \"now let y in S be arbitrary\" whereas I am suggesting that actually they don't say this, except when they are in the middle of doing something else, and when you're doing the something else you'll have a \"for all y,...\" goal and you can do <code>intro y</code> to get the <code>y</code> which you believe should be available in general. <em>That</em> <code>y</code> is the kind of y which you are expecting to see, but as I say you can only see it in some wider context.</p>",
        "id": 240046407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860748
    },
    {
        "content": "<p>Yeah,x=x is just a silly theorem used as an example. What I am interested in general is,  in the proof of a theorem, how we can do something like \"let y be an element in R\" like we always do in a usual math proof. I think in a usual math proof if we suppose y to be in some set S but S is empty, then whatever results about y are vacuously true.</p>",
        "id": 240046646,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621860881
    },
    {
        "content": "<p>I told you: you write <code>have y : \\R := 37</code></p>",
        "id": 240046680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860907
    },
    {
        "content": "<blockquote>\n<p>like we always do in a usual math proof.</p>\n</blockquote>\n<p>Can you please show me a full \"usual math proof\" (in words, not in Lean) which involves choosing an arbitrary real number? Again I am saying that you <em>believe</em> that we \"always\" do this in a maths proof, but you have shown no examples of this yet, and you've just agreed that you don't need to do this when proving x=x. I'm arguing that we only ever do this in a context where the goal is \"for all y, ...\", and in this situation you do it by <code>intro y</code>.</p>",
        "id": 240046849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860991
    },
    {
        "content": "<p>In short, you only let y be random when you're trying to prove something for all y. You're trying to let y be random in a situation where we're not doing this, and so I can just let y be 37 and not tell you.</p>",
        "id": 240047085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/introduce.20new.20constants.20and.20propositions/near/240046407\">said</a>:</p>\n<blockquote>\n<p>This sounds odd to you perhaps, but this is because you are working under the hypothesis that you are pretty sure that sometimes mathematicians say \"now let y in S be arbitrary\" whereas I am suggesting that actually they don't say this, except when they are in the middle of doing something else, and when you're doing the something else you'll have a \"for all y,...\" goal and you can do <code>intro y</code> to get the <code>y</code> which you believe should be available in general. <em>That</em> <code>y</code> is the kind of y which you are expecting to see, but as I say you can only see it in some wider context.</p>\n</blockquote>\n<p>I think it would usually be the case you mentioned in this answer.</p>",
        "id": 240047098,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621861115
    },
    {
        "content": "<p>OK so the answer to your question is that you do it with <code>intro y</code>.</p>",
        "id": 240047138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861138
    },
    {
        "content": "<p>But that it will only work if the goal is of an appropriate form.</p>",
        "id": 240047168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861152
    },
    {
        "content": "<p>And what I am trying to teach is that if the goal is not of this form, then you never want to do what you think you want to do. You only do it when you are in the middle of defining a function or proving a theorem for all real numbers.</p>",
        "id": 240047260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861202
    },
    {
        "content": "<p>Thanks for your explanations!</p>",
        "id": 240047470,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621861264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/introduce.20new.20constants.20and.20propositions/near/240047260\">said</a>:</p>\n<blockquote>\n<p>And what I am trying to teach is that if the goal is not of this form, then you never want to do what you think you want to do. You only do it when you are in the middle of defining a function or proving a theorem for all real numbers.</p>\n</blockquote>\n<p>I think when we do say \"let y be in R...\", we are indeed in these cases.</p>",
        "id": 240047819,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621861414
    },
    {
        "content": "<p>Alex, can you name a specific proof where you do this and you're not implicitly trying to prove a forall?</p>",
        "id": 240048132,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621861588
    },
    {
        "content": "<p>I think the easy examples currently in my head can all be summarized into the cases Kevin mentioned.</p>",
        "id": 240048377,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621861711
    },
    {
        "content": "<p>Please share it if you get any interested one.</p>",
        "id": 240048625,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621861829
    }
]