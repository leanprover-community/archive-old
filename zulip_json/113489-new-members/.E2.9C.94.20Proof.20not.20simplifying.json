[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Dfa</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"c1\">-- Initial State</span>\n  <span class=\"n\">program</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sigma</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"c1\">-- Generating program</span>\n  <span class=\"n\">final</span>   <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- Final states</span>\n\n<span class=\"c1\">-- It does not reduces inside the tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">dfa</span> <span class=\"o\">:</span> <span class=\"n\">Dfa</span> <span class=\"n\">Alpha</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">program</span> <span class=\"o\">:=</span> <span class=\"n\">prog</span><span class=\"o\">,</span> <span class=\"n\">final</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AcceptedLang</span> <span class=\"o\">[</span><span class=\"n\">Alpha.a</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span><span class=\"o\">]</span> <span class=\"n\">dfa</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">extendedProgram</span><span class=\"o\">,</span> <span class=\"n\">Set.in</span><span class=\"o\">]</span>\n       <span class=\"c1\">-- tactic state: Dfa.final dfa (Dfa.program dfa (Dfa.program dfa dfa.state Alpha.a) Alpha.b)</span>\n        <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>Why when i put the value inside the type it works it but does not?</p>",
        "id": 279591586,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650482713
    },
    {
        "content": "<p>Can you paste the definition of <code>Set</code> as well?</p>",
        "id": 279591951,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650482913
    },
    {
        "content": "<p>For example, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Std.HashSet</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Dfa</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"c1\">-- Initial State</span>\n  <span class=\"n\">program</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sigma</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"c1\">-- Generating program</span>\n  <span class=\"n\">final</span>   <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- Final states</span>\n</code></pre></div>",
        "id": 279592385,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650483152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Set.in</span> <span class=\"o\">(</span><span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"n\">elem</span>\n</code></pre></div>",
        "id": 279592439,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650483184
    },
    {
        "content": "<p>I couldn't understand your question</p>\n<blockquote>\n<p>Why when i put the value inside the type it works it but does not?</p>\n</blockquote>\n<p>What do you mean? Your code now causes two errors</p>",
        "id": 279592816,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650483369
    },
    {
        "content": "<p>I guess it's missing important parts of the code. Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 279593238,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650483594
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set.in</span> <span class=\"o\">(</span><span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"n\">elem</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">a</span> <span class=\"s2\">\"|\"</span> <span class=\"n\">b</span> <span class=\"s2\">\"}\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"n\">a</span> <span class=\"s2\">\"∈\"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.in</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Dfa</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"c1\">-- Initial State</span>\n  <span class=\"n\">program</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sigma</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"c1\">-- Generating program</span>\n  <span class=\"n\">final</span>   <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- Final states</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extendedProgram</span> <span class=\"o\">:</span> <span class=\"n\">Dfa</span> <span class=\"n\">σ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dfa</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">[]</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dfa</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">extendedProgram</span> <span class=\"n\">dfa</span> <span class=\"o\">(</span><span class=\"n\">dfa.program</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsAccepted</span> <span class=\"o\">(</span><span class=\"n\">lang</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dfa</span><span class=\"o\">:</span> <span class=\"n\">Dfa</span> <span class=\"n\">σ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">extendedProgram</span> <span class=\"n\">dfa</span> <span class=\"n\">dfa.state</span> <span class=\"n\">lang</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">dfa.final</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Alpha</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prog</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Alpha</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Alpha.a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Alpha.a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Alpha.a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsAccepted</span> <span class=\"o\">[</span><span class=\"n\">Alpha.a</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">program</span> <span class=\"o\">:=</span> <span class=\"n\">prog</span><span class=\"o\">,</span> <span class=\"n\">final</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"o\">}}</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">extendedProgram</span><span class=\"o\">,</span> <span class=\"n\">Set.in</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This code is working, I think that in lean4 it type checks at least but when i try to move this DFA record from the type to a definition it stops working.</p>",
        "id": 279593618,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650483775
    },
    {
        "content": "<p>But when i try to move the DFA to a def it doesnt type checks anymore</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfa</span> <span class=\"o\">:</span> <span class=\"n\">Dfa</span> <span class=\"n\">Alpha</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">program</span> <span class=\"o\">:=</span> <span class=\"n\">prog</span><span class=\"o\">,</span> <span class=\"n\">final</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsAccepted</span> <span class=\"o\">[</span><span class=\"n\">Alpha.a</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span><span class=\"o\">]</span> <span class=\"n\">dfa</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">extendedProgram</span><span class=\"o\">,</span> <span class=\"n\">Set.in</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"c1\">-- unsolved goals ⊢ Dfa.final dfa (Dfa.program dfa (Dfa.program dfa dfa.state Alpha.a) Alpha.b)</span>\n</code></pre></div>",
        "id": 279593899,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650483929
    },
    {
        "content": "<p>You need to tell Lean to use <code>dfa</code> as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsAccepted</span> <span class=\"o\">[</span><span class=\"n\">Alpha.a</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span><span class=\"o\">]</span> <span class=\"n\">dfa</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">extendedProgram</span><span class=\"o\">,</span> <span class=\"n\">Set.in</span><span class=\"o\">,</span> <span class=\"n\">dfa</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279594319,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650484156
    },
    {
        "content": "<p>In fact, these are enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsAccepted</span> <span class=\"o\">[</span><span class=\"n\">Alpha.a</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">program</span> <span class=\"o\">:=</span> <span class=\"n\">prog</span><span class=\"o\">,</span> <span class=\"n\">final</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"o\">}}</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.in</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dfa</span> <span class=\"o\">:</span> <span class=\"n\">Dfa</span> <span class=\"n\">Alpha</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">program</span> <span class=\"o\">:=</span> <span class=\"n\">prog</span><span class=\"o\">,</span> <span class=\"n\">final</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsAccepted</span> <span class=\"o\">[</span><span class=\"n\">Alpha.a</span><span class=\"o\">,</span> <span class=\"n\">Alpha.b</span><span class=\"o\">]</span> <span class=\"n\">dfa</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">proof</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.in</span><span class=\"o\">,</span> <span class=\"n\">dfa</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279594471,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650484215
    },
    {
        "content": "<p>Oh thx</p>",
        "id": 279594575,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650484274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481858\">Chiyoku</span> has marked this topic as resolved.</p>",
        "id": 279594694,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650484330
    }
]