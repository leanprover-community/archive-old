[
    {
        "content": "<p>Can anyone point me to the category of sets in Lean? I want to define an affine group scheme as a representable functor from k-algebras to sets. Thanks!</p>",
        "id": 282178321,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652393563
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.types\">docs#category_theory.types</a></p>",
        "id": 282178809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652393872
    },
    {
        "content": "<p>(because lean uses type theory not set theory)</p>",
        "id": 282179579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652394340
    },
    {
        "content": "<p>Thank you! trying to get it to work. What's wrong with this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category_theory.types</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"c1\">-- function expected at</span>\n<span class=\"c1\">--   category_theory.types</span>\n<span class=\"c1\">-- term has type</span>\n  <span class=\"c1\">-- category_theory.category (Type ?)</span>\n</code></pre></div>",
        "id": 282180231,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652394737
    },
    {
        "content": "<p>The category of type is <code>Type*</code>. No need to call <code>category_theory.types</code> directly. Typeclass search will do it for you.</p>",
        "id": 282180568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652394974
    },
    {
        "content": "<p>Ah I see. What about this variable declaration? I want <code>K_alg</code> to be the category of K-algebras.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K_alg</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Algebra.category_theory.category</span> <span class=\"n\">K</span> <span class=\"n\">K_alg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 282180841,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652395166
    },
    {
        "content": "<p>This mistake seems analogous to trying to use <code>int.comm_ring</code> to talk about the ring of integers, when the correct spelling is just <code>int</code></p>",
        "id": 282181026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652395269
    },
    {
        "content": "<p>You're doing the same mistake here. Simply delete <code>K_alg</code> and use <code>Algebra K</code> instead.</p>",
        "id": 282181152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652395354
    },
    {
        "content": "<p>To make an analogy; these typeclass <code>instance</code>s are \"painting\" structure onto another type. What you're doing is trying to refer to the paint, <code>int.comm_ring : ring int</code>; but you should be referring to the thing being painted, <code>int : Type</code></p>",
        "id": 282181240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652395419
    },
    {
        "content": "<p>Sorry but I am not understanding. This does not seem to declare <code>K_alg</code> as the category of K-algebras:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K_alg</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">affine_scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">:</span> <span class=\"n\">K_alg</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"c1\">-- does not work</span>\n<span class=\"o\">(</span><span class=\"n\">representable</span> <span class=\"o\">:</span> <span class=\"n\">scheme.representable</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282181797,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652395867
    },
    {
        "content": "<p>This seems to almost work! But not quite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K_alg</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">K_alg</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K_alg</span><span class=\"o\">]</span> <span class=\"c1\">-- ⊢ comm_ring K_alg</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">affine_scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">:</span> <span class=\"n\">K_alg</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">representable</span> <span class=\"o\">:</span> <span class=\"n\">scheme.representable</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282182158,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652396135
    },
    {
        "content": "<p>Write <code>Algebra K</code> where you are writing <code>K_alg</code></p>",
        "id": 282182242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652396171
    },
    {
        "content": "<p>Ah, it works!!! Thank you</p>",
        "id": 282182312,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652396223
    },
    {
        "content": "<p>You can tell immediately that you've gone wrong if you write <code>[Foo X]</code> when <code>Foo</code> is not a <code>class</code></p>",
        "id": 282182440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652396328
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/Algebra\">docs#Algebra</a> is not a class)</p>",
        "id": 282182478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652396364
    },
    {
        "content": "<p>I am trying to do the same with <code>Group</code> to get the category of groups but it throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">affine_group_scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">Group</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">representable</span> <span class=\"o\">:</span> <span class=\"n\">scheme.representable</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282183407,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652396937
    },
    {
        "content": "<p>What does it mean for a functor to <code>Group</code> to be representable?<br>\nYou want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">affine_group_scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">Group</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">representable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">representable</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282184323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652397661
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> if this is related to your work on Hopf algebras, then you should know that <code>Algebra k</code> is the category of possibly noncommutative algebras.</p>",
        "id": 282185877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652399083
    },
    {
        "content": "<p>AH, thanks! I do want my algebras to be commutative. <br>\nI am not familiar with the <code>&gt;&gt;&gt;</code> notation. The definition of \"representable\" I am familiar with is that it is the hom-set out of an object. So I want to say that the functor <code>scheme</code> looks like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">_</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(A,\\_)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mclose\">)</span></span></span></span> for some K-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 282186652,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652399722
    },
    {
        "content": "<p>(I also messed up the op thing, it should not be there)</p>",
        "id": 282186745,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652399788
    },
    {
        "content": "<p>A Hom set (i.e. Hom type) is not a Hom group ;)</p>",
        "id": 282187248,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652400130
    },
    {
        "content": "<p>Right. Is <code>⋙</code> the composition of functors?</p>",
        "id": 282187308,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652400180
    },
    {
        "content": "<p>and <code>forget _</code> -- the forgetful functor from Groups to Sets?</p>",
        "id": 282187344,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652400221
    },
    {
        "content": "<p>Yes, and <code>forget _</code> is the forgetful functor from a concrete category. If you want to be explicit about it, you can write <code>forget Group</code> in this case, but lean can figure that out from context</p>",
        "id": 282187397,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652400249
    },
    {
        "content": "<p>I've never had to think about this detail as a mathematician. Thank you!<br>\nIs there a category of commutative algebras in Lean? If not, is there a way to easily define one?</p>",
        "id": 282187608,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652400373
    },
    {
        "content": "<p>I don't know whether this category is in mathlib. Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/CommAlgebra\">docs#CommAlgebra</a> ?</p>",
        "id": 282187632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652400409
    },
    {
        "content": "<p>Bah, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.under\">docs#category_theory.under</a> along with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/CommRing\">docs#CommRing</a></p>",
        "id": 282187693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652400466
    },
    {
        "content": "<p>I don't understand what that does. I can simply require that the representative objective of <code>scheme</code> is a commutative algebra</p>",
        "id": 282187934,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652400723
    },
    {
        "content": "<p>Of course you can define whatever you want, but a <code>k</code>-scheme can usually be viewed as a presheaf on the category of <em>commutative</em> <code>k</code>-algebras.</p>",
        "id": 282188434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652401148
    },
    {
        "content": "<p>I agree with you. I just don't understand how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.under\">docs#category_theory.under</a> helps.</p>",
        "id": 282188861,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652401638
    },
    {
        "content": "<p>The category of commutative <code>k</code> algebras is the category of commutative rings with a morphism from <code>k</code>, i.e. the under category associated to <code>k</code> as an object of <code>CommRing</code>.</p>",
        "id": 282188991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652401729
    }
]