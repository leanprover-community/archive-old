[
    {
        "content": "<p>Hello,<br>\nSometimes I get real/complex algebraic expressions like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>that are obviously equal and that I know I would be able to show are equal if I could rewrite them to some canonical form. For example, if I could automatically</p>\n<ol>\n<li>distribute multiplication over addition</li>\n<li>sort the factors of each term (and collect the numerical coefficients)</li>\n<li>sort the terms (and collect terms that only have different coefficients).<br>\nIs it possible to write something like this in Lean? If so, is such a thing maybe already implemented?</li>\n</ol>\n<p>I have written something like this in Mathematica once, but there I was able to get the names of variables as strings which I don't know if you can in Lean. Also, in Mathematica, addition is implemented like <code>Plus : [expr] -&gt; expr</code> and automatically unpacks nested additions, while in Lean I guess you're stuck with the binary operator and have to use the associativity property explicitly each time?</p>",
        "id": 290906228,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1658847699
    },
    {
        "content": "<p>You could try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring_nf\">tactic#ring_nf</a>, this does basically the three things you listed.</p>",
        "id": 290906873,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658847959
    },
    {
        "content": "<p>If your expression contains more complicated divisions, you might want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp\">tactic#field_simp</a> first, because <code>ring</code> / <code>ring_nf</code> don't know how to deal with those.</p>",
        "id": 290907047,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658848023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20real.2Fcomplex.20expressions/near/290906873\">said</a>:</p>\n<blockquote>\n<p>You could try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring_nf\">tactic#ring_nf</a>, this does basically the three things you listed.</p>\n</blockquote>\n<p>Sorry, <code>ring_nf</code> is documented as part of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a>.</p>",
        "id": 290907480,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658848182
    },
    {
        "content": "<p>To illustrate what Anne is explaining, here is a proof of your equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 290907722,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1658848272
    },
    {
        "content": "<p>Okay thank you, I guess <code>ring_nf</code> is exactly what I was looking for.</p>",
        "id": 290908035,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1658848398
    },
    {
        "content": "<p>I'm guessing that, since you only have binary addition in Lean, <code>ring</code> and <code>ring_nf</code> must be more advanced than a tactic <code>simp [lemma1, lemma2, ...]</code></p>",
        "id": 290908882,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1658848751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504661\">Simon Jacobsson</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20real.2Fcomplex.20expressions/near/290908882\">said</a>:</p>\n<blockquote>\n<p>I'm guessing that, since you only have binary addition in Lean, <code>ring</code> and <code>ring_nf</code> must be more advanced than a tactic <code>simp [lemma1, lemma2, ...]</code></p>\n</blockquote>\n<p>Indeed! They represent expressions as multivariate polynomials in Horner normal form.</p>",
        "id": 290913514,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658850609
    },
    {
        "content": "<p>What do you mean by \"you only have binary addition in lean\"? <code>ring</code> is what you want in this example, not <code>ring_nf</code>, but it works roughly as you have described (except it works on multivariate polynomials so it also has to sort monomials)</p>",
        "id": 290913614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658850655
    },
    {
        "content": "<p>If you want the gory details, see <a href=\"http://www.cs.ru.nl/~freek/courses/tt-2014/read/10.1.1.61.3041.pdf\">Proving Equalities in a Commutative Ring Done Right in Coq</a> :)</p>",
        "id": 290913672,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658850678
    },
    {
        "content": "<p>and then cross out the word Coq and write Lean :)</p>",
        "id": 290913756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658850706
    },
    {
        "content": "<p>Although you can get pretty far if you don't care about coefficients, with <code>simp [add_assoc, mul_assoc, add_comm, add_left_comm, mul_comm, mul_left_comm]</code> (or is that <code>add_right_comm</code>? I always forget)</p>",
        "id": 290913848,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658850727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20real.2Fcomplex.20expressions/near/290913756\">said</a>:</p>\n<blockquote>\n<p>and then cross out the word Coq and write Lean :)</p>\n</blockquote>\n<p>Well, Lean doesn't even do the proof by reflection part <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 290913907,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658850753
    },
    {
        "content": "<p>true, it's actually quite a bit different such that you might only call the original coq implementation an inspiration rather than an actual port</p>",
        "id": 290913998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658850801
    },
    {
        "content": "<p>(it is <code>add_left_comm</code> btw)</p>",
        "id": 290914149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658850854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20real.2Fcomplex.20expressions/near/290913614\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"you only have binary addition in lean\"? </p>\n</blockquote>\n<p>I just meant that, in e.g. Mathematica, the <code>+</code> takes a list as an argument and <code>a + b</code> is shorthand for <code>Plus [a, b]</code>.</p>",
        "id": 290914151,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1658850855
    },
    {
        "content": "<p>If you <code>simp [add_assoc, add_left_comm, add_comm]</code> like anne suggests, you will get an effect equivalent to mathematica's <code>Plus [a, b, c, ...]</code>: the entire addition chain will get sorted by the term order</p>",
        "id": 290914323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658850934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20real.2Fcomplex.20expressions/near/290913672\">said</a>:</p>\n<blockquote>\n<p>If you want the gory details, see <a href=\"http://www.cs.ru.nl/~freek/courses/tt-2014/read/10.1.1.61.3041.pdf\">Proving Equalities in a Commutative Ring Done Right in Coq</a> :)</p>\n</blockquote>\n<p>I had already opened it in a different tab :)</p>",
        "id": 290914375,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1658850958
    },
    {
        "content": "<p>the reason this doesn't really work and why <code>ring</code> is a separate mechanism is that it might not sort <code>-a</code> next to <code>a</code> in order to cancel them</p>",
        "id": 290914453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658850978
    },
    {
        "content": "<p>or more generally, <code>2 * a</code> and <code>4 * a</code> and so on</p>",
        "id": 290914491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658851004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504661\">Simon Jacobsson</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20real.2Fcomplex.20expressions/near/290914151\">said</a>:</p>\n<blockquote>\n<p>I just meant that, in e.g. Mathematica, the <code>+</code> takes a list as an argument and <code>a + b</code> is shorthand for <code>Plus [a, b]</code>.</p>\n</blockquote>\n<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sum\">docs#list.sum</a>. For example, <code>list.sum [a, b, c]</code> is definitionally equal to <code>0 + a + b + c</code>, although <code>list.sum</code> doesn't go well with <code>ring</code></p>",
        "id": 290915285,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658851296
    },
    {
        "content": "<p><del>I don't think that's what it's definitionally equal to, I think it's more like <code>a + (b + (c + 0)))</code> (xref <a href=\"https://github.com/leanprover-community/mathlib/pull/161\">#161</a>)</del></p>",
        "id": 290947692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658865438
    }
]