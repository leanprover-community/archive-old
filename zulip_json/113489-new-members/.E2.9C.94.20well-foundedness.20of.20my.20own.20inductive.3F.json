[
    {
        "content": "<p>How can I show that an inductive I defined myself is well-founded (i.e. values may not contain themselves)? Is that even true in general? (I know that in Haskell it would not be true...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mystuff</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mystuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">otherOp</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mystuff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mystuff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">claim</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n_is_nss</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ false</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273616965,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646129701
    },
    {
        "content": "<p>Do it by induction on <code>n</code>.</p>",
        "id": 273617365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646129903
    },
    {
        "content": "<p>If you know how to prove <code>n ≠ succ n</code>, then you should be able to do this.</p>",
        "id": 273617398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646129930
    },
    {
        "content": "<p>equation compiler can do most of the work for you:)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">claim</span> <span class=\"bp\">$</span> <span class=\"n\">op.inj</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 273617682,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646130053
    },
    {
        "content": "<p>If you are interested in what is going on under the hood you can read <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">this</a>. In practice constructors are always injective and this is essentially an axiom.</p>",
        "id": 273618333,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646130325
    },
    {
        "content": "<p>Nice, many thanks to all three of you :)</p>",
        "id": 273619517,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646130911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 273619527,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646130915
    },
    {
        "content": "<p>Lean 4's equation compiler recently got the ability to do acyclicity proofs on its own, so the equivalent proof in lean 4 is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 273723984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646175256
    }
]