[
    {
        "content": "<p>To answer my own question, after a bit of experimentation, it seems to be the former.</p>",
        "id": 252131556,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1630909180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 252131563,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630909189
    },
    {
        "content": "<p>So clarify for me. If repeat encounters a state where all goals are solved, and I call try something on that state, will repeat loop forever? It doesn't know even that the state is done?</p>",
        "id": 253897305,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003199
    },
    {
        "content": "<p>Presumably one could fix this by making the first tactic in the repeat block a tactic that fails iff the state is done. Is there a tactic like that?</p>",
        "id": 253897368,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003265
    },
    {
        "content": "<p><code>repeat { t }</code> calls <code>t</code> until it fails</p>",
        "id": 253897382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003291
    },
    {
        "content": "<p>if <code>t</code> fails on no goals, then it will stop</p>",
        "id": 253897396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003311
    },
    {
        "content": "<p>Maybe <code>fail_if_success done</code> is what's needed at the top then?</p>",
        "id": 253897402,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003321
    },
    {
        "content": "<p>sure</p>",
        "id": 253897410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003341
    },
    {
        "content": "<p>What is the reason for the <code>done &lt;|&gt;</code> here?</p>",
        "id": 253897468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003390
    },
    {
        "content": "<p>couldn't you just get rid of that?</p>",
        "id": 253897470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003391
    },
    {
        "content": "<p>most regular tactics fail on no goals</p>",
        "id": 253897481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003408
    },
    {
        "content": "<p>Well in cases where the simplifications solved the goal, I didn't want the failure of the cases to revert that solution.</p>",
        "id": 253897582,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003548
    },
    {
        "content": "<p>you could do something like <code>repeat { id { simp, try { clear } } &lt;|&gt;  id { cases; rw } }</code></p>",
        "id": 253897676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003657
    },
    {
        "content": "<p>Now that I think about it, what you're saying doesn't jive with the other things I've seen. Based on what you were saying, my code block should have looped forever no matter what, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">integral_domain_simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">done</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">cases_type</span> <span class=\"n\">or</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Was working for some of my goals.</p>",
        "id": 253897695,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003703
    },
    {
        "content": "<p>Can I get a definitive answer to my earlier question? You said \"If <code>t</code> fails on no goals, it will stop\". I want to know what happens when <code>t</code> succeeds on no goals.</p>",
        "id": 253897779,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003815
    },
    {
        "content": "<p>it will not stop</p>",
        "id": 253897784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003826
    },
    {
        "content": "<p><code>repeat</code> has a very simple definition</p>",
        "id": 253897787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003835
    },
    {
        "content": "<p>it's just a while loop</p>",
        "id": 253897833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632003853
    },
    {
        "content": "<p>That can't be right,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">integral_domain_simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">done</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">cases_type</span> <span class=\"n\">or</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Succeeds in resolving my goal completely in another part of my code.</p>",
        "id": 253897887,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632003942
    },
    {
        "content": "<p>hm, actually <code>repeat</code>  is a little more complicated. <code>iterate { tac }</code> is just a while loop but <code>repeat { tac }</code> is more like <code>try { any_goals { tac; repeat { tac } } }</code></p>",
        "id": 253898059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004160
    },
    {
        "content": "<p>which means that if <code>tac</code> produces no goals then <code>repeat</code> will stop without re-running <code>tac</code></p>",
        "id": 253898167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004281
    },
    {
        "content": "<p>because it calls <code>tac</code> on all goals produced by <code>tac</code></p>",
        "id": 253898176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004295
    },
    {
        "content": "<p>Ok,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">iterate</span> <span class=\"o\">{</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">integral_domain_simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"n\">done</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">cases_type</span> <span class=\"n\">or</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Also succeeds in resolving my goal. So that can't be a true while loop either.</p>",
        "id": 253898344,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632004477
    },
    {
        "content": "<p>does it take a really long time?</p>",
        "id": 253898467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004642
    },
    {
        "content": "<p>Nope</p>",
        "id": 253898470,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632004649
    },
    {
        "content": "<p>It's not actually an infinite loop, it calls <code>tac</code> at most 100000 times</p>",
        "id": 253898476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004662
    },
    {
        "content": "<p>It takes about a minute</p>",
        "id": 253898529,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632004700
    },
    {
        "content": "<p>but there is no goal handling or funny business though, so I think it is actually doing that</p>",
        "id": 253898534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004709
    },
    {
        "content": "<p><code>simp</code> will fail right away without any goals, and <code>done</code> will also succeed immediately, so I guess it's not crazy that you can loop that many times in a minute</p>",
        "id": 253898569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004768
    },
    {
        "content": "<p>Yeah, I see, once there are no goals it just chews through the iterations.</p>",
        "id": 253898588,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632004799
    },
    {
        "content": "<p>(It could be an actual infinite loop but that can cause the server to hang)</p>",
        "id": 253898636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632004814
    },
    {
        "content": "<p>Let me put <code>fail_if_success done</code> in front and see if that causes less time</p>",
        "id": 253898650,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632004847
    },
    {
        "content": "<p>Yup, <code>fail_if_success { done, },</code> makes it take less time, mystery solved.</p>",
        "id": 253898778,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1632005021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 253899745,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632006179
    }
]