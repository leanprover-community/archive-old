[
    {
        "content": "<p>Hey, quick question. I was wondering if there was a canonical way to show that <code>i &lt; j</code> for two naturals <code>i</code> and <code>j</code> where their value is known.</p>\n<p>I know I can repeatedly apply <code>nat.le_of_succ_le_succ</code> and then use <code>nat.zero_le</code>, but that feels very cumbersome for proving something that's trivially true</p>",
        "id": 187777508,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581289531
    },
    {
        "content": "<p>Or rather the inverse of <code>le_of_succ_le_succ</code>, <code>succ_le_succ</code> I think?</p>",
        "id": 187777615,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581289607
    },
    {
        "content": "<p><code>norm_num</code></p>",
        "id": 187777702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289766
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">12345</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">67890</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 187777714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289802
    },
    {
        "content": "<p>NB it only works if i is actually less than j.</p>",
        "id": 187777780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289825
    },
    {
        "content": "<p><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n<p>I knew there had to be a better way</p>",
        "id": 187777782,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581289826
    },
    {
        "content": "<p>When I asked that question a couple of years ago, there wasn't ;-)</p>",
        "id": 187777810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289857
    },
    {
        "content": "<p>Hahahaha, glad to be here at Lean 3</p>",
        "id": 187777823,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581289872
    },
    {
        "content": "<p>I had Lean 3, it was just that <code>import tactic</code> imported far fewer tactics.</p>",
        "id": 187777859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289898
    },
    {
        "content": "<p>Ah gotcha</p>",
        "id": 187777871,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581289905
    },
    {
        "content": "<p>Also I finished Natural Number Game recently, I really like what you and Mohammed put together</p>",
        "id": 187777883,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581289921
    },
    {
        "content": "<p>Mathlib is a misnomer. It contains a whole bunch of other useful things too.</p>",
        "id": 187777922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289926
    },
    {
        "content": "<p>I'm sorry NNG looks so amateurish. We're both mathematicians ;-)</p>",
        "id": 187777943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289946
    },
    {
        "content": "<p><code>example : 5 &lt; 23 := dec_trivial </code></p>\n<p>The problem with that is it doesn't scale, because it does exactly what you were suggesting to do, so with 5-digit numbers things get a bit horrible.</p>",
        "id": 187777960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290015
    },
    {
        "content": "<p>I'm only looking to use it on small numbers</p>",
        "id": 187777962,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290031
    },
    {
        "content": "<p><code>dec_trivial</code> is a cool tactic. It says \"If this statement is decidable in the sense of logic, then decide it!\"</p>",
        "id": 187778006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290060
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"c1\">-- We define a score to be a vector of natural numbers of length n. Each value</span>\n  <span class=\"c1\">-- score_i corresponds to the number of violations that occurred in the ith</span>\n  <span class=\"c1\">-- constraint.</span>\n  <span class=\"n\">def</span> <span class=\"n\">score</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span> <span class=\"bp\">ℕ</span> <span class=\"n\">n</span>\n\n  <span class=\"c1\">-- We define an ordering on scores such that s₁ ≤ s₂ iff they are equal up to</span>\n  <span class=\"c1\">-- some index i, wherein s₁[i] ≤ s₂[i].</span>\n  <span class=\"n\">def</span> <span class=\"n\">score_le</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">score</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">score</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"n\">nth</span> <span class=\"n\">s1</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"bp\">≤</span> <span class=\"n\">nth</span> <span class=\"n\">s2</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n        <span class=\"n\">nth</span> <span class=\"n\">s1</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">nth</span> <span class=\"n\">s2</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>so long as score vectors stay small at least</p>",
        "id": 187778010,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290075
    },
    {
        "content": "<p>And there's a proof that <code>i&lt;j</code> is decidable, and indeed you sketched the proof above. So <code>dec_trivial</code> runs through that proof.</p>",
        "id": 187778014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290083
    },
    {
        "content": "<p><code>score</code>! Are you making a game? Lean pong would be cool.</p>",
        "id": 187778031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290105
    },
    {
        "content": "<p>Reducing from PCP into a model of representing phonology</p>",
        "id": 187778045,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290124
    },
    {
        "content": "<p>Maybe that's what kids want these days.</p>",
        "id": 187778062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290140
    },
    {
        "content": "<p>I'll pitch it to publishers</p>",
        "id": 187778071,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290152
    },
    {
        "content": "<p>\"It's a game where you do computability theory proofs\"</p>",
        "id": 187778129,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290173
    },
    {
        "content": "<p>Get CS undergrads to play it.</p>",
        "id": 187778148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290198
    },
    {
        "content": "<p><code>norm_num</code> does the more sensible thing of converting everything to binary and then working with it using more sensible (but still formally verified) algorithms.</p>",
        "id": 187778186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290255
    },
    {
        "content": "<p>When I asked the question you asked, there was <code>tactic.norm_num</code> but not <code>tactic.interactive.norm_num</code>, which meant that the guts were there but you couldn't use it in tactic mode. Within about a week Mario Carneiro had got it working in tactic mode and I could then do all the inequalities I wanted. There have been countless cases like this, where someone needs something technical, mentions it on the chat, and then someone else knocks it up. The whole thing is quite an amazing project.</p>",
        "id": 187778240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290392
    },
    {
        "content": "<p>Yeah, I've actually been getting in trying to contribute to Lean. I'm about to start work so I'll probably hold off until I become more situated therein but don't be surprised if you find my name on some commits <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 187778287,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290451
    },
    {
        "content": "<p>Also I don't know enough to ask the question right, but I'll try my best: is the <code>norm_num</code> / <code>dec_trivial</code> contrast at all related to the provably correct Lean kernel(?) I've heard about?</p>",
        "id": 187778297,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290494
    },
    {
        "content": "<p>or since <code>norm_num</code> is formally verified is it still considered to be a provably correct member of that kernel</p>",
        "id": 187778301,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290515
    },
    {
        "content": "<p><code>dec_trivial</code> is just using the stupidest algorithm. <code>norm_num</code> is doing a whole lot more work -- but it is still formally verified.</p>",
        "id": 187778343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290529
    },
    {
        "content": "<p>You would be able to tell if it were not formally verified -- the kernel would not let the proof go through.</p>",
        "id": 187778347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290548
    },
    {
        "content": "<p>Gotcha, very cool!</p>",
        "id": 187778359,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290625
    },
    {
        "content": "<p>So it's doing basic integer arithmetic but with a more optimised representation (Lean's definition of a natural is just some unwieldy linked list, so the first trick is to move to the <code>num</code> class which is naturals but stored in binary)</p>",
        "id": 187778403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290644
    },
    {
        "content": "<p>I vaguely remember a proof in my Formal Language Theory about how an n-ary representation with <code>n &gt; 1</code> is exponentially more efficient than unary</p>",
        "id": 187778415,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290684
    },
    {
        "content": "<p>so that makes sense</p>",
        "id": 187778416,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290688
    },
    {
        "content": "<p>It uses something which might be called reflection to construct a theorem about nums which is provably equivalent to the theorem about nats, and then proves the theorem about nums using formally verified but fast algorithms</p>",
        "id": 187778420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290694
    },
    {
        "content": "<blockquote>\n<p>It uses something which might be called reflection to construct a theorem about nums which is provably equivalent to the theorem about nats, and then proves the theorem about nums using formally verified but fast algorithms</p>\n</blockquote>\n<p>That's very cool</p>",
        "id": 187778424,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581290706
    },
    {
        "content": "<p>1,000,000 : nat is stored as <code>succ (succ (succ (succ ...</code> so it's horrible. But in num it's just essentially the binary string.</p>",
        "id": 187778436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290740
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">num</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">pos_num</span>\n</pre></div>\n\n\n<p>to see how it actually does it.</p>",
        "id": 187778489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290799
    },
    {
        "content": "<p>Hm. Looks like <code>lean-mode</code> is angry about <code>import tactic</code>. Time to try it in vscode and maybe spend my evening debugging elisp instead of writing proofs</p>",
        "id": 187778788,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581291357
    },
    {
        "content": "<p>I'm about to go to bed, but to avoid a misunderstanding: <code>norm_num</code> has nothing to do with the <code>num</code> type and isn't proof by reflection. It works on terms of type <code>nat</code> that have the structure of binary numerals. I'm happy to write more tomorrow if you're really curious (and I'm sure others could explain too).</p>",
        "id": 187779040,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581291813
    },
    {
        "content": "<blockquote>\n<p>Also I don't know enough to ask the question right, but I'll try my best: is the <code>norm_num</code> / <code>dec_trivial</code> contrast at all related to the provably correct Lean kernel(?) I've heard about?</p>\n</blockquote>\n<p>This is probably needless pedantry, but: the lean kernel is not provably correct, nor is it proven correct. It is rather the \"source of truth\" for all derivations done in lean, meaning that any tactics or terms that are created must pass through the kernel before being certified by it, so that as long as the kernel is correct and consistent then everything else is too. That's the \"small trusted kernel\" idea. (This does not mean that the kernel is bug-free, but we haven't found any soundness-critical issues in the history of lean AFAIK.)</p>",
        "id": 187779319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581292380
    },
    {
        "content": "<p>Definitely not needless pedantry, that's quite a big difference</p>",
        "id": 187779364,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581292449
    },
    {
        "content": "<p>were it proven correct then all proofs validated by lean would necessarily be valid vs. their validity being motivated, right?</p>",
        "id": 187779428,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581292520
    },
    {
        "content": "<p>the question is: valid with respect to what?</p>",
        "id": 187779437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581292538
    },
    {
        "content": "<p>Even if you prove the correctness of lean in some other formal prover, you are still trusting <em>that</em> prover as the source of truth. You can't eliminate this any more than you can do mathematics without any axioms</p>",
        "id": 187779514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581292602
    },
    {
        "content": "<p>Fair point. Are you getting after the fact that proofs in Lean are necessarily valid with respect to the Lean kernel? And discrepancies between the kernel and--</p>",
        "id": 187779526,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581292613
    },
    {
        "content": "<p>yeah I suppose that encapsulates it better than I could <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 187779537,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581292626
    },
    {
        "content": "<p>And even in constructing a proof outside of a formal prover, it's a motivation towards its correctness because of space for error?</p>",
        "id": 187779560,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581292669
    },
    {
        "content": "<p>You can also do a \"paper proof\" of correctness/consistency, and in fact I have done so for lean (see <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">https://github.com/digama0/lean-type-theory/releases/tag/v1.0</a>). But that doesn't cover implementation correctness, only soundness of the underlying type theory</p>",
        "id": 187779609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581292749
    },
    {
        "content": "<p>And it is still subject to general issues with paper proofs, namely gaps in mathematical presentation and human error</p>",
        "id": 187779615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581292784
    },
    {
        "content": "<p>I'll take a look at the proof. And that all makes sense</p>",
        "id": 187779869,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581292976
    },
    {
        "content": "<p>The proof shows that lean is consistent relative to ZFC with omega inaccessible cardinals (which are needed for the universe hierarchy)</p>",
        "id": 187779903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293033
    },
    {
        "content": "<p>I don't have a great mathematical maturity--I'm familiar with ZFC, but not with omega inaccessible carindals</p>",
        "id": 187779943,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581293066
    },
    {
        "content": "<p>What are they?</p>",
        "id": 187779961,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581293109
    },
    {
        "content": "<p>That's omega many (i.e. indexed by natural numbers) inaccessible cardinals, in an increasing sequence</p>",
        "id": 187779962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293110
    },
    {
        "content": "<p>Gotcha!</p>",
        "id": 187779971,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581293116
    },
    {
        "content": "<p>an inaccessible cardinal is basically a set which is large enough to model ZFC</p>",
        "id": 187779987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293136
    },
    {
        "content": "<p>so you have a whole sequence of nested models of ZFC</p>",
        "id": 187779998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293151
    },
    {
        "content": "<p>It's a pretty weak condition as far as large cardinal assumptions go</p>",
        "id": 187780050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293180
    },
    {
        "content": "<p>But ZFC itself doesn't cut it because lean can prove ZFC is consistent</p>",
        "id": 187780068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293223
    },
    {
        "content": "<p>Ah interesting, I wasn't aware that you could prove ZFC's consistency in Lean. That's very cool</p>",
        "id": 187780135,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581293312
    },
    {
        "content": "<p>See the file <code>set_theory.zfc</code> in mathlib, which explicitly constructs a model</p>",
        "id": 187780150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581293340
    },
    {
        "content": "<p>found it, will review later</p>",
        "id": 187780168,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1581293382
    }
]