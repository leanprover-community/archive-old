[
    {
        "content": "<p>This is in relation with PR <a href=\"https://github.com/leanprover-community/mathlib/pull/12459\">#12459</a> where I define a <code>finpartition</code> from <code>setoid.is_partition</code>.<br>\nFor future work, I need to access the <code>parts</code> field of the created <code>finpartition</code>. But I can't even manage to have Lean prove that it equals its value.</p>\n<p>Here is a MWE that shows my inability to understand these stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">struc</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">snd</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">struc_mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">struc</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">hab</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_fst</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">struc_mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- refl does not work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274273217,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646524880
    },
    {
        "content": "<p>This is because you used <code>lemma</code> to define <code>struc_mk</code>, which means the actual contents gets hidden, and only its type is available. I think this is for efficiency reasons. <code>refl</code> works if you use <code>def struc_mk</code> instead.</p>",
        "id": 274273441,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646525199
    },
    {
        "content": "<p>To expand on what Jakub says, proof-irrelevance implies that <code>struct_mk</code> does not remember how you defined the structure.  It just knows that you can construct a <code>struct</code> from the given data.</p>\n<p>In your structure, <code>struct</code> carries information (called often data) in its first two fields, and a prop in the <code>le</code> field.  You should always keep an eye out for making sure that the <em>data</em> fields are not \"swallowed up'\" inside a proof.</p>\n<p>As a mathematician, I had no explicit distinction in my head between data and props before using Lean.</p>",
        "id": 274290357,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646550651
    },
    {
        "content": "<p>To maybe drive better the point across, you could also prove <code>struct_mk</code> as follows (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">struc_mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">struc</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">rfl.le</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Both proofs are equivalent and you should therefore not be able to get what you want out of them!</p>",
        "id": 274293199,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646555298
    },
    {
        "content": "<p>Thank you! I understand better now. (As a mathematician, I have been taught to write maths so as never using something that is explained within a '\\begin{proof}… \\end{proof}', which is Bourbaki's proof irrelevance. While this is a good writing principle, which forces the writer to write down explicitly what they mean, and helps the reader tracking down what happened, usual mathematical practice has slightly stepped aside from this.)</p>",
        "id": 274297834,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646562038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, proof irrelevance does not imply what is happening here: <code>lemma</code> works the way it does because it assumes you're going to use it with <code>Prop</code> (as proof irrelevance makes it safe to do so), but it is not the mechanism of proof irrelevance itself</p>",
        "id": 274308066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646576062
    },
    {
        "content": "<p>Also worth noting that <code>#lint</code> will detect this mistake for you</p>",
        "id": 274308107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646576135
    },
    {
        "content": "<p>I wonder whether I misspoke or I am misunderstanding something.  What I meant is that, once the proof is complete, Lean \"forgets\" the actual details of the constructed <code>struct</code> in the lemma and only lets you use the information that having an <code>a</code> and a <code>b</code> in <code>ℕ</code> with <code>a ≤ b</code> is sufficient to construct some <code>struct</code>.</p>\n<p>Is this correct?</p>",
        "id": 274308861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646577122
    },
    {
        "content": "<p>As for linting, you could produce a <code>struct</code> with <code>fst := a+1</code> and <code>snd := b+1</code> and a correct proof of <code>le</code> and the linter would be happy.</p>",
        "id": 274308901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646577211
    },
    {
        "content": "<p>The linter will complain that the lemma should be a definition</p>",
        "id": 274309438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646577914
    },
    {
        "content": "<p>I was worried about the unused arguments and forgot about the lemma/def linter!</p>",
        "id": 274309773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646578371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> No, it is not true that lean \"forgets\" the contents of a <code>lemma</code></p>",
        "id": 274310517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646579206
    },
    {
        "content": "<p>and the data being proof relevant is a function only of the type, not whether it is marked as <code>lemma</code> or <code>def</code></p>",
        "id": 274310535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646579248
    },
    {
        "content": "<p><code>lemma</code> is just a variation on <code>@[irreducible] def</code> which discourages unfolding from all but the most persistent tactics</p>",
        "id": 274310611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646579303
    },
    {
        "content": "<p>Ok, thanks for the corrections!  I did not know that you could \"recover\" data from a lemma, at least in some cases.</p>",
        "id": 274310915,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646579701
    },
    {
        "content": "<p>The <code>delta</code> tactic will unfold irreducible definitions</p>",
        "id": 274311130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646579976
    },
    {
        "content": "<p>This is very interesting, thanks!</p>\n<p>Indeed, what is below works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test_fst</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">struc_mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">struc_mk</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274311217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646580096
    },
    {
        "content": "<p>I had a mistaken idea of that proof-irrelevance means.</p>",
        "id": 274311436,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646580430
    },
    {
        "content": "<p>Just to repeat something that has been said before: in this case, you can recover the data, since the lemma is constructing a term in Type, not a term in Prop, right?  This is how the lemma/def linter knows to complain, also.</p>",
        "id": 274311673,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646580679
    },
    {
        "content": "<p>the lemma/def linter is just looking at the type, not the value. But yes, you can unfold the definition and prove that your definition of <code>struc_mk</code> is not equal to antoine's, for example. From the kernel's perspective there is no difference between <code>def</code> and <code>lemma</code></p>",
        "id": 274311749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646580773
    },
    {
        "content": "<p>If you instead used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">struc</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">snd</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>then the two definitions would be equal; but lean won't allow this definition because it will not be able to construct the <code>struc.fst</code> projection function as required by the <code>structure</code> specification</p>",
        "id": 274311841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646580888
    },
    {
        "content": "<p>You can make this type without the projections, as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">struc</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">struc</span>\n</code></pre></div>\n<p>and in this case you can't extract <code>fst</code> and <code>snd</code> (as you would expect) and the two <code>struc_mk</code> definitions are equal (independent of whether they use <code>def</code> or <code>lemma</code>).</p>",
        "id": 274311914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646580982
    },
    {
        "content": "<p>Ok, thanks!  This discussion has been very enlightening and cleared up some doubts that I did not even know that I had!</p>",
        "id": 274316617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646586295
    }
]