[
    {
        "content": "<p>Hi. Is there a \"less drastic\" version of <code>@foo</code> if I want to only explicitly provide one particular implicit parameter rather than all of them? I have a thing with implicit arguments that somehow lean is having trouble unifying automatically, which works if I use <code>@foo</code>, but I suspect it's one particular argument that lean's having trouble with, whereas now I have to specify like 8 things</p>",
        "id": 212940868,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602374930
    },
    {
        "content": "<p>Ah OK I guess I can go sprinkle back in <code>_</code>'s to the <code>@foo</code> call.</p>",
        "id": 212940934,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602375065
    },
    {
        "content": "<p>Yeah that works, never mind :) I guess it's 2 of my 9 arguments lean is not figuring out on its own... interesting.</p>",
        "id": 212941013,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602375236
    },
    {
        "content": "<p>Although not directly related, but you can specify arguments to be \"partially hidden\" (I am sure there is an official name for this, which I am not aware of), like in <code>function.injective</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">⦄,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n</code></pre></div>\n\n<p>Given <code>hf : function.injective f</code> you can apply <code>h a₁ a₂</code> or <code>hf h</code> where <code>a₁ a₂ : α</code> and <code>h : f a₁ = f a₂</code>.</p>",
        "id": 212943501,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602380479
    },
    {
        "content": "<p>I think this is a pretty cool feature that should be used more (including in mathlib!).</p>",
        "id": 212943502,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602380496
    },
    {
        "content": "<p>Ah interesting thanks. I saw those mentioned in the ref manual, it calls them \"implicit arguments weakly inserted\"</p>",
        "id": 212944557,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602382683
    },
    {
        "content": "<p>But we lack the full flexibility to be able to do this -- supplying just one or two implicit variables and letting lean do the rest. Maybe lean 4?</p>",
        "id": 212953322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602401278
    },
    {
        "content": "<p>Could a tactic be created to do this? Something like <code>by explicit foo x=1</code>?</p>",
        "id": 212955638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602405400
    },
    {
        "content": "<p>It seems like you would have to have quite a few arguments before that pays off in terms of characters</p>",
        "id": 212956789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602407095
    },
    {
        "content": "<p>Plus the most common reason you want this is to supply an instance argument and those are typically anonymous, so they don't have names to refer to anyway (unless you like <code>_inst_4</code>)</p>",
        "id": 212956819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602407162
    },
    {
        "content": "<p>You could replace <code>explicit</code> with a suitable unicode character?</p>",
        "id": 212956940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602407392
    },
    {
        "content": "<p>plus parsing the syntax you gave there is going to be hard for a tactic</p>",
        "id": 212957186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602407781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Explicitly.20specifying.20one.20particular.20argument/near/212956940\">said</a>:</p>\n<blockquote>\n<p>You could replace <code>explicit</code> with a suitable unicode character?</p>\n</blockquote>\n<p>Or <code>=</code> with one, no? Having some sort of named argument syntax seems like it'd solve things but I guess that's trickier in lean where <code>x=3</code> is way better served as being that equality rather than argument syntax</p>",
        "id": 212965218,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602422153
    },
    {
        "content": "<p>Oh wait or I guess the suggestion of having it be a tactic is that that way nothing low level needs to be added/changed</p>",
        "id": 212965317,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602422285
    },
    {
        "content": "<p>Exactly; I'm not saying \"it should be spelt like this\", but \"you could build a spelling like this without changing lean\"</p>",
        "id": 212966729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602424978
    },
    {
        "content": "<p>The hard part about parsing the syntax is that it's all expressions without any separators</p>",
        "id": 212967178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602425783
    },
    {
        "content": "<p>did you ever notice that tactics always have a healthy portion of filler words like <code>using</code>, <code>with</code> etc</p>",
        "id": 212967184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602425817
    },
    {
        "content": "<p>Yes -- is that also why record notation has that <code>.</code> between the structure name and its arguments</p>",
        "id": 212967323,
        "sender_full_name": "Julian Berman",
        "timestamp": 1602426121
    }
]