[
    {
        "content": "<p>I heard that analysis and topology in Lean is implemented using filters which are supposed to be more convenient from formalization point of view. I'd like to know what are advantages of this approach compared to the ordinary way of doing things.</p>",
        "id": 197222241,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589242953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230946\">@Valery Isaev</span> Patrick wrote a nice short discussion in our perfectoid paper: <a href=\"https://math.commelin.net/files/poplws20cpp_perfectoid.pdf\">https://math.commelin.net/files/poplws20cpp_perfectoid.pdf</a></p>",
        "id": 197233757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589258795
    },
    {
        "content": "<p>You will want section 4</p>",
        "id": 197233762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589258823
    },
    {
        "content": "<p>I think Johannes Hoelzl ported a lot of the basic results from Isabelle, following a book by I James. Hoelzl might well have written the Isabelle code as well</p>",
        "id": 197236879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589263697
    },
    {
        "content": "<p>The first step is to  read the module docstring at <a href=\"https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html\">https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html</a>. Then indeed there should be stuff in the perfectoid paper (I already started to forgot what's in there exactly). The book by James is \"Topologies and uniformities\". PM me if you have difficulties finding it</p>",
        "id": 197252472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589276378
    },
    {
        "content": "<p>I see a badly formed doc string there!</p>",
        "id": 197252560,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589276420
    },
    {
        "content": "<p>Also note that the new book <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">Mathematics in Lean</a> will eventually contain explanations about you need to know here</p>",
        "id": 197252586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589276440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/Filters/near/197252560\">said</a>:</p>\n<blockquote>\n<p>I see a badly formed doc string there!</p>\n</blockquote>\n<p>Probably a bad space again</p>",
        "id": 197252623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589276469
    },
    {
        "content": "<p>Thanks for the references. If I understand correctly, the advantage is that various notions of limits are defined in terms of filters and hence the same lemmas and definitions can be used to establish the basic theory for them.</p>",
        "id": 197350351,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589323818
    },
    {
        "content": "<p>As a mathematician the advantages I see to filters are pretty much what you say: I can say \"this sequence of reals tends to 7\", \"this sequence of reals diverges to +infinity\", \"this continuous function of x tends to 7 as x tends to 37\", \"this continuous function tends to 0 as x tends to -infinity\" etc. But my impression is that there are other advantages too.</p>",
        "id": 197352891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589325978
    },
    {
        "content": "<p>Note in particular this very general \"tendsto\" predicate; I think that this was one of the key insights.</p>",
        "id": 197352912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589326007
    },
    {
        "content": "<p>So I started watching Patrick Massots video on filters in topology but I was having some trouble understanding it. I'm reading out of this  : <a href=\"https://www.imo.universite-paris-saclay.fr/~pmassot/topology.pdf\">https://www.imo.universite-paris-saclay.fr/~pmassot/topology.pdf</a></p>\n<p>I understand the definition of filter: <br>\n<a href=\"/user_uploads/3121/G9GDnOPz75WPkE1UgouuUNCe/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/G9GDnOPz75WPkE1UgouuUNCe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/G9GDnOPz75WPkE1UgouuUNCe/image.png\"></a></div><p>I've also been able to understand that these examples are filters: </p>\n<p><a href=\"/user_uploads/3121/OU18fmCaZ27BJzOVBrV4UB34/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OU18fmCaZ27BJzOVBrV4UB34/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OU18fmCaZ27BJzOVBrV4UB34/image.png\"></a></div><p>The part I don't really understand is why this means \"limit\":</p>\n<p><a href=\"/user_uploads/3121/I4ZCScHZlgKZSmmVI4bfEBeT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/I4ZCScHZlgKZSmmVI4bfEBeT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/I4ZCScHZlgKZSmmVI4bfEBeT/image.png\"></a></div><p>(Maybe an example of a limit which is equivalent to <code>lim x -&gt; a, f(x) = l</code> in the filter form could help me understand)</p>",
        "id": 273296633,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645830125
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.tendsto\">docs#continuous.tendsto</a> something that would be helpful for you?</p>",
        "id": 273297815,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645830841
    },
    {
        "content": "<p>The idea is like this. You want to describe neighborhoods of a point, so you take a set around that point. But being in that neighborhood is not quite enough, so you set out to find more neighborhoods. Now, you have a bunch. What can you say about them. Well surely if a set contains some neighborhood, it must be a neighborhhod itself. And if two sets are neighborhoods, then their intersection is a neighborhood. <code>univ</code> should definitely be a neighborhood. Is anything else obvious from the intuition of neighborhoods? Not really</p>",
        "id": 273297996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645830962
    },
    {
        "content": "<p>So somehow you have a set of sets around your point which respect a bunch of properties. You can picture them as being vanishingly smmal around that point.</p>",
        "id": 273298091,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645831011
    },
    {
        "content": "<p>But really this didn't use the fact that you were around a point. You could also have had a bunch of sets \"vanishing at infinity\". This gives you the <code>at_top</code> filter.</p>",
        "id": 273298149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645831060
    },
    {
        "content": "<p>I'm trying to remember if neighborhood is an open set containing x, or just a set which contains x...</p>",
        "id": 273298210,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831088
    },
    {
        "content": "<p>Oh found it in the docs</p>",
        "id": 273298243,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831129
    },
    {
        "content": "<p>In this context, a neighborhood is a subset which contains an open neighborhood of the given point.</p>",
        "id": 273298244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645831130
    },
    {
        "content": "<p>It's a set which contains an open set containing x</p>",
        "id": 273298248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645831135
    },
    {
        "content": "<p>Ah ok thanks for the confirmation.</p>",
        "id": 273298262,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831144
    },
    {
        "content": "<p>What is the inverse function doing though?</p>",
        "id": 273298274,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831154
    },
    {
        "content": "<p>Or the pre-image</p>",
        "id": 273298287,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831173
    },
    {
        "content": "<p>For a function to tend to something, you want to know that being close to a point in the domain means you're close to its image in the codomain.</p>",
        "id": 273298629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645831403
    },
    {
        "content": "<p>This means that neighborhoods in the codomain must come from neighborhoods in the domain. This is confusing, yeah.</p>",
        "id": 273298664,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645831433
    },
    {
        "content": "<p>Would this be saying that the limit of f as x -&gt; a is l ? <a href=\"/user_uploads/3121/5DabrWdBOqcNsL5o8qSmaHDv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5DabrWdBOqcNsL5o8qSmaHDv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5DabrWdBOqcNsL5o8qSmaHDv/image.png\"></a></div>",
        "id": 273299115,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831710
    },
    {
        "content": "<p>So neighborhoods from the codomain come from neighborhoods from the domain:</p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/rdqNTdQ.jpg\"><img src=\"https://uploads.zulipusercontent.net/033e82770aeebbc6630f60cb8c36d042d602f724/68747470733a2f2f692e696d6775722e636f6d2f7264714e5464512e6a7067\"></a></div><p>(y should be l  &amp; x should be a)</p>",
        "id": 273299628,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645831974
    },
    {
        "content": "<p>But how does that mean that if a neighborhood from the codomain is close to l , then the neighborhood it came from is close to a ?</p>",
        "id": 273299714,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645832042
    },
    {
        "content": "<p>Like what if a neighborhood really close to  <code>l</code> came from a neighborhood that was not close to <code>a</code> ?</p>",
        "id": 273299779,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645832077
    },
    {
        "content": "<p>That's okay, because you're taking the preimage of the nhd of <code>l</code>!</p>",
        "id": 273300336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645832478
    },
    {
        "content": "<p>(and filters are upward closed)</p>",
        "id": 273300503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645832596
    },
    {
        "content": "<p>But then how does that capture the idea of  \" you want to know that being close to a point in the domain means you're close to its image in the codomain.\" ?</p>",
        "id": 273300605,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645832661
    },
    {
        "content": "<p>Think about it the other way around. If the preimage of something to <code>a</code> doesn't contain everything close to <code>l</code>, that means there's something close to <code>l</code> whose image is far from <code>a</code>!</p>",
        "id": 273300795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645832833
    },
    {
        "content": "<p>Because if <code>l'</code> is \"close\" to <code>l</code> in the codomain, then there should have been something, say <code>x'</code> in the domain, which should be close to <code>x</code>, such that <code>x'</code> maps to <code>l'</code></p>",
        "id": 273300830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645832874
    },
    {
        "content": "<p>So you take the preimage of the stuff that's close to <code>l</code> and that should contain the stuff that's close to <code>x</code>. Since you're dealing with filters, if something contains the stuff which is close to <code>x</code>, then it is already \"close\" as well</p>",
        "id": 273300932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645832946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Filters/near/273300830\">said</a>:</p>\n<blockquote>\n<p>Because if <code>l'</code> is \"close\" to <code>l</code> in the codomain, then there should have been something, say <code>x'</code> in the domain, which should be close to <code>x</code>, such that <code>x'</code> maps to <code>l'</code></p>\n</blockquote>\n<p>So why is a situation like this impossible ? <a href=\"https://i.imgur.com/r2qfIcK.jpg\">https://i.imgur.com/r2qfIcK.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/r2qfIcK.jpg\"><img src=\"https://uploads.zulipusercontent.net/d66b33f7fa56b80126fe00d5c7fb247e82a57981/68747470733a2f2f692e696d6775722e636f6d2f7232716649634b2e6a7067\"></a></div>",
        "id": 273301206,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833162
    },
    {
        "content": "<p>a maps to l and a' maps to a' but a and a' are far away in the domain.</p>",
        "id": 273301222,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833181
    },
    {
        "content": "<p>What's the preimage of the stuff that's close to <code>l</code>?</p>",
        "id": 273301264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645833221
    },
    {
        "content": "<p>Does it contain the stuff close to <code>a</code>?</p>",
        "id": 273301289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645833244
    },
    {
        "content": "<p>Remember that the constant function is continuous</p>",
        "id": 273301290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645833244
    },
    {
        "content": "<p>If the stuff close to <code>l</code> is a set <code>V</code> then the preimage is the set of points <code>{x in X | f(x) in V}</code></p>",
        "id": 273301325,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833284
    },
    {
        "content": "<p>In your picture, it would be the oval on the left, and that certainly contains the stuff close to <code>a</code>!</p>",
        "id": 273301355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645833318
    },
    {
        "content": "<p>but why? <code>a'</code> is far away from <code>a</code></p>",
        "id": 273301383,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833346
    },
    {
        "content": "<p>What does far even mean in the context of filters?</p>",
        "id": 273301439,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833367
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has a blogpost on filters and ultrafilters which you might find helpful.</p>",
        "id": 273301529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645833479
    },
    {
        "content": "<p>Oh if <code>l</code> and <code>l'</code> are from the same neighborhood in <code>Y</code> and we know that <code>f(a') = l'</code> and <code>f(a) = l</code> then <code>a</code> and <code>a'</code> are from the same neighborhood in <code>X</code> and are therefore \"close\"?</p>",
        "id": 273301575,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833490
    },
    {
        "content": "<p>Is that the right idea?</p>",
        "id": 273301601,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833515
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/08/04/what-is-a-filter-how-some-computer-scientists-think-about-limits/\">https://xenaproject.wordpress.com/2018/08/04/what-is-a-filter-how-some-computer-scientists-think-about-limits/</a></p>",
        "id": 273301668,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645833562
    },
    {
        "content": "<p>Some of this discussion seems not necessarily specific to filters. <span class=\"user-mention\" data-user-id=\"367659\">@Callum Cassidy-Nolan</span> are you familiar with the topological definition of continuity?</p>",
        "id": 273301978,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1645833639
    },
    {
        "content": "<p>(i.e. preimages of open sets are open)</p>",
        "id": 273302002,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1645833658
    },
    {
        "content": "<p>I know the definition, but I think I have a hard time understanding it</p>",
        "id": 273302031,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833675
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2021/02/18/formalising-mathematics-workshop-5-filters/\">https://xenaproject.wordpress.com/2021/02/18/formalising-mathematics-workshop-5-filters/</a> is newer but I don't say much about limits</p>",
        "id": 273302061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645833698
    },
    {
        "content": "<p>Maybe I'll try to show it's equivalent to the epsilon delta definition to try and understand the idea more ...</p>",
        "id": 273302068,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645833701
    },
    {
        "content": "<p>For example -- Munkres's Intro to Topology textbook, Theorem 18.1(4), shows that the statement \"f is continuous at x\" is equivalent to \"for all neighborhoods <code>V</code> of <code>f(x)</code>, there is a neighborhood <code>U</code> of <code>x</code> such that <code>f(U) \\subseteq V</code> (equivalently <code>f^{-1}(V)</code> contains <code>U</code>)\". The latter is the epsilon-delta definition of continuity.</p>",
        "id": 273302171,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1645833772
    },
    {
        "content": "<p>In that latter post I argue that a filter on X is a generalisation of a subset of X. If X is a topological space then the neighborhood filter of a point x in X is like an infinitesimally small subset of X containing x and a tiny bit more, not enough to contain any other points of X but enough to remember that you have some wiggle room. A function f : X -&gt; Y being continuous at x means that the preimage of the infinitesimal neighborhood of f(x) contains the infinitesimal neighborhood of x. Callum you seem to be focussed on the other things it contains but that's not the right way to think about it. I don't care what's happening a long way from x.</p>",
        "id": 273302349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645833935
    },
    {
        "content": "<p>You might also find it instructive to see why a simple <em>discontinuous</em> function, e.g. the sign function <code>f(x) = sign(x)</code>, fails both definitions of continuity (in this case at <code>x=0</code>).</p>",
        "id": 273302504,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1645834065
    },
    {
        "content": "<p>Another way to think of continuity is via images not preimages (there's a Galois connection going on so there are two equivalent definitions of a filter tending to another filter along a function). The pushforward way to say it is that f is continuous at x iff the image of the infinitesimal neighborhood of x is contained in the infinitesimal neighborhood of y. This way makes it clear that elements of X far from x have nothing to do with it</p>",
        "id": 273302585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645834120
    },
    {
        "content": "<p>Ok, I'll keep reading about it and trying more examples</p>",
        "id": 273302629,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645834176
    },
    {
        "content": "<blockquote>\n<p>However, filters still have an ordering on them, written F ≤ G</p>\n</blockquote>\n<p>Kevin, is that the same one as here? </p>\n<p><a href=\"/user_uploads/3121/C-4xXigEXqZsg7RHjjf336fA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/C-4xXigEXqZsg7RHjjf336fA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/C-4xXigEXqZsg7RHjjf336fA/image.png\"></a></div>",
        "id": 273302721,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645834250
    },
    {
        "content": "<p>Right, that's the two equivalent definitions of a filter on X tending to a filter on Y</p>",
        "id": 273302755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645834289
    },
    {
        "content": "<p>The example I found terrifically helpful was the case of principal filters ie actual subsets of X</p>",
        "id": 273302815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645834329
    },
    {
        "content": "<p>If A is a subset of X and B is a subset of Y then A tends to B along f iff f restricts to a function from A to B iff f(A) is a subset of B iff A is a subset of f-1(B)</p>",
        "id": 273302883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645834402
    },
    {
        "content": "<p>And now imagine A is a small neighborhood of x and B is a small neighborhood of f(x) and you get the statement that moving x a tiny amount must only move f(x) a tiny amount, which is continuity</p>",
        "id": 273303015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645834509
    },
    {
        "content": "<p>Note that it says nothing about what happens if you move x a large amount, which is what you were asking about</p>",
        "id": 273303039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645834539
    }
]