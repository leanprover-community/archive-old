[
    {
        "content": "<p>Hi all. Is there any way of getting the following (Agda-like) notation so as to make Lean more intuitive for dealing with type-level programming. Instead of: def myfunc (z : ℤ) : ℤ := z, The Type would be made explicit with the following (or similar):</p>\n<p>dfn myfunc' : ℤ → ℤ := <br>\nmyfunc' z = z</p>\n<p>(obviously with some sort of compatible notation for square and squiggly brackets)</p>\n<p>Is anything like this available?</p>",
        "id": 270834930,
        "sender_full_name": "Robert Watson",
        "timestamp": 1644077484
    },
    {
        "content": "<p>You can use a pattern match (known also as the equation compiler)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfunc'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>I don't know how to use squigly brackets with it though</p>",
        "id": 270835188,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644077790
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfunc'</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">z</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>for squigly brackets but that kinda defeats the point in this example</p>",
        "id": 270835221,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644077875
    },
    {
        "content": "<p>Looks perfect. Thanks. In case any other noob is interested, you can then do something like  this no problem:</p>\n<p><code>\ndef myfunc2' : nat → ℤ \n| nat.zero := int.zero\n| (nat.succ n) := int.one\n</code></p>",
        "id": 270835590,
        "sender_full_name": "Robert Watson",
        "timestamp": 1644078261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20of.20def.20doesn't.20show.20types.20clearly/near/270835188\">said</a>:</p>\n<blockquote>\n<p>You can use a pattern match (known also as the equation compiler)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfunc'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>I don't know how to use squigly brackets with it though</p>\n</blockquote>\n<p>For what it's worth, here's how to do so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfunc'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">},</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 270960999,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644231316
    }
]