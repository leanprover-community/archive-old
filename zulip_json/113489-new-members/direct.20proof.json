[
    {
        "content": "<p>hi, i m trying this tutorial, <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a> , there are many examples of direct proofs using backward and forward reasonning. Personally I see more convenient proving with backward reasonning. I ask you, is posible using backwards in any direct proof, or this just works when exists explicit implications somewhere in the hypothesis like in this sample?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_increasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">non_decreasing</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">non_decreasing</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Let x₁ and x₂ be real numbers such that x₁ ≤ x₂</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We need to prove (g ∘ f) x₁ ≤ (g ∘ f) x₂.</span>\n  <span class=\"c1\">-- Since g is non-decreasing, it suffices to prove f x₁ ≤ f x₂</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- which follows from our assumption on f</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and on x₁ and x₂</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this is easy, but I m trying use backwards in another theorems and here is the problem because is not easy for me to find the implications within the hypotheses</p>",
        "id": 252560628,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1631153332
    },
    {
        "content": "<p>(An aside: note that the <code>unfold</code>s here are not actually needed. <code>intros</code> will go right through a definition looking for binders.)</p>",
        "id": 252579004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631170302
    },
    {
        "content": "<p>I'm not sure what to say about your general question. Some results are easier to prove \"forwards\" than \"backwards\", others vice versa, and most deserve many changes of direction?</p>",
        "id": 252579087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631170344
    },
    {
        "content": "<p>Perhaps you have a particular example to show us?</p>",
        "id": 252579101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631170353
    },
    {
        "content": "<p>According to the examples that I have seen in the tutorial, backward reasoning can be applied when there are implications within the hypothesis itself, theorems or definitions such as the example above. My question is, do all definitions in math hide implications? if so, how can the implicit implications be discovered? I ask this because it makes it easier for me to work backwards than forwards</p>",
        "id": 252624336,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1631193774
    },
    {
        "content": "<p>maths goes forwards and backwards and it's impossible to make definitive statements about whether it's generally easier to go forwards or backwards. Maths is a maze.</p>",
        "id": 252624470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631193829
    },
    {
        "content": "<p>ok, theorems are implications or biconditional, axioms or definitions can rewritten as implications or implicit implications, all axioms are implications or not?</p>",
        "id": 252625969,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1631194357
    },
    {
        "content": "<p>You cannot attempt to classify mathematics in this way, despite the dreams of computer scientists to do this. Mathematics is anything which follows the rules of mathematics.</p>",
        "id": 252626376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631194530
    },
    {
        "content": "<blockquote>\n<p>all axioms are implications or not?</p>\n</blockquote>\n<p>Well <code>true.intro</code> is not an implication, and could be seen as an \"axiom\" that there is a proof of true</p>",
        "id": 252639340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631199086
    },
    {
        "content": "<p>its ok thank you for your answers</p>",
        "id": 252651563,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1631203542
    },
    {
        "content": "<p>hi all, it is interesting to manipulate a theorem as a function that receives as input the assumptions and returns the proof itself as output, I don't know who wrote this idea but I really appreciate it, it has helped me a lot in understanding the theorems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">Let's</span> <span class=\"n\">see</span> <span class=\"n\">how</span> <span class=\"n\">we</span> <span class=\"n\">could</span> <span class=\"n\">use</span> <span class=\"n\">this</span> <span class=\"kd\">lemma</span><span class=\"bp\">.</span> <span class=\"n\">It</span> <span class=\"n\">is</span> <span class=\"n\">already</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">core</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"n\">under</span> <span class=\"n\">the</span> <span class=\"n\">name</span> <span class=\"bp\">`</span><span class=\"n\">add_le_add_right</span><span class=\"bp\">`</span><span class=\"o\">:</span>\n\n  <span class=\"n\">add_le_add_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n\n<span class=\"n\">This</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">read</span> <span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"s2\">\"add_le_add_right is a function that will take as input real numbers a and b, an</span>\n<span class=\"s2\">assumption `hab` claiming a ≤ b and a real number c, and will output a proof of a + c ≤ b + c\"</span><span class=\"bp\">.</span>\n\n<span class=\"n\">In</span> <span class=\"n\">addition</span><span class=\"o\">,</span> <span class=\"n\">recall</span> <span class=\"n\">that</span> <span class=\"n\">curly</span> <span class=\"n\">braces</span> <span class=\"n\">around</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">mean</span> <span class=\"n\">Lean</span> <span class=\"n\">will</span> <span class=\"n\">figure</span> <span class=\"n\">out</span> <span class=\"n\">those</span> <span class=\"n\">arguments</span> <span class=\"n\">unless</span> <span class=\"n\">we</span>\n<span class=\"n\">insist</span> <span class=\"n\">to</span> <span class=\"n\">help.</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">because</span> <span class=\"n\">they</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">deduced</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">next</span> <span class=\"n\">argument</span> <span class=\"bp\">`</span><span class=\"n\">hab</span><span class=\"bp\">`.</span>\n<span class=\"n\">So</span> <span class=\"n\">it</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">sufficient</span> <span class=\"n\">to</span> <span class=\"n\">feed</span> <span class=\"bp\">`</span><span class=\"n\">hab</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"n\">c</span> <span class=\"n\">to</span> <span class=\"n\">this</span> <span class=\"n\">function.</span>\n<span class=\"bp\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">ha</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">In the second line of the above proof, we need to prove 0 + b ≤ a + b.</span>\n<span class=\"cm\">The proof after the colon says: this is exactly lemma `add_le_add_right` applied to ha and b.</span>\n</code></pre></div>\n<p>following this same idea, please someone help me to interpret a theorem<br>\n<a href=\"/user_uploads/3121/CALdAK9FxQhcOKm-FxAOO_Uj/imagen.png\">imagen.png</a><br>\n<a href=\"/user_uploads/3121/tCfEheL0Mm0BxKD_sOzkWmTZ/imagen.png\">imagen.png</a> <br>\nthe inputs from theorem 2.8 are included in theorem 2.20, but what in t2.20 use t2.8 to prove or say (fi) function is linear?, because t2.8 should have as output literal a and b of t2.8 and \"linear\" is another assumption not a conclusion, thanks for your answers</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CALdAK9FxQhcOKm-FxAOO_Uj/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/CALdAK9FxQhcOKm-FxAOO_Uj/imagen.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tCfEheL0Mm0BxKD_sOzkWmTZ/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/tCfEheL0Mm0BxKD_sOzkWmTZ/imagen.png\"></a></div>",
        "id": 253426509,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1631717244
    },
    {
        "content": "<p>Your theorem 2.8 is the statement that the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Φ</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>T</mi><msubsup><mo stretchy=\"false\">]</mo><mi>β</mi><mi>γ</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Phi (T)= [T]^\\gamma_\\beta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.219716em;vertical-align:-0.4374159999999999em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7823em;\"><span style=\"top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05556em;\">γ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4374159999999999em;\"><span></span></span></span></span></span></span></span></span></span> is linear as a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> broken up into two pieces, part a and b, together they imply linearity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Φ</mi></mrow><annotation encoding=\"application/x-tex\">\\Phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Φ</span></span></span></span>. The assumptions to 2.8 also include that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo separator=\"true\">,</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">T,U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> are linear which I guess is what is confusing you, but those are the inputs not the outputs as you say.</p>",
        "id": 253436964,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631720977
    }
]