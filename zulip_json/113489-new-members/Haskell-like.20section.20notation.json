[
    {
        "content": "<p>In Haskell, there is a sometimes-convenient notation for partial application of arguments to binary operators, called a <a href=\"https://wiki.haskell.org/Section_of_an_infix_operator\">section</a>.  For example, <code>(+1)</code> means <code>λ x, x + 1</code> and <code>(2*)</code> means <code>λ x, 2 * x</code>.  Experimentally, Lean has <code>(+1)</code> and <code>(*2)</code> but not the <code>(1+)</code> and <code>(2*)</code> variants.  Lean's expression syntax is complicated enough that I'm not surprised it doesn't have sections in general, but is there some place in the documentation that at least describes what is possible here?</p>",
        "id": 203769020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594673247
    },
    {
        "content": "<p><code>(+) 2 = \\lam x, 2 + x</code> and I think <code>(+2)</code> is the other one.</p>",
        "id": 203769223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594673338
    },
    {
        "content": "<p>I forgot to test <code>(+)</code>. That's good to know.  It's sort of odd that Lean has left sections but no right sections, and I wonder if there is a reason or if it's a bug in the parser (untested due to lack of use?).</p>",
        "id": 203770710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594674040
    },
    {
        "content": "<p>Well, maybe it's just because <code>(+) 2</code> also works, and isn't soo much longer. Of course it's slightly confusing that the meaning depends a lot on whether the <code>)</code> is between the <code>+</code> and <code>2</code> or after it.<br>\nBut moving parentheses is known to have devastating effects in all of maths (-;</p>",
        "id": 203798703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594702336
    },
    {
        "content": "<p>There is a parsing complication involved in making right sections work, so since as Johan said you can do without it, we didn't bother</p>",
        "id": 203809510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594715181
    },
    {
        "content": "<p>Is it the <code>(-1)</code> complication, or something else?</p>",
        "id": 203810465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594715950
    },
    {
        "content": "<p>Basically, it's easy to tell you are looking at a left section because it starts with an infix operator, but a right section is more complicated because it involves an aborted infix parse</p>",
        "id": 203810614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594716060
    },
    {
        "content": "<p>it has to do with keeping low lookahead parsing</p>",
        "id": 203810650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594716092
    },
    {
        "content": "<p>but I don't recall all the details</p>",
        "id": 203810670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594716106
    },
    {
        "content": "<p>I see, that sounds about right.  I think Haskell manages having sections by parsing entire expressions as sequences of alternating expressions and operators, only forming the expression tree later (there are other ways, but this allows Haskell to have locally defined operators and precedences).  Lean's <code>notation</code> is a lot more flexible than Haskell's mere infix operators, and this trick doesn't seem to apply.</p>",
        "id": 203811451,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594716732
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203811511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594716792
    }
]