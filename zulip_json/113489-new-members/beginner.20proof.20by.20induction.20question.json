[
    {
        "content": "<p>I'm trying to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>F</mi><mi>k</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mn>2</mn><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\"> \\sum_{k=0}^{n-1}F_k = F_{2k-1} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.954008em;\"></span><span class=\"strut bottom\" style=\"height:1.253718em;vertical-align:-0.29971000000000003em;\"></span><span class=\"base\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954008em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mathrm mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is the kth Fibonacci number. Here's my attempt so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fibonacci</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib_even_sum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_even_fib_eq_fib_double_sub_one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">fib_even_sum</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">fib_even_sum</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">fib_even_sum</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">sum_even_fib_eq_fib_double_sub_one</span><span class=\"o\">,</span>\n<span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>As you can see, my goal looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But I can't figure out how to simplify <code>2*n + 2*1 -1</code> inside <code>fibonacci</code> to <code>2*n - 1</code>. If I could do that then I would happily finish with <code>refl</code>.</p>\n<p>Other style or efficiency suggestions would also be appreciated. Is there a smart way to apply <code>simp</code>? I haven't managed that either.</p>",
        "id": 133037403,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535601176
    },
    {
        "content": "<p>what you wrote at the beginning of this message is false</p>",
        "id": 133040385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535606345
    },
    {
        "content": "<p>also what you stated in your lean code is false</p>",
        "id": 133040681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535606967
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fibonacci</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib_even_sum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">not_sum_even_fib_eq_fib_double_sub_one</span><span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">fib_even_sum</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 133040726,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535607008
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fibonacci</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib_even_sum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_even_fib_eq_fib_double_sub_three</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fib_even_sum</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fib_even_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_comm</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">fibonacci</span><span class=\"o\">,</span>\n    <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ih</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"o\">},</span>\n  <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133042012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535609429
    },
    {
        "content": "<p>Note that your goal about <code>fibonacci (2 * n - 1) + fibonacci (2 * n) = fibonacci (2 * n + 2* 1 - 1)</code> is false if <code>n = 0</code>, because <code>0 - 1 = 0</code>.</p>",
        "id": 133053991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535628635
    },
    {
        "content": "<p>Ah, thanks! That was  really silly of me... I got lazy because I had previously proved this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib_odd_sum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_odd_fib_eq_fib_double</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">fib_odd_sum</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">fib_odd_sum</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">fib_odd_sum</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">sum_odd_fib_eq_fib_double</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n<span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and I just wanted to copy and paste stuff. Granted, I should still have checked what I was trying to prove...</p>",
        "id": 133056271,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535631686
    },
    {
        "content": "<p>We will soon have tools to avoid such kind of mistakes</p>",
        "id": 133056881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535632397
    },
    {
        "content": "<p>You mean Kenny?</p>",
        "id": 133057027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535632670
    },
    {
        "content": "<p>I mean the tactic <a href=\"https://github.com/robertylewis/mathematica_examples/blob/master/src/sanity_check.lean\" target=\"_blank\" title=\"https://github.com/robertylewis/mathematica_examples/blob/master/src/sanity_check.lean\">sanity_check</a> that Rob showed in Orsay, Simon's <a href=\"https://github.com/cipher1024/slim_check\" target=\"_blank\" title=\"https://github.com/cipher1024/slim_check\">SlimCheck</a>, and <a href=\"https://arxiv.org/abs/1606.05945\" target=\"_blank\" title=\"https://arxiv.org/abs/1606.05945\">Nunchaku</a> in Lean</p>",
        "id": 133057171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535632884
    },
    {
        "content": "<p>You find Pablo's Nunchaku-Lean prototype in <a href=\"https://gitlab.binets.fr/pablo.le-henaff/nunchaku-lean\" target=\"_blank\" title=\"https://gitlab.binets.fr/pablo.le-henaff/nunchaku-lean\">https://gitlab.binets.fr/pablo.le-henaff/nunchaku-lean</a></p>",
        "id": 133058279,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535634334
    },
    {
        "content": "<p>it doesn't yet implement the dependent type as proposed by the arxiv paper, but hopefully in the future it does</p>",
        "id": 133058343,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535634385
    },
    {
        "content": "<p>is there any documentation explaining how to use it?</p>",
        "id": 133058502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535634540
    },
    {
        "content": "<p>Not yet. It is only a prototype. Currently, it doesn't even have a <code>leanpkg.toml</code>.<br>\nWhat should work is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">nunchaku</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nunchaku</span>\n</pre></div>\n\n\n<p>and it should report n = 0 as counterexample.</p>",
        "id": 133059392,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535635404
    },
    {
        "content": "<p>Thanks. I guess I'll need to see more documentation (including how to install all the dependencies)</p>",
        "id": 133064702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535640256
    },
    {
        "content": "<p>Returning to my original problem, here's my fixed up proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fibonacci</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib_even_sum</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_gt_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_even_fib_eq_fib_double_sub_one</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">fib_even_sum</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">((</span><span class=\"n\">gt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">fib_even_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">fib_even_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">sum_even_fib_eq_fib_double_sub_one</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_gt_zero</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">fib_even_sum</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">f2</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n<span class=\"n\">change</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133069870,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535645795
    },
    {
        "content": "<p>Thanks to Kenny for his proof as well, which was very instructive.</p>",
        "id": 133069890,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535645822
    },
    {
        "content": "<p>If anyone has a strong stomach, I'd appreciate feedback on this ugly proof of yet another silly Fibonacci fact (this time, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></msubsup><mo>−</mo><msub><mi>F</mi><mi>n</mi></msub><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">F_{n+1}^2-F_nF_{n+2}=(-1)^n </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999998em;\"></span><span class=\"strut bottom\" style=\"height:1.1205469999999997em;vertical-align:-0.30643899999999996em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999998em;\"><span style=\"top:-2.451892em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30643899999999996em;\"></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span></span></span></span>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">abcde</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span>\n  <span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">neg_add_self</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"o\">[</span><span class=\"n\">parsing_only</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"n\">F_n</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"o\">[</span><span class=\"n\">parsing_only</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"n\">F_n1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"o\">[</span><span class=\"n\">parsing_only</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"n\">F_n2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ex10</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">pow</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">pow</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n    <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">F_n1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F_n1</span> <span class=\"bp\">+</span> <span class=\"n\">F_n2</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F_n1</span> <span class=\"bp\">*</span> <span class=\"n\">F_n1</span> <span class=\"bp\">-</span> <span class=\"n\">F_n</span> <span class=\"bp\">*</span> <span class=\"n\">F_n2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_add</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"n\">F_n2</span> <span class=\"bp\">*</span> <span class=\"n\">F_n</span> <span class=\"bp\">+</span> <span class=\"n\">F_n2</span> <span class=\"bp\">*</span> <span class=\"n\">F_n1</span>\n    <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">F_n1</span> <span class=\"bp\">*</span> <span class=\"n\">F_n1</span> <span class=\"bp\">+</span> <span class=\"n\">F_n1</span> <span class=\"bp\">*</span> <span class=\"n\">F_n2</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F_n1</span> <span class=\"bp\">*</span> <span class=\"n\">F_n1</span> <span class=\"bp\">-</span> <span class=\"n\">F_n</span> <span class=\"bp\">*</span> <span class=\"n\">F_n2</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abcde</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there a better tactic to use for proving <code>abcde</code> (or better, getting around it entirely)? Constructing these long sequences of <code>rw</code>s is very tiresome but I don't have a good idea of when I can throw in <code>simp</code>.</p>",
        "id": 133333244,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536091499
    },
    {
        "content": "<p>abcde is <code>by ring</code></p>",
        "id": 133333346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536091589
    },
    {
        "content": "<p>don't forget <code>import tactic.ring</code> at top</p>",
        "id": 133333369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536091622
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ex10</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">):</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133333488,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536091739
    },
    {
        "content": "<p>Ah, right. I could have sworn I tried that..</p>\n<p>Indeed, I can just delete <code>abcde</code> entirely and finish with <code>ring</code>.</p>",
        "id": 133333501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536091748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> that's not working for me, unfortunately...</p>",
        "id": 133333626,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536091882
    },
    {
        "content": "<p>works here</p>",
        "id": 133333634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536091899
    },
    {
        "content": "<p>Did you import <code>tactic.ring</code>?</p>",
        "id": 133333646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536091915
    },
    {
        "content": "<p>Chris, can you also golf my limit computation?</p>",
        "id": 133333708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536091975
    },
    {
        "content": "<p>Probably not. I know nothing about analysis in lean.</p>",
        "id": 133333726,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536091997
    },
    {
        "content": "<p>OK, it works now. I had some other notation in my main file that was interfering somehow.</p>",
        "id": 133333816,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536092089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> If you don't mind, could you explain your thought process when you came up with that? For instance, did you peek at my ugly proof first, or did those lemmas immediately jump into your head.</p>\n<p>Is the take-away that <code>simp</code>, then <code>ring</code>should be my go-to for this sort of thing?</p>",
        "id": 133334372,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536092674
    },
    {
        "content": "<p><code>ring</code> does equalities between ring expressions, i.e. addition, subtraction, multiplication and powers by constants</p>",
        "id": 133334439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536092754
    },
    {
        "content": "<p>I used your proof a little bit, to see that I needed induction. Other than that, it's just unfold everything, find some way of substituting in the induction hypothesis, and then hope <code>ring</code> works.</p>",
        "id": 133334506,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536092791
    },
    {
        "content": "<p>Thanks, that's very helpful!</p>",
        "id": 133334537,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536092832
    }
]