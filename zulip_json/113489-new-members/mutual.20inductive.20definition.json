[
    {
        "content": "<p>can one of you explain why I cannot get this mutual inductive definition to work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">Foo</span><span class=\"o\">,</span> <span class=\"n\">Bar</span>\n<span class=\"k\">with</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bizz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">buzz</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"k\">with</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>For reference, the following works in Agda</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">mutual</span>\n  <span class=\"kr\">data</span> Foo <span class=\"ow\">:</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n    <span class=\"nf\">bizz</span> <span class=\"ow\">:</span> Foo\n    <span class=\"nf\">buzz</span> <span class=\"ow\">:</span> <span class=\"o\">{</span>f <span class=\"ow\">:</span> Foo<span class=\"o\">}</span> <span class=\"ow\">→</span> Bar f <span class=\"ow\">→</span> Foo\n\n  <span class=\"kr\">data</span> Bar <span class=\"ow\">:</span> Foo <span class=\"ow\">→</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n    <span class=\"nf\">baz</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>f <span class=\"ow\">:</span> Foo<span class=\"o\">)</span> <span class=\"ow\">→</span> Bar f\n</pre></div>",
        "id": 147808981,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542364518
    },
    {
        "content": "<p>this is called an inductive-recursive definition, and it is stronger than lean's axiomatics</p>",
        "id": 147809137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542364749
    },
    {
        "content": "<p>There may be another way to encode the type you want, but inductive recursive definitions can be used to prove DTT is consistent, so lean can't do it</p>",
        "id": 147809215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542364821
    },
    {
        "content": "<p>Incidentally, Mario, were you working on a Lean consistency project at some point?</p>",
        "id": 147809656,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542365519
    },
    {
        "content": "<p>What is DTT?</p>",
        "id": 147809895,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542365881
    },
    {
        "content": "<p>dependent type theory</p>",
        "id": 147810111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542366178
    },
    {
        "content": "<p>That's the name of the game we are playing</p>",
        "id": 147810119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542366189
    },
    {
        "content": "<p>yes, I'll be defending my masters thesis in a few weeks and lean consistency is in it</p>",
        "id": 147811271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542367800
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v0.21\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases/tag/v0.21\">https://github.com/digama0/lean-type-theory/releases/tag/v0.21</a></p>",
        "id": 147811346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542367855
    },
    {
        "content": "<p>so, is lean consistent?</p>",
        "id": 147811386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542367909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> How is that not independent?</p>",
        "id": 147811742,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542368286
    },
    {
        "content": "<p>yes, assuming some large cardinal assumptions</p>",
        "id": 147812715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542369766
    },
    {
        "content": "<p>which is the usual story with consistency proofs</p>",
        "id": 147812723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542369796
    },
    {
        "content": "<p>I think this shape is called inductive-inductive: mutual inductive types where at least one is indexed by the other one, inductive-recursive means to mutually define inductive types and recursive definitions where at least one inductive type depends on the recursive definition.<br>\nI think inductive-inductive can be reduced to inductive, inductive-recursive cannot</p>",
        "id": 147813619,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542371110
    },
    {
        "content": "<p>you might be right about the name, but I'm pretty sure inductive-inductive is also axiomatically strong</p>",
        "id": 147813885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542371456
    },
    {
        "content": "<p>because you can define the well typed terms of DTT by induction-induction with the set of well formed contexts and the set of types in a context</p>",
        "id": 147813968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542371526
    },
    {
        "content": "<p>Inductive recursive can be reduced to inductive inductive, I think, where the recursive function becomes a functional relation</p>",
        "id": 147814054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542371644
    },
    {
        "content": "<p>Ah, or it was this way round</p>",
        "id": 147814450,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542372169
    },
    {
        "content": "<blockquote>\n<p>There may be another way to encode the type you want, but inductive recursive definitions can be used to prove DTT is consistent, so lean can't do it</p>\n</blockquote>\n<p>Consistent with respect to what?</p>",
        "id": 147817435,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542375954
    },
    {
        "content": "<p>with respect to DTT with a larger type universe and inductive recursive definitions (I guess)</p>",
        "id": 147821293,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542380040
    },
    {
        "content": "<p>This is indeed an inductive-inductive definition. I think adding these won't increase the proof stength of the system. In extensional type theory, inductive-inductive definitions can be defined from indexed inductive types, but I don't think it's known in whether this is the case in intensional type theory.<br>\nInductive-recursive definitions indeed do increase the proof stength of the system: you can build a (Tarski) universe using induction-recursion.<br>\nNcatlab links:<br>\n<a href=\"https://ncatlab.org/nlab/show/inductive-inductive+type\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/inductive-inductive+type\">https://ncatlab.org/nlab/show/inductive-inductive+type</a><br>\n<a href=\"https://ncatlab.org/nlab/show/inductive-recursive+type\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/inductive-recursive+type\">https://ncatlab.org/nlab/show/inductive-recursive+type</a></p>",
        "id": 147821961,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1542380704
    }
]