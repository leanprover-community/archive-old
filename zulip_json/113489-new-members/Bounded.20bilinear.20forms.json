[
    {
        "content": "<p>I was playing around with Lax-Milgram and I noticed that the definitions of <code>is_bounded_bilinear_map</code> in <code>analysis/normed_space/bounded_linear_maps</code> and <code>bilinear_form</code> in <code>linear_algebra/bilinear_form</code> are quite different, the former defines a proposition and the later defines the object. Is this intentional or should <code>is_bounded_bilinear_map</code> be a lemma and a new definition <code>bounded_bilinear_map</code>, which is of the same form as the one in <code>linear_algebra/bilinear_form</code>?</p>",
        "id": 261709918,
        "sender_full_name": "Moritz",
        "timestamp": 1637098368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz</span>, perhaps you are asking whether the concept <code>is_bounded_bilinear_map</code> should be \"bundled\".  Is that right?</p>",
        "id": 261711599,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637099284
    },
    {
        "content": "<p>That is, you're asking whether it would be better to define something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bounded_bilinear_form</span> <span class=\"kd\">extends</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bounded</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261712113,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637099571
    },
    {
        "content": "<p>I was asking whether one could imitate the definition of <code>bilin_form</code>, but extending it sounds even better</p>",
        "id": 261712398,
        "sender_full_name": "Moritz",
        "timestamp": 1637099710
    },
    {
        "content": "<p>I believe this is a case where it was written \"unbundled\" a long time ago, before bundling everything became the mathlib convention.  It seems that <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wrote the first version of this file back in 2018 so he can probably confirm this.</p>",
        "id": 261712691,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637099862
    },
    {
        "content": "<p>Offhand, I would say, yes, it might be good to change to a bundled definition, but it might be a fair bit of work to switch over.</p>",
        "id": 261712822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637099905
    },
    {
        "content": "<p>For something related which is already bundled, check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_multilinear_map\">docs#continuous_multilinear_map</a></p>",
        "id": 261712903,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637099947
    },
    {
        "content": "<p>Mathlib often goes through large-scale refactors like this, so if there's a consensus, you'd be welcome to switch it over (but we usually try to save our newcomers from having to do this kind of tedious work <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> )</p>",
        "id": 261713606,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637100257
    },
    {
        "content": "<p>I've actually found that bundling stuff is really educational! Several Imperial students bundled basic algebraic stuff very early on in their career and I'm convinced it taught them a lot. \"Look at this file, now try to do the same with this thing\"</p>",
        "id": 261713821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637100369
    },
    {
        "content": "<p>I feel it is more tedious to prove Lax-Milgram with the unbundled version :-D</p>",
        "id": 261713839,
        "sender_full_name": "Moritz",
        "timestamp": 1637100381
    },
    {
        "content": "<p>(I am delighted to hear someone is attacking Lax-Milgram!)</p>",
        "id": 261713929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637100434
    },
    {
        "content": "<p>Yeah, refactoring the stuff in linear_algebra was really instructive, even though it was not that difficult. I am just afraid that if I start refactoring everything I find, I will never prove anything in Lean</p>",
        "id": 261713997,
        "sender_full_name": "Moritz",
        "timestamp": 1637100476
    },
    {
        "content": "<p>welcome to what we do here ;b</p>",
        "id": 261714103,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637100512
    },
    {
        "content": "<p>I don't think I introduced bounded bilinear maps. But I can confirm that nothing was bundled in 2018</p>",
        "id": 261714139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637100530
    },
    {
        "content": "<p>Ah, in fact it was <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, in <a href=\"https://github.com/leanprover-community/mathlib/issues/966\">#966</a>.</p>",
        "id": 261714740,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637100833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz</span> <a href=\"#narrow/stream/113489-new-members/topic/Bounded.20bilinear.20forms/near/261713839\">said</a>:</p>\n<blockquote>\n<p>I feel it is more tedious to prove Lax-Milgram with the unbundled version :-D</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz</span> <a href=\"#narrow/stream/113489-new-members/topic/Bounded.20bilinear.20forms/near/261713997\">said</a>:</p>\n<blockquote>\n<p>I am just afraid that if I start refactoring everything I find, I will never prove anything in Lean</p>\n</blockquote>\n<p>Indeed, there's a bit of \"tedious either way\" going on here .... but my guess is that it'll be slightly pleasanter (for now) to do it with the existing, unbundled version, feel free to recruit help on Zulip for things that feel harder than they should be.</p>",
        "id": 261715215,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637101070
    },
    {
        "content": "<p>Actually, a third way would be to assume</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_bounded_bilinear_map</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is a little redundant (since it's stating the bilinearity twice), but not actually wrong.</p>",
        "id": 261717085,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637101944
    },
    {
        "content": "<p>(I mean, hopefully this would not be what is done in the library in another 3 years from now, but I think it's a perfectly fine hack for now.)</p>",
        "id": 261717522,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637102159
    },
    {
        "content": "<p>The issue with not cleaning up now (or soon) is that it will only get more involved the more stuff we build on top of the non-refactored structure.</p>",
        "id": 261907861,
        "sender_full_name": "Moritz",
        "timestamp": 1637230359
    },
    {
        "content": "<p>I've looked at the linear algebra part of it and I feel like even that is in need of a quite significant cleanup: I think it is possible to unify <code>bilinear_map</code>, <code>bilin_form</code> and <code>sesq_form</code> into a single <code>semibilin_map</code> which has the former three as special cases. The definition could be essentially what is the definition of <code>bilin_form</code> but way more general (yesterday I generalized it to a bilinear map, but not with the ring homomorphism yet). the way that <code>bilin_form</code> is written makes it easy to extend it to a bounded bilinear form, I don't see how to do the same thing with the current definition of the bilinear map.</p>",
        "id": 261908431,
        "sender_full_name": "Moritz",
        "timestamp": 1637230696
    },
    {
        "content": "<p>Is it ok to do a pull-request with a very much wip version just to get feedback on whether this has any chance of getting accepted into mathlib?</p>",
        "id": 261908568,
        "sender_full_name": "Moritz",
        "timestamp": 1637230794
    },
    {
        "content": "<p>Certainly! There are <code>RFC</code> and <code>WIP</code> labels that you can use.</p>",
        "id": 261908677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637230847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz</span> <a href=\"#narrow/stream/113489-new-members/topic/Bounded.20bilinear.20forms/near/261908431\">said</a>:</p>\n<blockquote>\n<p>I've looked at the linear algebra part of it and I feel like even that is in need of a quite significant cleanup: I think it is possible to unify <code>bilinear_map</code>, <code>bilin_form</code> and <code>sesq_form</code> into a single <code>semibilin_map</code> which has the former three as special cases. The definition could be essentially what is the definition of <code>bilin_form</code> but way more general (yesterday I generalized it to a bilinear map, but not with the ring homomorphism yet). the way that <code>bilin_form</code> is written makes it easy to extend it to a bounded bilinear form, I don't see how to do the same thing with the current definition of the bilinear map.</p>\n</blockquote>\n<p>Is there any reason to use these over things like <code>E →ₗ[R] F →ₗ[R] G</code>?</p>",
        "id": 261924572,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1637241058
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> to <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Bounded.20bilinear.20forms\">#maths &gt; Bounded bilinear forms</a></p>",
        "id": 261947666,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637251359
    },
    {
        "content": "<p>I was also thinking about this because just yesterday I opened a PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/10373\">#10373</a>) to allow semilinear versions of maps of type <code>E →ₗ[R] F →ₗ[R] G</code>, i.e. <code>E →ₛₗ[σ] F →ₛₗ[ρ] G</code>, with <code>[module R₁ E]</code>, <code>[module R₂ F]</code> and <code>[module R₃ G]</code>, and <code>σ : R₁ →+* R₃</code>, <code>ρ : R₂ →+* R₃</code>. As far as I can tell, this should cover pretty much all cases of interest, so I was wondering if we should just use that systematically and deprecate <code>bilin_form</code> and <code>sesq_form</code>.</p>",
        "id": 261948117,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1637251514
    }
]