[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20rid.20of.20lambda.20in.20the.20infoview/near/279853732\">said</a>:</p>\n<blockquote>\n<p>Try this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⊔</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Cool, looks like this works without any changes needed :)</p>",
        "id": 279854183,
        "sender_full_name": "jachym simon",
        "timestamp": 1650648205
    },
    {
        "content": "<p>Thank you all :)</p>",
        "id": 279854228,
        "sender_full_name": "jachym simon",
        "timestamp": 1650648237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"226682\">jachym simon</span> has marked this topic as resolved.</p>",
        "id": 279854308,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650648263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"226682\">jachym simon</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20getting.20rid.20of.20lambda.20in.20the.20infoview/near/279853044\">said</a>:</p>\n<blockquote>\n<p>The <code>Form</code>  is a type that represents logical formulas. It doesnt have <code>le</code> operator</p>\n</blockquote>\n<p>Probably the <code>le</code> operator would be <code>A \\le B = A.imp B</code></p>",
        "id": 279854508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650648362
    },
    {
        "content": "<p>to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Prop.distrib_lattice\">docs#Prop.distrib_lattice</a></p>",
        "id": 279854537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650648377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20getting.20rid.20of.20lambda.20in.20the.20infoview/near/279850795\">said</a>:</p>\n<blockquote>\n<p>I had no idea that was legal syntax</p>\n</blockquote>\n<p>Commands can all take attributes and modifiers, but it's up to the command to validate what it's been given -- I've noticed validation can be sort of patchy. Tada:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class, to_additive]</span> <span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add</span>\n</code></pre></div>\n<p>The notation commands completely ignore attributes and modifiers, and they have no effect.</p>",
        "id": 279867083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650654923
    },
    {
        "content": "<p>Does <code>priority</code> do something?</p>",
        "id": 279915823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650704128
    },
    {
        "content": "<p>Oh, found the bug. When you add <code>local</code> then it accidentally turns off the checks that there are no attributes or modifiers.</p>",
        "id": 279934498,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650731752
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/711\">lean#711</a></p>",
        "id": 279936573,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650734613
    }
]