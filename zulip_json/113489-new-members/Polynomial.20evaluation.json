[
    {
        "content": "<p>Hi all: I need advice on whether this somewhat specific polynomial evaluation lemma (and the corresponding <code>finset.sum</code>) should be PRd into mathlib (<code>data.polynomial.eval.lean</code>). I need to use it pretty heavily for the case of polynomials over ℝ, but I guess it could be extended to <code>[comm_semiring R]</code>. The proof is rather simple hence omitted.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">eval_finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span>\n    <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span> <span class=\"err\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>   <span class=\"err\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207657272,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598028746
    },
    {
        "content": "<p>I would generalise the ring and the finset</p>",
        "id": 207657377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598028809
    },
    {
        "content": "<p>See <code>mv_polynomial.eval_prod</code></p>",
        "id": 207657437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598028838
    },
    {
        "content": "<p>Is there anything we should do if all checks of CI on a PR are successful except linting? I see there are lots of PRs in the same situation lately.</p>",
        "id": 207696987,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598053842
    },
    {
        "content": "<p>I think most contributors don't mind if you push a commit that fixes linting errors.</p>",
        "id": 207697013,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598053885
    },
    {
        "content": "<p>OK, then the problem is that I have no idea about linting at all.</p>",
        "id": 207697085,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598053941
    },
    {
        "content": "<p>Ah, you can check the logs from CI to see what the errors are. Let me see if there's a good example.</p>",
        "id": 207697228,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598054070
    },
    {
        "content": "<p>You can click on \"Details\" next to the failed check on a PR and then click next to the linting step to see errors. The log should tell you what's wrong and how to fix it. For example, the linting errors on <a href=\"https://github.com/leanprover-community/mathlib/issues/3903\">#3903</a> are here: <a href=\"https://github.com/leanprover-community/mathlib/pull/3903/checks?check_run_id=1014500486#step:5:8\">https://github.com/leanprover-community/mathlib/pull/3903/checks?check_run_id=1014500486#step:5:8</a></p>",
        "id": 207697341,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598054169
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>\n<p>OK, so just to be sure: the person who opened the PR is always supposed to fix the linting errors. Correct?</p>",
        "id": 207697490,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598054339
    },
    {
        "content": "<p>Yes, they're held responsible (unless they state otherwise in a comment).</p>",
        "id": 207697525,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598054387
    },
    {
        "content": "<p>But I think one should assume unless said otherwise that it's okay to directly fix other people's linting errors if you feel so inclined.</p>",
        "id": 207697855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598054707
    },
    {
        "content": "<p>The original author is responsible for shepherding the PR all the way through to completion (including linting), but it's a collaborative process, and it's super useful, and appreciated, when others either make suggestions via the github interface, or just push commits fixing things.</p>",
        "id": 207697955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598054800
    },
    {
        "content": "<p>I need a little more help so I can be more efficient myself. <br>\nFirst off, is there anything one can do to check linting before a PR? <br>\nSecond, I do realize what the first error is and how to fix it. But the second, I'm not sure: I have <code> {ι : Type*} [decidable_eq ι]</code> in my arguments and the linter wants to replace with <code>classical</code>. Not sure how to do that in one lemma.<br>\nAnd third, if I fix these linting errors myself, how do I ask the system to check again?</p>",
        "id": 207698045,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598054894
    },
    {
        "content": "<ol>\n<li>write <code>#lint</code> at the bottom of a file</li>\n</ol>",
        "id": 207698097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598054987
    },
    {
        "content": "<ol start=\"2\">\n<li>just delete those hypotheses, and run thee <code>classical</code> tactic at the beginning of the proof</li>\n</ol>",
        "id": 207698152,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598055013
    },
    {
        "content": "<ol start=\"3\">\n<li>push a new commit to the PR branch, and continuous integration will automatically re-run the linter</li>\n</ol>",
        "id": 207698165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598055028
    }
]