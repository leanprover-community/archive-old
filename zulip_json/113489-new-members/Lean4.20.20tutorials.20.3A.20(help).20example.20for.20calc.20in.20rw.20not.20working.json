[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm getting errors for <code>h1</code> and <code>h2</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">rewrite</span> <span class=\"n\">using</span> <span class=\"n\">equation</span> <span class=\"n\">theorems</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">h1'</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">rewrite</span> <span class=\"n\">using</span> <span class=\"n\">equation</span> <span class=\"n\">theorems</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">h2'</span>\n</code></pre></div>\n<p>what am I doing wrong?</p>",
        "id": 305579109,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666468277
    },
    {
        "content": "<p>My guess is that <code>h1</code> is about a different <code>b</code>. Try <code>include b c d</code> before the theorem, or put all the hypotheses and variables in the theorem statement rather than before it.</p>",
        "id": 305581138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666469137
    },
    {
        "content": "<p>If you put <code>set_option autoImplicit false</code> at the top of your file then do you get an error in Theorem T?</p>",
        "id": 305581439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666469241
    },
    {
        "content": "<p>using include like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">include</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>include has a red squiggly line showing a message <code>expected command</code></p>",
        "id": 305582968,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470019
    },
    {
        "content": "<p>I'm sorry, I don't really speak Lean 4. Just move all the variables and hypotheses after <code>T</code> and you should be fine.</p>",
        "id": 305583019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666470062
    },
    {
        "content": "<p>and adding <code>set_option autoImplicit false</code> doesn't change the error</p>",
        "id": 305583054,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470099
    },
    {
        "content": "<p>What you're trying to do now is kind of mathematically meaningless, hypothesis h1 says \"for all a and b, a=b\", whereas you only want this hypothesis for the a and b in your theorem statement.</p>",
        "id": 305583065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666470109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305583019\">said</a>:</p>\n<blockquote>\n<p>I'm sorry, I don't really speak Lean 4. Just move all the variables and hypotheses after <code>T</code> and you should be fine.</p>\n</blockquote>\n<p>like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get 2 messages in addition to previous errors. These errors are related to b and c stating</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'b'</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'c'</span>\n</code></pre></div>",
        "id": 305583443,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305583065\">said</a>:</p>\n<blockquote>\n<p>What you're trying to do now is kind of mathematically meaningless, hypothesis h1 says \"for all a and b, a=b\", whereas you only want this hypothesis for the a and b in your theorem statement.</p>\n</blockquote>\n<p>I realised that right now but when I was following the tutorial it didn't strike me :)</p>",
        "id": 305583525,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470490
    },
    {
        "content": "<p>I'm guessing Kevin meant something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">T</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 305583526,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666470493
    },
    {
        "content": "<p>Thanks Ruben. Sorry, I'm not at Lean right now.</p>",
        "id": 305583553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666470538
    },
    {
        "content": "<p>Oh! got it! Thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 305583564,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470546
    },
    {
        "content": "<p>let me try that</p>",
        "id": 305583574,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470555
    },
    {
        "content": "<p>Now <code>h1</code> is about the <code>a</code> and <code>b</code> in your theorem, rather than some arbitrary <code>a</code> and <code>b</code>.</p>",
        "id": 305583582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666470566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305583526\">said</a>:</p>\n<blockquote>\n<p>I'm guessing Kevin meant something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">T</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so that still is not working for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">T</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>has the same error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">rewrite</span> <span class=\"n\">using</span> <span class=\"n\">equation</span> <span class=\"n\">theorems</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">h1'</span>\n</code></pre></div>",
        "id": 305584023,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470914
    },
    {
        "content": "<p>and similarly for h2</p>",
        "id": 305584047,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666470948
    },
    {
        "content": "<p>Well then I don't know :)</p>",
        "id": 305584440,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666471221
    },
    {
        "content": "<p>I'm sorry :) <del>maybe</del> definitely doing something wrong<br>\nBut I cannot understand what? </p>\n<p>Is the above code working fine for you?</p>",
        "id": 305584493,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666471278
    },
    {
        "content": "<p>This code looks to me like it would work fine in Lean 3 but I don't really speak Lean 4 yet.</p>",
        "id": 305584515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666471315
    },
    {
        "content": "<p>(well, in Lean 3 there would be <code>...</code> instead of <code>_</code>, I don't know the syntax for <code>calc</code> in Lean 4)</p>",
        "id": 305584596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666471366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557243\">@Shubham Kumar</span> what version of Lean4 are you using?</p>",
        "id": 305584745,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666471488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305584745\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar</span> what version of Lean4 are you using?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">❯</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b7519</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305584782,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666471515
    },
    {
        "content": "<p>I'm not sure <code>calc</code> existed back then. I've got to a computer and can confirm that the code works fine with a recent nightly build.</p>",
        "id": 305584865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666471568
    },
    {
        "content": "<p>(Oh, sorry, that version is not as old as I thought, but it's still very old)</p>",
        "id": 305584875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666471585
    },
    {
        "content": "<p>That's a few months old</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b751917a7fe020485bf57f41fdddcaafa</span>\n<span class=\"n\">Author</span><span class=\"o\">:</span> <span class=\"n\">Leonardo</span> <span class=\"n\">de</span> <span class=\"n\">Moura</span> <span class=\"bp\">&lt;</span><span class=\"n\">leonardo</span><span class=\"bp\">@</span><span class=\"n\">microsoft.com</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">Date</span><span class=\"o\">:</span>   <span class=\"n\">Sun</span> <span class=\"n\">Aug</span> <span class=\"mi\">7</span> <span class=\"mi\">09</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">18</span> <span class=\"mi\">2022</span> <span class=\"bp\">-</span><span class=\"mi\">0700</span>\n\n    <span class=\"n\">fix</span><span class=\"o\">:</span> <span class=\"n\">bug</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">mkSizeOfSpecLemmaInstance</span><span class=\"bp\">`</span>\n\n    <span class=\"n\">closes</span> <span class=\"bp\">#</span><span class=\"mi\">1441</span>\n</code></pre></div>",
        "id": 305584887,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666471593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305584887\">said</a>:</p>\n<blockquote>\n<p>That's a few months old</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">commit</span> <span class=\"mi\">7</span><span class=\"n\">dbfaf9b751917a7fe020485bf57f41fdddcaafa</span>\n<span class=\"n\">Author</span><span class=\"o\">:</span> <span class=\"n\">Leonardo</span> <span class=\"n\">de</span> <span class=\"n\">Moura</span> <span class=\"bp\">&lt;</span><span class=\"n\">leonardo</span><span class=\"bp\">@</span><span class=\"n\">microsoft.com</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">Date</span><span class=\"o\">:</span>   <span class=\"n\">Sun</span> <span class=\"n\">Aug</span> <span class=\"mi\">7</span> <span class=\"mi\">09</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">18</span> <span class=\"mi\">2022</span> <span class=\"bp\">-</span><span class=\"mi\">0700</span>\n\n    <span class=\"n\">fix</span><span class=\"o\">:</span> <span class=\"n\">bug</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">mkSizeOfSpecLemmaInstance</span><span class=\"bp\">`</span>\n\n    <span class=\"n\">closes</span> <span class=\"bp\">#</span><span class=\"mi\">1441</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>oh let me update it, thanks <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> !</p>",
        "id": 305584914,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666471627
    },
    {
        "content": "<p>ok, so I updated my lean version using elan and my current version is</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯ lean --version\nLean <span class=\"o\">(</span>version <span class=\"m\">4</span>.0.0, commit 7dbfaf9b7519, Release<span class=\"o\">)</span>\n</code></pre></div>\n<p>And I restarted my system but the error is still there</p>",
        "id": 305585260,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666471963
    },
    {
        "content": "<p>do I need to rebuild it?</p>",
        "id": 305585282,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666471985
    },
    {
        "content": "<p>that's the same lean version</p>",
        "id": 305585372,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472047
    },
    {
        "content": "<p>oh yeah that's right, sorry I thought it was updated</p>",
        "id": 305585398,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472081
    },
    {
        "content": "<p>I'm using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">faa612e7b79a</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I don't see the error</p>",
        "id": 305585403,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472084
    },
    {
        "content": "<p>I'll try again</p>",
        "id": 305585413,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472089
    },
    {
        "content": "<p>sorry again</p>",
        "id": 305585421,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472097
    },
    {
        "content": "<p>so I need to switch to nightly?</p>",
        "id": 305585438,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472116
    },
    {
        "content": "<p>I think most folks using Lean 4 use the nightly releases.</p>",
        "id": 305585453,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472144
    },
    {
        "content": "<p>ok got it</p>",
        "id": 305585463,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472156
    },
    {
        "content": "<p>how do I set nightly to be <code>4.0.0-nightly-2022-10-18</code>?<br>\nIt's currently</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯ lean --version\nLean <span class=\"o\">(</span>version <span class=\"m\">3</span>.9.0, nightly-2020-04-28, commit f1fc405f5290, Release<span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯ elan override <span class=\"nb\">set</span> <span class=\"m\">4</span>.0.0-nightly-2022-10-18\ninfo: downloading component <span class=\"s1\">'lean'</span>\nError<span class=\"o\">(</span>Download<span class=\"o\">(</span>HttpStatus<span class=\"o\">(</span><span class=\"m\">404</span><span class=\"o\">))</span>, State <span class=\"o\">{</span> next_error: None, backtrace: InternalBacktrace <span class=\"o\">{</span> backtrace: None <span class=\"o\">}</span> <span class=\"o\">})</span>\nerror: could not download nonexistent lean version <span class=\"sb\">`</span><span class=\"m\">4</span>.0.0-nightly-2022-10-18<span class=\"sb\">`</span>\ninfo: caused by: could not download file from <span class=\"s1\">'https://github.com/leanprover/lean/releases/expanded_assets/v4.0.0-nightly-2022-10-18'</span> to <span class=\"s1\">'/home/sk/.elan/tmp/spc0c3_chdtf7s44_file'</span>\ninfo: caused by: http request returned an unsuccessful status code: <span class=\"m\">404</span>\n</code></pre></div>\n<p>but that didn't work, any help regarding this?</p>",
        "id": 305585699,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472388
    },
    {
        "content": "<p>My project root has a file named <code>lean-toolchain</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">18</span>\n</code></pre></div>",
        "id": 305585830,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472477
    },
    {
        "content": "<p>It's also possible that you need to update <code>elan</code>.</p>",
        "id": 305585844,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472496
    },
    {
        "content": "<p><code>elan self update</code> usually works.</p>",
        "id": 305585862,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472516
    },
    {
        "content": "<p>Are you working in a Lean project? This is the correct way to be using Lean.</p>",
        "id": 305585933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666472555
    },
    {
        "content": "<p>so <code>elan self update</code> results in no update</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯ elan self update\ninfo: checking <span class=\"k\">for</span> self-updates\n</code></pre></div>",
        "id": 305585943,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472575
    },
    {
        "content": "<p>You should just update the version of Lean used in the project itself. Unfortunately I don't know how to do this in Lean 4.</p>",
        "id": 305585954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666472584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305585933\">said</a>:</p>\n<blockquote>\n<p>Are you working in a Lean project? This is the correct way to be using Lean.</p>\n</blockquote>\n<p>I am actually learning lean by following tutorials, I'm not sure if you were asking me?</p>",
        "id": 305585971,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472601
    },
    {
        "content": "<p>Is the tutorial in a Lean project?</p>",
        "id": 305585986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666472618
    },
    {
        "content": "<p>I expect <code>elan override set leanprover/lean4:nightly-2022-10-18</code> to work.</p>",
        "id": 305585993,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666472625
    },
    {
        "content": "<p>Whenever I use Lean I am working in a Lean project, not just with a random file at some random place in my filesystem</p>",
        "id": 305586053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666472644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305585986\">said</a>:</p>\n<blockquote>\n<p>Is the tutorial in a Lean project?</p>\n</blockquote>\n<p>umm I don't understand that question the tutorial is TPiL and I used the hyperlink provided to setup the project using lake. <br>\nTPiL : <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a><br>\nBasic setup : <a href=\"https://leanprover.github.io/lean4/doc/setup.html\">https://leanprover.github.io/lean4/doc/setup.html</a></p>",
        "id": 305586195,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472767
    },
    {
        "content": "<p>I don't know if I answered your question</p>",
        "id": 305586209,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472794
    },
    {
        "content": "<p>I am just learning by following the TPiL book I guess</p>",
        "id": 305586229,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305586053\">said</a>:</p>\n<blockquote>\n<p>Whenever I use Lean I am working in a Lean project, not just with a random file at some random place in my filesystem</p>\n</blockquote>\n<p>I think lake scaffolds a lean project so I think that covers it</p>",
        "id": 305586275,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305585993\">said</a>:</p>\n<blockquote>\n<p>I expect <code>elan override set leanprover/lean4:nightly-2022-10-18</code> to work.</p>\n</blockquote>\n<p>Yes that worked! Thanks <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">❯</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">faa612e7b79a</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305586367,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666472923
    },
    {
        "content": "<p>for reference this is what my directory looks like</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>❯ exa --tree\n.\n├── build\n│  ├── ir\n│  └── lib\n│     └── Main.ilean\n├── lakefile.lean\n└── Main.lean\n</code></pre></div>",
        "id": 305586483,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473013
    },
    {
        "content": "<p>so your errors went away?</p>",
        "id": 305586495,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666473028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305586495\">said</a>:</p>\n<blockquote>\n<p>so your errors went away?</p>\n</blockquote>\n<p>sadly no <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 305586515,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473058
    },
    {
        "content": "<p>yeah I don't know maybe I try a fresh project scaffold</p>",
        "id": 305586541,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473080
    },
    {
        "content": "<p>Why not just make a new Lean project with today's Lean?</p>",
        "id": 305586552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473083
    },
    {
        "content": "<p>If you create a file called <code>lean-toolchain</code> at the project root containing the single line <code>leanprover/lean4:nightly-2022-10-18</code>, that should set the correct version of Lean.</p>",
        "id": 305586574,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1666473099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305586552\">said</a>:</p>\n<blockquote>\n<p>Why not just make a new Lean project with today's Lean?</p>\n</blockquote>\n<p>Yeah that's what I was thinking</p>",
        "id": 305586606,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473119
    },
    {
        "content": "<p>I think that if you're using Lean within the TPIL project then it will use the version of Lean which the TPIL config file tells it to use, no matter how hard you try to override this.</p>",
        "id": 305586617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473123
    },
    {
        "content": "<p>I am not sure that taking TPIL and then randomly changing the version of Lean is a good idea.</p>",
        "id": 305586674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473143
    },
    {
        "content": "<p>That might solve the problem at hand but it might create a whole host of new problems</p>",
        "id": 305586704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305586574\">said</a>:</p>\n<blockquote>\n<p>If you create a file called <code>lean-toolchain</code> at the project root containing the single line <code>leanprover/lean4:nightly-2022-10-18</code>, that should set the correct version of Lean.</p>\n</blockquote>\n<p>I'll try this</p>",
        "id": 305586736,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473161
    },
    {
        "content": "<p>I would strongly recommend against doing that</p>",
        "id": 305586782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473178
    },
    {
        "content": "<p>You risk breaking the entire project</p>",
        "id": 305586802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473186
    },
    {
        "content": "<p>Just create a new project</p>",
        "id": 305586824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305586824\">said</a>:</p>\n<blockquote>\n<p>Just create a new project</p>\n</blockquote>\n<p>yeah I was going to do that</p>",
        "id": 305586850,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473204
    },
    {
        "content": "<p>and add the lean-toolchain file</p>",
        "id": 305586885,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473218
    },
    {
        "content": "<p>is that ok?</p>",
        "id": 305586905,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473224
    },
    {
        "content": "<p>I am not using TPiL locally, I am using TPiL as a book I think it should be ok, right?</p>",
        "id": 305587027,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473258
    },
    {
        "content": "<p>I'm really sorry, I don't use Lean 4. Just follow the instructions on creating a new Lean project with an up to date Lean 4 and then try your code in a file within that project.</p>",
        "id": 305587039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305587039\">said</a>:</p>\n<blockquote>\n<p>I'm really sorry, I don't use Lean 4. Just follow the instructions on creating a new Lean project with an up to date Lean 4 and then try your code in a file within that project.</p>\n</blockquote>\n<p>ok will try and do that</p>",
        "id": 305587091,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473282
    },
    {
        "content": "<p>Re your last TPIL message, I am confused about whether you are currently working in a project or not, but I think the simplest solution is that if you want to be working with the latest version of Lean then just make a new project which uses the latest version of Lean and work within that project.</p>",
        "id": 305587263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473339
    },
    {
        "content": "<p>so just to clarify I created a lean project using the steps provided here : <a href=\"https://leanprover.github.io/lean4/doc/setup.html\">https://leanprover.github.io/lean4/doc/setup.html</a></p>\n<p>That helped me create a lean project directory</p>\n<p>Then I started working through the exercises while reading the text material from TPIL.</p>\n<p>When I am trying to solve my exercise I use Main.lean as the only file where I try to solve problems using sections to separate the concepts that are different acc to me.</p>",
        "id": 305587767,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473520
    },
    {
        "content": "<p>Got it. And you did this in August?</p>",
        "id": 305587819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473542
    },
    {
        "content": "<p>no a couple of days back</p>",
        "id": 305587859,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473556
    },
    {
        "content": "<p>Then I was completely wrong with my assertions that you were about to break your project.</p>",
        "id": 305587864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473558
    },
    {
        "content": "<p>no worries, text is a hard medium to convey context</p>",
        "id": 305587914,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473578
    },
    {
        "content": "<p>but I was using the stable branch of lean 4 so I think nightly would be better as mentioned by <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> and <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span></p>",
        "id": 305588053,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473621
    },
    {
        "content": "<p>but I am still not sure so let me try at this once again</p>",
        "id": 305588124,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473651
    },
    {
        "content": "<p>I know sufficiently little about Lean 4 that I think it's best if I just shut up now. I've told you all I know. I'm sorry I couldn't be of more help. I'll tell you how I got your code working on my machine: I have a copy of this project <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a> on my machine, which uses a very recent nightly version of Lean. I just cut and pasted your code into a scratch file in that project and it worked fine.</p>",
        "id": 305588201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473682
    },
    {
        "content": "<p>I was scared that you had downloaded some kind of TPIL project but it sounds like you just made your own project, so I would do what <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> was suggesting; it won't break your project if your project is essentially empty. I had incorrectly understood that you were working in a project which someone else had made and you had cloned.</p>",
        "id": 305588435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305588201\">said</a>:</p>\n<blockquote>\n<p>I know sufficiently little about Lean 4 that I think it's best if I just shut up now. I've told you all I know. I'm sorry I couldn't be of more help. I'll tell you how I got your code working on my machine: I have a copy of this project <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a> on my machine, which uses a very recent nightly version of Lean. I just cut and pasted your code into a scratch file in that project and it worked fine.</p>\n</blockquote>\n<p>no it was nice back and forth and I was bad at addressing my situation too so it's kind of on me as well</p>",
        "id": 305588485,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473783
    },
    {
        "content": "<p>Apologies to Mauricio and you for misleading.</p>",
        "id": 305588488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean4.20.20tutorials.20.3A.20.28help.29.20example.20for.20calc.20in.20rw.20not.20working/near/305588435\">said</a>:</p>\n<blockquote>\n<p>I was scared that you had downloaded some kind of TPIL project but it sounds like you just made your own project, so I would do what <span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> was suggesting; it won't break your project if your project is essentially empty. I had incorrectly understood that you were working in a project which someone else had made and you had cloned.</p>\n</blockquote>\n<p>yes I will do that</p>",
        "id": 305588527,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666473797
    },
    {
        "content": "<p>Note that when you update your Lean it might break some code which previously worked, as well as hopefully getting some code which is currently broken, working :-)</p>",
        "id": 305588604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473832
    },
    {
        "content": "<p>Kevin's general message is completely right and is great advice to have in mind: Changing the <code>lean-toolchain</code> file from a pinned version to another pinned version is a bad idea, unless of course you're an experienced Lean user and can deal with the fallout yourself. But TPiL4 is a special beast becasue it gets tested by core Lean 4's CI, so if you have the latest version of TPiL4 then the latest nightly (or next day's nightly) is guaranteed to work with it.</p>",
        "id": 305588755,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1666473873
    },
    {
        "content": "<p>Oh so that's all the more reason why Mauricio was right :-)</p>",
        "id": 305588789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666473899
    },
    {
        "content": "<p>Actually, I think I confused the Lean Manual with TPiL4. The former one certainly gets tested by core Lean 4 CI, the latter seems to be tested separately. But <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/blob/master/lean-toolchain\">unfortunately TPiL4 is not pinned to any particular version of Lean</a>, so every time CI runs on the TPiL4 repo it gets tested against the latest nightly, which should be fine since CI is scheduled to run every night.</p>",
        "id": 305589329,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1666474088
    }
]