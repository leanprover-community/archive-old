[
    {
        "content": "<p>Is there a <code>has_Sup</code> instance for <code>enat</code>? If not, why not?</p>",
        "id": 167930813,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560332959
    },
    {
        "content": "<p>No. Because nobody got round to writing one yet.</p>",
        "id": 167931018,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560333125
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 167931071,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560333205
    },
    {
        "content": "<p>Is there any machinery which already handles given some finite upper bound of nats finding a minimal witness? (something to do with lattices? Sorry, I don't know anything about them)</p>",
        "id": 167931181,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560333304
    },
    {
        "content": "<p><code>nat.find</code> and <code>nat.find_greatest</code> will help. You should write a <code>complete_linear_order</code> instance.</p>",
        "id": 167931298,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560333407
    },
    {
        "content": "<p>You could prove that <code>nat</code> is a <code>conditionally_complete_linear_order_bot</code> first</p>",
        "id": 167931466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560333563
    },
    {
        "content": "<p>You should write a <code>transfer</code> tactic which just transports everything on nat to enat ;-)</p>",
        "id": 167932386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560334329
    },
    {
        "content": "<p>Is there a galois insertion thing you can do here?</p>",
        "id": 167932424,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560334370
    },
    {
        "content": "<p>Why is supremum defined as such in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>is there a quirk with lean that means that this would still work for a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S = (0, 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>:</mo><mi>x</mi><mo>&lt;</mo><mn>2</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> S = \\{ x : x &lt; 2 \\} </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">}</span></span></span></span>? I'm a tad confused why this works.</p>\n<p>Probably I should explain I'm trying to define supremum and infimum standalone as part of a project to formalise the Exeter Analysis course.</p>",
        "id": 211248110,
        "sender_full_name": "James Arthur",
        "timestamp": 1601035075
    },
    {
        "content": "<p>That is just the true-false statement that S has a top element. I don't really understand what the question is but suspect it might be a misunderstanding on your part rather than a quirk in Lean</p>",
        "id": 211248394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601035245
    },
    {
        "content": "<p>Maybe post more code?</p>",
        "id": 211248413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601035262
    },
    {
        "content": "<p>I stole that bit of code from this, which is part of data.real.basic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Sup_def</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">exists_sup</span> <span class=\"n\">S</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 211248456,
        "sender_full_name": "James Arthur",
        "timestamp": 1601035312
    },
    {
        "content": "<p>What I can't get my head around is that I'd define supremum as this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anal.sup</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Although, it's a bit of a mess and doesn't compile, it feels closer to what we are given in our notes. </p>\n<p>\"Similarly, if there exists an a ∈ R such that a ≤ x x ∈ S, then S is bounded below and a is a lower bound of S. If α is a lower bound of S, but no number is greater than α is, then α is called the infimum of S\"</p>",
        "id": 211249457,
        "sender_full_name": "James Arthur",
        "timestamp": 1601035915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"304228\">James Arthur</span> <a href=\"#narrow/stream/113489-new-members/topic/supremum/near/211248110\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n</blockquote>\n<p>This is not the definition of the sup. It's the condition under which a subset of the reals has a sup (nonempty and bounded above).</p>",
        "id": 211249551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601035953
    },
    {
        "content": "<p>Aah, you didn't even quote it correctly! x doesn't have to be in S in the second clause</p>",
        "id": 211249586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601035984
    },
    {
        "content": "<p>James I still don't understand the question. The lemma says that if S is any set at all, then <em>if</em> S is non-empty and bounded then the Lean function <code>Sup</code> will indeed return the supremum of S, and if it isn't then it will return a junk value.</p>",
        "id": 211249707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601036056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/supremum/near/211249551\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"304228\">James Arthur</span> <a href=\"#narrow/stream/113489-new-members/topic/supremum/near/211248110\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n</blockquote>\n<p>This is not the definition of the sup. It's the condition under which a subset of the reals has a sup (nonempty and bounded above).</p>\n</blockquote>\n<p>Ah, that makes a lot more sense.</p>",
        "id": 211249710,
        "sender_full_name": "James Arthur",
        "timestamp": 1601036058
    },
    {
        "content": "<p>There is a more general notion <code>is_lub</code> defined in <code>order.bounds</code>.</p>",
        "id": 211249736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601036087
    },
    {
        "content": "<p>Note also that <code>Sup</code> is a total function, like division, so 1/0 = junk value (=0) and Sup(all the reals) = junk value too.</p>",
        "id": 211249790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601036120
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anal.sup</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Does this compile? The second clause looks wrong.</p>",
        "id": 211249914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601036191
    },
    {
        "content": "<p>I want to define the supremum of a set of real numbers. There's problems with junk values, but I should be able to deal with them if I define the extended reals. My question was basically how do I define supremum because my version doesn't compile. I thought if I could work out how mathlib did it, I could rejig it into my code.</p>",
        "id": 211249967,
        "sender_full_name": "James Arthur",
        "timestamp": 1601036236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/supremum/near/211249914\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">anal.sup</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Does this compile? The second clause looks wrong.</p>\n</blockquote>\n<p>It is wrong and doesn't compile</p>",
        "id": 211249989,
        "sender_full_name": "James Arthur",
        "timestamp": 1601036249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"304228\">James Arthur</span> <a href=\"#narrow/stream/113489-new-members/topic/supremum/near/211249967\">said</a>:</p>\n<blockquote>\n<p>I want to define the supremum of a set of real numbers. There's problems with junk values, but I should be able to deal with them if I define the extended reals. My question was basically how do I define supremum because my version doesn't compile. I thought if I could work out how mathlib did it, I could rejig it into my code.</p>\n</blockquote>\n<p>You need to think hard about exactly the type of the term you want to define. Currently Lean has <code>Sup</code> which returns the sup of a set of reals if this sup exists, and returns 0 otherwise. You don't necessarily need to look at mathlib to see its internal design decisions, if you can write the maths then you can write it in Lean (perhaps after asking for hints first).</p>",
        "id": 211250135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601036336
    },
    {
        "content": "<p>But things like \"I should be able to deal with them if I use extended reals\" indicate to me that you still haven't actually decided what the source and target of the function you want to define is. So you should decide that first -- by which I mean make a precise decision which you understand can't be changed later --  this is a design decision which you will have to make as the designer.</p>",
        "id": 211250209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601036387
    },
    {
        "content": "<p>I know I want the code to be easy to read, preferably by my coursemates with help from lots of comments. I don't quite know how to define sup and inf, but I wanted it to be one definition for each, just with the two conditions that are given in the notes, while importing the reals from mathlib. We proved that the rationals aren't complete using it, which would be nice to prove using my sup and inf.</p>",
        "id": 211251403,
        "sender_full_name": "James Arthur",
        "timestamp": 1601037091
    },
    {
        "content": "<p>I'm sure that we'll be able to get you some easy-to-read code, you don't need to use the inbuilt Sup, you will be able to use the inbuilt theorem that if you have a non-empty bounded set of reals then it has a real Sup and if I'd had more time to work on the real number game over the summer then perhaps I would have been able to show you how we did it there. But right now you are going to have to define what the source and target of your <code>Sup</code> function are going to be, and this is your own decision. One you've decided, I'm sure we can help you make it. </p>\n<p>I once made a square root function (before mathlib had square roots) and I decided that I wanted the input to be a non-negative real, so I asked for two inputs -- a real, and a proof that it was non-negative. This worked fine, however it was sometimes a pain to use because I got sick of supplying proofs that e.g. 37 was non-negative. This is why mathlib has this <code>Sup</code> function, which does not always return the sup (in fact it fails to return the sup precisely when the sup doesn't exist) but it is easier to use.</p>",
        "id": 211252513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601037783
    },
    {
        "content": "<p>So I need to decide what goes into my sup and what comes out? Is that what you mean by source and target?</p>",
        "id": 211252869,
        "sender_full_name": "James Arthur",
        "timestamp": 1601038001
    },
    {
        "content": "<p>Yeah exactly. Let's establish that first.</p>",
        "id": 211252891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601038020
    },
    {
        "content": "<p>Here are some half-baked thoughts about formalising Imperial's analysis course by the way: <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean/tree/master/src\">https://github.com/ImperialCollegeLondon/M1P1-lean/tree/master/src</a> . You might find them useful</p>",
        "id": 211252923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601038039
    },
    {
        "content": "<p>Thankyou. </p>\n<p>I'd be happy if it had an input of a set of reals and outputted the supremum, if it exists, or zero.</p>",
        "id": 211253717,
        "sender_full_name": "James Arthur",
        "timestamp": 1601038554
    },
    {
        "content": "<p>So this is exactly what Sup does. Why don't you write the predicate first? That's a good way to start I guess. Write a function which takes a set S of reals and a real number x, and outputs the statement that x is a sup of S. That could be called <code>is_Sup</code> or something. Note that it will almost certainly be in lean already but you might want to write your own anyway, especially if this is for teaching purposes</p>",
        "id": 211263263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601043283
    },
    {
        "content": "<p>In fact it seems to me that you could probably go a long way with just <code>has_Sup</code> and <code>is_Sup</code></p>",
        "id": 211263564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601043421
    },
    {
        "content": "<p>Isn't this all you need in a basic analysis course?</p>",
        "id": 211263623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601043446
    },
    {
        "content": "<p>I probably just need <code>has_Sup</code> and <code>is_Sup</code>.</p>",
        "id": 211266153,
        "sender_full_name": "James Arthur",
        "timestamp": 1601044729
    },
    {
        "content": "<p>So then you don't need to get involved in weird functions which return 0 if a set doesn't have a sup.</p>",
        "id": 211266683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601045008
    },
    {
        "content": "<p>Amazing. Thats useful.</p>",
        "id": 211267256,
        "sender_full_name": "James Arthur",
        "timestamp": 1601045253
    }
]