[
    {
        "content": "<p>Not sure if this is just me or due to, e.g. the latest update to VSCode for Lean, but I've just encountered an issue where the orange bars disappear after a second or two when I first load a file in VSCode, but then upon making <em>any</em> modification to the file whatsoever, the orange bars re-appear (as expected) but then don't go away even after a minute or two. I've tried re-running <code>leanproject build</code> via the command line which usually solves the issue by (re-)compiling any mathlib files as necessary, but this time, it doesn't re-compile anything (from mathlib) and doing so doesn't seem to help at all.</p>\n<p>For reference, here is my <code>leanpkg.toml</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;lean-kata&quot;</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;0.1&quot;</span>\n<span class=\"n\">lean_version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;leanprover-community/lean:3.7.2&quot;</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">&quot;src&quot;</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">mathlib</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"s\">&quot;https://github.com/leanprover-community/mathlib&quot;</span><span class=\"p\">,</span> <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"s\">&quot;ecdb13831d4671eb304c41e78adb5b280c2fc365&quot;</span><span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>And my (only) Lean file <code>Solution.lean</code>, under <code>src/</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"c1\">-- This is in Preloaded.lean, so delete before submitting and `import Preloaded` instead</span>\n<span class=\"n\">def</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">subgroup_</span><span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">normal_</span><span class=\"err\">Δ</span><span class=\"bp\">_</span><span class=\"n\">iff_comm</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normal_subgroup</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 197248437,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1589273629
    },
    {
        "content": "<p>I think this sometimes happens if there is a <code>.olean</code> present that doesn't belong to a <code>.lean</code> file. At least I've had such crazy behaviour in the past. I fixed it with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">find</span> <span class=\"bp\">.</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"err\">&#39;</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"o\">]</span><span class=\"n\">olean&#39;</span> <span class=\"bp\">|</span> <span class=\"n\">xargs</span> <span class=\"n\">rm</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n</code></pre></div>",
        "id": 197248709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589273822
    },
    {
        "content": "<p>That's weird - for the second command (<code>leanproject get-cache</code>), I'm getting \"Failed to fetch mathlib oleans\"</p>",
        "id": 197248826,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1589273921
    },
    {
        "content": "<p>Check your leanproject version, it should be 0.0.6.</p>",
        "id": 197249029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274031
    },
    {
        "content": "<p>Wait</p>",
        "id": 197249096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274079
    },
    {
        "content": "<p>Shouldn't it be <code>leanproject get-mathlib-cache</code>?</p>",
        "id": 197249127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274103
    },
    {
        "content": "<p>Did all this change recently? You want to get your mathlib oleans. Look at the help for the version you're using and type the appropriate commands to get mathlib oleans without updating the version of mathlib</p>",
        "id": 197249254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274170
    },
    {
        "content": "<p>Thanks - doing:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ find . <span class=\"p\">|</span> grep <span class=\"s1\">&#39;[.]olean&#39;</span> <span class=\"p\">|</span> xargs rm\n$ leanproject get-mathlib-cache\n</code></pre></div>\n\n\n<p>solved the issue for me.</p>",
        "id": 197249404,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1589274275
    },
    {
        "content": "<p>Glad you worked out the issue!</p>\n<p>For anyone else struggling with a similar problem, I just want to add this has happened to me in the following cases: </p>\n<ol>\n<li>\n<p>I tried to run a tactic that infinite loops, like ‘’’repeat {rw add_comm}’’’</p>\n</li>\n<li>\n<p>I have too many other errors in my file. This can cause anomalous behavior. There’s a good blog post about this someone linked to that I will try to find. </p>\n</li>\n<li>\n<p>I applied a tactic like ‘’’simp’’’ that takes a REALLY long time to decide it failed, or I’m importing several very large packages and just need to wait a few minutes.</p>\n</li>\n</ol>",
        "id": 197295910,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589298281
    },
    {
        "content": "<ol start=\"4\">\n<li>you forgot to compile mathlib or download oleans, or the oleans that are there are out of date, so lean has decided to compile mathlib on the spot. This is always a bad idea because it's a lot of work and the oleans that result from compilation are not even saved for next time</li>\n</ol>",
        "id": 197301019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589300474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> I think you mean kevin's post <a href=\"https://xenaproject.wordpress.com/2020/03/24/no-errors/\">no errors</a></p>",
        "id": 197314581,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589306492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Orange.20bars.20never.20disappear.20in.20VSCode/near/197314581\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> I think you mean kevin's post <a href=\"https://xenaproject.wordpress.com/2020/03/24/no-errors/\">no errors</a></p>\n</blockquote>\n<p>Yes! Thank you!</p>",
        "id": 197315566,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589306913
    }
]