[
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/kbuzzard/xena/blob/master/lean_together/contrapos_final.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/lean_together/contrapos_final.lean\">https://github.com/kbuzzard/xena/blob/master/lean_together/contrapos_final.lean</a></p>\n<p>The question at the end is:</p>\n<div class=\"codehilite\"><pre><span></span>theorem both_ways (P Q : Prop) : (P → Q) ↔ (¬ Q → ¬ P) := by ??\n</pre></div>\n\n\n<p>Here's a sensible seeming answer with tactics:</p>\n<div class=\"codehilite\"><pre><span></span>theorem both_ways (P Q : Prop) : (P → Q) ↔ (¬ Q → ¬ P) :=\nbegin\n split,\n apply contrapositive,\n apply other_way\nend\n</pre></div>\n\n\n<p>I'm wondering how to do it without tactics.   I got started this way but this doesn't work.</p>\n<div class=\"codehilite\"><pre><span></span>theorem both_ways_again (P Q : Prop) : (P → Q) ↔ (¬ Q → ¬ P) :=\niff.intro (assume h1 : (P → Q), have (¬ Q → ¬ P), from contrapositive h1)\n          (assume h2 : (¬ Q → ¬ P), have (P → Q), from other_way h2)\n</pre></div>",
        "id": 156704881,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548262614
    },
    {
        "content": "<p>You want <code>show</code> instead of <code>have</code> I think.</p>",
        "id": 156705017,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1548262699
    },
    {
        "content": "<p>The <code>(P Q : Prop)</code> arguments in <code>contrapositive</code> and <code>other_way</code> should be implicit, or you should put in placeholders when you use them.</p>",
        "id": 156705048,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548262727
    },
    {
        "content": "<p>Also what Chris says.</p>",
        "id": 156705101,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548262774
    },
    {
        "content": "<p>OK, <code>show</code> is a definite, thanks.</p>\n<p>Revision:</p>\n<div class=\"codehilite\"><pre><span></span>theorem both_ways&#39; {P Q : Prop} : (P → Q) ↔ (¬ Q → ¬ P) :=\niff.intro (assume h1 : (P → Q), show (¬ Q → ¬ P), from (contrapositive h1))\n          (assume h2 : (¬ Q → ¬ P), show (P → Q), from (other_way h2))\n</pre></div>\n\n\n<p>I've modified the arguments for the lemmas be implicit, but Lean complains that it can't synthesise the placeholder.  I can't either!</p>\n<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\nP Q : Prop\n⊢ Type ?\n</pre></div>",
        "id": 156705905,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548263299
    },
    {
        "content": "<p>oh, wait a second, now the server has refreshed and it seems to be fine.</p>",
        "id": 156706290,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548263555
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 156706332,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548263582
    }
]