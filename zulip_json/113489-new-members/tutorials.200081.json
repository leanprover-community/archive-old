[
    {
        "content": "<p>I'm currently working through <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's tutorial and Lean claims to not recognize inv_succ_pos though I believe it's supposed to be available when doing exercise 81. I checked tuto_lib.lean and it's not there, so maybe it was accidentally left out?</p>",
        "id": 198283182,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590032288
    },
    {
        "content": "<p>Please provide links to the files you're talking about.</p>",
        "id": 198283216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590032379
    },
    {
        "content": "<p>Sorry, exercise 81 is in the file which is on github here: <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/09_limits_final.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/09_limits_final.lean</a></p>",
        "id": 198283268,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590032450
    },
    {
        "content": "<p>tuto_lib.lean is here: <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/solutions/tuto_lib.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/solutions/tuto_lib.lean</a></p>",
        "id": 198283291,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590032502
    },
    {
        "content": "<p>I'm trying to follow the instructions in the README of the tutorial about making threads on zulip to ask about it, sorry if I've left out context</p>",
        "id": 198283344,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590032552
    },
    {
        "content": "<p>It's proved in <code>00_first_proofs.lean</code>, so you could add <code>import .00_first_proofs</code> at the top of your file as a workaround.</p>",
        "id": 198283579,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590032848
    },
    {
        "content": "<p>When I do that it tells me \"command expected\"</p>",
        "id": 198283804,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033150
    },
    {
        "content": "<p>Weird, can you copy paste the top of your file?</p>",
        "id": 198283873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033250
    },
    {
        "content": "<p>import tuto_lib<br>\nimport .00_first_proofs</p>\n<p>set_option pp.beta true<br>\nset_option pp.coercions false</p>",
        "id": 198283876,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033274
    },
    {
        "content": "<p>the only change I made was the one Bryan suggested</p>",
        "id": 198283879,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033288
    },
    {
        "content": "<p>Tip: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 198283892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033318
    },
    {
        "content": "<p>strangely, after doing this VS Code was able to auto-complete to inv_succ_pos but lean still didn't recognize it</p>",
        "id": 198283897,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033324
    },
    {
        "content": "<p>Very weird...</p>",
        "id": 198283917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tuto_lib</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"bp\">_</span><span class=\"n\">first_proofs</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">beta</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">coercions</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 198283922,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033355
    },
    {
        "content": "<p>oops</p>",
        "id": 198283925,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033359
    },
    {
        "content": "<p>You can edit</p>",
        "id": 198283965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033364
    },
    {
        "content": "<p>You need 3 backticks on their own line</p>",
        "id": 198283978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033388
    },
    {
        "content": "<p>Yeah it took me too long to realize you were linking to something</p>",
        "id": 198283990,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033422
    },
    {
        "content": "<p>Anyway, I really don't know what's wrong now... Could you try saving and restarting?</p>",
        "id": 198283992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033425
    },
    {
        "content": "<p>sure</p>",
        "id": 198283997,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033432
    },
    {
        "content": "<p>same behavior</p>",
        "id": 198284046,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033485
    },
    {
        "content": "<p>Can you write <code>#print up_bounds</code> just after the import statements?</p>",
        "id": 198284071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033558
    },
    {
        "content": "<p>And maybe change the <code>import</code> to <code>import exercises.00_first_proofs</code></p>",
        "id": 198284141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033612
    },
    {
        "content": "<p>Is there a red underline under one of the import statements?</p>",
        "id": 198284151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033631
    },
    {
        "content": "<p>Heh, I see. The source directory in <code>leanpkg.toml</code> is set to <code>src/solutions</code>.</p>",
        "id": 198284152,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590033635
    },
    {
        "content": "<p>So just <code>import 00_first_proofs</code> should work</p>",
        "id": 198284166,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590033670
    },
    {
        "content": "<p>Or it would, if Lean accepted imports of files that started with 0, I guess.</p>",
        "id": 198284174,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590033690
    },
    {
        "content": "<p>I tried <code>#print up_bounds</code> and it highlited <code>import .00_first_proofs</code></p>",
        "id": 198284227,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033727
    },
    {
        "content": "<p>I also tried <code>import 00_first_proofs</code> initially but it didn't work</p>",
        "id": 198284237,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033752
    },
    {
        "content": "<p><code>import «00_first_proofs»</code>?</p>",
        "id": 198284258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033779
    },
    {
        "content": "<p>Does that work around the \"you cannot start with a digit\" problem?</p>",
        "id": 198284269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590033794
    },
    {
        "content": "<p>how do you make that symbol before 00?</p>",
        "id": 198284296,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033833
    },
    {
        "content": "<p>wait nvm I figured out how to make it</p>",
        "id": 198284350,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033866
    },
    {
        "content": "<p>it says \"illegal character in escaped identifier\"</p>",
        "id": 198284362,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033902
    },
    {
        "content": "<p>oops I probably messed it up</p>",
        "id": 198284377,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033939
    },
    {
        "content": "<p>With <code>\\f&lt;&lt;</code> and <code>\\f&gt;&gt;</code> it works for me, but then <code>le_lim</code> gets an error because it's already defined.</p>",
        "id": 198284407,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590033961
    },
    {
        "content": "<p>I didn't know this trick, by the way. Is it just for imports?</p>",
        "id": 198284452,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590033989
    },
    {
        "content": "<p>yeah that's what I have now too</p>",
        "id": 198284455,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590033994
    },
    {
        "content": "<p>I initially left out the <code>\\f&gt;&gt;</code></p>",
        "id": 198284467,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590034019
    },
    {
        "content": "<p>but at least that resolves the issue</p>",
        "id": 198284473,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590034032
    },
    {
        "content": "<p>although I think probably <code>inv_succ_pos</code> is supposed to be in <code>tuto_lib</code>?</p>",
        "id": 198284484,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590034053
    },
    {
        "content": "<p>Yeah, most likely. Although I cheated and looked at the solutions and they don't use <code>inv_succ_pos</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> .</p>",
        "id": 198284536,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590034107
    },
    {
        "content": "<p>lol, I just wanted to use it in my solution and was surprised it wasn't available</p>",
        "id": 198284546,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590034139
    },
    {
        "content": "<p>but some of my solutions seem less efficient than the official ones</p>",
        "id": 198284558,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590034152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorials.200081/near/198284452\">said</a>:</p>\n<blockquote>\n<p>I didn't know this trick, by the way. Is it just for imports?</p>\n</blockquote>\n<p>No, it works for any name</p>",
        "id": 198284658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590034286
    },
    {
        "content": "<p>so identifiers of theorems and definitions too</p>",
        "id": 198284662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590034302
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"err\">«☃»</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"err\">«☃»</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198284900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590034574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorials.200081/near/198283344\">said</a>:</p>\n<blockquote>\n<p>I'm trying to follow the instructions in the README of the tutorial about making threads on zulip to ask about it, sorry if I've left out context</p>\n</blockquote>\n<p>You did this perfectly, but I think you're the first one to achieve this level of excellency in following the instructions, hence Yury was caught off-guard.</p>",
        "id": 198306889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590057492
    },
    {
        "content": "<p>About you're question now: this is all my fault, this line mentionning <code>inv_succ_pos</code> is a left-over from the previous life of this file as teaching material for my undergrads where I had a lot of renamed lemmas (most often for translations purposes). This is now <a href=\"https://github.com/leanprover-community/tutorials/commit/0644a78265959f576888824e11e78f89d210eaf7\">fixed</a>.</p>",
        "id": 198307038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590057608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , thanks for the reply. And thanks for making the tutorial in the first place, it's really great.</p>",
        "id": 198370281,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590091715
    },
    {
        "content": "<p>This tutorial is only a translated and lightly edited version of what I wrote for a course I taught to 1st year undergrads in Orsay (who had seen the math material in a traditional way in the preceding semester). The effort of turning it into a tutorial was not so big.</p>",
        "id": 198370662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590091870
    },
    {
        "content": "<p>Oh, I could add a file with the exam now that the exam is over. I still need to mark it <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 198371075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590092065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/tutorials.200081/near/198371075\">said</a>:</p>\n<blockquote>\n<p>Oh, I could add a file with the exam now that the exam is over. I still need to mark it <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>The exam is your first PR to mathlib!</p>",
        "id": 198381827,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590097852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> formalised my final exam from 2018 or 2019 somewhere, that was kind of cool to know that Lean could pass it</p>",
        "id": 198391963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590104483
    }
]