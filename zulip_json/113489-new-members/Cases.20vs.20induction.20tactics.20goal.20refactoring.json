[
    {
        "content": "<p>Hello, <br>\nI'm having some trouble figuring out how to complete this demonstration by induction. I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">small_step_star</span> <span class=\"o\">:</span> <span class=\"n\">com</span> <span class=\"bp\">×</span> <span class=\"n\">pstate</span> <span class=\"bp\">→</span> <span class=\"n\">com</span> <span class=\"bp\">×</span> <span class=\"n\">pstate</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">com</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">pstate</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">small_step_star</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">com</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">pstate</span><span class=\"o\">}:</span>\n  <span class=\"n\">small_step</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">small_step_star</span> <span class=\"o\">(</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">small_step_star</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`↝*`</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"n\">small_step_star</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">seq_star</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">com</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">pstate</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">↝*</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">;;</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">↝*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">;;</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"o\">‹(</span><span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">s₁</span><span class=\"o\">)</span><span class=\"bp\">↝*</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">)›,</span>\n      <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"n\">case</span> <span class=\"n\">step</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I cannot understand why in the <code> refl </code> case c₁ isn't replaced by c and s₂ by s₁, as stated by the definition of small_step_star.refl. I would like the goal to be <code>(c ;; c₂, s₁)↝*(c ;; c₂, s₁)</code> and not <code> (c₁ ;; c₂, s₁)↝*(c ;; c₂, s₂) </code>. If I use  <code> cases </code>  instead of  <code> induction </code>  it works well, but in the second case I need the inductive hypotesis to close the demonstration.</p>",
        "id": 277279896,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1648733167
    },
    {
        "content": "<p>You need <code>import tactic.induction</code> and then <code>intro h, induction' h</code> to get the goals you want. Next time please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 277281436,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648733854
    },
    {
        "content": "<p>Thank you! Sorry for the mwe, I wasn't aware of it, next time I'll be more carefull.</p>",
        "id": 277286167,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1648735404
    },
    {
        "content": "<p>Without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it's hard to tell, but you might just need the <code>generalizing</code> argument to <code>induction</code> (and not the primed version)</p>",
        "id": 277349440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648766411
    },
    {
        "content": "<p>On the other hand, <code>induction'</code> automatically determines what to generalize, which is much nicer than having to figure it out by hand :)</p>",
        "id": 277384993,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648802110
    },
    {
        "content": "<p>Thank you, the <code>induction' </code> version worked just as expected, correctly generalizing what I needed</p>",
        "id": 277387186,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1648803283
    }
]