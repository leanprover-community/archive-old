[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">my_ext</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"bp\">-&gt;</span> <span class=\"o\">((</span><span class=\"n\">funext</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Some questions:<br>\n1. How do I get the transport triangles to work? I get the same error if I reverse the arguments so I don't even know if I'm using it the right way round<br>\n2. How do I prove it?<br>\n3. Is it crazy to want to do this?</p>",
        "id": 131125621,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1533753654
    },
    {
        "content": "<p>The triangles are for <code>eq.subst</code> which can only make proofs, not data. You have to use <code>eq.rec</code> I think. You could also use heq <code>==</code></p>",
        "id": 131125836,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533753874
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">my_ext</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">funext</span>\n</pre></div>",
        "id": 131126052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533754098
    }
]