[
    {
        "content": "<p>This time with <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :-)<br>\nIn this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.is_free_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_free_group</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_free_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_free_group.lift</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the <code>apply</code> fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→*</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">is_free_group</span> <span class=\"n\">G</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, these look like they should unify to me, but probably something implicit  does not line up. But what? (The <code>universe u</code> is cargo-culted from <code>is_free_group.lean</code>, and may well be wrong).</p>",
        "id": 267795661,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642026421
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.is_free_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_free_group</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_free_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_free_group.lift</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  failed to synthesize type class instance for</span>\n<span class=\"cm\">  G : Type u,</span>\n<span class=\"cm\">  _inst_1 : group G,</span>\n<span class=\"cm\">  _inst_2 : is_free_group G</span>\n<span class=\"cm\">  ⊢ group (zmod 2)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 267795952,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642026593
    },
    {
        "content": "<p>Ah, maybe because of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>when I try to instantiate <code>lift</code> manually? Ah, I was too slow :-)</p>",
        "id": 267796017,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642026605
    },
    {
        "content": "<p><code>zmod 2</code> is an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_group\">docs#add_group</a> but not a group.</p>",
        "id": 267796488,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026767
    },
    {
        "content": "<p>Hmm, <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/specific_groups/cyclic.html\">https://leanprover-community.github.io/mathlib_docs/group_theory/specific_groups/cyclic.html</a> says “For the concrete cyclic group of order n, see data.zmod.basic.”, but that was misleading it seems.</p>",
        "id": 267796665,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642026807
    },
    {
        "content": "<p>You can use <code>multiplicative (zmod 2)</code> to make a multiplicative version of it</p>",
        "id": 267796692,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026820
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicative\">docs#multiplicative</a> applied to <code>zmod 2</code></p>",
        "id": 267796703,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1642026826
    },
    {
        "content": "<p>Lean's handling of groups with add and mul is a bit funny</p>",
        "id": 267796722,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026838
    },
    {
        "content": "<p>We have two \"distinct\" classes</p>",
        "id": 267796773,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026853
    },
    {
        "content": "<p>And so every group is either written with a + or a *</p>",
        "id": 267796795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026872
    },
    {
        "content": "<p>And <code>zmod 2</code> is a ring, so the <code>*</code> refers to the multiplication 0x0 = 0, 1x 1 = 1, which is a monoid (or even a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_with_zero\">docs#group_with_zero</a>) but no inverses</p>",
        "id": 267796897,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642026925
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.is_free_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_free_group</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">g</span><span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">multiplicative</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_free_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_free_group.lift</span>\n</code></pre></div>",
        "id": 267796941,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642026952
    },
    {
        "content": "<p>Not to bikeshed whether <code>fin 2</code> or <code>zmod 2</code> is more appropriate here, just to show that it works</p>",
        "id": 267797033,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642026994
    },
    {
        "content": "<p>Anything I should know about <code>fin</code> vs. <code>zmod</code>? :-)</p>",
        "id": 267797532,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642027333
    },
    {
        "content": "<p><code>zmod</code> is more algebraic (it has the ring structure for instance).<br>\n<code>fin</code> is more counting-y, we have maps from <code>fin n \\to fin (n + 1)</code> which don't really make sense if you think of it as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf Z/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span></span></span></span></p>",
        "id": 267797650,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642027425
    },
    {
        "content": "<p>We probably have more proofs about moving between <code>fin n</code> and <code>fin (n + 1)</code>, cons, succ, snoc, cast_succ, things of that nature, usually used to represent a finite type of explicit cardinality. It just happens to also have the same exact <code>comm_ring</code> structure as <code>zmod</code></p>",
        "id": 267797668,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642027434
    },
    {
        "content": "<p>Since I really only need <code>fin 2 ≃ bool</code> (or <code>#fin 2  = 2</code>), that should do</p>",
        "id": 267799034,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642028368
    }
]