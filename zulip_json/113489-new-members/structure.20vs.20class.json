[
    {
        "content": "<p>Hello everyone,</p>\n<p>I am relatively new to lean and therefore tried to find a hopefully rather simple topic. Therefore I am now trying to define the annihilator of a linear operator and show that it is an ideal. <br>\nMy definition is the following: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">annihilator&#39;</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">):=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I am aware that there are generalizations to this definition, but I thought I could work on generalizations once the basic functionality works. <br>\nSo I was wondering if </p>\n<ol>\n<li>the definition works so far and</li>\n<li>what is the syntax for showing that this set is an ideal? The instance command seems not suitable because an ideal in a ring $R$ is implemented as an $R$-submodule in $R$ which is defined as a structure rather than a class. </li>\n</ol>\n<p>Thanks in advance</p>",
        "id": 207614127,
        "sender_full_name": "Jonas Wildberger",
        "timestamp": 1598001658
    },
    {
        "content": "<p><code>eval map algebra_map</code> is basically <code>aeval</code> right</p>",
        "id": 207614260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598001788
    },
    {
        "content": "<p>also this is not a set: a set uses <code>|</code> instead of <code>//</code></p>",
        "id": 207614272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598001809
    },
    {
        "content": "<p>also we can't say \"this set is an ideal\", but rather \"here's an ideal whose underlying set is this set\"</p>",
        "id": 207614291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598001832
    },
    {
        "content": "<p>so it would start with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">annihilator</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">annihilator&#39;</span> <span class=\"n\">n</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207614358,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598001885
    },
    {
        "content": "<p>oh and as <code>aeval</code> is an algebra hom, you can coerce it to a ring hom, and then just take the kernel, and you will have your ideal</p>",
        "id": 207614404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598001954
    },
    {
        "content": "<p>if <code>[expr]</code> is an algebra hom, you can coerce it to a ring hom by typing <code>([expr] : [source] \\to+* [target])</code></p>",
        "id": 207614457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598001983
    },
    {
        "content": "<p>we call this a type ascription, i.e. announcing that <code>[expr]</code> has type <code>[expr2]</code> by writing <code>([expr] : [expr2])</code></p>",
        "id": 207614475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002003
    },
    {
        "content": "<p>the kernel is <code>ring_hom.kernel</code></p>",
        "id": 207614488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002016
    },
    {
        "content": "<p>Alright, I thought <code>//</code> and <code>|</code> were used interchangably, so thanks for resolving that confusion. <br>\nI thought about the kernel definition, but didn't know if that was hom was already in lean. So the definition should look something like this?: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">annihilator&#39;</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">aeval</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">M</span>  <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">kernel</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207616632,
        "sender_full_name": "Jonas Wildberger",
        "timestamp": 1598003677
    },
    {
        "content": "<p>exactly</p>",
        "id": 207617884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598004232
    },
    {
        "content": "<p>I'm afraid general theory has removed your chance to prove that it's an ideal :-)</p>",
        "id": 207633727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598016521
    },
    {
        "content": "<p>Haha alright. So following Kenny's advice, lean still wants proof that <code>matrix n n K</code> ist a K-Algebra. Is there already code for this? apply_instance doesn't work :(</p>",
        "id": 207638174,
        "sender_full_name": "Jonas Wildberger",
        "timestamp": 1598018973
    },
    {
        "content": "<p>In <code>ring_theory/algebra.lean</code> there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix_algebra\">docs#matrix_algebra</a></p>",
        "id": 207638326,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598019045
    },
    {
        "content": "<p>Sorry, but I still don't quite know how to incorporate <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix_algebra\">docs#matrix_algebra</a> to make it work. I think I misunderstand what <code>matrix_algebra n K</code> outputs, as I get the error </p>\n<p>type expected at<br>\n  matrix_algebra n K<br>\nterm has type<br>\n  algebra K (matrix n n K)</p>\n<p>though I thought <code>algebra K (matrix n n K)</code> is what I wanted.<br>\nThe rest of the code looks like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"n\">def</span> <span class=\"n\">annihilator&#39;</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">matrix_algebra</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">matrix_algebra</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">matrix_algebra</span> <span class=\"n\">M</span>  <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">matrix_algebra</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n</code></pre></div>\n\n\n<p>I also don't quite know how to make sure lean gets the correct structure of the matrix ring, as for the type ascryption I assume that I should not use <code>matrix_algebra</code> because I only want the ring structure...</p>",
        "id": 207654058,
        "sender_full_name": "Jonas Wildberger",
        "timestamp": 1598026904
    },
    {
        "content": "<p>I'm also a bit confused how to do what you want I would like to write the line as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">annihilator&#39;</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n</code></pre></div>",
        "id": 207657573,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598028914
    },
    {
        "content": "<p>But this fails as the matrix ring is not commutative and <code>aeval</code> is only set up for commutative semirings.</p>",
        "id": 207657623,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1598028952
    },
    {
        "content": "<p>oh, that's my bad then</p>",
        "id": 207660821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598030802
    },
    {
        "content": "<p>Just sorry a proof that <code>matrix_ring</code> is commutative ;P</p>",
        "id": 207668977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598035128
    },
    {
        "content": "<p>Non commutative rings don't exist anyway.</p>",
        "id": 207669083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598035184
    },
    {
        "content": "<p>More seriously though, is there no proof that, given <code>algebra R A</code>, (so <code>R</code> is commutative), and a singleton <code>S = {x}</code>, that <code>adjoin S</code> is commutative?</p>",
        "id": 207670620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598036026
    },
    {
        "content": "<p>How do I decide if my definition should be a class or a structure? What influences this decision? Here is the concrete example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hopf_algebra</span> <span class=\"o\">:=</span> <span class=\"c1\">-- should this be a class?</span>\n<span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">counit</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">comul</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">comul</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">counit_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.lid</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">counit</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">counit_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.rid</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">counit</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">coinv</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coinv_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lmul'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">coinv</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">counit</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coinv_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lmul'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">coinv</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">comul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.of_id</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">counit</span><span class=\"o\">)</span>\n<span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 282163086,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652385711
    },
    {
        "content": "<p>A good question to ask is \"do I care primarily about talking about two different hopf algebra structures on the same type, or about talking about the canonical hopf algebra on a type\"</p>",
        "id": 282171557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652389535
    },
    {
        "content": "<p>The answers are respectively <code>structure</code> and <code>class</code></p>",
        "id": 282171585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652389553
    },
    {
        "content": "<p>I would say that yours should be a class</p>",
        "id": 282172675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652390158
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 282177968,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652393341
    }
]