[
    {
        "content": "<p>I'm trying to apply the lemma <code>eq_zero_of_mul_eq_self_left</code> (copied here for convenience),</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_mul_eq_self_left_local</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_mul_eq_self_left_local</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>However, once I <code>apply</code> the lemma it wants me to show <code>?m1 ‚â† 1</code> vs <code>2 ‚â† 1</code>. And even if I introduce <code>2 ‚â† 1</code> into the context using a <code>have</code>, it still won't unify. I think, I probably need to show it that <code>2 : ‚Ñ§</code>, but not sure how. (or perhaps I'm doing something really stupid)</p>",
        "id": 197062945,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589126198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_zero_of_mul_eq_self_left_local</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_mul_eq_self_left_local</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197063063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589126374
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_mul_eq_self_left_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but now you have an <code>h</code> clogging up your local context</p>",
        "id": 197063140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589126464
    },
    {
        "content": "<p>fantastic, this moved my prove forward! either option would be fine in my case as this concludes the subproof. </p>\n<p>I'm trying to formalise the math olympiad problem and lean is somehow really neat for exploring properties.</p>",
        "id": 197063221,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589126586
    },
    {
        "content": "<p>Other people have formalised various Olympiad problems, e.g. <a href=\"https://github.com/jsm28/bmo2-2020-lean\" title=\"https://github.com/jsm28/bmo2-2020-lean\">https://github.com/jsm28/bmo2-2020-lean</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/master/archive/imo1988_q6.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/archive/imo1988_q6.lean\">https://github.com/leanprover-community/mathlib/blob/master/archive/imo1988_q6.lean</a></p>",
        "id": 197063688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589127234
    },
    {
        "content": "<p>Since this has come up, I can‚Äôt help shamelessly promoting my own effort (in Coq üò±) <a href=\"http://olivernash.org/2019/07/06/coq-imo/index.html\" title=\"http://olivernash.org/2019/07/06/coq-imo/index.html\">http://olivernash.org/2019/07/06/coq-imo/index.html</a></p>",
        "id": 197080701,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1589147041
    }
]