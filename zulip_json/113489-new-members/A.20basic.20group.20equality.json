[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.hom.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">group</span>\n</code></pre></div>\n<p>Why doesn't this work? (It doesn't work for powers of 1 or 2 either.)</p>",
        "id": 291726898,
        "sender_full_name": "Way Yan",
        "timestamp": 1659454820
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.group\">docs#tactic.interactive.group</a> can't handle powers...</p>",
        "id": 291730542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659456247
    },
    {
        "content": "<p>Does the example in the docs that uses ^ work?</p>",
        "id": 291730757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659456330
    },
    {
        "content": "<p><code>group</code> is implemented using <code>simp</code>, and it doesn't look like it has any lemmas for <code>(a * b) ^ n</code></p>",
        "id": 291731342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659456595
    },
    {
        "content": "<p>It's weird - this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">group</span>\n</code></pre></div>",
        "id": 291733696,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659457676
    },
    {
        "content": "<p>That's fine, it's not using powers of the form <code>(a * b) ^ n</code>. It only can handle <code>(a * b) ^ -1</code>, as far as I understand.</p>",
        "id": 291734893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659458188
    },
    {
        "content": "<p>Yeah <code>⁻¹</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_inv.inv\">docs#has_inv.inv</a> is not a power.</p>",
        "id": 291742986,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659462158
    },
    {
        "content": "<p>Would it be a good idea to add some simp lemmas for <code>(a * b) ^ n</code> then?</p>",
        "id": 291788310,
        "sender_full_name": "Way Yan",
        "timestamp": 1659487980
    },
    {
        "content": "<p>Well for n = 2 we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sq\">docs#sq</a>, but it's not clear if either side is simpler than the other, so it's appropriately not marked a simp lemma. For higher n, the product expansion is more complicated, but if you want to expand (for an explicit n) you can always do something like <code>simp only [pow_succ]</code>.</p>",
        "id": 291800617,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659502605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> The key is that it's for <code>(a * b) ^ n</code>, not just <code>a ^ n</code>, since <code>group</code> seems to be meant to expand and collect powers.</p>",
        "id": 291802241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659504328
    },
    {
        "content": "<p>A different approach would be to expand an expression in a group into a list and simplify from there.  This would likely be more stable than calling several simp lemmas, giving more control over what to do.</p>",
        "id": 291802334,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659504443
    },
    {
        "content": "<p>Yeah maybe just normalizing the expressions to reduced words? I think there's even a function in mathlib for that (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_group.reduce\">docs#free_group.reduce</a>), so the algorithm is there.</p>",
        "id": 291802545,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659504638
    },
    {
        "content": "<p>That's \"just\" what the simp set for <code>group</code> is trying to do. If it just had some <code>mul_pow_succ</code> lemma it'd work.</p>\n<p>So long as simp sets are confluent there's no need to worry about stability.</p>",
        "id": 291802587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659504715
    },
    {
        "content": "<p>Isn't <a href=\"https://github.com/leanprover-community/mathlib/blob/777082da584ee55c55d6f2da1ec428004d9e0999/src/tactic/group.lean#L73\">line 73</a> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.group\">docs#tactic.group</a> trying that?  Maybe the issue is with parenthesizing.</p>",
        "id": 291802914,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659505052
    },
    {
        "content": "<p>That's zpow not pow</p>",
        "id": 291806716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659508879
    },
    {
        "content": "<p>Yes, but I think that a simp call earlier converts nat_pow to int_pow.</p>",
        "id": 291806791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659508926
    },
    {
        "content": "<p>Line 71: <code>  symm_expr ``(zpow_coe_nat),</code></p>",
        "id": 291806855,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659508985
    },
    {
        "content": "<p>I think that the heuristic is to convert the exponents to integers, and then simplify the integers via ring.</p>",
        "id": 291806862,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509009
    },
    {
        "content": "<p><code>try (aux_group₁ locat)</code> looks suspicious to me</p>",
        "id": 291806879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659509042
    },
    {
        "content": "<p>What if that tactic now fails every time due to a lemma rename?</p>",
        "id": 291806926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659509057
    },
    {
        "content": "<p>I also see that the tactic is used very rarely: would it be used more if it were implemented to work in more cases?</p>",
        "id": 291806962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509082
    },
    {
        "content": "<p>There are some tests: maybe we can make sure that there is a test for each lemma that is used.</p>",
        "id": 291807000,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509121
    },
    {
        "content": "<p>I'm suggesting we just drop the try</p>",
        "id": 291807012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659509145
    },
    {
        "content": "<p>Perhaps replacing it with <code>{fail_if_unchanged := ff}</code> or whatever the spelling is</p>",
        "id": 291807108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659509202
    },
    {
        "content": "<p>I see: I still have to get used to error reporting.</p>",
        "id": 291807123,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509233
    },
    {
        "content": "<p>Without the <code>try</code> this test fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">group</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291807130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509243
    },
    {
        "content": "<p>Let me see if I understand what is going on.</p>",
        "id": 291807153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509273
    },
    {
        "content": "<p>So, the try seems to be there since you want to preprocess the expression to get rid of fluff.  But it does not want to fail if there is not fluff to be cleared.</p>",
        "id": 291807254,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509342
    },
    {
        "content": "<p>This also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">group</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291807352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/A.20basic.20group.20equality/near/291802914\">said</a>:</p>\n<blockquote>\n<p>Isn't <a href=\"https://github.com/leanprover-community/mathlib/blob/777082da584ee55c55d6f2da1ec428004d9e0999/src/tactic/group.lean#L73\">line 73</a> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.group\">docs#tactic.group</a> trying that?  Maybe the issue is with parenthesizing.</p>\n</blockquote>\n<p>By the way, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zpow_mul\">docs#zpow_mul</a> is for <code>a ^ (b * c)</code> rather than <code>(a * b) ^ c</code></p>",
        "id": 291807462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659509557
    },
    {
        "content": "<p>Kyle, so maybe I wanted to give this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">symm_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">zpow_add</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>?</p>",
        "id": 291807535,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659509641
    },
    {
        "content": "<p>That one's for <code>a ^ m * a ^ n -&gt; a ^ (m + n)</code>, to coalesce exponents. The problem in the original example is that it's not expanding <code>(a * b) ^ 3</code> to <code>a * b * a * b * a * b</code></p>",
        "id": 291808026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659510055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_pow_bit0</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">pow_bit0</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_pow_bit1</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pow_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291808582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659510452
    },
    {
        "content": "<p>There's a problem with these, though, in that they can't be in the same simp set as the other lemmas since there's a tension between them. Maybe <code>group</code> should have two simp passes -- an expansion phase to turn everything into a product of powers of non-products, then a coalescing phase to implement word reduction?</p>",
        "id": 291808711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659510542
    },
    {
        "content": "<p>(I made the change I was thinking of in <a href=\"https://github.com/leanprover-community/mathlib/pull/15835\">#15835</a>, but indeed it's not really relevant to the problem)</p>",
        "id": 291819221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659517080
    },
    {
        "content": "<p>Eric, since the lemmas are generated via <code>tactic.simp_arg_type.expr</code>, I think that a name change would produce an error at the tactic level, right?</p>",
        "id": 291819612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659517297
    },
    {
        "content": "<p>You're right; the <code> ``(...) </code> syntax would have already caught that error if it existed</p>",
        "id": 291819773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659517369
    },
    {
        "content": "<p>If one of the lemmas became an invalid simp lemma then there'd be a problem I think</p>",
        "id": 291819786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659517381
    },
    {
        "content": "<p>How about a revamping of the tactic as follows: replace the product by a list, with repetitions for exponents.  After that, scan the list looking for 1s and consecutive cancelations, iteratively.  Finally, produce a proof that the resulting expression matches the original one.</p>",
        "id": 291819796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659517386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/A.20basic.20group.20equality/near/291819786\">said</a>:</p>\n<blockquote>\n<p>If one of the lemmas became an invalid simp lemma then there'd be a problem I think</p>\n</blockquote>\n<p>Yes, I think so: if I erase  a letter in <code> ``(&lt;here&gt;) </code>, I get an immediate error.  I think that it looks in the environment for the appropriate name.</p>",
        "id": 291819917,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659517447
    },
    {
        "content": "<p>Like I said, my comments above (and <a href=\"https://github.com/leanprover-community/mathlib/pull/15835\">#15835</a>) were irrelevant to the topic of this thread</p>",
        "id": 291820057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659517536
    }
]