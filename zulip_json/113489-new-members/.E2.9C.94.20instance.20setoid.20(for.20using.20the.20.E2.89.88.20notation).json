[
    {
        "content": "<p>I'd like to reason about the equivalence relation induced by right cosets of a group. Following the <code>formalising mathematics</code> tutorial project (week 7, part A), I wrote the following :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n\n<span class=\"kd\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- use the equivalence relation of right classes</span>\n<span class=\"kd\">instance</span> <span class=\"n\">setoid'</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_group.right_rel</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≈</span> <span class=\"n\">g</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, the statement <code>g ≈ g</code>is not accepted by Lean (error message: <code>failed to synthesize type class instance for has_equiv G</code>).  How can I tell Lean that by <code>≈</code>, I want to refer to the right relation?</p>",
        "id": 279691380,
        "sender_full_name": "Matthias U",
        "timestamp": 1650553061
    },
    {
        "content": "<p>You can't, because you have a different relation for each <code>H : subgroup G</code>. Instead, you should explicit the relation and use the primed lemmas. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.mk'\">docs#quotient.mk'</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.induction_on'\">docs#quotient.induction_on'</a>...</p>",
        "id": 279691676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650553181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409809\">Matthias U</span> has marked this topic as resolved.</p>",
        "id": 279692383,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650553444
    },
    {
        "content": "<p>Yeah <span class=\"user-mention\" data-user-id=\"409809\">@Matthias U</span> this is a pain and I didn't really explain in the course how to get around it. In Lean 4 I believe <code>setoid</code> is not a class so this problem will go away over time.</p>",
        "id": 279693805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650554042
    },
    {
        "content": "<p>I'm afraid to inform you that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid#doc\">docs4#Setoid</a> is still a class :p</p>",
        "id": 279695585,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650554843
    },
    {
        "content": "<p>I wonder if everything would be easier with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotient</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quot</span> <span class=\"n\">α</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 279856002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650649149
    },
    {
        "content": "<p>Which not only eliminates the typeclass, but also the pesky <code>setoid.r</code></p>",
        "id": 279856039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650649175
    },
    {
        "content": "<p>... and the obscurely named <code>iseqv</code>field</p>",
        "id": 279856391,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650649327
    },
    {
        "content": "<p>It would also be great if <code>equivalence</code> was redefined as a <code>structure</code>.</p>",
        "id": 279856509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650649395
    }
]