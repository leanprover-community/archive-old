[
    {
        "content": "<p>Would someone be able to point me to a good text explaining how this is done? I've seen the proof in Coq using pattern matching, but I haven't been able to follow it.</p>",
        "id": 233979278,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618081780
    },
    {
        "content": "<p>Do you mean <code>eq.rec</code>? This isn't proved in Lean, this is generated as an axiom when <code>eq</code> is defined as an inductive type.</p>",
        "id": 233988925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618089224
    },
    {
        "content": "<p>As an axiom? I thought it was a proof that was automatically generated?</p>",
        "id": 233992300,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618091639
    },
    {
        "content": "<p>In Coq, pattern matching on inductive types is primitive. In Lean, <code>T.rec</code> is primitive</p>",
        "id": 233992516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618091877
    },
    {
        "content": "<p>There are reasons to prefer the latter, because it turns out that equation compilation (transforming a match statement into recursor applications) is <em>complicated</em>, and there have been soundness bugs in Coq before due to the termination checker</p>",
        "id": 233992621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618091996
    },
    {
        "content": "<p>Oh. So does pattern matching follow from T.rec somehow?</p>",
        "id": 233992741,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618092058
    },
    {
        "content": "<p>Yes, if you pattern match on <code>rfl</code> that gets translated into an appropriate application of <code>eq.rec</code></p>",
        "id": 233992760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618092091
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\">-- is equivalent to</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233992843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618092182
    },
    {
        "content": "<p>I see. Would you happen to know of a good explanation for how it works for equality in Coq?</p>",
        "id": 233993104,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618092414
    },
    {
        "content": "<p>I'm currently working on learning Coq, since I was able to audit a course on it, and it seems very close to Lean, so hoping the knowledge should be transferable.</p>",
        "id": 233993342,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618092632
    },
    {
        "content": "<p>While some basics are very similar, there are quite a few important differences. Here are some of them (not sure that I'm listing the most important ones):</p>\n<ul>\n<li>lean can have tactic inside expr inside tactic;</li>\n<li>lean and coq treat universes differently (cumulative universes in coq, non-cumulative in lean; more universe polymorphism in the lean stdlib);</li>\n<li>very different libraries and tactics; e.g., lean mathlib is much more classical than mathcomp;</li>\n</ul>",
        "id": 233994073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618093343
    },
    {
        "content": "<p>Actually, I'm not certain I follow how the equivalence between foo and foo' works.</p>",
        "id": 233995231,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618094643
    },
    {
        "content": "<p>nat.rec is the eliminator? What is nat.rec_on?</p>",
        "id": 233995299,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618094720
    },
    {
        "content": "<p><code>nat.rec_on</code> is the same as <code>nat.rec</code> but the nat argument comes first instead of last</p>",
        "id": 233995499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618094888
    },
    {
        "content": "<p>Here's an implementation of <code>eq.rec</code> using pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"n\">eq.rec'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The proof in Coq would be similar to this, although in lean it's circular because the equation compiler will compile the match into a proof using <code>eq.rec</code></p>",
        "id": 233995658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618095090
    },
    {
        "content": "<p>when you write the <code>def foo ...</code> it translates to a call on the <code>nat.rec</code> recursor. In this particular example it is simple. But if you make the pattern any more complicated, it doesn't translate nearly as straight-forwardly anymore. E.g. if you define <code>fib</code>, the translation is a good deal more complicated.</p>",
        "id": 233995761,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618095223
    },
    {
        "content": "<p>just define it and look at the generated code using <code>#print fib</code></p>",
        "id": 233995803,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618095244
    },
    {
        "content": "<p>the point is, that <code>nat.rec</code> always eliminates the <code>nat.zero</code> and <code>nat.succ</code> constructors.</p>",
        "id": 233995832,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618095281
    },
    {
        "content": "<p>whereas pattern matching can do all kinds of things, even structural recursion like in the case of <code>fib</code>.</p>",
        "id": 233995850,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618095305
    },
    {
        "content": "<p>In <code>foo'</code>, what is the implicit<code>C</code> set to in the call to <code>nat.rec_on</code>?</p>",
        "id": 233996397,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618095806
    },
    {
        "content": "<p><code>(\\lam _: nat, nat)</code></p>",
        "id": 233996573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618095968
    },
    {
        "content": "<p>This is a nondependent function, so the type doesn't depend on the input value. In <code>eq.rec'</code> the motive is dependent, because we are producing a value of <code>C b</code> but we provide <code>h : C a</code></p>",
        "id": 233996642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618096054
    },
    {
        "content": "<p>So <code>foo'</code> expands to<code>λ n, nat.rec 0 (λ n ih, ih + 2) n</code><br>\nI'm not sure how to expand <code>nat.rec</code> though if it is an axiom without a function. Trying to follow an example of how applying a number to foo' results in the same value as applying it to <code>foo</code>.</p>",
        "id": 233997481,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618096851
    },
    {
        "content": "<p>you can build an intuition of roughly like this: <code>C</code> is the motive what you are trying to prove. And <code>nat.rec</code> is an induction principle. <code>nat -&gt; nat</code> can be read like \"for all x of nat, provide a proof, i.e. a witness, of nat\".</p>\n<p>And you use the induction principle by saying how to construct the witness for <code>0</code>, by using <code>0</code>. And to provide the witness for <code>n+1</code>, you choose <code>foo n + 2</code>. Where <code>foo n</code> is your <code>ih</code>.</p>",
        "id": 233997884,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618097271
    },
    {
        "content": "<p>and <code>nat.rec</code> gives you the function that \"for all x of nat, build the witness\".</p>",
        "id": 233997953,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618097319
    },
    {
        "content": "<p>According to your two cases.</p>",
        "id": 233997960,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618097326
    },
    {
        "content": "<p>That's why it is related to pattern matching.</p>",
        "id": 233997972,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618097338
    },
    {
        "content": "<p>But it's a version of pattern matching, where you are only allowed the constructors of your inductive type.</p>",
        "id": 233997986,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618097360
    },
    {
        "content": "<p>Perhaps it helps to see the \"computational rules\" for <code>nat.rec</code> to understand how it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat.rec</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"n\">nat.rec</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat.rec</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>These are definitional equalities. We say that <code>nat.rec z s n</code> is \"defined by recursion\" with <code>z</code> being the value at 0 and <code>s</code> saying how the value at <code>n+1</code> depends on the value at <code>n</code>.</p>",
        "id": 233998101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618097454
    },
    {
        "content": "<p>Yes, I think that helps. Thank you.</p>",
        "id": 233998756,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1618098217
    }
]