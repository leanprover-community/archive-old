[
    {
        "content": "<p>I've just managed to formalise my first non-trivial result: between every two distinct real numbers there is a rational. It might already exist in mathlib, though I couldn't find it.<br>\nA few questions and a help request:</p>\n<ul>\n<li>I wanted to rearrange a &lt; b - c to get my target c &lt; b - a, where a, b, c are reals. There is a lemma which does exactly this: <code>lt_tsub_comm</code>, but to use it, I had to show that R is an instance of <code>add_comm_monoid</code> (why was that not automatic, given that I had imported <code>data.real.basic</code>?) and <code>has_ordered_sub</code>. The latter requires doing almost as much work as I had already done, so I'm not sure why there is no instantiation of a structure such as the reals as a <code>has_ordered_sub</code>. I know <code>tsub</code> stands for \"truncated subtraction\", but the same results hold for non-truncated subtraction. So in the end, I gave up and didn't use this lemma, proving the result manually (which was somewhat painful).</li>\n<li>I had to write a number of small lemmas along the way, for example:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_pred_lt_of_pos</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.pred</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and a parallel one for <code>n - 1 &lt; n</code> (sorry <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I ended up using natural number subtraction in my argument).  I'm sure these might help other people using mathlib, so perhaps I could contribute them?</p>\n<ul>\n<li>The help request: I am convinced that my Lean program is \"non-idiomatic\" and has various steps I could have simplified using appropriate tactics, for example. I have also used <code>have</code> quite heavily, and perhaps those could have been replaced by other constructions. I'm unconvinced about my lemma naming.  If anyone has time to look at my code, please feel free: <a href=\"https://github.com/juliangilbey/lean-rational-between-reals.git\">https://github.com/juliangilbey/lean-rational-between-reals.git</a>  Any comments and advice will be gratefully received!</li>\n<li>Finally, once my code is improved, would this be a good thing to submit to mathlib?<br>\nMany thanks to all for your help!</li>\n</ul>",
        "id": 260645679,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636371541
    },
    {
        "content": "<p>I think it exists in mathlib in the generality of archimidean fields (which might be why its hard to find) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_rat_btwn\">docs#exists_rat_btwn</a></p>",
        "id": 260645834,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636371623
    },
    {
        "content": "<p>Did you try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> for your real subtraction goal?</p>",
        "id": 260645921,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636371693
    },
    {
        "content": "<p>That does sound really strange that lean couldn't find <code>add_comm_monoid</code> on the reals though, do you have a minimised example of that failing? Some of the tsub type things have changed quite a bit recently so prehaps something is not imported where we expect</p>",
        "id": 260646208,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636371870
    },
    {
        "content": "<p>Contributing small lemmas sounds great! And very useful, take a look at <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> if you haven't already.</p>",
        "id": 260646299,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636371952
    },
    {
        "content": "<p>I really hope you aren't discouraged by some of what you did being in mathlib already, in fact the same thing happened to me with one of the first big projects I tried to prove in Lean, but I still learnt a lot along the way, and there is always interesting value in comparing different proof methods and seeing what works best <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 260646458,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636372060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260645834\">said</a>:</p>\n<blockquote>\n<p>I think it exists in mathlib in the generality of archimidean fields (which might be why its hard to find) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_rat_btwn\">docs#exists_rat_btwn</a></p>\n</blockquote>\n<p>Argh!!! <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 260646634,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636372180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260645921\">said</a>:</p>\n<blockquote>\n<p>Did you try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> for your real subtraction goal?</p>\n</blockquote>\n<p>Ah, a new tactic! Worked perfectly, thanks.</p>",
        "id": 260646652,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636372198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260646208\">said</a>:</p>\n<blockquote>\n<p>That does sound really strange that lean couldn't find <code>add_comm_monoid</code> on the reals though, do you have a minimised example of that failing? Some of the tsub type things have changed quite a bit recently so prehaps something is not imported where we expect</p>\n</blockquote>\n<p>Here is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.sub</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_tsub_comm.1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- still two open goals:</span>\n  <span class=\"c1\">-- ⊢ add_comm_monoid ℝ</span>\n  <span class=\"c1\">-- ⊢ has_ordered_sub ℝ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260647280,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636372636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260646299\">said</a>:</p>\n<blockquote>\n<p>Contributing small lemmas sounds great! And very useful, take a look at <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> if you haven't already.</p>\n</blockquote>\n<p>Ah, thanks! Please may I have write access to non-master branches of the mathlib repository then?</p>",
        "id": 260647434,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636372730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260646458\">said</a>:</p>\n<blockquote>\n<p>I really hope you aren't discouraged by some of what you did being in mathlib already, in fact the same thing happened to me with one of the first big projects I tried to prove in Lean, but I still learnt a lot along the way, and there is always interesting value in comparing different proof methods and seeing what works best :)</p>\n</blockquote>\n<p>Oh, indeed not. I was rather surprised that it wasn't there already, so was somewhat reassured to find it was. It does indicate one of the bigger issues with formalising mathematics: how do you find the lemma/theorem you want?</p>",
        "id": 260647550,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636372807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260647434\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260646299\">said</a>:</p>\n<blockquote>\n<p>Contributing small lemmas sounds great! And very useful, take a look at <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> if you haven't already.</p>\n</blockquote>\n<p>Ah, thanks! Please may I have write access to non-master branches of the mathlib repository then?</p>\n</blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 260649134,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636373939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260647550\">said</a>:</p>\n<blockquote>\n<p>how do you find the lemma/theorem you want?</p>\n</blockquote>\n<p><a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> and <code>library_search</code> and learning the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions.</p>",
        "id": 260649150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636373955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span> What is your github username?</p>",
        "id": 260649192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636373999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_ordered_sub</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>field is <code>∀ (a b c : ℝ), a - b ≤ c ↔ a ≤ c + b</code></p>",
        "id": 260649676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636374316
    },
    {
        "content": "<p>Julian -- we just did a big refactor of inequalities on algebraic objects and it looks like this one got missed.</p>",
        "id": 260649699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636374343
    },
    {
        "content": "<p>With what imports? I'm surprised that none of the instance for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ordered_sub\">docs#has_ordered_sub</a> match</p>",
        "id": 260649790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636374388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.sub</span>\n</code></pre></div>",
        "id": 260649808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636374406
    },
    {
        "content": "<p>Wow, we appear to be missing <code>add_group.has_ordered_sub</code></p>",
        "id": 260649842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636374442
    },
    {
        "content": "<p>Which one should match? has_ordered_sub was primarily about nat subtraction</p>",
        "id": 260649857,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636374453
    },
    {
        "content": "<p>But I guess the \"This is satisfied both by the subtraction in additive ordered groups\" part implies that that should work as well</p>",
        "id": 260649903,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636374480
    },
    {
        "content": "<p><code>add_group.has_ordered_sub</code> should match, but first it needs to exist</p>",
        "id": 260649960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636374489
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.sub</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">lt_sub</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260650025,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636374536
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.sub</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_ordered_sub</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sub_le_iff_le_add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_tsub_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Julian -- don't apply foo.1 if foo : A &lt;-&gt; B, just rewrite it.</p>",
        "id": 260650074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636374581
    },
    {
        "content": "<p><code>lt_tsub_comm</code> was the wrong way to proceed - 'tsub'  refers to \"truncated subtraction\"</p>",
        "id": 260650086,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636374589
    },
    {
        "content": "<p>But perhaps we should make it work, yes</p>",
        "id": 260650150,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636374609
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is the right way to proceed :-)</p>",
        "id": 260650182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636374627
    },
    {
        "content": "<p>library_search finds it even without the intro</p>",
        "id": 260650356,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1636374735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260646652\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260645921\">said</a>:</p>\n<blockquote>\n<p>Did you try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> for your real subtraction goal?</p>\n</blockquote>\n<p>Ah, a new tactic! Worked perfectly, thanks.</p>\n</blockquote>\n<p>This shouldn't be a new tactic, it's a fundamental one if you're interested in math formalization in Lean. I strongly suggest you do the <a href=\"https://github.com/leanprover-community/tutorials/\">tutorials project</a> before trying to contribute. That should save you a lot of frustration.</p>",
        "id": 260650401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636374780
    },
    {
        "content": "<p>Returning to your original question, the correct answer is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260650823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636375046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260649842\">said</a>:</p>\n<blockquote>\n<p>Wow, we appear to be missing <code>add_group.has_ordered_sub</code></p>\n</blockquote>\n<p>Yup, I thought we had that <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 260656404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636378209
    },
    {
        "content": "<p>I guess I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_add_comm_group\">docs#ordered_add_comm_group</a></p>",
        "id": 260656464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636378248
    },
    {
        "content": "<p>Well, it's <code>ordered_add_comm_group.to_has_ordered_sub</code> that we're missing.</p>",
        "id": 260656470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636378252
    },
    {
        "content": "<p>Eheh, yeah</p>",
        "id": 260656478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636378256
    },
    {
        "content": "<p>Whoever posts the correct name of the missing instance is responsible for making the PR, right?</p>",
        "id": 260656554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636378312
    },
    {
        "content": "<p>for me the hard part is knowing where to put the instance</p>",
        "id": 260656622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636378335
    },
    {
        "content": "<p>Sure I can do that!</p>",
        "id": 260656749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636378416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Rational.20between.20two.20reals/near/260649192\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span> What is your github username?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> juliangilbey  Thanks!</p>",
        "id": 260661484,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636380817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span>  <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 260661863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636380975
    },
    {
        "content": "<p>Ah, thanks - I'd forgotten that rw works with &lt;-&gt; as well as with =.</p>",
        "id": 260662158,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636381083
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10225\">#10225</a> for the missing instance.</p>",
        "id": 260676180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636386943
    }
]