[
    {
        "content": "<p>As an exercise, I'm working on an red-black-tree. And I'm trying to show, that the re-balancing doesn't change the interpretation as a set. </p>\n<div class=\"codehilite\"><pre><span></span>universes u\nvariables α : Type u\n\ninductive color\n| red\n| black\n\ninductive node (α)\n| leaf {} : node\n| tree {} (color : color) (left : node) (val : α) (right : node) : node\n\ndef to_set {α} : node α → set α\n| node.leaf := ∅\n| (node.tree _ l y r) := to_set l ∪ {y} ∪ to_set r\n\ninstance node_to_set_coe : has_coe (node α) (set α) := ⟨to_set⟩\n\ndef balance {α} : color → node α → α → node α → node α\n| color.black (node.tree color.red (node.tree color.red a x b) y c) z d :=\n    node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n| color.black (node.tree color.red a x (node.tree color.red b y c)) z d :=\n    node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n| color.black a x (node.tree color.red (node.tree color.red b y c) z d) :=\n    node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n| color.black a x (node.tree color.red b y (node.tree color.red c z d)) :=\n    node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n| color a x b := node.tree color a x b\n\nlemma balance_mem {α} :\n∀ c l (v : α) r, (node.tree c l v r : set α) = (balance c l v r : set α) :=\nbegin\n    intros,\n    from match c, l, v, r with\n    | color.black, node.tree color.red (node.tree color.red a x b) y c, z, d :=\n        begin\n            unfold balance,\n            sorry\n        end\n    | color.black, node.tree color.red a x (node.tree color.red b y c), z, d := begin sorry end\n    | color.black, a, x, node.tree color.red (node.tree color.red b y c) z d := begin sorry end\n    | color.black, a, x, node.tree color.red b y (node.tree color.red c z d) := begin sorry end\n    | _, _, _, _ := begin sorry end\n    end\nend\n</pre></div>\n\n\n<p>Initially, I was thinking to just do it using <code>cases</code> by each variable, but it turns into 100s of cases and doesn't scale at all. What I really want to do is pattern match exactly the right cases and then unfold the definition of balance.</p>\n<p>I'm a bit confused here. The goal inside the <code>begin</code> looks right, it wants me to prove </p>\n<div class=\"codehilite\"><pre><span></span>⊢ ↑(node.tree color.black (node.tree color.red (node.tree color.red a x b) y c) z d) =\n    ↑(balance color.black (node.tree color.red (node.tree color.red a x b) y c) z d)\n</pre></div>\n\n\n<p>so balance should be happy to unfold into:</p>\n<div class=\"codehilite\"><pre><span></span>node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n</pre></div>\n\n\n<p>However the tactic fails, any idea what I'm doing wrong?</p>",
        "id": 174035346,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566646011
    },
    {
        "content": "<p>Use <code>#print prefix balance</code> and look for the <code>_eqn_*</code> theorems to see the actual equations lean will rewrite with</p>",
        "id": 174036754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566648735
    },
    {
        "content": "<p>Most likely, lean has done an additional case split on one of the other variables, and you will have to do that same split in the proof of properties of it</p>",
        "id": 174036761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566648781
    },
    {
        "content": "<p>looks like lean did quite a lot of case splitting - there are 122 equations for the definition</p>",
        "id": 174036832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566648921
    },
    {
        "content": "<p>I suggest rewriting <code>balance</code> with explicit <code>cases</code> applications so that you don't get so many superfluous splits</p>",
        "id": 174036885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566648979
    },
    {
        "content": "<p>Or make an intermediate definition or two</p>",
        "id": 174036889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566648995
    },
    {
        "content": "<p>oh wow, that's a lot of equations. I'll look into reducing the number of them by the strategy suggested.</p>",
        "id": 174039902,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566654527
    },
    {
        "content": "<p>this is interesting: when I change the definition of <code>balance</code> to one w.r.t. to <code>match</code>, it's much happier. Consider these two (I believe) equivalent formulations</p>\n<div class=\"codehilite\"><pre><span></span>def balance {α} : color → node α → α → node α → node α\n:=\nbegin\n    intros c l v r,\n    from match c, l, v, r with\n    | color.black, node.tree color.red (node.tree color.red a x b) y c, z, d :=\n        node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n    | color.black, node.tree color.red a x (node.tree color.red b y c), z, d :=\n        node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n    | color.black, a, x, node.tree color.red (node.tree color.red b y c) z d :=\n        node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n    | color.black, a, x, node.tree color.red b y (node.tree color.red c z d) :=\n        node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n    | color, a, x, b := node.tree color a x b\n    end\nend\n-- | color.black (node.tree color.red (node.tree color.red a x b) y c) z d :=\n--     node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n-- | color.black (node.tree color.red a x (node.tree color.red b y c)) z d :=\n--     node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n-- | color.black a x (node.tree color.red (node.tree color.red b y c) z d) :=\n--     node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n-- | color.black a x (node.tree color.red b y (node.tree color.red c z d)) :=\n--     node.tree color.red (node.tree color.black a x b) y (node.tree color.black c z d)\n-- | color a x b := node.tree color a x b\n</pre></div>\n\n\n<p>the first one works fine and the second one has the problem. Is this some kind of subtlety of the equation compiler here?</p>",
        "id": 174040304,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566655292
    },
    {
        "content": "<p>upon further investigation, the second version has about twice as many equations as the first one...</p>",
        "id": 174040682,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566656051
    }
]