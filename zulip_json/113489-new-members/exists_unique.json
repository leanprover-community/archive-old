[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  2 goals</span>\n<span class=\"cm\">  ⊢ (λ (m : ℕ), P m) ?m_1 ∧ ∀ (y : ℕ), (λ (m : ℕ), P m) y → y = ?m_1</span>\n\n<span class=\"cm\">  ⊢ ℕ</span>\n<span class=\"cm\">  -/</span>\n\n  <span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    ⊢ (λ (m : ℕ), P m) ?m_1</span>\n<span class=\"cm\">    -/</span>\n\n    <span class=\"o\">},</span>\n    <span class=\"o\">{}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why are two <code>split</code>s needed?</p>",
        "id": 246335841,
        "sender_full_name": "Jiekai",
        "timestamp": 1626544518
    },
    {
        "content": "<p>Because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_unique/src\">src#exists_unique</a> is defined as an exists with an and inside it, and each split goes one level at a time</p>",
        "id": 246336548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626545529
    },
    {
        "content": "<p>The usual way to split it would be <code>refine ⟨1, _, _⟩</code></p>",
        "id": 246336555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626545568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exists_unique</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span>  <span class=\"bp\">∧</span>  <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n          <span class=\"bp\">↑</span> <span class=\"n\">the</span> <span class=\"n\">and</span>\n</code></pre></div>\n<p>The first <code>split</code> seems not spliting this <code>∧</code>.</p>",
        "id": 246361886,
        "sender_full_name": "Jiekai",
        "timestamp": 1626587880
    },
    {
        "content": "<p>Your statement needs 3 pieces of information, first a witness <code>x</code>, second a proof that <code>p x</code> is true, and finally a proof that <code>x</code> is unique.  You can provide this to lean by giving it a list of <code>(x, p x, unique x)</code>. When you use <code>split</code>,</p>",
        "id": 246362331,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1626588718
    }
]