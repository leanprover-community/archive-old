[
    {
        "content": "<p>When we have an existential statement, we can use choice to construct a witness w. However, while w retains the correct type, the fact that it is a witness to a particular proposition is sometimes (seemingly) lost.  Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic\nopen function\nnoncomputable theory\n\ndef inv {α β} (f : α → β) (h : surjective f) : β → α :=\nbegin\n    intro b, rw [surjective] at h,\n    choose a h using h b, exact a\nend\n\ntheorem should_be_trivial {α β} (f : α → β) (h : surjective f) : let f&#39; := inv f h in ∀ b : β, f (f&#39; b) = b :=\nbegin\n    simp, intro b, rw inv, admit\nend\n</pre></div>\n\n\n<p>Rewriting inv gives some scary-looking term, and simp-ing gives \"f (classical.some _) = b\", when it seems that the proposition that choice was made on has been lost.</p>\n<p>What is a good way of recovering the proposition in an existential statement? How could this proof be fixed? (A proof ending with \"assumption\" would be extra nice, to show how the proposition can be added as a hypothesis)</p>",
        "id": 181176749,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1574220053
    },
    {
        "content": "<p>The key is <code>classical.some_spec</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">surjective</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">should_be_trivial</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f&#39;</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- n.b. using tactics in defs is discouraged (because it leads to scary-looking terms)</span>\n<span class=\"n\">def</span> <span class=\"n\">inv&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 181179817,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574225581
    },
    {
        "content": "<p><code>foo_spec</code> seems to be the conventional name for the theorem that provides the defining property of <code>foo</code>, e.g. <code>nat.find_greatest_spec</code> (for <code>nat.find_greatest</code>), <code>finset.choose_spec</code> (for <code>finset.choose</code>), etc.</p>",
        "id": 181180803,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574227331
    },
    {
        "content": "<p>Thanks for the reply, but I am still confused. I believe this is at least in part due to the \"classical.some _\" terms which appear.</p>\n<p>It seems to me that after unfolding the definition, the witnesses appear in the interactive tactic window as classical.some _, which does not tell us what the value is a witness for (although Lean seems to know of this). For example:</p>\n<div class=\"codehilite\"><pre><span></span>theorem contrived_example {α β} (f : α → β) (h : surjective f) (a1 a2 : α) (b1 b2 : β) (h2 : a1 = inv&#39; f h b1)\n    (h3 : a2 = inv&#39; f h b2) (h4 : b1 = b2): a1 = a2 :=\nbegin\n  rw [h2, h3], dunfold inv&#39;, -- At this point the goal is to show &quot;classical.some _ = classical.some _&quot;, refl fails\n  simp [h4] -- something happens behind the scenes and it&#39;s probably eventually resolved by refl\nend\n</pre></div>\n\n\n<p>Is there a way to elaborate this \"classical.some _\"? </p>\n<p>Additionally, would it be possible to have an interactive tactic to extract the propositions from the values resulting from the application of classical.some? For example, if we had \"p : nat -&gt; Prop\" and \"h : \\exists n, p n\", then we could replace instances of \"classical.some h\" with x and add an additional hypothesis \"p x\".</p>",
        "id": 181187499,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1574238044
    },
    {
        "content": "<p>it's a printing setting. Try setting <code>set_option pp.proofs true</code></p>",
        "id": 181187719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574238286
    },
    {
        "content": "<p>I thought the whole point of <code>choose</code> was so that the user didn't have to know about <code>classical.some_spec</code>?</p>",
        "id": 181188147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574238749
    },
    {
        "content": "<p>Aah I see. So in the <code>def</code> you get the proof you need, but then the def finishes and the proof is lost. I guess you shouldn't be using tactic mode for the definition of the inverse function really. If you define it using <code>choose</code> in <code>should_be_trivial</code> you'll be OK. I guess an alternative is to define <code>inv</code> not just to return a function but to return a pair consisting of a function and the proof that it's an inverse.</p>",
        "id": 181188256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574238912
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">inv&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">surjective</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">f&#39;</span> <span class=\"n\">hh</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">f&#39;</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181188705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574239434
    },
    {
        "content": "<p>The recommended way to define functions using choice is to write down the property defining the function and prove it straight away with <code>some</code> and <code>some_spec</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">should_be_trivial</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 181189289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574240163
    },
    {
        "content": "<p>The <code>choose</code> tactic is only appropriate if you only need the function local to a proof</p>",
        "id": 181189311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574240191
    },
    {
        "content": "<p>Thanks everybody who replied. Here is my takeaway from this thread (hopefully useful to any future lost souls):</p>\n<p>1) When using choice to extract witnesses, \"set_option pp.proofs true\" elaborates the tactics state so that it makes sense.<br>\n2) We can use classical.some_spec to extract the hypothesis of the witness.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span>theorem should_be_trivial {α β} (f : α → β) (h : surjective f) : let f&#39; := inv&#39; f h in ∀ b : β, f (f&#39; b) = b :=\nbegin\n    intros f&#39; b, simp [f&#39;], dunfold inv&#39;,\n    have := classical.some_spec (h b), -- the argument of some_spec is precisely that of classical.some in the tactic state\n    assumption\nend\n</pre></div>",
        "id": 181189752,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1574240683
    },
    {
        "content": "<p>1) Lean doesn't print holes in terms as <code>_</code>, it prints them as <code>?m_1</code>. If you see a <code>_</code> it's a proof that has been suppressed from printing but is present internally</p>",
        "id": 181190262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574241211
    },
    {
        "content": "<p>so it's not about \"elaborating the tactic state\", it's about showing more information (hence the <code>pp</code> for pretty printer)</p>",
        "id": 181190338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574241259
    }
]