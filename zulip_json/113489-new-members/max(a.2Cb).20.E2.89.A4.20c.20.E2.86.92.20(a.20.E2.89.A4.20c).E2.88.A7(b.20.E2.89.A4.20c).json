[
    {
        "content": "<p>seems so simple but don't know how to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/init/algebra/functions.html#le_max_left\">le_max_left</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- use le_max_left?</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320565461,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673393747
    },
    {
        "content": "<p>You can try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">le_max_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_max_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 320565721,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673393903
    },
    {
        "content": "<p>got it! I was tripped up on some cases where we don't need <code>:=</code> after <code>have</code></p>",
        "id": 320565966,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673394112
    },
    {
        "content": "<p><code>have x : T := a</code> makes a new hypothesis called <code>x</code> of type <code>T</code>, and assigns it the proof <em>term</em> <code>a</code></p>",
        "id": 320566034,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673394153
    },
    {
        "content": "<p>If you want to use tactics to solve the proposition in your <code>have</code>-expression, you don't use <code>:=</code>, and start a new tactic block.</p>",
        "id": 320566056,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673394175
    },
    {
        "content": "<p>Proof terms can be difficult to write, so in more complex cases than this I avoid the <code>:=</code> syntax and just solve the sub-goal with tactics.</p>",
        "id": 320566107,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673394219
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/max_le_iff\">docs#max_le_iff</a> if you want to have a look at how mathlib does it</p>",
        "id": 320645077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673426415
    }
]