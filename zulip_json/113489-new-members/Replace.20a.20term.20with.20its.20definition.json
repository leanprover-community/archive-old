[
    {
        "content": "<p>I'm running into the following type of problem regularly, and am wondering if there is a simple way to approach it.<br>\nI hope I can explain what I mean clearly.</p>\n<p>Consider the Lean4 code at the end of this post. <br>\nIn it, I define a number of classes, an instance, and a property, and subsequently want to check that the instance has the property.<br>\nWhat I run into is illustrated by the first \"state\" - which I commented in.<br>\nThe goal simply states: <em>is_associative</em>.<br>\nNow it seems that I have to look-up <em>is_associative</em> manually and then conclude I can get on with my prove using intro x y z.<br>\nA 'better' way would be if I had a way to let Lean unfold the definition of is_associative automatically.<br>\nIs there a tactic for that?</p>\n<p>I run into the same problem again after the intro x y z, because the state then indicates <em>Operator</em> while in principle Lean should be able to unfold that definition into the underlying functions. Actually, I don't even know what to use to finish the proof in this case, so any help there would probably be a good hint in the right direction as well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Property</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">contains</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Operation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IOperation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">iop</span> <span class=\"o\">:</span> <span class=\"n\">Property</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IOperation</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Operation</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I.iop</span> <span class=\"o\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_associative</span> <span class=\"o\">[</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">Operation</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">O.op</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">O.op</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">O.op</span> <span class=\"o\">(</span><span class=\"n\">O.op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_associative_I</span> <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IOperation</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_associative</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instOperation</span> <span class=\"n\">α</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  α : Type u_1</span>\n<span class=\"cm\">  I : IOperation α</span>\n<span class=\"cm\">  ⊢ is_associative</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  α : Type u_1</span>\n<span class=\"cm\">  I : IOperation α</span>\n<span class=\"cm\">  x y z : α</span>\n<span class=\"cm\">  ⊢ Operation.op x (Operation.op y z) = Operation.op (Operation.op x y) z</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 309184093,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668170338
    },
    {
        "content": "<p>One way is to use <code>dsimp</code>, for instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_associative</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>will work in your case</p>",
        "id": 309184547,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668170471
    },
    {
        "content": "<p>Great, that indeed works well on the first step.<br>\nBut to simplify the \"Operation.op\" after the intro, it's not so clear to me how I could use it?<br>\n<em>dsimp [instOperation I]</em> doesn't seem to help</p>",
        "id": 309185222,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668170714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Operation.op</span><span class=\"o\">,</span> <span class=\"n\">instOperation</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>will unfold everything for the next step, then it gets a bit tricky because I don't quite understand what is being modelled!</p>",
        "id": 309185886,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668170979
    },
    {
        "content": "<p>PS <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> (that's a link -- you can edit your first post if you like)</p>",
        "id": 309186127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668171044
    },
    {
        "content": "<p>Wonderful! Thanks a lot. I think I can manage what comes after that :-)</p>",
        "id": 309186270,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668171088
    },
    {
        "content": "<p>Reading up a bit on dsimp <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a> I get the impression I should be careful using simp or dsimp \"in the middle of a proof\" except in specific cases. Your suggestion of dsimp only [...] is indicated as \"safe\", but I don't fully grasp the rationale behind these remarks yet. Is it because the execution of \"simp\" may change when theorems are added to it, so your proof might all of a sudden break if the context changes?</p>",
        "id": 309188094,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1668171622
    },
    {
        "content": "<p>Yes that's it -- it's a PITA to have to fix up someone else's proof in your PR because you added some cool new <code>simp</code> lemmas which broke someone else's poorly-written code.</p>",
        "id": 309188342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668171695
    },
    {
        "content": "<p>If <code>simp</code> works and makes progress but doesn't close a goal, you can replace it with <code>squeeze_simp</code> and then click on the blue output which will replace again with <code>simp only [list of lemmas]</code> which should hopefully work.</p>",
        "id": 309188625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668171761
    },
    {
        "content": "<p>Note that \"non-terminal <code>dsimp</code>\" are very much accepted, because the goal after is guaranteed to be defeq to the goal after.</p>",
        "id": 309204710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668177558
    },
    {
        "content": "<p>well, <code>rw</code> can still fail after a non-terminal <code>dsimp</code></p>",
        "id": 309205297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668177761
    },
    {
        "content": "<p>Yes but that's much easier to fix than a non-terminal simp where you might get into a completely different goal.</p>",
        "id": 309205681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668177908
    },
    {
        "content": "<p>Our goal is not that no proof will ever break, right? That's unreachable. Our goal is that when a proof breaks it is fixable easily. And having a goal that's defeq to what it should be makes breakage easily fixable.</p>",
        "id": 309205892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668177985
    },
    {
        "content": "<p>I'm not sure it's true that defeq is any easier to fix than non-defeq when your goal looks completely different after a big <code>simp</code>. I would say that it is only okay if the follow up tactic is not sensitive to the goal except up to defeq, e.g. if you use <code>exact</code> / <code>refine</code> / <code>apply</code> / <code>change</code></p>",
        "id": 309207439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668178506
    },
    {
        "content": "<p>which is similar to the rule we have for nonterminal simp - it is okay as long as you follow up with a tactic that is not sensitive to details of the goal like <code>ring</code> / <code>linarith</code> / <code>tidy</code> / another <code>simp</code></p>",
        "id": 309207569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668178551
    }
]