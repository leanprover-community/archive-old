[
    {
        "content": "<p>What are atoms in lean, or what does atomicity mean? A couple of times I've made the mistake when pattern matching of doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"foo\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bar\"</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"foo\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bar\"</span>\n</code></pre></div>\n<p>and lean will complain in the former case that \"invalid pattern variable, must be atomic\" -- I know there's <code>@[matchPattern]</code> or in lean3 <code>@[pattern]</code> which tells lean which things are OK to use in match patterns -- is there anything else I should know as to why lean likes the second example more than the first?</p>",
        "id": 231713935,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616622202
    },
    {
        "content": "<p>I think that error means that you have named a variable with the nonatomic name <code>n.succ</code></p>",
        "id": 231721800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616626149
    },
    {
        "content": "<p>Variable names (almost?) always have no namespaces</p>",
        "id": 231721827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616626172
    },
    {
        "content": "<p>Basically, it's not actually treating it as a projection</p>",
        "id": 231721850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616626192
    },
    {
        "content": "<p>Right, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"foo\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"bar\"</span>\n</code></pre></div>",
        "id": 231722945,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616626858
    },
    {
        "content": "<p>I see! Interesting, thanks.</p>",
        "id": 231728272,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616630267
    }
]