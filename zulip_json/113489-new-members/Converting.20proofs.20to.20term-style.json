[
    {
        "content": "<p>I'm trying to write these proofs without tactics, and the rewrites are giving me a hard time. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">},</span>\n  <span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">change</span> <span class=\"n\">univ</span><span class=\"bp\">ᶜ.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">compl_univ</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finite_empty</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span><span class=\"o\">,</span> <span class=\"n\">finite.subset</span> <span class=\"n\">hX</span> <span class=\"o\">(</span><span class=\"n\">compl_subset_compl.2</span> <span class=\"n\">hY</span><span class=\"o\">),</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">ᶜ.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">compl_inter</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">finite.union</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Could someone show me how to do either of them? I suspect the other one will use the same tricks.</p>",
        "id": 266422476,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640864563
    },
    {
        "content": "<p>Rewrites are hard to do in term mode. If you can get eq.subst to work then great, otherwise stick to tactic mode</p>",
        "id": 266422683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640864787
    },
    {
        "content": "<p>You can do the first one as <code> (((@compl_univ α).symm) ▸ finite_empty : (univ : set α)ᶜ.finite),</code>, but there isn't much gain in doing so,</p>",
        "id": 266422910,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640865114
    },
    {
        "content": "<p>Its just harder to read and more fiddly to write than using tactic mode when rewrites are involved</p>",
        "id": 266422962,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640865142
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 266422965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640865146
    },
    {
        "content": "<p>The little black triangle (\\t) is notation for <code>eq.subst</code>, a far less powerful version of <code>rw</code> which needs a lot of help with unification (as Alex demonstrates)</p>",
        "id": 266423004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640865207
    },
    {
        "content": "<p>huh, that surprises me</p>",
        "id": 266423087,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640865315
    },
    {
        "content": "<p>Thanks for explaining!</p>",
        "id": 266423093,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640865318
    },
    {
        "content": "<p>You can right click on <code>rw</code> and see how it works -- it's written in meta code. <code>rw</code> uses <code>rw_core</code> which uses <code>rw_goal</code> which uses <code>rewrite</code> which uses <code>rewrite_core</code> which is written in C++ so now I get lost.</p>",
        "id": 266423309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640865591
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a> to print the proof term created by a given tactic, for things like intro and exact this is usually a concise/readable term, but for rewrite there is a lot of <code> id ((id (eq.rec (eq.refl (X ∩ Y)ᶜ.finite) (X.compl_inter Y))).mpr (finite.union hX hY))</code>.<br>\nIt can be the case that using the little triangle is helpful to avoid nested tactic blocks, and you can certainly find uses of it in mathlib so I'd say its worth knowing how to do, but not always worth doing in every situation.</p>",
        "id": 266425488,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640867851
    },
    {
        "content": "<p>also, usually when there's <code>eq.rec</code> in a term proof, it will not typecheck if you just copy-paste it into term mode; the elaborator is fickle</p>",
        "id": 266429744,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640872135
    }
]