[
    {
        "content": "<p>Why are lemmas like <code>list.map_id</code> stated in fully applied form, as opposed to using <code>funext</code>?</p>",
        "id": 217828890,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606261559
    },
    {
        "content": "<p>If I have <code>list.map (list.map id) l</code> for some <code>l : list (list a)</code>, that doesn't simplify currently.</p>",
        "id": 217828954,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606261587
    },
    {
        "content": "<p>Because the normal thing to do with a function is apply it to something, and often the right hand side should be simplified more after being applied to something.</p>",
        "id": 217830118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606262498
    },
    {
        "content": "<p>Sometimes we do have both versions, as in <a href=\"https://github.com/leanprover-community/mathlib/blob/7e66984cb1cd5b4262d8dd0ee775cd212e56c9e7/src/data/equiv/basic.lean#L180\">https://github.com/leanprover-community/mathlib/blob/7e66984cb1cd5b4262d8dd0ee775cd212e56c9e7/src/data/equiv/basic.lean#L180</a> and following.</p>",
        "id": 217830193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606262541
    },
    {
        "content": "<p>I understand -- but what would be the downside of providing a <code>@[simp] lemma list.map_id'' : list.map (@id a) = id</code> also/instead? The current <code>list.map_id</code> does two simplifcation steps, <code>[list.map_id'', id.def]</code></p>",
        "id": 217830906,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263085
    },
    {
        "content": "<p>In other words, should a \"lawful\" <code>map</code> lemma be stated in applied or not-applied form? Should <code>list.map_id''</code> be added to mathlib?</p>",
        "id": 217830993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263132
    },
    {
        "content": "<p>Seems like a reasonable addition, though it would be nonconfluent if marked <code>simp</code> (and I'm not sure why it needs two <code>'</code>s)</p>",
        "id": 217831390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606263520
    },
    {
        "content": "<p>oh, <code>id</code> does have a simp lemma</p>",
        "id": 217831420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606263572
    },
    {
        "content": "<p>Because there is a <code>list.map_id'</code>.</p>",
        "id": 217831436,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263599
    },
    {
        "content": "<p>I don't see it</p>",
        "id": 217831479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606263605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">map_id'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">]]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_id'\">docs#list.map_id'</a></p>",
        "id": 217831501,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263637
    },
    {
        "content": "<p>oh, it's somewhere else. In fact, doesn't it solve your problem?</p>",
        "id": 217831503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606263637
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">simplify tactic failed to simplify</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">l : list (list α)</span>\n<span class=\"cm\">⊢ list.map (list.map id) l = l</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">list.map_id''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">list.map_id</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- that is now fine</span>\n</code></pre></div>",
        "id": 217831694,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263808
    },
    {
        "content": "<p>Ah, you meant <code>simp [list.map_id']</code></p>",
        "id": 217831713,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263828
    },
    {
        "content": "<p>I see. Well, I guess then I'm just surprised <code>list.map_id'</code> isn't tagged with <code>@[simp]</code></p>",
        "id": 217831803,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263887
    },
    {
        "content": "<p>If there's no reason not to tag it, that's a simple change. If there is a reason not to tag it, just trying to understand what the reason would be.</p>",
        "id": 217831854,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606263938
    },
    {
        "content": "<p>Your <code>map_id''</code> seems like a better candidate for a simp lemma</p>",
        "id": 217831958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606264018
    },
    {
        "content": "<p><span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> <code>is_lawful_functor.id_map</code> is also in fully applied form</p>",
        "id": 217832108,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606264137
    }
]