[
    {
        "content": "<p>I've got the following definition, where I want to get the restrictions into the type because I'm going to end up taking a product of a function <code>a (n : nat) (is_prime : nat.prime n) : nat</code> over this set, and this way I can just use bigoperators.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">primes_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">m</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">x_le_n</span><span class=\"o\">,</span> <span class=\"n\">x_prime</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">x_le_n</span><span class=\"o\">,</span> <span class=\"n\">x_prime</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">x_lt_sn</span><span class=\"o\">,</span> <span class=\"n\">x_prime</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x_lt_sn</span><span class=\"o\">,</span> <span class=\"n\">x_prime</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>However, proving anything about this set is not obviously possible; it doesn't behave nicely under <code>unfold</code>, which is to be expected because I'm in tactic mode, which is always a big no-no when defining a function.</p>\n<p>I'm going to want both <code>m &lt;= n</code> and <code>nat.prime m</code> in scope when I take my product over <code>primes_le n</code>. One way to proceed is to just use <code>finset.filter nat.prime (finset.range (n + 1))</code> in the definition of <code>primes_le</code>, and then at every call site I could prove <code>m &lt;= n</code> and <code>nat.prime m</code>; another way would be to provide an explicit function <code>finset {m:nat // m \\in finset.filter nat.prime (finset.range (n + 1))}</code> to <code>finset {m : nat // m &lt;= n and nat.prime m}</code> and compose that with my <code>primes_le</code>. What's the One True Answer? I'm inclined to think the latter.</p>",
        "id": 198948512,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590611299
    },
    {
        "content": "<p>You're defining a certain finite subset of the primes which are at most n?</p>",
        "id": 198951217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590612527
    },
    {
        "content": "<p>I'm defining exactly the primes which are at most n, but I need the fact that they're at most n to be stored with them, so that when I <code>prod x in primes_le 10, f x</code> I'll be able to pass the fact that <code>x</code> is prime into <code>f</code></p>",
        "id": 198951472,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590612664
    },
    {
        "content": "<p><code>finset X</code> is the type of finite subsets of <code>X</code></p>",
        "id": 198951525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590612693
    },
    {
        "content": "<p>Not the assertion that X is finite</p>",
        "id": 198951545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590612704
    },
    {
        "content": "<p>In fact my next theorem, the one that sparked this question, is a proof that <code>primes_le 10</code> contains every prime leq 10</p>",
        "id": 198951676,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590612767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> There's a bit of an art to using <code>finset.prod</code> and <code>finset.sum</code></p>",
        "id": 198951690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612776
    },
    {
        "content": "<p>But what is <code>f</code> in your case?</p>",
        "id": 198951701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612783
    },
    {
        "content": "<p>Are you sure that this is true though? You're using simp to construct data. I have no idea what data it constructed. It's like you defined a natural number using simp and are now complaining that you don't know what it is</p>",
        "id": 198951766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590612823
    },
    {
        "content": "<p>I think <code>primes_le n := (range (n+1)).filter prime</code> would work. Haven't you used something like that in the other PRs?</p>",
        "id": 198951803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612839
    },
    {
        "content": "<p>I don't know if it has a good name, it's used in Erdos's proof of Bertrand's postulate, it's the multiplicity of the prime p in 2n choose n:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"err\">$</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">not_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_one</span> <span class=\"n\">is_prime</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_nat_iff</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">not_one</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_iff_dom</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">fin</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198951883,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590612856
    },
    {
        "content": "<p>I need the term of type <code>nat.prime p</code> when I call this</p>",
        "id": 198951930,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590612879
    },
    {
        "content": "<p>I'm not using simp to construct data, as such - at least, not from a programmer's perspective; I'm using simp to transform the type of that data</p>",
        "id": 198951998,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590612909
    },
    {
        "content": "<p>But you don't use <code>is_prime</code> in that defintion, right?</p>",
        "id": 198951999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612910
    },
    {
        "content": "<p>I use it to prove that p is not 1, for example</p>",
        "id": 198952034,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590612927
    },
    {
        "content": "<p>Ooh, you do, because of the <code>.get</code></p>",
        "id": 198952044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612932
    },
    {
        "content": "<p>Johan's idea will give you this. You're using complicated tactics to define data which can't be right. Complicated tactics are for proofs. Do you understand what I'm saying about what finset X means?</p>",
        "id": 198952084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590612949
    },
    {
        "content": "<p>I do understand, yes; I have an auxiliary lemma I'm going to prove immediately afterwards stating that while all I know of <code>primes_le</code> from its type alone is that it is some finite subset of {primes less than or equal to n}, in fact it contains all the primes less than or equal to n</p>",
        "id": 198952264,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613009
    },
    {
        "content": "<p>I think you want <code>finset.attach</code>.</p>",
        "id": 198952298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590613032
    },
    {
        "content": "<p>And <code>prod_attach</code></p>",
        "id": 198952322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590613049
    },
    {
        "content": "<p>I use finset.attach to create this in the first place, yes</p>",
        "id": 198952327,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> One option is to cheat, and define your function on non-<code>prime</code>s as well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"k\">then</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"err\">$</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">not_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">ne_one</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_nat_iff</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">not_one</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_iff_dom</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">fin</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span>\n<span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 198952356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613069
    },
    {
        "content": "<p>Oh, prod_attach looks promising</p>",
        "id": 198952361,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613072
    },
    {
        "content": "<p>Hah, that does sound quite mathlibby, actually</p>",
        "id": 198952412,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613088
    },
    {
        "content": "<p>Thanks, I'll see if I can <code>prod_attach</code> it and also see what it looks like with that cheat</p>",
        "id": 198952476,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613126
    },
    {
        "content": "<p>Also, to make it readable, I would put the proof that you pass to <code>.get</code> in a lemma</p>",
        "id": 198952504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613144
    },
    {
        "content": "<p>Isn't this already defined? I think the name <code>padic_val</code> is not good for it (in metamath I used \"pCnt\" or \"prime count\" because p-adic valuation could also mean 1/p^k)</p>",
        "id": 198952529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590613159
    },
    {
        "content": "<p>But <code>padic_val</code> probably isn't defined for arbitrary <code>p</code>.</p>",
        "id": 198952677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613212
    },
    {
        "content": "<p>So in that case you need the <code>attach</code> approach</p>",
        "id": 198952706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613224
    },
    {
        "content": "<p>Actually looks like it uses the cheat:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">padic_val_rat</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n<span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n    <span class=\"o\">(</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_int_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_ne_zero_of_ne_zero</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n    <span class=\"o\">(</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_int_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">denom_ne_zero</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n<span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 198952734,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613245
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 198952810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590613285
    },
    {
        "content": "<p>Wrong thread?</p>",
        "id": 198952856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613303
    },
    {
        "content": "<p>No, I see</p>",
        "id": 198952910,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613318
    },
    {
        "content": "<p>I don't understand why Patrick's proposal for a definition isn't as crazy as what I just wrote</p>",
        "id": 198952956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590613325
    },
    {
        "content": "<p>How do I know simp has actually used what I told it to use</p>",
        "id": 198952957,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613327
    },
    {
        "content": "<p>There is <code>fintype</code> for proving that a type is finite.</p>",
        "id": 198953043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590613375
    },
    {
        "content": "<p>This is talking about another definition, i guess. Not the <code>\\a</code> that we were discussing right now</p>",
        "id": 198953080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613397
    },
    {
        "content": "<p>Aha, I see. I have to scroll up.</p>",
        "id": 198953117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613427
    },
    {
        "content": "<p>It's a bit disappointing that there is no <code>padic_val_nat</code></p>",
        "id": 198953210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590613462
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">primes_le</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">prime</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"n\">prod</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">primes_le</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">padic_val</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 198953303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613515
    },
    {
        "content": "<p>That's what I would go for, I think</p>",
        "id": 198953323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613530
    },
    {
        "content": "<p>Sigh, I've got a nontrivial amount of proof about the properties of my existing <code>\\a</code></p>",
        "id": 198953468,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613604
    },
    {
        "content": "<p>Such is life</p>",
        "id": 198953476,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> So... ask more questions on zulip</p>",
        "id": 198953687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613720
    },
    {
        "content": "<p>Also, maybe you can just rename your <code>\\a</code> to <code>padic_val_nat</code> and weaken the assumptions a bit.</p>",
        "id": 198953742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613757
    },
    {
        "content": "<p>Then you don't loose that much work at all</p>",
        "id": 198953753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590613769
    },
    {
        "content": "<p>Your definition neatly decomposes as the <code>padic_val</code> of a particular number. Any theorems that are just theorems about <code>padic_val</code> should be generalized (and are probably already proven), and stuff about the central binomial coefficient should still be in your proof as before</p>",
        "id": 198953763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590613777
    },
    {
        "content": "<p>Yeah, I suspect lots of it should be salvageable</p>",
        "id": 198953776,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590613786
    },
    {
        "content": "<p>So people wouldn't object to me adding a new function <code>padic_val_nat</code> in the general neighbourhood of the existing mathlib <code>lemma padic_val_rat_of_int (z : ℤ) (hp : p ≠ 1) (hz : z ≠ 0) :  padic_val_rat p (z : ℚ) = (multiplicity (p : ℤ) z).get (finite_int_iff.2 ⟨hp, hz⟩)</code> that calls through to <code>padic_val_rat</code>, along with lemmas like <code>padic_val_rat_of_int</code> that equate it with the existing <code>padic_val_rat</code>?</p>",
        "id": 199250256,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590835063
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> or <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> could chime in, because I think there used to be something called <code>padic_val</code> or <code>padic_val_nat</code> that was replaced by <code>multiplicity</code>, and was very similar to what you are suggesting</p>",
        "id": 199250358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590835243
    },
    {
        "content": "<p>I can believe that replacing <code>padic_val</code> with multiplicity was a mistake. It happens all the time that you want to raise something to the power of the multiplicity, and obviously this gets messy. I think the best way is to state theorems in the form <code>(n : nat) (hn : n ∈ multiplicity p x)</code> so you don't have <code>get</code> in all the statements, which I did not do when I wrote multiplicity. This might make the interface okay, but it also may well be worth having a version that defaults to zero.</p>",
        "id": 199250789,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590835964
    },
    {
        "content": "<p>Since <code>(multiplicity p x).dom</code> is decidable, it should at least be possible to use <code>(multiplicity p x).to_option.iget</code> (there should be an <code>roption.iget</code> for this)</p>",
        "id": 199251613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590837167
    }
]