[
    {
        "content": "<p>When using the calc tactic, we must provide a proof for each step, but I can't see the context and goal when writing it. </p>\n<p>Is there a way to get it?</p>\n<p>Also, I am being unable to prove this (apparently) simple goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">e</span>\n</code></pre></div>\n<p>I tried the usual <code>simp</code>,  <code>field_simp</code>, <code>norm_num</code>, <code>library_search</code>and so on, but they don't work.</p>",
        "id": 268972046,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1642877685
    },
    {
        "content": "<p>When I want to see a context and goal somewhere, I usually insert a <code>begin end</code> or a <code>by { }</code>. (Sometimes you need parentheses, like <code>(by { })</code>.)</p>",
        "id": 268972109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642877772
    },
    {
        "content": "<p>It seems that that the lemmas involved need that <code>c</code> is not equal to zero, rather than <code>c</code> is positive. You can get that fact from <code>h.ne</code> (or <code>ne_of_le h</code>, I believe).</p>\n<p>A proof I found:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_inj</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h.ne</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268972202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642877975
    },
    {
        "content": "<p>A lemma like <code>div_self</code> is the main part of the argument; you just need to rearrange the terms until that applies</p>",
        "id": 268972322,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1642878055
    }
]