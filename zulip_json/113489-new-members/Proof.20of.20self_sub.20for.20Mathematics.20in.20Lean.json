[
    {
        "content": "<p>Hi,</p>\n<p>I'm hoping someone can help me with my attempted proof of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">self_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>Here's what I have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_neg_of_add_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">self_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">neg_neg</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">eq_neg_of_add_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The justification of h₂ doesn't work:<br>\n/-<br>\nrewrite tactic failed, lemma lhs is a metavariable<br>\nstate:<br>\nR : Type u_1,<br>\n_inst_1 : ring R,<br>\na : R,<br>\nh₁ : a = - -a<br>\n⊢ a + -a = 0<br>\n-/<br>\nCould someone explain what caused this error and what it means please.<br>\nThanks!</p>",
        "id": 208234774,
        "sender_full_name": "Mike",
        "timestamp": 1598542765
    },
    {
        "content": "<p>With minimal changes from what you have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_neg_of_add_eq_zero&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sub_eq_add_neg&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">reflexivity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg_neg&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">self_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">neg_neg&#39;</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">eq_neg_of_add_eq_zero&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_eq_add_neg&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208236077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543275
    },
    {
        "content": "<p>I named them all \"prime\" to avoid clashes with names in mathlib</p>",
        "id": 208236150,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543294
    },
    {
        "content": "<p>I changed the first lemma to <code>\\iff</code> format, so that it can be used for rewrites.</p>",
        "id": 208236294,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543364
    },
    {
        "content": "<p>Before, having the hypothesis on the left as an explicit argument makes it not possible to use it as a rewrite how you wanted to, that was the metavariable issue.</p>",
        "id": 208236405,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543409
    },
    {
        "content": "<p>Because how you had it originally, <code>eq_neg_of_add_eq_zero</code> needed an explicit argument. And that explicit argument was exactly what you were trying to prove in the goal.</p>",
        "id": 208236503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"333715\">@Mike</span> In particular, what went wrong with your first attempt is that you tried to treat <code>eq_neg_of_add_eq_zero</code> as an iff statement, but it is only one direction of the iff that you are looking for. (And the wrong direction unfortunately.)</p>",
        "id": 208236528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598543463
    },
    {
        "content": "<p>Additionally, I changed the <code>have h2 := ...</code> to <code>rw ... at h2</code></p>",
        "id": 208236598,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543494
    },
    {
        "content": "<p>Because you can't just apply an equality of the form <code>a = b</code> to a hypothesis of <code>h2 := a</code> to get <code>h2 := b</code>. That's exactly what the rewrite tactic does instead.</p>",
        "id": 208236735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598543538
    }
]