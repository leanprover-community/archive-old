[
    {
        "content": "<p>I'm trying to prove that if the index of one element <code>x</code> in a list <code>l</code> is smaller than that of another element <code>x'</code>, then this also holds if we remove an element from <code>l</code> (which is neither <code>x</code> nor <code>x'</code>):</p>\n<p>So far I've been able to prove this for the case that <code>l = hd :: tl</code>, such that we remove <code>hd</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.index_of_cons_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tl.index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">tl.index_of</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.not_mem_of_nodup_cons</span> <span class=\"n\">hₙ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₓ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hₘ</span> <span class=\"n\">hₕ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₓ'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hₘ'</span> <span class=\"n\">hₕ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₛ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.index_of_cons_ne</span> <span class=\"n\">tl</span> <span class=\"n\">hₓ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₛ'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.index_of_cons_ne</span> <span class=\"n\">tl</span> <span class=\"n\">hₓ'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hₛ</span><span class=\"o\">,</span> <span class=\"n\">hₛ'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.succ_lt_succ_iff.mp</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>The key step for me was <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/basic.html#list.index_of_cons_ne\"><code>list.index_of_cons_ne</code></a>.<br>\nUnfortunately such a lemma does not exist for <code>list.erase</code>, so I'm stuck at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.index_of_erase_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"n\">l.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₕ</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">∉</span> <span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.mem_erase_of_nodup</span> <span class=\"n\">hₙ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₓ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hₘ</span> <span class=\"n\">hₕ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hₓ'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hₘ'</span> <span class=\"n\">hₕ</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Are there any useful lemmas that could help complete this proof?<br>\nThanks :)</p>",
        "id": 228478909,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614716569
    },
    {
        "content": "<p>Can you prove <code>list.index_of_cons_lt</code> for arbitrary <code>list.sublist</code>?</p>",
        "id": 228479873,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614716954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">list.sublist_nil</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;+</span> <span class=\"o\">[]</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.mem_of_mem_sublist</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hl</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">tl</span> <span class=\"n\">hd</span> <span class=\"n\">hl</span> <span class=\"n\">IH</span> <span class=\"n\">tl</span> <span class=\"n\">tl'</span> <span class=\"n\">hd</span> <span class=\"n\">hl</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">list.mem_cons_of_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.index_of_lt_of_sublist</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l'</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hₘ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"n\">l.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l'.index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l'.index_of</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hl</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">tl</span> <span class=\"n\">hd</span> <span class=\"n\">hl</span> <span class=\"n\">IH</span> <span class=\"n\">tl</span> <span class=\"n\">tl'</span> <span class=\"n\">hd</span> <span class=\"n\">hl</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hₘ</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"n\">hₘ</span> <span class=\"n\">hₘ'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">hl_l₁</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">tl</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_of_mem_sublist</span> <span class=\"n\">hz</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n          <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hₙ</span> <span class=\"o\">},</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">list.index_of_cons_ne</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"n\">_</span> <span class=\"n\">hₘ</span><span class=\"o\">),</span> <span class=\"n\">list.index_of_cons_ne</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hne</span> <span class=\"n\">_</span> <span class=\"n\">hₘ'</span><span class=\"o\">),</span>\n           <span class=\"n\">nat.succ_lt_succ_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.nodup_cons</span> <span class=\"n\">at</span> <span class=\"n\">hₙ</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hₙ.right</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.mem_cons_iff</span> <span class=\"n\">at</span> <span class=\"n\">hₘ</span> <span class=\"n\">hₘ'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.nodup_cons</span> <span class=\"n\">at</span> <span class=\"n\">hₙ</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hₘ</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hₘ</span><span class=\"bp\">;</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hₘ'</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hₘ'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">tl'</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_of_mem_sublist</span> <span class=\"n\">hₘ'</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hx'</span> <span class=\"n\">hₙ.left</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">tl'</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_of_mem_sublist</span> <span class=\"n\">hₘ</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hx</span> <span class=\"n\">hₙ.left</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">tl'</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_of_mem_sublist</span> <span class=\"n\">hₘ</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hx</span> <span class=\"n\">hₙ.left</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">tl'</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_of_mem_sublist</span> <span class=\"n\">hₘ'</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_nmem_ne</span> <span class=\"n\">hx'</span> <span class=\"n\">hₙ.left</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.index_of_cons_ne</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">list.index_of_cons_ne</span> <span class=\"n\">_</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_lt_succ_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">h</span> <span class=\"n\">hₘ</span> <span class=\"n\">hₘ'</span> <span class=\"n\">hₙ.right</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">list.index_of_erase_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.index_of</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₘ'</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"n\">l.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.index_of_lt_of_sublist</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">l.erase_sublist</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">hₘ</span> <span class=\"n\">hₘ'</span> <span class=\"n\">hₙ</span>\n</code></pre></div>",
        "id": 228527125,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614740534
    },
    {
        "content": "<p>Feel free to PR any of this</p>",
        "id": 228527144,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614740553
    },
    {
        "content": "<p>First lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_mem_of_not_mem\">docs#ne_of_mem_of_not_mem</a></p>",
        "id": 228547065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614755592
    }
]