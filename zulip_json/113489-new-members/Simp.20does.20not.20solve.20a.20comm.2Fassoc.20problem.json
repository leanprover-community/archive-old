[
    {
        "content": "<p>Why does simp fail here with <code>simplify tactic failed to simplify</code>? Clearly, the goal should be solvable by applying comm and assoc:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">[</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span> <span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r11</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r12</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r13</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r21</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r22</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r23</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"n\">r11</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r12</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r13</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r21</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r22</span> <span class=\"bp\">∪</span> <span class=\"n\">r23</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">r11</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r21</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r12</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r22</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">r13</span> <span class=\"bp\">∪</span> <span class=\"n\">r23</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.union_comm</span><span class=\"o\">,</span> <span class=\"n\">finset.union_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218875053,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607107469
    },
    {
        "content": "<p>Because the <code>simp</code> algorithm isn't complete for such problems with these lemmas. Try adding <code>finset.union_left_comm</code></p>",
        "id": 218876028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607107971
    },
    {
        "content": "<p>Thanks, that worked! I would have never figured that out.</p>",
        "id": 218876513,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607108212
    },
    {
        "content": "<p>The key to using <code>simp</code> is to look at the state where it got stuck and apply a lemma that will make progress from that state</p>",
        "id": 218877106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607108459
    },
    {
        "content": "<p>If you rewrite associativity a lot, you end up with <code>a U (b U c)</code> terms, and then you've lost your chance to commute <code>a</code> and <code>b</code>. You can check that <code>union_left_comm</code> and <code>union_comm</code> between them can commute everything even if you've been over-zealous with associativity on a large term.</p>",
        "id": 218877226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607108526
    },
    {
        "content": "<p>One way to say it is that adding <code>union_left_comm</code> fixes the critical pair between <code>(a U b) U c -&gt; (b U a) U c</code> and <code>(a U b) U c -&gt; a U (b U c)</code></p>",
        "id": 218877324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607108587
    },
    {
        "content": "<p>Is this some confluent rewriting terminology?</p>",
        "id": 218877898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607108868
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Critical_pair_(logic)\">https://en.wikipedia.org/wiki/Critical_pair_(logic)</a></p>",
        "id": 218878004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607108905
    },
    {
        "content": "<p>right</p>",
        "id": 218878014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607108910
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1106.4448\">https://arxiv.org/abs/1106.4448</a></p>",
        "id": 218888751,
        "sender_full_name": "Cody Roux",
        "timestamp": 1607114612
    },
    {
        "content": "<p>oh we actually have something like this too now</p>",
        "id": 218888795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607114640
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.ac_reflexivity\">docs#tactic.interactive.ac_reflexivity</a></p>",
        "id": 218888875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607114677
    },
    {
        "content": "<p>there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.assoc_rewrite\">docs#tactic.interactive.assoc_rewrite</a> but it's for associativity only</p>",
        "id": 218888985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607114745
    },
    {
        "content": "<p>When I looked there were approximately 0 uses of <code>assoc_rw</code> in mathlib, but I've been using it on a branch and it's been great</p>",
        "id": 218889587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607115078
    }
]