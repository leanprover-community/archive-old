[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_pos</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">is_pos</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_pos</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 214507785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603654498
    },
    {
        "content": "<p>How does this rfl work?</p>",
        "id": 214507790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603654503
    },
    {
        "content": "<p>The equational lemmas are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_pos.equations._eqn_1</span> <span class=\"o\">:</span> <span class=\"n\">is_pos</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"n\">is_pos.equations._eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">_x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">is_pos</span> <span class=\"n\">_x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n</code></pre></div>",
        "id": 214507799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603654514
    },
    {
        "content": "<p>that may be the equation lemmas, but the kernel reduction doesn't use equation lemmas</p>",
        "id": 214507815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603654559
    },
    {
        "content": "<p>what's the right tactic to use if this occurs inside some larger term? <code>simp</code> and <code>unfold</code> cannot reduce the goal at all, and <code>rw</code> changes the goal into <code>¬n.succ = 0</code></p>",
        "id": 214507881,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603654622
    },
    {
        "content": "<p>that looks like progress</p>",
        "id": 214507894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603654650
    },
    {
        "content": "<p>or maybe one shouldn't use underscore to begin with</p>",
        "id": 214507910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603654669
    },
    {
        "content": "<p>what's actually happening is that the compilation strategy created a term like <code>if n = 0 then ff else tt</code> and <code>decidable (n.succ = 0)</code> reduces to false</p>",
        "id": 214507979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603654710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/rfl.20with.20underscore.20in.20equation.20compiler/near/214507910\">said</a>:</p>\n<blockquote>\n<p>or maybe one shouldn't use underscore to begin with</p>\n</blockquote>\n<p>Unsurprisingly, this does produce better equation lemmas.</p>",
        "id": 214509534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603656700
    }
]