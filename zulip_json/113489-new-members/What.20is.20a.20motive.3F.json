[
    {
        "content": "<p>In the course of leaning (some <code>rw h at h1</code>), I've gotten <code>rewrite tactic failed, motive is not type correct</code>. What's a <code>motive</code>?</p>",
        "id": 166226652,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485376
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">struct</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">ss</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166226688,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485437
    },
    {
        "content": "<p>The goal of a <code>cases_on</code> or a <code>rec_on</code> is of the form <code>\\all a, C a</code>. <code>C</code> is the motive</p>",
        "id": 166226692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485449
    },
    {
        "content": "<p>In the case of <code>rw (bla : a = b)</code>, it's constructing an <code>eq.rec_on</code> application, and so the motive is a lambda term <code>C</code> such that <code>C b</code> is the goal and <code>C a</code> is where rw wants to end up</p>",
        "id": 166226753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485531
    },
    {
        "content": "<p>Aha, so does this mean that <code>rw</code> is not smart enough to (for example in my example above), after having rewritten the <code>α</code> into a <code>β</code>, use <code>id</code> to wrap <code>a</code> in a function application which views <code>a</code> as a term of type <code>β</code>?</p>",
        "id": 166226779,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485574
    },
    {
        "content": "<p>yes, that's exactly it. It rewrites <code>α</code> to let's say <code>x</code> (the lambda variable), but then <code>a : α</code> does not match the type <code>x</code> expected</p>",
        "id": 166226836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485621
    },
    {
        "content": "<p>To resolve this, you can abstract <code>a</code> in some way. For example if the goal was <code>struct.mk α a = struct.mk α a </code> you could <code>revert a</code> to get <code>\\all a : α, struct.mk α a = struct.mk α a</code>, and now uniformly rewriting <code>α</code> with <code>x</code> will not break typecorrectness</p>",
        "id": 166226886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485717
    },
    {
        "content": "<p>Aha! great, thanks. On the other hand</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">struct</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ss</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>does work (ish, I guess <code>simp</code> automatically does something like <code>cases</code> when it sees an inductive constructor too, but modulo that). So is <code>simp</code> programmed to deal with situations like this? I always imagined it was doing something like a <code>rw</code> at every step...</p>",
        "id": 166226982,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485800
    },
    {
        "content": "<p>This, by the way, is why <code>rw</code> always rewrites a value everywhere; you are much more likely to get a type correct result than if you just rewrite half of the variables</p>",
        "id": 166226991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485809
    },
    {
        "content": "<p>Yep, sure!</p>",
        "id": 166226999,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485821
    },
    {
        "content": "<p>Right, <code>simp</code> works here because it's using a completely different strategy for rewriting</p>",
        "id": 166227056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485852
    },
    {
        "content": "<p>It uses <code>congr</code> lemmas</p>",
        "id": 166227058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485862
    },
    {
        "content": "<p>Actually i'm not sure it does work in this example, I would expect it does nothing</p>",
        "id": 166227092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558485914
    },
    {
        "content": "<p>Well the result is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 166227103,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485933
    },
    {
        "content": "<p>So I guess it worked?</p>",
        "id": 166227159,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558485964
    },
    {
        "content": "<p>Here's a better example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ss</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166227185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558486013
    },
    {
        "content": "<p>now simp's heuristic stuff doesn't apply, and so it does nothing</p>",
        "id": 166227200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558486035
    },
    {
        "content": "<p>Riiight, ok. So probably it was \"working\" before because of doing (something like) <code>cases</code> on the inductive constructor first, so the type-inter-dependencies weren't around anymore?</p>",
        "id": 166227267,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558486115
    },
    {
        "content": "<p>Any completely unrelated I guess, why do I get a <code>heq</code> after the simp application in the previous example?</p>",
        "id": 166227291,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558486176
    },
    {
        "content": "<p>because the lemma it applied is <code>struct.mk A a = struct B b &lt;-&gt; (A = B /\\ a == b)</code></p>",
        "id": 166227385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558486282
    },
    {
        "content": "<p>Thanks so much Mario, as always!</p>",
        "id": 166227465,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558486373
    },
    {
        "content": "<p>Here's an example of <code>simp</code> rewriting under a dependency, where <code>rw</code> would fail:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 166227481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558486390
    },
    {
        "content": "<p>This works because it generates a congr lemma for every constant and when one of the arguments is a subsingleton it is clever and avoids the subgoal. Notice the lack of a <code>a_2 = a_3</code> assumption in the statement of the lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_congr_lemma</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">),</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n<span class=\"c1\">-- ∀ (a a_1 : α), a = a_1 → ∀ (a_2 : bar a) (a_3 : bar a_1), foo a a_2 = foo a_1 a_3</span>\n</pre></div>",
        "id": 166227607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558486568
    },
    {
        "content": "<p>If we look at the congr lemma for my first example, it determines that alpha has proper dependencies so it doesn't allow it to change at all:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">axioms</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_congr_lemma</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">),</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n<span class=\"c1\">-- ∀ (α : Type) (a a_1 : α), a = a_1 → foo α a = foo α a_1</span>\n</pre></div>\n\n\n<p>So that means that simp will not \"see\" into the <code>α</code> argument of <code>foo</code> to apply any rewrites</p>",
        "id": 166227691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558486685
    },
    {
        "content": "<p>Barry Mazur wrote a couple of pages in the Notices of the AMS under the exact same title: <em>“What is a motive?”</em> <a href=\"https://www.ams.org/notices/200410/what-is.pdf\" target=\"_blank\" title=\"https://www.ams.org/notices/200410/what-is.pdf\">https://www.ams.org/notices/200410/what-is.pdf</a></p>",
        "id": 166234056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558496063
    },
    {
        "content": "<p>Maybe Mario should write an update for them.</p>",
        "id": 166237262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558501135
    },
    {
        "content": "<p>motives: mysterious to lean users and mathematicians alike</p>",
        "id": 166238108,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1558502512
    },
    {
        "content": "<p>why do we really do anything?</p>",
        "id": 166238330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558502802
    },
    {
        "content": "<p>now that i think about it, \"sorry, my motive isn't type correct\" is an excellent way to politely decline a request...</p>",
        "id": 166238407,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1558502920
    },
    {
        "content": "<p>I have always regarded this as a failure of <code>rw</code> rather than anything else. As well as <code>simp</code> there is <code>erw</code> which sometimes works when <code>rw</code> doesn't.</p>",
        "id": 166240612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558506113
    },
    {
        "content": "<p>I'm not exactly sure what <code>erw</code> does, but I think it's just the same as <code>rw</code> with some definitional unfolding</p>",
        "id": 166240757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558506336
    },
    {
        "content": "<p>I'm not sure if this is the right thread, but I noticed that generally speaking rewriting seems to work better under binders like Mario mentioned here. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"c1\">-- i want (h: a = b)</span>\n  <span class=\"c1\">-- rw [nat.add_comm] at a, -- h still depends on old (a: α (x+y)) :&lt;</span>\n  <span class=\"c1\">-- have h: a = b := eq_of_heq h, -- fail</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_heq</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- good</span>\n\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there a tactic to do this?</p>",
        "id": 168066701,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560447143
    }
]