[
    {
        "content": "<p>Hi, I am having some rewriting issues. When I try to rewrite an obtained equality without explicitly re-stating the type, the rewriter fails returning <code>rewrite tactic failed, lemma is not an equality nor a iff</code>. However, when I explicitly re-state the type, the rewriter succeeds. Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">archimedean</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">floor_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_eq_lemma</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fract_c_not_zero</span> <span class=\"o\">:</span> <span class=\"n\">fract</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"err\">⌊</span><span class=\"n\">c</span><span class=\"err\">⌋</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">fract</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"err\">⌊</span><span class=\"n\">c</span><span class=\"err\">⌋</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">my_eq</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">my_eq_lemma</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"c1\">-- my_eq : a + (fract c)⁻¹ * (b + ↑⌊c⌋ * a) = (fract c)⁻¹ * (a * c + b)</span>\n<span class=\"n\">rw</span> <span class=\"n\">my_eq</span> <span class=\"c1\">-- rewrite tactic failed, lemma is not an equality nor a iff</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">fract</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"err\">⌊</span><span class=\"n\">c</span><span class=\"err\">⌋</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">my_eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"err\">⌊</span><span class=\"n\">c</span><span class=\"err\">⌋</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">my_eq_lemma</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">my_eq</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I would like to avoid re-stating the type as in my actual use case, the type is even longer. Any ideas? <code>simp only [my_eq]</code> also does not seem to work.</p>",
        "id": 164706079,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556802435
    },
    {
        "content": "<p>Oops, gimme a second, some typos in the example.<br>\nEdit: Fixed it.</p>",
        "id": 164706383,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556802655
    },
    {
        "content": "<p>If I replace the line by <code>have my_eq := my_eq_lemma a b hyp</code> the small example work for me. Does this work in the actual use case?<br>\nI don't know what is going on though.</p>",
        "id": 164706775,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556802968
    },
    {
        "content": "<p>That's a nice one. Using <code>set option pp.all true</code> shows 100% same tactic state in both example</p>",
        "id": 164707127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556803304
    },
    {
        "content": "<blockquote>\n<p>I would like to avoid re-stating the type as in my actual use case, the type is even longer. Any ideas? </p>\n</blockquote>\n<p>You can take short cuts with <code>change</code> / <code>show</code> sometimes -- e.g. <code>show _ = 0</code> works fine if you're just trying to simplify the right hand side to something definitionally equal.</p>",
        "id": 164707303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556803420
    },
    {
        "content": "<p>They are different with the option <code>set_option pp.instantiate_mvars false</code>.</p>\n<p>This gives a clue of what is going on. If you say <code>have my_eq, from my_eq_lemma a b hyp</code> then you are doing two steps: first you add a new fact whose type and definition are metavariables, and then you provide the definition, while with the <code>have my_eq := ...</code> notation this is one step. Somehow the type of <code>my_eq</code> is not updated (enough) when doing two steps. </p>\n<p>Probably the rewrite tactic needs to call <code>instantiate_mvars</code> on the type of the expression it is rewriting with.</p>",
        "id": 164707586,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1556803605
    },
    {
        "content": "<blockquote>\n<p>If I replace the line by <code>have my_eq := my_eq_lemma a b hyp</code> the small example work for me. Does this work in the actual use case?<br>\nI don't know what is going on though.</p>\n</blockquote>\n<p>Ahw, that does work, yeah! :)</p>",
        "id": 164707626,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556803638
    },
    {
        "content": "<p>Interestingly, <code>have my_eq : a + _ = _, from my_eq_lemma a b hyp, </code> works but <code>have my_eq : a_ = _, from my_eq_lemma a b hyp, </code> doesn't work for me. The error being <code>rewrite tactic failed, lemma lhs is a metavariable</code></p>",
        "id": 164707866,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556803818
    },
    {
        "content": "<p>So I think the problem is that <code>rw x</code> is not instantiating the metavariables on <code>x</code> before trying to rewrite with it.</p>",
        "id": 164707938,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556803883
    },
    {
        "content": "<p>ah floris beat me</p>",
        "id": 164708120,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556804031
    },
    {
        "content": "<p>Seems a shame that <code>rw</code> doesn't automatically try to instantiate mvars.</p>",
        "id": 164708356,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556804188
    },
    {
        "content": "<p>I keep on running into this issue btw. Another example: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">rat_num_lt_denom</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q_lt_one</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">one_times_denom_eq_denom</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">one_mul</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">one_times_denom_eq_denom</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite tactic failed, lemma is not an equality nor a iff</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I just use the <code>:=</code> workaround anytime I have this issue at the moment.</p>",
        "id": 164978212,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1557146178
    },
    {
        "content": "<p>you should always use <code>:=</code> for tactic have unless you have a particular reason to do it in two stages</p>",
        "id": 164978361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557146322
    },
    {
        "content": "<p>despite the visual resemblance it's two tactics and that causes some information to not get around</p>",
        "id": 164978389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557146361
    },
    {
        "content": "<p>That said, this is a bug in <code>rw</code></p>",
        "id": 164978402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557146373
    },
    {
        "content": "<p>I should use it because of this bug or is there any other reason?</p>",
        "id": 164978566,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1557146540
    },
    {
        "content": "<p>it has more information available for elaboration in one place, so you (usually) get a more accurate result</p>",
        "id": 164979309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557147246
    },
    {
        "content": "<p>it's also probably slightly faster</p>",
        "id": 164979375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557147303
    }
]