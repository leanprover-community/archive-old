[
    {
        "content": "<p>I had never appreciated the significance of classical logic before trying lean. I am totally stuck on proving <br>\n‘’’<br>\n(P \\to (q\\or r))\\to ((p\\to q)\\or (p\\to r))<br>\n‘’’<br>\nAny hints?</p>",
        "id": 264559762,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1639225311
    },
    {
        "content": "<p>I don't know where the link is, but a really good way to solve these sorts of thing is \"the hole method\", which I think <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> made a post about (sorry for the tag if not!). The idea is kind of just to <code>intro</code> and <code>split</code> as much as possible, and then see what are the only things that can fit.</p>",
        "id": 264559993,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639225589
    },
    {
        "content": "<p>You should use triple #backtics, not a mix of ` and '. And it's probably better to copy the actual code with unicode symbols. Then it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 264560945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639226767
    },
    {
        "content": "<p>I'm not sure that this implication is true without classical logic.</p>",
        "id": 264560993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639226866
    },
    {
        "content": "<p>If you're allowed to use classical logic, then I suggest starting with <code>by_cases p</code>.</p>",
        "id": 264561264,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639227237
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> -- so that the hyperlink works</p>",
        "id": 264561356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639227351
    },
    {
        "content": "<p><code>itauto</code> fails on it, so it seems it does need classical (or I guess if you're trying to be as non-classical as possible <code>decidable p</code>)</p>",
        "id": 264561751,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639227833
    },
    {
        "content": "<p>Since this is driving me crazy, I will ask more explicitly.  I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span>  <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t₈</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hpqr</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n <span class=\"c1\">-- now what?</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>\n<p>At this point I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pqr</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">r</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>and it seems like I should be able to deduce q (since I have <code>p</code>, so I have  <code>q \\or r</code> and <code>\\not r</code> but I can't untangle it.</p>",
        "id": 264569262,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1639238037
    },
    {
        "content": "<p><code>have foo := hpqr hp</code></p>",
        "id": 264569347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639238144
    },
    {
        "content": "<p>But if you're using <code>by_cases</code>, why not use <code>by_cases p</code>?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>theorem t₈  : (p → (q ∨ r)) → ((p → q) ∨ (p → r)) :=<br>\nbegin<br>\n  intro hpqr,<br>\n  by_cases hp : p,<br>\n  { cases hpqr hp,<br>\n    { left, intro, assumption },<br>\n    { right, intro, assumption } },<br>\n  { left, intro, contradiction },<br>\nend</p>\n</div></div>",
        "id": 264569802,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639238552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/More.20homework.20help/near/264559993\">said</a>:</p>\n<blockquote>\n<p>I don't know where the link is, but a really good way to solve these sorts of thing is \"the hole method\", which I think <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> made a post about (sorry for the tag if not!). The idea is kind of just to <code>intro</code> and <code>split</code> as much as possible, and then see what are the only things that can fit.</p>\n</blockquote>\n<p>I don't know if I did any examples that require classical logic, but <a href=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\">here's one post</a> showing off the technique (searching for \"chasing underscores\" might pull up a few others).</p>",
        "id": 264569881,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1639238667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462625\">@Jeremy Teitelbaum</span> constructive logic is totally weird, things like de Morgan's laws aren't all true (some are, some aren't). intro, apply, exact, split etc are all constructive mathematics; by_cases is classical (it's the law of the excluded middle).</p>",
        "id": 264570165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639239034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> you can quote code in spoilers but you have to use 4 backticks IIRC</p>",
        "id": 264570175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639239052
    },
    {
        "content": "<p>If you're happy to use <code>by_cases</code> then you can just solve all of these by doing cases on all the variables; this is the same as drawing a truth table (exactly the proof you're not allowed to do in constructive maths)</p>",
        "id": 264570257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639239129
    }
]