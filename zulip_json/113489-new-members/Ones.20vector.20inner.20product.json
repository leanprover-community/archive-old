[
    {
        "content": "<p>I'm trying to formalize the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥₁</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">∣</span><span class=\"n\">x</span><span class=\"bp\">∣</span><span class=\"o\">⟩</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"mi\">1</span><span class=\"bp\">∥₂</span> <span class=\"bp\">⬝</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥₂</span> <span class=\"bp\">=</span> <span class=\"bp\">√</span><span class=\"n\">n</span><span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥₂</span>\n</code></pre></div>\n<p>where <code>1</code> is the all-ones vector <code>&lt;1, 1, ...&gt;</code> of length <code>|x|</code></p>\n<p>I've tried defining the all-ones vector and the inequality as follows, but I'm not sure that what I've done is doing what I think it's doing... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ones_vector</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">vector.repeat</span> <span class=\"mi\">1</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">one_vector_prod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)]:</span> <span class=\"bp\">⟪</span><span class=\"n\">ones_vector</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">ones_vector</span> <span class=\"n\">n</span><span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span> <span class=\"n\">real_inner_le_norm</span> <span class=\"o\">(</span><span class=\"n\">ones_vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is this sensible, or am I going off the deep-end here?</p>",
        "id": 302585371,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1665034577
    },
    {
        "content": "<p>The all-ones vector would normally be spelt <code>(1 : fin n → ℝ)</code></p>",
        "id": 302586553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665035668
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector\">docs#vector</a> in mathlib is only ever used in  the C++ sense of the word, not the usual mathematical meaning.</p>",
        "id": 302586612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665035728
    },
    {
        "content": "<p>I had no idea you could coerce a number to a function... is there anything in the docs about that?</p>",
        "id": 302587762,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1665036510
    },
    {
        "content": "<p>I think it's the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_one\">docs#pi.has_one</a> instance</p>",
        "id": 302587848,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665036589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Ones.20vector.20inner.20product/near/302586553\">said</a>:</p>\n<blockquote>\n<p>The all-ones vector would normally be spelt <code>(1 : fin n → ℝ)</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Ones.20vector.20inner.20product/near/302586612\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector\">docs#vector</a> in mathlib is only ever used in  the C++ sense of the word, not the usual mathematical meaning.</p>\n</blockquote>\n<p>So, if I'm understanding correctly, I shouldn't really be using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector\">docs#vector</a> in the sense above - I should be doing something more like this (barring the fact that this isn't a working example, since the types on the left of the inequality don't agree):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_vector_prod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span> <span class=\"n\">real_inner_le_norm</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 302589230,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1665037586
    },
    {
        "content": "<p>I suspect you actually want <code>1 : euclidean_space (fin n) ℝ</code></p>",
        "id": 302593785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665040063
    },
    {
        "content": "<p>Since that has the norm structure that you want, as opposed to <code>fin n → ℝ</code> which has the inf-norm</p>",
        "id": 302593974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665040138
    }
]