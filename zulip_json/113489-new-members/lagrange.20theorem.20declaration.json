[
    {
        "content": "<p>I am working on partitioning G into the left cosets of H, and my last hiccup is the equality of any given section of the partition with a left coset of H. I see that the issue is using <code>=</code>, but I'm not sure what I could use in its stead to complete the statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">partition</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">P.C</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">--partition G into left cosets of H</span>\n  <span class=\"c1\">--G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G,</span>\n  <span class=\"c1\">--Then |G| = |g₁H| + |g₂H| + ... + |gₖH|</span>\n  <span class=\"c1\">--         = |H| + |H| + ... |H|</span>\n  <span class=\"c1\">--         = k|H|, k is number of distinct left cosets of H in H</span>\n  <span class=\"c1\">--Thus |H| divides |G| and the goal is fulfilled</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246440617,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626692170
    },
    {
        "content": "<p>I think you have confused <code>:</code> and <code>∈</code> there; this works: <code>lemma lagrange (P : partition G) (h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H ) :</code></p>",
        "id": 246440984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626692476
    },
    {
        "content": "<p>Although your hypothesis isn't needed, and the statement is already in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.card_subgroup_dvd_card\">docs#subgroup.card_subgroup_dvd_card</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- the size of the subgroup H divides the size of the group G -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P.C</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">H.card_subgroup_dvd_card</span>  <span class=\"c1\">-- oops I didn't use `h` or `P` at all</span>\n</code></pre></div>",
        "id": 246441268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626692704
    },
    {
        "content": "<p>Do you need to declare H as fintype if you've done so for G and make H a subgroup of G?</p>",
        "id": 246442656,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626693848
    },
    {
        "content": "<p>Yes, because you want your lemma to say \"this works for any proof that <code>H</code> is finite, not just the one derived by filtering <code>G</code>\"</p>",
        "id": 246446620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626696745
    },
    {
        "content": "<p>For your case it probably doesn't matter, but that's why mathlib has both</p>",
        "id": 246446639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626696770
    },
    {
        "content": "<p>(also, you can't derive it by filtering <code>G</code> unless you have <code>[decidable_pred (∈ H)]</code>)</p>",
        "id": 246446675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626696805
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import group_theory.coset\nimport data.set.basic\nimport group_theory.order_of_element\nimport data.fintype.basic\nimport week_1.Part_D_relations\n\n\nvariables {G : Type} [fintype G] [group G]\nvariables (H : subgroup G) [fintype H]\n\nopen function\n\nlemma coset_sizes_long : ∀ (g : G), fintype.card (left_coset g H) = fintype.card H :=\nbegin\n  intro g,\n  let f := (λ H, left_coset g H),\n  --I take issue with only needing to show injection to prove bijection\n  --I'm not convinced the function should be from set G to set G\n  --or at least cannot be implied that easily\n  --the proof from FPM we proved both injection and surjection\n  --we need map H → gH\n  have h₂ : injective f,\n  {refine set.image_injective.mpr _,\n  dsimp,\n  exact mul_right_injective g,\n  },\n  have h₃ : bijective f,\n  exact fintype.injective_iff_bijective.mp h₂,\n  have h₄ : H ≃ left_coset g H,\n  {sorry,},\n  exact fintype.card_congr (equiv.symm h₄),\nend\n</code></pre></div>\n<p>Yeah just in a spot of pain. I see that I can pretty much jump to the end using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coset_sizes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≃</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">subgroup.left_coset_equiv_subgroup</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.card_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.symm</span> <span class=\"n\">h₄</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but that just skips the whole part where I learn.<br>\nI see why Lean thinks it only needs to be injective, as then since we're going from set G to set G and G is finite, the function is bijective, but then I must've defined something incorrectly because I'm fairly sure you need to prove both injection and surjection.</p>",
        "id": 246457500,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626702893
    },
    {
        "content": "<p>(The first code snippet is highlighted badly because you forgot the line break between <code> ``` </code> and <code>import tactic</code>)</p>",
        "id": 246462022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626705045
    },
    {
        "content": "<p>right, cheers for highlighting that</p>",
        "id": 246462151,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626705114
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/injective_iff_surjective/src\">src#injective_iff_surjective</a> is the core of the thing you take issue with</p>",
        "id": 246462347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626705204
    },
    {
        "content": "<p>Sorry if this is a bit long but I'm checking if we've accidentally done something like used a fact to prove a fact. In proving Lagrange's Theorem we didn't end up making a partition but we did use the injective function and showed the cosets are disjoint. Would love to know if this is a solid proof, no worries if it's a bit too long/tedious to check.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.sigma.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coset_sizes_mathlib</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)]:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≃</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">subgroup.left_coset_equiv_subgroup</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.card_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.symm</span> <span class=\"n\">h₄</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_refl_type</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):=</span> <span class=\"c1\">-- Def 1 --</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_symm_type</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):=</span> <span class=\"c1\">-- Def 2 --</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_trans_type</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):=</span> <span class=\"c1\">-- Def 3 --</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_equiv_type</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):=</span> <span class=\"c1\">-- Def 4--</span>\n<span class=\"n\">is_refl_type</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">is_symm_type</span> <span class=\"n\">S</span>\n<span class=\"bp\">∧</span> <span class=\"n\">is_trans_type</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv_class_type</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">):=</span> <span class=\"c1\">-- Def 5 --</span>\n<span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">left_coset_rel</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">left_coset</span> <span class=\"n\">a</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">b</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">left_coset_rel_is_refl</span><span class=\"o\">:</span><span class=\"n\">is_refl_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_refl_type</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset_rel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">left_coset_rel_is_symm</span><span class=\"o\">:</span><span class=\"n\">is_symm_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_symm_type</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset_rel</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">left_coset_rel_is_trans</span><span class=\"o\">:</span><span class=\"n\">is_trans_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_trans_type</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset_rel</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">left_coset_rel_is_equiv</span><span class=\"o\">:</span><span class=\"n\">is_equiv_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">left_coset_rel_is_refl</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">left_coset_rel_is_symm</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">left_coset_rel_is_trans</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">in_coset</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">):</span><span class=\"n\">x</span><span class=\"bp\">∈</span> <span class=\"n\">left_coset</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_mem</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv_class_is_coset</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">):</span>\n<span class=\"n\">equiv_class_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">left_coset</span> <span class=\"n\">a</span> <span class=\"n\">H</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">equiv_class_type</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset_rel</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">in_coset</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">equiv_class_type</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">left_coset_rel</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">temp</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">):=</span><span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_mem</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">left_coset</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">g_inv</span><span class=\"o\">:=(</span><span class=\"n\">inv_mem</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">g_inv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">temp</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">):=</span><span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_mem</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">g_inv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">in_equiv_class</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_equiv_type</span> <span class=\"n\">S</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">):</span>\n<span class=\"n\">a</span><span class=\"bp\">∈</span> <span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">:=</span> <span class=\"c1\">-- Lemma 7 --</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv_iff_same_class</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_equiv_type</span> <span class=\"n\">S</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">):</span>\n<span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">b</span>\n<span class=\"o\">:=</span>  <span class=\"c1\">-- Lemma 9 --</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">rfl</span><span class=\"o\">:=</span><span class=\"n\">h.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sym</span><span class=\"o\">:=</span><span class=\"n\">h.2.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">tran</span><span class=\"o\">:=</span><span class=\"n\">h.2.2</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> → -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c1\">--cases h with rfl st,</span>\n  <span class=\"c1\">--cases st with sym tran,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.subset.antisymm_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> → ⊆-/</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tran</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> → ⊇ -/</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"n\">sym</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tran</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">g</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> ← -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">u</span><span class=\"o\">:=</span><span class=\"n\">in_equiv_class</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv_iff_class_intersect</span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_equiv_type</span> <span class=\"n\">S</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">):</span>\n<span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n<span class=\"o\">:=</span> <span class=\"c1\">--Lemma 10 --</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">rfl</span><span class=\"o\">:=</span><span class=\"n\">h.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sym</span><span class=\"o\">:=</span><span class=\"n\">h.2.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">tran</span><span class=\"o\">:=</span><span class=\"n\">h.2.2</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> → -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_inter_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"n\">in_equiv_class</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> ← -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">fx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.mem_inter_eq</span> <span class=\"n\">at</span> <span class=\"n\">fx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fx</span> <span class=\"k\">with</span> <span class=\"n\">fxp</span> <span class=\"n\">fxq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"n\">sym</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">fxp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tran</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"n\">fxq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">same_class_iff_intersect</span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">is_equiv_type</span> <span class=\"n\">S</span><span class=\"o\">)(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"c1\">-- Lemma 11 --</span>\n<span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span>\n<span class=\"o\">(</span><span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">∩</span> <span class=\"n\">equiv_class_type</span> <span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">p</span><span class=\"o\">:=</span><span class=\"n\">equiv_iff_same_class</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span><span class=\"o\">:=</span><span class=\"n\">equiv_iff_class_intersect</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv.set.sigma_of_disjoint</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↥⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_Union.mp</span> <span class=\"n\">u.prop</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h.some</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">h.some_spec</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s.2</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">s.2.prop</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">sigma.subtype_ext</span> <span class=\"o\">(</span><span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">hfst</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set.not_disjoint_iff.mpr</span> <span class=\"o\">⟨(</span><span class=\"n\">s.snd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">h.some_spec</span><span class=\"o\">,</span> <span class=\"n\">s.snd.prop</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">h.some</span> <span class=\"n\">s.fst</span> <span class=\"n\">hfst</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange_long_sum_attempt_3</span>\n<span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"c1\">-- (P : partition G)</span>\n<span class=\"c1\">-- (h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H)</span>\n<span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)}</span>\n<span class=\"o\">{</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)]:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--partition G into left cosets of H `done`</span>\n\n  <span class=\"c1\">--G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G `done?`</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.of_equiv_card</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\">have h₁ : coe_sort set.univ = coe_sort (⋃(i : fin k), left_coset (γ i) H),</span>\n<span class=\"cm\">  exact congr_arg coe_sort h₃.symm,</span>\n<span class=\"cm\">  simp_rw h₁,-/</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h_left_coset</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"o\">,</span><span class=\"n\">i</span><span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">):=</span><span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">disjoint</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g_i</span> <span class=\"n\">g_j</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ne</span><span class=\"o\">:</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">--by h2</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">injective</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">by_contradiction</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span> <span class=\"n\">ne</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">equiv_class_is_coset</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">equiv_class_is_coset</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">intersect</span><span class=\"o\">:((</span><span class=\"n\">equiv_class_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">∩</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv_class_type</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">:=</span><span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.nonempty_def</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">g_i</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">g_j</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">same_class_iff_intersect</span> <span class=\"o\">(</span><span class=\"n\">left_coset_rel_is_equiv</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">intersect</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">equiv.set.sigma_of_disjoint</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">h_left_coset</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">temp</span><span class=\"o\">:(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">set.univ</span><span class=\"o\">:=</span><span class=\"n\">equiv.cast</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fintype.card_sigma</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h₇</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">coset_sizes_mathlib</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248714796,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1628340419
    },
    {
        "content": "<p>In a previous thread I showed you that <code>equiv.set.sigma_of_disjoint</code> already existed so there is no need to define it yourself</p>",
        "id": 248716824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628343413
    },
    {
        "content": "<p>Your <code>have ne :</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.ne\">docs#function.injective.ne</a>, <code>h₂.ne f</code></p>",
        "id": 248716999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628343650
    },
    {
        "content": "<p>Perfect I'll make those adjustments. Thank you for your input throughout!</p>",
        "id": 248762915,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1628417072
    },
    {
        "content": "<p>Are you aware your <code>is_equiv_type</code> exists already as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equivalence\">docs#equivalence</a>? It's not clear to me to what extent you are trying to prove things from scratch for pedagogical reasons (as your final result is obviously in mathlib already), and to what extent you are trying to learn about and leverage other parts of mathlib.</p>",
        "id": 248763230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628417603
    },
    {
        "content": "<p>is_equiv_type is part of a parallel project that a group member is working on to define equivalence relations from the ground up. I originally used equivalence, but we wanted to prove that the left cosets formed a partition and he was more comfortable working in the foundation he laid. I would normally have used <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equivalence\">docs#equivalence</a> otherwise.</p>",
        "id": 248763303,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1628417729
    },
    {
        "content": "<p>I see your point though, it's not quite consistent when I use something that already exists.</p>",
        "id": 248763347,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1628417770
    },
    {
        "content": "<p>We ended up not using the partition as well, which is unfortunate.</p>",
        "id": 248763350,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1628417789
    }
]