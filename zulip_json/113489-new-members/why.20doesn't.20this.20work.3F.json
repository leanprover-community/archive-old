[
    {
        "content": "<p>Can someone please help explain why the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sum_plus_one1</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">m</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum_range_succ&#39;</span> <span class=\"n\">F</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>doesn't work, and gives an error that says:</p>\n<p>invalid type ascription, term has type<br>\n  sum (range (nat.succ m)) F = sum (range m) (F ∘ nat.succ) + F 0<br>\nbut is expected to have type<br>\n  sum (range (nat.succ m)) F = sum (range m) F + F m</p>\n<p>WTF?!?! Where did that \"F ∘ nat.succ\" come from??? The lemma is verbatim what the tactic is asking for...? Thank you!</p>",
        "id": 194932398,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1587563160
    },
    {
        "content": "<p>Well, looking at the error message, it seems that <code>sum_range_succ'</code> splits off the first element of the sum, not the last.</p>",
        "id": 194932596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587563229
    },
    {
        "content": "<p>I don't follow? I literally copied and pasted what it said was \"is expected to have type\" into the lemma statement?</p>",
        "id": 194932833,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1587563312
    },
    {
        "content": "<p>You're reading the error message backwards, then.</p>",
        "id": 194932888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587563334
    },
    {
        "content": "<p>Argh!!! You're right. Thanks.</p>",
        "id": 194932982,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1587563375
    },
    {
        "content": "<p>Meant to use sum_range_succ instead</p>",
        "id": 194933015,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1587563390
    },
    {
        "content": "<p>GHC has a similar error message and it seems to confuse a lot of people there, too, though I never understood how. I guess it is like one of those optical illusions, where once you see it one way it is tricky to see it the other way.</p>",
        "id": 194933036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587563400
    },
    {
        "content": "<p>I think they may have reworded this error message in GHC recently, actually.</p>",
        "id": 194933208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587563466
    },
    {
        "content": "<p>I think it's the phrase \"expected\" type that trips people up</p>",
        "id": 194933444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587563552
    }
]