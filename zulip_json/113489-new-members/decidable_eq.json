[
    {
        "content": "<p>Is there an easy way around this kind of <code>decidable_eq</code> issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h.bUnion</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"n\">i.antidiagonal.support</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Basically I want to prove that a certain set of indices is finite, and to do so I want to refine the goal to say that the elements of my set appear as the first (or second, doesn't really matter) member of a pair appearing in the union of the (finite) antidiagonals taken over the elements of some auxiliary finite set of indices.</p>",
        "id": 226824854,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613661232
    },
    {
        "content": "<p>Start your proof with <code>classical, </code></p>",
        "id": 226827267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613662139
    },
    {
        "content": "<p>Or for more precision, <code>haveI : decidable_eq σ := classical.dec_eq _,</code>, which is less likely to cause trouble with conflicting instances</p>",
        "id": 226827382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613662188
    },
    {
        "content": "<p>What does <code>decidable_eq n</code> mean here?<br>\n<code>variables (n : Type) [fintype n] [decidable_eq n]</code></p>",
        "id": 244003330,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624696960
    },
    {
        "content": "<p>Does it mean that the equality relation is decidable on <code>n</code>?</p>",
        "id": 244003445,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624697162
    },
    {
        "content": "<p><code>decidable_eq n</code> is short for <code>Π a b : n, decidable (a = b)</code></p>",
        "id": 244006709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624701854
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_eq/src\">src#decidable_eq</a> shows that</p>",
        "id": 244006717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624701885
    }
]