[
    {
        "content": "<p>I stick at the following point:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The result which had been generated using the tactics above is the following one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">s</span>\n<span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>I don't see any way to prove p x. Maybe it had been the completely wrong path I chose? Maybe there are any further tactics which could help to prove the goal?</p>",
        "id": 209379531,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599568578
    },
    {
        "content": "<p>The theorem requires classical logic. If you choose either <code>left</code> or <code>right</code> on line 3 the goal becomes unprovable</p>",
        "id": 209380209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599568969
    },
    {
        "content": "<p>try case analysis on <code>s</code></p>",
        "id": 209380286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599569018
    },
    {
        "content": "<p>Fortunately it isn't false - proof in <a href=\"https://gist.github.com/Ruben-VandeVelde/89dd1e210dd3ff14056062eb35da86ec\">https://gist.github.com/Ruben-VandeVelde/89dd1e210dd3ff14056062eb35da86ec</a> if you don't figure it out :)</p>",
        "id": 209380387,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599569068
    },
    {
        "content": "<p>@ Mario Carneiro<br>\nUnfortunately I didn't find a hint in chapter 3.5. about classical logic which I could apply to solve this problem. There was an example I proved using the push_neg and by_cases-tactics among others which worked without any problems. And I don't know which additional possibilities I achieve using classical logic.</p>",
        "id": 209380663,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599569277
    },
    {
        "content": "<p>The basic hint on using classical logic is to use it once you run out of obvious steps and you aren't done yet</p>",
        "id": 209380821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599569370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span><br>\nThank you for this link. I will study carefully. As far as I see now is that I should have used the by_cases-tqactic to get a further assumption.</p>",
        "id": 209380998,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599569492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329867\">@Claus-Peter Becke</span> I think that before you start on a Lean proof of this, you should make sure you have a clear understanding of a paper proof. You can't just blindly go forward with steps like <code>left</code>, you need to know what proof you are formalising.</p>",
        "id": 209397678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599576867
    },
    {
        "content": "<p>To choose 'left' wasn't done blindly, I suppose. It was a necessary step<br>\nin my opinion because I had to remove the quantifier from the hypothesis<br>\nafter having introduced x as an arbitrary object. On the other hand I'm<br>\nvery thankful for this advice and I will keep in my mind and apply it in<br>\nfurther attempts. But please have in mind that I'm a very beginner in<br>\nLeanprover and also in mathematics although I tried a few times to<br>\nbecome familiar with mathematical proof-techniques. Unfortunately I<br>\nalmost failed. Because I'm as interested in mathematical issues as I am<br>\nI try it yet and hope to be more successful than in the past. Leanprover<br>\nis a fantastic tool. It's the first time for me to experience the<br>\npleasure of writing mathematical proofs after having been introduced<br>\nwith Daniel Velleman's Proof Designer. Parallel I'm studying his book<br>\n\"How to prove it\" to get a better idea of what it is to think<br>\nmathematically.<br>\nClaus-Peter</p>",
        "id": 209474374,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599631150
    }
]