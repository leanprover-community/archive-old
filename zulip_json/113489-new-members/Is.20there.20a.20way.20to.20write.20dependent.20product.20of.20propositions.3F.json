[
    {
        "content": "<p>Something like <br>\n<code>def square_root (a : ℝ) (ha : 0 ≤ a) : Σ (b : ℝ), (0 ≤ b) ∧ (b ^ 2 = a)</code></p>\n<p>(I tried, won't allow me, seems like it only allows Σ over Types)</p>",
        "id": 183428644,
        "sender_full_name": "YH",
        "timestamp": 1576307883
    },
    {
        "content": "<p>What's the error you get?</p>",
        "id": 183428717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576308083
    },
    {
        "content": "<p>Do you want something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">square_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 183428763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576308127
    },
    {
        "content": "<p><code>subtype</code> (as pointed out by <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>) and <code>Σ'</code> should do it</p>",
        "id": 183429416,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576309346
    },
    {
        "content": "<p>This <code>{ ... // ...}</code> notation is for subtypes, which is one of the two ways Lean thinks about what mathematicians call subsets of a set. The difference between the term <code>{x : real | x ^ 2 = 2}</code> and the subtype <code>{x : real // x ^ 2 = 2}</code> is that one is a term and the other is a type, but they both express the idea of the collection of reals whose square is 2. To make a term of the subtype you need to provide a pair -- a real number, and a proof that its square is 2.</p>",
        "id": 183429491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576309544
    }
]