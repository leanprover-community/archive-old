[
    {
        "content": "<p>Hi! I'm new to the Zulip and am trying to learn metaprogramming in Lean 4. I was trying to write a tactic for practice that just adds a hypothesis to the local context. I can't seem to find out how to do this—I'm mostly learning from the already implemented mathlib4 tactics. I'd like to have something like Lean 3's <code>tactic.assert</code>. How can I add something simple to the context like that?</p>",
        "id": 272155127,
        "sender_full_name": "Ian Benway",
        "timestamp": 1645034903
    },
    {
        "content": "<p>Would <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Lean.Meta.assertHypotheses\">docs4#Lean.Meta.assertHypotheses</a> be what you are looking for? Or something from that file in general?</p>",
        "id": 272160954,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645037562
    },
    {
        "content": "<p>Yes! I don't know how I totally missed that file, thank you.<br>\nSo my understanding is <code>assert</code> takes in an <code>MVarId</code>, <code>Name</code>, <code>Expr</code>, <code>Expr</code> where I'm needing the type as the first expression and the value as the second expression, it seems. If all I have is <code>i : ident</code> and <code>t : term</code>, in Lean 3, I believe I could do something similar to <code>tactic.assert 'i 't</code>. <br>\nHow can I get the MVarId from <code>i</code> and the <code>Expr</code>s from <code>t</code>?</p>",
        "id": 272171402,
        "sender_full_name": "Ian Benway",
        "timestamp": 1645042047
    },
    {
        "content": "<p><code>MVarId</code> is just a wrapper around a name <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Lean.MVarId\">docs4#Lean.MVarId</a> so that's trivial to create.  I'm not 100 percent sure what a term in lean 3 is in 4, I've not seen this term around here yet. Once you have an expression you can however gets its type by using the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/Lean.Meta.inferType\">docs4#Lean.Meta.inferType</a> function</p>",
        "id": 272173188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645042956
    },
    {
        "content": "<p>Here's a bird's-eye view of what you need to define your tactic:</p>\n<ul>\n<li>A <code>syntax (name := yourTactic) ... : tactic</code> declaration that  defines the syntax of your tactic.</li>\n<li>An elaborator for this syntax:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[tactic yourTactic]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabYourTactic</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>   <span class=\"c1\">-- Tactic = Syntax -&gt; TacticM Unit</span>\n</code></pre></div>\n<p>In this elaborator, you can use <code>elabTerm</code> or a variation to turn a <code>Syntax</code> into an <code>Expr</code>.</p>\n<ul>\n<li>In <code>elabYourTactic</code>, use <code>liftMetaTactic</code> or a variation to plug in <code>Meta.assertHypotheses</code>.</li>\n</ul>\n<p>Background for the last step: a 'MetaM tactic' is a def of type <code>MVarId -&gt; MetaM (List MVarId)</code>. The input <code>MVarId</code> is the initial goal (goals are represented as metavariables); the output represents the goals generated by the tactic. <code>liftMetaTactic</code> applies the MetaM tactic to the first goal in the current goal list.</p>\n<p>Hope this helps a bit! The Lean 4 metaprogramming API is a bit daunting coming from Lean 3.</p>",
        "id": 272245494,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645097104
    },
    {
        "content": "<p>Thank you, Jannis. This was incredibly helpful! I agree with you totally, Lean 4 metaprogramming is super daunting.<br>\nI'm still having a bit of trouble though. I'm trying to make my own sort of <code>let</code> tactic, just to get the hang of things. I think I want to make <code>tme</code> below from a <code>TacticM Expr</code> to an <code>Expr</code>. Is that the way to go here, and what do I need to do that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myLet</span><span class=\"o\">)</span> <span class=\"s2\">\"set \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic myLet]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabMyLet</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">tp</span> <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">tme</span> <span class=\"o\">:=</span> <span class=\"n\">elabTerm</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">tp</span><span class=\"o\">))</span> <span class=\"c1\">--TacticM Expr</span>\n  <span class=\"k\">let</span> <span class=\"n\">tpe</span> <span class=\"o\">:=</span>  <span class=\"n\">inferType</span> <span class=\"n\">tme</span>     <span class=\"c1\">--Error: tme needs to be of type Expr</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Meta.assert</span> <span class=\"n\">x</span> <span class=\"n\">nm</span> <span class=\"n\">tme</span> <span class=\"n\">tpe</span><span class=\"o\">)</span>  <span class=\"c1\">--Error: tme needs to be of type Expr</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">tm</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tdsf</span> <span class=\"o\">:=</span> <span class=\"n\">elabMyLet</span> <span class=\"n\">i</span> <span class=\"n\">tp</span> <span class=\"n\">tm</span>\n</code></pre></div>",
        "id": 272606880,
        "sender_full_name": "Ian Benway",
        "timestamp": 1645379987
    }
]