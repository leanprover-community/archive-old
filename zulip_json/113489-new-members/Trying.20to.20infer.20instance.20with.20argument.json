[
    {
        "content": "<p>As part of <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Definition.20of.20presheaf.20of.20modules\">#maths &gt; Definition of presheaf of modules</a> , I'm trying to use that the category of sheaves of types is monoidal. I'd like to get lean to synthesize the instance using <code>monoidal_of_has_finite_products</code>. However, I seem unable to avoid the following issue: the instance for <code>(Sheaf J D)</code> having finite limits assumes that <code>D</code> has finite limits, see <a href=\"https://github.com/leanprover-community/mathlib/blob/c26a844f5a62df14e49fb9999a0f33e0c7da5c5f/src/category_theory/sites/limits.lean#L161\">here</a>. </p>\n<p>I can't seem to get lean to figure out how to infer this, even if I use the <code>have</code> tactic to move the instance to the context. However, if I assume that sheaves have limits, Lean can do the rest. <br>\nDoes someone know the correct way to do this?</p>\n<p>The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.sites.sheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.monoidal.Mon_</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.sites.limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.has_limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.Sheaf.category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">type_has_limits</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sheaves_have_limits</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">type_has_limits</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)))</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))]</span>\n<span class=\"kn\">include</span> <span class=\"n\">hw</span>\n<span class=\"k\">#check</span> <span class=\"n\">monoidal_of_has_finite_products</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 290283666,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658344134
    },
    {
        "content": "<p>There is almost certainly some universe issue here</p>",
        "id": 290284605,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658344554
    },
    {
        "content": "<p>I'm not sure why the universes in <code>category_theory.sites.limits</code> are set up in such a complicated way; maybe <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> knows?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 290284799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658344651
    },
    {
        "content": "<p>For colimits, of course we will need some specific assumptions--maybe that's the reason?</p>",
        "id": 290284827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658344665
    },
    {
        "content": "<p>There was a universe restriction (which may have been resolved? I don't know) in limits/colimits of functors, and this the choice for sheaves was made so that we could use limits and colimits of functors.</p>",
        "id": 290285080,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658344771
    },
    {
        "content": "<p>Sheaves themselves seem to have fully general universes</p>",
        "id": 290285292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658344852
    },
    {
        "content": "<p>That's right, the category of sheaves is completely universe polymorphic</p>",
        "id": 290285386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658344896
    },
    {
        "content": "<p>The heart of the issue is the universe level of morphisms of (pre)sheaves, which involves the universe level of <code>C</code>, the universe level of the morphisms of <code>C</code> and the universe level of the morphisms of the target of the presheaves</p>",
        "id": 290285539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658344955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297832\">@Jack J Garzella</span> This specialization of universes will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">monoidal_of_has_finite_products</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 290285571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658344971
    },
    {
        "content": "<p>The easiest case is when your <code>C</code> is a small category, then you just have to match the universe level of the morphisms of your target category with the universe level of <code>C</code>.</p>",
        "id": 290285797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658345064
    },
    {
        "content": "<p>These universe gymnastics were done so that we could talk about sheaves on <code>Profinite.{u}</code>, which is a large category</p>",
        "id": 290285843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658345085
    },
    {
        "content": "<p>We could try to generalize the universe parameters for limits, but for colimits you need to sheafify, and that gets more complicated.</p>",
        "id": 290286257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658345259
    },
    {
        "content": "<p>Oh right I see now, <code>Sheaf J W</code> has whatever limits <code>W</code> has, but its morphisms might live somewhere bigger</p>",
        "id": 290286405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658345314
    },
    {
        "content": "<p>It seems that the universe parameters for (co)limits of functors have been generalized, so something can probably be done for sheaves as well (assuming someone has enough energy)</p>",
        "id": 290286493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658345363
    },
    {
        "content": "<p>In particular, <code>Sheaf J W</code> could inherit <code>has_finite_limits</code> from <code>W</code> without any universe assumptions</p>",
        "id": 290286720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658345450
    },
    {
        "content": "<p>There was a very recent change where all finite (co)limits have their diagrams in <code>Type 0</code>.</p>",
        "id": 290286960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658345539
    },
    {
        "content": "<p>So, if I change the <code>{C : Type (max v u)}</code> in <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's code to <code>{C : (max u v)}</code>, the code no longer works (whether or not the <code>u</code> and <code>v</code> are swapped in the last line does not affect this). Is there any reason why it should work this way?</p>",
        "id": 290290715,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1658347292
    },
    {
        "content": "<p>Sort of. Lean has to infer what universe levels to instantiate the <code>has_limits</code> instance at and apparently it starts out by unifying the universe of <code>C</code>, so <code>max ?v ?u = max v u</code> is solved by setting <code>?v = v</code>, <code>?u = u</code>. One could imagine other strategies that would do better here.</p>",
        "id": 290291005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658347419
    },
    {
        "content": "<p>This is why putting a universe expression in the type of an argument that is more complicated than a single variable can be quite annoying at the use site</p>",
        "id": 290291154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658347474
    }
]