[
    {
        "content": "<p>Any preference for which one is <code>left</code> and which one is <code>right</code>?</p>\n<p>Also, should the ambidextrous property be the conjunction of the other two or does it not matter?</p>\n<p>I.e., should it be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_regular</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_left_regular</span> <span class=\"n\">c</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">is_right_regular</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 226660901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613571075
    },
    {
        "content": "<p>We could also use structures, then you can name the fields</p>",
        "id": 226661385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613571283
    },
    {
        "content": "<p>I might even define them as <code>is_lregular</code> and <code>is_rregular</code> or this is too much?</p>",
        "id": 226661431,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613571305
    },
    {
        "content": "<p>I guess we can define this for arbitrary <code>has_mul</code>s?</p>",
        "id": 226661564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613571365
    },
    {
        "content": "<p>I guess so: the definition only uses multiplication!</p>",
        "id": 226661872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613571498
    },
    {
        "content": "<p>I updated the definition above to only require <code>has_mul</code>.   I will now think about what it means that we can use classes!</p>\n<p>With classes now.</p>",
        "id": 226662221,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613571643
    },
    {
        "content": "<p>Hmm, it's better to use <code>structure</code> instead of <code>class</code>. Because you don't want to use typeclass inference, presumably.</p>",
        "id": 226663992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613572410
    },
    {
        "content": "<p>And you can use dot-notation <code>is_regular.is_left_regular</code> if you name the lemmas appropriately</p>",
        "id": 226664046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613572441
    },
    {
        "content": "<p><code>structure</code> instead of <code>class</code> and dot-notation (if I understood correctly)!</p>",
        "id": 226664640,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613572697
    },
    {
        "content": "<p>Does this mean that if I then assume <code>{a : R} (ra : is_regular a)</code> I can access the two properties by <code>cases ra</code>?</p>",
        "id": 226664900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613572811
    },
    {
        "content": "<p><code>ra.mul_left_inj</code></p>",
        "id": 226664962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613572841
    },
    {
        "content": "<p>Maybe splitting into <code>left</code> and <code>right</code> should wait until we see a need for it.</p>",
        "id": 226665024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613572869
    },
    {
        "content": "<p>Are you suggesting to remove the two or to leave them in, but not use them very much?  It does seem like a good way of halving the length of the first few lemmas (at the price of doubling the number of lemmas, of course!).</p>",
        "id": 226665222,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613572962
    },
    {
        "content": "<p>I think what we need now is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_unit.is_regular</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_regular_of_cancel_semigroup</span> <span class=\"o\">[</span><span class=\"n\">cancel_semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"c1\">-- find correct typeclass name</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_regular_of_integral_domain</span>\n</code></pre></div>",
        "id": 226665253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613572975
    },
    {
        "content": "<p>And also the version with <code>with_zero</code> assuming non-zero!</p>",
        "id": 226665316,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613573014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/is_regular/near/226665222\">said</a>:</p>\n<blockquote>\n<p>Are you suggesting to remove the two or to leave them in, but not use them very much?  It does seem like a good way of halving the length of the first few lemmas (at the price of doubling the number of lemmas, of course!).</p>\n</blockquote>\n<p>I don't really know. I guess it doesn't matter too much which aproach we take</p>",
        "id": 226665325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613573017
    },
    {
        "content": "<p>You put the zero in, to immediately exclude it...</p>",
        "id": 226665347,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613573028
    },
    {
        "content": "<p>But this is definitely a case that I care about: non-zero elements being regular is definitely a case that I want to be able to talk about easily!</p>",
        "id": 226665479,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613573078
    },
    {
        "content": "<p>The nice thing about this definition is that it automatically excludes <code>0</code>.</p>",
        "id": 226665873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613573263
    },
    {
        "content": "<p>Of course, if it is just an <code>and</code>, then <code>is_regular.left</code> and <code>is_regular.right</code> still works!</p>",
        "id": 226665884,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613573265
    },
    {
        "content": "<p>Ooh, that's a sort of sweet hack (-;</p>",
        "id": 226665962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613573285
    },
    {
        "content": "<p>Aaaahh!!  Yakov, I really like this observation!!</p>\n<p>We should definitely keep the two then!</p>",
        "id": 226666340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613573437
    },
    {
        "content": "<p>I added a proof that a unit is a regular element.  <del>(Not the bundled version, though.)</del></p>",
        "id": 226667184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613573743
    },
    {
        "content": "<p>I might PR what is above: does this seem like a good idea?</p>",
        "id": 226668820,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613574313
    },
    {
        "content": "<p>Right now we have the following problem:</p>",
        "id": 226668870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613574334
    },
    {
        "content": "<p>People interested in commutative algebra show up, say \"I'm interested in formalising flat modules / projective modules / regular sequences / regular local rings\" and we say \"yeah sure thing beginner, go ahead! By the way, definitions are really hard, you don't actually stand a chance\"</p>",
        "id": 226669030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613574385
    },
    {
        "content": "<p>If we just got some of these <em>definitions</em> into Lean, then when people show up and say \"have you got flat modules?\" we say \"yeah sure! Feel free to prove a theorem about them\" and this is _much_ easier.</p>",
        "id": 226669150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613574436
    },
    {
        "content": "<p>Ok, so you are in favour of PRing this, right?  Ahaha</p>",
        "id": 226669212,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613574464
    },
    {
        "content": "<p>I guess this has to be balanced with the fact that \"every definition should come with a comprehensive API\"</p>",
        "id": 226669384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613574527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you call the lemma <code>is_unit.is_regular</code>, then you can write <code>hu.is_regular</code> if <code>hu : is_unit u</code>.</p>",
        "id": 226669846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613574677
    },
    {
        "content": "<p>Johan, you mean <em>outside</em> the <code>is_regular</code> namespace, right?</p>",
        "id": 226670030,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613574737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> exactly</p>",
        "id": 226670432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613574902
    },
    {
        "content": "<p>the fully qualified name should be <code>is_unit.is_regular</code></p>",
        "id": 226670470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613574915
    },
    {
        "content": "<p>But I made DVRs and made essentially 0 API</p>",
        "id": 226670551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613574955
    },
    {
        "content": "<p>and it just kind of organically grew</p>",
        "id": 226670625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613574966
    },
    {
        "content": "<p>We want API to make sure that we chose usable defn's that allow us to develop the API without too much struggle.</p>",
        "id": 226670777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575034
    },
    {
        "content": "<p>If we are confident that the definitions are right, then the API could come later.</p>",
        "id": 226670823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575050
    },
    {
        "content": "<p>And with \"right\" I don't just mean maths-right. I mean \"right for setting up API afterwards\".</p>",
        "id": 226670875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575071
    },
    {
        "content": "<p>e.g. just PR flat modules anyway, and write in the module doc what needs to be done to make progress</p>",
        "id": 226671010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575111
    },
    {
        "content": "<p>I have students who are looking for simple projects to pass my course</p>",
        "id": 226671053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575128
    },
    {
        "content": "<p>I am just asking them to prove one novel lemma</p>",
        "id": 226671094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575139
    },
    {
        "content": "<p>I think there is still a lot of commutative algebra that can be done without making new definitions.</p>",
        "id": 226671205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575196
    },
    {
        "content": "<p>Ok, for the moment, here is the PR: <a href=\"https://github.com/leanprover-community/mathlib/issues/6282\">#6282</a>.  From now on, I will concentrate on not making new definitions!</p>",
        "id": 226671404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613575269
    },
    {
        "content": "<p>(At the moment, my goal is to prove that \"transcendental over \\Z\" implies \"transcendental over \\Q\" and for this, I was proving that you can \"clear denominators in polynomials\"  and non-zero divisors are useful in this setting)</p>",
        "id": 226671692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613575355
    },
    {
        "content": "<p>Here's another gut feeling: we always say that definitions are hard, but I think we can be more precise.</p>\n<ul>\n<li>defining a new algebraic structure can be easy. There is only one sensible definition of <code>monoid</code>, once mathlib has settled on the semi-bundled typeclass approach</li>\n<li>defining other sorts of new data can be tricky to get right. (E.g. <code>finset</code>, <code>finsupp</code>, <code>polynomial</code>, whatever)</li>\n<li>defining a predicate on <em>terms</em> is not so hard. You typically don't run into DTT traps there.</li>\n<li>defining a predicate over <em>types</em> can be tricky. E.g. <code>flat</code>, because you don't want to quantify over universes.</li>\n</ul>",
        "id": 226671770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> does <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> make sense?</p>",
        "id": 226671832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575397
    },
    {
        "content": "<p>If someone comes along and says \"I want to prove a theorem about flat modules\" we can just then ask them what their maths proof is and find the next lemma which isn't in mathlib</p>",
        "id": 226672167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575503
    },
    {
        "content": "<p>and then maybe they'll end up proving a lemma which mathlib wants</p>",
        "id": 226672359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575568
    },
    {
        "content": "<p>but with definitions we never go anywhere. At least two people have shown up here saying \"I want to do flat modules\" and there was no definition so they could do nothing</p>",
        "id": 226672457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575605
    },
    {
        "content": "<p>random lemmas created on zulip sometimes get PR'ed.</p>",
        "id": 226672500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575622
    },
    {
        "content": "<p>but if we're still bikeshedding about the defiinition nothing will go anywhere.</p>",
        "id": 226672565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575646
    },
    {
        "content": "<p>Johan already figured out what the Lean definition of a flat module was</p>",
        "id": 226672612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575666
    },
    {
        "content": "<p>but it's still not there</p>",
        "id": 226672629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575673
    },
    {
        "content": "<p>we want newcomers to go away saying \"I helped to prove a theorem\", not \"I found out that these people can't even define flat modules witthout a lot of work\"</p>",
        "id": 226672772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575711
    },
    {
        "content": "<p>I completely agree with that last remark!</p>",
        "id": 226673329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613575915
    },
    {
        "content": "<p>so you'll PR flat module definition plus those comments about how we need Z[X] tensor R = R[X] etc?</p>",
        "id": 226673449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575954
    },
    {
        "content": "<p>and then Damiano can PR regular elements?</p>",
        "id": 226673495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613575969
    },
    {
        "content": "<p>Damiano already did that</p>",
        "id": 226673595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613576007
    },
    {
        "content": "<p>nice!</p>",
        "id": 226673618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576017
    },
    {
        "content": "<p>The CS people are edgy about definitions but by now we know what we're doing.</p>",
        "id": 226673760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576062
    },
    {
        "content": "<p>e.g. we know you have the right definition of flat</p>",
        "id": 226673838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576098
    },
    {
        "content": "<p>I made a definition of DVR and remarked that there were 10 other definitions in wikipedia and left it at that. Two months later I came back because I needed equivalence of it with another one, and you had filled in a ton of API because of the Witt vector work.</p>",
        "id": 226674070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576187
    },
    {
        "content": "<p>we still don't know the right definition of chain complex... even though it is in mathlib</p>",
        "id": 226674099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613576199
    },
    {
        "content": "<p>that's a different story though, there we are actively experimenting and we know it</p>",
        "id": 226674160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576222
    },
    {
        "content": "<p>with flat modules the experiment is over</p>",
        "id": 226674176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576231
    },
    {
        "content": "<p>I am still scared of definitions but I will prove theorems in my spare time</p>",
        "id": 226674254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613576260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/6284\">#6284</a></p>",
        "id": 226681545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613578542
    },
    {
        "content": "<p>Btw, in the meantime, I pushed proofs that elements of <code>(left/right_)cancel_monoids</code> and non-zero elements of <code>integral_domains</code> are all regular.</p>",
        "id": 226682977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613579054
    },
    {
        "content": "<p>If I understand correctly, with Eric's definition below, I no longer need to define <code>left</code> and <code>right</code>, ... right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_left_regular</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_right_regular</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">is_regular</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">is_left_regular</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">is_right_regular</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226685480,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613579944
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 226685548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613579970
    },
    {
        "content": "<p>Ok, thank you!  The more I look at this definition, the more I like it!</p>",
        "id": 226685601,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613579995
    },
    {
        "content": "<p>And <code>of_left_right</code> is just <code>\\&lt;&gt;</code> / <code>is_regular.mk</code></p>",
        "id": 226685632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613580004
    },
    {
        "content": "<p>You can then change the types of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_left_injective\">docs#mul_left_injective</a> (which I think already exists) to be the <code>is_left_regular</code> etc</p>",
        "id": 226685796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613580062
    },
    {
        "content": "<p>This raises a question - should <code>is_regular</code> apply to the additive case too?</p>",
        "id": 226685874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613580098
    },
    {
        "content": "<p>I am not sure that I understand the mul_left_injective comment, and I need to go now!</p>\n<p>I will look at it later, likely tomorrow or Friday!</p>",
        "id": 226686115,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613580183
    },
    {
        "content": "<p>Thanks a lot to all!</p>",
        "id": 226686128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613580188
    },
    {
        "content": "<p>It's not really a thing for additive things, there's nothing stopping someone adding a <code>to_additive</code> but then you'll have to think of a name for the additive version and because it doesn't really exist in real life this will just sort of be adding junk.</p>",
        "id": 226686166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613580207
    },
    {
        "content": "<p>It seems that the remaining wrinkle on the PRed part of regular elements is what to do with the lemma below.  There are two proposed versions for it.  Which one should stay?  Should they both go?  Also, any further suggestions (golfing, naming,...) are as always welcome!</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- version 1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_mul_eq_one_mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">ai</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ai</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">ai</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_left_right</span> <span class=\"o\">(</span><span class=\"n\">left_of_mul_eq_one</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_of_mul_eq_one</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- version 2</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unit.is_regular</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">âŸ¨</span><span class=\"n\">left_of_mul_eq_one</span> <span class=\"n\">a.inv_mul</span><span class=\"o\">,</span>  <span class=\"n\">right_of_mul_eq_one</span> <span class=\"n\">a.mul_inv</span><span class=\"o\">âŸ©</span>\n</code></pre></div>",
        "id": 226763852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613622887
    },
    {
        "content": "<p>The snd version can be proved by applying <code>is_regular_of_cancel_monoid</code>, right?</p>",
        "id": 226763882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613622962
    },
    {
        "content": "<p>Maybe it can, but I am failing to do that.  Lean does not like that <code>a : units R</code> since it expects <code>a : R</code>.  I will try to break <code>a : units R</code> apart.</p>",
        "id": 226764086,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613623182
    },
    {
        "content": "<p>I'm confused. <code>units R</code> is a group. And you have a lemma about \"groups\" (or something similar/weaker) a few lines up, right?</p>",
        "id": 226764157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613623258
    },
    {
        "content": "<p>I had forgotten to add the <code>cancel_monoid</code> assumption...  It does work!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An element admitting a left and a right inverse is regular. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unit.is_regular</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cancel_monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_regular_of_cancel_monoid</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 226764234,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613623351
    },
    {
        "content": "<p>So, this means that if we keep one version, it is the other one, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- only contender left</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_mul_eq_one_mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">ai</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ai</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">ai</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_left_right</span> <span class=\"o\">(</span><span class=\"n\">left_of_mul_eq_one</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_of_mul_eq_one</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226764257,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613623418
    },
    {
        "content": "<p>Hmm, but <code>--version 2</code> doesn't need the <code>[cancel_monoid]</code> assumption? In that case <code>--version 2</code> seems useful to keep around.<br>\nNote that it should be <code>units.is_regular</code>, because the type of <code>a</code> is <code>units _</code>.</p>",
        "id": 226764584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613623780
    },
    {
        "content": "<p>Looking back at this, the new version is silly.</p>\n<p>Johan, I am also confused.  If I assume that <code>R</code> is a <code>monoid</code>, then the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An element admitting a left and a right inverse is regular. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unit.is_regular</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_regular_of_cancel_monoid</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">is_regular_of_cancel_monoid</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_regular</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_regular</span> <span class=\"bp\">â†‘</span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 226764600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613623800
    },
    {
        "content": "<p>Aah, it's about the coercion</p>",
        "id": 226764670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613623841
    },
    {
        "content": "<p>Ok, I'm convinced, keeping <code>--version 2</code> around is useful.</p>",
        "id": 226764710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613623882
    },
    {
        "content": "<p>Ok, I will keep this version then!</p>",
        "id": 226764719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613623894
    },
    {
        "content": "<p>I just pushed this version!</p>",
        "id": 226764976,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613624139
    },
    {
        "content": "<p>I created several sections that only contain one lemma: the idea is that more lemmas can come in, so it feels a little overkill at the moment, but it might make more sense if there are more lemmas in each section, right?</p>",
        "id": 226765053,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613624191
    },
    {
        "content": "<p>Eric, Johan, you really helped a lot with this file and I think that you should also be authors of it.  However, I do not want to forcefully add you!  So, let me know if you want to be added as authors (or directly add yourselves), or if you prefer not to!</p>",
        "id": 226770695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613630113
    },
    {
        "content": "<p>I really don't care. You did the actual work.</p>",
        "id": 226772109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613631748
    },
    {
        "content": "<p>Ok, in any case, I guess that git remembers the various contributions anyways.</p>\n<p>On a separate note, I added some saturation properties for <code>left/right_regular</code> elements.  It is a common idiom to say \"products of non-zero divisors are non-zero divisors\" or \"<code>a * b</code> is a non-zero divisor implies <code>a</code> and <code>b</code> are non-zero divisors\".  The asymmetric versions are in.  I am going to add the symmetric ones, though I will assume commutativity of multiplication for this.</p>",
        "id": 226774988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613634580
    },
    {
        "content": "<p>Also the symmetric versions are in.</p>",
        "id": 226779675,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613637777
    }
]