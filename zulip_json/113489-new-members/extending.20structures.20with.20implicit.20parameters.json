[
    {
        "content": "<p>How does one extend a structure that has implicit parameters? Consider</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Lean apparently will not infer the parameter:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span>\n</pre></div>\n\n\n<p>And neither are we able to specify it explicitly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"kn\">extends</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>gives the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"err\">&#39;</span><span class=\"kn\">structure</span><span class=\"err\">&#39;</span><span class=\"o\">,</span> <span class=\"n\">expression</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"err\">&#39;</span><span class=\"n\">parent&#39;</span> <span class=\"kn\">structure</span>\n</pre></div>\n\n\n<p>I found <a href=\"https://leanprover-community.github.io/archive/113488general/26604Whatisaparentstructure.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/archive/113488general/26604Whatisaparentstructure.html\">this</a> but there doesn't seem to be a resolution there</p>",
        "id": 188768199,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582314911
    },
    {
        "content": "<p>so make <code>\\a</code> in <code>foo</code> explicit</p>",
        "id": 188768881,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582315334
    },
    {
        "content": "<p>So is it impossible to have it implicit?</p>",
        "id": 188768912,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582315357
    },
    {
        "content": "<p>How is Lean supposed to guess the implicit argument?</p>",
        "id": 188768985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582315421
    },
    {
        "content": "<p>So is there any way to specify it explicitly?</p>",
        "id": 188769054,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582315445
    },
    {
        "content": "<p>Maybe make the <code>\\a</code> in <code>foo</code> explicit?</p>",
        "id": 188769074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582315459
    },
    {
        "content": "<p>lol</p>",
        "id": 188769093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582315470
    },
    {
        "content": "<p>I don't know of any other way</p>",
        "id": 188769098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582315474
    },
    {
        "content": "<p>As in, can I have it implicit in both foo and bar and specify it explicitly in the extends part, like I'm trying to do with the @foo</p>",
        "id": 188769126,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582315492
    },
    {
        "content": "<p>Right, I don't know how to make that work. You can see in the conversation you linked to that Chris fixed it by making the argument explicit. How can Lean guess the implicit argument? It might be <code>foo nat</code> or something, that would be a valid solution right?</p>",
        "id": 188769205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582315557
    },
    {
        "content": "<p>True, I was hoping there would be a way to at least specify it ourselves -- seems there isn't. Thanks for your help.</p>",
        "id": 188769370,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582315631
    },
    {
        "content": "<p>Aah I see, yeah that makes sense. I don't know how to do it, perhaps some more CS person than me can suggest a fix. Nice question!</p>",
        "id": 188769994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582316044
    },
    {
        "content": "<p>I think it would make sense for the <code>@foo α</code> to work. That should be filed as a bug</p>",
        "id": 188775509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582319901
    },
    {
        "content": "<p>But as Kenny and Kevin say, I can't see any reason for <code>foo</code> as defined to make sense. Lean can never infer that argument so it should not be implicit</p>",
        "id": 188775623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582320001
    },
    {
        "content": "<p>Okay, I just figured out that <code>\\a</code> is always implicit in<code>foo.mk</code>, which was what I was really trying to do. I now realize that Kevin was probably asking how lean could infer <code>\\a</code> in a general context when one uses <code>foo</code> rather than in my snippet, after <code>extends</code>.  It makes sense to me now, thanks!</p>",
        "id": 188779630,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582323057
    },
    {
        "content": "<p>Also, here is one possible example where lean can infer the argument</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">option</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span>\n<span class=\"n\">def</span> <span class=\"n\">has_val</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 188779800,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582323221
    },
    {
        "content": "<p>I notice you put a type ascription on <code>b</code> though</p>",
        "id": 188779933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582323343
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 188779999,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582323386
    },
    {
        "content": "<p>But it also seems to work without it</p>",
        "id": 188780003,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582323391
    },
    {
        "content": "<p>I guess this is an instance of the fact that lean can infer the argument to <code>foo</code> in <code>F</code> in the following pattern:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>In your case, <code>f</code> is <code>foo.rec</code></p>",
        "id": 188780258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582323624
    },
    {
        "content": "<p>Yes, I guess it should work for basically any expression that forces the types to be equal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">F</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>Thanks a lot!</p>",
        "id": 188783964,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1582327003
    },
    {
        "content": "<p>This <code>has_val</code> example also only works because it is a def and the body of a def is taken into account when checking the type.</p>",
        "id": 188793248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582338032
    },
    {
        "content": "<p>(which is not true for a lemma)</p>",
        "id": 188793255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582338053
    },
    {
        "content": "<p>Is there still no solution to this? I need to extend a structure by putting implicit parameters in spots that are filled by type class inference</p>",
        "id": 239985300,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621811885
    },
    {
        "content": "<p>If the type of a parameter is a class then surely it should be in square brackets at all times?</p>\n<p>This is a weird thread, it's people complaining that they can't do things which I can't ever imagine one would need to do. Is this a big <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> issue?</p>",
        "id": 240012878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621839017
    },
    {
        "content": "<p>Can you post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 240012913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621839064
    }
]