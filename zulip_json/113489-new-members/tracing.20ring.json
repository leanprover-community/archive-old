[
    {
        "content": "<p>I'm working my way through <code>tutorial 01_equality_rewriting.lean</code> now. After watching Scott Morrison's \"Infinitely Many Primes\" video on YouTube, I was hoping that it would be simple to get traces for tactics like he shows for <code>back?</code> (which doesn't actually exist). I want to see the individual steps taken by the <code>ring</code> tactic. I tracked the core of <code>ring</code> down to <code>simp_tactic.lean</code> and tried to find trace options from there, but to no avail:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">--- none of these options do what I want</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simp_lemmas</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- 0007</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- I want to trace this!</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I'd like to be able to mouse over <code>ring</code> in VS Code and see the individual replacements done to solve the goal. I'd be okay with adding trace calls into my local copy of the core lean code, but I'm getting lost in it pretty quickly...</p>",
        "id": 200812169,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1592133743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311255\">@Nathan Glenn</span> It's not exactly what you want, but does</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">blabla</span> <span class=\"o\">:=</span> <span class=\"n\">blabla</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span> <span class=\"c1\">-- see the generated proof</span>\n</code></pre></div>\n\n\n<p>help a bit?</p>",
        "id": 200812606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592134473
    },
    {
        "content": "<p>You can always try <code>show_term { X }</code>, where <code>X</code> is some tactic block.</p>",
        "id": 200812630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134549
    },
    {
        "content": "<p>However many tactics, particularly <code>ring</code> will produce a giant non-human-readable mess.</p>",
        "id": 200812653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134562
    },
    {
        "content": "<p>It is just not in the nature of decision procedure tactics to produce human readable accounts of their inner workings. :-)</p>",
        "id": 200812682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134599
    },
    {
        "content": "<p>That said, there are plenty of other tactics that produces unpleasant to read terms, even just <code>rw</code> and <code>simp</code>.</p>",
        "id": 200812686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134618
    },
    {
        "content": "<p><code>ring</code> is not really something that you can \"trace\" in this sense, anyway. It goes off and does a bunch of unverified calculations, and then, knowing what it actually wants to prove, goes and proves that. It doesn't really \"compile down to a list of invocations of simpler tactics\".</p>",
        "id": 200812744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134688
    },
    {
        "content": "<p>I guess <code>rw_search</code> (once it's in mathlib) might give a readable trace in this example.</p>",
        "id": 200812745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592134701
    },
    {
        "content": "<p><code>tidy?</code> does behave like this.</p>",
        "id": 200812748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134705
    },
    {
        "content": "<p>I'm not sure why when I sit down and think \"ooh, what shall I do next?\" I never seem to arrive at \"work on getting <code>rw_search</code> merged\".... :-(</p>",
        "id": 200812769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592134792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311255\">@Nathan Glenn</span> it's pretty clear how to prove anything which <code>ring</code> can do -- change all numerals to 1+1+...+1, expand out all brackets with mul_add and add_mul, do a bunch of applications of commutativity and associativity of + and *, sort out all the minus signs by multiplying them out and moving them to the other side of the equality, and after more commutativity and associativity you're done. It's not a mystery. This is in stark contrast to some of Scott's tactics, which are pooling ideas from a far wider collection of lemmas in the library</p>",
        "id": 200813034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592135266
    },
    {
        "content": "<p>Thanks, <code>#print</code> and <code>show_term</code> both work, although as indicated the output is not super human friendly.<br>\nI was doing exercise 0008, where you are supposed to <em>not</em> use the <code>ring</code> tactic just to see how tedious it was. I got stuck here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- 0008</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_two</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_sub</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">sub_sub</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- rw sub_self (a*b), -- doesn&#39;t match :(</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span><span class=\"c1\">-- shrug!</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Of course, the answer is actually given above, but I couldn't quite follow how to apply the lemmas correctly. So my hope was to run <code>ring</code> and then copy it's strategy :D</p>",
        "id": 200814337,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1592137353
    },
    {
        "content": "<p>The goal at that point is <code>a * a + a * b - a * b - b * b = a * a - b * b</code>; I tried to apply <code>sub_self</code>, which is just <code>a-a=0</code>, but that failed to match. I guess because <code>a*b - a*b</code> is not in a parenthetical group?</p>",
        "id": 200814404,
        "sender_full_name": "Nathan Glenn",
        "timestamp": 1592137479
    },
    {
        "content": "<p>I guess it would be nice to have <code>set_option pp.parens true</code>. (Maybe it even exists?)</p>",
        "id": 200814561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592137773
    }
]