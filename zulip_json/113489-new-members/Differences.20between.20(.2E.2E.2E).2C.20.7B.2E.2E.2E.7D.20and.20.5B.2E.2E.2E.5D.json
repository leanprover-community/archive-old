[
    {
        "content": "<p>Hello,</p>\n<p>I have troubles to understand what is the differences between using (...), {...} and [...]. For instance, the three following possibilities seem to work, but are they the same ? If not, what are the differences and what should I use ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>For instance, in some tutorials, I saw lines like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>that suggest that they must be differences (if not why using three different notations)...</p>\n<p>Thanks for your help!</p>",
        "id": 193815244,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1586808518
    },
    {
        "content": "<p><code>()</code> is explicit argument, and <code>[]</code> and <code>{}</code> are for implicit arguments</p>",
        "id": 193815346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586808579
    },
    {
        "content": "<p>Yup, they are quite different.<br>\nIf you define</p>\n<div class=\"codehilite\"><pre><span></span>def foo (i : nat) {j : nat} [k : nat] : true := sorry\n</pre></div>\n\n\n<p>then <code>@foo</code> will ask you to provide 3 arguments explicitly. But if you simply use <code>foo</code>, then it only expects you to fill in the <code>i</code> argument. Lean will try to figure out the <code>j</code> argument using \"unification\". In practice, this means that it will try to figure out <code>j</code> from arguments that follow it.</p>\n<p>In your example, you can see how this works. <code>{X : Type}</code> can be figured out from the explicit <code>(x : X)</code>. This means that you don't have to pass the <code>X</code> argument explicitly to every group lemma that you use!</p>\n<p>Finally, the <code>k</code> argument to <code>foo</code> will be figured out by \"type class search\". This is usually meant to be used for extra \"structure\" on a type, such as a group structure, or a metric space, or something like that. (In particular, <code>[k : nat]</code> will not really work.)</p>",
        "id": 193815790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586808789
    },
    {
        "content": "<p>If it's still confusing, just use <code>()</code>, until you find that it becomes boring to pass all arguments by hand. Then you can start using the other types... and experiment with those.</p>",
        "id": 193816043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586808928
    },
    {
        "content": "<p>Ok thanks you so much !</p>",
        "id": 193874763,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1586858613
    },
    {
        "content": "<p>PS did you really see <code>[G : group X]</code> and not just <code>[group X]</code>?</p>",
        "id": 193878042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586860615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : if i understand <code> [G  : group X  ] </code> is the same as  <code> [group X] </code> except we have named by  <code> G </code>  the hypothesis ' <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>  is a group ' ,  is it ok ?</p>",
        "id": 193883840,
        "sender_full_name": "orlando",
        "timestamp": 1586864337
    },
    {
        "content": "<p>(But usually one would only give a name <code>G</code> to the typeclass if you're doing something complicated, or doing something wrong! The whole design of typeclass intends that you never have to refer to them directly.)</p>",
        "id": 193889096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586867587
    },
    {
        "content": "<p>The idea is that there should only be one construction of a group structure on X, so why bother giving it a name? You can get it with <code>by apply_instance</code> if you need it, and you probably don't need it because the type class system will deal with it for you</p>",
        "id": 193896007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586870828
    }
]