[
    {
        "content": "<p>4:54 PM</p>\n<p>In Numbers Game, Level 4/4, I can specify a in<br>\nrw add_zero(a),<br>\nbut why do I get an error from<br>\nrw add_succ(a 0),<br>\ndespite the definition<br>\nadd_succ (a d : mynat) : a + succ(d) = succ (a + d) ?</p>",
        "id": 203691543,
        "sender_full_name": "Philip Vetter",
        "timestamp": 1594630663
    },
    {
        "content": "<p>What happens if you write <code>rw add_succ a 0</code> instead of <code>rw add_succ(a 0)</code>?</p>",
        "id": 203691661,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594630732
    },
    {
        "content": "<p>add_succ (a 0) means apply add_succ to the result of applying a to 0</p>",
        "id": 203691861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594630845
    },
    {
        "content": "<p>well a cannot be applied to 0</p>",
        "id": 203691872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594630851
    },
    {
        "content": "<p>I guess the syntax <code>def add_succ (a d : mynat) : a + succ(d) = succ (a + d)</code> can be confusing.</p>",
        "id": 203691903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594630886
    },
    {
        "content": "<p>You should read it as <code>def add_succ (a : mynat) (d : mynat) : etc...</code></p>",
        "id": 203691926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594630908
    },
    {
        "content": "<p>it's not a definition :P</p>",
        "id": 203692039,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594630995
    },
    {
        "content": "<p>What would you call it? A type declaration?</p>",
        "id": 203692545,
        "sender_full_name": "Philip Vetter",
        "timestamp": 1594631357
    },
    {
        "content": "<p>THIS WORKS: rw add_succ a 0</p>",
        "id": 203692591,
        "sender_full_name": "Philip Vetter",
        "timestamp": 1594631402
    },
    {
        "content": "<p>(Note this was Markus' first suggestion above.)</p>",
        "id": 203692632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594631425
    },
    {
        "content": "<p>Hi! I am trying to learn lean right now using the numbers game (insert verbose thanks for creating &amp; providing support for lean :) ):</p>\n<p>I've noticed that there a couple of proofs taking the form <code>a + b = a  + c -&gt; a = b</code> (where <code>+</code> is a stand in for arbitrary operators); Is there any deeper reason why we can't just proof <code>a = b &lt;=&gt; f(a) = f(b)</code> and be done with it?</p>\n<p>As the game explained, lean allows me to treat equivalence <code>a &lt;=&gt; b</code> as a tuple of two functions <code>a -&gt; b</code> and <code>b -&gt; a</code>; I know equality and equivalence are subtly different; but is there any underlying reason why lean won't allow me to treat equality as a tuple of functions, forcing me instead to use <code>rw</code> and <code>rw \\l</code> to transform my expression?</p>\n<p>I've noticed <code>\\circ</code> will let me do function composition. Is there an equivalent to the haskell <code>$</code> operator (reduced binding strength function application) so I can rewrite my expressions <code>exact (foo \\circ bar) baz</code> as <code>exact foo \\circ bar $ baz</code>?</p>",
        "id": 211817313,
        "sender_full_name": "Karolin Varner",
        "timestamp": 1601498490
    },
    {
        "content": "<p><code>a = b ↔ f a = f b</code> is true iff <code>f</code> is injective, and the statements you're proving are that the corresponding function is injective -- in your example, that would be <code>λ x, a + x</code>.</p>",
        "id": 211818321,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601498893
    },
    {
        "content": "<p>Re the last question, yes, and the deferred application is also <code>$</code></p>",
        "id": 211818360,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601498911
    },
    {
        "content": "<p>oO I've tried $ so I guess it's disabled for the numbers game?</p>",
        "id": 211818640,
        "sender_full_name": "Karolin Varner",
        "timestamp": 1601499005
    },
    {
        "content": "<p>I'm afraid you can't use $ in tactic mode :-(</p>",
        "id": 211818736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601499044
    },
    {
        "content": "<p>It's something to do with the parser.</p>",
        "id": 211818764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601499056
    },
    {
        "content": "<p>I think you can use <code>$</code>, but you just have to wrap the whole expression in parentheses, potentially defeating the purpose of using <code>$</code>.</p>",
        "id": 211818991,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601499144
    },
    {
        "content": "<p>Yes wrapping the statement in parentheses works! Still a bit easier to read imo so that's nice…</p>",
        "id": 211825903,
        "sender_full_name": "Karolin Varner",
        "timestamp": 1601499308
    },
    {
        "content": "<p>From what I've seen, it isn't the mathlib style to use <code>\\circ</code>, but rather expand out the full <code>g (f x)</code>. I could be wrong.</p>",
        "id": 211826181,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601499446
    }
]