[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sequence1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">sequence1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 222555110,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610530514
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sequence1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 222555258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610530601
    },
    {
        "content": "<p>One more question: how does Lean know that this recursion is well founded without me having to supply a proof?</p>",
        "id": 222565375,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610536561
    },
    {
        "content": "<p>It runs an automated check in the background. Usually this works, but if it doesn't there is an option to provide a proof manually.</p>",
        "id": 222568624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610538623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a> for more info</p>",
        "id": 222568667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610538664
    },
    {
        "content": "<p>How would you prove that sequence1 n = (some closed form expression)? Through induction right? I tried to rewrite and unfold but the goal then transformed into some Lisp-like gobbledygook and I didn't know how to proceed.</p>",
        "id": 222682404,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610603737
    },
    {
        "content": "<p>Thanks in advance.</p>",
        "id": 222682463,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610603774
    },
    {
        "content": "<p>Also how would you define the 1-indexed variant of sequence1 (sequence1 1 = 6, sequence1 (n + 1) = 5 + sequence1 n and sequence1 0 is not defined)?</p>",
        "id": 222682550,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610603980
    },
    {
        "content": "<p>Should I just supply a garbage value for sequence1 0, let's say 998244353 and call it a day?</p>",
        "id": 222682611,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610604032
    },
    {
        "content": "<p>Have you tried  the natural number game? To do induction you use <code>induction n with k ih</code>, or <code>cases n</code>.</p>",
        "id": 222682675,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1610604120
    },
    {
        "content": "<p>You could use <code>option</code> for differentiating defined and undefined values.</p>",
        "id": 222682714,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610604134
    },
    {
        "content": "<p>You can also use 37.</p>",
        "id": 222682719,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1610604154
    },
    {
        "content": "<p>Or make sure that all crucial lemmas describing your function take a hypothesis that the input is positive.</p>",
        "id": 222682720,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610604162
    },
    {
        "content": "<p>Yeah <code>induction n with d induction_hypothesis</code> is what I use. How do I \"unfold\" the function definition so that I can apply the usual tactics such as rw, ring and resolve the goal?</p>",
        "id": 222682892,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610604379
    },
    {
        "content": "<p>Can you give a MWE of what you're trying to do?</p>",
        "id": 222682970,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1610604493
    },
    {
        "content": "<p>Gimme a sec.</p>",
        "id": 222682981,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610604519
    },
    {
        "content": "<p>I'm not sure how you're expressing the idea of \"closed form expression\" here.</p>",
        "id": 222683012,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610604599
    },
    {
        "content": "<p>Alright so here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sequence1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_form</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">evaluate_right_hand_side</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">evaluate_right_hand_side</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- I am stuck here</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222683193,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610604906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">closed_form</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">sequence1</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sequence1</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222683289,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610605075
    },
    {
        "content": "<p><code>norm_num</code> deals with numerical calculations for nats, ints, rats, reals, and coercions thereof</p>",
        "id": 222683333,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610605112
    },
    {
        "content": "<p>and I give <code>sequence1</code> to the things it knows about so it can deal with <code>sequence1 0</code>.</p>",
        "id": 222683339,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610605137
    },
    {
        "content": "<p>When you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">sequence1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span>\n</code></pre></div>\n<p><code>sequence1 0</code> is definitionally equal to 6, because you defined it like that, you don't have to <code>unfold</code> it.</p>",
        "id": 222683343,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1610605149
    },
    {
        "content": "<p>In the inductive case, you have <code>sequence1 d.succ</code>, which <code>rw sequence1</code> changes to <code>5 + sequence1 d</code> by the definition of <code>sequence1</code>. Then <code>rw hd</code> uses the inductive hypothesis to change that into whatever statement. <code>norm_num</code> makes it all happy by dealing with the coerced <code>d.succ</code> now, and then finish with <code>ring</code> to combine terms.</p>",
        "id": 222683404,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610605245
    },
    {
        "content": "<p>Thank you, that was really helpful! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 222683414,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610605287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20would.20you.20define.20this.20sequence.3F/near/222683343\">said</a>:</p>\n<blockquote>\n<p>When you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">sequence1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span>\n</code></pre></div>\n<p><code>sequence1 0</code> is definitionally equal to 6, because you defined it like that, you don't have to <code>unfold</code> it.</p>\n</blockquote>\n<p>Thanks! And therefore <code>refl</code> also works for the base case!</p>",
        "id": 222683497,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610605411
    },
    {
        "content": "<p>I got it now.</p>",
        "id": 222683508,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610605437
    },
    {
        "content": "<p>Now I'm fed up with counting from 0, LOL. How would you prove the same thing, but with the base case being 1 := 6?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sequence1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"c1\">-- what to put here, 0 := 998244353? but then norm_num would fail to work</span>\n    <span class=\"c1\">-- 998244353 is every competitive programmer's favorite integer</span>\n    <span class=\"c1\">-- see https://codeforces.com/blog/entry/62541</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_form</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- nat.le_induction should work right</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.le_induction</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">sequence1</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">bound</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">induction_hypothesis</span><span class=\"o\">,</span>\n\n    <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">sequence1</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"n\">induction_hypothesis</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">induction_hypothesis</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222688358,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1610611455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sequence1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_form</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sequence1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hpos</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sequence1</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sequence1</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"n\">nat.succ_pos'</span><span class=\"o\">],</span>\n      <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222688730,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610611795
    },
    {
        "content": "<p>What was nice here is expressing the constraint <code>hpos</code> in the more mathlib friendly way, which is <code>0 &lt; n</code> instead of <code>1 \\le n</code>. Then, one discharges the first case of <code>n = 0</code> by showing that <code>0 &lt; 0</code> leads to a contradiction, easily via <code>lt_irrefl</code>.</p>",
        "id": 222689247,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610612183
    }
]