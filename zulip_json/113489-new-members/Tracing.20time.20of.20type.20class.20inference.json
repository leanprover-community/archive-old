[
    {
        "content": "<p>At some point of some new code I wrote, Lean is taking a very long time (several minutes) to resolve all the type class inference. I saw I can trace the result with <code>trace.class_instances true</code>, but is there a way to rank all the results by the time it took lean to find them? I want to understand where exactly it is taking so long so I can try to play with priorities</p>",
        "id": 239987251,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621814154
    },
    {
        "content": "<p>Typically each individual step in <code>trace.class_instances true</code> is somewhat uniform in time. The thing you're really looking for is the parts of the typeclass search that are extremely deep (the number in parentheses), because that often indicates a combinatorial blow-up in the search tree, which is what you want to avoid.</p>\n<p>But I'd also be happy to hear an answer to your actual question! :-)</p>",
        "id": 239990710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621817766
    },
    {
        "content": "<p>Well basically this is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of my problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.smooth_functions</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.derivation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"kd\">extends</span> <span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span>\n</code></pre></div>\n<p>The last two lines both take ages to compile and in particular the last line triggers a <code>deterministic timeout</code> although it compiles through <code>lean --make</code> on the command line. I played with <code>set_option trace.class_instances true</code> for the past 3 hours but I still did not manage to understand where is type class inference having such a hard time...</p>",
        "id": 239991626,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621818611
    },
    {
        "content": "<p>What priorities can I change to make this work?</p>",
        "id": 239991758,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621818738
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.smooth_functions</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.derivation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- instant</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- Π [_inst_3_1 : algebra 𝕜 C^⊤⟮I, M; 𝓘(𝕜, 𝕜), 𝕜⟯] ...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^⊤⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">),</span> <span class=\"bp\">𝕜⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- instant</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">),</span> <span class=\"bp\">𝕜⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- instant</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- elaboration of bar took 3.34s</span>\n</code></pre></div>",
        "id": 240020943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621844967
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[class_instances] caching instance for comm_ring C^⊤⟮I, M; 𝓘(𝕜, 𝕜), 𝕜⟯\n@smooth_map_comm_ring 𝕜 _inst_1 E _inst_2 _inst_3 𝕜\n  (@normed_ring.to_normed_group 𝕜\n     (@normed_comm_ring.to_normed_ring 𝕜\n        (@normed_field.to_normed_comm_ring 𝕜 (@nondiscrete_normed_field.to_normed_field 𝕜 _inst_1))))\n  (@normed_field.to_normed_space 𝕜 (@nondiscrete_normed_field.to_normed_field 𝕜 _inst_1))\n  H\n  _inst_4\n  I\n  𝕜\n  (@uniform_space.to_topological_space 𝕜\n     (@metric_space.to_uniform_space' 𝕜\n        (@semi_normed_group.to_pseudo_metric_space 𝕜\n           (@normed_group.to_semi_normed_group 𝕜\n              (@normed_ring.to_normed_group 𝕜\n                 (@normed_comm_ring.to_normed_ring 𝕜\n                    (@normed_field.to_normed_comm_ring 𝕜\n                       (@nondiscrete_normed_field.to_normed_field 𝕜 _inst_1))))))))\n  𝓘(𝕜, 𝕜)\n  M\n  _inst_5\n  _inst_6\n  𝕜\n  (@semi_normed_comm_ring.to_comm_ring 𝕜\n     (@normed_comm_ring.to_semi_normed_comm_ring 𝕜\n        (@normed_field.to_normed_comm_ring 𝕜 (@nondiscrete_normed_field.to_normed_field 𝕜 _inst_1))))\n  (@uniform_space.to_topological_space 𝕜\n     (@metric_space.to_uniform_space' 𝕜\n        (@semi_normed_ring.to_pseudo_metric_space 𝕜\n           (@semi_normed_comm_ring.to_semi_normed_ring 𝕜\n              (@normed_comm_ring.to_semi_normed_comm_ring 𝕜\n                 (@normed_field.to_normed_comm_ring 𝕜 (@nondiscrete_normed_field.to_normed_field 𝕜 _inst_1)))))))\n  (@charted_space_self 𝕜\n     (@uniform_space.to_topological_space 𝕜\n        (@metric_space.to_uniform_space' 𝕜\n           (@semi_normed_group.to_pseudo_metric_space 𝕜\n              (@normed_group.to_semi_normed_group 𝕜\n                 (@normed_ring.to_normed_group 𝕜\n                    (@normed_comm_ring.to_normed_ring 𝕜\n                       (@normed_field.to_normed_comm_ring 𝕜\n                          (@nondiscrete_normed_field.to_normed_field 𝕜 _inst_1)))))))))\n  _\n</code></pre></div>",
        "id": 240021142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621845077
    },
    {
        "content": "<p>Hmm. Lean is looking for an <code>is_scalar_tower</code> instance. The type of the term that Lean is trying to find is <a href=\"https://gist.github.com/kbuzzard/799ace8f2b25e45da5b03aad5c92f554\">here</a>. It takes over 700 lines to write out with pp.all true. Let's call that term X.</p>\n<p>The trace then looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[class_instances]  class-instance resolution trace\n[class_instances] (0) ?x_0 : X := @derivation.is_scalar_tower ?x_1 ?x_2 ?x_3 ?x_4 ?x_5 ?x_6 ?x_7 ?x_8 ?x_9 ?x_10\nfailed is_def_eq\n[class_instances] (0) ?x_0 : X := @power_series.is_scalar_tower ?x_11 ?x_12 ?x_13 ?x_14 ?x_15 ?x_16 ?x_17 ?x_18 ?x_19 ?x_20\nfailed is_def_eq\n[class_instances] (0) ?x_0 : X := @mv_power_series.is_scalar_tower ?x_21 ?x_22 ?x_23 ?x_24 ?x_25 ?x_26 ?x_27 ?x_28 ?x_29 ?x_30 ?x_31\nfailed is_def_eq\n[class_instances] (0) ?x_0 : X := @continuous_multilinear_map.is_scalar_tower ?x_32 ?x_33 ?x_34 ?x_35 ?x_36 ?x_37 ?x_38 ?x_39 ?x_40 ?x_41 ?x_42 ?x_43  ?x_44  ?x_45  ?x_46  ?x_47  ?x_48  ?x_49  ?x_50  ?x_51  ?x_52  ?x_53  ?x_54  ?x_55  ?x_56  ?x_57  ?x_58  ?x_59\nfailed is_def_eq\n[class_instances] (0) ?x_0 : X := @module.real_complex_tower ?x_60 ?x_61 ?x_62\nfailed is_def_eq\n...\n</code></pre></div>\n<p>(fourteen of these, each taking up over 700 lines of output) until it finally finds <code>@is_scalar_tower.of_ring_hom ?x_140 ?x_141 ?x_142 ?x_143 ?x_144 ?x_145 ?x_146 ?x_147 ?x_148</code> which it gets extremely excited about (spending well over 1000 lines of debugging output on, doing lots of hard work like finding comm_semiring instances on <code>𝕜</code> and linear_ordered_comm_ring instances and etc etc) until it eventually gives up on this,  and we're back to</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[class_instances] (0) ?x_0 : X := @is_scalar_tower.comap ?x_149 ?x_150 ?x_151 ?x_152 ?x_153 ?x_154 ?x_155 ?x_156\nfailed is_def_eq\n</code></pre></div>\n<p>(a reminder that each one of these lines with an <code>X</code> represents 715 lines of output). We then run into</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[class_instances] (0) ?x_0 : X := @is_scalar_tower.right ?x_194 ?x_195 ?x_196 ?x_197 ?x_198\n</code></pre></div>\n<p>and Lean launches into this big search for a proof that <code>𝕜</code> is a normed field etc <em>again</em>, but this time it works out and Lean caches the term whose type is this gigantic <code>X</code>. </p>\n<p>Ultimately this is a small number of attempts by the type class inference system (20 or so, not an unreasonable number) to find a term whose type is humungous in pp.all land, but I don't know whether that sort of thing affects speed in practice because I have no idea how type class inference actually works.</p>",
        "id": 240026034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621848069
    },
    {
        "content": "<p>Making the following file on the command line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.smooth_functions</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.derivation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"kd\">extends</span> <span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span>\n</code></pre></div>\n<p>and piping all output to a text file gives you an 11 megabyte text file. After 2 minutes it does succeed.</p>",
        "id": 240028026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621849231
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.smooth_functions</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.derivation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">instances</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebra</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- instant</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tower</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- instant</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">tower</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">instances</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"kd\">extends</span> <span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span>\n</code></pre></div>\n<p>terminates in around 12 seconds on my machine</p>",
        "id": 240028659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621849577
    },
    {
        "content": "<p>But <code>def foo := derivation 𝕜 C^∞⟮I, M; 𝕜⟯ C^∞⟮I, M; 𝕜⟯</code> is essentially instant, so the issue really is with the <code>structure</code> command, meaning that I can't go any further.</p>",
        "id": 240028956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621849739
    },
    {
        "content": "<p>Thank you very much Kevin for this answer, I am learning so much from it</p>",
        "id": 240040673,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621857340
    },
    {
        "content": "<p>Unfortunately I am not learning the answer to the problem</p>",
        "id": 240041313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621857674
    },
    {
        "content": "<p>So first of all how did you locate that <code>is_scalar_tower</code> was the problem? I was looking at the output as well and I actually was doing ctrl+f to locate which instances were taking most of the lines, and I was also thinking it was probably <code>is_scalar_tower</code> but I was not sure because still the output file was huge and <code>is_scalar_tower</code> only appears in a small section of it</p>",
        "id": 240041659,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621857897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tracing.20time.20of.20type.20class.20inference/near/240041313\">said</a>:</p>\n<blockquote>\n<p>Unfortunately I am not learning the answer to the problem</p>\n</blockquote>\n<p>As for why is there a bigger issue with the <code>structure</code> command?</p>",
        "id": 240041706,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621857927
    },
    {
        "content": "<p>Also what are the terms <code>?x_i</code> exactly?</p>",
        "id": 240041926,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621858076
    },
    {
        "content": "<p>They're variables. Or, because Lean already has things which are called variables, it might be best to call them metavariables. They're terms whose values will be assigned later.</p>",
        "id": 240042249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621858261
    },
    {
        "content": "<p>Ok and then what does <code>failed is_def_eq</code> mean? I mean how does it conclude things are not <code>def_eq</code> if they depend on metavariables that have not been assigned yet?</p>",
        "id": 240042491,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621858405
    },
    {
        "content": "<p>Lean knows that <code>mul ?x_1 ?x_2 =?= add ?x_3 ?x_4</code> can't ever be true by definition, if <code>mul</code> is just defined to be a constant and <code>add</code> is defined to be a different constant.</p>",
        "id": 240042736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621858547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tracing.20time.20of.20type.20class.20inference/near/240042736\">said</a>:</p>\n<blockquote>\n<p>Lean knows that <code>mul ?x_1 ?x_2 =?= add ?x_3 ?x_4</code> can't ever be true by definition, if <code>mul</code> is just defined to be a constant and <code>add</code> is defined to be a different constant.</p>\n</blockquote>\n<p>Oh I thought this was not our case because the type is <code>is_scalar_tower</code> on both sides but I guess the point here is that <code>is_scalar_tower</code> is a dependent type on other types and it is the other types that are different</p>",
        "id": 240043922,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621859271
    },
    {
        "content": "<p>Yeah it is kind of a miracle then that <code>def tower : is_scalar_tower 𝕜 C^∞⟮I, M; 𝕜⟯ C^∞⟮I, M; 𝕜⟯ := infer_instance</code> is instant... I am very puzzled</p>",
        "id": 240044106,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621859388
    },
    {
        "content": "<p>I don't know how definitional equality works but I can quite believe that there is an algorithm which allows there to be holes in the terms which are checked. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ ?m_1 = 37</span>\n\n<span class=\"cm\">  ⊢ ℕ</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ ?m_1 = 37</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- done</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240044245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621859456
    },
    {
        "content": "<p>Btw on my machine it is still taking a long time (although much better than before) and another instance that is taking very long is <a href=\"/user_uploads/3121/1dtpKCWQ_3nUmE9q9daAFYay/output.txt\">output.txt</a></p>",
        "id": 240046117,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621860581
    },
    {
        "content": "<p>I don't know what <code>size_of</code> is, but is there a quick way to get a condensed expression of this type, like disableing <code>pp_all</code> a posteriori? There are too many parentheses for a human...</p>",
        "id": 240046262,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621860661
    },
    {
        "content": "<p>I don't think you're supposed to be messing with <code>has_sizeof</code> -- isn't this some internal thing?</p>",
        "id": 240046493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621860804
    },
    {
        "content": "<p>Ok! Can you remind me how you trace time of things?</p>",
        "id": 240047419,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621861241
    },
    {
        "content": "<p><code>set_option profiler true</code></p>",
        "id": 240047483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861269
    },
    {
        "content": "<p>But can you read the output directly in visual studio? it tells me 0 messages...</p>",
        "id": 240047678,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621861342
    },
    {
        "content": "<p>it'll be hidden in All Messages</p>",
        "id": 240047707,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621861356
    },
    {
        "content": "<p>the profiler only works on stuff after the option has been set, and you can click on any blue underline to see output.</p>",
        "id": 240047732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861379
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/weIC9z3xEePx0gKcEUrWwKzO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/weIC9z3xEePx0gKcEUrWwKzO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/weIC9z3xEePx0gKcEUrWwKzO/image.png\"></a></div>",
        "id": 240047809,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621861409
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/FwikAJfLAhbqfsWrY1nHn4Vm/Immagine-2021-05-24-140614.png\">Immagine-2021-05-24-140614.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FwikAJfLAhbqfsWrY1nHn4Vm/Immagine-2021-05-24-140614.png\" title=\"Immagine-2021-05-24-140614.png\"><img src=\"/user_uploads/3121/FwikAJfLAhbqfsWrY1nHn4Vm/Immagine-2021-05-24-140614.png\"></a></div>",
        "id": 240048166,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621861612
    },
    {
        "content": "<p>Maybe does not work with structures?</p>",
        "id": 240048213,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621861638
    },
    {
        "content": "<p>I'm not sure the profiler runs on structures.</p>",
        "id": 240048221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861642
    },
    {
        "content": "<p>Ok I see thanks!</p>",
        "id": 240048286,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621861674
    },
    {
        "content": "<p>I have no idea what is happening when that structure is being made, or why it takes so long. We need help. You might want to promote this thread to #general where more experts are reading. Call it something like <code>making new structure is slow</code></p>",
        "id": 240048354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861694
    },
    {
        "content": "<p>and just post the MWE</p>",
        "id": 240048379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861711
    },
    {
        "content": "<p>and a link to this thread</p>",
        "id": 240048384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621861718
    },
    {
        "content": "<p>Well actually adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sizeof</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">derivation</span> <span class=\"bp\">𝕜</span> <span class=\"n\">C</span><span class=\"bp\">^∞⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span> <span class=\"n\">C</span><span class=\"bp\">^⊤⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">𝕜⟯</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">100000</span><span class=\"o\">]</span> <span class=\"n\">sizeof</span>\n</code></pre></div>\n<p>to the <code>namespace instances</code> makes everything super quick</p>",
        "id": 240049449,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621862273
    },
    {
        "content": "<p>I don't need to repeat the section <code>namespace instances</code> in every file as long as I import a file where it is included right?</p>",
        "id": 240050199,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621862624
    },
    {
        "content": "<p>Those instances are a hack and are not for use in a production environment.</p>",
        "id": 240050364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621862685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tracing.20time.20of.20type.20class.20inference/near/240050364\">said</a>:</p>\n<blockquote>\n<p>Those instances are a hack and are not for use in a production environment.</p>\n</blockquote>\n<p>You mean I can't publish them to mathlib? Not even if I include everything in a section so to make it local?</p>",
        "id": 240050471,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621862740
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Tracing.20time.20of.20type.20class.20inference\">#general &gt; Tracing time of type class inference</a></p>",
        "id": 240052494,
        "sender_full_name": "Notification Bot",
        "timestamp": 1621863664
    }
]