[
    {
        "content": "<p>I want to abstract a complex type by introducing a \"newtype\". How can I pass the implicit variables implicitly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">nt</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--Works</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nt</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--Error:</span>\n<span class=\"c1\">--  don't know how to synthesize placeholder</span>\n<span class=\"c1\">--  context:</span>\n<span class=\"c1\">--  x x : ℕ</span>\n<span class=\"c1\">--  ⊢ ℕ</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nt</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Edit: smaller MWE</p>",
        "id": 222663541,
        "sender_full_name": "Ruben Lapauw",
        "timestamp": 1610581665
    },
    {
        "content": "<p>What are you expecting the last line to do? How would lean know to pass <code>x</code> to <code>@nt</code> and not <code>37</code>?</p>",
        "id": 222663859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610581896
    },
    {
        "content": "<p>The same way lean knows x is available when proving theorems? I don't need to specify most type-variables in those proofs.</p>",
        "id": 222664071,
        "sender_full_name": "Ruben Lapauw",
        "timestamp": 1610582027
    },
    {
        "content": "<p>Can you give an example of the case you're thinking of that does work, so that I can explain the difference?</p>",
        "id": 222665241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610582827
    },
    {
        "content": "<p>(from <a href=\"https://github.com/leanprover-community/tutorials/blob/0a0de42dd339de62b1e781745fd128afba4d1df8/src/solutions/00_first_proofs.lean#L146\">https://github.com/leanprover-community/tutorials/blob/0a0de42dd339de62b1e781745fd128afba4d1df8/src/solutions/00_first_proofs.lean#L146</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf_lt</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"n\">is_an_inf_of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is used like this: <br>\n(<a href=\"https://github.com/leanprover-community/tutorials/blob/0a0de42dd339de62b1e781745fd128afba4d1df8/src/solutions/00_first_proofs.lean#L398\">https://github.com/leanprover-community/tutorials/blob/0a0de42dd339de62b1e781745fd128afba4d1df8/src/solutions/00_first_proofs.lean#L398</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">apply</span> <span class=\"n\">inf_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>in which A and x are implicit.</p>",
        "id": 222665715,
        "sender_full_name": "Ruben Lapauw",
        "timestamp": 1610583142
    },
    {
        "content": "<p>Right, that's because <code>h</code> contains <code>x</code> and <code>A</code> as part of its type</p>",
        "id": 222665772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610583191
    },
    {
        "content": "<p>If you know the type of <code>h</code>, then lean has only one possibly choice for those implicit variables - so it makes that choice</p>",
        "id": 222665885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610583257
    },
    {
        "content": "<p>Having said that, you can probably get what you want with <code>parameters {x : nat}</code> which I think tells lean \"treat x as a constant in the current section\".</p>",
        "id": 222666067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610583427
    },
    {
        "content": "<p>yeah, thats exactly what I want!</p>\n<p>But continuing with the problem:<br>\nThus if I had:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nt</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">structur</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">nt</span> <span class=\"o\">(</span><span class=\"bp\">$$$</span><span class=\"o\">)))</span>     <span class=\"c1\">-- With $$$ a proof that x=x</span>\n</code></pre></div>\n<p>would work? Since in this proof there is a variable which is then unified with the unknown 'x'?</p>",
        "id": 222666324,
        "sender_full_name": "Ruben Lapauw",
        "timestamp": 1610583646
    },
    {
        "content": "<p>Curiouser and curiouser: with parameters the second example works, but not the first. This I can somewhat understand. However their type makes me very confused. How can I see their full type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">s</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ntx</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nty</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ntx</span> <span class=\"c1\">-- ntx : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">nty</span> <span class=\"c1\">-- nty : Type</span>\n<span class=\"kd\">end</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 222667247,
        "sender_full_name": "Ruben Lapauw",
        "timestamp": 1610584367
    },
    {
        "content": "<p>Outside the section try <code>#check @ntx</code></p>",
        "id": 222668057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610584975
    },
    {
        "content": "<p>And inside or outside for @nty.</p>\n<p>Thank you both!</p>",
        "id": 222668246,
        "sender_full_name": "Ruben Lapauw",
        "timestamp": 1610585107
    }
]