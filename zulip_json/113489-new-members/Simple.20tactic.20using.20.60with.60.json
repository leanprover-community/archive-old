[
    {
        "content": "<p>In my code, I have a lemma called <code>bind_skip</code>, and there are numerous instances in my code where I use the pattern </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and was wondering how to write a basic tactic which could be used like <code>bind_skip_tac with x</code> to execute those exact two lines.</p>",
        "id": 247525153,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627511348
    },
    {
        "content": "<p>I would just use <code>refine bind_skip (\\lam x, _)</code></p>",
        "id": 247525461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627511569
    },
    {
        "content": "<p>hmm, <code>apply</code> seems to be inferring some parameters of <code>bind_skip</code> that <code>refine</code> doesn't get. Is there anyway to make a tactic which is literally a pseudonym for a fixed set of instructions (but also takes a parameter/identifier via <code>with</code>)?</p>",
        "id": 247527442,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627513072
    },
    {
        "content": "<p>This was the best MWE I could come up. You can skip everything before the <code>bind_skip</code>. I just needed that there to make it compile. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.probability_mass_function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">grp_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fintype.elems</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_inst_2.one</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">fintype.elems</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>  <span class=\"n\">finset.mem_univ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">multiset.card</span> <span class=\"o\">(</span><span class=\"n\">fintype.elems</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">multiset.card_pos_iff_exists_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Exists.intro</span> <span class=\"n\">e</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">multiset.card_pos.mp</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">group</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)],</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">multiplicative.group</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">pmf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pmf.pure</span><span class=\"o\">,</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pmf.bind</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniform_grp</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pmf.of_multiset</span> <span class=\"o\">(</span><span class=\"n\">fintype.elems</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">grp_ne_zero</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniform_zmod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">uniform_grp</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bind_skip</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">pmf</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p.bind</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">p.bind</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">add_right_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247527537,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627513128
    },
    {
        "content": "<p>Does <code>congr</code> or <code>congr'</code> make progress on that goal?</p>",
        "id": 247527892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627513364
    },
    {
        "content": "<p>Rather that using <code>bind_skip</code></p>",
        "id": 247527909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627513380
    },
    {
        "content": "<p>oh, you want <code>refine bind_skip _ _ _ (\\lam x, _)</code> since the first three arguments are explicit</p>",
        "id": 247527937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627513399
    },
    {
        "content": "<p>First five, A and B too</p>",
        "id": 247528090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627513476
    },
    {
        "content": "<p>oh yeah, those should definitely be written <code>variables {A B : Type}</code></p>",
        "id": 247528168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627513554
    },
    {
        "content": "<p>The reason I ask about a tactic is that one of the hopes of the project is to have some sort of \"library\" for future proofs relating <code>pmf</code>s (which we can use to model cryptographic protocols, etc., etc.) So it'd be nice to say \"use <code>bind_skip_tac with x</code> to eliminate the first line of two <code>pmf</code>s which have the same first line\" instead of \"write <code>refine ....</code> or \"write <code>apply bind_skip</code> and then <code>intro x</code>\"</p>",
        "id": 247528240,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627513584
    },
    {
        "content": "<p>It is possible to introduce such tactics on the spot, although it's easier if they don't have arguments; but it is harder for readers to understand a proof using a lot of bespoke tactics, especially if they are just abbreviating a simple combination of simpler tactics</p>",
        "id": 247528421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627513727
    },
    {
        "content": "<p>I would just suggest writing <code>apply bind_skip, intro x,</code> on one line if you want to make it more like a single tactic</p>",
        "id": 247528463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627513771
    },
    {
        "content": "<p>Yea, that could work I guess.</p>",
        "id": 247528709,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627514002
    },
    {
        "content": "<p>But, hypothetically, if one wanted to do it for this exact situation, how would one do it? The only reason I asked in the first place was because I figured someone might know how to write a 2-3 line tactic on the spot that accomplishes it.</p>",
        "id": 247529186,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627514438
    },
    {
        "content": "<p>I'm guessing congr didn't work?</p>",
        "id": 247529809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627515020
    },
    {
        "content": "<p>You can make simple tactics like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bind_skip_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 247530141,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627515380
    },
    {
        "content": "<p>How would I pass in the identifier <code>x</code>?</p>",
        "id": 247530245,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627515496
    },
    {
        "content": "<p>So it'd be of the form <code>bind_skip_tac with x</code></p>",
        "id": 247530254,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627515517
    },
    {
        "content": "<p>Eric, not sure about <code>congr</code>. I've been doing lots of proofs relating <code>pmf</code>s to each other over the last few weeks and writing the <code>bind_skip</code> lemma (and another similar lemma) made life infinitely easier. My code is at <a href=\"https://github.com/Loops7/cryptolib\">https://github.com/Loops7/cryptolib</a></p>",
        "id": 247530361,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627515606
    },
    {
        "content": "<p>The elgamal file has the main result.</p>",
        "id": 247530399,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627515656
    },
    {
        "content": "<p>Check out <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a>, I'm on my phone so I can't do it myself right now sorry!</p>",
        "id": 247530417,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627515694
    },
    {
        "content": "<p>Awesome, thank you Alex. Thank you for the simple example and link- I think I should be able to get it from here.</p>",
        "id": 247530553,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627515841
    },
    {
        "content": "<p>bind_skip should have A and B as implicit args, and likely f and g implicit too.</p>",
        "id": 247538730,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627525998
    },
    {
        "content": "<p>And it should be called bind_congr</p>",
        "id": 247538732,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627526008
    },
    {
        "content": "<p>And then you won't need a tactic, or  write a more useful and general tactic</p>",
        "id": 247538741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627526041
    },
    {
        "content": "<p>What do you mean by \"and then I won't need a tactic?\" I'm trying to figure out how to write a tactic that takes a parameter \"id\" and then executes \"apply bind_skip, intro id\". That's all. <code>congr</code> doesn't change the goal in the same way that <code>bind_skip</code> does, at least to my eyes.</p>",
        "id": 247541732,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627530177
    },
    {
        "content": "<p>btw, thank you <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  for your tip to not use pattern matching on the left side of the arrow in the <code>do</code>-notation. That made my life a lot easier</p>",
        "id": 247541813,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627530317
    },
    {
        "content": "<p>I think this is the way to pass an identifier to a tactic, like you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.bind_skip_tac</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">interactive.parse</span> <span class=\"n\">lean.parser.ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(that's about the end of my tactic writing knowledge, so hopefully I am not mistaken here)</p>",
        "id": 247548246,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627539423
    },
    {
        "content": "<p>Thank you, that does exactly what I'd like it to!</p>",
        "id": 247550209,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627541779
    },
    {
        "content": "<p>Are you sure that works? To me that looks like it always calls the introd variable <code>x</code></p>",
        "id": 247551063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627542657
    },
    {
        "content": "<p>Oh, you're right. How do you do it then?</p>",
        "id": 247551580,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1627543193
    },
    {
        "content": "<p>Here's the <code>congr</code> proof I was suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">add_right_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My claim is that the tactic you're asking for already exists, it's <code>congr'</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr'\">tactic#congr'</a>)</p>",
        "id": 247553514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627544869
    },
    {
        "content": "<p>Hmm, I must have been too sleepy and hopeful when I tried Horatiu's solution! I am still curious how one would pass in a identifier to a tactic like that, though.</p>",
        "id": 247592852,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627569725
    },
    {
        "content": "<p>Yes, I agree <code>congr'</code> in that form accomplishes the same task. Is there a similar use of <code>congr</code> or <code>congr'</code> that accomplishes this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bind_skip_const</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pb</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">pmf</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pa.bind</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">pb</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nnreal.tsum_mul_right</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p4</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uniform_zmod</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">p4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bind_skip_const</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bind_skip_const</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247593054,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1627569802
    },
    {
        "content": "<p>Here is an example of adding an optional <code>with</code> property:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.bind_skip_tac</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"with\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">bind_skip</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.interactive.intro</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 247597405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627571417
    }
]