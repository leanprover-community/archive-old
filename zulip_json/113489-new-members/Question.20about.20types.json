[
    {
        "content": "<p>Hi,<br>\nI am a beginner in Lean and have an elementary question. I am doing the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#exercises\">exercises for the Lean textbook</a> of chapter three, and have  trouble proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You can see my attempt below. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- help here</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">???</span>\n  <span class=\"c1\">--</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hqr</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">hpq</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpr</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hqr</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>The problem is that unlike conjunctions or disjuntcions, implications do not have any introduction/elimination rules, so I do not know how to construct a type <code>p → r </code> from p and r. What should I do?</p>",
        "id": 288688459,
        "sender_full_name": "Travis Rivera Petit",
        "timestamp": 1657121579
    },
    {
        "content": "<p>You already know how to construct an implication: <code>assume</code>. However, you've gone wrong in another way in the first section</p>",
        "id": 288692395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1657123319
    },
    {
        "content": "<p>You can use an underscore in the place where you're stuck, and try to make sense of the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span>\n  <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">_</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hqr</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">hpq</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpr</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hqr</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch at application\n  iff.intro (λ (hpq : p ∨ q), ?m_1[hpq])\nterm\n  λ (hpq : p ∨ q), ?m_1[hpq]\nhas type\n  p ∨ q → (p → r) ∧ (q → r)\nbut is expected to have type\n  (p ∨ q → r) → (p → r) ∧ (q → r)\n</code></pre></div>",
        "id": 288693260,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657123761
    }
]