[
    {
        "content": "<p>I expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'h'</span>\n</code></pre></div>\n<p>What's going wrong here? Am I not allowed to use <code>variables</code> like that?</p>",
        "id": 235276693,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618884058
    },
    {
        "content": "<p>Lean doesn't include hypotheses from <code>variables</code> unless they appear in the type. You can use <code>include h</code> to force Lean to include the variable in all following declarations.</p>",
        "id": 235276786,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618884131
    },
    {
        "content": "<p>aha! Thanks.</p>",
        "id": 235276820,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618884175
    },
    {
        "content": "<p>This is discussed briefly about halfway through <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#entering-tactic-mode\">TPiL 5.1</a>.</p>",
        "id": 235276823,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618884180
    },
    {
        "content": "<p>Yep, I remember reading that a while ago, but I apparently didn't retain it.</p>",
        "id": 235276868,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618884208
    },
    {
        "content": "<p>In my case, why does Lean give me the error message <code>unknown identifier 'h'</code> and <code>unknown identifier 'g'</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"n\">h.1</span><span class=\"o\">,</span>  <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">dvd_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h.1</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h.2</span> <span class=\"o\">⟩</span>\n<span class=\"c1\">-- END</span>\n</code></pre></div>",
        "id": 240834246,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622468083
    },
    {
        "content": "<p>You should remove the <code>by</code>, since <code>absurd</code> is a lemma you are applying, not a tactic.</p>",
        "id": 240835166,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622468611
    },
    {
        "content": "<p>I didn't notice that before. Thanks a lot!!</p>",
        "id": 240835331,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622468695
    }
]