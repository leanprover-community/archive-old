[
    {
        "content": "<p><code>fin (n + 1)</code> doesn't have <code>has_Inf</code> or <code>has_Sup</code>. I'm trying to crib the definitions from the definition of the instances for <code>nat</code>. Turns out <code>fin.find</code> is more general than <code>nat.find</code> and returns an <code>option</code>. RIght now I'm planning to use <code>get_or_else</code> with the following def. But I am not sure how to show the decidability. Thoughts?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 206632152,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597180441
    },
    {
        "content": "<p>There should be a general lemma saying that a finite linear order is complete</p>",
        "id": 206632716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597180738
    },
    {
        "content": "<p>actually a finite lattice is good enough</p>",
        "id": 206632748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597180766
    },
    {
        "content": "<p>actually a bot_join_semilattice also works</p>",
        "id": 206632824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597180825
    },
    {
        "content": "<p>the proof is pretty easy: every Sup is a finite fold of join and bot, so Sup exists, and therefore all the complete lattice operations exist</p>",
        "id": 206632904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597180905
    },
    {
        "content": "<p>I mean the infimum of a set, not the infimum of two sets. <code>has_Inf</code> is the former, <code>has_inf</code> is the latter. I think? Am I wrong?</p>",
        "id": 206633096,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597181030
    },
    {
        "content": "<p>Yes, that's correct. The observation is that binary infima give you arbitrary infima if there are only finitely many objects in the type</p>",
        "id": 206633198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181093
    },
    {
        "content": "<p>inf is just min in this context, it's the inf of two terms of the lattice (so two numbers, not two sets)</p>",
        "id": 206633204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597181097
    },
    {
        "content": "<p>You mean not the infimum of two elements, not not the infimum of two sets. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 206633358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597181183
    },
    {
        "content": "<p>Also for your question re: decidability, don't worry about it and use <code>open_locale classical</code>. It is impossible to implement <code>has_Inf</code> computably on any type where this is actually a useful thing to say</p>",
        "id": 206633448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181246
    },
    {
        "content": "<p>Gotcha. Thanks! So what would be the right way to state that the following using min?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">leading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206633822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597181453
    },
    {
        "content": "<p>One way to do it with <code>fin.find</code> is to assert that <code>fin.find ... = some j</code> and then say <code>A i j = 1</code></p>",
        "id": 206634036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181594
    },
    {
        "content": "<p>or assert that for all <code>j</code> satisfying that, <code>A i j = 1</code></p>",
        "id": 206634074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181622
    },
    {
        "content": "<p>maybe nothing like this at all, but rather say that if <code>A i j</code> is nonzero but all <code>A i j'</code> with <code>j' &lt; j</code> are zero, then <code>A i j</code> is one</p>",
        "id": 206634082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597181628
    },
    {
        "content": "<p>depending on whether you want to assert the existence of such a value or not</p>",
        "id": 206634101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181638
    },
    {
        "content": "<p>or what Reid said</p>",
        "id": 206634155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181649
    },
    {
        "content": "<p>and yeah I guess this might not be exactly equivalent to what you wrote</p>",
        "id": 206634174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597181672
    },
    {
        "content": "<p>The version you wrote seems to require that <code>A i j</code> is not always zero, in which case you can write it as \"there exists <code>j</code> such that <code>A i j = 1</code> and <code>A i j' = 0</code> for all <code>j' &lt; j</code>\"</p>",
        "id": 206634339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181790
    },
    {
        "content": "<p>assuming of course that <code>0 != 1</code></p>",
        "id": 206634396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181823
    },
    {
        "content": "<p>Yeah, I had those definitions before, but was testing out what the <code>argmin</code> equivalent would be. Which led me to try creating a <code>has_Inf</code> instance.</p>",
        "id": 206634470,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597181878
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">leading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">lj</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lj</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">lj</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206634583,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597181944
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">leading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/\\</span> <span class=\"bp\">∀</span> <span class=\"n\">lj</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lj</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">lj</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206634604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181967
    },
    {
        "content": "<p>But doesn't that preclude an all-zero row?</p>",
        "id": 206634610,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597181976
    },
    {
        "content": "<p>it does</p>",
        "id": 206634624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181983
    },
    {
        "content": "<p>do you want to allow that?</p>",
        "id": 206634635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597181997
    },
    {
        "content": "<p>if so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">leading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">lj</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lj</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">lj</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206634736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">leading</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">lj</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lj</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">lj</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206634758,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597182074
    },
    {
        "content": "<p>ah, putting <code>A i j = 1 ∧ </code> in the final conjunct is a bit weird in case there is no such <code>lj</code></p>",
        "id": 206634798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182112
    },
    {
        "content": "<p>also your definition would still hold if every element was <code>0.5</code> say</p>",
        "id": 206634874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182155
    },
    {
        "content": "<p>I see. Thanks! I'm trying to formalize the definition of reduced-row-echelon form, with the hope to also formalize an algorithm for converting a matrix to it, if possible.</p>",
        "id": 206635003,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597182247
    }
]