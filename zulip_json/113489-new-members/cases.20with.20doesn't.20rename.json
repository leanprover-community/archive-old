[
    {
        "content": "<p>I encountered situations when <code>cases h with h1 h2 ...</code> doesn't rename the introduced hypotheses as I would expect. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">type.arrow</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">preterm</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">wt</span>  <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">wt</span> <span class=\"o\">(</span><span class=\"n\">preterm.var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">type.zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span><span class=\"o\">),</span> <span class=\"n\">wt</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"bp\">↣</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">wt</span> <span class=\"n\">u</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">wt</span> <span class=\"o\">(</span><span class=\"n\">t.app</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">σ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wt</span> <span class=\"n\">t</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">app</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">ihu</span> <span class=\"n\">ihv</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\">breaks h in h_ρ h_ᾰ_1 h_ᾰ-/</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I thought <code>cases h with σ h1 h2</code> would rename the three introduced hypotheses, in this order, but it actually only replaces h_ρ with h1 (so the first one with second one), leaving the rest unchanged. What's happening here? How can I give names to the hypotheses?</p>",
        "id": 230154621,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615632518
    },
    {
        "content": "<p>Not your question, but something your example raises - it looks like the lean server puts the error message on the <code>case</code> when it should probably put it on the <code>}</code>. Is this easy to fix?</p>",
        "id": 230157480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615636034
    },
    {
        "content": "<p><code>cases h with x p σ t u ht hu</code> works</p>",
        "id": 230157566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615636139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/cases.20with.20doesn't.20rename/near/230157480\">said</a>:</p>\n<blockquote>\n<p>Not your question, but something your example raises - it looks like the lean server puts the error message on the <code>case</code> when it should probably put it on the <code>}</code>. Is this easy to fix?</p>\n</blockquote>\n<p>Not really. It is the <code>case</code> tactic that fails, and <code>}</code> is part of the syntax of <code>case</code>, not a separate tactic like with <code>{ tacs .. }</code> where braces represent a separate syntax form that can be treated specially</p>",
        "id": 230214770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615699878
    }
]