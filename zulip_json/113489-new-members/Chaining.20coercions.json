[
    {
        "content": "<p>Hi Folks, A question about chaining of coercions. I start with three types, X, Y, and Z, and define pairwise coercions in both directions: from X to Y and Y to X and from Y to Z and Z to Y. Coercions of X-valued objects to Z then works fine, and from Z to X as well. However, if I now add a \"branch\" in the coercion graph, say from X to Y' and back, the automatic chaining of coercions (at least from X-Z and Z-X) now fails. What are the constraints on how complex a graph of coercions can be, in which automatic chaining will continue to work, and why? Thanks! --Kevin S</p>",
        "id": 225942760,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613011812
    },
    {
        "content": "<p>X to Y and back is bad, that's a typeclass cycle and will make all typeclass inference problems fail</p>",
        "id": 225942804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613011883
    },
    {
        "content": "<p>You can have X to Y and back if you inhabit <code>has_coe_t</code> instead since it won't try to chain them</p>",
        "id": 225942861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613011933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225942804\">said</a>:</p>\n<blockquote>\n<p>X to Y and back is bad, that's a typeclass cycle and will make all typeclass inference problems fail</p>\n</blockquote>\n<p>I see. Interesting. The use case is that I have a tree of isomorphic types, and I'd like to have automated coercions between any two types in the tree.  Any thoughts on how we might obtain such a capability?</p>",
        "id": 225942988,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613012112
    },
    {
        "content": "<p>You could have a coe <code>A -&gt; X</code> and a coe_t <code>X -&gt; A</code> for all A and some chosen X</p>",
        "id": 225943054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613012184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225943054\">said</a>:</p>\n<blockquote>\n<p>You could have a coe <code>A -&gt; X</code> and a coe_t <code>X -&gt; A</code> for all A and some chosen X</p>\n</blockquote>\n<p>I will let you know how that works out. Thanks a ton as always, Mario.</p>",
        "id": 225943081,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613012245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">foo</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bar</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bar.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">baz_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">baz</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">baz.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_foo</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_bar</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bar.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_baz</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">baz.mk</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 225943261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613012426
    },
    {
        "content": "<p>Basic types for tree of linear spaces .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">coord</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"n\">frame</span>\n<span class=\"k\">with</span> <span class=\"n\">space</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span>\n<span class=\"bp\">|</span> <span class=\"n\">der</span> <span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"bp\">→</span> <span class=\"n\">space</span>\n<span class=\"k\">with</span> <span class=\"n\">frame</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">std</span>\n<span class=\"bp\">|</span> <span class=\"n\">new</span> <span class=\"o\">:</span> <span class=\"n\">space</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">frame</span>\n\n<span class=\"c1\">-- open space frame</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getf</span> <span class=\"o\">:</span> <span class=\"n\">space</span> <span class=\"bp\">→</span> <span class=\"n\">frame</span>\n<span class=\"bp\">|</span> <span class=\"n\">space.base</span> <span class=\"o\">:=</span> <span class=\"n\">frame.std</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">space.der</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gets</span> <span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"bp\">→</span> <span class=\"n\">space</span>\n<span class=\"bp\">|</span> <span class=\"n\">frame.std</span> <span class=\"o\">:=</span> <span class=\"n\">space.base</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">frame.new</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- get coord of new frame relative to old frame</span>\n<span class=\"kd\">def</span> <span class=\"n\">getc</span> <span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"bp\">→</span> <span class=\"n\">coord</span>\n<span class=\"bp\">|</span> <span class=\"n\">frame.std</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">frame.new</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- get old frame on which which frame is built</span>\n<span class=\"c1\">-- std frame is built on itself</span>\n<span class=\"kd\">def</span> <span class=\"n\">geto</span> <span class=\"o\">:</span> <span class=\"n\">frame</span> <span class=\"bp\">→</span> <span class=\"n\">frame</span>\n<span class=\"bp\">|</span> <span class=\"n\">frame.std</span> <span class=\"o\">:=</span> <span class=\"n\">frame.std</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">frame.new</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">getf</span> <span class=\"n\">s</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">point</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">space</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getps</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">space</span><span class=\"o\">},</span> <span class=\"n\">point</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">space</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getpf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">space</span><span class=\"o\">},</span> <span class=\"n\">point</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">frame</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">getf</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>A simple demo/test case. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">space_tree</span>\n\n<span class=\"c1\">--</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">space.base</span>  <span class=\"c1\">-- implicit std frame</span>\n<span class=\"kd\">def</span> <span class=\"n\">f0</span> <span class=\"o\">:=</span> <span class=\"n\">getf</span> <span class=\"n\">s0</span>             <span class=\"c1\">-- standard frame</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:=</span> <span class=\"n\">frame.new</span> <span class=\"n\">s0</span> <span class=\"mi\">2</span>      <span class=\"c1\">-- new basis coord 2</span>\n<span class=\"kd\">def</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">space.der</span> <span class=\"n\">f1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">:=</span> <span class=\"n\">frame.new</span> <span class=\"n\">s1</span> <span class=\"mi\">3</span>      <span class=\"c1\">-- new basis coord 3</span>\n<span class=\"kd\">def</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">space.der</span> <span class=\"n\">f2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f1'</span> <span class=\"o\">:=</span> <span class=\"n\">frame.new</span> <span class=\"n\">s0</span> <span class=\"mi\">5</span>\n<span class=\"kd\">def</span> <span class=\"n\">s1'</span> <span class=\"o\">:=</span> <span class=\"n\">space.der</span> <span class=\"n\">f1'</span>\n\n<span class=\"c1\">-- forward and backward transforms</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pt_0_1</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s0</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"n\">s1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getf</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getc</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pt_1_0</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"n\">s0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getf</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getc</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--</span>\n<span class=\"kd\">def</span> <span class=\"n\">pt_0_1'</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s0</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"n\">s1'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getf</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getc</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pt_1'_0</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s1'</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"n\">s0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getf</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getc</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--</span>\n<span class=\"kd\">def</span> <span class=\"n\">pt_1_2</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"n\">s2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getf</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getc</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pt_2_1</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s2</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"n\">s1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getf</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getc</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">point.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pt_1_0_coe</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pt_1_0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pt_0_1_coe</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pt_0_1</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">--</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pt_1'_0_coe</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s1'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pt_1'_0</span> <span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">pt_0_1'_coe</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s1'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pt_0_1'</span> <span class=\"o\">⟩</span>\n\n<span class=\"c1\">--</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pt_2_1_coe</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pt_2_1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pt_1_2_coe</span> <span class=\"o\">:</span>\n<span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pt_1_2</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">--</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Hmm: Need an explicit has_coe_t from</span>\n<span class=\"cm\">point s0 to point s2.</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">--</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">point.mk</span> <span class=\"mi\">12</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">point.mk</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p01</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">p0</span>  <span class=\"c1\">-- coerce</span>\n<span class=\"kd\">def</span> <span class=\"n\">p12</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">p01</span> <span class=\"c1\">-- coerce</span>\n<span class=\"kd\">def</span> <span class=\"n\">p02</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">p0</span>  <span class=\"c1\">-- coerce chain</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">p01</span>   <span class=\"c1\">-- expect 6</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">p12</span>   <span class=\"c1\">-- expect 2</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">p02</span>   <span class=\"c1\">-- expect 2 (chained)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p21</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">p2</span>  <span class=\"c1\">-- coerce</span>\n<span class=\"kd\">def</span> <span class=\"n\">p10</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">p21</span> <span class=\"c1\">-- coerce</span>\n<span class=\"kd\">def</span> <span class=\"n\">p20</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">p2</span>  <span class=\"c1\">-- coerce chain</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">p21</span>   <span class=\"c1\">-- expect 6</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">p10</span>   <span class=\"c1\">-- expect 12</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">p20</span>   <span class=\"c1\">-- expect 12 (chained)</span>\n</code></pre></div>",
        "id": 225943625,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613012771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225943261\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">foo</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bar</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bar.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">baz_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">baz</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">baz.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_foo</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_bar</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bar.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_baz</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">baz.mk</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here's more what I'm looking for. This example subsumes yours and illustrates the problem. I'm not a typeclass inferencing person, but might not an inferencer just stop when it detects a cycle, and move on if necessary? (Yeah, that's why I post in beginners.)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bam</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">     nat</span>\n<span class=\"cm\">   ^     ^</span>\n<span class=\"cm\">   |     |</span>\n<span class=\"cm\">   v     v</span>\n<span class=\"cm\">  foo   bar</span>\n<span class=\"cm\">   ^     ^</span>\n<span class=\"cm\">   |     |</span>\n<span class=\"cm\">   v     v</span>\n<span class=\"cm\">  bam   baz</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- ^ arrows</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">foo</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bam_foo</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bam</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">foo.mk</span> <span class=\"n\">m.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">bar</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bar.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">baz_bar</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">baz</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">bz</span><span class=\"o\">,</span> <span class=\"n\">bar.mk</span> <span class=\"n\">bz.out</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- v arrows</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_foo</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo_bam</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">foo</span> <span class=\"n\">bam</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">bam.mk</span> <span class=\"n\">f.out</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat_bar</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">nat</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bar.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar_baz</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">baz.mk</span> <span class=\"n\">r.out</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- what works and what breaks?</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">bam</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bam</span><span class=\"o\">)</span>  <span class=\"c1\">-- no: no downward chaining</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>  <span class=\"c1\">-- no: no downward chaining</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>          <span class=\"c1\">-- one coe_t at end of chain ok</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>          <span class=\"c1\">-- works symmetrically</span>\n\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span>          <span class=\"c1\">-- no: at most one coe_t at end</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">bam</span><span class=\"o\">)</span>          <span class=\"c1\">-- no: symmetric</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Looks like I need to write an explicit</span>\n<span class=\"cm\">has_coe_t for each link in the transitive</span>\n<span class=\"cm\">closure of the down-pointing arrows minus</span>\n<span class=\"cm\">the down-pointing arrows already written.</span>\n<span class=\"cm\">Better than nothing but not great. Best we</span>\n<span class=\"cm\">can do?</span>\n<span class=\"cm\">-/</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 225945715,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613015335
    },
    {
        "content": "<blockquote>\n<p>I'm not a typeclass inferencing person, but might not an inferencer just stop when it detects a cycle, and move on if necessary?</p>\n</blockquote>\n<p>Yes. Lean 3's algorithm is bad, Lean 4's is better and mostly solves this problem</p>",
        "id": 225945930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613015572
    },
    {
        "content": "<p>Like I said, you need a coe from A -&gt; X and coe_t from X -&gt; A for varying A and fixed (privileged) X; this is a star graph of coercions. A general graph isn't going to cut it because you need at most one edge in every path to be a coe_t edge (and in fact the coe_t edge has to be the last in the path)</p>",
        "id": 225946063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613015754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225945930\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm not a typeclass inferencing person, but might not an inferencer just stop when it detects a cycle, and move on if necessary?</p>\n</blockquote>\n<p>Yes. Lean 3's algorithm is bad, Lean 4's is better and mostly solves this problem</p>\n</blockquote>\n<p>I see. Do you happen to know where I can read more about the new approach?</p>\n<p>Here's a more general form of the problem, I suppose:</p>\n<p>Given (statically) a collection, C = { T }, of isomorphic types, and a connected tree (dag, graph, etc), S,  of pairwise bijections between types in C, generate coercions for each edge in the complete directed graph over C.</p>",
        "id": 225946265,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613015980
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/2001.04301\">https://arxiv.org/abs/2001.04301</a></p>\n<p>It's probably not especially useful to you though</p>",
        "id": 225946445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016143
    },
    {
        "content": "<p>The problem is that typeclass resolution is far more general than your statement</p>",
        "id": 225946467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016185
    },
    {
        "content": "<p>so we need an algorithm that solves the general case but also does the smart thing in this restricted setting</p>",
        "id": 225946496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016210
    },
    {
        "content": "<p>The problem as posed is easy; you can use e.g. tarjan's algorithm for finding SCC's in a directed graph</p>",
        "id": 225946565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016275
    },
    {
        "content": "<p>but it's a challenge to make that work within the constraints of lean 3 coercions</p>",
        "id": 225946592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016311
    },
    {
        "content": "<p>if you are fine with a tactic doing the coercion you have a lot more flexibility</p>",
        "id": 225946604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225946445\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://arxiv.org/abs/2001.04301\">https://arxiv.org/abs/2001.04301</a></p>\n<p>It's probably not especially useful to you though</p>\n</blockquote>\n<p>Yes. What I'm wondering, very pragmatically, is whether Lean 4's approach solves my problem?</p>",
        "id": 225946613,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613016344
    },
    {
        "content": "<p>I'm not entirely sure, you could try it</p>",
        "id": 225946669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016369
    },
    {
        "content": "<p>Also, yes, I could write a tactic. But I'm lazy. And yes I'll give it a try in Lean 4 and report back. Thank you for the conversation. It's clear to me now where things stand with Lean 3. Love this community.</p>",
        "id": 225946693,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613016417
    },
    {
        "content": "<p>The problem with a tactic is that it's not invisible</p>",
        "id": 225946707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225946707\">said</a>:</p>\n<blockquote>\n<p>The problem with a tactic is that it's not invisible</p>\n</blockquote>\n<p>Aye</p>",
        "id": 225946714,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613016455
    },
    {
        "content": "<p>coercion does not require any syntax, tactics don't get that luxury</p>",
        "id": 225946720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016470
    },
    {
        "content": "<p>mathlib has lots of <code>by exactI</code> in it which ideally you wouldn't have to see at all</p>",
        "id": 225946774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613016506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Chaining.20coercions/near/225946720\">said</a>:</p>\n<blockquote>\n<p>coercion does not require any syntax, tactics don't get that luxury</p>\n</blockquote>\n<p>Very interesting.</p>",
        "id": 225946801,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1613016546
    }
]