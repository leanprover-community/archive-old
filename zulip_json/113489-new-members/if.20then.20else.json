[
    {
        "content": "<p>How to use <code>if then else</code> with an undecidable predicate (in classic logic)? The following fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kd\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"c1\">--[decidable_pred c]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">option.some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 277496452,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648862243
    },
    {
        "content": "<p>In tactic mode you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> to split your logic like that<br>\n<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"c1\">--[decidable_pred c]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 277496728,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648862556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Doesn't your code return a function that always returns <code>none</code>? It is not what I need.</p>",
        "id": 277496886,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648862729
    },
    {
        "content": "<p>Maybe you want <code>open_locale classical</code> instead of just open classical? This will add classical decidable instances to you environment</p>",
        "id": 277496898,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648862761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411273\">Victor Porton</span> <a href=\"#narrow/stream/113489-new-members/topic/if.20then.20else/near/277496886\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> Doesn't your code return a function that always returns <code>none</code>? It is not what I need.</p>\n</blockquote>\n<p>Sorry about that! I didn't notice the <code>def</code></p>",
        "id": 277496942,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648862798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> unknown identifier 'open_locale'</p>",
        "id": 277496952,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648862837
    },
    {
        "content": "<p>It's part of mathlib indeed. Is mathlib a dependency of your project? Or are you working on a local copy of mathlib? This will add a lot of functionality for you</p>",
        "id": 277497026,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648862917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> do use mathlib (I asked how to install it about 1/2h ago.)</p>",
        "id": 277497042,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648862963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">option.some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 277497119,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648863034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> That works. But <em>what</em> does <code>open_locale</code> do?</p>",
        "id": 277497185,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648863161
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/localized.html#open_locale_cmd\">docs</a> say</p>\n<blockquote>\n<p>Execute all commands in the given locale</p>\n</blockquote>\n<p>If you're interested, <a href=\"https://github.com/leanprover-community/mathlib/blob/6dad5f8ced3d73226d58f279c49f9fbc568fa5a3/src/tactic/localized.lean#L40\">this</a> is where it's defined</p>",
        "id": 277497368,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648863432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> What is a locale?</p>",
        "id": 277497469,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648863513
    },
    {
        "content": "<p><code>open_locale</code> implies <code>open</code>? How to close <code>open_locale</code>?</p>",
        "id": 277497493,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648863562
    },
    {
        "content": "<p><code>open_locale</code> doesn't do <code>open</code>. It just runs whatever commands people put in the \"locale\"</p>",
        "id": 277497582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648863649
    },
    {
        "content": "<p>I think every command that's in a locale is a command to define notation and add typeclass instances</p>",
        "id": 277497603,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648863701
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#localized%20notation\">These docs</a> explain locales a bit more, and also give commands that let you check what gets run when you open a locale.</p>\n<p><strong>edit</strong>: I guess these docs don't actually define \"locale\", but I think it's just the name that was chosen for a tag like <code>classical</code> that these \"localized\" commands are attached to.</p>",
        "id": 277497683,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1648863827
    },
    {
        "content": "<p>Like I was saying in another thread, when you're using sets you need to make sure to be consistent with how you interact with them -- in the code below, I switched it all to use <code>∈</code>, which if you switch any one of them back to <code>c x</code> you'll get some errors.</p>\n<p>While <code>open_locale classical</code> can be nice, there are problems you might run into if you don't let the caller choose the decidability instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subfunc_to_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">option.some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>This doesn't actually require the predicate to be decidable, since a caller can use the classical decidability instances (which <code>open_locale classical</code> makes available to you).</p>",
        "id": 277498129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648864000
    }
]