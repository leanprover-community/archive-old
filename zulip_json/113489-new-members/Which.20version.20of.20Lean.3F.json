[
    {
        "content": "<p>my background: used to me a mathematician (rep theory, higher categories, and applications to low dim topology). now I work in tech, mostly ML. there's nothing in particular I want to prove! just exploring curiously. once I learn more, I'd be interested in contributing to formalization projects, but I don't know much about what's going on in the lean community</p>",
        "id": 278881768,
        "sender_full_name": "Alex Ellis",
        "timestamp": 1649879857
    },
    {
        "content": "<p>Lean 3 currently has a developed pure mathematics library - <code>mathlib</code>.</p>",
        "id": 278881906,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649879908
    },
    {
        "content": "<p>Until mathlib has been ported over to Lean 4 (which should hopefully happen within the next year or so), I'd recommend starting with Lean 3. The community website has a bunch of learning resources here: <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 278881963,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649879937
    },
    {
        "content": "<p>Unless you want to roll your own \"basic\" theorems and proofs, then I would suggest starting there</p>",
        "id": 278881975,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649879943
    },
    {
        "content": "<p>thanks! yes, <code>matlib</code> is what I've been playing with so far. good to know there are plans to port it to lean4. I'm curious—what's the reason lean is choosing to have non-backwards-compatible releases?</p>",
        "id": 278882128,
        "sender_full_name": "Alex Ellis",
        "timestamp": 1649880005
    },
    {
        "content": "<p>Greater functionality</p>",
        "id": 278882182,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880019
    },
    {
        "content": "<p>Unlike most programming languages where the terrain is pretty well-trodden, a lot is learned here with trial and error.</p>",
        "id": 278882557,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880161
    },
    {
        "content": "<p>As the <a href=\"https://leanprover.github.io/lean4/doc/faq.html#should-i-use-lean\">Lean 4 FAQ</a> puts it \"Lean is under heavy development, and we are constantly trying new ideas and tweaking the system. It is a research project and not a product.\"</p>",
        "id": 278883006,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649880371
    },
    {
        "content": "<p>It also has a <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">section on significant changes from Lean 3 to Lean 4</a>.</p>",
        "id": 278883415,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880600
    },
    {
        "content": "<p>The best time to make a backwards incompatible release is when your userbase is small, and your core users (here mathlib contributors) are willing to put up with the incompatibility. Lean has the luxury of being in that position unlike many other languages.</p>",
        "id": 278883535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649880653
    },
    {
        "content": "<p>Personally, I think the benefits derived from the breaking changes will significantly outweigh the hassles. For example, program extraction + proofs is <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> for me.</p>",
        "id": 278883766,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880769
    },
    {
        "content": "<p>I think the majority of the current user base feels similarly generally.</p>",
        "id": 278883824,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649880802
    },
    {
        "content": "<p>It's worth remembering that mathlib is already very backwards incompatible anyway</p>",
        "id": 278884248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649881002
    },
    {
        "content": "<p>15 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Tips.20and.20tricks\">#general &gt; Tips and tricks</a> by <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span>.</p>",
        "id": 278884574,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649881158
    },
    {
        "content": "<p>And from a software engineering perspective, the freedom to go backwards incompatible comes with the freedom to make bold improvements, such as completely revamping the metaprogramming infra</p>",
        "id": 278884760,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649881245
    },
    {
        "content": "<p>Some people do come on Zulip every now and then to grumble about a lemma that doesn't exist anymore, but fixing it is usually a matter of minutes.</p>",
        "id": 278889393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649883527
    }
]