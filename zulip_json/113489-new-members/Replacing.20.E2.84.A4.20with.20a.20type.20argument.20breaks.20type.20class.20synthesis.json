[
    {
        "content": "<p>Hi all,</p>\n<p>I had some type class defined over <code>(A : ℤ → Type u)</code>, but decided I wanted to be able to restrict it to <code>(A : ℕ → Type u)</code>. To avoid losing the generality of the original statement, I changed the declaration to <code>{ι : Type u} (A : ι → Type u)</code>. Unfortunately, this appears to break lean's ability to \"synthesize type class instances\".</p>\n<p>The change in question can be seen at <a href=\"https://github.com/pygae/lean-ga/pull/6/files\">https://github.com/pygae/lean-ga/pull/6/files</a>. The file is self-contained, and I've added comments to the lines causing me trouble. The file builds with no errors prior to this change.</p>\n<p>I think the problem is something to do with my type class becoming a Pi-type, which prevents inference of its fields?</p>",
        "id": 202807731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593785610
    },
    {
        "content": "<p>The <code>has_coe</code> instance looks useless, btw</p>",
        "id": 202807909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593785749
    },
    {
        "content": "<p>(I mean <code>instance has_coe (r s : ι) (h: r = s) : has_coe (A r) (A s)</code>, in case there are others)</p>",
        "id": 202807959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593785764
    },
    {
        "content": "<p>It probably is - I was trying to solve a problem in another file where I couldn't equate terms of types <code>A r</code> and <code>A (r + 0)</code></p>",
        "id": 202808075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593785863
    },
    {
        "content": "<p>There's no way to supply <code>h</code>.</p>",
        "id": 202808160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593785912
    },
    {
        "content": "<p>Anyways, I'm surprised if this worked before.</p>",
        "id": 202808192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593785933
    },
    {
        "content": "<p>I suspect it just silently did nothing useful and I wasn't relying on it</p>",
        "id": 202808231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593785952
    },
    {
        "content": "<p>But at any rate, after this change I now get complaints from lean</p>",
        "id": 202808254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593785965
    },
    {
        "content": "<p>I meant the file in general</p>",
        "id": 202808259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593785972
    },
    {
        "content": "<p>The fields of <code>graded_module_components</code> don't make good instances</p>",
        "id": 202808279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593785987
    },
    {
        "content": "<p>Really I was trying to use <code>graded_module_components </code> as a shorthand for specifying all the properties over and over again</p>",
        "id": 202808364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786014
    },
    {
        "content": "<p>I think this doesn't work.</p>",
        "id": 202808411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786055
    },
    {
        "content": "<p>I assume your statement is a judgement on the <code>attribute [instance]</code> lines below</p>",
        "id": 202808419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786063
    },
    {
        "content": "<p>Which actually worked perfectly until I replaced <code>ℤ</code> with <code>ι</code></p>",
        "id": 202808457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786089
    },
    {
        "content": "<p>For example, you're adding a rule for <code>add_comm_group</code> that matches literally anything applied to anything</p>",
        "id": 202808498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786119
    },
    {
        "content": "<p>It may work so far in your small file</p>",
        "id": 202808549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786134
    },
    {
        "content": "<p>I suppose the number of \"anything\"s it matches grew immensely upon replacing <code>ℤ</code>...</p>",
        "id": 202808609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786181
    },
    {
        "content": "<p>But won't it only match things for which local instances of <code>graded_module_components</code> exist?</p>",
        "id": 202808636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786199
    },
    {
        "content": "<p>It will match anything and then go look for instances of <code>graded_module_components</code></p>",
        "id": 202808681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786239
    },
    {
        "content": "<p>It can't see the future.</p>",
        "id": 202808730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786254
    },
    {
        "content": "<p>(Reid is talking about the typeclass inference algorithm)</p>",
        "id": 202808760,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593786280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Replacing.20.E2.84.A4.20with.20a.20type.20argument.20breaks.20type.20class.20synthesis/near/202808609\">said</a>:</p>\n<blockquote>\n<p>I suppose the number of \"anything\"s it matches grew immensely upon replacing <code>ℤ</code>...</p>\n</blockquote>\n<p>Yes, with the change now all the instances match anything applied to anything.</p>",
        "id": 202808762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786280
    },
    {
        "content": "<p>Because anything could be <code>0</code>.</p>",
        "id": 202808777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786295
    },
    {
        "content": "<p>We do have instances like this but where the type isn't changing.</p>",
        "id": 202808920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786387
    },
    {
        "content": "<p>Could you point me to the builtin ones?</p>",
        "id": 202808937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786398
    },
    {
        "content": "<p>Builtin what?</p>",
        "id": 202808971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786414
    },
    {
        "content": "<p>I mean, imagine instead of <code>A 0</code> or <code>A r</code> you just have <code>A</code>.</p>",
        "id": 202808999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786428
    },
    {
        "content": "<p>Sorry, wrong word - when you say \"We do have\", I'm asking for the names of those ones</p>",
        "id": 202809009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786431
    },
    {
        "content": "<p>That seems more okay.</p>",
        "id": 202809011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786433
    },
    {
        "content": "<p>You could also <code>set_option trace.class_instances true</code> and try to figure out why it didn't apply the instances you expected.</p>",
        "id": 202809063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786476
    },
    {
        "content": "<p>I don't know if they have names. I think there are some in the category theory library.</p>",
        "id": 202809148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786510
    },
    {
        "content": "<p>Also <code>extends</code> on a class creates them automatically I think.</p>",
        "id": 202809158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Replacing.20.E2.84.A4.20with.20a.20type.20argument.20breaks.20type.20class.20synthesis/near/202808920\">said</a>:</p>\n<blockquote>\n<p>We do have instances like this but where the type isn't changing.</p>\n</blockquote>\n<p>I don't get the part \"where the type isn't changing\".</p>",
        "id": 202809209,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593786556
    },
    {
        "content": "<p>An instance that says: In order to get an instance of <code>C</code> for a type, you need an instance of <code>D</code> for the same type.</p>",
        "id": 202809264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593786587
    },
    {
        "content": "<p>Ah, that makes sense in the context of category theory.</p>",
        "id": 202809391,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593786653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Replacing.20.E2.84.A4.20with.20a.20type.20argument.20breaks.20type.20class.20synthesis/near/202807959\">said</a>:</p>\n<blockquote>\n<p>(I mean <code>instance has_coe (r s : ι) (h: r = s) : has_coe (A r) (A s)</code>, in case there are others)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What were you trying to have with this? I don't get it.</p>",
        "id": 202809582,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593786773
    },
    {
        "content": "<p>I was trying to have a coercion from <code>A (r + 0)</code> to <code>A r</code> if I had a local trivial proof that <code>r = r + 0</code></p>",
        "id": 202809640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786806
    },
    {
        "content": "<p>That seems to be not a coercion</p>",
        "id": 202809684,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593786838
    },
    {
        "content": "<p>They're just equal</p>",
        "id": 202809818,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593786897
    },
    {
        "content": "<p>Well, the lean type system doesn't allow me to make statements <code>arp0 = ar</code> if <code>ar : A r</code> and <code>arp0 : A (r + 0)</code>.<br>\nIt was an attempt at doing something like <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s  <code>canonical_map </code> in <a href=\"https://gist.githubusercontent.com/kbuzzard/f5ee35457c5d257ceec58c66d7da0c38/raw/e7eefed8190b436f4b6f34ee3895931e43859997/cdga.lean\">https://gist.githubusercontent.com/kbuzzard/f5ee35457c5d257ceec58c66d7da0c38/raw/e7eefed8190b436f4b6f34ee3895931e43859997/cdga.lean</a>, and looking for alternate spellings</p>",
        "id": 202809968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593786967
    },
    {
        "content": "<p>Are you sure it was <code>r + 0</code> and not <code>0 + r</code>?</p>",
        "id": 202810074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593787028
    },
    {
        "content": "<p>No, I'm probably misremembering the details</p>",
        "id": 202810434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593787233
    },
    {
        "content": "<p>That was a problem that I only got halfway through investigating before running into the titular issue of this thread.</p>",
        "id": 202810487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593787271
    },
    {
        "content": "<p>Unfortunately, <code>set_option trace.class_instances true</code> is not giving me anythiing I can easily sift though</p>",
        "id": 202810529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593787297
    },
    {
        "content": "<p>Perhaps I should instead be asking the question \"Is attempting to bundle type classes together like this sensible?\"</p>",
        "id": 202811983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593788162
    },
    {
        "content": "<p>An example of an instance which matches \"anything\" (and hence is probably a bad idea) is</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/isomorphism.lean#L210\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/isomorphism.lean#L210</a></p>\n<p>which allows typeclass inference to prove an isomorphism is an epimorphism.</p>",
        "id": 202857026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593839594
    },
    {
        "content": "<p>(the combination of \"inference\" and \"prove\" in that sentence may be a bad sign...)</p>",
        "id": 202857068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593839643
    },
    {
        "content": "<p>But here again the thing (no longer a type) <code>f</code> doesn't change.</p>",
        "id": 202872598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593867234
    }
]