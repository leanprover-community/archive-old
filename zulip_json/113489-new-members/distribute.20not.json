[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>gives this prompt which I didn't expect</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">02</span><span class=\"bp\">.</span><span class=\"n\">lean</span>   <span class=\"mi\">136</span>  <span class=\"mi\">24</span> <span class=\"n\">error</span>           <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n <span class=\"kn\">context</span><span class=\"o\">:</span>\n <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n <span class=\"err\">⊢</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n <span class=\"mi\">02</span><span class=\"bp\">.</span><span class=\"n\">lean</span>   <span class=\"mi\">136</span>  <span class=\"mi\">34</span> <span class=\"n\">error</span>           <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n <span class=\"kn\">context</span><span class=\"o\">:</span>\n <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n <span class=\"err\">⊢</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Why does it give that? How can I deal with it?</p>",
        "id": 184440686,
        "sender_full_name": "Iocta",
        "timestamp": 1577661746
    },
    {
        "content": "<p><code>¬p</code> is <code>p → false</code>.</p>",
        "id": 184440733,
        "sender_full_name": "Joe",
        "timestamp": 1577661840
    },
    {
        "content": "<p>Try this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre></div>",
        "id": 184440793,
        "sender_full_name": "Joe",
        "timestamp": 1577661882
    },
    {
        "content": "<p>Yep.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 184441128,
        "sender_full_name": "Iocta",
        "timestamp": 1577662358
    },
    {
        "content": "<p>You know about how to build these terms using <code>_</code>?</p>",
        "id": 184441133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662383
    },
    {
        "content": "<p>How do you mean?</p>",
        "id": 184441137,
        "sender_full_name": "Iocta",
        "timestamp": 1577662410
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 184441139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662421
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 184441141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 184441183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662463
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 184441186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662483
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 184441187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662501
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 184441197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662521
    },
    {
        "content": "<p>Oh -- I see Bryan just talked you through this in the other thread :-)</p>",
        "id": 184441272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662593
    },
    {
        "content": "<p>Ah that is similar reasoning to the .. yeah that :-)</p>",
        "id": 184441277,
        "sender_full_name": "Iocta",
        "timestamp": 1577662598
    },
    {
        "content": "<p>The <code>_</code> method is by far the most fun method of writing those proofs, especially when they can be done constructively.</p>",
        "id": 184441300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577662641
    },
    {
        "content": "<p>I didn't get why it decided hp and hq should be p and q?</p>",
        "id": 184441370,
        "sender_full_name": "Iocta",
        "timestamp": 1577662799
    },
    {
        "content": "<p>in </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">distribute_not&#39;</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 184441416,
        "sender_full_name": "Iocta",
        "timestamp": 1577662826
    },
    {
        "content": "<p>Because <code>¬p</code> is really just an abbreviation for <code>p → false</code>.</p>",
        "id": 184441497,
        "sender_full_name": "Joe",
        "timestamp": 1577663031
    },
    {
        "content": "<p>Here's the definition in lean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"kn\">prefix</span> <span class=\"bp\">`¬`</span> <span class=\"o\">:=</span> <span class=\"n\">not</span>\n</pre></div>",
        "id": 184441543,
        "sender_full_name": "Joe",
        "timestamp": 1577663072
    },
    {
        "content": "<p>You can <code>#check not</code> and then find the definition of <code>not</code> in the library if you are using vscode</p>",
        "id": 184441547,
        "sender_full_name": "Joe",
        "timestamp": 1577663102
    },
    {
        "content": "<p>I am using emacs, it just says <code> 02.lean   156   1 info            not : Prop → Prop (lean-checker)</code></p>",
        "id": 184441562,
        "sender_full_name": "Iocta",
        "timestamp": 1577663162
    },
    {
        "content": "<p>I'm not sure how to do that in emacs. But in vscode, you can <code>command</code> + click (or <code>ctrl</code> + click) to go to the definition of a name.</p>",
        "id": 184441688,
        "sender_full_name": "Joe",
        "timestamp": 1577663390
    },
    {
        "content": "<p>Oh I see what you mean. just a regular go-to-definition.</p>",
        "id": 184441731,
        "sender_full_name": "Iocta",
        "timestamp": 1577663420
    },
    {
        "content": "<p>Yes, right.</p>",
        "id": 184441732,
        "sender_full_name": "Joe",
        "timestamp": 1577663429
    },
    {
        "content": "<p>(<code>alt-.</code>)</p>",
        "id": 184441734,
        "sender_full_name": "Iocta",
        "timestamp": 1577663444
    },
    {
        "content": "<p>What's this about?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">factor_not</span><span class=\"o\">:</span>  <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hh</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))))</span>\n\n <span class=\"mi\">02</span><span class=\"bp\">.</span><span class=\"n\">lean</span>   <span class=\"mi\">143</span>  <span class=\"mi\">34</span> <span class=\"n\">error</span>           <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n   <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n <span class=\"n\">term</span>\n   <span class=\"n\">hp</span>\n <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"n\">p</span>\n <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 184443944,
        "sender_full_name": "Iocta",
        "timestamp": 1577668180
    },
    {
        "content": "<p>You have <code>not p</code> from <code>h.1</code></p>",
        "id": 184444109,
        "sender_full_name": "Joe",
        "timestamp": 1577668557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">factor_not</span><span class=\"o\">:</span>  <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 184444155,
        "sender_full_name": "Joe",
        "timestamp": 1577668588
    },
    {
        "content": "<p>Oh hah.</p>",
        "id": 184444288,
        "sender_full_name": "Iocta",
        "timestamp": 1577668885
    },
    {
        "content": "<p>But still - <code>has type p but is expected to have type ¬¬p</code> Why is that a problem?</p>",
        "id": 184444344,
        "sender_full_name": "Iocta",
        "timestamp": 1577668979
    },
    {
        "content": "<p>Yeah, <code>absurd</code> is, well, kind of rigid. It has type <code>p → ¬p → q</code>, not <code>¬p → p → q</code>, so <code>absurd ¬p p</code> does not type check.</p>",
        "id": 184444413,
        "sender_full_name": "Joe",
        "timestamp": 1577669153
    },
    {
        "content": "<p>Ok</p>",
        "id": 184444465,
        "sender_full_name": "Iocta",
        "timestamp": 1577669228
    },
    {
        "content": "<blockquote>\n<p>But still - <code>has type p but is expected to have type ¬¬p</code> Why is that a problem?</p>\n</blockquote>\n<p>because <code>p</code> and <code>¬¬p</code> are not <em>definitionally</em> equal</p>",
        "id": 184444945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577670149
    },
    {
        "content": "<p><code>¬p</code> being defined as <code>p → false</code></p>",
        "id": 184444949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577670179
    },
    {
        "content": "<p><code>not.elim</code> has the type <code>¬p → p → q</code></p>",
        "id": 184446624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577673426
    },
    {
        "content": "<p><code>absurdr</code> is a synonym</p>",
        "id": 184446625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577673440
    }
]