[
    {
        "content": "<p>Is there a term-mode equivalent of <code>cases</code>? Such as in the following example (the lemma <code>bla</code> is of course useless, just meant to provide a mwe)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variables</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variables</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">∨</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">blub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">bla</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- this is what I want to replace by term-mode</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232881468,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1617357429
    },
    {
        "content": "<p>Sure, you can use the recursor directly.</p>",
        "id": 232881504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617357467
    },
    {
        "content": "<p>Just omit begin end ?</p>",
        "id": 232881581,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1617357512
    },
    {
        "content": "<p>Also remember that <code>show_term</code> answers all these questions in principle.</p>",
        "id": 232881591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617357531
    },
    {
        "content": "<p>Use or.rec or or.elim or whatever it's called</p>",
        "id": 232881597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617357538
    },
    {
        "content": "<p><code>match</code> is also a term mode construct</p>",
        "id": 232881599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617357540
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">blub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">show_term</span> <span class=\"o\">{</span>  <span class=\"n\">cases</span> <span class=\"n\">bla</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- this is what I want to replace by term-mode</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232881613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617357552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">blub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bla</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 232881718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617357626
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">blub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">bla</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">or.inl</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">or.inr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232881837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617357708
    }
]