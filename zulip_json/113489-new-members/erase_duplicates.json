[
    {
        "content": "<p>Does mathlib have a function which erases list duplicates?</p>",
        "id": 148267520,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543046041
    },
    {
        "content": "<p>Maybe <code>list.pw_filter</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pw_filter</span> <span class=\"o\">(</span><span class=\"bp\">≠</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- [3, 5, 2, 4, 1]</span>\n</pre></div>",
        "id": 148267854,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543046597
    },
    {
        "content": "<p>Oh, <code>list.erase_dup</code> is defined to be <code>pw_filter (≠)</code>. But its docstring is wrong:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> `erase_dup l` removes duplicates from `l` (taking only the first occurrence).</span>\n\n<span class=\"cm\">     erase_dup [1, 2, 2, 0, 1] = [1, 2, 0] -/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">erase_dup</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- [2, 0, 1]</span>\n</pre></div>",
        "id": 148267993,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543046898
    },
    {
        "content": "<p>It removed the first \"1\" and the first \"2\"</p>",
        "id": 148268163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543047332
    },
    {
        "content": "<p>Should it say \"...leaving only the last occurrence\"?</p>",
        "id": 148268210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543047408
    },
    {
        "content": "<p>yeah, obviously I meant first from the right end ;)</p>",
        "id": 148268668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543048498
    },
    {
        "content": "<p>I'm putting together a PR that fixes this and also improves the other docstrings in <code>data.list.basic</code>. I found that the example given for <code>list.sigma</code> is also wrong:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> `sigma l₁ l₂` is the list of dependent pairs `(a, b)` where `a ∈ l₁` and `b ∈ l₂ a`.</span>\n\n<span class=\"cm\">     sigma [1, 2] (λ_, [5, 6]) = [(1, 5), (1, 6), (2, 5), (2, 6)] -/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sigma</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">])</span>\n<span class=\"c\">/-</span><span class=\"cm\"> don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ ℕ → Type ?</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>The following works, but I don't think this would make a good example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sigma</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">])</span> <span class=\"c1\">--[(1, 5), (1, 6), (2, 5), (2, 6)]</span>\n</pre></div>\n\n\n<p>Any suggestions?</p>",
        "id": 148269503,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543050374
    },
    {
        "content": "<p>hm, that's weird</p>",
        "id": 148269615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543050627
    },
    {
        "content": "<p>does a type ascription on <code>[5,6]</code> work?</p>",
        "id": 148269616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543050640
    },
    {
        "content": "<p>or even just on <code>5</code></p>",
        "id": 148269622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543050681
    },
    {
        "content": "<p>Ah, yes, that works.</p>",
        "id": 148269665,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543050734
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/493\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/493\">https://github.com/leanprover/mathlib/pull/493</a></p>",
        "id": 148271040,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543053483
    }
]