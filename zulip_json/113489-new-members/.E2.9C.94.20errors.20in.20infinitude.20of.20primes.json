[
    {
        "content": "<p>I am following the infinitude of primes demo, and I got here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I am getting these errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">N.factorial</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">M.min_fac</span><span class=\"o\">,</span>\n<span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">begin</span><span class=\"bp\">-</span><span class=\"kd\">end</span><span class=\"bp\">'</span> <span class=\"n\">expression</span><span class=\"o\">,</span> <span class=\"sc\">','</span> <span class=\"n\">expected</span>\n</code></pre></div>\n<p>Why are they happening?</p>",
        "id": 280566987,
        "sender_full_name": "Joseph O",
        "timestamp": 1651187049
    },
    {
        "content": "<p>You are using <code>|</code> instead of <code>∣</code>.</p>",
        "id": 280567215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651187236
    },
    {
        "content": "<p>Oh, it was hard to see.</p>",
        "id": 280567334,
        "sender_full_name": "Joseph O",
        "timestamp": 1651187324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 280567358,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651187353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 280568769,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651188505
    },
    {
        "content": "<p>Another thing, in the video, he used <code>refine pp.dvd_fact.mpr _,</code>. Does that not exist anymore, or does it do something different, because I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">dvd_fact'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">nat.prime.dvd_fact'</span>\n  <span class=\"n\">pp</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">prime</span> <span class=\"n\">p</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">vatis</span><span class=\"bp\">\\</span><span class=\"n\">Desktop</span><span class=\"bp\">\\</span><span class=\"n\">programming</span><span class=\"bp\">\\</span><span class=\"n\">provings</span><span class=\"bp\">\\</span><span class=\"n\">basics</span><span class=\"bp\">\\</span><span class=\"n\">nats</span><span class=\"bp\">\\</span><span class=\"n\">inf_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">dvd_fact'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">irreducible.dvd_fact'</span>\n  <span class=\"n\">pp</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">irreducible</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 280568808,
        "sender_full_name": "Joseph O",
        "timestamp": 1651188552
    },
    {
        "content": "<p>Try <code>dvd_factorial</code> instead of <code>dvd_fact</code>.</p>",
        "id": 280568965,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1651188684
    },
    {
        "content": "<p>what does <code>.mpr</code> do?</p>",
        "id": 280569000,
        "sender_full_name": "Joseph O",
        "timestamp": 1651188717
    },
    {
        "content": "<p>\"modus ponens reverse\" it's the \"backwards direction\" of an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff\">docs#iff</a></p>",
        "id": 280569089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651188788
    },
    {
        "content": "<p>any idea about this? <a href=\"/user_uploads/3121/G2fpnpHm0I6CLxSO7l82tTIe/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/G2fpnpHm0I6CLxSO7l82tTIe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/G2fpnpHm0I6CLxSO7l82tTIe/image.png\"></a></div>",
        "id": 280569244,
        "sender_full_name": "Joseph O",
        "timestamp": 1651188932
    },
    {
        "content": "<p>I tried restarting the server</p>",
        "id": 280569258,
        "sender_full_name": "Joseph O",
        "timestamp": 1651188940
    },
    {
        "content": "<p>The <code>end</code> is probably causing issues since there isn't a matching <code>begin</code>.</p>",
        "id": 280569386,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1651189035
    },
    {
        "content": "<p>Oh know what happened to the <code>begin</code></p>",
        "id": 280569476,
        "sender_full_name": "Joseph O",
        "timestamp": 1651189110
    },
    {
        "content": "<p>Thanks</p>",
        "id": 280569741,
        "sender_full_name": "Joseph O",
        "timestamp": 1651189376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 280570152,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651189785
    },
    {
        "content": "<p>When I am writing Lean code, I always try to have at most one error at any given time.  This means that usually the error is in the very last part of the code that I changed and then the error messages make much more sense.</p>\n<p>Even so, it takes practice to understand what some of the errors mean, but usually they are clear!</p>",
        "id": 280586223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651207587
    }
]