[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn_ub</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">fn_lb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fn_has_ub</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fn_ub</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">fn_has_lb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fn_lb</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">fn_has_ub</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">fnub</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fnub</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">fnuba</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fn_ub</span> <span class=\"n\">at</span> <span class=\"n\">fnuba</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242530283,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623617855
    },
    {
        "content": "<p>I'm not sure how to affirm the x as a variable, since it is within a universal statement</p>",
        "id": 242530333,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623617899
    },
    {
        "content": "<p>specialize fnuba (a + 1)</p>",
        "id": 242530531,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623618208
    },
    {
        "content": "<p>The term <code>fnuba</code> is a term of type \"for all...\" so it is literally a function (which takes a number as input, and outputs a proof!). You could also do <code>have h := fnuba (a+1)</code>.</p>",
        "id": 242532670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623621392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_monotone_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">monotone</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">monotone</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- END</span>\n</code></pre></div>",
        "id": 242652919,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623701463
    },
    {
        "content": "<p>How do I introduce a new hypothesis that says a &lt;= b -&gt; -b &lt;= a</p>",
        "id": 242652975,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623701500
    },
    {
        "content": "<p>Since a and b are not introduced</p>",
        "id": 242652983,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623701506
    },
    {
        "content": "<p>Do you know a counterexample, that would disprove this?  (That is, with actual numbers, like a = 7 and b = 17, or something.)</p>",
        "id": 242653189,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623701602
    },
    {
        "content": "<p>Try finding the counterexample on paper and then applying <code>hab</code> to that counterexample.</p>",
        "id": 242653230,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623701626
    },
    {
        "content": "<p>Maybe Shadman is confused by the implicit binders</p>",
        "id": 242653473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623701754
    },
    {
        "content": "<p>You can state something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and then <code>specialize hab key</code> (there is a faster way of course, but this should be clearer)</p>",
        "id": 242653638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623701831
    },
    {
        "content": "<p>Thank you! It worked.</p>",
        "id": 242654641,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623702324
    },
    {
        "content": "<p>Another question when dealing with partial orders, I want to apply two hypotheses with exact to show the goal but I am not sure how.</p>",
        "id": 242654773,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623702371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₀</span><span class=\"o\">,},</span>\n    <span class=\"o\">{</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- END</span>\n</code></pre></div>",
        "id": 242654794,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623702380
    },
    {
        "content": "<p>There are two unproved pieces here -- which part are you asking for help on?</p>",
        "id": 242654954,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623702479
    },
    {
        "content": "<p>You might like to read the instructions at the following link: <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which will help you ask more focused questions.  For example, here you could have asked instead how to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(which is the goal state after all the work you show towards the first sorry).</p>",
        "id": 242655219,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623702669
    },
    {
        "content": "<p>The first sorry</p>",
        "id": 242655230,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623702674
    },
    {
        "content": "<p>OK!  So, you need to prove that <code>¬b ≤ a</code> implies <code>a ≠ b</code>.  Do you know how to prove its contrapositive, that <code>a = b</code> implies <code>b ≤ a</code>?</p>",
        "id": 242655486,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623702822
    },
    {
        "content": "<p>Ahh yes we would use rw after contraposing h\\1.</p>",
        "id": 242655781,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623702967
    },
    {
        "content": "<p>More than one way to do it, Thank you!</p>",
        "id": 242655838,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623703001
    }
]