[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A function is involutive, if `f ∘ f = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">involutive</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">involutive_iff_iter_2_eq_id</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">involutive</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext_iff.symm</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">involutive</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">involutive</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_self</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">left_inverse</span> <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">right_inverse</span> <span class=\"o\">:</span> <span class=\"n\">right_inverse</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">injective</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">h.left_inverse.injective</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">surjective</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">bijective</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h.injective</span><span class=\"o\">,</span> <span class=\"n\">h.surjective</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>i'm confused on why lemmas like <code>protected lemma injective : injective f := h.left_inverse.injective</code> are allowed to use <code>injective</code> in the name of the lemma, the proof goal, and the proof itself? is <code>injective</code>also defined elsewhere?</p>",
        "id": 247397721,
        "sender_full_name": "Holly Liu",
        "timestamp": 1627423247
    },
    {
        "content": "<p>Yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective\">docs#function.injective</a></p>",
        "id": 247399681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627424300
    },
    {
        "content": "<p>Hovering over the name in vscode should tell you that</p>",
        "id": 247399733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627424349
    },
    {
        "content": "<p>Or failing that, right clicking and saying \"go to definition\"</p>",
        "id": 247399749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627424365
    },
    {
        "content": "<p>thanks. yes, i am able to see the definition by hovering, although \"go to definition\" doesn't yield anything for me. i'm searching the github files which doesn't have those mechanisms.</p>",
        "id": 247404389,
        "sender_full_name": "Holly Liu",
        "timestamp": 1627427248
    },
    {
        "content": "<p>The word after \"lemma\" is the name for the lemma. It can be basically anything. \"protected\" means it will be named \"involutive.injective\", because we are in the \"involutive\" namespace, and even if someone did \"open involutive\". The second \"injective\" refers to \"function.injective\". It can't refer to the \"injective\" we just named, because that is only available (when proving in this fashion) after our proof. The third injective is from \"left_injective.injective\", which is the lemma that states that given a hypothesis that some function is a \"left_inverse\", then it means the function discussed is injective.</p>",
        "id": 247412142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627434914
    },
    {
        "content": "<p>thanks for the reply! could you elaborate on <code>left_inverse.injective</code>? are you referring to <code>protected lemma left_inverse : left_inverse f f := h</code> and if so, does appending a <code>.inverse</code> to this function (<code>left_inverse.injective</code>) make it the injective property related to <code>left_inverse</code> ?</p>",
        "id": 247424474,
        "sender_full_name": "Holly Liu",
        "timestamp": 1627451579
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.left_inverse.injective\">docs#function.left_inverse.injective</a></p>",
        "id": 247425619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627452992
    },
    {
        "content": "<p>It's that.</p>",
        "id": 247425656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627453048
    },
    {
        "content": "<p>so is <code>h.left_inverse.injective</code> equivalent to <code>left_inverse.injective h</code>?</p>",
        "id": 247511632,
        "sender_full_name": "Holly Liu",
        "timestamp": 1627503413
    },
    {
        "content": "<p>Yes, as long as you have \"open function\"</p>",
        "id": 247513412,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627504361
    },
    {
        "content": "<p>It's not just equivalent, it is literally the same.</p>",
        "id": 247513437,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627504380
    }
]