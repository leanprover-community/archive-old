[
    {
        "content": "<p>I am trying to formalize a solution from a mathematical competition and, as a part of the proof, I need the following lemma:</p>\n<p>If <code>f</code> is an increasing function on positive reals and <code>f</code> is linear on positive rationals, then <code>f</code> must be linear on positive reals.</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lin_on_real</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">increasing</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>  <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>  <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lin_on_rat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>  <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span> <span class=\"o\">:</span>           <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>  <span class=\"bp\">→</span>  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289247463,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657572202
    },
    {
        "content": "<p>Any reason you're not using \\Q?</p>",
        "id": 289247809,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657572379
    },
    {
        "content": "<p>Thanks, I'll edit it!</p>",
        "id": 289247859,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657572417
    },
    {
        "content": "<p>Just guessing vaguely: is there anything relevant in <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/dense_embedding.html\">https://leanprover-community.github.io/mathlib_docs/topology/dense_embedding.html</a> ?</p>",
        "id": 289248126,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657572571
    },
    {
        "content": "<p>Unfortunately, the link didn't help me. I don't understand this abstract math, which is obviously a big problem for me if I want to work with mathlib, since almost all mathematical results that are relevant for me are special cases of some more abstract results, and these abstract results are in mathlib.</p>\n<p>So, before I give up, does anybody have a beginner-friendly advice on how to prove my lemma?</p>",
        "id": 289294197,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657615461
    },
    {
        "content": "<p>Do you know a maths proof?</p>",
        "id": 289337137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657638033
    },
    {
        "content": "<p>If so, just write that proof down.</p>",
        "id": 289337166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657638046
    },
    {
        "content": "<p>Informal proof starts with a well-known property:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>For every real number <code>x</code> and every <code>ε &gt; 0</code> there exists a rational numbers <code>x₁</code> and <code>x₂</code> such that <code>x₁ &lt; x &lt; x₂</code> and <code>x - x₁, x₂ - x &lt; ε / (f 2 - f 1)</code>. From <code>increasing</code> we have <code>f x₁ &lt; f x &lt; f x₂</code>. From <code>lin_on_rat</code> we have <code>f x₁ = f 1 + (x₁ - 1) * (f 2 - f 1)</code> and <code>f x₂ = f 1 + (x₂ - 1) * (f 2 - f 1)</code>. We observe <code>f x - f x₁, f x₂ - f x &lt; ε</code>. Hence <code>| (f 1 + (x - 1) * (f 2 - f 1)) - f x | &lt; ε</code>. The property above gives us <code>f x = f 1 + (x - 1) * (f 2 - f 1)</code>.</p>",
        "id": 289358391,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657646810
    },
    {
        "content": "<p>Now back to Lean! How can I say <code>x₁ &lt; x</code> when <code>x₁ : ℚ</code> but <code>x : ℝ</code> please?</p>",
        "id": 289360097,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657647528
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat_dense_cast\">docs#rat_dense_cast</a> should help</p>",
        "id": 289360182,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657647571
    },
    {
        "content": "<p><code>(x₁ :  ℝ) &lt; x</code> is the proposition</p>",
        "id": 289360309,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657647621
    },
    {
        "content": "<p>and the lemma I shared is that the coercion is has dense range.</p>",
        "id": 289360370,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657647653
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_at_of_monotone_on_of_exists_between\">docs#continuous_at_of_monotone_on_of_exists_between</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.ext_on\">docs#continuous.ext_on</a> could help?</p>",
        "id": 289360448,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657647692
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_rat_btwn\">docs#exists_rat_btwn</a></p>",
        "id": 289360478,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657647714
    },
    {
        "content": "<p>I found that lemma by looking at the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat_dense_cast/src\">src#rat_dense_cast</a></p>",
        "id": 289360543,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657647729
    },
    {
        "content": "<p>offtopic: I read those like \"exists rat by the way\" and \"rat dense cat\" <span aria-label=\"rat\" class=\"emoji emoji-1f400\" role=\"img\" title=\"rat\">:rat:</span> <span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span></p>",
        "id": 289361247,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657648052
    },
    {
        "content": "<p>I have another awkward technical moment.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289368242,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657651350
    },
    {
        "content": "<p>assumption_mod_cast</p>",
        "id": 289368676,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657651549
    },
    {
        "content": "<p>Thanks a lot! Can I somehow add this tactic to the list of tactics tried by <code>hint</code> please?</p>",
        "id": 289369201,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657651785
    },
    {
        "content": "<p>I assume you guys meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.dense_range_cast\">docs#rat.dense_range_cast</a> above, right?</p>",
        "id": 289375390,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657654799
    },
    {
        "content": "<p>I have finally proved the lemma!<br>\n<a href=\"https://github.com/madvorak/math-competition/blob/77eaa2132d82792a22ae29976a8805ff436ce802/src/functional_equation.lean#L69\">https://github.com/madvorak/math-competition/blob/77eaa2132d82792a22ae29976a8805ff436ce802/src/functional_equation.lean#L69</a></p>",
        "id": 289438229,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657707166
    },
    {
        "content": "<p>Is there a two-line proof of <code>lin_on_real</code> with a help of something powerful from mathlib?</p>",
        "id": 289438594,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1657707399
    }
]