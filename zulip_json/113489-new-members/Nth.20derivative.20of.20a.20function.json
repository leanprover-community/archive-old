[
    {
        "content": "<p>I want to write a definition <code>Dn</code> that  represents the nth derivative in one variable. This is what I'm trying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Function definitions-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Dn</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.has_well_founded</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.has_sizeof</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">default_has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">using_well_founded'</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kd\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"kn\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">have</span><span class=\"bp\">'-</span><span class=\"n\">expressions.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">default_dec_tac</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">prod.lex</span> <span class=\"n\">has_lt.lt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't understand this error, what does <code>using_well_founded</code> means?</p>",
        "id": 320123588,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673215795
    },
    {
        "content": "<p>Your function currently takes an argument of type <code>ℕ × (ℝ → ℝ)</code>. I'd recommend switching this to a curried function style, where your function type is <code>ℕ → (ℝ → ℝ) → (ℝ → ℝ)</code>.</p>",
        "id": 320123661,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673215854
    },
    {
        "content": "<p>Then I believe the error will disappear.</p>",
        "id": 320123674,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673215863
    },
    {
        "content": "<p>Are you familiar with functional programming in other languages?</p>",
        "id": 320123697,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673215891
    },
    {
        "content": "<p>You will find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate\">docs#nat.iterate</a> useful</p>",
        "id": 320123786,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673215955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Nth.20derivative.20of.20a.20function/near/320123697\">said</a>:</p>\n<blockquote>\n<p>Are you familiar with functional programming in other languages?</p>\n</blockquote>\n<p>This is my first time working with this sort of language</p>",
        "id": 320123794,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673215968
    },
    {
        "content": "<p>I'd recommend looking at <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/functions-and-definitions.html\">this page</a> in Functional Programming in Lean for more information, but basically:</p>",
        "id": 320123837,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673216015
    },
    {
        "content": "<p>Suppose your function takes multiple inputs, say, <code>a</code> and <code>b</code>, and outputs <code>c</code>. It's usually easier to define it as a function which takes an input <code>a</code> and spits out a second function, which takes an input <code>b</code> and outputs <code>c</code>.</p>",
        "id": 320123913,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673216069
    },
    {
        "content": "<p>So you'd write the type as <code>a -&gt; (b -&gt; c)</code>, or more concisely, <code>a -&gt; b -&gt; c</code>.</p>",
        "id": 320123927,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673216084
    },
    {
        "content": "<p>All of Lean's syntax is built to accommodate this programming style, including things like function applications, where you just write <code>f a b</code> instead of <code>f(a)(b)</code>.</p>",
        "id": 320123968,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673216127
    },
    {
        "content": "<p>To answer your original question, Lean will check every definition you write to make sure that it doesn't infinitely loop. The in-built method for determining this wasn't able to verify that <code>Dn</code> doesn't infinitely loop, because it used the comparatively more complicated type <code>ℕ × (ℝ → ℝ)</code>. If instead you use just <code>ℕ</code>, then pass <code>(ℝ → ℝ)</code> as another parameter afterwards, it's easier to figure out that it doesn't infinitely loop.</p>",
        "id": 320124080,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673216214
    },
    {
        "content": "<p><code>using_well_founded</code> is a way to basically tell Lean a proof that your function doesn't loop infinitely.</p>",
        "id": 320124098,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673216237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Nth.20derivative.20of.20a.20function/near/320124080\">said</a>:</p>\n<blockquote>\n<p>To answer your original question, Lean will check every definition you write to make sure that it doesn't infinitely loop. The in-built method for determining this wasn't able to verify that <code>Dn</code> doesn't infinitely loop, because it used the comparatively more complicated type <code>ℕ × (ℝ → ℝ)</code>. If instead you use just <code>ℕ</code>, then pass <code>(ℝ → ℝ)</code> as another parameter afterwards, it's easier to figure out that it doesn't infinitely loop.</p>\n</blockquote>\n<p>Using your explanation, I managed to write this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">D</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Dn</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>The last error is gone, but now I receive a message saying \"<code>rec_fn_macro</code> only allowed in meta definitions\". What is that?</p>",
        "id": 320132921,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673224396
    },
    {
        "content": "<p>that's an error reporting bug, but that definition is not even well founded, it loops infinitely for <code>n &gt;= 2</code></p>",
        "id": 320133139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673224589
    },
    {
        "content": "<p>you most likely wanted to write <code>Dn (a-1)</code> instead of <code>Dn a - 1</code>, but this won't work either, because we can't prove in that context that <code>a</code> is nonzero. You can write it with a <code>+1</code> instead though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">D</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Dn</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 320133204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673224672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Nth.20derivative.20of.20a.20function/near/320133204\">said</a>:</p>\n<blockquote>\n<p>you most likely wanted to write <code>Dn (a-1)</code> instead of <code>Dn a - 1</code>, but this won't work either, because we can't prove in that context that <code>a</code> is nonzero. You can write it with a <code>+1</code> instead though:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">D</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Dn</span> <span class=\"n\">a</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Somehow it still yields the same error</p>",
        "id": 320133309,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673224769
    },
    {
        "content": "<p>I think the error message is about a missing <code>noncomputable</code></p>",
        "id": 320133326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673224799
    },
    {
        "content": "<p>most likely <code>D</code> is a <code>noncomputable def</code></p>",
        "id": 320133378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673224816
    },
    {
        "content": "<p>Huh, that seems to have worked. What does the <code>noncomputable</code> does exactly?</p>",
        "id": 320133408,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673224852
    },
    {
        "content": "<p>Is it that I cannot get a number from it from #eval?</p>",
        "id": 320133436,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673224876
    },
    {
        "content": "<p>it says that lean shouldn't attempt to compile it so you can't use it in <code>#eval</code></p>",
        "id": 320133444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673224884
    },
    {
        "content": "<p>Ah got it. Thanks!</p>",
        "id": 320133465,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673224909
    },
    {
        "content": "<p>Note that <code>Dn</code> is not actually the right definition, you probably want <code>D \\circ Dn a</code> or something in the <code>(a+1)</code> case.</p>",
        "id": 320136141,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673227229
    },
    {
        "content": "<p>You can simply write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p><code>F^[n]</code> is notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.iterate\">docs#nat.iterate</a></p>",
        "id": 320155283,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673245248
    },
    {
        "content": "<p><code>iterated_deriv</code> might be what is wanted here.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/iterated_deriv.html#iterated_deriv\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/iterated_deriv.html#iterated_deriv</a></p>",
        "id": 320155418,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673245334
    }
]