[
    {
        "content": "<p>Given the two hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Z</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I would like to extract  the following hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>How can i do this?</p>",
        "id": 255725815,
        "sender_full_name": "Elias Fåkvam",
        "timestamp": 1633086143
    },
    {
        "content": "<p><code>cases h1 with a ha</code> shows you that <code>h1</code> is already this.</p>",
        "id": 255726325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633086406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is best btw</p>",
        "id": 255726422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633086464
    },
    {
        "content": "<p>Oh if you just want the existence statement, that is <em>by definition</em> <code>h1</code> so you can just use <code>change</code>. Alternatively you can just pretend that <code>h1</code> is what you want it to say. Can you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? i.e. put in all the imports and the variables etc</p>",
        "id": 255726567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633086533
    }
]