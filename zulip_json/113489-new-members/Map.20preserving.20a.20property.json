[
    {
        "content": "<p>I need to construct a set starting from some other set and a a function to map over the elements. How can I preserve the properties the function guarantees?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">res</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">res</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208454395,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598735773
    },
    {
        "content": "<p>I'm guessing you want something other than <code>{ab | p ab.1 ab.2}</code>? (Or the empty set, for that matter?)</p>",
        "id": 208455131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598737036
    },
    {
        "content": "<p>You can use mathlib's <code>choose</code> tactic to pick a choice function: <code>choose f hf using f,</code></p>",
        "id": 208455184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598737099
    },
    {
        "content": "<p>What I want to do is to use <code>f</code> at every element of <code>s</code> to produce a new <code>set</code> with <code>\\a s</code> and <code>\\b s</code>, but still retain somehow the fact that the elements of the new set have the property <code>p</code>.</p>\n<p>I'll look into <code>choose</code>, thank you.</p>",
        "id": 208455910,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598738224
    },
    {
        "content": "<p><code>choose</code> gives you a function F : alpha -&gt; beta such that <code>p a (F a)</code> is always true, and it's easy from there.</p>",
        "id": 208456040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598738449
    },
    {
        "content": "<p><code>choose</code> made the trick. Thank you!</p>",
        "id": 208498964,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598813610
    }
]