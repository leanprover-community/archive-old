[
    {
        "content": "<p>Given natural number r,s \\in \\N, I would like to define the inclusion {n : \\N | n \\leq r} \\to {n : \\N | n \\leq r+s}, but I am having a hard time convincing Lean that the first set is a subset of the other.</p>\n<p>Can someone suggest a quick way of defining the inclusion above?</p>\n<p>More generally, is there a similar fix in the case in which S is a subset of T and I want to have the inclusion of S in T?</p>\n<p>Thank you very much!</p>",
        "id": 206806410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597320247
    },
    {
        "content": "<p>There is <code>inclusion</code> in <code>data.set.basic</code>. Does it help you?</p>",
        "id": 206806799,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597320524
    },
    {
        "content": "<p>It sounds promising!  How can I use it?</p>",
        "id": 206806856,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597320576
    },
    {
        "content": "<p>If you have <code>h</code> a proof that <code>s : set alpha</code> is included in <code>t : set alpha</code>, then <code>inclusion h</code> is the canonical inclusion from <code>s</code> (seen as a Type) to <code>t</code> (seen as a Type).</p>",
        "id": 206807042,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597320696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> what do you mean by \"the inclusion\"? What kind of object is an inclusion?</p>",
        "id": 206807127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320742
    },
    {
        "content": "<p>Ok, so then my question is how to prove that {n : ℕ | n ≤ r } is a subset of {n : ℕ | n ≤ r+s }?</p>",
        "id": 206807136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597320749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206807127\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> what do you mean by \"the inclusion\"? What kind of object is an inclusion?</p>\n</blockquote>\n<p>I have the two initial intervals of the natural numbers, from 0 to r and from 0 to r+s and I would like to view an element of the first interval as an element of the second one as well.  I hope that this is clear!</p>",
        "id": 206807207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597320812
    },
    {
        "content": "<p>What do you mean by an element of the first interval?</p>",
        "id": 206807297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320861
    },
    {
        "content": "<p>the first set is {0,1,2,...,r}, the second one is {0,1,2,...,r,r+1,...,r+s}.  The first r+1 elements are in common and I would like to assign to 0 in the first interval 0 in the second and so on.</p>",
        "id": 206807368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597320916
    },
    {
        "content": "<p>What is the type of an element of the first set?</p>",
        "id": 206807400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320938
    },
    {
        "content": "<p>I think Kevin wants you to insist on the difference between sets and types. Are you familiar with these notions?</p>",
        "id": 206807412,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597320950
    },
    {
        "content": "<p>I know Damiano, I am just trolling him :-)</p>",
        "id": 206807451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320962
    },
    {
        "content": "<p>Damiano -- it seems to me that your question is actually this: if n is a natural number then prove n&lt;=r implies n&lt;=r+s</p>",
        "id": 206807495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206807451\">said</a>:</p>\n<blockquote>\n<p>I know Damiano, I am just trolling him :-)</p>\n</blockquote>\n<p>Glad to hear this, since I was completely lost by your question!</p>",
        "id": 206807510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321016
    },
    {
        "content": "<p>But you see, as mathematicians we have 100 equivalent ways of thinking about something.</p>",
        "id": 206807516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321021
    },
    {
        "content": "<p>and in Lean you have to write down an explicit term, which says very precisely what you mean</p>",
        "id": 206807537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321041
    },
    {
        "content": "<p>and there are ten ways to write down a term corresponding to your original vague (as far as Lean is concerned) question</p>",
        "id": 206807570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321074
    },
    {
        "content": "<p>For the record, here is a solution to your question, but to understand it properly you should pay attention to every little detail, notably <code>//</code> vs. <code>|</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">my_beautiful_inclusion</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inclusion</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206807620,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597321084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206807495\">said</a>:</p>\n<blockquote>\n<p>Damiano -- it seems to me that your question is actually this: if n is a natural number then prove n&lt;=r implies n&lt;=r+s</p>\n</blockquote>\n<p>I have been able to get Lean to accept this, but it took many lines of code and I am not sure that the result is what I want, since when I try to use it, Lean then produces lots of symbols that I do not understand...</p>",
        "id": 206807627,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321087
    },
    {
        "content": "<p>If you think that an inclusion is a function, then there is an issue here, because functions in Lean are functions between types, and sets in Lean are not types, they are terms</p>",
        "id": 206807674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321128
    },
    {
        "content": "<p>so in some literal sense it is not even possible to write down a function between two sets</p>",
        "id": 206807697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321147
    },
    {
        "content": "<p>but on the other hand of course you can do something</p>",
        "id": 206807714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321165
    },
    {
        "content": "<p>but first you have to make the sets into types.</p>",
        "id": 206807734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321175
    },
    {
        "content": "<p>On the other hand, if all you are trying to express is that something in the first set is in the second set</p>",
        "id": 206807767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321199
    },
    {
        "content": "<p>Ok, first of all, thank you <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> for the code: I will try to use it!!</p>\n<p>Second, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I am still trying to get my head around how to write mathematics in Lean and the distinction between sets types and terms is still hazy for me!</p>\n<p>Anyway, thank you very much for your help!</p>",
        "id": 206807837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321227
    },
    {
        "content": "<p>then you can imagine that the first set is defined by a predicate <code>P : nat -&gt; Prop</code> and the second set is defined by a predicate <code>Q : nat -&gt; Prop</code>, and all you have to do is to prove <code>forall x, P x -&gt; Q x</code></p>",
        "id": 206807843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321231
    },
    {
        "content": "<p>As a mathematician these two ways of thinking about the problem are trivially equivalent, but as you can see they are different ways of packaging up the same information in Lean</p>",
        "id": 206807879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321271
    },
    {
        "content": "<p>Sebastien posted code which constructs a function between two subtypes. Do you see he used <code>//</code> and not <code>|</code>?</p>",
        "id": 206807903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206807903\">said</a>:</p>\n<blockquote>\n<p>Sebastien posted code which constructs a function between two subtypes. Do you see he used <code>//</code> and not <code>|</code>?</p>\n</blockquote>\n<p>I see it, but I suspect that I am not understanding what I am seeing!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 206807969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321348
    },
    {
        "content": "<p>Here is some code which also answers your question:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206808006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321380
    },
    {
        "content": "<p>Sebastian has written down a function, and functions go between types, and sets are not types.</p>",
        "id": 206808035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321401
    },
    {
        "content": "<p>However given a set <code>{x : X | P x}</code> there is a corresponding type <code>{x : X // P x}</code> which packages up the same information in a different way</p>",
        "id": 206808074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321433
    },
    {
        "content": "<p>It's like how Cauchy sequences modulo equivalence package up the same information as Dedekind cuts</p>",
        "id": 206808131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321451
    },
    {
        "content": "<p><code>{n // n ≤ r}</code> is <em>not</em> a subset of the integers, it's a type, so something of a different nature, in a way carved out of the integers. For instance, the integer <code>0</code> does not belong to it (and asking if it does is a question that does not even make sense)</p>",
        "id": 206808151,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1597321466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206808035\">said</a>:</p>\n<blockquote>\n<p>Sebastian has written down a function, and functions go between types, and sets are not types.</p>\n</blockquote>\n<p>Indeed, what you wrote is more concise than what I have been using, but it is in this spirit.  Yet, I feel that this approach that I was following was heavy and I think that I prefer the other... provided I understand how it works!</p>",
        "id": 206808175,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321504
    },
    {
        "content": "<p>So you have some mental model of how things work, and it's in some instances different to how Lean's model works.</p>",
        "id": 206808195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321517
    },
    {
        "content": "<p>Did you read <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/</a> ?</p>",
        "id": 206808216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206808216\">said</a>:</p>\n<blockquote>\n<p>Did you read <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/</a> ?</p>\n</blockquote>\n<p>I did not: my introduction to Lean so far has been playing your natural numbers game, watching a couple of your online lectures and then using the reference manuals for lean that I found online.</p>",
        "id": 206808299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321594
    },
    {
        "content": "<p>So the way type theory works is that instead of this one fundamental thing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> there is one fundamental thing <code>:</code></p>",
        "id": 206808336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321631
    },
    {
        "content": "<p>and <code>x : X</code> means that the term <code>x</code> has the type <code>X</code></p>",
        "id": 206808349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321646
    },
    {
        "content": "<p>and every type is a term, but not every term is a type</p>",
        "id": 206808365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321656
    },
    {
        "content": "<p>For example <code>π : ℝ</code> and <code>ℝ : Type</code></p>",
        "id": 206808424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321683
    },
    {
        "content": "<p>Every term has a unique type.</p>",
        "id": 206808449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321693
    },
    {
        "content": "<p>Uniqueness is quite shocking to mathematicians, because it is not our mental model for how things work</p>",
        "id": 206808487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321729
    },
    {
        "content": "<p>In Lean <code>a  = b</code> only makes sense if <code>a</code> and <code>b</code> have the same type.</p>",
        "id": 206808553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206808365\">said</a>:</p>\n<blockquote>\n<p>and every type is a term, but not every term is a type</p>\n</blockquote>\n<p>Are proofs terms that are not types?</p>",
        "id": 206808624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321804
    },
    {
        "content": "<p>They're a great example</p>",
        "id": 206808634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321812
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is another great example</p>",
        "id": 206808651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321822
    },
    {
        "content": "<p>In set theory, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is a set whose elements you don't care about (maybe they're Cauchy sequences, maybe they're Dedekind cuts, who cares)</p>",
        "id": 206808678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321842
    },
    {
        "content": "<p>in type theory, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is a term but not a type, so <code>a : π</code> makes no sense</p>",
        "id": 206808710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206808651\">said</a>:</p>\n<blockquote>\n<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is another great example</p>\n</blockquote>\n<p>Is it correct/reasonable/fruitful to think of \\pi as a proof that \\R is not empty?</p>",
        "id": 206808720,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597321875
    },
    {
        "content": "<p>You can think of it like that, but the issue there is that <code>37 : ℝ</code> so 37 would be a different proof because <code>37 \\ne \\pi</code></p>",
        "id": 206808762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321912
    },
    {
        "content": "<p>and the big difference between the Type universe and the Prop universe is that if <code>X : Type</code> and <code>a : X</code> and <code>b : X</code> then <code>a = b</code> makes sense but it might not be true</p>",
        "id": 206808825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321937
    },
    {
        "content": "<p>whereas if <code>P : Prop</code> and <code>a : P</code> and <code>b : P</code> then <code>a = b</code> is true by definition</p>",
        "id": 206808843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321958
    },
    {
        "content": "<p>Types in the Prop universe (theorem statements) can only have one term (and if they're false then they have no terms)</p>",
        "id": 206808869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597321985
    },
    {
        "content": "<p>The thing which mathematicians find weird is that in type theory every term has a unique type</p>",
        "id": 206808906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322007
    },
    {
        "content": "<p>Ok, this is clearing up several doubts and confusions that I had!</p>",
        "id": 206808919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322015
    },
    {
        "content": "<p>so <code>0 : \\N</code> and <code>0 : \\R</code> cannot be equal</p>",
        "id": 206808929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322020
    },
    {
        "content": "<p>because it does not even make sense to ask that they are equal</p>",
        "id": 206808944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322028
    },
    {
        "content": "<p>Instead, there is this invisible function from nat to real and the theorem is that the image of nat's 0 is real's 0</p>",
        "id": 206809013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322050
    },
    {
        "content": "<p>But when you talk about \"the set {0,1,2,...,r}\" you have to decide whether this set is a type or a term</p>",
        "id": 206809034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206808929\">said</a>:</p>\n<blockquote>\n<p>so <code>0 : \\N</code> and <code>0 : \\R</code> cannot be equal</p>\n</blockquote>\n<p>Ok, I have struggled with this concept while playing with Magma and realizing that sometimes you need to specify such things</p>",
        "id": 206809047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322089
    },
    {
        "content": "<p>and if you want it to be a type, then you write <code>{n // n ≤ r}</code> and now you are going to have to think very carefully about what it means to be a term of this type</p>",
        "id": 206809072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322107
    },
    {
        "content": "<p>Yes, it's just the same in magma and I learnt it in just the same way</p>",
        "id": 206809094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322120
    },
    {
        "content": "<p>But if <code>x : {n // n ≤ r}</code> then, for the same reason, x can't be a natural number</p>",
        "id": 206809122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322144
    },
    {
        "content": "<p>It turns out that x is actually a <em>pair</em>, consisting of a natural number and a proof that it is &lt;= r.</p>",
        "id": 206809136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206809072\">said</a>:</p>\n<blockquote>\n<p>and if you want it to be a type, then you write <code>{n // n ≤ r}</code> and now you are going to have to think very carefully about what it means to be a term of this type</p>\n</blockquote>\n<p>So, is it not the case that a term of type {n // n ≤ r} is any natural number up to r?</p>",
        "id": 206809190,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322174
    },
    {
        "content": "<p>A term of that type is not <em>equal</em> to a natural number</p>",
        "id": 206809210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322200
    },
    {
        "content": "<p>Ah, you answered my question, while I was formulating it!</p>",
        "id": 206809216,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322203
    },
    {
        "content": "<p>Type theory enables us to think of proofs as mathematical objects, they can have names like <code>h</code></p>",
        "id": 206809227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322217
    },
    {
        "content": "<p>This explains why there were all these langles and rangles appearing in the Lean output!!  Ahahaha</p>",
        "id": 206809243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  r: ℕ</span>\n<span class=\"cm\">  x: {n // n ≤ r}</span>\n<span class=\"cm\">  ⊢ false</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  r n: ℕ</span>\n<span class=\"cm\">  hn: n ≤ r</span>\n<span class=\"cm\">  ⊢ false</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206809349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322304
    },
    {
        "content": "<p>You can extract the pair from <code>x</code> with the <code>cases</code> tactic.</p>",
        "id": 206809366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322321
    },
    {
        "content": "<p>And conversely given n and hn you can reconstruct x with langle and rangle</p>",
        "id": 206809383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322342
    },
    {
        "content": "<p>I think that I am going to convert all my sets into types!</p>",
        "id": 206809427,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x2</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- make a copy of x before destroying it</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- hm : m ≤ r</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206809565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322457
    },
    {
        "content": "<p>What are you doing?</p>",
        "id": 206809587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597322471
    },
    {
        "content": "<p>So, when I input a set into Lean, then Lean \"tries\" to convert it into a type and stuff becomes awkward?  (I realize that this is more of a philosophical question, but I am trying to get some vague intuition for how things work.)</p>",
        "id": 206809627,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/injection.20of.20a.20subset/near/206809587\">said</a>:</p>\n<blockquote>\n<p>What are you doing?</p>\n</blockquote>\n<p>At the moment, I am trying to prove the statement that if a forest has at least one edge, then it has a leaf.  The underlying reason is that I would like to understand how Lean works and maybe use it for some less well-known maths!</p>",
        "id": 206809752,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322569
    },
    {
        "content": "<p>But I am really trying to build the statement from scratch: defining graphs, defining trees/forests, and seeing which lemmas I need along the way.</p>",
        "id": 206809824,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322616
    },
    {
        "content": "<p>Anyway, this discussion was really helpful: thank you very much!  I will read the post that you sent earlier!</p>",
        "id": 206810297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597322890
    },
    {
        "content": "<p>Lean can handle sets, but it treats them as terms not types. But given a set <code>{x | P x}</code> you can make the corresponding subtype <code>{x // P x}</code>. Mathematically there is nothing happening here, it is just two ways of modelling the concept. A third way is just the function <code>P : X -&gt; Prop</code>, i.e. the characteristic function of the set (P is also a term, but it's a function too; It's not a type, it has type <code>X -&gt; Prop</code> which is Lean's way of saying Hom(X,{T,F}) basically). There are of course ways of moving between these three concepts, and one can prove that all the diagrams commute, but deciding what you want to use is a design implementation decision and mathematicians are often not equipped to make such decisions without some help. The natural number game involves filling in proofs in begin/end blocks -- all definitions are hidden from the user. Definitions are the hard part for mathematicians, in some sense, because we have to go from our fluid concept of what an idea is to a formal representation, i.e. literally a way to store the idea as a sequence of 0's and 1's which we are going to commit to.</p>",
        "id": 206814007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597325144
    },
    {
        "content": "<p>Thank you so much: this is very helpful!  Especially knowing what is difficult!</p>",
        "id": 206817889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1597327178
    }
]