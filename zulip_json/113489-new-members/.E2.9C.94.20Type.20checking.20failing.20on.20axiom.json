[
    {
        "content": "<p>Hey, I'm new to Lean. I'm using Lean 3.42.1. When I try to create this axiom:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">par_assoc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">l</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d3</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"n\">d2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span> <span class=\"bp\">=</span> <span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The console gives me the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">none</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">overloads</span> <span class=\"n\">are</span> <span class=\"n\">applicable</span>\n<span class=\"n\">error</span> <span class=\"n\">for</span> <span class=\"n\">Diag.parallel</span>\n<span class=\"n\">invalid</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Diag</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Diag</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How am I supposed to tell Lean the types are the same? I know I have to use associativity of naturals but i don't know the syntax.</p>",
        "id": 281551989,
        "sender_full_name": "Lucas Rufino",
        "timestamp": 1651945434
    },
    {
        "content": "<p>Haha, <a href=\"#narrow/stream/116395-maths/topic/CDGAs/near/167850824\">this is a classical problem</a></p>",
        "id": 281552175,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651945661
    },
    {
        "content": "<p>ahhh thanks! I managed to fix it! I changed it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">par_assoc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">l</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d3</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">nat.add_assoc</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">nat.add_assoc</span><span class=\"o\">])</span>  <span class=\"o\">((</span><span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"n\">d2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 281552715,
        "sender_full_name": "Lucas Rufino",
        "timestamp": 1651946339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"499211\">Lucas Rufino</span> has marked this topic as resolved.</p>",
        "id": 281552947,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651946634
    },
    {
        "content": "<p>Another way would be to use heterogeneous equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">par_assoc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">l</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d3</span> <span class=\"o\">:</span> <span class=\"n\">Diag</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"n\">d2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span> <span class=\"bp\">==</span> <span class=\"n\">d1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"bp\">+</span> <span class=\"n\">d3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281584498,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651994153
    }
]