[
    {
        "content": "<p>Is there a more elegant way to prove this (without tactics)? It seems kind of brute force.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">classical.em</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">or.elim</span> <span class=\"n\">s1</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">classical.em</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n  <span class=\"n\">or.elim</span> <span class=\"n\">s2</span>\n  <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">and.intro</span> <span class=\"n\">a2</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n    <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">s3</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n    <span class=\"n\">or.intro_right</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">a3</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">or.intro_left</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">a2</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212194554,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601767127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_and_distrib.1</span>\n</code></pre></div>\n\n<p><span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 212194864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601767569
    },
    {
        "content": "<p>Nice :)</p>",
        "id": 212194905,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601767604
    },
    {
        "content": "<p>Without logic.basic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">classical.by_contradiction</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">classical.by_contradiction</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n   <span class=\"n\">classical.by_contradiction</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h₁</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 212194993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601767706
    },
    {
        "content": "<p>To be fair, if I formatted this proof the same way as you I don't think it's much shorter</p>",
        "id": 212195089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601767814
    },
    {
        "content": "<p>Would it be the same basic approach?</p>",
        "id": 212195093,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601767836
    },
    {
        "content": "<p>I'm not really sure how to read it.</p>",
        "id": 212195192,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601767962
    },
    {
        "content": "<p>Here's your proof with golfy formatting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical.em</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">classical.em</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a3</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">⟨</span><span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">a3</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span> <span class=\"n\">or.inr</span><span class=\"o\">)</span> <span class=\"n\">or.inl</span>\n</code></pre></div>",
        "id": 212195196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601767969
    },
    {
        "content": "<p>I think that using <code>by_contradiction</code> leads to more linear arguments</p>",
        "id": 212195211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601768012
    },
    {
        "content": "<p>I'll see if I can figure out how to use it in my verbose version.</p>",
        "id": 212195278,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601768106
    },
    {
        "content": "<p>Here's my proof with tactic formatting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contra</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212195283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601768121
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 212195336,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601768218
    },
    {
        "content": "<p>Cool. Thank you again.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n<span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n      <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">or.intro_left</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n      <span class=\"n\">a2</span> <span class=\"n\">s2</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n      <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">or.intro_right</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n      <span class=\"n\">a2</span> <span class=\"n\">s2</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">and.intro</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">,</span>\n  <span class=\"n\">a1</span> <span class=\"n\">s3</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212195982,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1601769339
    }
]