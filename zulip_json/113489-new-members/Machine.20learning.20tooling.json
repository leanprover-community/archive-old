[
    {
        "content": "<p>Hi! Very exciting to watch the vibrant community around Lean. </p>\n<p>I was wondering if any of you was aware of existing efforts around tracing and packaging the Lean prover for machine learning (along the lines of Holist for Hol Light). cc <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> given the IMO challenge?</p>\n<p>I'd also be interested in learning more about the current size of the mathlib, in particular not sure if [0] is up to date?</p>\n<p>[0] <a href=\"http://www.cs.ru.nl/~freek/100/\" target=\"_blank\" title=\"http://www.cs.ru.nl/~freek/100/\">http://www.cs.ru.nl/~freek/100/</a></p>",
        "id": 182332451,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575282742
    },
    {
        "content": "<p>I can't tell you anything about machine learning. But yes, the 100 theorems list should be mostly up to date. There's some discussion about the contents and size of mathlib in our new paper: <a href=\"https://leanprover-community.github.io/papers/mathlib-paper.pdf\" target=\"_blank\" title=\"https://leanprover-community.github.io/papers/mathlib-paper.pdf\">https://leanprover-community.github.io/papers/mathlib-paper.pdf</a></p>",
        "id": 182333781,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575283867
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ! This is very useful.</p>",
        "id": 182334295,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575284309
    },
    {
        "content": "<p>Looks like Lean has been architectured in way that should be amenable to machine learning workloads. Is there an official documentation of the Lean binaries available somewhere beyond the \"Theorem Proving with Lean\" book?</p>",
        "id": 182334468,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575284459
    },
    {
        "content": "<p>Here's a recent summary of what is in mathlib currently: <a href=\"https://xenaproject.wordpress.com/what-maths-is-in-lean/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/what-maths-is-in-lean/\">https://xenaproject.wordpress.com/what-maths-is-in-lean/</a></p>",
        "id": 182334561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575284523
    },
    {
        "content": "<p>By binaries, do you mean the .olean binaries that are produced after processing .lean files? The best \"documentation\" there is probably <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's olean-rs tool. <a href=\"https://github.com/digama0/olean-rs\" target=\"_blank\" title=\"https://github.com/digama0/olean-rs\">https://github.com/digama0/olean-rs</a> I don't think there's much written text about the format.</p>",
        "id": 182334928,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575284890
    },
    {
        "content": "<p>If you mean the Lean system itself, there's no official documentation. Bits and pieces are explained in various papers.</p>",
        "id": 182334973,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575284944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thanks, that's what I figured <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> Looks like the service used for interactive editing (the javascript demo as an example) is capable of extracting current open goals for any given code line. Is there a place I can look to better understand that interface?</p>",
        "id": 182335168,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575285127
    },
    {
        "content": "<p>And... inspecting the olean format might be an interesting approach indeed. I will look into that as well.</p>",
        "id": 182335218,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575285226
    },
    {
        "content": "<p>I think we usually point people to the VSCode extension as an example of editor interaction. <a href=\"https://github.com/leanprover/vscode-lean\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean\">https://github.com/leanprover/vscode-lean</a> There's also <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's format_lean tool that extracts line-by-line info. <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">https://github.com/leanprover-community/format_lean</a></p>",
        "id": 182335275,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575285280
    },
    {
        "content": "<p>Excellent this is extremely useful again. THanks! I'll be curious to hear from <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> plans on that subject as well but will dig into these three repositories in the meantime <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 182335623,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575285638
    },
    {
        "content": "<p>There is also (very experimental) documentation of all definitions in mathlib : <a href=\"https://leanprover-community.github.io/mathlib_docs/\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 182338419,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1575288475
    },
    {
        "content": "<p>The editor interaction relies primarily on Lean's \"server mode\", which communicates with Lean using JSON. You can run it using <code>lean --server</code>. I think the best \"documentation\" for it (in terms of a list of capabilities, etc.) is still <a href=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-core/src/server.ts\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-core/src/server.ts\">this file in the lean-client-js</a> library.</p>",
        "id": 182348292,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575295753
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 182348995,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575296175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> Welcome to Zulip. There are many ways one could integrate ML, e.g. using some combination of the tactic framework, the foreign function interface, and the language server. Lean4 is still under development though and we don't have official support for any such integration yet. Once Lean4 has the necessary pieces in place, we plan to (among other things) help Sarah and Christian integrate HOList. If you have different architectural desiderata, let us know and we will do our best to help. I plan to just use tactics + FFI for my own preliminary ML experiments, and I am not sure yet what architecture I will want down the road.</p>\n<p>I'll also mention as an aside that I (personally, currently) do not expect supervised learning on existing libraries to be anything close to a silver bullet for the IMO. I am personally more excited about generative-modeling/synthetic-data/self-play.</p>",
        "id": 182369260,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1575308142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> I'd be interested in participating in any discussion on that subject and happy to help. </p>\n<p>From looking at Lean3's interactive demo, I feel like most pieces to interactively compute open subgoals from partial proof trees seem to be in place? Would it make sense for me to mess with Lean3 or is Lean4 going to be completely different from that perspective? What do you think?</p>\n<p>What do you refer to by \"FFI\" ?</p>\n<p>Concerning your aside mention, completely agreed with your statement, though they all require fast and interactive access to the prover :)</p>",
        "id": 182380295,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575314982
    },
    {
        "content": "<p>FFI means foreign function interface.</p>",
        "id": 182380381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575315018
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Foreign_function_interface\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Foreign_function_interface\">https://en.wikipedia.org/wiki/Foreign_function_interface</a></p>",
        "id": 182380407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575315035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> thanks <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 182380714,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1575315231
    }
]