[
    {
        "content": "<p>Given two instances of has_mul, one can then define the type of multiplicative homomorphisms from one to the other by using →* analogously to how one uses → for defining the type of more general functions from one type to another. This is all well and good, but how does one go about describing a specific instance of this type? For example, if you were to try and define a semidirect product of two groups N and G, you would need a map from G to mul_aut N. Importantly, this map needs to be of type G →* (mul_aut N), as opposed to merely being of type G → (mul_aut N). The thing is, it's a bit unclear as to how to explicitly define a specific term of this type. If one were to try and define it via some anonymous λ definition, the resulting term would be of type G → (mul_aut N), but not of type G →* (mul_aut N). Is there some analogous way to explicitly define multiplicative homomorphisms?</p>",
        "id": 224897530,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1612283910
    },
    {
        "content": "<p>Are you just asking about constructors of <code>→*</code>? It's defined as a structure, and the usual structure constructor requires that you give a map and then proofs that it commutes with <code>1</code> and <code>*</code>. Or have I misunderstood the question?</p>",
        "id": 224897868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612284038
    },
    {
        "content": "<p>That is, you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 224898306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612284194
    },
    {
        "content": "<p>Thank you for the direction.</p>",
        "id": 224898688,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1612284356
    }
]