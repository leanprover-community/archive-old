[
    {
        "content": "<p>I tried the following to do a \"have\" and admit the second goal.  What is the correct syntax:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">dummy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"o\">(</span><span class=\"n\">skip</span><span class=\"bp\">|</span><span class=\"n\">admit</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130061451,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532191105
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">dummy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- here we only see the first goal</span>\n       <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- here we only see the second goal</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is that what you mean?</p>",
        "id": 130061504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532191223
    },
    {
        "content": "<p>thanks</p>",
        "id": 130061512,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532191269
    },
    {
        "content": "<p>No problem. Note that the <code>have h: ...</code> turns one goal <code>G</code> into two goals -- first the proof of <code>h</code>, and second the proof of <code>G</code> assuming <code>h</code> (in addition to anything else which we were assuming when we wrote the <code>have</code>).</p>\n<p>If you would rather have the goals the other way around, you can use <code>suffices</code> :-)</p>",
        "id": 130061557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532191330
    },
    {
        "content": "<p>Actually, I tried the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">dummy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,{</span> <span class=\"n\">skip</span> <span class=\"o\">},{</span> <span class=\"n\">admit</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I would like to end up in a state where only the first goal is open and the second goal is solved.</p>",
        "id": 130061635,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532191511
    },
    {
        "content": "<p>Since <code>n = 3</code> and <code>n = 1 + 2</code> are definitionally the same goal, you can use <code>change</code>:</p>\n<div class=\"codehilite\"><pre><span></span>theorem dummy (n :ℕ) : n = 3 :=\nbegin\n    change n = 1 + 2,\nend\n</pre></div>",
        "id": 130061700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532191629
    },
    {
        "content": "<p>If the transformation from one goal to the other is not definitional but easy, you can use <code>suffices</code>:</p>\n<div class=\"codehilite\"><pre><span></span>theorem dummy (n :ℕ) : n = 3 :=\nbegin\n    suffices h : n = 1 + 2, {exact h},\nend\n</pre></div>",
        "id": 130061786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532191796
    },
    {
        "content": "<p>Here are some more tips. If you have two goals, you can use <code>tactic.swap</code> to switch them. If you have more than one goal and you want to work on one of them, you can write <code>show &lt;statement of goal&gt;</code> and it will switch this goal to the top. One of my students was even telling me about some sort of <code>rotate</code> tactic but I've never used it.</p>",
        "id": 130061999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532192072
    },
    {
        "content": "<p>the mathlib <code>swap</code> tactic takes an optional argument; <code>swap n</code> moves the nth goal to the top</p>",
        "id": 130062011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532192116
    },
    {
        "content": "<p>Igt appears \"have h:a, swap, admit\" does what I want.  Now, I want to figure out something more complex:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">monad</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">smt_tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">q</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">existsFuns</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"n\">test</span> <span class=\"n\">test2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test2</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span><span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>In the above theorem, I would like to create a tactic that automates the conversion of \"(λ (e:ℕ), (andFuns test test2) (v+1)) v\" to \"h(andFuns (λ (e:ℕ), test e) (λ (e:ℕ), test2 e)) v\". </p>\n<p>I have created the following meta tactic which has many syntax errors.  How do I correct the errors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">divide_lambda</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">binder_info</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">andFuns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n                           <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">r</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">transform_lambda_app</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"bp\">.</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">split_lambda</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">nt</span> <span class=\"err\">←</span> <span class=\"n\">transform_lambda_app</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">nt</span><span class=\"bp\">;</span><span class=\"n\">swap</span><span class=\"bp\">;</span><span class=\"n\">admit</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 130062367,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532192754
    },
    {
        "content": "<p>I'm confused - <code>(λ (e:ℕ), (andFuns test test2) (v+1)) v</code> and <code>h(andFuns (λ (e:ℕ), test e) (λ (e:ℕ), test2 e)) v</code> are not the same</p>",
        "id": 130062736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532193383
    },
    {
        "content": "<p>are the <code>v</code> supposed to be de bruijn variables?</p>",
        "id": 130062747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532193411
    },
    {
        "content": "<p>I didn't state the theorem quite right:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"n\">test</span> <span class=\"n\">test2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span><span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Hopefully this make more sense.</p>",
        "id": 130062892,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532193709
    },
    {
        "content": "<p>You should be able to use <code>change</code> instead of <code>swap, admit</code> if you got it right</p>",
        "id": 130063016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532193874
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem test1 (v: ℕ) : (λ (e:ℕ), (andFuns test test2) (e+1)) v :=\nbegin\n    change (andFuns (λ (e:ℕ), test (e+1)) (λ (e:ℕ), test2 (e+1))) v,\nend\n</pre></div>",
        "id": 130063050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532193949
    },
    {
        "content": "<p>Here is fixing the syntax errors, although it doesn't work yet:</p>\n<div class=\"codehilite\"><pre><span></span>meta def divide_lambda : name → binder_info → expr → expr → expr → expr → expr\n| n b e1 `(andFuns %%l %%r) v y :=\n      (app (app `(andFuns) (divide_lambda n b e1 l v y))\n                           (divide_lambda n b e1 r v y))\n| n b e1 x y v := (app (lam n b e1 (app x y)) v).\n\nmeta def transform_lambda_app : expr → option expr\n| (app (lam n b e1 (app x y)) val) := some (divide_lambda n b e1 x y val)\n| _ := none.\n\nmeta def split_lambda : tactic unit :=\ndo { t ← target,\n     nt ← transform_lambda_app t,\n     change nt }\n\ntheorem test1 (v: ℕ) : (λ (e:ℕ), (andFuns test test2) (e+1)) v :=\nbegin\n  split_lambda,\nend\n</pre></div>",
        "id": 130063159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532194115
    },
    {
        "content": "<p>It looks like change works.  The theorem looks like this now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"n\">test</span> <span class=\"n\">test2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Now the challenge is to get the tactic working that generates the expression.  The tactic code now looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">divide_lambda</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">binder_info</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">andFuns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n                           <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">r</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">transform_lambda_app</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"bp\">.</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">split_lambda</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">nt</span> <span class=\"err\">←</span> <span class=\"n\">transform_lambda_app</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"n\">change</span> <span class=\"n\">nt</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>I'm getting the error \"invalid pattern, must be an application, constant, variable, type ascription, aliasing pattern or inaccessible term\" in divide_lambda on the pattern \"n b e1 ``(andFuns %%l %%r) v y\".</p>",
        "id": 130063222,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532194221
    },
    {
        "content": "<p>use single backtick on line 2</p>",
        "id": 130063291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532194362
    },
    {
        "content": "<p>For me the tactic fails in <code>transform_lambda_app</code> because right after the <code>begin</code> the goal says <code>⊢ andFuns test test2 (v + 1)</code> so there is no lambda in sight</p>",
        "id": 130063366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532194465
    },
    {
        "content": "<p>I wasn't aware of this - it looks like lean is really eager to unfold raw lambda-app beta reductions</p>",
        "id": 130063382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532194505
    },
    {
        "content": "<p>I'm not exactly sure what your goal is; perhaps this is a suitable compromise:</p>\n<div class=\"codehilite\"><pre><span></span>theorem test1 (v: ℕ) : id (λ (e:ℕ), (andFuns test test2) (e+1)) v :=\nbegin\n  -- split_lambda,\n  change id (andFuns (λ (e:ℕ), test (e+1)) (λ (e:ℕ), test2 (e+1))) v,\nend\n</pre></div>",
        "id": 130063528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532194777
    },
    {
        "content": "<p>This works, with the <code>id</code> to protect the lambda at the start:</p>\n<div class=\"codehilite\"><pre><span></span>meta def divide_lambda : name → binder_info → expr → expr → expr → expr\n| n b e1 `(andFuns %%l %%r) y :=\n      (app (app `(andFuns) (divide_lambda n b e1 l y))\n                           (divide_lambda n b e1 r y))\n| n b e1 x y := (lam n b e1 (app x y))\n\nmeta def transform_lambda_app : expr → option expr\n| (app (lam n b e1 (app x y)) val) := some (app (divide_lambda n b e1 x y) val)\n| (app `(id %%(lam n b e1 (app x y))) val) := some (app (divide_lambda n b e1 x y) val)\n| _ := none\n\nmeta def split_lambda : tactic unit :=\ndo { t ← target,\n    trace t.to_raw_fmt,\n     nt ← transform_lambda_app t,\n     change nt }\n\ntheorem test1 (v: ℕ) : id (λ (e:ℕ), (andFuns test test2) (e+1)) v :=\nbegin\n  split_lambda,\nend\n</pre></div>",
        "id": 130063733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532195104
    },
    {
        "content": "<p>Thanks--Now for the next trick, I would like to extend split_lambda to be able to propagate an expression into a closure.  Note that now, the tactic may need to rename variables,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">existsFuns</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">capture</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">change</span>\n        <span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"n\">q</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Notice how the (e+q) is propagated inside a closure involving \"x\".  The variable may in some cases need to be renamed.   Is there a way to get a fresh variable name and to rename the variables when reconstructing lambda expressions?<br>\nend</p>",
        "id": 130066480,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532200414
    },
    {
        "content": "<p>You don't have to worry about variable capture for the most part. Lean uses unique names in all lambdas, so it shouldn't be a problem</p>",
        "id": 130067152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532201999
    },
    {
        "content": "<p>The tactics <code>mk_fresh_name</code> and <code>get_unused_name</code> can be used to generate unique and human-readable names respectively</p>",
        "id": 130067208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532202094
    },
    {
        "content": "<p>OK--I've updated my tactic.  It looks like this now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">divide_lambda</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">binder_info</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">andFuns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">l</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n                           <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">%%</span><span class=\"n\">ll</span><span class=\"o\">))</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">ll</span> <span class=\"n\">y</span><span class=\"o\">))))</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">transform_lambda_app</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">split_lambda</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">trace</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">,</span>\n     <span class=\"n\">nt</span> <span class=\"err\">←</span> <span class=\"n\">transform_lambda_app</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n     <span class=\"n\">trace</span> <span class=\"n\">nt</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">,</span>\n     <span class=\"n\">change</span> <span class=\"n\">nt</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I' trying to use it in this theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">capture</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">test3</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">+</span><span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split_lambda</span><span class=\"o\">,</span>\n    <span class=\"c1\">--change</span>\n    <span class=\"c1\">--    andFuns (existsFuns (λ (y e:ℕ), test3 y (e+q)))</span>\n    <span class=\"c1\">--            (λ (e:ℕ), test (e + q)) v,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It seems like no output goal is being generated.  I suspect the tactic is crashing somehow.  Is the pattern matching being done properly in divide_lambda?</p>",
        "id": 130069632,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532206554
    },
    {
        "content": "<p>I get an error <code>trying to evaluate sorry</code> in the test theorem, which means that there is a syntax error in the tactic</p>",
        "id": 130069868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532206889
    },
    {
        "content": "<p>and the error at <code>divide_lambda</code> says the <code>existsFuns</code> branch has incorrect type <code>expr -&gt; expr</code> instead of <code>expr</code></p>",
        "id": 130069927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532206936
    },
    {
        "content": "<p>because you used <code>expr.app</code> applied to only one argument</p>",
        "id": 130069932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532206950
    },
    {
        "content": "<p>OK-- I fixed divide_lambda</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">divide_lambda</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">binder_info</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">andFuns</span> <span class=\"err\">%%</span><span class=\"n\">l</span> <span class=\"err\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">andFuns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">l</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n                           <span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">%%</span><span class=\"n\">ll</span><span class=\"o\">))</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">divide_lambda</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">ll</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>but I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">type</span>\n  <span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test3</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">v</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">andFuns</span> <span class=\"o\">(</span><span class=\"n\">existsFuns</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">test3</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>It appears the bound variable \"x\" is being changed to \"e\".  Why is this happening?  It appears the capture mechanism is not naming variables properly.</p>",
        "id": 130071032,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532208809
    }
]