[
    {
        "content": "<p>I have two sets <code>A B</code> and I want to define <code>f A B = g A b</code>(another set) for some <code>b ∈ B</code>.  I have the fact that <code>∃ b, b ∈ B</code>, but I'm not allowed to use Exists.dcases_on. Also, how/when do I prove this is well-defined and doesn't depend on the choice of <code>b</code>?</p>",
        "id": 130922260,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533456828
    },
    {
        "content": "<p>You can use <code>classical.some</code> in which case you don't have to prove that it's well defined. Alternatively, if the possible values for <code>B</code> form a partition, you could use quotients.</p>",
        "id": 130923186,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533458950
    },
    {
        "content": "<p>I can prove that every value gives the same result.</p>",
        "id": 130923232,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533459019
    },
    {
        "content": "<p>Presumably then, it isn't defined or at least used on any sets, just sets that meet some criteria?</p>",
        "id": 130923365,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533459363
    },
    {
        "content": "<p>Yep, (lines)</p>",
        "id": 130923702,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533460201
    },
    {
        "content": "<p>If you want it to be defined on the set you pretty much have to  use <code>classical.some</code></p>",
        "id": 130923849,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533460525
    },
    {
        "content": "<p>You can't get data (the set) from a proof (the fact that there exists a b) constructively -- even if you can prove uniqueness results. I've been using <code>cases (classical.indefinite_description _ H) with b Hb</code> to get b out of the hypothesis H that b exists, recently, but I found a glitch with this idiom recently; it doesn't always do quite what I want it to. Might work here though.</p>",
        "id": 130923850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533460536
    },
    {
        "content": "<p>The problem is that if you imagine a function as a computer program, the proof that a number exists (like Waring's number G(3) in my Monday talk) doesn't give you the right to be able to compute it for free.</p>",
        "id": 130923938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533460689
    },
    {
        "content": "<p>A lot of the time when you know something exists, you can compute it however, because that's how you proved it exists. I'm guessing Ali might be in this situation.</p>",
        "id": 130924046,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533460939
    },
    {
        "content": "<p>I just want to use the existence to show the set is non-empty. I think I might have to define the thing I want in a different way, and show it's equal to what I wanted.</p>",
        "id": 130924053,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533461000
    },
    {
        "content": "<p>Computing the set can't be done constructively, but I should think that proving it's non-empty might be possible. If your goal is the assertion that some set is non-empty then you'll be able to uses cases on the exists normally, because your goal is to prove a proposition, not to construct some data.</p>",
        "id": 130925602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533464427
    }
]