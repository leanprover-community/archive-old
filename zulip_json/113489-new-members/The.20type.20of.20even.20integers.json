[
    {
        "content": "<p>I am working on an exercise \"are all even integers an integral domain\".  In Lean, I think this means I need to create the <strong>type</strong> of even integers as opposed to creating the <strong>set</strong> of even integers, because my sense so far is that sets can't be used in place of types, more or less.  So I want to do this to set the problem up, but I am worried that it is not correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ℕ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">ℕ_even</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I will need to make more of these somewhat ad hoc set-types which don't necessarily have any structure, for example \"all rational numbers whose denominators are a power of 2\".</p>",
        "id": 220842440,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608773849
    },
    {
        "content": "<p>You can use either <code>{x : ℕ | ∃ y, x = 2 * y}</code> or <code>{x : ℕ // ∃ y, x = 2 * y}</code>. In the former case, it is a <code>set ℕ</code> but it has an automatic coercion to <code>Type</code>. In the latter case, it is already a <code>Type</code>.</p>",
        "id": 220842735,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774247
    },
    {
        "content": "<p>you can also use <code>{n | even n}</code> by the way</p>",
        "id": 220842747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774298
    },
    {
        "content": "<p>If you want some instances to be deduced automatically (e.g., <code>add_comm_monoid</code>), then you might want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_submonoid.closure\">docs#add_submonoid.closure</a> like in <code>add_submonoid.closure {2}</code></p>",
        "id": 220842752,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774307
    },
    {
        "content": "<p>the easiest way to get the full result by abstract nonsense is to express it as the span of {2}</p>",
        "id": 220842761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774351
    },
    {
        "content": "<p>we should have the theorem that says that you are in the span of a singleton iff you divide the element</p>",
        "id": 220842810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774408
    },
    {
        "content": "<p>Thanks I will follow your suggestions.   This is the exercise.  Some will be integral domains and some won't.  The ones that are will fit into the \"instance\" pattern.  For the ones that aren't I guess I have to show an example where an integral domain axiom is violated:<br>\n<a href=\"/user_uploads/3121/XKVj_0Vyop2a-YJBaro2bK3I/Screenshot-from-2020-12-23-20-44-18.png\">Screenshot-from-2020-12-23-20-44-18.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XKVj_0Vyop2a-YJBaro2bK3I/Screenshot-from-2020-12-23-20-44-18.png\" title=\"Screenshot-from-2020-12-23-20-44-18.png\"><img src=\"/user_uploads/3121/XKVj_0Vyop2a-YJBaro2bK3I/Screenshot-from-2020-12-23-20-44-18.png\"></a></div>",
        "id": 220842820,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608774431
    },
    {
        "content": "<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_submonoid.closure\">docs#add_submonoid.closure</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.span\">docs#subalgebra.span</a>?</p>",
        "id": 220842823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774437
    },
    {
        "content": "<p>certainly (d) and (e) are best expressed as spans</p>",
        "id": 220842870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774484
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/integral_domain\">docs#integral_domain</a> says that you need <code>1</code></p>",
        "id": 220842874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774491
    },
    {
        "content": "<p>you could use an <code>add_submonoid.closure</code> but we're after a ring structure here</p>",
        "id": 220842881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774518
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.span\">docs#subalgebra.span</a> pulls in at least all integers</p>",
        "id": 220842895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774558
    },
    {
        "content": "<p>Well in those cases I suppose the theorem is false so it doesn't matter</p>",
        "id": 220842901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774583
    },
    {
        "content": "<p>if you want to prove it's not an integral domain the proof strategy is different</p>",
        "id": 220842944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774608
    },
    {
        "content": "<p>First, you need to define a predicate <code>is_integral_subdomain</code> on a <code>set R</code> provided <code>[ring R]</code></p>",
        "id": 220842954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774656
    },
    {
        "content": "<p>It should say that you have a subring + the natural ring structure on the subtype defines an integral domain.</p>",
        "id": 220842963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774694
    },
    {
        "content": "<p>Otherwise you can't formalize arguments like \"this set does not contain 1, so it's not an integral domain\".</p>",
        "id": 220843004,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774724
    },
    {
        "content": "<p>You don't need the same 1</p>",
        "id": 220843012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774758
    },
    {
        "content": "<p>you can still reason that the set does not contain any idempotent element and hence can't have a 1-alike</p>",
        "id": 220843022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774785
    },
    {
        "content": "<p>do we have a notion of subring that doesn't require that 1 come along? I guess that's a subrng</p>",
        "id": 220843085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774900
    },
    {
        "content": "<p>Yes, the problem is ill-formulated. Each of those sets is an integral domain (w.r.t. some <code>*</code>, <code>+</code>, <code>0</code>, and <code>1</code>) because there exist a countable integral domain. The problem doesn't say what operations/constants must agree with those in <code>real</code></p>",
        "id": 220843088,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774902
    },
    {
        "content": "<p>AFAIK, <code>subrng</code> is not in mathlib</p>",
        "id": 220843096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608774926
    },
    {
        "content": "<p>it might be nice to have something like that even if we don't have non-unital rings, because I think they come up in banach spaces</p>",
        "id": 220843149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774972
    },
    {
        "content": "<p>you can have two rings which share the same operations but are not in a subring relation because the unit of the subobject is different</p>",
        "id": 220843163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608775034
    }
]