[
    {
        "content": "<p>Why I cant use proof by contradiction if its impossible to build this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Abe</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Abe</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Abe</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Abe</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Abe</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Wot</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">σ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Abe</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ata</span> <span class=\"o\">:</span> <span class=\"n\">Wot</span> <span class=\"o\">[]</span> <span class=\"n\">Abe.a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">be</span>  <span class=\"o\">:</span> <span class=\"n\">Wot</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wot</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Wot</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Abe.c</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">Wot</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">Abe.a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n\n<span class=\"c1\">-- tactic 'contradiction' failed</span>\n<span class=\"c1\">-- α✝ : Type</span>\n<span class=\"c1\">-- x✝ : α✝</span>\n<span class=\"c1\">-- xs : List α✝</span>\n<span class=\"c1\">-- x : Wot (x✝ :: xs) Abe.a</span>\n<span class=\"c1\">-- ⊢ Int</span>\n</code></pre></div>",
        "id": 279928059,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650722684
    },
    {
        "content": "<p>Try <code>cases x</code> instead.</p>",
        "id": 279928151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650722830
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">Wot</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">Abe.a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n<span class=\"c1\">-- x :: xs = List.append a✝ a'✝</span>\n</code></pre></div>",
        "id": 279928158,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650722856
    },
    {
        "content": "<p>Then it's probably not obvious enough for Lean to prove that it's impossible to build this itself. You have to provide the proof.</p>",
        "id": 279928217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650722902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481858\">Chiyoku</span> has marked this topic as resolved.</p>",
        "id": 279928325,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650723072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481858\">Chiyoku</span> has marked this topic as unresolved.</p>",
        "id": 279928472,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650723261
    },
    {
        "content": "<p>I have no idea on how to proof that something cannot be constructed... can somebody help me with that? is this a valid question here?</p>",
        "id": 279928493,
        "sender_full_name": "Chiyoku",
        "timestamp": 1650723303
    },
    {
        "content": "<p>You should do induction on <code>x</code>, then that should be clearer.</p>",
        "id": 279928579,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650723433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481858\">Chiyoku</span> has marked this topic as resolved.</p>",
        "id": 279928698,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650723604
    },
    {
        "content": "<p>Alternatively you can use another hypothesis to get around the dependent elimination error..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">Wot</span> <span class=\"n\">xs</span> <span class=\"n\">Abe.a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">x_</span> <span class=\"o\">::</span> <span class=\"o\">[</span><span class=\"n\">xs_</span><span class=\"o\">])</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">Wot.ata</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 279929408,
        "sender_full_name": "Chris B",
        "timestamp": 1650724653
    }
]