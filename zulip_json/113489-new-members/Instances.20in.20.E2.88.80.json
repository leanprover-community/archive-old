[
    {
        "content": "<p>I am trying to phrase an induction prinicple like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nilpotent_center_quotient_ind</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">G</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hstep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">G</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_nilpotent</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n  <span class=\"o\">[</span><span class=\"n\">is_nilpotent</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but lean complains that, for example, the <code>is_nilpotent P</code> term’s implicit <code>group G</code> parameter cannot be solved. But it’s right there! Do I have to spell it out with <code>@is_nilpotent G hG</code>, or is there a prettier way of phrasing that?</p>",
        "id": 268859838,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642779782
    },
    {
        "content": "<p>I can't see a <code>is_nilpotent P</code> in your code, I'm guessing you mean <code>G</code>?.  The reason it cannot solve this I think, is that the 3 <code>G</code> you are referring throughout the induction principle here are all considered different <code>G</code> by lean and thus the <code>[is_nilpotent G]</code> parameter outside of the <code>hbase</code> and <code>hstep</code> does not have access to the<code>group G</code> instance.  If its complaining about an instance missing in <code>hstep</code> I would be confused though.</p>",
        "id": 268861126,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642780307
    },
    {
        "content": "<p><code>by exactI</code> after the comma</p>",
        "id": 268862166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642780696
    },
    {
        "content": "<p><code>∀ G [group G], by exactI ∀ [is_nilpotent G], ...</code></p>",
        "id": 268862304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642780750
    },
    {
        "content": "<p>Testing my faq - would <a href=\"https://github.com/ericrbg/leanFAQ/wiki/Technical-Issues#why-does-lean-complain-about-a-missing-instance-when-its-in-my-goal-state\">this</a> have explained what was going on? Should I have made it more explicit for foralls and such?</p>",
        "id": 268865536,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642781994
    },
    {
        "content": "<p>Hmm, I think I have seen that FAQ before and it makes sense to me, but since it talks only about tactics, I did not expect it to help in this application. And I didn’t think of using tactics inside the proof statement (as Eric suggests).</p>",
        "id": 268866246,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642782298
    },
    {
        "content": "<p>Henrik: Oh, yes, sorry, there is an implicit <code>group G</code> in scope, but the one that causes problems is the one in <code>hstep</code>.</p>",
        "id": 268866308,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642782327
    },
    {
        "content": "<p>Ok, this works and can be proven:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nilpotent_center_quotient_ind</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">G</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hstep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">G</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">is_nilpotent</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_nilpotent</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but <code>induction G using nilpotent_center_quotient_ind</code> doesn’t quite like it, says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">user</span> <span class=\"n\">defined</span> <span class=\"n\">recursor</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">major</span> <span class=\"n\">premise</span> <span class=\"sc\">'G'</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">...</span><span class=\"o\">),</span> <span class=\"n\">where</span> <span class=\"n\">I</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n</code></pre></div>\n<p>I tried to reorder the various premisses, but it didn't help. Any idea?</p>",
        "id": 268868247,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642783194
    },
    {
        "content": "<p>The <code>induction</code> tactic is pretty picky and often doesn't work for custom recursors. At a guess, moving G to just before <code>group</code> might help, but I'm not optimistic</p>",
        "id": 268868832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642783460
    },
    {
        "content": "<p>Tangentially related - is <code>G / center G</code> also nilpotent in that example?</p>",
        "id": 268868962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642783526
    },
    {
        "content": "<p>Yes, but that follows readily from <code>is_nilpotent G</code> via an instance, so I figured I don’t have to add it as extra information to <code>hstep</code></p>",
        "id": 268869093,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642783579
    },
    {
        "content": "<p>Because then you can make <code>P : Π G [group G], by exactI is_nilpotent G→Prop</code></p>",
        "id": 268869201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642783639
    },
    {
        "content": "<p>Which will make the recursor work slightly better</p>",
        "id": 268869233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642783659
    },
    {
        "content": "<p>Ah, I see. I’ll try.</p>",
        "id": 268869336,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642783701
    },
    {
        "content": "<p>Now I get <code>induction tactic failed, major premise type is ill-formed</code>.<br>\nBTW, which one is called the “major premise”?<br>\nAccording to <a href=\"https://exlean.org/what-the-rec-types-dependent-on-terms-lean-eliminators-and-threshold-concepts/\">https://exlean.org/what-the-rec-types-dependent-on-terms-lean-eliminators-and-threshold-concepts/</a> it would be <code>G</code>.</p>",
        "id": 268869651,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642783842
    },
    {
        "content": "<p>The <code>type of the major premise 'G'</code> which <code>must be for the form (I ...)</code> is, in my case <code>Type u</code>. Maybe that's the problem; <code>Type</code> isn’t a normal constant here?</p>",
        "id": 268870409,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642784153
    },
    {
        "content": "<p>I’ll just apply the lemma manually, with <code>refine</code>, for now. Good enough for me.</p>",
        "id": 268872000,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642784830
    }
]