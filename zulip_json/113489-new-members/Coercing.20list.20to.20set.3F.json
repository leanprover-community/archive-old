[
    {
        "content": "<p>I'm slowly implementing some computational math (the Schreier Sims algorithm), and I have to coerce a <code>list</code> to a <code>set</code>, because I have a list of generators, which I want to state generate a subgroup. I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">fin</span> <span class=\"n\">function</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span>  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">equiv.trans</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">equiv.trans_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.trans_refl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.refl_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.self_trans_symm</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>but no <code>coe</code> instance was found:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">gs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n</code></pre></div>\n<ol>\n<li>How do I get a <code>set</code> out of a <code>list</code> to compute the closure, and </li>\n<li>What's the usual way one works with finite/computable objects in the context of <code>mathlib</code>?</li>\n</ol>",
        "id": 272091622,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645003814
    },
    {
        "content": "<p>Are you sure you don't want a <code>finset</code> instead? It's easy to make one of those from a list, and finsets are computable. Sets can be infinite and membership is in general undecidable.</p>",
        "id": 272091782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645003923
    },
    {
        "content": "<p>I'd like to use <code>finset</code>, but it seems to me that most of the definitions in <code>group_theory.basic</code> (eg. that of <code>closure</code>) are written using <code>set</code>. I'm unsure how to interface between the two.</p>",
        "id": 272091875,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645003985
    },
    {
        "content": "<p>You can also easily coerce from a finset to a set</p>",
        "id": 272091905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645004007
    },
    {
        "content": "<p>I'm not at lean right now but finset to set is an inbuilt coercion and list to finset is probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.to_finset\">docs#list.to_finset</a></p>",
        "id": 272092039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645004076
    },
    {
        "content": "<p>Yes, changing the declaration to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">generators</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>works. Thanks!</p>",
        "id": 272092060,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645004097
    },
    {
        "content": "<p>Note that your <code>group</code> instance already exists, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.perm_group\">docs#equiv.perm.perm_group</a></p>",
        "id": 272092335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645004271
    },
    {
        "content": "<p>If you mark <code>S</code> <code>@[reducible]</code> then lean will find it for you</p>",
        "id": 272092447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645004324
    },
    {
        "content": "<p>Thanks! What's the precise difference between <code>@[simp]</code> and <code>@[reducible]</code>?</p>",
        "id": 272092814,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645004526
    },
    {
        "content": "<p>Ah, is it that <code>@[simp]</code> is a hint to the _simplifier_ which must be explicitly invoked with <code>simp</code>, while <code>@[reducible]</code> is a hint to the elaborator which is always applied during elaboration into core?</p>",
        "id": 272093344,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1645004864
    },
    {
        "content": "<p>Essentially yes: <code>@[simp]</code> on a definition tells the <code>simp</code> tactic to unfold the definition, while <code>@[reducible]</code> tells the elaborator it is allowed to unfold the definition in more cases. (The elaborator does not always unfold definitions.)</p>",
        "id": 272093442,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645004922
    },
    {
        "content": "<p>By default definitions are semireducible and instances are \"instance reducible\". You can also mark them as <code>@[reducible]</code> or <code>@[irreducible]</code>. Type checking is allowed to unfold reducible, \"instance reducible\" and semireducible. Instance search is allowed to unfold reducible and \"instance reducible\". Most rewriting tactics like <code>simp</code> and <code>rw</code> are allowed to unfold only reducible.</p>",
        "id": 272093704,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645005069
    },
    {
        "content": "<p>The kernel does not care about reducibility.</p>",
        "id": 272093721,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645005080
    },
    {
        "content": "<p>(I put \"instance reducible\" in quotes because I understand the C++ code has only three transparency levels, <code>reducible</code>, <code>semireducible</code> and <code>irreducible</code>, and \"instance reducible\" is the combination of <code>@[instance, semireducible]</code> attributes. Or something along those lines.)</p>",
        "id": 272094043,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645005256
    }
]