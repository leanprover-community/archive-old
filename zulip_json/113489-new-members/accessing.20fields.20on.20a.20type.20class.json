[
    {
        "content": "<p>What am I doing wrong syntactically here to try and use a field from a type class I'm including in another type class?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">cool</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">cool</span> <span class=\"o\">:</span> <span class=\"n\">cool</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_37</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">T.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">T.cool.property</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Last line in the proof there -- how do I use the property from the first type class?</p>\n<p>(I think I'm realizing I likely don't want a type class at all I want .. a Prop I guess, but still curious)</p>",
        "id": 221028499,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609112324
    },
    {
        "content": "<p><code>@cool.property _ _...</code> would certainly work, but I think the standard thing is to make <code>thing</code> extend <code>cool</code> as opposed to making it a field, so you can then use <code>exact cool.property</code></p>",
        "id": 221028639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609112565
    },
    {
        "content": "<p>Aha, ok, good to know, thanks -- that makes sense in my Real Code too I think.</p>",
        "id": 221028652,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609112610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cool</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">cool</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_37</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">T.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">cool.property</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- some metavars left :(</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221028795,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609112866
    },
    {
        "content": "<p>Not ideal :(</p>",
        "id": 221028840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609112890
    },
    {
        "content": "<p>Is it still me doing something wrong/ideal declaring that</p>",
        "id": 221028844,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609112927
    },
    {
        "content": "<p>My real example is...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">of_independent</span> <span class=\"o\">(</span><span class=\"bp\">𝓘</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">𝓘.</span><span class=\"n\">nonempty</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hereditary</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">augmentation</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_card</span> <span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"n\">I</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset.card</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span> <span class=\"bp\">\\</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">insert</span> <span class=\"n\">j</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝓘</span>  <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! The empty set is always an independent set. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_independent.empty_is_independent</span> <span class=\"o\">[</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">of_independent</span> <span class=\"bp\">𝓘</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">M.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">of_independent.hereditary</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">set.empty_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S.val</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I wanted to move <code>hereditary</code> to a type class so that I could talk about a set being hereditary regardless of whether I had an <code>of_independent</code>, and yeah having similar troubles to the slimmed down example when trying to reprove the lemma.</p>",
        "id": 221028909,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113030
    },
    {
        "content": "<p>Nevermind. it's okay :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cool</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">cool</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_37</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">T.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">cool.property</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221028981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609113139
    },
    {
        "content": "<p>Aha .. ok trying that, thanks!</p>",
        "id": 221028990,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113160
    },
    {
        "content": "<p>Matroids?</p>",
        "id": 221029000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609113175
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 221029023,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113215
    },
    {
        "content": "<p>Huh. I think it worked trivially with <code>extends</code>, so probably that's the right thing</p>",
        "id": 221029110,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113342
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">hereditary</span> <span class=\"o\">(</span><span class=\"bp\">𝓘</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">of_independent</span> <span class=\"o\">(</span><span class=\"bp\">𝓘</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"kd\">extends</span> <span class=\"n\">hereditary</span> <span class=\"bp\">𝓘</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">𝓘.</span><span class=\"n\">nonempty</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">augmentation</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hJ</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_card</span> <span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"n\">I</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset.card</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span> <span class=\"bp\">\\</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">insert</span> <span class=\"n\">j</span> <span class=\"n\">I</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝓘</span>  <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! The empty set is always an independent set. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_independent.empty_is_independent</span> <span class=\"o\">[</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">of_independent</span> <span class=\"bp\">𝓘</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓘</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">M.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hereditary.property</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">set.empty_subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S.val</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221029111,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113352
    },
    {
        "content": "<p>Heh -- <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  I set aside your repo for a bit to just screw around a little more, was getting tedious trying to figure out some things (because of my lean gaps)</p>",
        "id": 221029293,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113611
    },
    {
        "content": "<p>But will probably have to get back to it once I have a bit of fun.</p>",
        "id": 221029301,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609113629
    },
    {
        "content": "<p>No worries, that sounds a lot like why I set it aside myself. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/Basic.20graph.20theory/near/212932431\">I heard</a> there was another attempt on matroids in Lean in progress, but I don't know how far along it is now.</p>",
        "id": 221029659,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609114313
    },
    {
        "content": "<p>Am I the only one who prefers combinatorial pregeometries? (The answer seems to be \"yes\")</p>",
        "id": 221029858,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609114640
    },
    {
        "content": "<p>like, as the name?</p>",
        "id": 221029910,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609114697
    },
    {
        "content": "<p>I mean you and Rota no?</p>",
        "id": 221029911,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609114700
    },
    {
        "content": "<p>or is a pregeometry a looser condition</p>",
        "id": 221029919,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609114716
    },
    {
        "content": "<p>I think there are more finiteness conditions on matroids</p>",
        "id": 221029943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609114783
    },
    {
        "content": "<p>But I'm mostly saying that I think the closure operator definition feels more natural to me as \"the\" definition. But I'm very far from being a combinatorist, so I'm probably in a small minority here.</p>",
        "id": 221030077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609114979
    },
    {
        "content": "<blockquote>\n<p>Am I the only one who prefers combinatorial pregeometries? (The answer seems to be \"yes\")</p>\n</blockquote>\n<p>i think model theorists prefer \"pregeometry\" and presenting matroids using closure operators</p>",
        "id": 221039786,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1609132537
    },
    {
        "content": "<p>For those interested in closure operators, I've made: <a href=\"https://github.com/leanprover-community/mathlib/pull/5524\">https://github.com/leanprover-community/mathlib/pull/5524</a>, feel free to review!</p>",
        "id": 221153756,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1609265126
    }
]