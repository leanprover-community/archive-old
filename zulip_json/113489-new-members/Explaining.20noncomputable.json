[
    {
        "content": "<p>I noticed that a couple of Lean defs have the tag noncomputable, and recently Lean has given me a warning that my def needs the noncomputable tag because it depends on a noncomputable def. Can you explain what is meant by noncomputable? I noticed, for example, real.has_pow is noncomputable. Is that because Lean can't calculate the expression like e^e the same as it could calculate 2^2 = 4?</p>",
        "id": 289351223,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657643536
    },
    {
        "content": "<p>It means that it is not computable even if in principle, for example because something depends on the axiom of choice</p>",
        "id": 289351468,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643661
    },
    {
        "content": "<p>The definition of real numbers as equivalence classes of something for example is not computable (I think)</p>",
        "id": 289351532,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643700
    },
    {
        "content": "<p>What does \"calculate the expression e^e\" mean?</p>",
        "id": 289351546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657643706
    },
    {
        "content": "<p>So there is no algorithm to say if s given real number is equal to zero</p>",
        "id": 289351574,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Explaining.20noncomputable/near/289351546\">said</a>:</p>\n<blockquote>\n<p>What does \"calculate the expression e^e\" mean?</p>\n</blockquote>\n<p>I meant, as an example, you can say in Lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>but there is no way of saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 289351773,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657643815
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.has_pow\">docs#real.has_pow</a></p>",
        "id": 289351829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657643843
    },
    {
        "content": "<p>Apparently it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.cpow\">docs#complex.cpow</a> (which underlies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.has_pow\">docs#real.has_pow</a>) that invokes decidability of equality.</p>",
        "id": 289351903,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657643875
    },
    {
        "content": "<p>I guess you can see that it must be noncomputable because 0^0=1 and 0^y=0 if y isn't 0, so the even the function 0^x isn't computable.</p>",
        "id": 289352108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657643941
    },
    {
        "content": "<p>The difference is that in <code>2+2 = 4</code> (as natural numbers) you can unfold everything and then you see that both sides become <code>succ succ succ succ 0</code>. For reals you can not just do that. <code>norm_num</code> is a smart tactic, so sometimes it can prove stuff even if they're not computable I think (using <code>simp</code>)</p>",
        "id": 289352592,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644124
    },
    {
        "content": "<p>But <code>2+2=4</code> can be also proved by <code>refl</code>, unfolding the definitions</p>",
        "id": 289352700,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644175
    },
    {
        "content": "<p>Yea, I was running into problems where norm_num just returned false, which made sense due to the type casting. Does noncomputable make the math any different, or is it more just a tag that Lean needs?</p>",
        "id": 289352709,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657644178
    },
    {
        "content": "<p>If you add <code>noncomputable theory </code>at the beginning the math becomes more \"standard\"</p>",
        "id": 289352815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644238
    },
    {
        "content": "<p>Ok, I will give that a try, thank you!</p>",
        "id": 289353001,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657644326
    },
    {
        "content": "<p><code>noncomputable</code> is a way that Lean keeps track of which definitions should be compiled (by the VM compiler) into a more efficient representation (for the VM). You should more or less only care about whether or not a definition is <code>noncomputable</code> if you care about evaluating it using <code>#eval</code> or evaluating it from within the implementation of some tactic.</p>",
        "id": 289353047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657644353
    },
    {
        "content": "<p>In mathlib it's useful to try to be computable when possibile to prove stupid stuff. For example I once spent literally hours proving that the finite set <code>{1, 3, 5, 15}</code> has four elements and then someone told me <code>refl</code> can do it. It can because everything is computable so we can say to Lean \"just look\"</p>",
        "id": 289353105,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> That example's not the same kind of computability as what <code>noncomputable</code> is about</p>",
        "id": 289353172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657644397
    },
    {
        "content": "<p>Ops, I am sorry</p>",
        "id": 289353282,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644440
    },
    {
        "content": "<p>There are at least three ways Lean can compute something, I think. One is the elaborator doing expression reduction (which honors things like the <code>reducible</code>/<code>semireducible</code>/<code>irreducible</code> attributes), another is the Lean kernel itself doing expression reduction (which doesn't honor these -- everything is essentially <code>reducible</code> I believe), and the third is the VM after VM compilation (which is not guaranteed to evaluate things correctly, but it sure tries)</p>",
        "id": 289353442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657644498
    },
    {
        "content": "<p>Oh sure, this about decidability! I must be still jetlagged</p>",
        "id": 289353502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644530
    },
    {
        "content": "<p>(My understanding is that the original Lean evaluator was just the expression reducer, and <code>noncomputable</code> was used to keep track of which definitions could actually reduce all the way. From what I remember, one of the reasons for the VM besides speed is that it gets around the fact that <code>eq.rec</code> terms don't always reduce.)</p>",
        "id": 289353805,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657644691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"474115\">@Max Bobbin</span> in any case you can safely ignore this warning if you want to do standard mathematics</p>",
        "id": 289353942,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657644758
    },
    {
        "content": "<p>Oh right, and a fourth type of \"evaluation\" is <code>decidable</code> via <code>dec_trivial</code>, where you use the typeclass system to search for a proof using whatever instances happen to lie around.</p>",
        "id": 289354009,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657644789
    },
    {
        "content": "<p>Ok, cool. Thank you. This is helpful, I think my problems are more type casting related then. I just wanted to make sure noncomputable wasn't the problem</p>",
        "id": 289354025,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657644797
    },
    {
        "content": "<p>I guess a fifth type is <code>norm_num</code> (and <code>simp</code>) which pretty much doesn't care about whether something is <code>noncomputable</code> since it just operates on the terms themselves and applies rules (\"<code>norm_num</code> plugins\"). It evaluates terms more in the Mathematica or Sage sense, symbolically.</p>",
        "id": 289354289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657644921
    }
]