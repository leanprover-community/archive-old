[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/d75a2d96863fa514de1078064e0bcfab5d7be03c/src/data/set/finite.lean#L271-L277\">https://github.com/leanprover-community/mathlib/blob/d75a2d96863fa514de1078064e0bcfab5d7be03c/src/data/set/finite.lean#L271-L277</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infinite_of_finite_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_root_.infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.infinite</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.infinite_univ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hs.union</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite.infinite_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_root_.infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.infinite_univ</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hs.union</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can't see a reason why it shouldn't be <code>Type _</code> or <code>Type u</code>. I tried it with the mathlib version but it wouldn't work, copying the source code but replacing it with <code>Type _</code> meant it did. I'm confused why it's restricted.</p>",
        "id": 251231053,
        "sender_full_name": "Ian Wood",
        "timestamp": 1630331040
    },
    {
        "content": "<p>Probably a slip of the \"pen\".</p>",
        "id": 251231284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630331135
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/8922\">#8922</a> should fix it</p>",
        "id": 251231685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630331294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423237\">@Ian Wood</span> thanks for reporting the bug</p>",
        "id": 251231724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630331322
    },
    {
        "content": "<p>Thanks for fixing it!</p>",
        "id": 251231773,
        "sender_full_name": "Ian Wood",
        "timestamp": 1630331345
    }
]