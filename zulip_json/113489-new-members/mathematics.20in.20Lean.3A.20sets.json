[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset.antisymm</span> <span class=\"n\">sorry</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>The book asks to complete the proof term! I was able to complete using two <code>begin/end </code> blocks but I am not sure if it counts as a solution or a pure proof term must be provided. Anyway, I am blocked by the error in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset.antisymm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">and.intro</span> <span class=\"n\">h1.2</span> <span class=\"n\">h1.1</span><span class=\"o\">)</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>From the previous comment at the beginning of the chapter, it seems that we can't have a solution in proof term?</p>\n<blockquote>\n<p>Due to a quirk of how Lean processes its input, the first example fails if we replace theorem foo with example.</p>\n</blockquote>",
        "id": 213157290,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1602597328
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset.antisymm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"n\">and.right</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and.left</span> <span class=\"n\">h1</span><span class=\"o\">))</span>\n  <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213158927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602597955
    },
    {
        "content": "<p>I just found out that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset.antisymm</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span> <span class=\"n\">and.intro</span> <span class=\"n\">ht</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>also works. I wonder if we have any explicit way to deconstruct the <code>set.mem</code></p>",
        "id": 213159368,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1602598102
    }
]