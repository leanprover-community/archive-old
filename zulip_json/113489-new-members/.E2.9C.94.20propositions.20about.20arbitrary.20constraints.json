[
    {
        "content": "<p>Hi! A couple of clueless code-monkey newbies here.</p>\n<p>We'd like to form a proposition stating that \"there are two arbitrary constraints which, when combined, result in exactly 1 valid value of a <code>vector nat 100</code>. We then plan to do reasoning of the form \"if constraint A does not contain any information at all about a particular value then constraint B must fully determine it (under specific conditions)\".</p>\n<p>Any tips on how to encode this type of problem into Lean? Should the arbitrary constraints be modelled as Props?</p>\n<p>We did some of the natural numbers game a week ago but this is otherwise our first Lean venture, and we're not experienced mathematicians. Diving into the deep-end for fun, probably drowning. We're working with Lean3 and mathlib. Thanks!</p>",
        "id": 315884454,
        "sender_full_name": "J&L",
        "timestamp": 1671041428
    },
    {
        "content": "<p>Can you provide a bit more context? It's hard to understand what you want to do.</p>",
        "id": 315886363,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671042004
    },
    {
        "content": "<p>Think of it like sudoku (that's actually the context that this idea to play with sprung up in).</p>\n<p>There's some <code>vector nat 100</code> (probably actually <code>vector (fin 10) 100</code>).</p>\n<p>There are two arbitrary constraints placed on the vector. Arbitrary as in we never specify them, they're just symbolic constraints. We want to express the proposition \"between the two constraints, there is enough information to restrict the vector to have exactly one unique value\".</p>",
        "id": 315887990,
        "sender_full_name": "J&L",
        "timestamp": 1671042520
    },
    {
        "content": "<p>Are you trying to say \"There is a unique vector <code>v : vector nat 100</code> such that  <code>P v</code> and <code>Q v</code>?\"</p>",
        "id": 315888175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671042579
    },
    {
        "content": "<p>That looks right!</p>",
        "id": 315888321,
        "sender_full_name": "J&L",
        "timestamp": 1671042606
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"mi\">100</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- not true without more information!</span>\n</code></pre></div>",
        "id": 315888442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671042644
    },
    {
        "content": "<p>Oh! That looks nice and easy, thanks!</p>",
        "id": 315888848,
        "sender_full_name": "J&L",
        "timestamp": 1671042752
    },
    {
        "content": "<p>The <code>vector nat 100 -&gt; Prop</code> was the bit we hadn't gotten on our own. Probably need to refresh our understanding of the <code>Prop</code> type, it's been a while since university!</p>",
        "id": 315889211,
        "sender_full_name": "J&L",
        "timestamp": 1671042864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572863\">J&amp;L</span> has marked this topic as resolved.</p>",
        "id": 315889751,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671043060
    }
]