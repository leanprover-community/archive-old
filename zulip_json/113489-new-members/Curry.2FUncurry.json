[
    {
        "content": "<p>Hello.<br>\nI am working through \"Theorem Proving in Lean\" with only minimal background knowledge, so I am having trouble figuring out how to define curry and uncurry functions from the text:</p>\n<p>def curry (α β γ : Type) (f : α × β → γ) : α → β → γ := sorry</p>\n<p>def uncurry (α β γ : Type) (f : α → β → γ) : α × β → γ := sorry</p>\n<p>The core of my confusion is that I do not understand how the return types  α → β → γ and  α × β → γ can be expressed.<br>\nAm I supposed to def a new function inside the given function definition?  Trying that gives an error.</p>\n<p>If I start with lambda x y z g (for types alpha, beta, gamma, and function f), I get x : alpha, y : beta, z : ?m_1, and f : ?m_1.</p>\n<p>Would you please instruct me how to define these functions? </p>\n<p>Thank you.</p>",
        "id": 175834181,
        "sender_full_name": "me myself and I",
        "timestamp": 1568655384
    },
    {
        "content": "<p>Hi! The answer is <code>def curry (α β γ : Type) (f : α × β → γ) : α → β → γ := λ a b, f (a,b)</code>. In a <code>def</code> block, anything before the <code>:</code> is already in scope (so you don't need to lambda the<code>α</code>,<code>β</code>,<code>γ</code> or <code>f</code> ). If you replace <code>sorry</code> with an underscore <code>_</code> and look at the lean output it will give you some hints about what is in scope and what the underscore needs to be replaced with.</p>",
        "id": 175834619,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1568655674
    },
    {
        "content": "<p>So eg </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">curry</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>Gives:</p>\n<div class=\"codehilite\"><pre><span></span>α β γ : Type,\nf : α × β → γ\n⊢ α → β → γ\n</pre></div>",
        "id": 175834720,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1568655735
    },
    {
        "content": "<p>So it's telling you that you need to provide a function that takes a <code>α</code> and <code>β</code> and returns a  <code>γ</code>.</p>",
        "id": 175834901,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1568655875
    },
    {
        "content": "<p>OK; I understand now.<br>\nlambda x y, f(x,y) is actually returning a function with the required signature, yes?<br>\nThank you for your wise and timely assistance!</p>",
        "id": 175835103,
        "sender_full_name": "me myself and I",
        "timestamp": 1568656052
    },
    {
        "content": "<p>yep</p>",
        "id": 175835116,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1568656070
    },
    {
        "content": "<p>np</p>",
        "id": 175835117,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1568656070
    }
]