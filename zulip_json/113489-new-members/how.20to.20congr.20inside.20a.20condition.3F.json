[
    {
        "content": "<p>Another stupid question: how to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't use <code>congr'</code>, because then I lose the condition <code>n ≤ x</code>, needed to apply <code>hst</code>...?</p>",
        "id": 270494673,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643857747
    },
    {
        "content": "<p>You need to \"attach\" the membership condition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span>\n  <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_attach</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_attach</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.mem_Icc</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hst</span> <span class=\"n\">_</span> <span class=\"n\">hy.2</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270497923,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643861167
    },
    {
        "content": "<p>Shouldn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span>\n<span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n<span class=\"n\">library_search</span>\n</code></pre></div>\n<p>prove this? (Didn't test)</p>",
        "id": 270498228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643861482
    },
    {
        "content": "<p>Oh, right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_congr\">docs#finset.sum_congr</a>.</p>\n<p>You can simplify that down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hst</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270498434,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643861674
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hst</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270498465,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643861727
    },
    {
        "content": "<p>I can never remember that \"get simp to do intros\" trick. That's the <code>contextual := tt</code> thing, right? Is this in some FAQ somewhere?</p>",
        "id": 270517177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643878738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, that's the <code>contextual := tt</code> thing. The paragraph right before the last code block at the <a href=\"https://leanprover-community.github.io/extras/simp.html\">simp page</a> mentions it.</p>",
        "id": 270593002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643911842
    },
    {
        "content": "<p>I wish it were easier to invoke.  An idea that came to mind this morning (similar to a proposal I had before but perhaps more sane) is to have flags for tactics.  For example, this could be an additional way you can add <code>contextual := tt</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">hst</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270593240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643911934
    },
    {
        "content": "<p>Or,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span><span class=\"bp\">+</span><span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">hst</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270593462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643912030
    },
    {
        "content": "<p>That way we could have negative flags, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span><span class=\"bp\">-</span><span class=\"n\">bezpi</span><span class=\"bp\">+</span><span class=\"n\">c</span>\n<span class=\"c1\">-- short for</span>\n<span class=\"n\">simp</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">c</span>\n</code></pre></div>\n<p>could turn off beta reduction, eta equivalence, zeta reductions, projection reduction, recursor reduction, while turning on <code>contextual</code></p>",
        "id": 270593778,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643912172
    }
]