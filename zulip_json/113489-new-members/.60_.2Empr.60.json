[
    {
        "content": "<p>I wanted to convert from tactic to term mode in the definition of <code>weaken_times</code> below.<br>\nI managed to do that using <code>eq.rec_on</code>, however, I first tried to use <code>show_term</code> and it produced a <code>_.mpr</code> term which I didn't manage to use. How can I make use of the output of <code>show_term</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">𝕆</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">type.arrow</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⊗`</span> <span class=\"o\">:</span> <span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">type.times</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ctx.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">↣</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">projl</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊗</span> <span class=\"n\">τ</span> <span class=\"bp\">↣</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">term</span>\n<span class=\"kd\">def</span> <span class=\"n\">weaken_times</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">((</span><span class=\"n\">σ</span> <span class=\"bp\">⊗</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ρ</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">ρ</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">projl.app</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)),</span>\n  <span class=\"o\">}</span>\n<span class=\"c1\">-- show_term suggests</span>\n<span class=\"c1\">-- exact _.mpr (projl.app (var 0 _))</span>\n<span class=\"c1\">-- which yields \"unknown identifier _.mpr\"</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 238609515,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620905531
    },
    {
        "content": "<p>Furthermore, I notice that the proof required as the second argument of <code>var</code> gets erased to an <code>_</code> in <code>show_term</code> (i.e. <code>var 0 _</code>). Is that a consequence of proof irrelevance?</p>",
        "id": 238609821,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620905712
    },
    {
        "content": "<p>Try <code>h.mpr</code> or <code>iff.mpr h</code>, perhaps</p>",
        "id": 238611504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1620906986
    },
    {
        "content": "<p>These give me type mismatches along the lines of \"term <code>h</code> has type <code>σ = ρ</code> but is expected to have type <code>?m_1 = ?m_2</code>\"</p>",
        "id": 238612182,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620907446
    },
    {
        "content": "<p>The underscore is a proof, which is hidden by default in lean, you can show it by adding <code>set_option pp.proofs true</code> above your def</p>",
        "id": 238637030,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1620919619
    },
    {
        "content": "<p>Thanks, I didn't know about this prettyprinter option. Now after seeing the full proof there I understand why it's hidden by default</p>",
        "id": 238637627,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1620919882
    }
]