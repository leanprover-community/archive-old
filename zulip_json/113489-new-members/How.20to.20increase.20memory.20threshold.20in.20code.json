[
    {
        "content": "<p>I am in <code>code</code> on <code>ubuntu</code>.  I get this message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">expression</span> <span class=\"n\">equality</span> <span class=\"n\">test'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I increase the memory consumption threshold when <code>lean</code> is getting started up under the hood of <code>code</code>?</p>",
        "id": 220839306,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608769083
    },
    {
        "content": "<p>Ctrl-, to bring up settings. Search for Lean memory. Mine is set at 8K.</p>",
        "id": 220839531,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608769351
    },
    {
        "content": "<p><code>Lean: Memory Limit</code> is the setting</p>",
        "id": 220839534,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608769360
    },
    {
        "content": "<p>but whatever term you're trying to <code>#reduce</code>, the amount you increase to might not be sufficient</p>",
        "id": 220839546,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608769387
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  I am trying to do a proof of the theorem that \"The cancellation law of multiplication for integral domains is equivalent in a commutative ring to the assertion that a product of nonzero factors is not 0.\"  </p>\n<p>I am translating this as <code> (c ≠ 0 → c*a = c*b → a = b) ↔ (a ≠ 0 → b ≠ 0 → a * b ≠ 0) </code>.  With this translation, at a certain point, <code>library_search</code> and <code>suggest</code> run out of memory.   I don't know how to prove it from the <code>comm_ring</code> axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span>  <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Theorem 1. The cancellation law of multiplication for integral domains</span>\n<span class=\"cm\">is equivalent in a commutative ring to the assertion that</span>\n<span class=\"cm\">a product of nonzero factors is not 0. -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma_1_LR</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"n\">h6</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma_1_RL</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"n\">h5</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lemma_1_LR</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lemma_1_RL</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220839791,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608769708
    },
    {
        "content": "<p>your theorems need additional forall quantifications on each side</p>",
        "id": 220841363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608772300
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , I will refine.</p>",
        "id": 220841416,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608772336
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">theorem_1</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220841433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608772366
    },
    {
        "content": "<p>generally when it says you should increase your memory limit, you should ignore the suggestion because something else is going wrong</p>",
        "id": 220841458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608772425
    },
    {
        "content": "<p>Here's a partial proof to help you get started:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">theorem_1</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">e</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">by_contra</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hc</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220841750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608772811
    },
    {
        "content": "<p>For some reason using <code>by_contra h</code> instead of <code>refine by_contra (λ h, _),</code> is taking a really long time for me (but it doesn't time out or run out of memory). Possibly something weird ended up in the typeclass search for <code>decidable_eq A</code></p>",
        "id": 220841841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608772947
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.mk_mapp</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>You can also play with the import set to make it take longer; <code>import tactic</code> is quite bad.</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Could you take a look at whether the typeclass problem is reasonably sized here? It seems like the decision to make <code>linear_order</code> inherit from <code>decidable_eq</code> means that the decidability problem gets quite large, and while caching seems to help I see a lot of repetition from a cursory glance at the log.</p>",
        "id": 220842597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608774056
    },
    {
        "content": "<p>Thanks again <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> here is the finished Theorem 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Theorem 1. The cancellation law of multiplication for integral domains</span>\n<span class=\"cm\">is equivalent in a commutative ring to the assertion that</span>\n<span class=\"cm\">a product of nonzero factors is not 0. -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">left_distrib_minus</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">e</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">by_contra</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hc</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">left_distrib_minus</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220843450,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608775499
    },
    {
        "content": "<p><code>left_distrib_minus</code> has a name, can you find it?</p>",
        "id": 220843507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608775564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>left_distrib</code> doesn't quite fit because it is phrased for <code>a+b</code> and this is <code>a-b</code> and if you instantiate it you get <code>a+(-b)</code> which doesn't quite match the hypothesis set.  I played around with it and ended up having to use a different lemma which instead of sugaring <code>ring</code>, sugars <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">deminus_plus</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">e</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">by_contra</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hc</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">left_distrib</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:=</span> <span class=\"n\">deminus_plus</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">norm_num.mul_pos_neg</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"n\">deminus_plus</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hg</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know how to make use of <code>rfl</code> \"inline\" as a tactic in this case.  If you can help me rewrite one of the <code>deminus_plus</code> lines to use <code>rfl</code> then I can finish it.</p>",
        "id": 220844481,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608777593
    },
    {
        "content": "<p>Recall the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> convention</p>",
        "id": 220844526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608777620
    },
    {
        "content": "<p>what would be the name of a lemma that combines multiplication and subtraction?</p>",
        "id": 220844533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608777657
    },
    {
        "content": "<p><code>deminus_plus</code> also has a name that the naming convention will guide you to</p>",
        "id": 220844588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608777728
    },
    {
        "content": "<p>If you want to prove the <code>have he := deminus_plus ...</code> lines using <code>rfl</code> you will have to state the expected type as in <code>have he : &lt;type&gt; := rfl</code></p>",
        "id": 220844603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608777829
    },
    {
        "content": "<p>I have one hypotheses I need to edit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n</code></pre></div>\n<p>to become</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I'll look for <code>add_neg</code> names or <code>plus_neg</code> names.</p>",
        "id": 220844724,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608777989
    },
    {
        "content": "<p>Ah <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_add_neg\">docs#sub_eq_add_neg</a>.</p>",
        "id": 220844996,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608778492
    },
    {
        "content": "<p>DONE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Theorem 1. The cancellation law of multiplication for integral domains</span>\n<span class=\"cm\">is equivalent in a commutative ring to the assertion that</span>\n<span class=\"cm\">a product of nonzero factors is not 0. -/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">theorem_1</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">e</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">by_contra</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hc</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">left_distrib</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">he</span> <span class=\"o\">:=</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">norm_num.mul_pos_neg</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:=</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hg</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220845248,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608778942
    },
    {
        "content": "<blockquote>\n<p>I'll look for add_neg names or plus_neg names.</p>\n</blockquote>\n<p>Always <code>add</code>, never <code>plus</code></p>",
        "id": 220846269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608780886
    },
    {
        "content": "<p>Your original proof used a theorem <code>a * (b - c) = a * b - a * c</code>. Have you found that lemma yet?</p>",
        "id": 220846338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608780998
    },
    {
        "content": "<p>The code underneath DONE above is pure <code>matlib</code>, there is no extra lemma.  I use the built-in <code>left_distrib</code> and built-in <code>sub_eq_add_neg</code>.</p>",
        "id": 220847252,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608782793
    },
    {
        "content": "<p>You are proving this fact <code>a * (b - c) = a * b - a * c</code> in the middle of your proof, and you don't need to. It's good to get a sense for what to expect in the library, and a distribution lemma like this will certainly be in there. (Since you missed the naming hints, the name is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_sub\">docs#mul_sub</a>.)</p>",
        "id": 220851868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608790835
    }
]