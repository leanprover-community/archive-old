[
    {
        "content": "<p>Dear All,</p>\n<p>I am not completely sure what <code>bUnion</code> refers to exactly, but I found myself needing the lemma below.</p>\n<p>Is it already in mathlib?  I could not find it.<br>\nIs the name reasonable?  I am under the impression that <code>bUnion</code> means that it is a union over elements in a type with a condition that these elements should belong to a subset of the Type, but I could be wrong!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">image_bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">ta</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_Union.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">image_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton_iff.mp</span> <span class=\"n\">ta</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ba</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton_iff.mp</span> <span class=\"n\">ba</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">bUnion_of_singleton</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222207315,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610256826
    },
    {
        "content": "<p><code>bUnion</code> is \"big Union\", or the union of indexed sets. It would be over all the sets of a Type, if that type is <code>fintype</code>, or some <code>set</code> describing the indices. This is as far as I understand.</p>",
        "id": 222207410,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610256980
    },
    {
        "content": "<p>Your lemma is about the union of singletons of elements in <code>s</code>, right?</p>",
        "id": 222207464,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610257089
    },
    {
        "content": "<p>Isn't that just <code>s</code>?</p>",
        "id": 222207467,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610257093
    },
    {
        "content": "<p>Thanks for the explanation on the name!  I thought that it was \"bound Union\", implying a restriction on the indexing variable!</p>\n<p>I realize that the lemma above is not exactly what I need, either.   So, I will try to make <code>s</code> work above and to produce the lemma that I actually want!</p>\n<p>Thanks for the help!</p>",
        "id": 222207545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610257268
    },
    {
        "content": "<p>Btw,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">image_bUnion</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 222207606,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610257390
    },
    {
        "content": "<p>Your proof is much better!  I had found my proof by cleaning up after <code>tidy</code>!   For some reason, I do not like to use <code>simp</code> in my final versions, but in this case, the shortening is so significant, that it makes sense!</p>",
        "id": 222207719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610257575
    },
    {
        "content": "<p>The advice I got from PR comments was that the more \"API\" or \"foundational\" lemmas are totally OK to have proofs like \"ext; simp\" because there isn't much insight into the proof bodies</p>",
        "id": 222207784,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610257729
    },
    {
        "content": "<p>That is, proofs that on paper or in person are like \"oh that's obvious\" can also have proof bodies that are like that. That way scrolling through a file, it's easy to notice that this isn't a significant result, but is truly a \"lemma\".</p>",
        "id": 222207788,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610257783
    },
    {
        "content": "<p>Ok, I had not realized this and it does seem like a good guiding principle!  I am slowly getting the hang of what API means...</p>",
        "id": 222207790,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610257793
    },
    {
        "content": "<p>Back to figuring out exactly what lemma I need and then I will look for it in mathlib!  Otherwise, I will extend this thread!</p>",
        "id": 222207832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610257846
    },
    {
        "content": "<p>Note, I found the proof by first doing <code>simp</code>, and that didn't do much, so, how do we show equality of unions? By equality of the elements, so <code>ext</code>. Then <code>ext, simp</code>. That was almost right, but in the <code>exists</code> statement in the RHS of the iff, one of the equalities was flipped compared to the LHS. So I just included <code>eq_comm</code> in the simp set here.</p>",
        "id": 222207841,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610257888
    },
    {
        "content": "<p>Thanks for the details on how you found the proof!  My strategy is also to start with <code>simp</code>, try <code>tidy</code> otherwise, finish the proof (if I can!), and finally clean up to leave no inbetween <code>simp</code>.  I am still not too much onboard on giving hints to <code>simp</code>: I will try to remember about this!</p>",
        "id": 222208003,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610258208
    },
    {
        "content": "<p>After the discussion, it turns out that the lemma below actually does finish my proof.  I thought that some lemma around <code>Union_of_singleton</code> could have worked, but I did not find it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">setext</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>In case you want the more verbose proof, here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">setext</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">mem_Union.mpr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">⟩,</span> <span class=\"n\">mem_singleton</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨⟩⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222209193,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610260779
    },
    {
        "content": "<p>git grep of <code>⋃ i :</code> gives very few results</p>",
        "id": 222209525,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610261381
    },
    {
        "content": "<p>So your firstlemma would be good simp lemma! You might call it this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.bUnion_of_singleton_of_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 222209568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610261428
    },
    {
        "content": "<p>but this might now be no longer a <code>bUnion</code> but a <code>Union</code> instead.</p>",
        "id": 222209621,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610261551
    },
    {
        "content": "<p>as one can see by the simp lemmas used in the proof, they only mention <code>Union</code>, not <code>bUnion</code>.</p>",
        "id": 222209632,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610261615
    },
    {
        "content": "<p>Damiano, <code>bUnion</code> does stand for \"bounded union\". Did you read the <a href=\"https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html#sets\">relevant section of MIL</a>?</p>",
        "id": 222212939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610268590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, why the <code>of_coe</code>? What coercion is happening there?</p>",
        "id": 222213102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610268924
    },
    {
        "content": "<p>Sorry for the mistake re \"bounded Union\" vs \"big Union\", correcting up top.</p>",
        "id": 222213142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610268969
    },
    {
        "content": "<p>There is a coercion from <code>set s</code> to <code>set R</code>.</p>",
        "id": 222213147,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610269000
    },
    {
        "content": "<p>Is there a lemma to convert from a union over a subtype to a union over a condition?</p>",
        "id": 222213588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610269908
    },
    {
        "content": "<p>I can't help feeling that Damiano posted a very similar problem before</p>",
        "id": 222213643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610269972
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 222215058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610272657
    },
    {
        "content": "<p>Patrick, I probably had read that section, but at a time where it made much less sense than it might now.  I will brush up on it again!</p>\n<p>Eric, you are right that I struggle often with sets/subtype/coercions.  I do not know if it is only me, or it is a common difficulty.</p>",
        "id": 222215904,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610274335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/image_bUnion/near/222213588\">said</a>:</p>\n<blockquote>\n<p>Is there a lemma to convert from a union over a subtype to a union over a condition?</p>\n</blockquote>\n<p>Of course there is. Did you try <code>library_search</code>?</p>",
        "id": 222215970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610274453
    },
    {
        "content": "<p>No, I was sending that from mobile without access to a shell</p>",
        "id": 222217010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610276274
    },
    {
        "content": "<p>Damiano, my point was that I think a previous thread might have concluded \"here is a lemma that ought to be in mathlib\", but the lemma never made it.</p>",
        "id": 222217067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610276336
    },
    {
        "content": "<p>Eric, you may be right, since I have been struggling with coercions and sets also for the strand with the discrete_topology stuff and with the Liouville PR.  In any case, I have now created PR <a href=\"https://github.com/leanprover-community/mathlib/issues/5691\">#5691</a>, which adds this <code>simp</code> lemma.  In maintaining the style of the previous result in the file, I changed the proof from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ext</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 222227953,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610293832
    },
    {
        "content": "<p>I also discovered that the result <code>bUnion_of_singleton</code> (without <code>_coe</code>) exists in mathlib and is not a proof of this lemma.  However, I am not entirely sure why the two statements are not equivalent.</p>",
        "id": 222227973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610293898
    },
    {
        "content": "<p>In a similar spirit, I also created PR <a href=\"https://github.com/leanprover-community/mathlib/issues/5692\">#5692</a>, adding another <code>bUnion</code> lemma, this time for <code>zero_loci</code>!</p>\n<p>I am trying to get as much as possible of what I have on <code>is_open_map comap C</code> into mathlib, before I will have to devote more time to teaching!</p>",
        "id": 222229633,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610296336
    },
    {
        "content": "<p>Here's the old thread: <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/name-hunt.3A.20Union_of_singleton.3F\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/name-hunt.3A.20Union_of_singleton.3F</a></p>",
        "id": 222281774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610361997
    },
    {
        "content": "<p>Eric: thank you very much for finding this!  It was indeed the same issue: I had forgotten that I had asked about it already!</p>\n<p>How did you find it?  I feel that I am not so good at using the search feature on Zulip...</p>",
        "id": 222282024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610362150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/image_bUnion/near/222215970\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/image_bUnion/near/222213588\">said</a>:</p>\n<blockquote>\n<p>Is there a lemma to convert from a union over a subtype to a union over a condition?</p>\n</blockquote>\n<p>Of course there is. Did you try <code>library_search</code>?</p>\n</blockquote>\n<p>Library search found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.bUnion_eq_Union\">docs#set.bUnion_eq_Union</a>, which solves:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.Union_subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">set.bUnion_eq_Union</span> <span class=\"n\">s</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 222282550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610362452
    }
]