[
    {
        "content": "<p>Does anyone know of a lemma like the following in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_refined_of_subset_disjoint_cover</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbv</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Zab</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∩</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I have looked through the partitions file, but there doesnt seem to be anything like this in there. Is there some name for lemmas about \"disjoint covers by two sets\" in lean? I am really not sure what to search to find this.</p>",
        "id": 219618217,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219618217\">said</a>:</p>\n<blockquote>\n<p>Does anyone know of a lemma like the following in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_refined_of_subset_disjoint_cover</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbv</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Zab</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∩</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I have looked through the partitions file, but there doesnt seem to be anything like this in there. Is there some name for lemmas about \"disjoint covers by two sets\" in lean? I am really not sure what to search to find this.</p>\n</blockquote>\n<p>I have proven this lemma myself, but I want to PR some code into mathlib so if there exists a framework for working with situations like these I should probably rewrite some of my code to use that instead</p>",
        "id": 219618327,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700092
    },
    {
        "content": "<p>I would just prove it by hand, this looks like a very specific lemma</p>",
        "id": 219618349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607700102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219618349\">said</a>:</p>\n<blockquote>\n<p>I would just prove it by hand, this looks like a very specific lemma</p>\n</blockquote>\n<p>Yeah. And where would it go in mathlib? I would like to keep this as a separate lemma because it feels like this will be useful when working with normal spaces.</p>",
        "id": 219618465,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700146
    },
    {
        "content": "<p>Because then you often end up with the situation of having a \"refinement\" of a disjoint cover</p>",
        "id": 219618523,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700172
    },
    {
        "content": "<p>I guess what Im trying to say is that it feels like the statement should go in separation.lean (where the stuff about normal spaces is). But then again the statement itself has nothing to do with topological spaces</p>",
        "id": 219618716,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700251
    },
    {
        "content": "<p>What did your proof look like? Perhaps a better question is \"can I write this proof in terms of one or two lemmas that already exist\"?</p>",
        "id": 219618975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607700376
    },
    {
        "content": "<p>Kenny is arguing that this is not suitable for inclusion in a maths library, because there are probably 50 other lemmas of this complexity and the basic tools you need to prove it (Z in a union b and b in v so Z in a union v, u intersect v empty and Z in u so Z intersect v empty, Z in a union v and Z intersect v empty so Z in a) are probably all there already.</p>",
        "id": 219619041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607700411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219619041\">said</a>:</p>\n<blockquote>\n<p>Kenny is arguing that this is not suitable for inclusion in a maths library, because there are probably 50 other lemmas of this complexity and the basic tools you need to prove it (Z in a union b and b in v so Z in a union v, u intersect v empty and Z in u so Z intersect v empty, Z in a union v and Z intersect v empty so Z in a) are probably all there already.</p>\n</blockquote>\n<p>ah so I should just make a \"have\" statement or something in my main lemma for this, and then prove it there</p>",
        "id": 219619157,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219618975\">said</a>:</p>\n<blockquote>\n<p>What did your proof look like? Perhaps a better question is \"can I write this proof in terms of one or two lemmas that already exist\"?</p>\n</blockquote>\n<p>It used <code>set.subset_compl_iff_disjoint</code> a bunch. The rest is just basic set theory operations (transitivity of subset, intersections is commutative etc.)</p>",
        "id": 219619279,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219619041\">said</a>:</p>\n<blockquote>\n<p>Kenny is arguing that this is not suitable for inclusion in a maths library, because there are probably 50 other lemmas of this complexity and the basic tools you need to prove it (Z in a union b and b in v so Z in a union v, u intersect v empty and Z in u so Z intersect v empty, Z in a union v and Z intersect v empty so Z in a) are probably all there already.</p>\n</blockquote>\n<p>Also I need to use it twice in my main lemma, so the initial reason I made it a separate lemma was to decrease the amount of code.</p>",
        "id": 219619591,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700635
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint.mono\">docs#disjoint.mono</a> is most of your proof</p>",
        "id": 219619660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607700675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219619660\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint.mono\">docs#disjoint.mono</a> is most of your proof</p>\n</blockquote>\n<p>I will try to use this one then</p>",
        "id": 219619801,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700739
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_refined_of_subset_disjoint_cover</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbv</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Zab</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">Zab</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Zab</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hbv</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">hbv</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">hZ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">huv.mono</span> <span class=\"n\">hZ</span> <span class=\"n\">hbv</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hZ</span> <span class=\"n\">hbv</span> <span class=\"n\">huv</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219619874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607700777
    },
    {
        "content": "<p>Goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Zab</span><span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">Z</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which looks easy, but I haven't found the lemma for</p>",
        "id": 219620066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607700877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219620066\">said</a>:</p>\n<blockquote>\n<p>Goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Zab</span><span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">Z</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Z</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which looks easy, but I haven't found the lemma for</p>\n</blockquote>\n<p>set.subset_compl_iff_disjoint should help</p>",
        "id": 219620125,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700908
    },
    {
        "content": "<p>I was expecting a lemma about lattices, not sets</p>",
        "id": 219620150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607700923
    },
    {
        "content": "<p>oh. I though lean would remember that we are working with lattices \"that are sets\"</p>",
        "id": 219620193,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700948
    },
    {
        "content": "<p>but yeah then this could be stated more generally I guess</p>",
        "id": 219620214,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607700961
    },
    {
        "content": "<p>Sure, but this should be provable for all lattices</p>",
        "id": 219620252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607700964
    },
    {
        "content": "<p>I think this might make a good lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- or is this right_sup?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">disjoint.left_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 219620651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607701196
    },
    {
        "content": "<p>Assuming it's true, anyway</p>",
        "id": 219620996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607701359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219620651\">said</a>:</p>\n<blockquote>\n<p>I think this might make a good lemma</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- or is this right_sup?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">disjoint.left_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If it is true, in my head the reason for why it holds uses complements</p>",
        "id": 219621010,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607701365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219620996\">said</a>:</p>\n<blockquote>\n<p>Assuming it's true, anyway</p>\n</blockquote>\n<p>yeah</p>",
        "id": 219621017,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607701370
    },
    {
        "content": "<p>there is this in the complement case, but maybe you knew about it already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint_left_iff</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_compl</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 219621137,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607701437
    },
    {
        "content": "<p>Oh this looks promising</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf_eq_bot_iff_le_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 219621342,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607701523
    },
    {
        "content": "<p><code>complete_lattice</code> may be too weak, I don't know my lattices</p>",
        "id": 219621347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607701524
    },
    {
        "content": "<p>My statement was wrong</p>",
        "id": 219622719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607702222
    },
    {
        "content": "<p>Should have been <code>b</code> not <code>c</code></p>",
        "id": 219622738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607702230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint.left_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inf_le_inf_left</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_idem</span><span class=\"o\">,</span> <span class=\"n\">inf_sup_left</span><span class=\"o\">,</span> <span class=\"n\">disjoint_iff.mp</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_eq</span><span class=\"o\">,</span> <span class=\"n\">le_inf_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this.2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219622928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607702323
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint.left_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">le_of_inf_le_sup_le</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"n\">h</span> <span class=\"n\">le_sup_right</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">disjoint_iff.mp</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">bot_le</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219625111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607703226
    },
    {
        "content": "<p>This golf is a weird one - I need the lambda for elaboration to work out the types in the right order</p>",
        "id": 219625189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607703244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219625111\">said</a>:</p>\n<blockquote>\n<p>Golfed:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint.left_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">le_of_inf_le_sup_le</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"n\">h</span> <span class=\"n\">le_sup_right</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">disjoint_iff.mp</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">bot_le</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh I didnt know this existed: ▸  <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> Now I can do a lot more in term mode proofs! Thank you for the help :)</p>",
        "id": 219626440,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607703841
    },
    {
        "content": "<p>Note that the pickiness of the triangle is why I had to use the lambda</p>",
        "id": 219626508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607703860
    },
    {
        "content": "<p>Also I think you probably want a different name for that lemma than what I have, given that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint_sup_left\">docs#disjoint_sup_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/disjoint.sup_left\">docs#disjoint.sup_left</a> already exist</p>",
        "id": 219626560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607703889
    },
    {
        "content": "<p>Perhaps <code>disjoint.left_le_of_le_sup_right (h : a ≤ b ⊔ c)</code> and <code>disjoint.left_le_of_le_sup_left (h : a ≤ c ⊔ b)</code> or something like that, where the first <code>left</code> is because it's the left argument of <code>disjoint</code>.</p>",
        "id": 219626828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607704017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/lemma.20in.20mathlib/near/219626828\">said</a>:</p>\n<blockquote>\n<p>Perhaps <code>disjoint.left_le_of_le_sup_right (h : a ≤ b ⊔ c)</code> and <code>disjoint.left_le_of_le_sup_left (h : a ≤ c ⊔ b)</code> or something like that, where the first <code>left</code> is because it's the left argument of <code>disjoint</code>.</p>\n</blockquote>\n<p>I played around a bit with the left case and this was the best I could come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">disjoint.left_le_of_le_sup_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">le_of_inf_le_sup_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">((</span><span class=\"n\">disjoint_iff.mp</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">bot_le</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">sup_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"n\">h</span> <span class=\"n\">le_sup_left</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Had to use <code>eq.subst</code> twice which was why I couldnt get your trick for the first one to work. So if I understood correctly, the problem with ▸ is that it does not allow any metavariables in any of the arguments and goal right? Thats why I manually gave <code>le_of_inf_le_sup_le</code>its arguments, but also <code>sup_comm</code> since there seemed to be no way of those being inferred before <code>▸</code> is applied</p>",
        "id": 219660307,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607719794
    },
    {
        "content": "<p>Also after playing around with it for a bit I realised that your solution with the lambda is pretty clever :)</p>",
        "id": 219660394,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607719833
    }
]