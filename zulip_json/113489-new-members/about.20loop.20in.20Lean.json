[
    {
        "content": "<p>I known in functional programming language like Haskell using recursion to realize loops ,while Lisp has a few realizations for loop !<br>\nIs it necessary for Lean to have a loop structure,like 'for loop,while loop' or others ? Thanks !</p>",
        "id": 244793421,
        "sender_full_name": "li sheng",
        "timestamp": 1625304017
    },
    {
        "content": "<p>Lean does not permit writing non-terminating programs (except in meta code), which pretty much rules out while loops. I don't know if we have a meta while loop, but I think it would be straightforward to build one.</p>",
        "id": 244793509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625304195
    },
    {
        "content": "<p>You can do a for loop with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.range\">docs#list.range</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map\">docs#list.map</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.foldl\">docs#list.foldl</a></p>",
        "id": 244793576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625304271
    },
    {
        "content": "<p>I see, Thanks!</p>",
        "id": 244793595,
        "sender_full_name": "li sheng",
        "timestamp": 1625304339
    },
    {
        "content": "<p>Lean4 will introduce a <code>for</code> notation within <code>do</code> that almost makes you feel you are writing in an imperative language: <a href=\"https://leanprover.github.io/lean4/doc/do.html#iteration\">https://leanprover.github.io/lean4/doc/do.html#iteration</a>. But even with that, Lean doesn't use loops in the sense of imperative programs, and everything comes down to recursion, like Eric said.</p>",
        "id": 244794121,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1625305041
    },
    {
        "content": "<p>Great!Thank you!</p>",
        "id": 244794335,
        "sender_full_name": "li sheng",
        "timestamp": 1625305282
    }
]