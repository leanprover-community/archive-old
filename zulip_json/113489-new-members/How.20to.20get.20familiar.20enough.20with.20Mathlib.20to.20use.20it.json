[
    {
        "content": "<p>I have been learning Lean for a few weeks now; I started with the natural numbers game, then Theorem Proving in Lean, and have since written around 3000 lines of Lean formalizing basic topological facts and the necessary set theory/function theory/logic for them. But I really failed to use libraries for this (failing even to use Lean's core library); if I needed a basic logic fact for a <code>rw</code>, I just proved it. Similarly for sets, functions, etc. After spending about 1000 lines giving a definition of finite (bijection with <code>{0,1,...,n}</code>) and showing the subsets of finite sets are finite and union of finite is finite, I thought I might want to start using facts from libraries and going about more doing \"proper math\". So I saw that no one has formalized basic facts about Hilbert spaces, and I thought I try my hand at that. But then I realized I'd need a working knowledge of (parts of) the libraries on real and complex numbers, metric space topology, linear algebra, normed spaces, etc. This seems totally impossible to get, so I would appreciate any advice on how to start familiarizing myself with the libraries enough to start building on them.</p>",
        "id": 198667302,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590412419
    },
    {
        "content": "<p>We currently don't have a better answering than reading the <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a> . There are projects to improve on this, but time is scarce.</p>",
        "id": 198667531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590412539
    },
    {
        "content": "<p>But see also <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a></p>",
        "id": 198667605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590412564
    },
    {
        "content": "<p>I'm pretty sure that when I started formalising undergraduate level mathematics I had no working knowledge of the libraries, and proved a bunch of things myself. The point which I had not understood back then, and do understand now, is the \"library philosophy\". Is this obscure result in the library? No. Can its proof be broken up into a small number of simple steps, each of which is natural? Yes. Are each of the simple steps in the library? Probably, and I can look for them by abstracting what I'm after and trying <code>library_search</code>, or just reading the library files and getting a feel for the kind of theorems which are proved. </p>\n<p>I found finding my own proofs a lot of fun, even crappy proofs which were inefficient, because I would get a buzz and some confidence out of finding my own proof of something. But if you want to do Hilbert spaces then you should just start, and think clearly, and expect that standard natural results are already proved. I formalised basic 1st year undergrad stuff for 3000 lines like you, and then I started on schemes despite the fact that I was woefully underprepared in some sense, and I asked a lot of questions here, and we got there in the end. People will help you if you are asking questions about Hilbert spaces, there are plenty of people here that would love to see Hilbert spaces in mathlib and these people are going to be happy to help.</p>",
        "id": 198668033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590412862
    },
    {
        "content": "<p>It still feels pretty pointless to start on Hilbert spaces without having a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/sesquilinear_form.html\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/sesquilinear_form.html</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/banach.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/banach.html</a></p>",
        "id": 198668433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590413094
    },
    {
        "content": "<p>And, as soon as definitions are there, also look at <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/complemented.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/complemented.html</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/convex/basic.html\">https://leanprover-community.github.io/mathlib_docs/analysis/convex/basic.html</a> (working towards projection lemmas)</p>",
        "id": 198668833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590413332
    },
    {
        "content": "<blockquote>\n<p>But then I realized I'd need a working knowledge of (parts of) the libraries on real and complex numbers, metric space topology, linear algebra, normed spaces, etc. This seems totally impossible to get</p>\n</blockquote>\n<p>This isn't totally impossible to get at all. The library files are not scary. Skip the definitions because you know what they are supposed to say -- instead, read the docstrings. Skip the proofs because you can look them up in a book; they are not written to be human-readable anyway. Look at the theorem statements. Make sure you understand them -- they are what you will need. Learn the various ways of searching for them (e.g. the ctrl-space trick, learning naming conventions, <code>library_search</code>). Don't be scared by the library files. If you find one without a docstring and you really can't get your head around it, mention it here and someone might write one. Start where Patrick suggests. Mathlib is not scary -- people who think it's scary are just reading it wrong.</p>",
        "id": 198669191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590413548
    },
    {
        "content": "<p>I'll start working on it.</p>",
        "id": 198669372,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590413672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20get.20familiar.20enough.20with.20Mathlib.20to.20use.20it/near/198669191\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But then I realized I'd need a working knowledge of (parts of) the libraries on real and complex numbers, metric space topology, linear algebra, normed spaces, etc. This seems totally impossible to get</p>\n</blockquote>\n<p>This isn't totally impossible to get at all. The library files are not scary. Skip the definitions because you know what they are supposed to say -- instead, read the docstrings. Skip the proofs because you can look them up in a book; they are not written to be human-readable anyway. Look at the theorem statements. Make sure you understand them -- they are what you will need. Learn the various ways of searching for them (e.g. the ctrl-space trick, learning naming conventions, <code>library_search</code>). Don't be scared by the library files. If you find one without a docstring and you really can't get your head around it, mention it here and someone might write one. Start where Patrick suggests. Mathlib is not scary -- people who think it's scary are just reading it wrong.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> should this become a blogpost “How to learn the library”?</p>",
        "id": 198686862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590425663
    },
    {
        "content": "<p>Perhaps when I've finished my marking :-) But I'll definitely consider it! I had no idea what was going on when I first tried to read the library.</p>",
        "id": 198686884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590425693
    },
    {
        "content": "<p>I also hope that the new mathlib overview will be helpful when it will exist.</p>",
        "id": 198688497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590427231
    },
    {
        "content": "<p>“Suggest” and “library_search” have been very useful to me. Sometimes they work better if you open a new goal state for the specific theorem you want.</p>",
        "id": 198721572,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590470514
    },
    {
        "content": "<p>I had the same feeling yesterday, when had to prove (to complete Kevin's homework) that the norm of a complex number is non-negative. I realised that someone must have proved that the square of a real is always non-negative, but after much time spent around I ended up with a trick (and I copy-paste here in case someone is willing to give me an opinion on how poor it is..):<br>\n<code>lemma norm_sq_nonneg (z : ℂ) : 0 ≤ norm_sq z := \nbegin rw norm_sq,\nhave h: ∀ a : ℝ, 0 ≤ a*a ,\n    intro,\n    cases le_total 0 a with posa nega,\n    apply mul_nonneg posa posa,\n    apply mul_nonneg_of_nonpos_of_nonpos nega nega,\n    apply add_nonneg,\nall_goals {apply h},\nend</code></p>\n<p>So I also believe that a tutorial on how to properly search and browse the library would be great!</p>\n<p>Added: I have eventually realized that in his solutions, Kevin complains that CS told him that \"reals were almost entirely developed\" but that he quite disagrees...</p>",
        "id": 198745507,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1590490478
    },
    {
        "content": "<p>For what it's worth, this lemma is included as <code>mul_self_nonneg : ∀ a, a * a ≥ 0</code> in <code>algebra/ordered_ring.lean</code>, but <code>library_search</code> or <code>suggest</code> don't seem to find it...</p>",
        "id": 198746479,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590491046
    },
    {
        "content": "<p>As I suspected, it's fixed when we switch the <code>≥</code> in the type of <code>mul_self_nonneg</code> to <code>≤</code>. Let me make a PR...</p>",
        "id": 198747067,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590491459
    },
    {
        "content": "<p>You don't even have to PR core, and wait for a new version of Lean... [/self-indulgence]</p>",
        "id": 198747715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590491974
    },
    {
        "content": "<p>Hmm, I don't see why that would matter to <code>library_search</code>--isn't it perfectly happy to give correct but conceptually nonsensical proofs that rely on unfolding semireducible things?</p>",
        "id": 198748312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590492428
    },
    {
        "content": "<p>I believe the problem arises because <code>library_search</code> only unfolds the goal, not all the lemmas in scope. So to solve a goal <code>a * a ≥ 0</code>, it unfolds it to <code>0 ≤ a * a</code> and looks for lemmas that return something with <code>≤</code>. The head symbol for this lemma is <code>≥</code> which doesn't get unfolded further and we get a mismatch.</p>",
        "id": 198749876,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590493555
    },
    {
        "content": "<p>This is tricky, unfolding more stuff could make library_search slower</p>",
        "id": 198749951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590493597
    },
    {
        "content": "<p>Ah, it's a bit more nuanced. It's because the function <code>head_symbol</code>, used to compute the head symbol of the goal, contains a special case to map <code>&gt;</code> to <code>&lt;</code> and <code>≥</code> to <code>≤</code>, while <code>match_head_symbol</code>, used to find the lemmas with this head symbol, doesn't perform this mapping</p>",
        "id": 198750152,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590493766
    },
    {
        "content": "<p>Oh, I didn't realize it used any kind of symbol matching, I thought it just tried to <code>apply</code> everything</p>",
        "id": 198750458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590493979
    },
    {
        "content": "<p>It's pretty lame: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/suggest.lean#L61\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/suggest.lean#L61</a></p>",
        "id": 198753081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590495417
    },
    {
        "content": "<p>How about using one function <code>normalize_synonym</code> that we apply to the goal and to the lemmas? I believe it's sufficient to map <code>&gt;</code> to <code>&lt;</code>, <code>≥</code> to <code>≤</code> and <code>not</code> to <code>false</code> to preserve the current behaviour</p>",
        "id": 198753285,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590495557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">normalize_synonym</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">gt</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">ge</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">not</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span>   <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- compute the head symbol of an expression, but normalise synonyms -/</span>\n<span class=\"c1\">-- We may want to tweak this further?</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">head_symbol</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">head_symbol</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">head_symbol</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">normalize_synonym</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">`_</span>\n\n<span class=\"c1\">-- snip --</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Determine if, and in which way, a given expression matches the specified head symbol. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">match_head_symbol</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">head_symbol_match</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">match_head_symbol</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">`</span><span class=\"n\">iff</span> <span class=\"bp\">=</span> <span class=\"n\">hs</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ex</span> <span class=\"k\">else</span>\n                       <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">match_head_symbol</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">match_head_symbol</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                       <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ex</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n                           <span class=\"n\">some</span> <span class=\"n\">both</span>\n                       <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ex</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">mpr</span>\n                       <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">mp</span>\n                       <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n                       <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">match_head_symbol</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"bp\">=</span> <span class=\"n\">normalize_synonym</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ex</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hs</span> <span class=\"bp\">=</span> <span class=\"bp\">`_</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">ex</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 198753473,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590495671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, did you try this out (e.g. run the tests file)? I'm certainly game to change this.</p>",
        "id": 198761307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590499718
    },
    {
        "content": "<p>I just finished testing it, and I'm happy enough with the results. I didn't notice any changes in running time, but I haven't checked whether there are any benchmarks. Apart from <code>&gt;</code> versus <code>&lt;</code>, the change also improves on <code>¬</code> versus <code>false</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lemma_with_false_in_head</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">silence_library_search</span> <span class=\"n\">false</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: `exact lemma_with_false_in_head a b h1 h2`</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: `exact lemma_with_false_in_head a b h1`</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: `exact lemma_with_false_in_head a b h1`</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- fails - do we want this to work too?</span>\n</code></pre></div>",
        "id": 198762069,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590500050
    },
    {
        "content": "<p>I've made a PR out of the changes: <a href=\"https://github.com/leanprover-community/mathlib/pull/2829\">https://github.com/leanprover-community/mathlib/pull/2829</a></p>",
        "id": 198764371,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590501132
    }
]