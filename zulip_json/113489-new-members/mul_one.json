[
    {
        "content": "<p>Hello, is there a way to define mul_one or one_mul without a lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 261711216,
        "sender_full_name": "YJ",
        "timestamp": 1637099074
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? The answer depends on the types of your terms</p>",
        "id": 261711254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637099104
    },
    {
        "content": "<p>Of course you can just copy the proof of <code>mul_one</code>, that way you don't use it. I don't really understand your question</p>",
        "id": 261711325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637099149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_one/near/261711325\">said</a>:</p>\n<blockquote>\n<p>Of course you can just copy the proof of <code>mul_one</code>, that way you don't use it. I don't really understand your question</p>\n</blockquote>\n<p>type <code>N</code> , I would like to see how to define mul_one without using a lemma</p>",
        "id": 261712589,
        "sender_full_name": "YJ",
        "timestamp": 1637099803
    },
    {
        "content": "<p>Have you played the natural numbers games?</p>",
        "id": 261712644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637099838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_one/near/261712644\">said</a>:</p>\n<blockquote>\n<p>Have you played the natural numbers games?</p>\n</blockquote>\n<p>just starting it</p>",
        "id": 261712812,
        "sender_full_name": "YJ",
        "timestamp": 1637099901
    },
    {
        "content": "<p>Not sure if the main one is actually working at the moment. There is a mirror at <a href=\"https://cbirkbeck.github.io/natural_number_game/?world=2&amp;level=1\">https://cbirkbeck.github.io/natural_number_game/?world=2&amp;level=1</a></p>",
        "id": 261712884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637099941
    },
    {
        "content": "<p>If your question is \"how is it proved from first principles\", then the following shows you how mathlib proves it:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_one/src\">src#nat.mul_one</a></p>\n</div></div>\n<p>Note that this is probably a spoiler for the NNG, although likely not a very helpful one.</p>",
        "id": 261713122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637100026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_one/near/261712884\">said</a>:</p>\n<blockquote>\n<p>Not sure if the main one is actually working at the moment. There is a mirror at <a href=\"https://cbirkbeck.github.io/natural_number_game/?world=2&amp;level=1\">https://cbirkbeck.github.io/natural_number_game/?world=2&amp;level=1</a></p>\n</blockquote>\n<p>Thank you so much this is really helpful</p>",
        "id": 261715927,
        "sender_full_name": "YJ",
        "timestamp": 1637101404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_one/near/261713122\">said</a>:</p>\n<blockquote>\n<p>If your question is \"how is it proved from first principles\", then the following shows you how mathlib proves it:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_one/src\">src#nat.mul_one</a></p>\n</div></div>\n<p>thank you regardless, I will have a look! <br>\nNote that this is probably a spoiler for the NNG, although likely not a very helpful one.</p>\n</blockquote>",
        "id": 261716127,
        "sender_full_name": "YJ",
        "timestamp": 1637101500
    },
    {
        "content": "<p>That's actually one of my favourite proofs in mathlib. Abusing a&lt;b = a+1&lt;=b is one thing but this is something else.</p>",
        "id": 261717585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637102182
    },
    {
        "content": "<p>How do I introduce this axiom in lean if I want to use it to rewrite the below theorem <code>lemma mul_one</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">one_eq_succ_zero</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as an axiom for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 261800191,
        "sender_full_name": "YJ",
        "timestamp": 1637162999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_eq_succ_zero</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- it's true by definition</span>\n</code></pre></div>",
        "id": 261800399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163075
    },
    {
        "content": "<p><del>src#nat.has_one</del> oh nevermind, you're doing NNG with <code>mynat</code> not <code>nat</code></p>",
        "id": 261800442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163091
    },
    {
        "content": "<p>By \"introduce\" do you mean \"define\" or \"use\"?</p>",
        "id": 261800664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163160
    },
    {
        "content": "<p>define and use</p>",
        "id": 261800830,
        "sender_full_name": "YJ",
        "timestamp": 1637163226
    },
    {
        "content": "<p>I tried defining it as it is earlier as it's true by definiton as you said but it seems that when i try to rewrite the <code>mul_one</code> using it, it doesn't work as it should</p>",
        "id": 261800941,
        "sender_full_name": "YJ",
        "timestamp": 1637163269
    },
    {
        "content": "<p>Is this in the NNG, or in your own file locally?</p>",
        "id": 261800959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163281
    },
    {
        "content": "<p>I don't think NNG lets you define your own lemmas, because it's not trying to teach that</p>",
        "id": 261800976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163294
    },
    {
        "content": "<p>its on the lean prover web editor</p>",
        "id": 261801019,
        "sender_full_name": "YJ",
        "timestamp": 1637163315
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 261801059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163330
    },
    {
        "content": "<p>Including the definition of <code>mynat</code></p>",
        "id": 261801084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637163339
    },
    {
        "content": "<p>I'm using <code>nat</code>, <br>\nYeah In the NNG, <code>one_eq_succ_zero : 1 = succ(0)</code> is  just introduced to be used for a theorem, but I would like to learn more about how it can be used to define <code>mul_one</code></p>",
        "id": 261801450,
        "sender_full_name": "YJ",
        "timestamp": 1637163483
    },
    {
        "content": "<p>The definition of 1 is succ(0).</p>",
        "id": 261825842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637173188
    }
]