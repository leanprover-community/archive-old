[
    {
        "content": "<p>We have this theorem in <code>mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_num_denom</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"n\">q.num</span> <span class=\"bp\">*</span> <span class=\"n\">r.denom</span> <span class=\"bp\">+</span> <span class=\"n\">q.denom</span> <span class=\"bp\">*</span> <span class=\"n\">r.num</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">/.</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">q.denom</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Now suppose </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"kd\">variables</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>\n<p><strong>Question:</strong> Does <code>(q+r).denom</code> actually look like <code>(↑q.denom * ↑r.denom : ℤ) </code>, or something else?  If it's that, can I rely on it in a proof?</p>\n<p>I'm asking because somewhere in the code it says that Lean likes to keep the size of the denominator down to avoid space crunches in proofs.  In the above case, suppose <code>m ≥ n</code>.  Then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span>\n         <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span>\n         <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>in which case </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>Or is it really</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I need to know which way Lean behaves for a proof.</p>\n<p>This is an interesting (to me) edge case where the proof might depend on an implementation detail which is not strictly a mathematical truth.</p>",
        "id": 222234766,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610304040
    },
    {
        "content": "<p>Denom is a function on rationals so if two rationals are equal they must have equal denominators, hence it cannot depend om what you added together to get that rational.</p>",
        "id": 222235422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610305118
    },
    {
        "content": "<p>1/3 + 1/6 = 1/2</p>",
        "id": 222237265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610306585
    },
    {
        "content": "<p>@Kenny Lau I'm trying to figure out if, under the hood, <code>1/3 + 1/6 = 1/2</code> as you say, or <code>9/18</code>.   If I just looked at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_num_denom</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"n\">q.num</span> <span class=\"bp\">*</span> <span class=\"n\">r.denom</span> <span class=\"bp\">+</span> <span class=\"n\">q.denom</span> <span class=\"bp\">*</span> <span class=\"n\">r.num</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">/.</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">q.denom</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r.denom</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I might think it was <code>9/18</code>.  What patch of code in Lean makes it <code>1/2</code>?</p>",
        "id": 222240279,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310263
    },
    {
        "content": "<p>you need to look at the <strong>definition</strong> of <code>+</code></p>",
        "id": 222240319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310342
    },
    {
        "content": "<p>or <code>/.</code></p>",
        "id": 222240323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310343
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/3e7efd4ecd5d379932a89212eebd362beb01309e/src/data/rat/basic.lean\">https://github.com/leanprover-community/mathlib/blob/3e7efd4ecd5d379932a89212eebd362beb01309e/src/data/rat/basic.lean</a><br>\nL254:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rat.add</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>LL251-252:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">c₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">c₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mk_pnat</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₂</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span> <span class=\"bp\">*</span> <span class=\"n\">d₁</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">d₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₂</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>LL73-86:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Form the quotient `n / d` where `n:ℤ` and `d:ℕ+` (not necessarily coprime) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk_pnat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">dpos</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n.nat_abs</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">n'.gcd</span> <span class=\"n\">d</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat.le_div_iff_mul_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_pos_of_pos_right</span> <span class=\"n\">_</span> <span class=\"n\">dpos</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">dpos</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">int.nat_abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">int.nat_abs_eq</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.neg_div_of_dvd</span><span class=\"o\">,</span> <span class=\"n\">int.nat_abs_neg</span><span class=\"o\">],</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int.coe_nat_dvd.2</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.coprime_div_gcd_div_gcd</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_pos_of_pos_right</span> <span class=\"n\">_</span> <span class=\"n\">dpos</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 222240384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310417
    },
    {
        "content": "<p>the simplest evidence is this</p>",
        "id": 222240389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310426
    },
    {
        "content": "<p>OK here it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Form the quotient `n / d` where `n:ℤ` and `d:ℕ+` (not necessarily coprime) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk_pnat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">dpos</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n.nat_abs</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">n'.gcd</span> <span class=\"n\">d</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat.le_div_iff_mul_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_pos_of_pos_right</span> <span class=\"n\">_</span> <span class=\"n\">dpos</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">dpos</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">int.nat_abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">/</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">int.nat_abs_eq</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.neg_div_of_dvd</span><span class=\"o\">,</span> <span class=\"n\">int.nat_abs_neg</span><span class=\"o\">],</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">int.coe_nat_dvd.2</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.coprime_div_gcd_div_gcd</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_pos_of_pos_right</span> <span class=\"n\">_</span> <span class=\"n\">dpos</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and this would support my 2nd interpretation of my original problem, namely that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>in the case that I set up.  Which means potentially I need to expand the proof of <code>rat.add</code> to establish that.</p>",
        "id": 222240394,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310436
    },
    {
        "content": "<p>LL39-49:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `rat`, or `ℚ`, is the type of rational numbers. It is defined</span>\n<span class=\"sd\">  as the set of pairs ⟨n, d⟩ of integers such that `d` is positive and `n` and</span>\n<span class=\"sd\">  `d` are coprime. This representation is preferred to the quotient</span>\n<span class=\"sd\">  because without periodic reduction, the numerator and denominator can grow</span>\n<span class=\"sd\">  exponentially (for example, adding 1/2 to itself repeatedly). -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">rat</span> <span class=\"o\">:=</span> <span class=\"n\">mk'</span> <span class=\"o\">::</span>\n<span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">denom</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cop</span> <span class=\"o\">:</span> <span class=\"n\">num.nat_abs.coprime</span> <span class=\"n\">denom</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℚ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span>\n</code></pre></div>",
        "id": 222240398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310439
    },
    {
        "content": "<p>so a rational number is defined to have coprime numerator and denominator</p>",
        "id": 222240404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310450
    },
    {
        "content": "<p>Thanks that gives me a short cut to proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>in my example.</p>",
        "id": 222240415,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310474
    },
    {
        "content": "<p>great</p>",
        "id": 222240455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310487
    },
    {
        "content": "<p>I think.  I'm trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rat_pow2_denom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n  <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222240465,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310517
    },
    {
        "content": "<p>I mean you can probably prove (or maybe even find) that if <code>n</code> and <code>d</code> are coprime then <code>(n / d : \\Q).denom = d</code></p>",
        "id": 222240471,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310524
    },
    {
        "content": "<p>this is the right way to think about it</p>",
        "id": 222240474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310529
    },
    {
        "content": "<p>is to extract lemma</p>",
        "id": 222240481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310543
    },
    {
        "content": "<p>your lemma is false btw, 1/2 + 1/2 = 1/1</p>",
        "id": 222240490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310553
    },
    {
        "content": "<p>also, move the arrows to the left of colon</p>",
        "id": 222240492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310573
    },
    {
        "content": "<p>there's no point to put them to the right of colon and then spend 3 lines to <code>intro</code> them one by one</p>",
        "id": 222240500,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310588
    },
    {
        "content": "<p>I don't know how to put equations and inequalities on the left, just slide them over in parentheses?</p>",
        "id": 222240549,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rat_pow2_denom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222240559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310657
    },
    {
        "content": "<p>Thanks!  Anyway I have to rethink the lemma.</p>",
        "id": 222240567,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310681
    },
    {
        "content": "<p>well you can (and you probably already did) phrase it in terms of the 2-adic valuation</p>",
        "id": 222240611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310725
    },
    {
        "content": "<p>I'm on the trail of Exercise 6F, this is where I'm at (with the lemma wrong):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">rat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rat_pow2_denom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n  <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n  <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n  <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_a_vs_2n_to_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_dvd_of_pos_of_lt</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_ab_vs_2nm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n  <span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n  <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a_vs_2n_to_dvd</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a_vs_2n_to_dvd</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a_vs_2n_to_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">h3.1</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">h4.1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"c\">/-</span><span class=\"cm\"> (1 : M) ∈ carrier) -/</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"c\">/-</span><span class=\"cm\"> {a b} : a ∈ carrier → b ∈ carrier → a * b ∈ carrier) -/</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">rat.mul_num</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"c1\">-- just for context</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">rat.mul_denom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">pow_add</span> <span class=\"mi\">2</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">a.cop</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">coprime</span> <span class=\"n\">at</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"n\">b.cop</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">coprime</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hm</span> <span class=\"n\">at</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h12</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_ab_vs_2nm</span> <span class=\"n\">a.num.nat_abs</span> <span class=\"n\">b.num.nat_abs</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h13</span> <span class=\"o\">:=</span> <span class=\"n\">h12</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h14</span> <span class=\"o\">:=</span> <span class=\"n\">h13</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h15</span> <span class=\"o\">:=</span> <span class=\"n\">int.nat_abs_mul</span> <span class=\"n\">a.num</span> <span class=\"n\">b.num</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h15</span> <span class=\"n\">at</span> <span class=\"n\">h14</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h14</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"c\">/-</span><span class=\"cm\"> (0 : M) ∈ carrier -/</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"c\">/-</span><span class=\"cm\"> {a b} : a ∈ carrier → b ∈ carrier → a + b ∈ carrier -/</span><span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">rat_pow2_denom_sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">rat_pow2_denom_sum</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"n\">h5</span> <span class=\"n\">h6</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem'</span> <span class=\"c\">/-</span><span class=\"cm\"> {x} : x ∈ carrier →d -x ∈ carrier -/</span><span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n <span class=\"o\">}</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">is_an_integral_domain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">sr</span><span class=\"o\">],</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">sr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex6f</span> <span class=\"o\">:</span> <span class=\"n\">is_an_integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">}</span>  <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 222240616,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310732
    },
    {
        "content": "<p>this is just saying that |x| &lt; |y| implies |x+y| = |y|</p>",
        "id": 222240618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310737
    },
    {
        "content": "<p>what is exercise 6f?</p>",
        "id": 222240628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310776
    },
    {
        "content": "<p>The last one here:<br>\n<a href=\"/user_uploads/3121/xTIda_e9KvuLk3HqyHQsoMwn/Screenshot-from-2021-01-10-15-33-13.png\">Screenshot-from-2021-01-10-15-33-13.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xTIda_e9KvuLk3HqyHQsoMwn/Screenshot-from-2021-01-10-15-33-13.png\" title=\"Screenshot-from-2021-01-10-15-33-13.png\"><img src=\"/user_uploads/3121/xTIda_e9KvuLk3HqyHQsoMwn/Screenshot-from-2021-01-10-15-33-13.png\"></a></div>",
        "id": 222240650,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310819
    },
    {
        "content": "<p>well what is your mathematical proof?</p>",
        "id": 222240705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310861
    },
    {
        "content": "<p>you need to know which lemma to extract to make this most efficient</p>",
        "id": 222240715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310892
    },
    {
        "content": "<p>That it's closed under multiplication and addition.</p>",
        "id": 222240718,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610310897
    },
    {
        "content": "<p>the correct lemma is that (a / 2^n) has denominator a power of 2</p>",
        "id": 222240721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310902
    },
    {
        "content": "<p>i.e. \"denominator being a power of 2\" doesn't depend on the representation</p>",
        "id": 222240732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310917
    },
    {
        "content": "<p>I would say that the most crucial skill in formalization is knowing the right lemmas</p>",
        "id": 222240744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310946
    },
    {
        "content": "<p>everything else is secondary</p>",
        "id": 222240752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310959
    },
    {
        "content": "<p>you need to know how to convert from mathematical proof to a rigorous proof</p>",
        "id": 222240796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310976
    },
    {
        "content": "<p>your proof is probably (a/2^m) + (b/2^n) = (a x 2^n + b x 2^m) / 2^(m+n)</p>",
        "id": 222240806,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610310998
    },
    {
        "content": "<p>but you're implicitly using the fact that k / 2^p has denominator a power of 2</p>",
        "id": 222240816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311016
    },
    {
        "content": "<p>i.e. the RHS</p>",
        "id": 222240818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311020
    },
    {
        "content": "<p>At the top level it's easy, if <code>p=a/2^n</code> and <code>q=b/2^m</code> then <code>p * q = (a*b)/2^(n+m)</code>.  However in Lean I think I need to deal with the factor that numerator and denominator are coprime.</p>",
        "id": 222240824,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311028
    },
    {
        "content": "<p>I would say that you don't actually understand the predicate \"whose denominator is a power of 2\"</p>",
        "id": 222240837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311071
    },
    {
        "content": "<p>is 3/6 in that ring?</p>",
        "id": 222240841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311081
    },
    {
        "content": "<p>Yes because <code>3/6 = 3 / (2*3) = 1/2</code>.</p>",
        "id": 222240897,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311120
    },
    {
        "content": "<p>but 6 isn't a power of 2</p>",
        "id": 222240901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311129
    },
    {
        "content": "<p>you see the issue here</p>",
        "id": 222240905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311133
    },
    {
        "content": "<p>what you wrote is <strong>not</strong> a proof that the denominator of p+q is a power of 2</p>",
        "id": 222240917,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311143
    },
    {
        "content": "<p>you proved that p+q = (a x 2^n + b x 2^m) / 2^(m+n)</p>",
        "id": 222240926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311168
    },
    {
        "content": "<p>but you need to prove that any fraction of that form satisfies the predicate</p>",
        "id": 222240931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311181
    },
    {
        "content": "<p>therefore what I said is the correct lemma to extract</p>",
        "id": 222240932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311187
    },
    {
        "content": "<p>that any k/2^N satisfies the predicate</p>",
        "id": 222240936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311197
    },
    {
        "content": "<p>Thanks, I will work on that direction.  I was trying to normalize the result in the proof to be coprime and then prove that the normalized form had the form a/2^m where 2 did not divide a and m was an natural number.</p>",
        "id": 222241003,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311262
    },
    {
        "content": "<p>do you understand why the denominator of k/2^N is always a power of 2?</p>",
        "id": 222241021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311287
    },
    {
        "content": "<p>Yes, I understand how rationals multiply and add and what the result of adding or multiplying two forms of shape a/2^m and b/2^n is.</p>",
        "id": 222241071,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311324
    },
    {
        "content": "<p>I'm talking about just k/2^N</p>",
        "id": 222241078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311356
    },
    {
        "content": "<p>where k is any integer</p>",
        "id": 222241080,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311361
    },
    {
        "content": "<p>and N is any natural number</p>",
        "id": 222241082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311365
    },
    {
        "content": "<p>why is the denominator of k/2^N a power of 2?</p>",
        "id": 222241086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311376
    },
    {
        "content": "<p>By construction of <code>rat</code> in Lean, <code>k</code> and <code>2^N</code> will be coprime at birth.  If that's not the case, and <code>k</code> has a power of <code>2</code> in it, then you can just subtract that from <code>N</code>.  In any event, <code>k</code> as an integer will have a factorization into primes of which 2 may or may not be present.  Am I missing something?</p>",
        "id": 222241157,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311454
    },
    {
        "content": "<p>you can just form <code>(k / 2^N : \\Q)</code></p>",
        "id": 222241205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311556
    },
    {
        "content": "<p>they won't be coprime at birth</p>",
        "id": 222241210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311560
    },
    {
        "content": "<p>In this case, by construction of the problem, the denominator is a power of 2 to begin with, for all the starting numbers.</p>",
        "id": 222241255,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311578
    },
    {
        "content": "<p>But I guess the construction is not specific enough and <code>k</code> could have a power of 2 in it, which you can just subtract from <code>N</code> to normalize.</p>",
        "id": 222241271,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610311624
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">denom_div_two_pow</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222241335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311688
    },
    {
        "content": "<p>this is what I mean</p>",
        "id": 222241337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311690
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">denom_div_two_pow</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">denom_two_pow_iff</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">q.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222241456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311898
    },
    {
        "content": "<p>then the second lemma will help you a lot</p>",
        "id": 222241460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311906
    },
    {
        "content": "<p>or you can \"cheat\" and just claim that the RHS of my lemma is what they mean by \"whose denominators are 1 or a power of 2\"</p>",
        "id": 222241521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311962
    },
    {
        "content": "<p>then you won't have to go through all these <code>denom</code> shenanigans</p>",
        "id": 222241528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610311979
    },
    {
        "content": "<p>Thanks, I will rethink it with your advice.</p>\n<p>My confusion is that you noted <code>9/18=3/6=1/2</code> so there are multiple representatives of a single rational with different denominators in the same sense that <code>0=5=10=15 mod 5</code>.  So to say that denominator  being a power of 2 doesn't depend on the representation assumes a canonical representation.  In the Lean case the canonical representation is that in rational <code>a/m</code>, <code>a</code> and <code>m</code> are coprime.  So it seems safer to say that in the canonical representation, <code>a/2^n</code> has a denominator which is a power of 2, because we aren't seeing other possible representations like <code>(3*a)/(3*2^n)</code>.</p>",
        "id": 222241665,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610312202
    },
    {
        "content": "<p>Indeed, I was wrong when I said that it doesn't depend on the representation</p>",
        "id": 222241729,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610312288
    },
    {
        "content": "<p>but what I wrote in Lean code should be correct</p>",
        "id": 222241732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610312296
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 222241738,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610312315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20the.20denominator.20.20LCD.20in.20rational.20addition.3F/near/222241521\">said</a>:</p>\n<blockquote>\n<p>or you can \"cheat\" and just claim that the RHS of my lemma is what they mean by \"whose denominators are 1 or a power of 2\"</p>\n</blockquote>\n<p>this brings an important point: what they write in mathematics doesn't necessarily correspond to the same notation in Lean</p>",
        "id": 222241827,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610312430
    },
    {
        "content": "<p><code>3 - 5</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>−</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">3 - 5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> don't mean the same thing</p>",
        "id": 222241832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610312439
    },
    {
        "content": "<p>(one is <code>0</code>, the other one is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">-2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span></span></span></span>)</p>",
        "id": 222241837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610312447
    },
    {
        "content": "<p>there is no point following a definition verbatim</p>",
        "id": 222241855,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610312479
    },
    {
        "content": "<p>I think this reflects your advice and eliminates the dependency on the canonical representation, and also doesn't cause <code>slim_check</code> to produce a counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_injective</span>\n        <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n        <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n        <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">plus_injective</span>\n        <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n        <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n        <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222250871,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610326105
    }
]