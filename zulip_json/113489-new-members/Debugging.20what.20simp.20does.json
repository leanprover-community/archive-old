[
    {
        "content": "<p>How can I see what <code>simp</code> is doing? Concretely, I have the following script, which works, but I want to avoid the begin / end and also the simp. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.arrow</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v₁</span> <span class=\"n\">u₁</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">square_of_comp_top_bottom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">arrow.mk</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">obviously</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">arrow.hom_mk</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 231544700,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616533937
    },
    {
        "content": "<p><code>squeeze_simp</code> and then replace with the proposed output</p>",
        "id": 231544979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616534062
    },
    {
        "content": "<p>And should that be a <code>def</code> since the hom is data?</p>",
        "id": 231545441,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616534282
    },
    {
        "content": "<p>Ah, yes, it should be a <code>def</code>.</p>",
        "id": 231545807,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616534453
    },
    {
        "content": "<p>In this case, you're using tactics to make data. The tactics are very straightforward, so it's fine here, but the idiomatic way might be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square_of_comp_top_bottom'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">arrow.mk</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">arrow.hom_mk</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">obviously</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 231545878,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616534485
    },
    {
        "content": "<p>OK, thanks, will do that!</p>",
        "id": 231546071,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616534603
    },
    {
        "content": "<p>You also might prefer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square_of_comp_top_bottom''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">arrow.mk</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">arrow.hom_mk'</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231546892,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616534962
    },
    {
        "content": "<p>because <code>arrow.hom_mk'</code> is specifically about making homs of the form <code>arrow.mk f ⟶ arrow.mk g</code></p>",
        "id": 231547023,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616535011
    },
    {
        "content": "<p>Fully explicit (no need to, just for interest):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">square_of_comp_top_bottom''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">arrow.mk</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">arrow.hom_mk'</span> <span class=\"o\">(</span><span class=\"n\">category.comp_id</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 231547464,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616535196
    }
]