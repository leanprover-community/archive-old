[
    {
        "content": "<p>Quick question: If I have <code>{my_field := expression}.my_field</code>,<br>\nthen how can I simplify this to <code>expression</code>? <code>simp</code> works, but I'd like to know what function I would have to apply to perform this manually.<br>\nAs always, thanks for all the help I'm getting here!</p>",
        "id": 213769778,
        "sender_full_name": "Golol",
        "timestamp": 1603105601
    },
    {
        "content": "<p><code>dsimp only</code></p>",
        "id": 213770170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603105857
    },
    {
        "content": "<p>In term mode, you don't have to apply anything at all to perform this reduction</p>",
        "id": 213770482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106050
    },
    {
        "content": "<p>it will just naturally happen if you apply a theorem that wouldn't otherwise typecheck</p>",
        "id": 213770500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106068
    },
    {
        "content": "<p>in fact, this is what <code>refl</code> does - you apply a theorem that says <code>a = a</code> but the two sides aren't obviously the same so lean performs reduction until they are</p>",
        "id": 213770520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603106107
    },
    {
        "content": "<p>I have a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">j</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">\\</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n<p>how can I apply this to prove the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"bp\">|</span>  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">j</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n\n<p>I thought I could rw h or intro a but it doesn't work.</p>",
        "id": 213794342,
        "sender_full_name": "Golol",
        "timestamp": 1603118023
    },
    {
        "content": "<p>Start with <code>ext a</code></p>",
        "id": 213794535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603118077
    },
    {
        "content": "<p>Also have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.ext\">docs#set.ext</a></p>",
        "id": 213795123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603118332
    },
    {
        "content": "<p>which, by the way, is an application of <code>set.ext</code> in term mode</p>",
        "id": 213795134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603118339
    },
    {
        "content": "<p>Ha ha! I was faster!</p>",
        "id": 213795186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603118364
    },
    {
        "content": "<p>omg thx guys :D</p>",
        "id": 213795353,
        "sender_full_name": "Golol",
        "timestamp": 1603118416
    },
    {
        "content": "<p>Golol, what we mean is you can have a look at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.ext</span> <span class=\"n\">h</span>\n<span class=\"c1\">--funext (λ x, propext $ h x)</span>\n</code></pre></div>",
        "id": 213795378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603118427
    },
    {
        "content": "<p>where the commented line is the proof hidden under <code>set.ext h</code></p>",
        "id": 213795420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603118445
    },
    {
        "content": "<p>Aah, good old functional extensionality</p>",
        "id": 213795831,
        "sender_full_name": "Golol",
        "timestamp": 1603118606
    },
    {
        "content": "<p>Alright, I need this one extra thing. My situation is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m.is_measurable'</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">measurable_space.generate_measurable</span> <span class=\"n\">m.is_measurable'</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n<p>Here I know that the inductively generated type <code>measurable_space.generate_measurable m.is_measurable'</code><br>\nmust at least make every set measurable which is in m.is_measurable' due to the constructor basic.<br>\nI couldn't manage to do induction on  measurable_space.generate_measurable m.is_measurable... how can I use that with the basic case I can finish my proof?</p>",
        "id": 213807170,
        "sender_full_name": "Golol",
        "timestamp": 1603123089
    },
    {
        "content": "<p>There is nothing to induct on here, just use the constructor <code>basic</code> as you said.</p>",
        "id": 213809995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603124392
    },
    {
        "content": "<p>Induction is the opposite process--\"destructing\" a value of type <code>generate_measurable ...</code>. Here <code>generate_measurable</code> is in the goal, so you want to construct a value, which is what the constructors do.</p>",
        "id": 213810189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603124468
    },
    {
        "content": "<p>Oh of course, I was totally stuck on this. Finally done!</p>",
        "id": 213810733,
        "sender_full_name": "Golol",
        "timestamp": 1603124690
    }
]