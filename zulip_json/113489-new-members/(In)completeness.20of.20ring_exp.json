[
    {
        "content": "<p>Hello. It seems to me that mathlib's <code>ring_exp</code> is incomplete. For example, it does not solve the following goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there any idea on how to fix this issue and guarantee completeness? I'm actually interested in reimplementing <code>ring_exp</code> in Coq (for MathComp) using computational reflection rather than fixing this issue in mathlib. Since I have to prove the correctness of the procedure in that scenario, it would be nice to have a complete procedure first (so that I don't have to fix the procedure and the proof again and again).</p>",
        "id": 271420771,
        "sender_full_name": "Kazuhiko Sakaguchi",
        "timestamp": 1644494243
    },
    {
        "content": "<p>I think this kind of question is quite subtle, e.g. <a href=\"https://en.wikipedia.org/wiki/Tarski%27s_high_school_algebra_problem\">https://en.wikipedia.org/wiki/Tarski%27s_high_school_algebra_problem</a></p>",
        "id": 271423842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644496079
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 271438861,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644503528
    },
    {
        "content": "<p>Good catch! There's no real support for addition under an exponent, so it doesn't really surprise me something goes wrong here, but it should do better than this so let me see if I can fix it...</p>",
        "id": 271445181,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644506132
    },
    {
        "content": "<p>Aha, so it rewrites <code>a * (b + c)</code> to <code>a * b + a * c</code> and then gives up because there is no rule for <code>(_ + _) ^ _</code>.</p>",
        "id": 271447062,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644506841
    },
    {
        "content": "<p>I don't see an easy way to modify the current <code>ring_exp</code> procedure so it solves this goal. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 271450769,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644508348
    },
    {
        "content": "<p>Is <code>ring_exp</code> intended to be a decision procedure? Is its range of applicability known?</p>",
        "id": 271459239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644511749
    },
    {
        "content": "<p>Like Reid says, an actual decision procedure for this grammar seems technically challenging at best and provably impossible at worst</p>",
        "id": 271459401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644511819
    },
    {
        "content": "<p>It's a simplification procedure extending the language of rings to allow polynomial expressions in the exponents of (products of) variables.</p>",
        "id": 271561253,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644577826
    },
    {
        "content": "<p>So any additions appearing under an exponentiation will be handled best-effort (which is not very good as you just showed)</p>",
        "id": 271561360,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644577910
    },
    {
        "content": "<p>In the case of Tarski's high school algebra problem, the Wikipedia article says that the source of incompleteness is the lack of the opposite operator. So it does not seem to directly apply to <code>ring_exp</code>. But indeed, \"this problem is actually undecidable\" is one of the answers I expected.<br>\nAnyway, thanks for the feedback. The way I see this problem is the rewriting rules are not confluent (modulo AC). So known facts or techniques in term rewriting may answer this question.</p>",
        "id": 271776633,
        "sender_full_name": "Kazuhiko Sakaguchi",
        "timestamp": 1644801593
    },
    {
        "content": "<p>That's true but if you allow <code>-</code> in the syntax then it becomes a bit unclear what the domain of the decision procedure should even be--after all you can't raise an element of a ring to a negative power.</p>",
        "id": 271779354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644805673
    },
    {
        "content": "<p>My understanding is that the syntax is multi sorted and an exponent must be a natural number. But then, what <code>ring_exp</code> accepts as an exponent is a semiring expression with exponents. Now I see the problem you pointed out.</p>",
        "id": 271779797,
        "sender_full_name": "Kazuhiko Sakaguchi",
        "timestamp": 1644806427
    }
]