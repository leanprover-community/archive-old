[
    {
        "content": "<p>Hey, so I'm currently learning lean and I'm trying to formalize a bit of abstract algebra for self learning purposes so i got this class representing a semigroup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and now I'd basically like to define exponentiation for this class. So I went ahead and wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pow</span> <span class=\"o\">{</span><span class=\"n\">SG</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">SG</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SG</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">SG</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and rightfully so lean does now complain about the fact that I didnt define my pattern for the natural number 0, however this is only possible inside a monoid as far as I'm concerned since a^0 = 1 which is not something I can express inside a semigroup i believe. So my question would be whether there is some way to still formalize what i want by basically saying that this function only works for \"any nat greater than 0\"? Or do i have to give up defining this function for a semigroup and instead use a monoid?</p>",
        "id": 235073567,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1618753896
    },
    {
        "content": "<p>You could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs#pnat</a> (<code>ℕ+</code>) instead of nat</p>",
        "id": 235074009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618754332
    },
    {
        "content": "<p>Looks just like what I needed, thank you!</p>",
        "id": 235074053,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1618754397
    },
    {
        "content": "<p>So I now ended up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pow</span> <span class=\"o\">{</span><span class=\"n\">SG</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">half_group</span> <span class=\"n\">SG</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SG</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pnat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">SG</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">one</span>  <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">pnat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but pnat.succ isn't actually defined...and I can't use nat.succ anymore either. Any idea on what the correct notation for this would be?</p>",
        "id": 235074892,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1618755181
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">henrik</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pow</span> <span class=\"o\">{</span><span class=\"n\">SG</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">SG</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SG</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pnat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">SG</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_asymm</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">n.succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ_le_succ</span> <span class=\"n\">rfl.le</span><span class=\"o\">,</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">n.zero_lt_succ</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">henrik</span>\n</code></pre></div>",
        "id": 235077271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618757642
    }
]