[
    {
        "content": "<p>Hey, i have defined an infix like this (the meaning is not important)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kn\">local</span> <span class=\"kd\">infix</span>  <span class=\"bp\">`</span> <span class=\"bp\">⊔</span> <span class=\"bp\">`</span><span class=\"o\">:</span> <span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span>\n</code></pre></div>\n<p>I have set <code>set_option trace.simplify.rewrite true</code>. When <code>simp</code> uses anything with this infix, the infix is in the infoview written out as <code>λ P Q: Form, (P ⇒ Q) ⇒ Q</code>. Is there some way how to make lean print in the infoview <code>P ⊔ Q</code> instead?</p>",
        "id": 279846766,
        "sender_full_name": "jachym simon",
        "timestamp": 1650644664
    },
    {
        "content": "<p>I think \"what <code>simp</code> does\" and \"notation\" are two different things. What happens if you remove <code>@[simp]</code> and don't do the <code>set_option</code>?</p>",
        "id": 279848376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650645501
    },
    {
        "content": "<p>Turns out the <code>@[simp]</code> tag is not needed</p>",
        "id": 279849855,
        "sender_full_name": "jachym simon",
        "timestamp": 1650646052
    },
    {
        "content": "<p>The problem is, that <code>simp</code> is doing crazy things while proving some lemmas and i wanted to know, what is it doing. So i have set <code>set_option</code> to see the steps it did, but since its using <code>λ..., ...</code> instead <code>⊔ </code> in the infoview it is just a big mess i cant orient in.</p>",
        "id": 279850197,
        "sender_full_name": "jachym simon",
        "timestamp": 1650646235
    },
    {
        "content": "<p>I had no idea that was legal syntax</p>",
        "id": 279850795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650646558
    },
    {
        "content": "<p>You need to give that operator a name for lean to pretty-print it, is my guess</p>",
        "id": 279850904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650646591
    },
    {
        "content": "<p>Why not declare a <code>has_sup</code> instance?</p>",
        "id": 279850920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650646604
    },
    {
        "content": "<p>If infix works the same here as it does in Lean 4 this notation does make sense since notation commands basically expand into parser declarations though tagging the parser itself with simp will of course not have the desired effect^^</p>",
        "id": 279851036,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650646659
    },
    {
        "content": "<p>Maybe you would have more luck with (if I got the syntax right)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">P</span> <span class=\"bp\">`</span> <span class=\"bp\">⊔</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span>\n</code></pre></div>",
        "id": 279851628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650646905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20rid.20of.20lambda.20in.20the.20infoview/near/279850920\">said</a>:</p>\n<blockquote>\n<p>Why not declare a <code>has_sup</code> instance?</p>\n</blockquote>\n<p>This unfortunately works just half way for me. It prints nicely, but for some reason breaks some usages in lemmas i have in my code other things</p>",
        "id": 279852696,
        "sender_full_name": "jachym simon",
        "timestamp": 1650647390
    },
    {
        "content": "<p>Does <code>Form</code> have a <code>le</code> operator? Does it respect the rules of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semilattice_sup\">docs#semilattice_sup</a>?</p>",
        "id": 279852865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650647465
    },
    {
        "content": "<p>The <code>Form</code>  is a type that represents logical formulas. It doesnt have <code>le</code> operator</p>",
        "id": 279853044,
        "sender_full_name": "jachym simon",
        "timestamp": 1650647556
    },
    {
        "content": "<p>Its defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n</code></pre></div>",
        "id": 279853112,
        "sender_full_name": "jachym simon",
        "timestamp": 1650647615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20rid.20of.20lambda.20in.20the.20infoview/near/279851628\">said</a>:</p>\n<blockquote>\n<p>Maybe you would have more luck with (if I got the syntax right)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">P</span> <span class=\"bp\">`</span> <span class=\"bp\">⊔</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It seems this works the same way as the infix, but does not change the printing unfortunatelly</p>",
        "id": 279853290,
        "sender_full_name": "jachym simon",
        "timestamp": 1650647704
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⇒</span> <span class=\"n\">Q</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⊔</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 279853732,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650647931
    },
    {
        "content": "<p>The <code>has_sup</code> instance actually works. I was confused, because it messed up the binding strength, so i had to add brackets to some places</p>",
        "id": 279853939,
        "sender_full_name": "jachym simon",
        "timestamp": 1650648060
    }
]