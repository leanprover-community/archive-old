[
    {
        "content": "<p>I have found <a href=\"https://proofassistants.stackexchange.com/questions/1115/how-usable-is-lean-for-constructive-mathematics\">this StackExchange thead (\"How usable is Lean for constructive mathematics?\")</a> via the search functionality of Zulip (searching for \"HoTT\") which seems to answer my question about the relationship between Lean mathlib and HoTT: </p>\n<blockquote>\n<p>I think there are a few things which are clear:</p>\n<ul>\n<li>\n<p>Lean's <code>mathlib</code> library is by design fully classical.  This isn't a strange decision in that most non-DTT proof assistant libraries like metamath/set.mm, Mizar/MML, Isabelle/HOL/AFP, and HOL-Light all (to my understanding) have the same classical centric design principle.  But it does mean that if one wants to do constructive mathematics in Lean, one would likely need to avoid <code>mathlib</code>.</p>\n</li>\n<li>\n<p>Lean without any extra axioms is constructive, for some definition of constructive.  I believe, but maybe I'm mistaken, that Lean without axioms is basically propositionally equivalent to Coq with the axiom of unique identity proofs (UIP) (ignoring maybe differences in how they handle universes and a few other minor things).  Since Lean has UIP it can't directly handle HoTT (at least not without the tricks used in the [Lean 3 HoTT Library][3]), but that it should be otherwise very similar to base Coq (with UIP).  Also Lean and Coq have different definitional/computational properties (namely Lean's subsingleton elimination + proof irrelevance can break transitivity of definitional equality and therefore break subject reduction), which I know some constructivists might not consider ideal.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 289246058,
        "sender_full_name": "Elliot Evans",
        "timestamp": 1657571464
    },
    {
        "content": "<p>In <a href=\"https://proofassistants.stackexchange.com/questions/153/what-are-the-main-differences-between-coq-and-lean/183#183\">this related StackEchange thread (\"What are the main differences between Coq and Lean?\")</a> Jason Rute gave an answer containing this statement:</p>\n<blockquote>\n<p>[...] There is a strong emphasis on unity and cohesion in this library [Lean Mathlib]. It is constantly refactored to make it work well together. This (according to Lean users) makes it possible to easily combine separate areas of mathematics [...]</p>\n</blockquote>\n<p>I appreciated this statement. </p>\n<p>I have a remaining question: Is there documentation or discussion on this \"unity and cohesion\" or strategy around refactors in the community? </p>\n<p>Thank you</p>",
        "id": 289247168,
        "sender_full_name": "Elliot Evans",
        "timestamp": 1657572053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"349918\">Elliot Evans</span> <a href=\"#narrow/stream/113489-new-members/topic/understanding.20.22Unity.20and.20Cohesion.22.20in.20mathlib/near/289243467\">said</a>:</p>\n<blockquote>\n<p>Hi all, I am new here and I am interested in understanding the broader context that the lean theorem proving community operates within. <del>Does this community use HoTT/Univalent foundations? If not,</del> is there a write-up about the holistic strategy behind ensuring that this library of proofs will be able to scale and grow? Please excuse me if I have asked this in an incorrect or innapropriate manner, I am just trying to jump in :)</p>\n</blockquote>\n<p>Welcome and sorry for the late reply! The most official answer to your question is <a href=\"https://dl.acm.org/doi/10.1145/3372885.3373824\">in the paper on mathlib</a>, especially Section 7 and 8.</p>",
        "id": 289449528,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657714571
    },
    {
        "content": "<p>In my opinion, mathlib is good at scaling because refactoring is easy: anything hindering growth is available to be removed, and in general there are little obstacles to refactoring beyond making the technical aspects work and convincing at least one maintainer that it's a good plan. An important aspect is that mathlib basically doesn't care about backwards compatibility.</p>",
        "id": 289449821,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657714757
    },
    {
        "content": "<p>Lack of backwards compatibility also means it's the responsibility of any project depending on mathlib to keep up to date. So authors have an incentive to make their project part of mathlib, in order to move the maintenance obligations to the mathlib maintainers. And that means mathlib keeps growing.</p>",
        "id": 289450020,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657714866
    }
]