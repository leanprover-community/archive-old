[
    {
        "content": "<p>I'm struggling with things that seem definitionally equivalent to me but either they aren't or I don't know how to replace a term with it's definition...<br>\nI have a hypothesis</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">algebra.finite_type</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and if I Ctrl-click on this I get the following two definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span>\n<span class=\"kd\">def</span> <span class=\"n\">algebra.finite_type</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fg</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>Inside my <code>begin ... end</code> block I would therefore use <code>h</code> to get a concrete such <code>t</code>, can somebody help me with the syntax for this unravelling definitions?</p>",
        "id": 227620601,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614182254
    },
    {
        "content": "<p>That sounds right. What do you mean by using <code>h</code>? Are you saying that (something like) <code>rcases h with ⟨t, ht⟩</code> failed?</p>",
        "id": 227621913,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614182549
    },
    {
        "content": "<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 227622070,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614182588
    },
    {
        "content": "<p>Yes that's it, thank you!</p>",
        "id": 227622772,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614182752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> or maybe it only worked partially. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.finiteness</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_alg_has_basis</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">algebra.finite_type</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>if I do <code>rcases h2 ...</code> it works, but <code>rcases h1 ...</code> doesn't. I thought <code>h2</code> would be equivalent to <code>h1</code>, it's just merging the two definitions manually.</p>",
        "id": 227626408,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614183798
    },
    {
        "content": "<p>Putting <code>simp only [algebra.finite_type] at h1,</code> before <code>rcases</code> works.</p>",
        "id": 227627888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614184241
    },
    {
        "content": "<p>This will be of little help since I don't understand what happens, but unfolding algebra.finite_type before doing rcases works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.finiteness</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_alg_has_basis</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">algebra.finite_type</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">algebra.finite_type</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Without the unfold, the error at the <code>rcases</code> is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">revert</span> <span class=\"bp\">'</span><span class=\"n\">h1'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">frozen</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">possible</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">reset</span> <span class=\"n\">the</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"kn\">local</span> <span class=\"n\">instances</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I put it here in case it helps someone else who can explain what those things are. It is the first time I encounter frozen local instances and I don't know what they are.</p>",
        "id": 227627911,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614184249
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> and <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>, these are both very useful tactics!</p>",
        "id": 227628809,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1614184517
    },
    {
        "content": "<p>I guess the way using <code>unfreezing</code> is to wrap the <code>rcases</code>like this: <code>unfreezingI { rcases h1 with ⟨t, ht⟩, },</code></p>",
        "id": 227629037,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614184582
    },
    {
        "content": "<p>You can also write <code>rw</code> instead of <code>unfold</code> in my solution.</p>",
        "id": 227629078,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1614184597
    },
    {
        "content": "<p>There's more about <code>unfreezingI</code> in our tactic docs <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">here</a>.</p>",
        "id": 227629132,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614184624
    },
    {
        "content": "<p>Hmm, I guess that page doesn't say much about frozen local instances either, actually. But I guess the error message says the important part: <code>rcases</code> isn't able to work with a frozen local instance, so we have to unfreeze it.</p>",
        "id": 227629778,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614184826
    },
    {
        "content": "<p>But it shouldn't be necessary to do the unfreezing. There should be a lemma to do this for you. If it's not there, that's a hole in the API which should be fixed.</p>",
        "id": 227632189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614185694
    },
    {
        "content": "<p>But it seems to be missing <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 227632645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614185840
    }
]