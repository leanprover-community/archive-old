[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">head</span>\n</code></pre></div>\n<p>gives me <code>Π {α : Type u_1} [_inst_1 : inhabited α], list α → α</code>.<br>\nHow should I interpret the [] here and what is the function of [] here?</p>",
        "id": 241373834,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622717102
    },
    {
        "content": "<p>It is a typeclass argument. It links in to a system for automatically generating such proofs called typeclass inference</p>",
        "id": 241374093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622717283
    },
    {
        "content": "<p>Here <code>inhabited A</code> means <code>A</code> has a distinguished/default/arbitrary element, and <code>list.head</code> will use that element when the list is empty</p>",
        "id": 241374159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622717329
    },
    {
        "content": "<p>so when you write <code>list.head ([] : list nat)</code> you will get <code>0</code> because <code>0</code> is the default element of <code>nat</code></p>",
        "id": 241374210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622717373
    },
    {
        "content": "<p>which is supplied by the proof that nat is inhabited, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.inhabited\">docs#nat.inhabited</a></p>",
        "id": 241374245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622717402
    },
    {
        "content": "<p>Since <code>empty</code> is not an inhabited type, however, <code>list.head ([] : list empty)</code> is an error, and it has to be because otherwise it would have type <code>empty</code> which would allow us to prove false</p>",
        "id": 241374362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622717476
    },
    {
        "content": "<p>Unlike haskell, lean has no ability to \"throw an error\" instead of evaluating to a value, so this function looks a bit different from haskell's <code>List.head</code> function</p>",
        "id": 241374509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622717577
    },
    {
        "content": "<p>So is <code>_inst_1</code> in <code>[_inst_1 : inhabited α]</code> nothing more than an identifier?</p>",
        "id": 241377441,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622719670
    },
    {
        "content": "<p>Yes, <code>Π {α : Type u_1} [inhabited α], list α → α</code> means the same thing</p>",
        "id": 241377535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622719724
    },
    {
        "content": "<p>(Obligatory <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> chapter link: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a>)</p>",
        "id": 241387715,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622725673
    }
]