[
    {
        "content": "<p>About a month ago, I started learning Lean and joined this Zulip chat, but I never actually introduced myself. I'm an undergrad IT student from eastern Europe. I was using Isabelle/HOL in the past and decided to move to Lean because dependent types are definitely more expressive than simple types. I am looking for some simple lemma to start my first contribution to mathlib!</p>\n<p>I skimmed through <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">https://leanprover-community.github.io/undergrad_todo.html</a>, but I'm not too much experienced in any of those. I am familiar with undergrad math (except topology and vector spaces), however I'm not on that level that I could easily prove complex theorems in advanced math fields. Instead, my study program is particularly focused on algorithms and data structures. I know a wide range of algorithms, data structures, their complexities and properties.</p>\n<p>So I want to ask for an advice on what lemmas about algorithms and data structures are currently missing in mathlib. I have some ideas, but I don't want to reinvent the wheel if what I'm thinking about already exists, but I'm not aware of it.</p>",
        "id": 265392290,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639803007
    },
    {
        "content": "<p>FWIW, <a href=\"https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets\">https://github.com/leanprover-community/mathlib/wiki/Undergrad-TODO-trivial-targets</a> is a more accessible version of that yaml file, which points out where the easiest bits are.</p>",
        "id": 265394318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639806131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> Welcome! I agree that the list that Eric posted is a very good way to get started if you want to add some maths.</p>",
        "id": 265396890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639809479
    },
    {
        "content": "<p>There hasn't been much focus on verified algorithms in mathlib so far. So the best thing to do would be to pick something you like, and ask if it's already done on this chat. Most likely it won't be done yet.</p>",
        "id": 265397014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639809614
    },
    {
        "content": "<p>Basically, we only have a verified quicksort algorithm <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> (I'm exaggerating a little bit.)</p>",
        "id": 265397022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639809636
    },
    {
        "content": "<p>I've started working on some verified algorithms in mathlib4, like <a href=\"https://github.com/leanprover-community/mathlib4/pull/136\">mathlib4#136</a> . For various reasons it didn't seem to be as useful in lean 3</p>",
        "id": 265397313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639810088
    },
    {
        "content": "<p>I guess we've been concentrating on the maths which gets taught in maths departments, and in maths departments all this algorithm analysis is thought of as a bit niche (because a lot of modern mathematics doesn't focus on algorithms). In algebraic number theory there are people who study the computational side of things (\"this factoring algorithm is quicker than this one\") but that's only one small area and the analysis is usually not at all deep</p>",
        "id": 265407731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639818852
    },
    {
        "content": "<p>If you're interested in automata, my branch <a href=\"https://github.com/leanprover-community/mathlib/tree/regex_nfa\">branch#regex_nfa</a> needs some love. It constructs a NFA from a regular expression. I haven't yet had time to clean it up, so feel free to take over.</p>",
        "id": 265408662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639820256
    },
    {
        "content": "<p>In combinatorics, we have a lot of these bounds, but as Kevin said the analysis is usually not that deep.</p>",
        "id": 265408739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639820306
    },
    {
        "content": "<p>However, <a href=\"https://github.com/leanprover-community/mathlib/pull/10645\">#10645</a> does aim to verify an algorithm. The algorithm in questions calculates small <a href=\"https://en.wikipedia.org/wiki/Roth's_theorem_on_arithmetic_progressions#Extensions_and_Generalizations\">Roth numbers</a>.</p>",
        "id": 265408841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639820452
    },
    {
        "content": "<p>Thanks for the suggestions. As I can see, Lean 3 leans towards abstract maths rather than actual algorithms, which makes perfect sense for a theorem prover. Is the interest going to <del>shift</del> expand towards practical algorithms in Lean 4? I can imagine big corporations using Lean 4 as a tool for verifying the correctness of their complex systems. Currently, there is very little tools for that in mathlib.</p>\n<p>Regarding the Trivial TODO list, it's nice, but I don't see much of a point in stealing such a good starting lemmas from someone who studies maths and who would enjoy proving those lemmas much more than me.</p>\n<p>For the algorithms, I was thinking about implementing and verifying: all kinds of sorting algorithms and comparing their performances, binary tree search algorithms, AVL trees, RedBLack trees, Bellman-Held-Karp and TSP, Dantzig and Gomory's cutting plane algorithm, SAT algorithms (DPLL, CDCL, Cube-and-Conquer, brute-force, ...), Dijkstra's graph algorithms, dynamic programming, A* graph search, Nelder-Mead simplex, serializing and deserializing common data structures, linked list operations, etc.</p>\n<p>I was also thinking about formalizing some interesting, but probably not very useful theorems, such as: cellular automata (Conway's GoL, Langton's ant, Rule 110, ...), Turing-completeness of various obscure computational models, complexity class of some games (P-space completeness of Sokoban, for example). I also recently read a paper with the solution to the Conway's Angel problem, and I think I understand their solution enough to be able to formalize the proof. But I believe none of these is much of a benefit to mathlib.</p>\n<p>So, what do you think? Is any of these ideas worth effort to become a part of mathlib? Or should I wait for Lean 4 to be finished and see what the new bias regarding verified algorithms will be?</p>",
        "id": 265410383,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639822513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20contribution/near/265410383\">said</a>:</p>\n<blockquote>\n<p>Is the interest going to shift towards practical algorithms in Lean 4?</p>\n</blockquote>\n<p>I hope it will <em>expand</em>, yes. But not <em>shift</em>, please <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 265410522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639822699
    },
    {
        "content": "<p>Things like RB trees have a native implementation in Lean 3. Which means they are fast, and implemented in C++, but you can't prove anything about them. There is also a Lean 3 implementation in mathlib, and you can prove things about it, but you can't use them in practice because they are slow.</p>",
        "id": 265410550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639822802
    },
    {
        "content": "<p>All of this sounds very cool and you're very welcome to prove \"useless\" stuff. That's what the <code>archive.</code> directory is for. Note that we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rbtree\">docs#rbtree</a> and you might also be interested in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ord_node\">docs#ord_node</a>.</p>",
        "id": 265410588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639822807
    },
    {
        "content": "<p>When it comes to formalizing algorithms, you often have to decide whether your interest is theoretical or practical. Are you interested in actually having code that runs efficiently and is used in actual applications, or are you interested in proving correctness and/or runtime bounds? The two are almost entirely orthogonal and neither is trivial</p>",
        "id": 265410692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639822958
    },
    {
        "content": "<p>For mathlib4, I'm focusing on practical algorithms, which biases toward simple data structures like red-black trees, dynamic arrays, hash maps, priority queues; common reusable algorithms like Dijkstra, string searching and regex compilation (applied to real unicode strings, not an abstract alphabet); and algorithms specific to theorem proving like Knuth-Bendix completion, unification, SAT algorithms, congruence closure, and quantifier elimination.</p>",
        "id": 265410855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639823257
    },
    {
        "content": "<p>One interesting project which is fairly self contained is to build a high quality sort algorithm. Lean has never had anything more complicated than quicksort and mergesort</p>",
        "id": 265410919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639823343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20contribution/near/265410855\">said</a>:</p>\n<blockquote>\n<p>For mathlib4, I'm focusing on practical algorithms,..., unification, ...</p>\n</blockquote>\n<p>Any particular <a href=\"https://en.wikipedia.org/wiki/Unification_(computer_science)\">unification</a>? I myself have an interest in <a href=\"https://en.wikipedia.org/wiki/Unification_(computer_science)#Syntactic_unification_of_first-order_terms\">Syntactic unification of first-order terms</a></p>\n<p>As this is moving off topic, feel free to move to a new topic.</p>",
        "id": 265412219,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1639825320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20contribution/near/265410919\">said</a>:</p>\n<blockquote>\n<p>One interesting project which is fairly self contained is to build a high quality sort algorithm. Lean has never had anything more complicated than quicksort and mergesort</p>\n</blockquote>\n<p><a href=\"http://www.envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/\">TimSort</a>? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 265415163,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1639829555
    }
]