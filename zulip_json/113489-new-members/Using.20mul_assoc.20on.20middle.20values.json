[
    {
        "content": "<p>Hi, how would I manipulate mul_assoc to encapsulate the middle values of an equation in parenthesis?</p>",
        "id": 246930300,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627009589
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mid_mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">â„‚</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>  <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246930315,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627009615
    },
    {
        "content": "<p>When rewriting, you can use <code>mul_assoc a b c</code> to specify exactly what three variables to apply the lemma to. I would just use <code>simp [mul_assoc]</code> to associate everything in sight, and that should close the goal</p>",
        "id": 246930549,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627009860
    },
    {
        "content": "<p>Ahh okay, thank you!</p>",
        "id": 246930792,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627010171
    },
    {
        "content": "<p>There is also the tactic ac_refl, which uses available associativity lemmas to find a rfl proof. Underused in mathlib</p>",
        "id": 246930873,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627010305
    }
]